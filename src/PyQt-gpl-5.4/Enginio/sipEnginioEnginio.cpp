/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:30 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIEnginio.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/Enginio/enginio.sip"
#include <enginio.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\Enginio/sipEnginioEnginio.cpp"



/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Enginio(void *, const sipTypeDef *);}
static void *cast_Enginio(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Enginio)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Enginio(void *, int);}
static void release_Enginio(void *sipCppV,int)
{
    delete reinterpret_cast<Enginio *>(sipCppV);
}


extern "C" {static void dealloc_Enginio(sipSimpleWrapper *);}
static void dealloc_Enginio(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Enginio(sipGetAddress(sipSelf),0);
    }
}

static sipEnumMemberDef enummembers_Enginio[] = {
    {sipName_AccessControlOperation, static_cast<int>(Enginio::AccessControlOperation), 3},
    {sipName_Authenticated, static_cast<int>(Enginio::Authenticated), 1},
    {sipName_Authenticating, static_cast<int>(Enginio::Authenticating), 1},
    {sipName_AuthenticationFailure, static_cast<int>(Enginio::AuthenticationFailure), 1},
    {sipName_BackendError, static_cast<int>(Enginio::BackendError), 2},
    {sipName_CreatedAtRole, static_cast<int>(Enginio::CreatedAtRole), 4},
    {sipName_CustomPropertyRole, static_cast<int>(Enginio::CustomPropertyRole), 4},
    {sipName_FileOperation, static_cast<int>(Enginio::FileOperation), 3},
    {sipName_IdRole, static_cast<int>(Enginio::IdRole), 4},
    {sipName_JsonObjectRole, static_cast<int>(Enginio::JsonObjectRole), 4},
    {sipName_NetworkError, static_cast<int>(Enginio::NetworkError), 2},
    {sipName_NoError, static_cast<int>(Enginio::NoError), 2},
    {sipName_NotAuthenticated, static_cast<int>(Enginio::NotAuthenticated), 1},
    {sipName_ObjectOperation, static_cast<int>(Enginio::ObjectOperation), 3},
    {sipName_ObjectTypeRole, static_cast<int>(Enginio::ObjectTypeRole), 4},
    {sipName_SyncedRole, static_cast<int>(Enginio::SyncedRole), 4},
    {sipName_UpdatedAtRole, static_cast<int>(Enginio::UpdatedAtRole), 4},
    {sipName_UserOperation, static_cast<int>(Enginio::UserOperation), 3},
    {sipName_UsergroupMembersOperation, static_cast<int>(Enginio::UsergroupMembersOperation), 3},
    {sipName_UsergroupOperation, static_cast<int>(Enginio::UsergroupOperation), 3},
};


pyqt5ClassTypeDef sipTypeDef_Enginio_Enginio = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_Enginio,
        {0}
    },
    {
        sipNameNr_Enginio,
        {0, 0, 1},
        0, 0,
        20, enummembers_Enginio,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Enginio,
    0,
    0,
    0,
    release_Enginio,
    cast_Enginio,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
