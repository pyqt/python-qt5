/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:06 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKitWidgets.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qwebpage.sip"
#include <qwebpage.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 62 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qwebframe.sip"
#include <qwebframe.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 26 "sip/QtWebKit/qwebsecurityorigin.sip"
#include <qwebsecurityorigin.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qwebpage.sip"
#include <qwebpage.h>
#line 382 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qwebpage.sip"
#include <qwebpage.h>
#line 53 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 59 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 62 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 26 "sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 65 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 68 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 26 "sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 71 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 26 "sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 74 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qwebpage.sip"
#include <qwebpage.h>
#line 215 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qwebpage.sip"
#include <qwebpage.h>
#line 79 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qwebpage.sip"
#include <qwebpage.h>
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qwebpage.sip"
#include <qwebpage.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 452 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qwebpage.sip"
#include <qwebpage.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 26 "sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 26 "sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 26 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 50 "sip/QtWidgets/qundostack.sip"
#include <qundostack.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 26 "sip/QtWebKit/qwebsettings.sip"
#include <qwebsettings.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 49 "sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"


class sipQWebPage : public QWebPage
{
public:
    sipQWebPage(QObject*);
    virtual ~sipQWebPage();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    QWebPage* sipProtectVirt_createWindow(bool,QWebPage::WebWindowType);
    QObject* sipProtectVirt_createPlugin(bool,const QString&,const QUrl&,const QStringList&,const QStringList&);
    bool sipProtectVirt_acceptNavigationRequest(bool,QWebFrame*,const QNetworkRequest&,QWebPage::NavigationType);
    QString sipProtectVirt_chooseFile(bool,QWebFrame*,const QString&);
    void sipProtectVirt_javaScriptAlert(bool,QWebFrame*,const QString&);
    bool sipProtectVirt_javaScriptConfirm(bool,QWebFrame*,const QString&);
    bool sipProtectVirt_javaScriptPrompt(bool,QWebFrame*,const QString&,const QString&,QString*);
    void sipProtectVirt_javaScriptConsoleMessage(bool,const QString&,int,const QString&);
    QString sipProtectVirt_userAgentForUrl(bool,const QUrl&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool shouldInterruptJavaScript();
    QString userAgentForUrl(const QUrl&) const;
    void javaScriptConsoleMessage(const QString&,int,const QString&);
    bool javaScriptPrompt(QWebFrame*,const QString&,const QString&,QString*);
    bool javaScriptConfirm(QWebFrame*,const QString&);
    void javaScriptAlert(QWebFrame*,const QString&);
    QString chooseFile(QWebFrame*,const QString&);
    bool acceptNavigationRequest(QWebFrame*,const QNetworkRequest&,QWebPage::NavigationType);
    QObject* createPlugin(const QString&,const QUrl&,const QStringList&,const QStringList&);
    QWebPage* createWindow(QWebPage::WebWindowType);
    bool supportsExtension(QWebPage::Extension) const;
    bool extension(QWebPage::Extension,const QWebPage::ExtensionOption*,QWebPage::ExtensionReturn*);
    bool event(QEvent*);
    void triggerAction(QWebPage::WebAction,bool);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebPage(const sipQWebPage &);
    sipQWebPage &operator = (const sipQWebPage &);

    char sipPyMethods[20];
};

sipQWebPage::sipQWebPage(QObject*a0): QWebPage(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebPage::~sipQWebPage()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebPage::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebKitWidgets_qt_metaobject(sipPySelf,sipType_QWebPage);
}

int sipQWebPage::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebPage::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKitWidgets_qt_metacall(sipPySelf,sipType_QWebPage,_c,_id,_a);

    return _id;
}

void *sipQWebPage::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebKitWidgets_qt_metacast(sipPySelf, sipType_QWebPage, _clname, &sipCpp) ? sipCpp : QWebPage::qt_metacast(_clname));
}

void sipQWebPage::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWebPage::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebPage::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWebPage::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebPage::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWebPage::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebPage::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWebPage::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebPage::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWebPage::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebPage::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWebPage::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQWebPage::shouldInterruptJavaScript()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_shouldInterruptJavaScript);

    if (!sipMeth)
        return QWebPage::shouldInterruptJavaScript();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QString sipQWebPage::userAgentForUrl(const QUrl& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_userAgentForUrl);

    if (!sipMeth)
        return QWebPage::userAgentForUrl(a0);

    extern QString sipVH_QtWebKitWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&);

    return sipVH_QtWebKitWidgets_1(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebPage::javaScriptConsoleMessage(const QString& a0,int a1,const QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_javaScriptConsoleMessage);

    if (!sipMeth)
    {
        QWebPage::javaScriptConsoleMessage(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWebKitWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,int,const QString&);

    sipVH_QtWebKitWidgets_2(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQWebPage::javaScriptPrompt(QWebFrame*a0,const QString& a1,const QString& a2,QString*a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_javaScriptPrompt);

    if (!sipMeth)
        return QWebPage::javaScriptPrompt(a0,a1,a2,a3);

    extern bool sipVH_QtWebKitWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebFrame*,const QString&,const QString&,QString*);

    return sipVH_QtWebKitWidgets_3(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

bool sipQWebPage::javaScriptConfirm(QWebFrame*a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_javaScriptConfirm);

    if (!sipMeth)
        return QWebPage::javaScriptConfirm(a0,a1);

    extern bool sipVH_QtWebKitWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebFrame*,const QString&);

    return sipVH_QtWebKitWidgets_4(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQWebPage::javaScriptAlert(QWebFrame*a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_javaScriptAlert);

    if (!sipMeth)
    {
        QWebPage::javaScriptAlert(a0,a1);
        return;
    }

    extern void sipVH_QtWebKitWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebFrame*,const QString&);

    sipVH_QtWebKitWidgets_5(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QString sipQWebPage::chooseFile(QWebFrame*a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_chooseFile);

    if (!sipMeth)
        return QWebPage::chooseFile(a0,a1);

    extern QString sipVH_QtWebKitWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebFrame*,const QString&);

    return sipVH_QtWebKitWidgets_6(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQWebPage::acceptNavigationRequest(QWebFrame*a0,const QNetworkRequest& a1,QWebPage::NavigationType a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_acceptNavigationRequest);

    if (!sipMeth)
        return QWebPage::acceptNavigationRequest(a0,a1,a2);

    extern bool sipVH_QtWebKitWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebFrame*,const QNetworkRequest&,QWebPage::NavigationType);

    return sipVH_QtWebKitWidgets_7(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QObject* sipQWebPage::createPlugin(const QString& a0,const QUrl& a1,const QStringList& a2,const QStringList& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_createPlugin);

    if (!sipMeth)
        return QWebPage::createPlugin(a0,a1,a2,a3);

    extern QObject* sipVH_QtWebKitWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,const QUrl&,const QStringList&,const QStringList&);

    return sipVH_QtWebKitWidgets_8(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

QWebPage* sipQWebPage::createWindow(QWebPage::WebWindowType a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_createWindow);

    if (!sipMeth)
        return QWebPage::createWindow(a0);

    extern QWebPage* sipVH_QtWebKitWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebPage::WebWindowType);

    return sipVH_QtWebKitWidgets_9(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebPage::supportsExtension(QWebPage::Extension a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_supportsExtension);

    if (!sipMeth)
        return QWebPage::supportsExtension(a0);

    extern bool sipVH_QtWebKitWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebPage::Extension);

    return sipVH_QtWebKitWidgets_10(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebPage::extension(QWebPage::Extension a0,const QWebPage::ExtensionOption*a1,QWebPage::ExtensionReturn*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_extension);

    if (!sipMeth)
        return QWebPage::extension(a0,a1,a2);

    extern bool sipVH_QtWebKitWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebPage::Extension,const QWebPage::ExtensionOption*,QWebPage::ExtensionReturn*);

    return sipVH_QtWebKitWidgets_11(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQWebPage::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWebPage::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebPage::triggerAction(QWebPage::WebAction a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_triggerAction);

    if (!sipMeth)
    {
        QWebPage::triggerAction(a0,a1);
        return;
    }

    extern void sipVH_QtWebKitWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebPage::WebAction,bool);

    sipVH_QtWebKitWidgets_12(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QObject* sipQWebPage::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQWebPage::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQWebPage::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQWebPage::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQWebPage::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQWebPage::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQWebPage::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQWebPage::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQWebPage::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

QWebPage* sipQWebPage::sipProtectVirt_createWindow(bool sipSelfWasArg,QWebPage::WebWindowType a0)
{
    return (sipSelfWasArg ? QWebPage::createWindow(a0) : createWindow(a0));
}

QObject* sipQWebPage::sipProtectVirt_createPlugin(bool sipSelfWasArg,const QString& a0,const QUrl& a1,const QStringList& a2,const QStringList& a3)
{
    return (sipSelfWasArg ? QWebPage::createPlugin(a0,a1,a2,a3) : createPlugin(a0,a1,a2,a3));
}

bool sipQWebPage::sipProtectVirt_acceptNavigationRequest(bool sipSelfWasArg,QWebFrame*a0,const QNetworkRequest& a1,QWebPage::NavigationType a2)
{
    return (sipSelfWasArg ? QWebPage::acceptNavigationRequest(a0,a1,a2) : acceptNavigationRequest(a0,a1,a2));
}

QString sipQWebPage::sipProtectVirt_chooseFile(bool sipSelfWasArg,QWebFrame*a0,const QString& a1)
{
    return (sipSelfWasArg ? QWebPage::chooseFile(a0,a1) : chooseFile(a0,a1));
}

void sipQWebPage::sipProtectVirt_javaScriptAlert(bool sipSelfWasArg,QWebFrame*a0,const QString& a1)
{
    (sipSelfWasArg ? QWebPage::javaScriptAlert(a0,a1) : javaScriptAlert(a0,a1));
}

bool sipQWebPage::sipProtectVirt_javaScriptConfirm(bool sipSelfWasArg,QWebFrame*a0,const QString& a1)
{
    return (sipSelfWasArg ? QWebPage::javaScriptConfirm(a0,a1) : javaScriptConfirm(a0,a1));
}

bool sipQWebPage::sipProtectVirt_javaScriptPrompt(bool sipSelfWasArg,QWebFrame*a0,const QString& a1,const QString& a2,QString*a3)
{
    return (sipSelfWasArg ? QWebPage::javaScriptPrompt(a0,a1,a2,a3) : javaScriptPrompt(a0,a1,a2,a3));
}

void sipQWebPage::sipProtectVirt_javaScriptConsoleMessage(bool sipSelfWasArg,const QString& a0,int a1,const QString& a2)
{
    (sipSelfWasArg ? QWebPage::javaScriptConsoleMessage(a0,a1,a2) : javaScriptConsoleMessage(a0,a1,a2));
}

QString sipQWebPage::sipProtectVirt_userAgentForUrl(bool sipSelfWasArg,const QUrl& a0) const
{
    return (sipSelfWasArg ? QWebPage::userAgentForUrl(a0) : userAgentForUrl(a0));
}


PyDoc_STRVAR(doc_QWebPage_sender, "QWebPage.sender() -> QObject");

extern "C" {static PyObject *meth_QWebPage_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 715 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_sender, doc_QWebPage_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_receivers, "QWebPage.receivers(signal) -> int");

extern "C" {static PyObject *meth_QWebPage_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QWebPage, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 774 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebPage.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_receivers, doc_QWebPage_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_timerEvent, "QWebPage.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QWebPage_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_timerEvent, doc_QWebPage_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_childEvent, "QWebPage.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QWebPage_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_childEvent, doc_QWebPage_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_customEvent, "QWebPage.customEvent(QEvent)");

extern "C" {static PyObject *meth_QWebPage_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_customEvent, doc_QWebPage_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_connectNotify, "QWebPage.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWebPage_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_connectNotify, doc_QWebPage_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_disconnectNotify, "QWebPage.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWebPage_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_disconnectNotify, doc_QWebPage_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_senderSignalIndex, "QWebPage.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QWebPage_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_senderSignalIndex, doc_QWebPage_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_isSignalConnected, "QWebPage.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QWebPage_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_isSignalConnected, doc_QWebPage_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_mainFrame, "QWebPage.mainFrame() -> QWebFrame");

extern "C" {static PyObject *meth_QWebPage_mainFrame(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_mainFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QWebFrame*sipRes;

            sipRes = sipCpp->mainFrame();

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_mainFrame, doc_QWebPage_mainFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_currentFrame, "QWebPage.currentFrame() -> QWebFrame");

extern "C" {static PyObject *meth_QWebPage_currentFrame(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_currentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QWebFrame*sipRes;

            sipRes = sipCpp->currentFrame();

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_currentFrame, doc_QWebPage_currentFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_history, "QWebPage.history() -> QWebHistory");

extern "C" {static PyObject *meth_QWebPage_history(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QWebHistory*sipRes;

            sipRes = sipCpp->history();

            return sipConvertFromType(sipRes,sipType_QWebHistory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_history, doc_QWebPage_history);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_settings, "QWebPage.settings() -> QWebSettings");

extern "C" {static PyObject *meth_QWebPage_settings(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QWebSettings*sipRes;

            sipRes = sipCpp->settings();

            return sipConvertFromType(sipRes,sipType_QWebSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_settings, doc_QWebPage_settings);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setView, "QWebPage.setView(QWidget)");

extern "C" {static PyObject *meth_QWebPage_setView(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        PyObject *a0Keep;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWebPage, &sipCpp, &a0Keep, sipType_QWidget, &a0))
        {
            sipCpp->setView(a0);

            sipKeepReference(sipSelf, -4, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setView, doc_QWebPage_setView);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_view, "QWebPage.view() -> QWidget");

extern "C" {static PyObject *meth_QWebPage_view(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_view(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->view();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_view, doc_QWebPage_view);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_isModified, "QWebPage.isModified() -> bool");

extern "C" {static PyObject *meth_QWebPage_isModified(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isModified();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_isModified, doc_QWebPage_isModified);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_undoStack, "QWebPage.undoStack() -> QUndoStack");

extern "C" {static PyObject *meth_QWebPage_undoStack(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_undoStack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QUndoStack*sipRes;

            sipRes = sipCpp->undoStack();

            return sipConvertFromType(sipRes,sipType_QUndoStack,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_undoStack, doc_QWebPage_undoStack);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setNetworkAccessManager, "QWebPage.setNetworkAccessManager(QNetworkAccessManager)");

extern "C" {static PyObject *meth_QWebPage_setNetworkAccessManager(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setNetworkAccessManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager* a0;
        PyObject *a0Keep;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWebPage, &sipCpp, &a0Keep, sipType_QNetworkAccessManager, &a0))
        {
            sipCpp->setNetworkAccessManager(a0);

            sipKeepReference(sipSelf, -5, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setNetworkAccessManager, doc_QWebPage_setNetworkAccessManager);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_networkAccessManager, "QWebPage.networkAccessManager() -> QNetworkAccessManager");

extern "C" {static PyObject *meth_QWebPage_networkAccessManager(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_networkAccessManager(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QNetworkAccessManager*sipRes;

            sipRes = sipCpp->networkAccessManager();

            return sipConvertFromType(sipRes,sipType_QNetworkAccessManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_networkAccessManager, doc_QWebPage_networkAccessManager);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setPluginFactory, "QWebPage.setPluginFactory(QWebPluginFactory)");

extern "C" {static PyObject *meth_QWebPage_setPluginFactory(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setPluginFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPluginFactory* a0;
        PyObject *a0Keep;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWebPage, &sipCpp, &a0Keep, sipType_QWebPluginFactory, &a0))
        {
            sipCpp->setPluginFactory(a0);

            sipKeepReference(sipSelf, -6, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setPluginFactory, doc_QWebPage_setPluginFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_pluginFactory, "QWebPage.pluginFactory() -> QWebPluginFactory");

extern "C" {static PyObject *meth_QWebPage_pluginFactory(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_pluginFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QWebPluginFactory*sipRes;

            sipRes = sipCpp->pluginFactory();

            return sipConvertFromType(sipRes,sipType_QWebPluginFactory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_pluginFactory, doc_QWebPage_pluginFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_totalBytes, "QWebPage.totalBytes() -> int");

extern "C" {static PyObject *meth_QWebPage_totalBytes(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_totalBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            quint64 sipRes;

            sipRes = sipCpp->totalBytes();

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_totalBytes, doc_QWebPage_totalBytes);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_bytesReceived, "QWebPage.bytesReceived() -> int");

extern "C" {static PyObject *meth_QWebPage_bytesReceived(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_bytesReceived(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            quint64 sipRes;

            sipRes = sipCpp->bytesReceived();

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_bytesReceived, doc_QWebPage_bytesReceived);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_selectedText, "QWebPage.selectedText() -> str");

extern "C" {static PyObject *meth_QWebPage_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->selectedText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_selectedText, doc_QWebPage_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_action, "QWebPage.action(QWebPage.WebAction) -> QAction");

extern "C" {static PyObject *meth_QWebPage_action(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_action(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage::WebAction a0;
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebPage_WebAction, &a0))
        {
            QAction*sipRes;

            sipRes = sipCpp->action(a0);

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_action, doc_QWebPage_action);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_triggerAction, "QWebPage.triggerAction(QWebPage.WebAction, bool checked=False)");

extern "C" {static PyObject *meth_QWebPage_triggerAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_triggerAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPage::WebAction a0;
        bool a1 = 0;
        QWebPage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_checked,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebPage_WebAction, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp->QWebPage::triggerAction(a0,a1) : sipCpp->triggerAction(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_triggerAction, doc_QWebPage_triggerAction);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_viewportSize, "QWebPage.viewportSize() -> QSize");

extern "C" {static PyObject *meth_QWebPage_viewportSize(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_viewportSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->viewportSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_viewportSize, doc_QWebPage_viewportSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setViewportSize, "QWebPage.setViewportSize(QSize)");

extern "C" {static PyObject *meth_QWebPage_setViewportSize(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setViewportSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setViewportSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setViewportSize, doc_QWebPage_setViewportSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_event, "QWebPage.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QWebPage_event(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWebPage::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_event, doc_QWebPage_event);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_focusNextPrevChild, "QWebPage.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QWebPage_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWebPage, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->focusNextPrevChild(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_focusNextPrevChild, doc_QWebPage_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_inputMethodQuery, "QWebPage.inputMethodQuery(Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QWebPage_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::InputMethodQuery a0;
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebPage, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->inputMethodQuery(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_inputMethodQuery, doc_QWebPage_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_findText, "QWebPage.findText(str, QWebPage.FindFlags options=0) -> bool");

extern "C" {static PyObject *meth_QWebPage_findText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_findText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebPage::FindFlags a1def = 0;
        QWebPage::FindFlags* a1 = &a1def;
        int a1State = 0;
        QWebPage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWebPage_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->findText(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QWebPage_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_findText, doc_QWebPage_findText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setForwardUnsupportedContent, "QWebPage.setForwardUnsupportedContent(bool)");

extern "C" {static PyObject *meth_QWebPage_setForwardUnsupportedContent(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setForwardUnsupportedContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWebPage, &sipCpp, &a0))
        {
            sipCpp->setForwardUnsupportedContent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setForwardUnsupportedContent, doc_QWebPage_setForwardUnsupportedContent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_forwardUnsupportedContent, "QWebPage.forwardUnsupportedContent() -> bool");

extern "C" {static PyObject *meth_QWebPage_forwardUnsupportedContent(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_forwardUnsupportedContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->forwardUnsupportedContent();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_forwardUnsupportedContent, doc_QWebPage_forwardUnsupportedContent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setLinkDelegationPolicy, "QWebPage.setLinkDelegationPolicy(QWebPage.LinkDelegationPolicy)");

extern "C" {static PyObject *meth_QWebPage_setLinkDelegationPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setLinkDelegationPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage::LinkDelegationPolicy a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebPage_LinkDelegationPolicy, &a0))
        {
            sipCpp->setLinkDelegationPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setLinkDelegationPolicy, doc_QWebPage_setLinkDelegationPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_linkDelegationPolicy, "QWebPage.linkDelegationPolicy() -> QWebPage.LinkDelegationPolicy");

extern "C" {static PyObject *meth_QWebPage_linkDelegationPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_linkDelegationPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QWebPage::LinkDelegationPolicy sipRes;

            sipRes = sipCpp->linkDelegationPolicy();

            return sipConvertFromEnum(sipRes,sipType_QWebPage_LinkDelegationPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_linkDelegationPolicy, doc_QWebPage_linkDelegationPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setPalette, "QWebPage.setPalette(QPalette)");

extern "C" {static PyObject *meth_QWebPage_setPalette(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setPalette(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette* a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QPalette, &a0))
        {
            sipCpp->setPalette(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setPalette, doc_QWebPage_setPalette);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_palette, "QWebPage.palette() -> QPalette");

extern "C" {static PyObject *meth_QWebPage_palette(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_palette(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QPalette*sipRes;

            sipRes = new QPalette(sipCpp->palette());

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_palette, doc_QWebPage_palette);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_swallowContextMenuEvent, "QWebPage.swallowContextMenuEvent(QContextMenuEvent) -> bool");

extern "C" {static PyObject *meth_QWebPage_swallowContextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_swallowContextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QContextMenuEvent* a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->swallowContextMenuEvent(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_swallowContextMenuEvent, doc_QWebPage_swallowContextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_updatePositionDependentActions, "QWebPage.updatePositionDependentActions(QPoint)");

extern "C" {static PyObject *meth_QWebPage_updatePositionDependentActions(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_updatePositionDependentActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->updatePositionDependentActions(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_updatePositionDependentActions, doc_QWebPage_updatePositionDependentActions);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_extension, "QWebPage.extension(QWebPage.Extension, QWebPage.ExtensionOption option=None, QWebPage.ExtensionReturn output=None) -> bool");

extern "C" {static PyObject *meth_QWebPage_extension(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_extension(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPage::Extension a0;
        const QWebPage::ExtensionOption* a1 = 0;
        QWebPage::ExtensionReturn* a2 = 0;
        QWebPage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_output,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebPage_Extension, &a0, sipType_QWebPage_ExtensionOption, &a1, sipType_QWebPage_ExtensionReturn, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWebPage::extension(a0,a1,a2) : sipCpp->extension(a0,a1,a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_extension, doc_QWebPage_extension);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_supportsExtension, "QWebPage.supportsExtension(QWebPage.Extension) -> bool");

extern "C" {static PyObject *meth_QWebPage_supportsExtension(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_supportsExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPage::Extension a0;
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebPage_Extension, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWebPage::supportsExtension(a0) : sipCpp->supportsExtension(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_supportsExtension, doc_QWebPage_supportsExtension);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_createWindow, "QWebPage.createWindow(QWebPage.WebWindowType) -> QWebPage");

extern "C" {static PyObject *meth_QWebPage_createWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_createWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPage::WebWindowType a0;
        sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebPage_WebWindowType, &a0))
        {
            QWebPage*sipRes;

            sipRes = sipCpp->sipProtectVirt_createWindow(sipSelfWasArg,a0);

            return sipConvertFromType(sipRes,sipType_QWebPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_createWindow, doc_QWebPage_createWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_createPlugin, "QWebPage.createPlugin(str, QUrl, list-of-str, list-of-str) -> QObject");

extern "C" {static PyObject *meth_QWebPage_createPlugin(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_createPlugin(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        const QUrl* a1;
        const QStringList* a2;
        int a2State = 0;
        const QStringList* a3;
        int a3State = 0;
        sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J9J1J1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1, sipType_QStringList,&a2, &a2State, sipType_QStringList,&a3, &a3State))
        {
            QObject*sipRes;

            sipRes = sipCpp->sipProtectVirt_createPlugin(sipSelfWasArg,*a0,*a1,*a2,*a3);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a2),sipType_QStringList,a2State);
            sipReleaseType(const_cast<QStringList *>(a3),sipType_QStringList,a3State);

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_createPlugin, doc_QWebPage_createPlugin);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_acceptNavigationRequest, "QWebPage.acceptNavigationRequest(QWebFrame, QNetworkRequest, QWebPage.NavigationType) -> bool");

extern "C" {static PyObject *meth_QWebPage_acceptNavigationRequest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_acceptNavigationRequest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebFrame* a0;
        const QNetworkRequest* a1;
        QWebPage::NavigationType a2;
        sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9E", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebFrame, &a0, sipType_QNetworkRequest, &a1, sipType_QWebPage_NavigationType, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_acceptNavigationRequest(sipSelfWasArg,a0,*a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_acceptNavigationRequest, doc_QWebPage_acceptNavigationRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_chooseFile, "QWebPage.chooseFile(QWebFrame, str) -> str");

extern "C" {static PyObject *meth_QWebPage_chooseFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_chooseFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebFrame* a0;
        const QString* a1;
        int a1State = 0;
        sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebFrame, &a0, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->sipProtectVirt_chooseFile(sipSelfWasArg,a0,*a1));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_chooseFile, doc_QWebPage_chooseFile);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_javaScriptAlert, "QWebPage.javaScriptAlert(QWebFrame, str)");

extern "C" {static PyObject *meth_QWebPage_javaScriptAlert(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_javaScriptAlert(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebFrame* a0;
        const QString* a1;
        int a1State = 0;
        sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebFrame, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->sipProtectVirt_javaScriptAlert(sipSelfWasArg,a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_javaScriptAlert, doc_QWebPage_javaScriptAlert);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_javaScriptConfirm, "QWebPage.javaScriptConfirm(QWebFrame, str) -> bool");

extern "C" {static PyObject *meth_QWebPage_javaScriptConfirm(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_javaScriptConfirm(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebFrame* a0;
        const QString* a1;
        int a1State = 0;
        sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebFrame, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_javaScriptConfirm(sipSelfWasArg,a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_javaScriptConfirm, doc_QWebPage_javaScriptConfirm);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_javaScriptPrompt, "QWebPage.javaScriptPrompt(QWebFrame, str, str) -> (bool, str)");

extern "C" {static PyObject *meth_QWebPage_javaScriptPrompt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_javaScriptPrompt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebFrame* a0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        QString* a3;
        sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J1J1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebFrame, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;
            a3 = new QString();

            sipRes = sipCpp->sipProtectVirt_javaScriptPrompt(sipSelfWasArg,a0,*a1,*a2,a3);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipBuildResult(0,"(bN)",sipRes,a3,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_javaScriptPrompt, doc_QWebPage_javaScriptPrompt);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_javaScriptConsoleMessage, "QWebPage.javaScriptConsoleMessage(str, int, str)");

extern "C" {static PyObject *meth_QWebPage_javaScriptConsoleMessage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_javaScriptConsoleMessage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        int a1;
        const QString* a2;
        int a2State = 0;
        sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1iJ1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QString,&a2, &a2State))
        {
            sipCpp->sipProtectVirt_javaScriptConsoleMessage(sipSelfWasArg,*a0,a1,*a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_javaScriptConsoleMessage, doc_QWebPage_javaScriptConsoleMessage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_userAgentForUrl, "QWebPage.userAgentForUrl(QUrl) -> str");

extern "C" {static PyObject *meth_QWebPage_userAgentForUrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPage_userAgentForUrl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QUrl* a0;
        const sipQWebPage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QUrl, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->sipProtectVirt_userAgentForUrl(sipSelfWasArg,*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_userAgentForUrl, doc_QWebPage_userAgentForUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setContentEditable, "QWebPage.setContentEditable(bool)");

extern "C" {static PyObject *meth_QWebPage_setContentEditable(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setContentEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWebPage, &sipCpp, &a0))
        {
            sipCpp->setContentEditable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setContentEditable, doc_QWebPage_setContentEditable);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_isContentEditable, "QWebPage.isContentEditable() -> bool");

extern "C" {static PyObject *meth_QWebPage_isContentEditable(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_isContentEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isContentEditable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_isContentEditable, doc_QWebPage_isContentEditable);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_createStandardContextMenu, "QWebPage.createStandardContextMenu() -> QMenu");

extern "C" {static PyObject *meth_QWebPage_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QMenu*sipRes;

            sipRes = sipCpp->createStandardContextMenu();

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_createStandardContextMenu, doc_QWebPage_createStandardContextMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_frameAt, "QWebPage.frameAt(QPoint) -> QWebFrame");

extern "C" {static PyObject *meth_QWebPage_frameAt(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_frameAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QPoint, &a0))
        {
            QWebFrame*sipRes;

            sipRes = sipCpp->frameAt(*a0);

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_frameAt, doc_QWebPage_frameAt);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_preferredContentsSize, "QWebPage.preferredContentsSize() -> QSize");

extern "C" {static PyObject *meth_QWebPage_preferredContentsSize(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_preferredContentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->preferredContentsSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_preferredContentsSize, doc_QWebPage_preferredContentsSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setPreferredContentsSize, "QWebPage.setPreferredContentsSize(QSize)");

extern "C" {static PyObject *meth_QWebPage_setPreferredContentsSize(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setPreferredContentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setPreferredContentsSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setPreferredContentsSize, doc_QWebPage_setPreferredContentsSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_shouldInterruptJavaScript, "QWebPage.shouldInterruptJavaScript() -> bool");

extern "C" {static PyObject *meth_QWebPage_shouldInterruptJavaScript(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_shouldInterruptJavaScript(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWebPage::shouldInterruptJavaScript() : sipCpp->shouldInterruptJavaScript());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_shouldInterruptJavaScript, doc_QWebPage_shouldInterruptJavaScript);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_hasSelection, "QWebPage.hasSelection() -> bool");

extern "C" {static PyObject *meth_QWebPage_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasSelection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_hasSelection, doc_QWebPage_hasSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_selectedHtml, "QWebPage.selectedHtml() -> str");

extern "C" {static PyObject *meth_QWebPage_selectedHtml(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_selectedHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->selectedHtml());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_selectedHtml, doc_QWebPage_selectedHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_viewportAttributesForSize, "QWebPage.viewportAttributesForSize(QSize) -> QWebPage.ViewportAttributes");

extern "C" {static PyObject *meth_QWebPage_viewportAttributesForSize(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_viewportAttributesForSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QSize, &a0))
        {
            QWebPage::ViewportAttributes*sipRes;

            sipRes = new QWebPage::ViewportAttributes(sipCpp->viewportAttributesForSize(*a0));

            return sipConvertFromNewType(sipRes,sipType_QWebPage_ViewportAttributes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_viewportAttributesForSize, doc_QWebPage_viewportAttributesForSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setActualVisibleContentRect, "QWebPage.setActualVisibleContentRect(QRect)");

extern "C" {static PyObject *meth_QWebPage_setActualVisibleContentRect(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setActualVisibleContentRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setActualVisibleContentRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setActualVisibleContentRect, doc_QWebPage_setActualVisibleContentRect);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setFeaturePermission, "QWebPage.setFeaturePermission(QWebFrame, QWebPage.Feature, QWebPage.PermissionPolicy)");

extern "C" {static PyObject *meth_QWebPage_setFeaturePermission(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setFeaturePermission(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebFrame* a0;
        QWebPage::Feature a1;
        QWebPage::PermissionPolicy a2;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EE", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebFrame, &a0, sipType_QWebPage_Feature, &a1, sipType_QWebPage_PermissionPolicy, &a2))
        {
            sipCpp->setFeaturePermission(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setFeaturePermission, doc_QWebPage_setFeaturePermission);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_supportedContentTypes, "QWebPage.supportedContentTypes() -> list-of-str");

extern "C" {static PyObject *meth_QWebPage_supportedContentTypes(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_supportedContentTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->supportedContentTypes());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_supportedContentTypes, doc_QWebPage_supportedContentTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_supportsContentType, "QWebPage.supportsContentType(str) -> bool");

extern "C" {static PyObject *meth_QWebPage_supportsContentType(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_supportsContentType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->supportsContentType(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_supportsContentType, doc_QWebPage_supportsContentType);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_visibilityState, "QWebPage.visibilityState() -> QWebPage.VisibilityState");

extern "C" {static PyObject *meth_QWebPage_visibilityState(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_visibilityState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPage, &sipCpp))
        {
            QWebPage::VisibilityState sipRes;

            sipRes = sipCpp->visibilityState();

            return sipConvertFromEnum(sipRes,sipType_QWebPage_VisibilityState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_visibilityState, doc_QWebPage_visibilityState);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPage_setVisibilityState, "QWebPage.setVisibilityState(QWebPage.VisibilityState)");

extern "C" {static PyObject *meth_QWebPage_setVisibilityState(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setVisibilityState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage::VisibilityState a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebPage, &sipCpp, sipType_QWebPage_VisibilityState, &a0))
        {
            sipCpp->setVisibilityState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPage, sipName_setVisibilityState, doc_QWebPage_setVisibilityState);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebPage(void *, const sipTypeDef *);}
static void *cast_QWebPage(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWebPage)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QWebPage *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebPage(void *, int);}
static void release_QWebPage(void *sipCppV,int)
{
    QWebPage *sipCpp = reinterpret_cast<QWebPage *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebPage(sipSimpleWrapper *);}
static void dealloc_QWebPage(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebPage *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebPage(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWebPage(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebPage(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebPage *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQWebPage(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebPage[] = {{162, 0, 1}};


static PyMethodDef methods_QWebPage[] = {
    {SIP_MLNAME_CAST(sipName_acceptNavigationRequest), (PyCFunction)meth_QWebPage_acceptNavigationRequest, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_acceptNavigationRequest)},
    {SIP_MLNAME_CAST(sipName_action), meth_QWebPage_action, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_action)},
    {SIP_MLNAME_CAST(sipName_bytesReceived), meth_QWebPage_bytesReceived, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_bytesReceived)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QWebPage_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_chooseFile), (PyCFunction)meth_QWebPage_chooseFile, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_chooseFile)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QWebPage_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createPlugin), (PyCFunction)meth_QWebPage_createPlugin, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_createPlugin)},
    {SIP_MLNAME_CAST(sipName_createStandardContextMenu), meth_QWebPage_createStandardContextMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_createStandardContextMenu)},
    {SIP_MLNAME_CAST(sipName_createWindow), (PyCFunction)meth_QWebPage_createWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_createWindow)},
    {SIP_MLNAME_CAST(sipName_currentFrame), meth_QWebPage_currentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_currentFrame)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QWebPage_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QWebPage_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QWebPage_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_event)},
    {SIP_MLNAME_CAST(sipName_extension), (PyCFunction)meth_QWebPage_extension, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_extension)},
    {SIP_MLNAME_CAST(sipName_findText), (PyCFunction)meth_QWebPage_findText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_findText)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QWebPage_focusNextPrevChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_forwardUnsupportedContent), meth_QWebPage_forwardUnsupportedContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_forwardUnsupportedContent)},
    {SIP_MLNAME_CAST(sipName_frameAt), meth_QWebPage_frameAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_frameAt)},
    {SIP_MLNAME_CAST(sipName_hasSelection), meth_QWebPage_hasSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_hasSelection)},
    {SIP_MLNAME_CAST(sipName_history), meth_QWebPage_history, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_history)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QWebPage_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_isContentEditable), meth_QWebPage_isContentEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_isContentEditable)},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QWebPage_isModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_isModified)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QWebPage_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_javaScriptAlert), (PyCFunction)meth_QWebPage_javaScriptAlert, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_javaScriptAlert)},
    {SIP_MLNAME_CAST(sipName_javaScriptConfirm), (PyCFunction)meth_QWebPage_javaScriptConfirm, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_javaScriptConfirm)},
    {SIP_MLNAME_CAST(sipName_javaScriptConsoleMessage), (PyCFunction)meth_QWebPage_javaScriptConsoleMessage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_javaScriptConsoleMessage)},
    {SIP_MLNAME_CAST(sipName_javaScriptPrompt), (PyCFunction)meth_QWebPage_javaScriptPrompt, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_javaScriptPrompt)},
    {SIP_MLNAME_CAST(sipName_linkDelegationPolicy), meth_QWebPage_linkDelegationPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_linkDelegationPolicy)},
    {SIP_MLNAME_CAST(sipName_mainFrame), meth_QWebPage_mainFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_mainFrame)},
    {SIP_MLNAME_CAST(sipName_networkAccessManager), meth_QWebPage_networkAccessManager, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_networkAccessManager)},
    {SIP_MLNAME_CAST(sipName_palette), meth_QWebPage_palette, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_palette)},
    {SIP_MLNAME_CAST(sipName_pluginFactory), meth_QWebPage_pluginFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_pluginFactory)},
    {SIP_MLNAME_CAST(sipName_preferredContentsSize), meth_QWebPage_preferredContentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_preferredContentsSize)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QWebPage_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedHtml), meth_QWebPage_selectedHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_selectedHtml)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QWebPage_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_selectedText)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QWebPage_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QWebPage_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setActualVisibleContentRect), meth_QWebPage_setActualVisibleContentRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setActualVisibleContentRect)},
    {SIP_MLNAME_CAST(sipName_setContentEditable), meth_QWebPage_setContentEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setContentEditable)},
    {SIP_MLNAME_CAST(sipName_setFeaturePermission), meth_QWebPage_setFeaturePermission, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setFeaturePermission)},
    {SIP_MLNAME_CAST(sipName_setForwardUnsupportedContent), meth_QWebPage_setForwardUnsupportedContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setForwardUnsupportedContent)},
    {SIP_MLNAME_CAST(sipName_setLinkDelegationPolicy), meth_QWebPage_setLinkDelegationPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setLinkDelegationPolicy)},
    {SIP_MLNAME_CAST(sipName_setNetworkAccessManager), meth_QWebPage_setNetworkAccessManager, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setNetworkAccessManager)},
    {SIP_MLNAME_CAST(sipName_setPalette), meth_QWebPage_setPalette, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setPalette)},
    {SIP_MLNAME_CAST(sipName_setPluginFactory), meth_QWebPage_setPluginFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setPluginFactory)},
    {SIP_MLNAME_CAST(sipName_setPreferredContentsSize), meth_QWebPage_setPreferredContentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setPreferredContentsSize)},
    {SIP_MLNAME_CAST(sipName_setView), meth_QWebPage_setView, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setView)},
    {SIP_MLNAME_CAST(sipName_setViewportSize), meth_QWebPage_setViewportSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setViewportSize)},
    {SIP_MLNAME_CAST(sipName_setVisibilityState), meth_QWebPage_setVisibilityState, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_setVisibilityState)},
    {SIP_MLNAME_CAST(sipName_settings), meth_QWebPage_settings, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_settings)},
    {SIP_MLNAME_CAST(sipName_shouldInterruptJavaScript), meth_QWebPage_shouldInterruptJavaScript, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_shouldInterruptJavaScript)},
    {SIP_MLNAME_CAST(sipName_supportedContentTypes), meth_QWebPage_supportedContentTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_supportedContentTypes)},
    {SIP_MLNAME_CAST(sipName_supportsContentType), meth_QWebPage_supportsContentType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_supportsContentType)},
    {SIP_MLNAME_CAST(sipName_supportsExtension), meth_QWebPage_supportsExtension, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_supportsExtension)},
    {SIP_MLNAME_CAST(sipName_swallowContextMenuEvent), meth_QWebPage_swallowContextMenuEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_swallowContextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QWebPage_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_totalBytes), meth_QWebPage_totalBytes, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_totalBytes)},
    {SIP_MLNAME_CAST(sipName_triggerAction), (PyCFunction)meth_QWebPage_triggerAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_triggerAction)},
    {SIP_MLNAME_CAST(sipName_undoStack), meth_QWebPage_undoStack, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_undoStack)},
    {SIP_MLNAME_CAST(sipName_updatePositionDependentActions), meth_QWebPage_updatePositionDependentActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_updatePositionDependentActions)},
    {SIP_MLNAME_CAST(sipName_userAgentForUrl), (PyCFunction)meth_QWebPage_userAgentForUrl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPage_userAgentForUrl)},
    {SIP_MLNAME_CAST(sipName_view), meth_QWebPage_view, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_view)},
    {SIP_MLNAME_CAST(sipName_viewportAttributesForSize), meth_QWebPage_viewportAttributesForSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_viewportAttributesForSize)},
    {SIP_MLNAME_CAST(sipName_viewportSize), meth_QWebPage_viewportSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_viewportSize)},
    {SIP_MLNAME_CAST(sipName_visibilityState), meth_QWebPage_visibilityState, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPage_visibilityState)}
};

static sipEnumMemberDef enummembers_QWebPage[] = {
    {sipName_AlignCenter, static_cast<int>(QWebPage::AlignCenter), 26},
    {sipName_AlignJustified, static_cast<int>(QWebPage::AlignJustified), 26},
    {sipName_AlignLeft, static_cast<int>(QWebPage::AlignLeft), 26},
    {sipName_AlignRight, static_cast<int>(QWebPage::AlignRight), 26},
    {sipName_Back, static_cast<int>(QWebPage::Back), 26},
    {sipName_ChooseMultipleFilesExtension, static_cast<int>(QWebPage::ChooseMultipleFilesExtension), 15},
    {sipName_Copy, static_cast<int>(QWebPage::Copy), 26},
    {sipName_CopyImageToClipboard, static_cast<int>(QWebPage::CopyImageToClipboard), 26},
    {sipName_CopyImageUrlToClipboard, static_cast<int>(QWebPage::CopyImageUrlToClipboard), 26},
    {sipName_CopyLinkToClipboard, static_cast<int>(QWebPage::CopyLinkToClipboard), 26},
    {sipName_CopyMediaUrlToClipboard, static_cast<int>(QWebPage::CopyMediaUrlToClipboard), 26},
    {sipName_Cut, static_cast<int>(QWebPage::Cut), 26},
    {sipName_DelegateAllLinks, static_cast<int>(QWebPage::DelegateAllLinks), 21},
    {sipName_DelegateExternalLinks, static_cast<int>(QWebPage::DelegateExternalLinks), 21},
    {sipName_DeleteEndOfWord, static_cast<int>(QWebPage::DeleteEndOfWord), 26},
    {sipName_DeleteStartOfWord, static_cast<int>(QWebPage::DeleteStartOfWord), 26},
    {sipName_DontDelegateLinks, static_cast<int>(QWebPage::DontDelegateLinks), 21},
    {sipName_DownloadImageToDisk, static_cast<int>(QWebPage::DownloadImageToDisk), 26},
    {sipName_DownloadLinkToDisk, static_cast<int>(QWebPage::DownloadLinkToDisk), 26},
    {sipName_DownloadMediaToDisk, static_cast<int>(QWebPage::DownloadMediaToDisk), 26},
    {sipName_ErrorPageExtension, static_cast<int>(QWebPage::ErrorPageExtension), 15},
    {sipName_FindAtWordBeginningsOnly, static_cast<int>(QWebPage::FindAtWordBeginningsOnly), 19},
    {sipName_FindBackward, static_cast<int>(QWebPage::FindBackward), 19},
    {sipName_FindBeginsInSelection, static_cast<int>(QWebPage::FindBeginsInSelection), 19},
    {sipName_FindCaseSensitively, static_cast<int>(QWebPage::FindCaseSensitively), 19},
    {sipName_FindWrapsAroundDocument, static_cast<int>(QWebPage::FindWrapsAroundDocument), 19},
    {sipName_Forward, static_cast<int>(QWebPage::Forward), 26},
    {sipName_Geolocation, static_cast<int>(QWebPage::Geolocation), 18},
    {sipName_HighlightAllOccurrences, static_cast<int>(QWebPage::HighlightAllOccurrences), 19},
    {sipName_Http, static_cast<int>(QWebPage::Http), 12},
    {sipName_Indent, static_cast<int>(QWebPage::Indent), 26},
    {sipName_InsertLineSeparator, static_cast<int>(QWebPage::InsertLineSeparator), 26},
    {sipName_InsertOrderedList, static_cast<int>(QWebPage::InsertOrderedList), 26},
    {sipName_InsertParagraphSeparator, static_cast<int>(QWebPage::InsertParagraphSeparator), 26},
    {sipName_InsertUnorderedList, static_cast<int>(QWebPage::InsertUnorderedList), 26},
    {sipName_InspectElement, static_cast<int>(QWebPage::InspectElement), 26},
    {sipName_MoveToEndOfBlock, static_cast<int>(QWebPage::MoveToEndOfBlock), 26},
    {sipName_MoveToEndOfDocument, static_cast<int>(QWebPage::MoveToEndOfDocument), 26},
    {sipName_MoveToEndOfLine, static_cast<int>(QWebPage::MoveToEndOfLine), 26},
    {sipName_MoveToNextChar, static_cast<int>(QWebPage::MoveToNextChar), 26},
    {sipName_MoveToNextLine, static_cast<int>(QWebPage::MoveToNextLine), 26},
    {sipName_MoveToNextWord, static_cast<int>(QWebPage::MoveToNextWord), 26},
    {sipName_MoveToPreviousChar, static_cast<int>(QWebPage::MoveToPreviousChar), 26},
    {sipName_MoveToPreviousLine, static_cast<int>(QWebPage::MoveToPreviousLine), 26},
    {sipName_MoveToPreviousWord, static_cast<int>(QWebPage::MoveToPreviousWord), 26},
    {sipName_MoveToStartOfBlock, static_cast<int>(QWebPage::MoveToStartOfBlock), 26},
    {sipName_MoveToStartOfDocument, static_cast<int>(QWebPage::MoveToStartOfDocument), 26},
    {sipName_MoveToStartOfLine, static_cast<int>(QWebPage::MoveToStartOfLine), 26},
    {sipName_NavigationTypeBackOrForward, static_cast<int>(QWebPage::NavigationTypeBackOrForward), 22},
    {sipName_NavigationTypeFormResubmitted, static_cast<int>(QWebPage::NavigationTypeFormResubmitted), 22},
    {sipName_NavigationTypeFormSubmitted, static_cast<int>(QWebPage::NavigationTypeFormSubmitted), 22},
    {sipName_NavigationTypeLinkClicked, static_cast<int>(QWebPage::NavigationTypeLinkClicked), 22},
    {sipName_NavigationTypeOther, static_cast<int>(QWebPage::NavigationTypeOther), 22},
    {sipName_NavigationTypeReload, static_cast<int>(QWebPage::NavigationTypeReload), 22},
    {sipName_NoWebAction, static_cast<int>(QWebPage::NoWebAction), 26},
    {sipName_Notifications, static_cast<int>(QWebPage::Notifications), 18},
    {sipName_OpenFrameInNewWindow, static_cast<int>(QWebPage::OpenFrameInNewWindow), 26},
    {sipName_OpenImageInNewWindow, static_cast<int>(QWebPage::OpenImageInNewWindow), 26},
    {sipName_OpenLink, static_cast<int>(QWebPage::OpenLink), 26},
    {sipName_OpenLinkInNewWindow, static_cast<int>(QWebPage::OpenLinkInNewWindow), 26},
    {sipName_OpenLinkInThisWindow, static_cast<int>(QWebPage::OpenLinkInThisWindow), 26},
    {sipName_Outdent, static_cast<int>(QWebPage::Outdent), 26},
    {sipName_Paste, static_cast<int>(QWebPage::Paste), 26},
    {sipName_PasteAndMatchStyle, static_cast<int>(QWebPage::PasteAndMatchStyle), 26},
    {sipName_PermissionDeniedByUser, static_cast<int>(QWebPage::PermissionDeniedByUser), 23},
    {sipName_PermissionGrantedByUser, static_cast<int>(QWebPage::PermissionGrantedByUser), 23},
    {sipName_PermissionUnknown, static_cast<int>(QWebPage::PermissionUnknown), 23},
    {sipName_QtNetwork, static_cast<int>(QWebPage::QtNetwork), 12},
    {sipName_Redo, static_cast<int>(QWebPage::Redo), 26},
    {sipName_Reload, static_cast<int>(QWebPage::Reload), 26},
    {sipName_ReloadAndBypassCache, static_cast<int>(QWebPage::ReloadAndBypassCache), 26},
    {sipName_RemoveFormat, static_cast<int>(QWebPage::RemoveFormat), 26},
    {sipName_SelectAll, static_cast<int>(QWebPage::SelectAll), 26},
    {sipName_SelectEndOfBlock, static_cast<int>(QWebPage::SelectEndOfBlock), 26},
    {sipName_SelectEndOfDocument, static_cast<int>(QWebPage::SelectEndOfDocument), 26},
    {sipName_SelectEndOfLine, static_cast<int>(QWebPage::SelectEndOfLine), 26},
    {sipName_SelectNextChar, static_cast<int>(QWebPage::SelectNextChar), 26},
    {sipName_SelectNextLine, static_cast<int>(QWebPage::SelectNextLine), 26},
    {sipName_SelectNextWord, static_cast<int>(QWebPage::SelectNextWord), 26},
    {sipName_SelectPreviousChar, static_cast<int>(QWebPage::SelectPreviousChar), 26},
    {sipName_SelectPreviousLine, static_cast<int>(QWebPage::SelectPreviousLine), 26},
    {sipName_SelectPreviousWord, static_cast<int>(QWebPage::SelectPreviousWord), 26},
    {sipName_SelectStartOfBlock, static_cast<int>(QWebPage::SelectStartOfBlock), 26},
    {sipName_SelectStartOfDocument, static_cast<int>(QWebPage::SelectStartOfDocument), 26},
    {sipName_SelectStartOfLine, static_cast<int>(QWebPage::SelectStartOfLine), 26},
    {sipName_SetTextDirectionDefault, static_cast<int>(QWebPage::SetTextDirectionDefault), 26},
    {sipName_SetTextDirectionLeftToRight, static_cast<int>(QWebPage::SetTextDirectionLeftToRight), 26},
    {sipName_SetTextDirectionRightToLeft, static_cast<int>(QWebPage::SetTextDirectionRightToLeft), 26},
    {sipName_Stop, static_cast<int>(QWebPage::Stop), 26},
    {sipName_StopScheduledPageRefresh, static_cast<int>(QWebPage::StopScheduledPageRefresh), 26},
    {sipName_ToggleBold, static_cast<int>(QWebPage::ToggleBold), 26},
    {sipName_ToggleItalic, static_cast<int>(QWebPage::ToggleItalic), 26},
    {sipName_ToggleMediaControls, static_cast<int>(QWebPage::ToggleMediaControls), 26},
    {sipName_ToggleMediaLoop, static_cast<int>(QWebPage::ToggleMediaLoop), 26},
    {sipName_ToggleMediaMute, static_cast<int>(QWebPage::ToggleMediaMute), 26},
    {sipName_ToggleMediaPlayPause, static_cast<int>(QWebPage::ToggleMediaPlayPause), 26},
    {sipName_ToggleStrikethrough, static_cast<int>(QWebPage::ToggleStrikethrough), 26},
    {sipName_ToggleSubscript, static_cast<int>(QWebPage::ToggleSubscript), 26},
    {sipName_ToggleSuperscript, static_cast<int>(QWebPage::ToggleSuperscript), 26},
    {sipName_ToggleUnderline, static_cast<int>(QWebPage::ToggleUnderline), 26},
    {sipName_ToggleVideoFullscreen, static_cast<int>(QWebPage::ToggleVideoFullscreen), 26},
    {sipName_TreatMedialCapitalAsWordBeginning, static_cast<int>(QWebPage::TreatMedialCapitalAsWordBeginning), 19},
    {sipName_Undo, static_cast<int>(QWebPage::Undo), 26},
    {sipName_VisibilityStateHidden, static_cast<int>(QWebPage::VisibilityStateHidden), 25},
    {sipName_VisibilityStatePrerender, static_cast<int>(QWebPage::VisibilityStatePrerender), 25},
    {sipName_VisibilityStateUnloaded, static_cast<int>(QWebPage::VisibilityStateUnloaded), 25},
    {sipName_VisibilityStateVisible, static_cast<int>(QWebPage::VisibilityStateVisible), 25},
    {sipName_WebBrowserWindow, static_cast<int>(QWebPage::WebBrowserWindow), 27},
    {sipName_WebKit, static_cast<int>(QWebPage::WebKit), 12},
    {sipName_WebModalDialog, static_cast<int>(QWebPage::WebModalDialog), 27},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWebPage[] = {
    {"featurePermissionRequestCanceled(QWebFrame*,QWebPage::Feature)", "\1QWebPage.featurePermissionRequestCanceled[QWebFrame, QWebPage.Feature]", 0, 0},
    {"featurePermissionRequested(QWebFrame*,QWebPage::Feature)", "\1QWebPage.featurePermissionRequested[QWebFrame, QWebPage.Feature]", 0, 0},
    {"viewportChangeRequested()", "\1QWebPage.viewportChangeRequested", 0, 0},
    {"applicationCacheQuotaExceeded(QWebSecurityOrigin*,quint64,quint64)", "\1QWebPage.applicationCacheQuotaExceeded[QWebSecurityOrigin, int, int]", 0, 0},
    {"restoreFrameStateRequested(QWebFrame*)", "\1QWebPage.restoreFrameStateRequested[QWebFrame]", 0, 0},
    {"saveFrameStateRequested(QWebFrame*,QWebHistoryItem*)", "\1QWebPage.saveFrameStateRequested[QWebFrame, QWebHistoryItem]", 0, 0},
    {"databaseQuotaExceeded(QWebFrame*,QString)", "\1QWebPage.databaseQuotaExceeded[QWebFrame, str]", 0, 0},
    {"contentsChanged()", "\1QWebPage.contentsChanged", 0, 0},
    {"microFocusChanged()", "\1QWebPage.microFocusChanged", 0, 0},
    {"downloadRequested(QNetworkRequest)", "\1QWebPage.downloadRequested[QNetworkRequest]", 0, 0},
    {"unsupportedContent(QNetworkReply*)", "\1QWebPage.unsupportedContent[QNetworkReply]", 0, 0},
    {"menuBarVisibilityChangeRequested(bool)", "\1QWebPage.menuBarVisibilityChangeRequested[bool]", 0, 0},
    {"statusBarVisibilityChangeRequested(bool)", "\1QWebPage.statusBarVisibilityChangeRequested[bool]", 0, 0},
    {"toolBarVisibilityChangeRequested(bool)", "\1QWebPage.toolBarVisibilityChangeRequested[bool]", 0, 0},
    {"linkClicked(QUrl)", "\1QWebPage.linkClicked[QUrl]", 0, 0},
    {"printRequested(QWebFrame*)", "\1QWebPage.printRequested[QWebFrame]", 0, 0},
    {"windowCloseRequested()", "\1QWebPage.windowCloseRequested", 0, 0},
    {"scrollRequested(int,int,QRect)", "\1QWebPage.scrollRequested[int, int, QRect]", 0, 0},
    {"repaintRequested(QRect)", "\1QWebPage.repaintRequested[QRect]", 0, 0},
    {"geometryChangeRequested(QRect)", "\1QWebPage.geometryChangeRequested[QRect]", 0, 0},
    {"frameCreated(QWebFrame*)", "\1QWebPage.frameCreated[QWebFrame]", 0, 0},
    {"selectionChanged()", "\1QWebPage.selectionChanged", 0, 0},
    {"statusBarMessage(QString)", "\1QWebPage.statusBarMessage[str]", 0, 0},
    {"linkHovered(QString,QString,QString)", "\1QWebPage.linkHovered[str, str, str]", 0, 0},
    {"loadStarted()", "\1QWebPage.loadStarted", 0, 0},
    {"loadProgress(int)", "\1QWebPage.loadProgress[int]", 0, 0},
    {"loadFinished(bool)", "\1QWebPage.loadFinished[bool]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QWebPage, "\1QWebPage(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWebKitWidgets_QWebPage = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebPage,
        {0}
    },
    {
        sipNameNr_QWebPage,
        {0, 0, 1},
        67, methods_QWebPage,
        110, enummembers_QWebPage,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebPage,
    -1,
    -1,
    supers_QWebPage,
    0,
    init_type_QWebPage,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebPage,
    0,
    0,
    0,
    release_QWebPage,
    cast_QWebPage,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebPage::staticMetaObject,
    0,
    signals_QWebPage,
    0
};
