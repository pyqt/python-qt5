/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:06 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKitWidgets.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qwebframe.sip"
#include <qwebframe.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebHitTestResult.cpp"

#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebHitTestResult.cpp"
#line 28 "sip/QtWebKit/qwebelement.sip"
#include <qwebelement.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebHitTestResult.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebHitTestResult.cpp"
#line 62 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qwebframe.sip"
#include <qwebframe.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebHitTestResult.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebHitTestResult.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebHitTestResult.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQWebHitTestResult.cpp"


PyDoc_STRVAR(doc_QWebHitTestResult_isNull, "QWebHitTestResult.isNull() -> bool");

extern "C" {static PyObject *meth_QWebHitTestResult_isNull(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_isNull, doc_QWebHitTestResult_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_pos, "QWebHitTestResult.pos() -> QPoint");

extern "C" {static PyObject *meth_QWebHitTestResult_pos(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_pos, doc_QWebHitTestResult_pos);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_title, "QWebHitTestResult.title() -> str");

extern "C" {static PyObject *meth_QWebHitTestResult_title(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_title, doc_QWebHitTestResult_title);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_linkText, "QWebHitTestResult.linkText() -> str");

extern "C" {static PyObject *meth_QWebHitTestResult_linkText(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_linkText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->linkText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_linkText, doc_QWebHitTestResult_linkText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_linkUrl, "QWebHitTestResult.linkUrl() -> QUrl");

extern "C" {static PyObject *meth_QWebHitTestResult_linkUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_linkUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->linkUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_linkUrl, doc_QWebHitTestResult_linkUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_linkTitle, "QWebHitTestResult.linkTitle() -> QUrl");

extern "C" {static PyObject *meth_QWebHitTestResult_linkTitle(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_linkTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->linkTitle());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_linkTitle, doc_QWebHitTestResult_linkTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_linkTargetFrame, "QWebHitTestResult.linkTargetFrame() -> QWebFrame");

extern "C" {static PyObject *meth_QWebHitTestResult_linkTargetFrame(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_linkTargetFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QWebFrame*sipRes;

            sipRes = sipCpp->linkTargetFrame();

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_linkTargetFrame, doc_QWebHitTestResult_linkTargetFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_alternateText, "QWebHitTestResult.alternateText() -> str");

extern "C" {static PyObject *meth_QWebHitTestResult_alternateText(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_alternateText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->alternateText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_alternateText, doc_QWebHitTestResult_alternateText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_imageUrl, "QWebHitTestResult.imageUrl() -> QUrl");

extern "C" {static PyObject *meth_QWebHitTestResult_imageUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_imageUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->imageUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_imageUrl, doc_QWebHitTestResult_imageUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_pixmap, "QWebHitTestResult.pixmap() -> QPixmap");

extern "C" {static PyObject *meth_QWebHitTestResult_pixmap(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_pixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QPixmap*sipRes;

            sipRes = new QPixmap(sipCpp->pixmap());

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_pixmap, doc_QWebHitTestResult_pixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_isContentEditable, "QWebHitTestResult.isContentEditable() -> bool");

extern "C" {static PyObject *meth_QWebHitTestResult_isContentEditable(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_isContentEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isContentEditable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_isContentEditable, doc_QWebHitTestResult_isContentEditable);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_isContentSelected, "QWebHitTestResult.isContentSelected() -> bool");

extern "C" {static PyObject *meth_QWebHitTestResult_isContentSelected(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_isContentSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isContentSelected();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_isContentSelected, doc_QWebHitTestResult_isContentSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_frame, "QWebHitTestResult.frame() -> QWebFrame");

extern "C" {static PyObject *meth_QWebHitTestResult_frame(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_frame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QWebFrame*sipRes;

            sipRes = sipCpp->frame();

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_frame, doc_QWebHitTestResult_frame);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_boundingRect, "QWebHitTestResult.boundingRect() -> QRect");

extern "C" {static PyObject *meth_QWebHitTestResult_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->boundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_boundingRect, doc_QWebHitTestResult_boundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_enclosingBlockElement, "QWebHitTestResult.enclosingBlockElement() -> QWebElement");

extern "C" {static PyObject *meth_QWebHitTestResult_enclosingBlockElement(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_enclosingBlockElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QWebElement*sipRes;

            sipRes = new QWebElement(sipCpp->enclosingBlockElement());

            return sipConvertFromNewType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_enclosingBlockElement, doc_QWebHitTestResult_enclosingBlockElement);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_linkElement, "QWebHitTestResult.linkElement() -> QWebElement");

extern "C" {static PyObject *meth_QWebHitTestResult_linkElement(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_linkElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QWebElement*sipRes;

            sipRes = new QWebElement(sipCpp->linkElement());

            return sipConvertFromNewType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_linkElement, doc_QWebHitTestResult_linkElement);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_element, "QWebHitTestResult.element() -> QWebElement");

extern "C" {static PyObject *meth_QWebHitTestResult_element(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_element(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QWebElement*sipRes;

            sipRes = new QWebElement(sipCpp->element());

            return sipConvertFromNewType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_element, doc_QWebHitTestResult_element);

    return NULL;
}


PyDoc_STRVAR(doc_QWebHitTestResult_mediaUrl, "QWebHitTestResult.mediaUrl() -> QUrl");

extern "C" {static PyObject *meth_QWebHitTestResult_mediaUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_mediaUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebHitTestResult, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->mediaUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebHitTestResult, sipName_mediaUrl, doc_QWebHitTestResult_mediaUrl);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebHitTestResult(void *, const sipTypeDef *);}
static void *cast_QWebHitTestResult(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QWebHitTestResult)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebHitTestResult(void *, int);}
static void release_QWebHitTestResult(void *sipCppV,int)
{
    delete reinterpret_cast<QWebHitTestResult *>(sipCppV);
}


extern "C" {static void assign_QWebHitTestResult(void *, SIP_SSIZE_T, const void *);}
static void assign_QWebHitTestResult(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QWebHitTestResult *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QWebHitTestResult *>(sipSrc);
}


extern "C" {static void *array_QWebHitTestResult(SIP_SSIZE_T);}
static void *array_QWebHitTestResult(SIP_SSIZE_T sipNrElem)
{
    return new QWebHitTestResult[sipNrElem];
}


extern "C" {static void *copy_QWebHitTestResult(const void *, SIP_SSIZE_T);}
static void *copy_QWebHitTestResult(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QWebHitTestResult(reinterpret_cast<const QWebHitTestResult *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QWebHitTestResult(sipSimpleWrapper *);}
static void dealloc_QWebHitTestResult(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWebHitTestResult(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QWebHitTestResult(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebHitTestResult(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QWebHitTestResult *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QWebHitTestResult();

            return sipCpp;
        }
    }

    {
        const QWebHitTestResult* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QWebHitTestResult, &a0))
        {
            sipCpp = new QWebHitTestResult(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QWebHitTestResult[] = {
    {SIP_MLNAME_CAST(sipName_alternateText), meth_QWebHitTestResult_alternateText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_alternateText)},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QWebHitTestResult_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_boundingRect)},
    {SIP_MLNAME_CAST(sipName_element), meth_QWebHitTestResult_element, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_element)},
    {SIP_MLNAME_CAST(sipName_enclosingBlockElement), meth_QWebHitTestResult_enclosingBlockElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_enclosingBlockElement)},
    {SIP_MLNAME_CAST(sipName_frame), meth_QWebHitTestResult_frame, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_frame)},
    {SIP_MLNAME_CAST(sipName_imageUrl), meth_QWebHitTestResult_imageUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_imageUrl)},
    {SIP_MLNAME_CAST(sipName_isContentEditable), meth_QWebHitTestResult_isContentEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_isContentEditable)},
    {SIP_MLNAME_CAST(sipName_isContentSelected), meth_QWebHitTestResult_isContentSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_isContentSelected)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QWebHitTestResult_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_isNull)},
    {SIP_MLNAME_CAST(sipName_linkElement), meth_QWebHitTestResult_linkElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_linkElement)},
    {SIP_MLNAME_CAST(sipName_linkTargetFrame), meth_QWebHitTestResult_linkTargetFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_linkTargetFrame)},
    {SIP_MLNAME_CAST(sipName_linkText), meth_QWebHitTestResult_linkText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_linkText)},
    {SIP_MLNAME_CAST(sipName_linkTitle), meth_QWebHitTestResult_linkTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_linkTitle)},
    {SIP_MLNAME_CAST(sipName_linkUrl), meth_QWebHitTestResult_linkUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_linkUrl)},
    {SIP_MLNAME_CAST(sipName_mediaUrl), meth_QWebHitTestResult_mediaUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_mediaUrl)},
    {SIP_MLNAME_CAST(sipName_pixmap), meth_QWebHitTestResult_pixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_pixmap)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QWebHitTestResult_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_pos)},
    {SIP_MLNAME_CAST(sipName_title), meth_QWebHitTestResult_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebHitTestResult_title)}
};

PyDoc_STRVAR(doc_QWebHitTestResult, "\1QWebHitTestResult()\n"
    "QWebHitTestResult(QWebHitTestResult)");


pyqt5ClassTypeDef sipTypeDef_QtWebKitWidgets_QWebHitTestResult = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebHitTestResult,
        {0}
    },
    {
        sipNameNr_QWebHitTestResult,
        {0, 0, 1},
        18, methods_QWebHitTestResult,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebHitTestResult,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QWebHitTestResult,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebHitTestResult,
    assign_QWebHitTestResult,
    array_QWebHitTestResult,
    copy_QWebHitTestResult,
    release_QWebHitTestResult,
    cast_QWebHitTestResult,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
