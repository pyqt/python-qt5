/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:06 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKitWidgets.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qgraphicswebview.sip"
#include <qgraphicswebview.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"

#line 30 "sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 200 "sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 140 "sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 120 "sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 165 "sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 89 "sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 101 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 1016 "sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qwebpage.sip"
#include <qwebpage.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKitWidgets/qwebpage.sip"
#include <qwebpage.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 26 "sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 26 "sip/QtWebKit/qwebsettings.sip"
#include <qwebsettings.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 49 "sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 26 "sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 26 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 225 "sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 241 "sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 408 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 26 "sip/QtWidgets/qgraphicswidget.sip"
#include <qgraphicswidget.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 26 "sip/QtWidgets/qgraphicslayout.sip"
#include <qgraphicslayout.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 171 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 174 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 177 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 180 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 183 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 186 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 189 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 195 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 198 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 201 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 204 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 207 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 26 "sip/QtWidgets/qgraphicstransform.sip"
#include <qgraphicstransform.h>
#line 210 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 213 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 638 "sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 216 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 219 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 225 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 228 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 327 "sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 231 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 237 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 240 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 606 "sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 243 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtWidgets/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 246 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 26 "sip/QtWidgets/qgraphicslayoutitem.sip"
#include <qgraphicslayoutitem.h>
#line 249 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"
#line 30 "sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 252 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"


class sipQGraphicsWebView : public QGraphicsWebView
{
public:
    sipQGraphicsWebView(QGraphicsItem*);
    virtual ~sipQGraphicsWebView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_setGraphicsItem(QGraphicsItem*);
    void sipProtect_setOwnedByLayout(bool);
    void sipProtectVirt_hoverEnterEvent(bool,QGraphicsSceneHoverEvent*);
    void sipProtect_prepareGeometryChange();
    bool sipProtectVirt_sceneEventFilter(bool,QGraphicsItem*,QEvent*);
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtect_updateMicroFocus();
    void sipProtectVirt_initStyleOption(bool,QStyleOption*) const;
    bool sipProtectVirt_windowFrameEvent(bool,QEvent*);
    Qt::WindowFrameSection sipProtectVirt_windowFrameSectionAt(bool,const QPointF&) const;
    void sipProtectVirt_changeEvent(bool,QEvent*);
    void sipProtectVirt_closeEvent(bool,QCloseEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    void sipProtectVirt_moveEvent(bool,QGraphicsSceneMoveEvent*);
    void sipProtectVirt_polishEvent(bool);
    void sipProtectVirt_resizeEvent(bool,QGraphicsSceneResizeEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_grabMouseEvent(bool,QEvent*);
    void sipProtectVirt_ungrabMouseEvent(bool,QEvent*);
    void sipProtectVirt_grabKeyboardEvent(bool,QEvent*);
    void sipProtectVirt_ungrabKeyboardEvent(bool,QEvent*);
    void sipProtectVirt_mousePressEvent(bool,QGraphicsSceneMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QGraphicsSceneMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QGraphicsSceneMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QGraphicsSceneMouseEvent*);
    void sipProtectVirt_hoverMoveEvent(bool,QGraphicsSceneHoverEvent*);
    void sipProtectVirt_hoverLeaveEvent(bool,QGraphicsSceneHoverEvent*);
    void sipProtectVirt_wheelEvent(bool,QGraphicsSceneWheelEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_contextMenuEvent(bool,QGraphicsSceneContextMenuEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QGraphicsSceneDragDropEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QGraphicsSceneDragDropEvent*);
    void sipProtectVirt_dragMoveEvent(bool,QGraphicsSceneDragDropEvent*);
    void sipProtectVirt_dropEvent(bool,QGraphicsSceneDragDropEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtectVirt_sceneEvent(bool,QEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool sceneEventFilter(QGraphicsItem*,QEvent*);
    void hoverEnterEvent(QGraphicsSceneHoverEvent*);
    QPainterPath opaqueArea() const;
    bool isObscuredBy(const QGraphicsItem*) const;
    bool collidesWithPath(const QPainterPath&,Qt::ItemSelectionMode) const;
    bool collidesWithItem(const QGraphicsItem*,Qt::ItemSelectionMode) const;
    bool contains(const QPointF&) const;
    void advance(int);
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void ungrabKeyboardEvent(QEvent*);
    void grabKeyboardEvent(QEvent*);
    void ungrabMouseEvent(QEvent*);
    void grabMouseEvent(QEvent*);
    void showEvent(QShowEvent*);
    void resizeEvent(QGraphicsSceneResizeEvent*);
    void polishEvent();
    void moveEvent(QGraphicsSceneMoveEvent*);
    void hideEvent(QHideEvent*);
    void closeEvent(QCloseEvent*);
    void changeEvent(QEvent*);
    Qt::WindowFrameSection windowFrameSectionAt(const QPointF&) const;
    bool windowFrameEvent(QEvent*);
    void initStyleOption(QStyleOption*) const;
    QPainterPath shape() const;
    QRectF boundingRect() const;
    void paintWindowFrame(QPainter*,const QStyleOptionGraphicsItem*,QWidget*);
    int type() const;
    void getContentsMargins(qreal*,qreal*,qreal*,qreal*) const;
    bool sceneEvent(QEvent*);
    bool focusNextPrevChild(bool);
    void inputMethodEvent(QInputMethodEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dropEvent(QGraphicsSceneDragDropEvent*);
    void dragMoveEvent(QGraphicsSceneDragDropEvent*);
    void dragLeaveEvent(QGraphicsSceneDragDropEvent*);
    void dragEnterEvent(QGraphicsSceneDragDropEvent*);
    void contextMenuEvent(QGraphicsSceneContextMenuEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void wheelEvent(QGraphicsSceneWheelEvent*);
    void hoverLeaveEvent(QGraphicsSceneHoverEvent*);
    void hoverMoveEvent(QGraphicsSceneHoverEvent*);
    void mouseMoveEvent(QGraphicsSceneMouseEvent*);
    void mouseReleaseEvent(QGraphicsSceneMouseEvent*);
    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent*);
    void mousePressEvent(QGraphicsSceneMouseEvent*);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    QSizeF sizeHint(Qt::SizeHint,const QSizeF&) const;
    bool event(QEvent*);
    QVariant itemChange(QGraphicsItem::GraphicsItemChange,const QVariant&);
    void paint(QPainter*,const QStyleOptionGraphicsItem*,QWidget*);
    void updateGeometry();
    void setGeometry(const QRectF&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsWebView(const sipQGraphicsWebView &);
    sipQGraphicsWebView &operator = (const sipQGraphicsWebView &);

    char sipPyMethods[59];
};

sipQGraphicsWebView::sipQGraphicsWebView(QGraphicsItem*a0): QGraphicsWebView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsWebView::~sipQGraphicsWebView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGraphicsWebView::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebKitWidgets_qt_metaobject(sipPySelf,sipType_QGraphicsWebView);
}

int sipQGraphicsWebView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGraphicsWebView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKitWidgets_qt_metacall(sipPySelf,sipType_QGraphicsWebView,_c,_id,_a);

    return _id;
}

void *sipQGraphicsWebView::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebKitWidgets_qt_metacast(sipPySelf, sipType_QGraphicsWebView, _clname, &sipCpp) ? sipCpp : QGraphicsWebView::qt_metacast(_clname));
}

bool sipQGraphicsWebView::sceneEventFilter(QGraphicsItem*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_sceneEventFilter);

    if (!sipMeth)
        return QGraphicsWebView::sceneEventFilter(a0,a1);

    typedef bool (*sipVH_QtWidgets_125)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsItem*,QEvent*);

    return ((sipVH_QtWidgets_125)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[125]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsWebView::hoverEnterEvent(QGraphicsSceneHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_hoverEnterEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::hoverEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_104)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneHoverEvent*);

    ((sipVH_QtWidgets_104)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[104]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainterPath sipQGraphicsWebView::opaqueArea() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_opaqueArea);

    if (!sipMeth)
        return QGraphicsWebView::opaqueArea();

    typedef QPainterPath (*sipVH_QtWidgets_111)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtWidgets_111)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[111]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQGraphicsWebView::isObscuredBy(const QGraphicsItem*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_isObscuredBy);

    if (!sipMeth)
        return QGraphicsWebView::isObscuredBy(a0);

    typedef bool (*sipVH_QtWidgets_123)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QGraphicsItem*);

    return ((sipVH_QtWidgets_123)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[123]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGraphicsWebView::collidesWithPath(const QPainterPath& a0,Qt::ItemSelectionMode a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_collidesWithPath);

    if (!sipMeth)
        return QGraphicsWebView::collidesWithPath(a0,a1);

    typedef bool (*sipVH_QtWidgets_126)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPainterPath&,Qt::ItemSelectionMode);

    return ((sipVH_QtWidgets_126)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[126]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQGraphicsWebView::collidesWithItem(const QGraphicsItem*a0,Qt::ItemSelectionMode a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_collidesWithItem);

    if (!sipMeth)
        return QGraphicsWebView::collidesWithItem(a0,a1);

    typedef bool (*sipVH_QtWidgets_127)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QGraphicsItem*,Qt::ItemSelectionMode);

    return ((sipVH_QtWidgets_127)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[127]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQGraphicsWebView::contains(const QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_contains);

    if (!sipMeth)
        return QGraphicsWebView::contains(a0);

    typedef bool (*sipVH_QtWidgets_124)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPointF&);

    return ((sipVH_QtWidgets_124)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[124]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::advance(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_advance);

    if (!sipMeth)
    {
        QGraphicsWebView::advance(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QGraphicsWebView::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QGraphicsWebView::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGraphicsWebView::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QGraphicsWebView::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsWebView::ungrabKeyboardEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_ungrabKeyboardEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::ungrabKeyboardEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::grabKeyboardEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_grabKeyboardEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::grabKeyboardEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::ungrabMouseEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_ungrabMouseEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::ungrabMouseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::grabMouseEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_grabMouseEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::grabMouseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWebKitWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::resizeEvent(QGraphicsSceneResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_105)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneResizeEvent*);

    ((sipVH_QtWidgets_105)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[105]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::polishEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_polishEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::polishEvent();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGraphicsWebView::moveEvent(QGraphicsSceneMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_106)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneMoveEvent*);

    ((sipVH_QtWidgets_106)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[106]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWebKitWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::closeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_14)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    ((sipVH_QtWidgets_14)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[14]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

Qt::WindowFrameSection sipQGraphicsWebView::windowFrameSectionAt(const QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_windowFrameSectionAt);

    if (!sipMeth)
        return QGraphicsWebView::windowFrameSectionAt(a0);

    typedef Qt::WindowFrameSection (*sipVH_QtWidgets_107)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPointF&);

    return ((sipVH_QtWidgets_107)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[107]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGraphicsWebView::windowFrameEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_windowFrameEvent);

    if (!sipMeth)
        return QGraphicsWebView::windowFrameEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::initStyleOption(QStyleOption*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_initStyleOption);

    if (!sipMeth)
    {
        QGraphicsWebView::initStyleOption(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_110)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyleOption*);

    ((sipVH_QtWidgets_110)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[110]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainterPath sipQGraphicsWebView::shape() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_shape);

    if (!sipMeth)
        return QGraphicsWebView::shape();

    typedef QPainterPath (*sipVH_QtWidgets_111)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtWidgets_111)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[111]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QRectF sipQGraphicsWebView::boundingRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_boundingRect);

    if (!sipMeth)
        return QGraphicsWebView::boundingRect();

    typedef QRectF (*sipVH_QtWidgets_112)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtWidgets_112)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[112]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGraphicsWebView::paintWindowFrame(QPainter*a0,const QStyleOptionGraphicsItem*a1,QWidget*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_paintWindowFrame);

    if (!sipMeth)
    {
        QGraphicsWebView::paintWindowFrame(a0,a1,a2);
        return;
    }

    typedef void (*sipVH_QtWidgets_113)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionGraphicsItem*,QWidget*);

    ((sipVH_QtWidgets_113)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[113]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

int sipQGraphicsWebView::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_type);

    if (!sipMeth)
        return QGraphicsWebView::type();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGraphicsWebView::getContentsMargins(qreal*a0,qreal*a1,qreal*a2,qreal*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_getContentsMargins);

    if (!sipMeth)
    {
        QGraphicsWebView::getContentsMargins(a0,a1,a2,a3);
        return;
    }

    typedef void (*sipVH_QtWidgets_114)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, double*,double*,double*,double*);

    ((sipVH_QtWidgets_114)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[114]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

bool sipQGraphicsWebView::sceneEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_sceneEvent);

    if (!sipMeth)
        return QGraphicsWebView::sceneEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGraphicsWebView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QGraphicsWebView::focusNextPrevChild(a0);

    typedef bool (*sipVH_QtWidgets_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return ((sipVH_QtWidgets_5)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::inputMethodEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    ((sipVH_QtWidgets_7)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWebKitWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWebKitWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::dropEvent(QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::dropEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_120)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneDragDropEvent*);

    ((sipVH_QtWidgets_120)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[120]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::dragMoveEvent(QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::dragMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_120)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneDragDropEvent*);

    ((sipVH_QtWidgets_120)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[120]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::dragLeaveEvent(QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::dragLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_120)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneDragDropEvent*);

    ((sipVH_QtWidgets_120)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[120]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::dragEnterEvent(QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::dragEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_120)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneDragDropEvent*);

    ((sipVH_QtWidgets_120)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[120]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::contextMenuEvent(QGraphicsSceneContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::contextMenuEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_121)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneContextMenuEvent*);

    ((sipVH_QtWidgets_121)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[121]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWebKitWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWebKitWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::wheelEvent(QGraphicsSceneWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_117)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneWheelEvent*);

    ((sipVH_QtWidgets_117)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[117]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::hoverLeaveEvent(QGraphicsSceneHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_hoverLeaveEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::hoverLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_104)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneHoverEvent*);

    ((sipVH_QtWidgets_104)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[104]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::hoverMoveEvent(QGraphicsSceneHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_hoverMoveEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::hoverMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_104)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneHoverEvent*);

    ((sipVH_QtWidgets_104)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[104]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::mouseMoveEvent(QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_118)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneMouseEvent*);

    ((sipVH_QtWidgets_118)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[118]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::mouseReleaseEvent(QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_118)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneMouseEvent*);

    ((sipVH_QtWidgets_118)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[118]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::mouseDoubleClickEvent(QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_118)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneMouseEvent*);

    ((sipVH_QtWidgets_118)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[118]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::mousePressEvent(QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QGraphicsWebView::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_118)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneMouseEvent*);

    ((sipVH_QtWidgets_118)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[118]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQGraphicsWebView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QGraphicsWebView::inputMethodQuery(a0);

    typedef QVariant (*sipVH_QtWidgets_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return ((sipVH_QtWidgets_6)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSizeF sipQGraphicsWebView::sizeHint(Qt::SizeHint a0,const QSizeF& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[53]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QGraphicsWebView::sizeHint(a0,a1);

    typedef QSizeF (*sipVH_QtWidgets_109)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::SizeHint,const QSizeF&);

    return ((sipVH_QtWidgets_109)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[109]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQGraphicsWebView::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QGraphicsWebView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQGraphicsWebView::itemChange(QGraphicsItem::GraphicsItemChange a0,const QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_itemChange);

    if (!sipMeth)
        return QGraphicsWebView::itemChange(a0,a1);

    typedef QVariant (*sipVH_QtWidgets_108)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsItem::GraphicsItemChange,const QVariant&);

    return ((sipVH_QtWidgets_108)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[108]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsWebView::paint(QPainter*a0,const QStyleOptionGraphicsItem*a1,QWidget*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_paint);

    if (!sipMeth)
    {
        QGraphicsWebView::paint(a0,a1,a2);
        return;
    }

    typedef void (*sipVH_QtWidgets_113)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionGraphicsItem*,QWidget*);

    ((sipVH_QtWidgets_113)(sipModuleAPI_QtWebKitWidgets_QtWidgets->em_virthandlers[113]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQGraphicsWebView::updateGeometry()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_updateGeometry);

    if (!sipMeth)
    {
        QGraphicsWebView::updateGeometry();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWebKitWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGraphicsWebView::setGeometry(const QRectF& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_setGeometry);

    if (!sipMeth)
    {
        QGraphicsWebView::setGeometry(a0);
        return;
    }

    typedef void (*sipVH_QtGui_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRectF&);

    ((sipVH_QtGui_45)(sipModuleAPI_QtWebKitWidgets_QtGui->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtWebKitWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsWebView::sipProtect_setGraphicsItem(QGraphicsItem*a0)
{
    QGraphicsLayoutItem::setGraphicsItem(a0);
}

void sipQGraphicsWebView::sipProtect_setOwnedByLayout(bool a0)
{
    QGraphicsLayoutItem::setOwnedByLayout(a0);
}

void sipQGraphicsWebView::sipProtectVirt_hoverEnterEvent(bool sipSelfWasArg,QGraphicsSceneHoverEvent*a0)
{
    (sipSelfWasArg ? QGraphicsItem::hoverEnterEvent(a0) : hoverEnterEvent(a0));
}

void sipQGraphicsWebView::sipProtect_prepareGeometryChange()
{
    QGraphicsItem::prepareGeometryChange();
}

bool sipQGraphicsWebView::sipProtectVirt_sceneEventFilter(bool sipSelfWasArg,QGraphicsItem*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QGraphicsItem::sceneEventFilter(a0,a1) : sceneEventFilter(a0,a1));
}

QObject* sipQGraphicsWebView::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQGraphicsWebView::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQGraphicsWebView::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQGraphicsWebView::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQGraphicsWebView::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQGraphicsWebView::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQGraphicsWebView::sipProtect_updateMicroFocus()
{
    QGraphicsObject::updateMicroFocus();
}

void sipQGraphicsWebView::sipProtectVirt_initStyleOption(bool sipSelfWasArg,QStyleOption*a0) const
{
    (sipSelfWasArg ? QGraphicsWidget::initStyleOption(a0) : initStyleOption(a0));
}

bool sipQGraphicsWebView::sipProtectVirt_windowFrameEvent(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QGraphicsWidget::windowFrameEvent(a0) : windowFrameEvent(a0));
}

Qt::WindowFrameSection sipQGraphicsWebView::sipProtectVirt_windowFrameSectionAt(bool sipSelfWasArg,const QPointF& a0) const
{
    return (sipSelfWasArg ? QGraphicsWidget::windowFrameSectionAt(a0) : windowFrameSectionAt(a0));
}

void sipQGraphicsWebView::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWidget::changeEvent(a0) : changeEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWidget::hideEvent(a0) : hideEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_moveEvent(bool sipSelfWasArg,QGraphicsSceneMoveEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_polishEvent(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QGraphicsWidget::polishEvent() : polishEvent());
}

void sipQGraphicsWebView::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QGraphicsSceneResizeEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWidget::resizeEvent(a0) : resizeEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWidget::showEvent(a0) : showEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_grabMouseEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWidget::grabMouseEvent(a0) : grabMouseEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_ungrabMouseEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWidget::ungrabMouseEvent(a0) : ungrabMouseEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_grabKeyboardEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWidget::grabKeyboardEvent(a0) : grabKeyboardEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_ungrabKeyboardEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWidget::ungrabKeyboardEvent(a0) : ungrabKeyboardEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_hoverMoveEvent(bool sipSelfWasArg,QGraphicsSceneHoverEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::hoverMoveEvent(a0) : hoverMoveEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_hoverLeaveEvent(bool sipSelfWasArg,QGraphicsSceneHoverEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::hoverLeaveEvent(a0) : hoverLeaveEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QGraphicsSceneWheelEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::wheelEvent(a0) : wheelEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QGraphicsSceneContextMenuEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_dropEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::dropEvent(a0) : dropEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::focusInEvent(a0) : focusInEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQGraphicsWebView::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QGraphicsWebView::inputMethodEvent(a0) : inputMethodEvent(a0));
}

bool sipQGraphicsWebView::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QGraphicsWebView::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipQGraphicsWebView::sipProtectVirt_sceneEvent(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QGraphicsWebView::sceneEvent(a0) : sceneEvent(a0));
}


PyDoc_STRVAR(doc_QGraphicsWebView_setGraphicsItem, "QGraphicsWebView.setGraphicsItem(QGraphicsItem)");

extern "C" {static PyObject *meth_QGraphicsWebView_setGraphicsItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setGraphicsItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsItem* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsItem, &a0))
        {
            sipCpp->sipProtect_setGraphicsItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setGraphicsItem, doc_QGraphicsWebView_setGraphicsItem);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setOwnedByLayout, "QGraphicsWebView.setOwnedByLayout(bool)");

extern "C" {static PyObject *meth_QGraphicsWebView_setOwnedByLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setOwnedByLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            sipCpp->sipProtect_setOwnedByLayout(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setOwnedByLayout, doc_QGraphicsWebView_setOwnedByLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_hoverEnterEvent, "QGraphicsWebView.hoverEnterEvent(QGraphicsSceneHoverEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_hoverEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_hoverEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneHoverEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneHoverEvent, &a0))
        {
            sipCpp->sipProtectVirt_hoverEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_hoverEnterEvent, doc_QGraphicsWebView_hoverEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_prepareGeometryChange, "QGraphicsWebView.prepareGeometryChange()");

extern "C" {static PyObject *meth_QGraphicsWebView_prepareGeometryChange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_prepareGeometryChange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            sipCpp->sipProtect_prepareGeometryChange();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_prepareGeometryChange, doc_QGraphicsWebView_prepareGeometryChange);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_sceneEventFilter, "QGraphicsWebView.sceneEventFilter(QGraphicsItem, QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_sceneEventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_sceneEventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsItem* a0;
        QEvent* a1;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsItem, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_sceneEventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_sceneEventFilter, doc_QGraphicsWebView_sceneEventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_sender, "QGraphicsWebView.sender() -> QObject");

extern "C" {static PyObject *meth_QGraphicsWebView_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1852 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_sender, doc_QGraphicsWebView_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_receivers, "QGraphicsWebView.receivers(signal) -> int");

extern "C" {static PyObject *meth_QGraphicsWebView_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1911 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKitWidgets/sipQtWebKitWidgetsQGraphicsWebView.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_receivers, doc_QGraphicsWebView_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_timerEvent, "QGraphicsWebView.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_timerEvent, doc_QGraphicsWebView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_childEvent, "QGraphicsWebView.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_childEvent, doc_QGraphicsWebView_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_customEvent, "QGraphicsWebView.customEvent(QEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_customEvent, doc_QGraphicsWebView_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_connectNotify, "QGraphicsWebView.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QGraphicsWebView_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_connectNotify, doc_QGraphicsWebView_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_disconnectNotify, "QGraphicsWebView.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QGraphicsWebView_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_disconnectNotify, doc_QGraphicsWebView_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_senderSignalIndex, "QGraphicsWebView.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QGraphicsWebView_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_senderSignalIndex, doc_QGraphicsWebView_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_isSignalConnected, "QGraphicsWebView.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_isSignalConnected, doc_QGraphicsWebView_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_updateMicroFocus, "QGraphicsWebView.updateMicroFocus()");

extern "C" {static PyObject *meth_QGraphicsWebView_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_updateMicroFocus, doc_QGraphicsWebView_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_initStyleOption, "QGraphicsWebView.initStyleOption(QStyleOption)");

extern "C" {static PyObject *meth_QGraphicsWebView_initStyleOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_initStyleOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyleOption* a0;
        const sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QStyleOption, &a0))
        {
            sipCpp->sipProtectVirt_initStyleOption(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_initStyleOption, doc_QGraphicsWebView_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_windowFrameEvent, "QGraphicsWebView.windowFrameEvent(QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_windowFrameEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_windowFrameEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_windowFrameEvent(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_windowFrameEvent, doc_QGraphicsWebView_windowFrameEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_windowFrameSectionAt, "QGraphicsWebView.windowFrameSectionAt(QPointF) -> Qt.WindowFrameSection");

extern "C" {static PyObject *meth_QGraphicsWebView_windowFrameSectionAt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_windowFrameSectionAt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPointF* a0;
        int a0State = 0;
        const sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            Qt::WindowFrameSection sipRes;

            sipRes = sipCpp->sipProtectVirt_windowFrameSectionAt(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromEnum(sipRes,sipType_Qt_WindowFrameSection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_windowFrameSectionAt, doc_QGraphicsWebView_windowFrameSectionAt);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_changeEvent, "QGraphicsWebView.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_changeEvent, doc_QGraphicsWebView_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_closeEvent, "QGraphicsWebView.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_closeEvent, doc_QGraphicsWebView_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_hideEvent, "QGraphicsWebView.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_hideEvent, doc_QGraphicsWebView_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_moveEvent, "QGraphicsWebView.moveEvent(QGraphicsSceneMoveEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMoveEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_moveEvent, doc_QGraphicsWebView_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_polishEvent, "QGraphicsWebView.polishEvent()");

extern "C" {static PyObject *meth_QGraphicsWebView_polishEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_polishEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            sipCpp->sipProtectVirt_polishEvent(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_polishEvent, doc_QGraphicsWebView_polishEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_resizeEvent, "QGraphicsWebView.resizeEvent(QGraphicsSceneResizeEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneResizeEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_resizeEvent, doc_QGraphicsWebView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_showEvent, "QGraphicsWebView.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_showEvent, doc_QGraphicsWebView_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_grabMouseEvent, "QGraphicsWebView.grabMouseEvent(QEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_grabMouseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_grabMouseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_grabMouseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_grabMouseEvent, doc_QGraphicsWebView_grabMouseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_ungrabMouseEvent, "QGraphicsWebView.ungrabMouseEvent(QEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_ungrabMouseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_ungrabMouseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_ungrabMouseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_ungrabMouseEvent, doc_QGraphicsWebView_ungrabMouseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_grabKeyboardEvent, "QGraphicsWebView.grabKeyboardEvent(QEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_grabKeyboardEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_grabKeyboardEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_grabKeyboardEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_grabKeyboardEvent, doc_QGraphicsWebView_grabKeyboardEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_ungrabKeyboardEvent, "QGraphicsWebView.ungrabKeyboardEvent(QEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_ungrabKeyboardEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_ungrabKeyboardEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_ungrabKeyboardEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_ungrabKeyboardEvent, doc_QGraphicsWebView_ungrabKeyboardEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_page, "QGraphicsWebView.page() -> QWebPage");

extern "C" {static PyObject *meth_QGraphicsWebView_page(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_page(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QWebPage*sipRes;

            sipRes = sipCpp->page();

            return sipConvertFromType(sipRes,sipType_QWebPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_page, doc_QGraphicsWebView_page);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setPage, "QGraphicsWebView.setPage(QWebPage)");

extern "C" {static PyObject *meth_QGraphicsWebView_setPage(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage* a0;
        PyObject *a0Keep;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0Keep, sipType_QWebPage, &a0))
        {
            sipCpp->setPage(a0);

            sipKeepReference(sipSelf, -2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setPage, doc_QGraphicsWebView_setPage);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_url, "QGraphicsWebView.url() -> QUrl");

extern "C" {static PyObject *meth_QGraphicsWebView_url(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_url, doc_QGraphicsWebView_url);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setUrl, "QGraphicsWebView.setUrl(QUrl)");

extern "C" {static PyObject *meth_QGraphicsWebView_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setUrl, doc_QGraphicsWebView_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_title, "QGraphicsWebView.title() -> str");

extern "C" {static PyObject *meth_QGraphicsWebView_title(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_title, doc_QGraphicsWebView_title);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_icon, "QGraphicsWebView.icon() -> QIcon");

extern "C" {static PyObject *meth_QGraphicsWebView_icon(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QIcon*sipRes;

            sipRes = new QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_icon, doc_QGraphicsWebView_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_zoomFactor, "QGraphicsWebView.zoomFactor() -> float");

extern "C" {static PyObject *meth_QGraphicsWebView_zoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_zoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->zoomFactor();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_zoomFactor, doc_QGraphicsWebView_zoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setZoomFactor, "QGraphicsWebView.setZoomFactor(float)");

extern "C" {static PyObject *meth_QGraphicsWebView_setZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            sipCpp->setZoomFactor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setZoomFactor, doc_QGraphicsWebView_setZoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_isModified, "QGraphicsWebView.isModified() -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_isModified(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isModified();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_isModified, doc_QGraphicsWebView_isModified);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_load, "QGraphicsWebView.load(QUrl)\n"
    "QGraphicsWebView.load(QNetworkRequest, QNetworkAccessManager.Operation operation=QNetworkAccessManager.GetOperation, QByteArray body=QByteArray())");

extern "C" {static PyObject *meth_QGraphicsWebView_load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QNetworkRequest* a0;
        QNetworkAccessManager::Operation a1 = QNetworkAccessManager::GetOperation;
        const QByteArray& a2def = QByteArray();
        const QByteArray* a2 = &a2def;
        int a2State = 0;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
            sipName_body,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|EJ1", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QNetworkAccessManager_Operation, &a1, sipType_QByteArray, &a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a2),sipType_QByteArray,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_load, doc_QGraphicsWebView_load);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setHtml, "QGraphicsWebView.setHtml(str, QUrl baseUrl=QUrl())");

extern "C" {static PyObject *meth_QGraphicsWebView_setHtml(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setHtml(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QUrl& a1def = QUrl();
        const QUrl* a1 = &a1def;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1))
        {
            sipCpp->setHtml(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setHtml, doc_QGraphicsWebView_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setContent, "QGraphicsWebView.setContent(QByteArray, str mimeType=QString(), QUrl baseUrl=QUrl())");

extern "C" {static PyObject *meth_QGraphicsWebView_setContent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setContent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QUrl& a2def = QUrl();
        const QUrl* a2 = &a2def;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mimeType,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QString,&a1, &a1State, sipType_QUrl, &a2))
        {
            sipCpp->setContent(*a0,*a1,*a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setContent, doc_QGraphicsWebView_setContent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_history, "QGraphicsWebView.history() -> QWebHistory");

extern "C" {static PyObject *meth_QGraphicsWebView_history(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QWebHistory*sipRes;

            sipRes = sipCpp->history();

            return sipConvertFromType(sipRes,sipType_QWebHistory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_history, doc_QGraphicsWebView_history);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_settings, "QGraphicsWebView.settings() -> QWebSettings");

extern "C" {static PyObject *meth_QGraphicsWebView_settings(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QWebSettings*sipRes;

            sipRes = sipCpp->settings();

            return sipConvertFromType(sipRes,sipType_QWebSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_settings, doc_QGraphicsWebView_settings);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_pageAction, "QGraphicsWebView.pageAction(QWebPage.WebAction) -> QAction");

extern "C" {static PyObject *meth_QGraphicsWebView_pageAction(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_pageAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage::WebAction a0;
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QWebPage_WebAction, &a0))
        {
            QAction*sipRes;

            sipRes = sipCpp->pageAction(a0);

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_pageAction, doc_QGraphicsWebView_pageAction);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_triggerPageAction, "QGraphicsWebView.triggerPageAction(QWebPage.WebAction, bool checked=False)");

extern "C" {static PyObject *meth_QGraphicsWebView_triggerPageAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_triggerPageAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWebPage::WebAction a0;
        bool a1 = 0;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_checked,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QWebPage_WebAction, &a0, &a1))
        {
            sipCpp->triggerPageAction(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_triggerPageAction, doc_QGraphicsWebView_triggerPageAction);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_findText, "QGraphicsWebView.findText(str, QWebPage.FindFlags options=0) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_findText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_findText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebPage::FindFlags a1def = 0;
        QWebPage::FindFlags* a1 = &a1def;
        int a1State = 0;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWebPage_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->findText(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QWebPage_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_findText, doc_QGraphicsWebView_findText);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setGeometry, "QGraphicsWebView.setGeometry(QRectF)");

extern "C" {static PyObject *meth_QGraphicsWebView_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF* a0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QRectF, &a0))
        {
            (sipSelfWasArg ? sipCpp->QGraphicsWebView::setGeometry(*a0) : sipCpp->setGeometry(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setGeometry, doc_QGraphicsWebView_setGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_updateGeometry, "QGraphicsWebView.updateGeometry()");

extern "C" {static PyObject *meth_QGraphicsWebView_updateGeometry(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_updateGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QGraphicsWebView::updateGeometry() : sipCpp->updateGeometry());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_updateGeometry, doc_QGraphicsWebView_updateGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_paint, "QGraphicsWebView.paint(QPainter, QStyleOptionGraphicsItem, QWidget widget=None)");

extern "C" {static PyObject *meth_QGraphicsWebView_paint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_paint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QStyleOptionGraphicsItem* a1;
        QWidget* a2 = 0;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J8|J8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionGraphicsItem, &a1, sipType_QWidget, &a2))
        {
            (sipSelfWasArg ? sipCpp->QGraphicsWebView::paint(a0,a1,a2) : sipCpp->paint(a0,a1,a2));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_paint, doc_QGraphicsWebView_paint);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_itemChange, "QGraphicsWebView.itemChange(QGraphicsItem.GraphicsItemChange, QVariant) -> QVariant");

extern "C" {static PyObject *meth_QGraphicsWebView_itemChange(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_itemChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsItem::GraphicsItemChange a0;
        const QVariant* a1;
        int a1State = 0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsItem_GraphicsItemChange, &a0, sipType_QVariant, &a1, &a1State))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QGraphicsWebView::itemChange(a0,*a1) : sipCpp->itemChange(a0,*a1)));
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_itemChange, doc_QGraphicsWebView_itemChange);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_event, "QGraphicsWebView.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_event(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QGraphicsWebView::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_event, doc_QGraphicsWebView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_sizeHint, "QGraphicsWebView.sizeHint(Qt.SizeHint, QSizeF) -> QSizeF");

extern "C" {static PyObject *meth_QGraphicsWebView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::SizeHint a0;
        const QSizeF* a1;
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_Qt_SizeHint, &a0, sipType_QSizeF, &a1))
        {
            QSizeF*sipRes;

            sipRes = new QSizeF((sipSelfWasArg ? sipCpp->QGraphicsWebView::sizeHint(a0,*a1) : sipCpp->sizeHint(a0,*a1)));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_sizeHint, doc_QGraphicsWebView_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_inputMethodQuery, "QGraphicsWebView.inputMethodQuery(Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QGraphicsWebView_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QGraphicsWebView::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_inputMethodQuery, doc_QGraphicsWebView_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_stop, "QGraphicsWebView.stop()");

extern "C" {static PyObject *meth_QGraphicsWebView_stop(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_stop, doc_QGraphicsWebView_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_back, "QGraphicsWebView.back()");

extern "C" {static PyObject *meth_QGraphicsWebView_back(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_back(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            sipCpp->back();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_back, doc_QGraphicsWebView_back);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_forward, "QGraphicsWebView.forward()");

extern "C" {static PyObject *meth_QGraphicsWebView_forward(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_forward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            sipCpp->forward();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_forward, doc_QGraphicsWebView_forward);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_reload, "QGraphicsWebView.reload()");

extern "C" {static PyObject *meth_QGraphicsWebView_reload(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_reload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            sipCpp->reload();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_reload, doc_QGraphicsWebView_reload);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_mousePressEvent, "QGraphicsWebView.mousePressEvent(QGraphicsSceneMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_mousePressEvent, doc_QGraphicsWebView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_mouseDoubleClickEvent, "QGraphicsWebView.mouseDoubleClickEvent(QGraphicsSceneMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_mouseDoubleClickEvent, doc_QGraphicsWebView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_mouseReleaseEvent, "QGraphicsWebView.mouseReleaseEvent(QGraphicsSceneMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_mouseReleaseEvent, doc_QGraphicsWebView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_mouseMoveEvent, "QGraphicsWebView.mouseMoveEvent(QGraphicsSceneMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_mouseMoveEvent, doc_QGraphicsWebView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_hoverMoveEvent, "QGraphicsWebView.hoverMoveEvent(QGraphicsSceneHoverEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_hoverMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_hoverMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneHoverEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneHoverEvent, &a0))
        {
            sipCpp->sipProtectVirt_hoverMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_hoverMoveEvent, doc_QGraphicsWebView_hoverMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_hoverLeaveEvent, "QGraphicsWebView.hoverLeaveEvent(QGraphicsSceneHoverEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_hoverLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_hoverLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneHoverEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneHoverEvent, &a0))
        {
            sipCpp->sipProtectVirt_hoverLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_hoverLeaveEvent, doc_QGraphicsWebView_hoverLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_wheelEvent, "QGraphicsWebView.wheelEvent(QGraphicsSceneWheelEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneWheelEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_wheelEvent, doc_QGraphicsWebView_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_keyPressEvent, "QGraphicsWebView.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_keyPressEvent, doc_QGraphicsWebView_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_keyReleaseEvent, "QGraphicsWebView.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_keyReleaseEvent, doc_QGraphicsWebView_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_contextMenuEvent, "QGraphicsWebView.contextMenuEvent(QGraphicsSceneContextMenuEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneContextMenuEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_contextMenuEvent, doc_QGraphicsWebView_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_dragEnterEvent, "QGraphicsWebView.dragEnterEvent(QGraphicsSceneDragDropEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_dragEnterEvent, doc_QGraphicsWebView_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_dragLeaveEvent, "QGraphicsWebView.dragLeaveEvent(QGraphicsSceneDragDropEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_dragLeaveEvent, doc_QGraphicsWebView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_dragMoveEvent, "QGraphicsWebView.dragMoveEvent(QGraphicsSceneDragDropEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_dragMoveEvent, doc_QGraphicsWebView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_dropEvent, "QGraphicsWebView.dropEvent(QGraphicsSceneDragDropEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_dropEvent, doc_QGraphicsWebView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_focusInEvent, "QGraphicsWebView.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_focusInEvent, doc_QGraphicsWebView_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_focusOutEvent, "QGraphicsWebView.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_focusOutEvent, doc_QGraphicsWebView_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_inputMethodEvent, "QGraphicsWebView.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QGraphicsWebView_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_inputMethodEvent, doc_QGraphicsWebView_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_focusNextPrevChild, "QGraphicsWebView.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_focusNextPrevChild, doc_QGraphicsWebView_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_sceneEvent, "QGraphicsWebView.sceneEvent(QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_sceneEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_sceneEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsWebView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_sceneEvent(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_sceneEvent, doc_QGraphicsWebView_sceneEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_resizesToContents, "QGraphicsWebView.resizesToContents() -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_resizesToContents(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_resizesToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->resizesToContents();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_resizesToContents, doc_QGraphicsWebView_resizesToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setResizesToContents, "QGraphicsWebView.setResizesToContents(bool)");

extern "C" {static PyObject *meth_QGraphicsWebView_setResizesToContents(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setResizesToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            sipCpp->setResizesToContents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setResizesToContents, doc_QGraphicsWebView_setResizesToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_isTiledBackingStoreFrozen, "QGraphicsWebView.isTiledBackingStoreFrozen() -> bool");

extern "C" {static PyObject *meth_QGraphicsWebView_isTiledBackingStoreFrozen(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_isTiledBackingStoreFrozen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTiledBackingStoreFrozen();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_isTiledBackingStoreFrozen, doc_QGraphicsWebView_isTiledBackingStoreFrozen);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setTiledBackingStoreFrozen, "QGraphicsWebView.setTiledBackingStoreFrozen(bool)");

extern "C" {static PyObject *meth_QGraphicsWebView_setTiledBackingStoreFrozen(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setTiledBackingStoreFrozen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGraphicsWebView, &sipCpp, &a0))
        {
            sipCpp->setTiledBackingStoreFrozen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setTiledBackingStoreFrozen, doc_QGraphicsWebView_setTiledBackingStoreFrozen);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_renderHints, "QGraphicsWebView.renderHints() -> QPainter.RenderHints");

extern "C" {static PyObject *meth_QGraphicsWebView_renderHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_renderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsWebView, &sipCpp))
        {
            QPainter::RenderHints*sipRes;

            sipRes = new QPainter::RenderHints(sipCpp->renderHints());

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_renderHints, doc_QGraphicsWebView_renderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setRenderHints, "QGraphicsWebView.setRenderHints(QPainter.RenderHints)");

extern "C" {static PyObject *meth_QGraphicsWebView_setRenderHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setRenderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHints* a0;
        int a0State = 0;
        QGraphicsWebView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QPainter_RenderHints, &a0, &a0State))
        {
            sipCpp->setRenderHints(*a0);
            sipReleaseType(a0,sipType_QPainter_RenderHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setRenderHints, doc_QGraphicsWebView_setRenderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsWebView_setRenderHint, "QGraphicsWebView.setRenderHint(QPainter.RenderHint, bool enabled=True)");

extern "C" {static PyObject *meth_QGraphicsWebView_setRenderHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWebView_setRenderHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHint a0;
        bool a1 = 1;
        QGraphicsWebView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QGraphicsWebView, &sipCpp, sipType_QPainter_RenderHint, &a0, &a1))
        {
            sipCpp->setRenderHint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsWebView, sipName_setRenderHint, doc_QGraphicsWebView_setRenderHint);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGraphicsWebView(void *, const sipTypeDef *);}
static void *cast_QGraphicsWebView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGraphicsWebView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QGraphicsWidget)->ctd_cast((QGraphicsWidget *)(QGraphicsWebView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsWebView(void *, int);}
static void release_QGraphicsWebView(void *sipCppV,int)
{
    QGraphicsWebView *sipCpp = reinterpret_cast<QGraphicsWebView *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGraphicsWebView(sipSimpleWrapper *);}
static void dealloc_QGraphicsWebView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGraphicsWebView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsWebView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGraphicsWebView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGraphicsWebView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsWebView *sipCpp = 0;

    {
        QGraphicsItem* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QGraphicsItem, &a0, sipOwner))
        {
            sipCpp = new sipQGraphicsWebView(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsWebView[] = {{167, 2, 1}};


static PyMethodDef methods_QGraphicsWebView[] = {
    {SIP_MLNAME_CAST(sipName_back), meth_QGraphicsWebView_back, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_back)},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QGraphicsWebView_changeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QGraphicsWebView_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QGraphicsWebView_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QGraphicsWebView_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QGraphicsWebView_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QGraphicsWebView_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QGraphicsWebView_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QGraphicsWebView_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QGraphicsWebView_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QGraphicsWebView_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QGraphicsWebView_dropEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_dropEvent)},
    {SIP_MLNAME_CAST(sipName_event), meth_QGraphicsWebView_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_event)},
    {SIP_MLNAME_CAST(sipName_findText), (PyCFunction)meth_QGraphicsWebView_findText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_findText)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QGraphicsWebView_focusInEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QGraphicsWebView_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QGraphicsWebView_focusOutEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_forward), meth_QGraphicsWebView_forward, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_forward)},
    {SIP_MLNAME_CAST(sipName_grabKeyboardEvent), (PyCFunction)meth_QGraphicsWebView_grabKeyboardEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_grabMouseEvent), (PyCFunction)meth_QGraphicsWebView_grabMouseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QGraphicsWebView_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_history), meth_QGraphicsWebView_history, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_history)},
    {SIP_MLNAME_CAST(sipName_hoverEnterEvent), (PyCFunction)meth_QGraphicsWebView_hoverEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hoverLeaveEvent), (PyCFunction)meth_QGraphicsWebView_hoverLeaveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_hoverLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_hoverMoveEvent), (PyCFunction)meth_QGraphicsWebView_hoverMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_hoverMoveEvent)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QGraphicsWebView_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_icon)},
    {SIP_MLNAME_CAST(sipName_initStyleOption), (PyCFunction)meth_QGraphicsWebView_initStyleOption, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QGraphicsWebView_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QGraphicsWebView_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QGraphicsWebView_isModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_isModified)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QGraphicsWebView_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isTiledBackingStoreFrozen), meth_QGraphicsWebView_isTiledBackingStoreFrozen, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_isTiledBackingStoreFrozen)},
    {SIP_MLNAME_CAST(sipName_itemChange), meth_QGraphicsWebView_itemChange, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_itemChange)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QGraphicsWebView_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QGraphicsWebView_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_load), (PyCFunction)meth_QGraphicsWebView_load, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_load)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QGraphicsWebView_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QGraphicsWebView_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QGraphicsWebView_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QGraphicsWebView_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QGraphicsWebView_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_page), meth_QGraphicsWebView_page, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_page)},
    {SIP_MLNAME_CAST(sipName_pageAction), meth_QGraphicsWebView_pageAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_pageAction)},
    {SIP_MLNAME_CAST(sipName_paint), (PyCFunction)meth_QGraphicsWebView_paint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_paint)},
    {SIP_MLNAME_CAST(sipName_polishEvent), (PyCFunction)meth_QGraphicsWebView_polishEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_prepareGeometryChange), (PyCFunction)meth_QGraphicsWebView_prepareGeometryChange, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QGraphicsWebView_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_reload), meth_QGraphicsWebView_reload, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_reload)},
    {SIP_MLNAME_CAST(sipName_renderHints), meth_QGraphicsWebView_renderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_renderHints)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QGraphicsWebView_resizeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_resizesToContents), meth_QGraphicsWebView_resizesToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_resizesToContents)},
    {SIP_MLNAME_CAST(sipName_sceneEvent), (PyCFunction)meth_QGraphicsWebView_sceneEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_sceneEvent)},
    {SIP_MLNAME_CAST(sipName_sceneEventFilter), (PyCFunction)meth_QGraphicsWebView_sceneEventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QGraphicsWebView_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QGraphicsWebView_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setContent), (PyCFunction)meth_QGraphicsWebView_setContent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setContent)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QGraphicsWebView_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setGeometry)},
    {SIP_MLNAME_CAST(sipName_setGraphicsItem), (PyCFunction)meth_QGraphicsWebView_setGraphicsItem, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setHtml), (PyCFunction)meth_QGraphicsWebView_setHtml, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setHtml)},
    {SIP_MLNAME_CAST(sipName_setOwnedByLayout), (PyCFunction)meth_QGraphicsWebView_setOwnedByLayout, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setPage), meth_QGraphicsWebView_setPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setPage)},
    {SIP_MLNAME_CAST(sipName_setRenderHint), (PyCFunction)meth_QGraphicsWebView_setRenderHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setRenderHint)},
    {SIP_MLNAME_CAST(sipName_setRenderHints), meth_QGraphicsWebView_setRenderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setRenderHints)},
    {SIP_MLNAME_CAST(sipName_setResizesToContents), meth_QGraphicsWebView_setResizesToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setResizesToContents)},
    {SIP_MLNAME_CAST(sipName_setTiledBackingStoreFrozen), meth_QGraphicsWebView_setTiledBackingStoreFrozen, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setTiledBackingStoreFrozen)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QGraphicsWebView_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setUrl)},
    {SIP_MLNAME_CAST(sipName_setZoomFactor), meth_QGraphicsWebView_setZoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_setZoomFactor)},
    {SIP_MLNAME_CAST(sipName_settings), meth_QGraphicsWebView_settings, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_settings)},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QGraphicsWebView_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QGraphicsWebView_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_sizeHint)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QGraphicsWebView_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_stop)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QGraphicsWebView_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_title), meth_QGraphicsWebView_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_title)},
    {SIP_MLNAME_CAST(sipName_triggerPageAction), (PyCFunction)meth_QGraphicsWebView_triggerPageAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_triggerPageAction)},
    {SIP_MLNAME_CAST(sipName_ungrabKeyboardEvent), (PyCFunction)meth_QGraphicsWebView_ungrabKeyboardEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_ungrabMouseEvent), (PyCFunction)meth_QGraphicsWebView_ungrabMouseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateGeometry), meth_QGraphicsWebView_updateGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_updateGeometry)},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QGraphicsWebView_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_url), meth_QGraphicsWebView_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_url)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QGraphicsWebView_wheelEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsWebView_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_windowFrameEvent), (PyCFunction)meth_QGraphicsWebView_windowFrameEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_windowFrameSectionAt), (PyCFunction)meth_QGraphicsWebView_windowFrameSectionAt, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_zoomFactor), meth_QGraphicsWebView_zoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsWebView_zoomFactor)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGraphicsWebView[] = {
    {"linkClicked(QUrl)", "\1QGraphicsWebView.linkClicked[QUrl]", 0, 0},
    {"statusBarMessage(QString)", "\1QGraphicsWebView.statusBarMessage[str]", 0, 0},
    {"iconChanged()", "\1QGraphicsWebView.iconChanged", 0, 0},
    {"titleChanged(QString)", "\1QGraphicsWebView.titleChanged[str]", 0, 0},
    {"urlChanged(QUrl)", "\1QGraphicsWebView.urlChanged[QUrl]", 0, 0},
    {"loadProgress(int)", "\1QGraphicsWebView.loadProgress[int]", 0, 0},
    {"loadFinished(bool)", "\1QGraphicsWebView.loadFinished[bool]", 0, 0},
    {"loadStarted()", "\1QGraphicsWebView.loadStarted", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QGraphicsWebView, "\1QGraphicsWebView(QGraphicsItem parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWebKitWidgets_QGraphicsWebView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsWebView,
        {0}
    },
    {
        sipNameNr_QGraphicsWebView,
        {0, 0, 1},
        83, methods_QGraphicsWebView,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGraphicsWebView,
    -1,
    -1,
    supers_QGraphicsWebView,
    0,
    init_type_QGraphicsWebView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsWebView,
    0,
    0,
    0,
    release_QGraphicsWebView,
    cast_QGraphicsWebView,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGraphicsWebView::staticMetaObject,
    0,
    signals_QGraphicsWebView,
    0
};
