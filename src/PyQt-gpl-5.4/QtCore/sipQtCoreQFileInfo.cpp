/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQFileInfo.cpp"

#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQFileInfo.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qfile.sip"
#include <qfile.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQFileInfo.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qdir.sip"
#include <qdir.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQFileInfo.cpp"
#line 299 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQFileInfo.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQFileInfo.cpp"


PyDoc_STRVAR(doc_QFileInfo_setFile, "QFileInfo.setFile(str)\n"
    "QFileInfo.setFile(QFile)\n"
    "QFileInfo.setFile(QDir, str)");

extern "C" {static PyObject *meth_QFileInfo_setFile(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_setFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFile(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QFile* a0;
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QFile, &a0))
        {
            sipCpp->setFile(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QDir* a0;
        const QString* a1;
        int a1State = 0;
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QDir, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setFile(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_setFile, doc_QFileInfo_setFile);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_exists, "QFileInfo.exists() -> bool\n"
    "QFileInfo.exists(str) -> bool");

extern "C" {static PyObject *meth_QFileInfo_exists(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_exists(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->exists();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = QFileInfo::exists(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_exists, doc_QFileInfo_exists);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_refresh, "QFileInfo.refresh()");

extern "C" {static PyObject *meth_QFileInfo_refresh(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_refresh(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            sipCpp->refresh();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_refresh, doc_QFileInfo_refresh);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_filePath, "QFileInfo.filePath() -> str");

extern "C" {static PyObject *meth_QFileInfo_filePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->filePath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_filePath, doc_QFileInfo_filePath);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_absoluteFilePath, "QFileInfo.absoluteFilePath() -> str");

extern "C" {static PyObject *meth_QFileInfo_absoluteFilePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_absoluteFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->absoluteFilePath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_absoluteFilePath, doc_QFileInfo_absoluteFilePath);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_canonicalFilePath, "QFileInfo.canonicalFilePath() -> str");

extern "C" {static PyObject *meth_QFileInfo_canonicalFilePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_canonicalFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->canonicalFilePath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_canonicalFilePath, doc_QFileInfo_canonicalFilePath);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_fileName, "QFileInfo.fileName() -> str");

extern "C" {static PyObject *meth_QFileInfo_fileName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_fileName, doc_QFileInfo_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_baseName, "QFileInfo.baseName() -> str");

extern "C" {static PyObject *meth_QFileInfo_baseName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_baseName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->baseName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_baseName, doc_QFileInfo_baseName);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_completeBaseName, "QFileInfo.completeBaseName() -> str");

extern "C" {static PyObject *meth_QFileInfo_completeBaseName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_completeBaseName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->completeBaseName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_completeBaseName, doc_QFileInfo_completeBaseName);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_suffix, "QFileInfo.suffix() -> str");

extern "C" {static PyObject *meth_QFileInfo_suffix(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_suffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->suffix());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_suffix, doc_QFileInfo_suffix);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_completeSuffix, "QFileInfo.completeSuffix() -> str");

extern "C" {static PyObject *meth_QFileInfo_completeSuffix(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_completeSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->completeSuffix());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_completeSuffix, doc_QFileInfo_completeSuffix);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_path, "QFileInfo.path() -> str");

extern "C" {static PyObject *meth_QFileInfo_path(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->path());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_path, doc_QFileInfo_path);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_absolutePath, "QFileInfo.absolutePath() -> str");

extern "C" {static PyObject *meth_QFileInfo_absolutePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_absolutePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->absolutePath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_absolutePath, doc_QFileInfo_absolutePath);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_canonicalPath, "QFileInfo.canonicalPath() -> str");

extern "C" {static PyObject *meth_QFileInfo_canonicalPath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_canonicalPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->canonicalPath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_canonicalPath, doc_QFileInfo_canonicalPath);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_dir, "QFileInfo.dir() -> QDir");

extern "C" {static PyObject *meth_QFileInfo_dir(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_dir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QDir*sipRes;

            sipRes = new QDir(sipCpp->dir());

            return sipConvertFromNewType(sipRes,sipType_QDir,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_dir, doc_QFileInfo_dir);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_absoluteDir, "QFileInfo.absoluteDir() -> QDir");

extern "C" {static PyObject *meth_QFileInfo_absoluteDir(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_absoluteDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QDir*sipRes;

            sipRes = new QDir(sipCpp->absoluteDir());

            return sipConvertFromNewType(sipRes,sipType_QDir,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_absoluteDir, doc_QFileInfo_absoluteDir);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_isReadable, "QFileInfo.isReadable() -> bool");

extern "C" {static PyObject *meth_QFileInfo_isReadable(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isReadable, doc_QFileInfo_isReadable);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_isWritable, "QFileInfo.isWritable() -> bool");

extern "C" {static PyObject *meth_QFileInfo_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWritable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isWritable, doc_QFileInfo_isWritable);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_isExecutable, "QFileInfo.isExecutable() -> bool");

extern "C" {static PyObject *meth_QFileInfo_isExecutable(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isExecutable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isExecutable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isExecutable, doc_QFileInfo_isExecutable);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_isHidden, "QFileInfo.isHidden() -> bool");

extern "C" {static PyObject *meth_QFileInfo_isHidden(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isHidden();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isHidden, doc_QFileInfo_isHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_isRelative, "QFileInfo.isRelative() -> bool");

extern "C" {static PyObject *meth_QFileInfo_isRelative(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isRelative(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRelative();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isRelative, doc_QFileInfo_isRelative);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_isAbsolute, "QFileInfo.isAbsolute() -> bool");

extern "C" {static PyObject *meth_QFileInfo_isAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAbsolute();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isAbsolute, doc_QFileInfo_isAbsolute);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_makeAbsolute, "QFileInfo.makeAbsolute() -> bool");

extern "C" {static PyObject *meth_QFileInfo_makeAbsolute(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_makeAbsolute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->makeAbsolute();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_makeAbsolute, doc_QFileInfo_makeAbsolute);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_isFile, "QFileInfo.isFile() -> bool");

extern "C" {static PyObject *meth_QFileInfo_isFile(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFile();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isFile, doc_QFileInfo_isFile);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_isDir, "QFileInfo.isDir() -> bool");

extern "C" {static PyObject *meth_QFileInfo_isDir(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDir();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isDir, doc_QFileInfo_isDir);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_isSymLink, "QFileInfo.isSymLink() -> bool");

extern "C" {static PyObject *meth_QFileInfo_isSymLink(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isSymLink(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSymLink();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isSymLink, doc_QFileInfo_isSymLink);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_isRoot, "QFileInfo.isRoot() -> bool");

extern "C" {static PyObject *meth_QFileInfo_isRoot(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRoot();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isRoot, doc_QFileInfo_isRoot);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_owner, "QFileInfo.owner() -> str");

extern "C" {static PyObject *meth_QFileInfo_owner(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_owner(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->owner());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_owner, doc_QFileInfo_owner);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_ownerId, "QFileInfo.ownerId() -> int");

extern "C" {static PyObject *meth_QFileInfo_ownerId(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_ownerId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            uint sipRes;

            sipRes = sipCpp->ownerId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_ownerId, doc_QFileInfo_ownerId);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_group, "QFileInfo.group() -> str");

extern "C" {static PyObject *meth_QFileInfo_group(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_group(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->group());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_group, doc_QFileInfo_group);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_groupId, "QFileInfo.groupId() -> int");

extern "C" {static PyObject *meth_QFileInfo_groupId(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_groupId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            uint sipRes;

            sipRes = sipCpp->groupId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_groupId, doc_QFileInfo_groupId);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_permission, "QFileInfo.permission(QFileDevice.Permissions) -> bool");

extern "C" {static PyObject *meth_QFileInfo_permission(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_permission(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileDevice::Permissions* a0;
        int a0State = 0;
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QFileDevice_Permissions, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->permission(*a0);
            sipReleaseType(a0,sipType_QFileDevice_Permissions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_permission, doc_QFileInfo_permission);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_permissions, "QFileInfo.permissions() -> QFileDevice.Permissions");

extern "C" {static PyObject *meth_QFileInfo_permissions(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_permissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QFileDevice::Permissions*sipRes;

            sipRes = new QFileDevice::Permissions(sipCpp->permissions());

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_Permissions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_permissions, doc_QFileInfo_permissions);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_size, "QFileInfo.size() -> int");

extern "C" {static PyObject *meth_QFileInfo_size(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->size();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_size, doc_QFileInfo_size);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_created, "QFileInfo.created() -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_created(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_created(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QDateTime*sipRes;

            sipRes = new QDateTime(sipCpp->created());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_created, doc_QFileInfo_created);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_lastModified, "QFileInfo.lastModified() -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_lastModified(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_lastModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QDateTime*sipRes;

            sipRes = new QDateTime(sipCpp->lastModified());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_lastModified, doc_QFileInfo_lastModified);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_lastRead, "QFileInfo.lastRead() -> QDateTime");

extern "C" {static PyObject *meth_QFileInfo_lastRead(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_lastRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QDateTime*sipRes;

            sipRes = new QDateTime(sipCpp->lastRead());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_lastRead, doc_QFileInfo_lastRead);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_caching, "QFileInfo.caching() -> bool");

extern "C" {static PyObject *meth_QFileInfo_caching(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_caching(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->caching();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_caching, doc_QFileInfo_caching);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_setCaching, "QFileInfo.setCaching(bool)");

extern "C" {static PyObject *meth_QFileInfo_setCaching(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_setCaching(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileInfo, &sipCpp, &a0))
        {
            sipCpp->setCaching(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_setCaching, doc_QFileInfo_setCaching);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_symLinkTarget, "QFileInfo.symLinkTarget() -> str");

extern "C" {static PyObject *meth_QFileInfo_symLinkTarget(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_symLinkTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->symLinkTarget());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_symLinkTarget, doc_QFileInfo_symLinkTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_bundleName, "QFileInfo.bundleName() -> str");

extern "C" {static PyObject *meth_QFileInfo_bundleName(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_bundleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->bundleName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_bundleName, doc_QFileInfo_bundleName);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_isBundle, "QFileInfo.isBundle() -> bool");

extern "C" {static PyObject *meth_QFileInfo_isBundle(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isBundle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBundle();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isBundle, doc_QFileInfo_isBundle);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_isNativePath, "QFileInfo.isNativePath() -> bool");

extern "C" {static PyObject *meth_QFileInfo_isNativePath(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_isNativePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNativePath();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_isNativePath, doc_QFileInfo_isNativePath);

    return NULL;
}


PyDoc_STRVAR(doc_QFileInfo_swap, "QFileInfo.swap(QFileInfo)");

extern "C" {static PyObject *meth_QFileInfo_swap(PyObject *, PyObject *);}
static PyObject *meth_QFileInfo_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileInfo* a0;
        QFileInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileInfo, &sipCpp, sipType_QFileInfo, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileInfo, sipName_swap, doc_QFileInfo_swap);

    return NULL;
}


extern "C" {static PyObject *slot_QFileInfo___ne__(PyObject *,PyObject *);}
static PyObject *slot_QFileInfo___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QFileInfo *sipCpp = reinterpret_cast<QFileInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileInfo));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QFileInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFileInfo, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QFileInfo::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QFileInfo,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QFileInfo___eq__(PyObject *,PyObject *);}
static PyObject *slot_QFileInfo___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QFileInfo *sipCpp = reinterpret_cast<QFileInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFileInfo));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QFileInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QFileInfo, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QFileInfo::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QFileInfo,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QFileInfo(void *, const sipTypeDef *);}
static void *cast_QFileInfo(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QFileInfo)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileInfo(void *, int);}
static void release_QFileInfo(void *sipCppV,int)
{
    delete reinterpret_cast<QFileInfo *>(sipCppV);
}


extern "C" {static void assign_QFileInfo(void *, SIP_SSIZE_T, const void *);}
static void assign_QFileInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QFileInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QFileInfo *>(sipSrc);
}


extern "C" {static void *array_QFileInfo(SIP_SSIZE_T);}
static void *array_QFileInfo(SIP_SSIZE_T sipNrElem)
{
    return new QFileInfo[sipNrElem];
}


extern "C" {static void *copy_QFileInfo(const void *, SIP_SSIZE_T);}
static void *copy_QFileInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QFileInfo(reinterpret_cast<const QFileInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QFileInfo(sipSimpleWrapper *);}
static void dealloc_QFileInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QFileInfo(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QFileInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFileInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QFileInfo *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QFileInfo();

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new QFileInfo(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QFile* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QFile, &a0))
        {
            sipCpp = new QFileInfo(*a0);

            return sipCpp;
        }
    }

    {
        const QDir* a0;
        const QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J1", sipType_QDir, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp = new QFileInfo(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const QFileInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QFileInfo, &a0))
        {
            sipCpp = new QFileInfo(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QFileInfo[] = {
    {(void *)slot_QFileInfo___ne__, ne_slot},
    {(void *)slot_QFileInfo___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QFileInfo[] = {
    {SIP_MLNAME_CAST(sipName_absoluteDir), meth_QFileInfo_absoluteDir, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_absoluteDir)},
    {SIP_MLNAME_CAST(sipName_absoluteFilePath), meth_QFileInfo_absoluteFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_absoluteFilePath)},
    {SIP_MLNAME_CAST(sipName_absolutePath), meth_QFileInfo_absolutePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_absolutePath)},
    {SIP_MLNAME_CAST(sipName_baseName), meth_QFileInfo_baseName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_baseName)},
    {SIP_MLNAME_CAST(sipName_bundleName), meth_QFileInfo_bundleName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_bundleName)},
    {SIP_MLNAME_CAST(sipName_caching), meth_QFileInfo_caching, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_caching)},
    {SIP_MLNAME_CAST(sipName_canonicalFilePath), meth_QFileInfo_canonicalFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_canonicalFilePath)},
    {SIP_MLNAME_CAST(sipName_canonicalPath), meth_QFileInfo_canonicalPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_canonicalPath)},
    {SIP_MLNAME_CAST(sipName_completeBaseName), meth_QFileInfo_completeBaseName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_completeBaseName)},
    {SIP_MLNAME_CAST(sipName_completeSuffix), meth_QFileInfo_completeSuffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_completeSuffix)},
    {SIP_MLNAME_CAST(sipName_created), meth_QFileInfo_created, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_created)},
    {SIP_MLNAME_CAST(sipName_dir), meth_QFileInfo_dir, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_dir)},
    {SIP_MLNAME_CAST(sipName_exists), meth_QFileInfo_exists, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_exists)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QFileInfo_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_fileName)},
    {SIP_MLNAME_CAST(sipName_filePath), meth_QFileInfo_filePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_filePath)},
    {SIP_MLNAME_CAST(sipName_group), meth_QFileInfo_group, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_group)},
    {SIP_MLNAME_CAST(sipName_groupId), meth_QFileInfo_groupId, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_groupId)},
    {SIP_MLNAME_CAST(sipName_isAbsolute), meth_QFileInfo_isAbsolute, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isAbsolute)},
    {SIP_MLNAME_CAST(sipName_isBundle), meth_QFileInfo_isBundle, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isBundle)},
    {SIP_MLNAME_CAST(sipName_isDir), meth_QFileInfo_isDir, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isDir)},
    {SIP_MLNAME_CAST(sipName_isExecutable), meth_QFileInfo_isExecutable, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isExecutable)},
    {SIP_MLNAME_CAST(sipName_isFile), meth_QFileInfo_isFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isFile)},
    {SIP_MLNAME_CAST(sipName_isHidden), meth_QFileInfo_isHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isHidden)},
    {SIP_MLNAME_CAST(sipName_isNativePath), meth_QFileInfo_isNativePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isNativePath)},
    {SIP_MLNAME_CAST(sipName_isReadable), meth_QFileInfo_isReadable, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isReadable)},
    {SIP_MLNAME_CAST(sipName_isRelative), meth_QFileInfo_isRelative, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isRelative)},
    {SIP_MLNAME_CAST(sipName_isRoot), meth_QFileInfo_isRoot, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isRoot)},
    {SIP_MLNAME_CAST(sipName_isSymLink), meth_QFileInfo_isSymLink, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isSymLink)},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QFileInfo_isWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_isWritable)},
    {SIP_MLNAME_CAST(sipName_lastModified), meth_QFileInfo_lastModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_lastModified)},
    {SIP_MLNAME_CAST(sipName_lastRead), meth_QFileInfo_lastRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_lastRead)},
    {SIP_MLNAME_CAST(sipName_makeAbsolute), meth_QFileInfo_makeAbsolute, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_makeAbsolute)},
    {SIP_MLNAME_CAST(sipName_owner), meth_QFileInfo_owner, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_owner)},
    {SIP_MLNAME_CAST(sipName_ownerId), meth_QFileInfo_ownerId, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_ownerId)},
    {SIP_MLNAME_CAST(sipName_path), meth_QFileInfo_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_path)},
    {SIP_MLNAME_CAST(sipName_permission), meth_QFileInfo_permission, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_permission)},
    {SIP_MLNAME_CAST(sipName_permissions), meth_QFileInfo_permissions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_permissions)},
    {SIP_MLNAME_CAST(sipName_refresh), meth_QFileInfo_refresh, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_refresh)},
    {SIP_MLNAME_CAST(sipName_setCaching), meth_QFileInfo_setCaching, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_setCaching)},
    {SIP_MLNAME_CAST(sipName_setFile), meth_QFileInfo_setFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_setFile)},
    {SIP_MLNAME_CAST(sipName_size), meth_QFileInfo_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_size)},
    {SIP_MLNAME_CAST(sipName_suffix), meth_QFileInfo_suffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_suffix)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QFileInfo_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_swap)},
    {SIP_MLNAME_CAST(sipName_symLinkTarget), meth_QFileInfo_symLinkTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileInfo_symLinkTarget)}
};

PyDoc_STRVAR(doc_QFileInfo, "\1QFileInfo()\n"
    "QFileInfo(str)\n"
    "QFileInfo(QFile)\n"
    "QFileInfo(QDir, str)\n"
    "QFileInfo(QFileInfo)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QFileInfo = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QFileInfo,
        {0}
    },
    {
        sipNameNr_QFileInfo,
        {0, 0, 1},
        44, methods_QFileInfo,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QFileInfo,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QFileInfo,
    init_type_QFileInfo,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QFileInfo,
    assign_QFileInfo,
    array_QFileInfo,
    copy_QFileInfo,
    release_QFileInfo,
    cast_QFileInfo,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
