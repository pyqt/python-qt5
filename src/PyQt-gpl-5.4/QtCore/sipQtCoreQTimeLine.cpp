/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:21 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qtimeline.sip"
#include <qtimeline.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qthread.sip"
#include <qthread.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"


class sipQTimeLine : public QTimeLine
{
public:
    sipQTimeLine(int,QObject*);
    virtual ~sipQTimeLine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void timerEvent(QTimerEvent*);
    qreal valueForTime(int) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTimeLine(const sipQTimeLine &);
    sipQTimeLine &operator = (const sipQTimeLine &);

    char sipPyMethods[8];
};

sipQTimeLine::sipQTimeLine(int a0,QObject*a1): QTimeLine(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTimeLine::~sipQTimeLine()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTimeLine::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QTimeLine);
}

int sipQTimeLine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTimeLine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QTimeLine,_c,_id,_a);

    return _id;
}

void *sipQTimeLine::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QTimeLine, _clname, &sipCpp) ? sipCpp : QTimeLine::qt_metacast(_clname));
}

void sipQTimeLine::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTimeLine::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTimeLine::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTimeLine::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTimeLine::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTimeLine::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTimeLine::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTimeLine::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQTimeLine::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTimeLine::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQTimeLine::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTimeLine::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQTimeLine::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTimeLine::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

qreal sipQTimeLine::valueForTime(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_valueForTime);

    if (!sipMeth)
        return QTimeLine::valueForTime(a0);

    extern double sipVH_QtCore_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_10(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QObject* sipQTimeLine::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQTimeLine::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQTimeLine::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQTimeLine::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQTimeLine::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQTimeLine::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQTimeLine::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQTimeLine::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQTimeLine::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QTimeLine::timerEvent(a0) : timerEvent(a0));
}


PyDoc_STRVAR(doc_QTimeLine_sender, "QTimeLine.sender() -> QObject");

extern "C" {static PyObject *meth_QTimeLine_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTimeLine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 393 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_sender, doc_QTimeLine_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_receivers, "QTimeLine.receivers(signal) -> int");

extern "C" {static PyObject *meth_QTimeLine_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQTimeLine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 452 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeLine.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_receivers, doc_QTimeLine_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_childEvent, "QTimeLine.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QTimeLine_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQTimeLine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_childEvent, doc_QTimeLine_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_customEvent, "QTimeLine.customEvent(QEvent)");

extern "C" {static PyObject *meth_QTimeLine_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTimeLine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_customEvent, doc_QTimeLine_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_connectNotify, "QTimeLine.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTimeLine_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTimeLine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_connectNotify, doc_QTimeLine_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_disconnectNotify, "QTimeLine.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTimeLine_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTimeLine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_disconnectNotify, doc_QTimeLine_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_senderSignalIndex, "QTimeLine.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QTimeLine_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTimeLine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_senderSignalIndex, doc_QTimeLine_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_isSignalConnected, "QTimeLine.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QTimeLine_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQTimeLine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_isSignalConnected, doc_QTimeLine_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_state, "QTimeLine.state() -> QTimeLine.State");

extern "C" {static PyObject *meth_QTimeLine_state(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            QTimeLine::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QTimeLine_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_state, doc_QTimeLine_state);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_loopCount, "QTimeLine.loopCount() -> int");

extern "C" {static PyObject *meth_QTimeLine_loopCount(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_loopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->loopCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_loopCount, doc_QTimeLine_loopCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_setLoopCount, "QTimeLine.setLoopCount(int)");

extern "C" {static PyObject *meth_QTimeLine_setLoopCount(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setLoopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setLoopCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setLoopCount, doc_QTimeLine_setLoopCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_direction, "QTimeLine.direction() -> QTimeLine.Direction");

extern "C" {static PyObject *meth_QTimeLine_direction(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_direction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            QTimeLine::Direction sipRes;

            sipRes = sipCpp->direction();

            return sipConvertFromEnum(sipRes,sipType_QTimeLine_Direction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_direction, doc_QTimeLine_direction);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_setDirection, "QTimeLine.setDirection(QTimeLine.Direction)");

extern "C" {static PyObject *meth_QTimeLine_setDirection(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine::Direction a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QTimeLine_Direction, &a0))
        {
            sipCpp->setDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setDirection, doc_QTimeLine_setDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_duration, "QTimeLine.duration() -> int");

extern "C" {static PyObject *meth_QTimeLine_duration(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->duration();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_duration, doc_QTimeLine_duration);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_setDuration, "QTimeLine.setDuration(int)");

extern "C" {static PyObject *meth_QTimeLine_setDuration(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setDuration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setDuration, doc_QTimeLine_setDuration);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_startFrame, "QTimeLine.startFrame() -> int");

extern "C" {static PyObject *meth_QTimeLine_startFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_startFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->startFrame();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_startFrame, doc_QTimeLine_startFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_setStartFrame, "QTimeLine.setStartFrame(int)");

extern "C" {static PyObject *meth_QTimeLine_setStartFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setStartFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setStartFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setStartFrame, doc_QTimeLine_setStartFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_endFrame, "QTimeLine.endFrame() -> int");

extern "C" {static PyObject *meth_QTimeLine_endFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_endFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->endFrame();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_endFrame, doc_QTimeLine_endFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_setEndFrame, "QTimeLine.setEndFrame(int)");

extern "C" {static PyObject *meth_QTimeLine_setEndFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setEndFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setEndFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setEndFrame, doc_QTimeLine_setEndFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_setFrameRange, "QTimeLine.setFrameRange(int, int)");

extern "C" {static PyObject *meth_QTimeLine_setFrameRange(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setFrameRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTimeLine, &sipCpp, &a0, &a1))
        {
            sipCpp->setFrameRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setFrameRange, doc_QTimeLine_setFrameRange);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_updateInterval, "QTimeLine.updateInterval() -> int");

extern "C" {static PyObject *meth_QTimeLine_updateInterval(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_updateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->updateInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_updateInterval, doc_QTimeLine_updateInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_setUpdateInterval, "QTimeLine.setUpdateInterval(int)");

extern "C" {static PyObject *meth_QTimeLine_setUpdateInterval(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setUpdateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setUpdateInterval(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setUpdateInterval, doc_QTimeLine_setUpdateInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_curveShape, "QTimeLine.curveShape() -> QTimeLine.CurveShape");

extern "C" {static PyObject *meth_QTimeLine_curveShape(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_curveShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            QTimeLine::CurveShape sipRes;

            sipRes = sipCpp->curveShape();

            return sipConvertFromEnum(sipRes,sipType_QTimeLine_CurveShape);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_curveShape, doc_QTimeLine_curveShape);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_setCurveShape, "QTimeLine.setCurveShape(QTimeLine.CurveShape)");

extern "C" {static PyObject *meth_QTimeLine_setCurveShape(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setCurveShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine::CurveShape a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QTimeLine_CurveShape, &a0))
        {
            sipCpp->setCurveShape(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setCurveShape, doc_QTimeLine_setCurveShape);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_currentTime, "QTimeLine.currentTime() -> int");

extern "C" {static PyObject *meth_QTimeLine_currentTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_currentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentTime();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_currentTime, doc_QTimeLine_currentTime);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_currentFrame, "QTimeLine.currentFrame() -> int");

extern "C" {static PyObject *meth_QTimeLine_currentFrame(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_currentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentFrame();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_currentFrame, doc_QTimeLine_currentFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_currentValue, "QTimeLine.currentValue() -> float");

extern "C" {static PyObject *meth_QTimeLine_currentValue(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_currentValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->currentValue();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_currentValue, doc_QTimeLine_currentValue);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_frameForTime, "QTimeLine.frameForTime(int) -> int");

extern "C" {static PyObject *meth_QTimeLine_frameForTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_frameForTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->frameForTime(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_frameForTime, doc_QTimeLine_frameForTime);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_valueForTime, "QTimeLine.valueForTime(int) -> float");

extern "C" {static PyObject *meth_QTimeLine_valueForTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_valueForTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            qreal sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTimeLine::valueForTime(a0) : sipCpp->valueForTime(a0));

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_valueForTime, doc_QTimeLine_valueForTime);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_resume, "QTimeLine.resume()");

extern "C" {static PyObject *meth_QTimeLine_resume(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_resume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            sipCpp->resume();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_resume, doc_QTimeLine_resume);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_setCurrentTime, "QTimeLine.setCurrentTime(int)");

extern "C" {static PyObject *meth_QTimeLine_setCurrentTime(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setCurrentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setCurrentTime(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setCurrentTime, doc_QTimeLine_setCurrentTime);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_setPaused, "QTimeLine.setPaused(bool)");

extern "C" {static PyObject *meth_QTimeLine_setPaused(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setPaused(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTimeLine, &sipCpp, &a0))
        {
            sipCpp->setPaused(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setPaused, doc_QTimeLine_setPaused);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_start, "QTimeLine.start()");

extern "C" {static PyObject *meth_QTimeLine_start(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_start, doc_QTimeLine_start);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_stop, "QTimeLine.stop()");

extern "C" {static PyObject *meth_QTimeLine_stop(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_stop, doc_QTimeLine_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_toggleDirection, "QTimeLine.toggleDirection()");

extern "C" {static PyObject *meth_QTimeLine_toggleDirection(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_toggleDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            sipCpp->toggleDirection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_toggleDirection, doc_QTimeLine_toggleDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_timerEvent, "QTimeLine.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QTimeLine_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQTimeLine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_timerEvent, doc_QTimeLine_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_easingCurve, "QTimeLine.easingCurve() -> QEasingCurve");

extern "C" {static PyObject *meth_QTimeLine_easingCurve(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_easingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTimeLine, &sipCpp))
        {
            QEasingCurve*sipRes;

            sipRes = new QEasingCurve(sipCpp->easingCurve());

            return sipConvertFromNewType(sipRes,sipType_QEasingCurve,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_easingCurve, doc_QTimeLine_easingCurve);

    return NULL;
}


PyDoc_STRVAR(doc_QTimeLine_setEasingCurve, "QTimeLine.setEasingCurve(QEasingCurve)");

extern "C" {static PyObject *meth_QTimeLine_setEasingCurve(PyObject *, PyObject *);}
static PyObject *meth_QTimeLine_setEasingCurve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QEasingCurve* a0;
        int a0State = 0;
        QTimeLine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTimeLine, &sipCpp, sipType_QEasingCurve, &a0, &a0State))
        {
            sipCpp->setEasingCurve(*a0);
            sipReleaseType(const_cast<QEasingCurve *>(a0),sipType_QEasingCurve,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTimeLine, sipName_setEasingCurve, doc_QTimeLine_setEasingCurve);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTimeLine(void *, const sipTypeDef *);}
static void *cast_QTimeLine(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTimeLine)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QTimeLine *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTimeLine(void *, int);}
static void release_QTimeLine(void *sipCppV,int)
{
    QTimeLine *sipCpp = reinterpret_cast<QTimeLine *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTimeLine(sipSimpleWrapper *);}
static void dealloc_QTimeLine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTimeLine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTimeLine(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTimeLine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTimeLine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTimeLine *sipCpp = 0;

    {
        int a0 = 1000;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            sipName_duration,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|iJH", &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQTimeLine(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTimeLine[] = {{162, 255, 1}};


static PyMethodDef methods_QTimeLine[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QTimeLine_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QTimeLine_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_currentFrame), meth_QTimeLine_currentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_currentFrame)},
    {SIP_MLNAME_CAST(sipName_currentTime), meth_QTimeLine_currentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_currentTime)},
    {SIP_MLNAME_CAST(sipName_currentValue), meth_QTimeLine_currentValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_currentValue)},
    {SIP_MLNAME_CAST(sipName_curveShape), meth_QTimeLine_curveShape, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_curveShape)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QTimeLine_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_direction), meth_QTimeLine_direction, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_direction)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QTimeLine_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_duration), meth_QTimeLine_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_duration)},
    {SIP_MLNAME_CAST(sipName_easingCurve), meth_QTimeLine_easingCurve, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_easingCurve)},
    {SIP_MLNAME_CAST(sipName_endFrame), meth_QTimeLine_endFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_endFrame)},
    {SIP_MLNAME_CAST(sipName_frameForTime), meth_QTimeLine_frameForTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_frameForTime)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QTimeLine_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_loopCount), meth_QTimeLine_loopCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_loopCount)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QTimeLine_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_resume), meth_QTimeLine_resume, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_resume)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QTimeLine_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QTimeLine_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentTime), meth_QTimeLine_setCurrentTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setCurrentTime)},
    {SIP_MLNAME_CAST(sipName_setCurveShape), meth_QTimeLine_setCurveShape, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setCurveShape)},
    {SIP_MLNAME_CAST(sipName_setDirection), meth_QTimeLine_setDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setDirection)},
    {SIP_MLNAME_CAST(sipName_setDuration), meth_QTimeLine_setDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setDuration)},
    {SIP_MLNAME_CAST(sipName_setEasingCurve), meth_QTimeLine_setEasingCurve, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setEasingCurve)},
    {SIP_MLNAME_CAST(sipName_setEndFrame), meth_QTimeLine_setEndFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setEndFrame)},
    {SIP_MLNAME_CAST(sipName_setFrameRange), meth_QTimeLine_setFrameRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setFrameRange)},
    {SIP_MLNAME_CAST(sipName_setLoopCount), meth_QTimeLine_setLoopCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setLoopCount)},
    {SIP_MLNAME_CAST(sipName_setPaused), meth_QTimeLine_setPaused, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setPaused)},
    {SIP_MLNAME_CAST(sipName_setStartFrame), meth_QTimeLine_setStartFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setStartFrame)},
    {SIP_MLNAME_CAST(sipName_setUpdateInterval), meth_QTimeLine_setUpdateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_setUpdateInterval)},
    {SIP_MLNAME_CAST(sipName_start), meth_QTimeLine_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_start)},
    {SIP_MLNAME_CAST(sipName_startFrame), meth_QTimeLine_startFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_startFrame)},
    {SIP_MLNAME_CAST(sipName_state), meth_QTimeLine_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_state)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QTimeLine_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_stop)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QTimeLine_timerEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTimeLine_timerEvent)},
    {SIP_MLNAME_CAST(sipName_toggleDirection), meth_QTimeLine_toggleDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_toggleDirection)},
    {SIP_MLNAME_CAST(sipName_updateInterval), meth_QTimeLine_updateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_updateInterval)},
    {SIP_MLNAME_CAST(sipName_valueForTime), meth_QTimeLine_valueForTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QTimeLine_valueForTime)}
};

static sipEnumMemberDef enummembers_QTimeLine[] = {
    {sipName_Backward, static_cast<int>(QTimeLine::Backward), 266},
    {sipName_CosineCurve, static_cast<int>(QTimeLine::CosineCurve), 265},
    {sipName_EaseInCurve, static_cast<int>(QTimeLine::EaseInCurve), 265},
    {sipName_EaseInOutCurve, static_cast<int>(QTimeLine::EaseInOutCurve), 265},
    {sipName_EaseOutCurve, static_cast<int>(QTimeLine::EaseOutCurve), 265},
    {sipName_Forward, static_cast<int>(QTimeLine::Forward), 266},
    {sipName_LinearCurve, static_cast<int>(QTimeLine::LinearCurve), 265},
    {sipName_NotRunning, static_cast<int>(QTimeLine::NotRunning), 267},
    {sipName_Paused, static_cast<int>(QTimeLine::Paused), 267},
    {sipName_Running, static_cast<int>(QTimeLine::Running), 267},
    {sipName_SineCurve, static_cast<int>(QTimeLine::SineCurve), 265},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTimeLine[] = {
    {"valueChanged(qreal)", "\1QTimeLine.valueChanged[float]", 0, 0},
    {"stateChanged(QTimeLine::State)", "\1QTimeLine.stateChanged[QTimeLine.State]", 0, 0},
    {"frameChanged(int)", "\1QTimeLine.frameChanged[int]", 0, 0},
    {"finished()", "\1QTimeLine.finished", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QTimeLine, "\1QTimeLine(int duration=1000, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QTimeLine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTimeLine,
        {0}
    },
    {
        sipNameNr_QTimeLine,
        {0, 0, 1},
        38, methods_QTimeLine,
        11, enummembers_QTimeLine,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTimeLine,
    -1,
    -1,
    supers_QTimeLine,
    0,
    init_type_QTimeLine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTimeLine,
    0,
    0,
    0,
    release_QTimeLine,
    cast_QTimeLine,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTimeLine::staticMetaObject,
    0,
    signals_QTimeLine,
    0
};
