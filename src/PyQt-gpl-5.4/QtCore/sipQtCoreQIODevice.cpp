/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qthread.sip"
#include <qthread.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"


class sipQIODevice : public QIODevice
{
public:
    sipQIODevice();
    sipQIODevice(QObject*);
    virtual ~sipQIODevice();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    qint64 sipProtect_readData(char*,qint64);
    qint64 sipProtectVirt_readLineData(bool,char*,qint64);
    qint64 sipProtect_writeData(const char*,PY_LONG_LONG);
    void sipProtect_setOpenMode(QIODevice::OpenMode);
    void sipProtect_setErrorString(const QString&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    qint64 writeData(const char*,PY_LONG_LONG);
    qint64 readLineData(char*,qint64);
    qint64 readData(char*,qint64);
    bool waitForBytesWritten(int);
    bool waitForReadyRead(int);
    bool canReadLine() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;
    bool reset();
    bool atEnd() const;
    bool seek(qint64);
    qint64 size() const;
    qint64 pos() const;
    void close();
    bool open(QIODevice::OpenMode);
    bool isSequential() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQIODevice(const sipQIODevice &);
    sipQIODevice &operator = (const sipQIODevice &);

    char sipPyMethods[23];
};

sipQIODevice::sipQIODevice(): QIODevice(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQIODevice::sipQIODevice(QObject*a0): QIODevice(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQIODevice::~sipQIODevice()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQIODevice::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QIODevice);
}

int sipQIODevice::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QIODevice::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QIODevice,_c,_id,_a);

    return _id;
}

void *sipQIODevice::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QIODevice, _clname, &sipCpp) ? sipCpp : QIODevice::qt_metacast(_clname));
}

void sipQIODevice::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QIODevice::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIODevice::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QIODevice::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIODevice::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QIODevice::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIODevice::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QIODevice::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIODevice::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QIODevice::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIODevice::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QIODevice::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQIODevice::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QIODevice::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

qint64 sipQIODevice::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QIODevice,sipName_writeData);

    if (!sipMeth)
        return 0;

    extern PY_LONG_LONG sipVH_QtCore_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_42(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQIODevice::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QIODevice::readLineData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_43(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQIODevice::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_QIODevice,sipName_readData);

    if (!sipMeth)
        return 0;

    extern PY_LONG_LONG sipVH_QtCore_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_52(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQIODevice::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QIODevice::waitForBytesWritten(a0);

    extern bool sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIODevice::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QIODevice::waitForReadyRead(a0);

    extern bool sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIODevice::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QIODevice::canReadLine();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

qint64 sipQIODevice::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QIODevice::bytesToWrite();

    extern PY_LONG_LONG sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

qint64 sipQIODevice::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QIODevice::bytesAvailable();

    extern PY_LONG_LONG sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIODevice::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QIODevice::reset();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIODevice::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QIODevice::atEnd();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIODevice::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QIODevice::seek(a0);

    extern bool sipVH_QtCore_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_53(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

qint64 sipQIODevice::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QIODevice::size();

    extern PY_LONG_LONG sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

qint64 sipQIODevice::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QIODevice::pos();

    extern PY_LONG_LONG sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQIODevice::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QIODevice::close();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIODevice::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QIODevice::open(a0);

    extern bool sipVH_QtCore_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_15(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIODevice::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QIODevice::isSequential();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

QObject* sipQIODevice::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQIODevice::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQIODevice::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQIODevice::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQIODevice::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQIODevice::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQIODevice::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQIODevice::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQIODevice::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

qint64 sipQIODevice::sipProtect_readData(char*a0,qint64 a1)
{
    return readData(a0,a1);
}

qint64 sipQIODevice::sipProtectVirt_readLineData(bool sipSelfWasArg,char*a0,qint64 a1)
{
    return (sipSelfWasArg ? QIODevice::readLineData(a0,a1) : readLineData(a0,a1));
}

qint64 sipQIODevice::sipProtect_writeData(const char*a0,PY_LONG_LONG a1)
{
    return writeData(a0,a1);
}

void sipQIODevice::sipProtect_setOpenMode(QIODevice::OpenMode a0)
{
    QIODevice::setOpenMode(a0);
}

void sipQIODevice::sipProtect_setErrorString(const QString& a0)
{
    QIODevice::setErrorString(a0);
}


PyDoc_STRVAR(doc_QIODevice_sender, "QIODevice.sender() -> QObject");

extern "C" {static PyObject *meth_QIODevice_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 687 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_sender, doc_QIODevice_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_receivers, "QIODevice.receivers(signal) -> int");

extern "C" {static PyObject *meth_QIODevice_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 746 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_receivers, doc_QIODevice_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_timerEvent, "QIODevice.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QIODevice_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_timerEvent, doc_QIODevice_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_childEvent, "QIODevice.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QIODevice_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_childEvent, doc_QIODevice_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_customEvent, "QIODevice.customEvent(QEvent)");

extern "C" {static PyObject *meth_QIODevice_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_customEvent, doc_QIODevice_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_connectNotify, "QIODevice.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QIODevice_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_connectNotify, doc_QIODevice_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_disconnectNotify, "QIODevice.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QIODevice_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_disconnectNotify, doc_QIODevice_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_senderSignalIndex, "QIODevice.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QIODevice_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_senderSignalIndex, doc_QIODevice_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_isSignalConnected, "QIODevice.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QIODevice_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_isSignalConnected, doc_QIODevice_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_openMode, "QIODevice.openMode() -> QIODevice.OpenMode");

extern "C" {static PyObject *meth_QIODevice_openMode(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_openMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            QIODevice::OpenMode*sipRes;

            sipRes = new QIODevice::OpenMode(sipCpp->openMode());

            return sipConvertFromNewType(sipRes,sipType_QIODevice_OpenMode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_openMode, doc_QIODevice_openMode);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_setTextModeEnabled, "QIODevice.setTextModeEnabled(bool)");

extern "C" {static PyObject *meth_QIODevice_setTextModeEnabled(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_setTextModeEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            sipCpp->setTextModeEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_setTextModeEnabled, doc_QIODevice_setTextModeEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_isTextModeEnabled, "QIODevice.isTextModeEnabled() -> bool");

extern "C" {static PyObject *meth_QIODevice_isTextModeEnabled(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_isTextModeEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTextModeEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_isTextModeEnabled, doc_QIODevice_isTextModeEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_isOpen, "QIODevice.isOpen() -> bool");

extern "C" {static PyObject *meth_QIODevice_isOpen(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_isOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOpen();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_isOpen, doc_QIODevice_isOpen);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_isReadable, "QIODevice.isReadable() -> bool");

extern "C" {static PyObject *meth_QIODevice_isReadable(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_isReadable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_isReadable, doc_QIODevice_isReadable);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_isWritable, "QIODevice.isWritable() -> bool");

extern "C" {static PyObject *meth_QIODevice_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWritable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_isWritable, doc_QIODevice_isWritable);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_isSequential, "QIODevice.isSequential() -> bool");

extern "C" {static PyObject *meth_QIODevice_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIODevice::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_isSequential, doc_QIODevice_isSequential);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_open, "QIODevice.open(QIODevice.OpenMode) -> bool");

extern "C" {static PyObject *meth_QIODevice_open(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIODevice::OpenMode* a0;
        int a0State = 0;
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIODevice::open(*a0) : sipCpp->open(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_open, doc_QIODevice_open);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_close, "QIODevice.close()");

extern "C" {static PyObject *meth_QIODevice_close(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QIODevice::close() : sipCpp->close());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_close, doc_QIODevice_close);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_pos, "QIODevice.pos() -> int");

extern "C" {static PyObject *meth_QIODevice_pos(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIODevice::pos() : sipCpp->pos());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_pos, doc_QIODevice_pos);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_size, "QIODevice.size() -> int");

extern "C" {static PyObject *meth_QIODevice_size(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIODevice::size() : sipCpp->size());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_size, doc_QIODevice_size);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_seek, "QIODevice.seek(int) -> bool");

extern "C" {static PyObject *meth_QIODevice_seek(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIODevice::seek(a0) : sipCpp->seek(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_seek, doc_QIODevice_seek);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_atEnd, "QIODevice.atEnd() -> bool");

extern "C" {static PyObject *meth_QIODevice_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIODevice::atEnd() : sipCpp->atEnd());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_atEnd, doc_QIODevice_atEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_reset, "QIODevice.reset() -> bool");

extern "C" {static PyObject *meth_QIODevice_reset(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIODevice::reset() : sipCpp->reset());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_reset, doc_QIODevice_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_bytesAvailable, "QIODevice.bytesAvailable() -> int");

extern "C" {static PyObject *meth_QIODevice_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIODevice::bytesAvailable() : sipCpp->bytesAvailable());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_bytesAvailable, doc_QIODevice_bytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_bytesToWrite, "QIODevice.bytesToWrite() -> int");

extern "C" {static PyObject *meth_QIODevice_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIODevice::bytesToWrite() : sipCpp->bytesToWrite());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_bytesToWrite, doc_QIODevice_bytesToWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_read, "QIODevice.read(int) -> str");

extern "C" {static PyObject *meth_QIODevice_read(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 68 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qiodevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->read(s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1460 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_read, doc_QIODevice_read);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_readAll, "QIODevice.readAll() -> QByteArray");

extern "C" {static PyObject *meth_QIODevice_readAll(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_readAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->readAll());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_readAll, doc_QIODevice_readAll);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_readLine, "QIODevice.readLine(int maxlen=0) -> str");

extern "C" {static PyObject *meth_QIODevice_readLine(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_readLine(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0 = 0;
        QIODevice *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maxlen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|n", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 103 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qiodevice.sip"
        // The two C++ overloads would have the same Python signature so we get most of
        // the combined functionality by treating an argument of 0 (the default) as
        // meaning return a QByteArray of any length.  Otherwise it is treated as a
        // maximum buffer size and a Python string is returned.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else if (a0 == 0)
        {
            QByteArray *ba;
        
            Py_BEGIN_ALLOW_THREADS
            ba = new QByteArray(sipCpp->readLine(a0));
            Py_END_ALLOW_THREADS
        
            sipRes = sipBuildResult(&sipIsErr, "N", ba, sipType_QByteArray, 0);
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->readLine(s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1569 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_readLine, doc_QIODevice_readLine);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_canReadLine, "QIODevice.canReadLine() -> bool");

extern "C" {static PyObject *meth_QIODevice_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIODevice::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_canReadLine, doc_QIODevice_canReadLine);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_peek, "QIODevice.peek(int) -> QByteArray");

extern "C" {static PyObject *meth_QIODevice_peek(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_peek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->peek(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_peek, doc_QIODevice_peek);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_write, "QIODevice.write(QByteArray) -> int");

extern "C" {static PyObject *meth_QIODevice_write(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->write(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_write, doc_QIODevice_write);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_waitForReadyRead, "QIODevice.waitForReadyRead(int) -> bool");

extern "C" {static PyObject *meth_QIODevice_waitForReadyRead(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIODevice::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_waitForReadyRead, doc_QIODevice_waitForReadyRead);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_waitForBytesWritten, "QIODevice.waitForBytesWritten(int) -> bool");

extern "C" {static PyObject *meth_QIODevice_waitForBytesWritten(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIODevice::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_waitForBytesWritten, doc_QIODevice_waitForBytesWritten);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_ungetChar, "QIODevice.ungetChar(str)");

extern "C" {static PyObject *meth_QIODevice_ungetChar(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_ungetChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char a0;
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bc", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            sipCpp->ungetChar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_ungetChar, doc_QIODevice_ungetChar);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_putChar, "QIODevice.putChar(str) -> bool");

extern "C" {static PyObject *meth_QIODevice_putChar(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_putChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char a0;
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bc", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->putChar(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_putChar, doc_QIODevice_putChar);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_getChar, "QIODevice.getChar() -> (bool, str)");

extern "C" {static PyObject *meth_QIODevice_getChar(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_getChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char a0;
        QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getChar(&a0);

            return sipBuildResult(0,"(bc)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_getChar, doc_QIODevice_getChar);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_errorString, "QIODevice.errorString() -> str");

extern "C" {static PyObject *meth_QIODevice_errorString(PyObject *, PyObject *);}
static PyObject *meth_QIODevice_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIODevice *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QIODevice, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_errorString, doc_QIODevice_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_readData, "QIODevice.readData(int) -> str");

extern "C" {static PyObject *meth_QIODevice_readData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_readData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        qint64 a0;
        sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bn", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QIODevice, sipName_readData);
                return NULL;
            }

#line 167 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qiodevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtect_readData(s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1905 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_readData, doc_QIODevice_readData);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_readLineData, "QIODevice.readLineData(int) -> str");

extern "C" {static PyObject *meth_QIODevice_readLineData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_readLineData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bn", &sipSelf, sipType_QIODevice, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 232 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qiodevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QIODevice::readLineData(s, a0) : sipCpp->readLineData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1973 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIODevice.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_readLineData, doc_QIODevice_readLineData);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_writeData, "QIODevice.writeData(str) -> int");

extern "C" {static PyObject *meth_QIODevice_writeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_writeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const char* a0;
        SIP_SSIZE_T a1;
        sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bk", &sipSelf, sipType_QIODevice, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QIODevice, sipName_writeData);
                return NULL;
            }

            sipRes = sipCpp->sipProtect_writeData(a0,(PY_LONG_LONG)a1);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_writeData, doc_QIODevice_writeData);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_setOpenMode, "QIODevice.setOpenMode(QIODevice.OpenMode)");

extern "C" {static PyObject *meth_QIODevice_setOpenMode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_setOpenMode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice::OpenMode* a0;
        int a0State = 0;
        sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            sipCpp->sipProtect_setOpenMode(*a0);
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_setOpenMode, doc_QIODevice_setOpenMode);

    return NULL;
}


PyDoc_STRVAR(doc_QIODevice_setErrorString, "QIODevice.setErrorString(str)");

extern "C" {static PyObject *meth_QIODevice_setErrorString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIODevice_setErrorString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        sipQIODevice *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QIODevice, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->sipProtect_setErrorString(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIODevice, sipName_setErrorString, doc_QIODevice_setErrorString);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QIODevice(void *, const sipTypeDef *);}
static void *cast_QIODevice(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QIODevice)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QIODevice *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QIODevice(void *, int);}
static void release_QIODevice(void *sipCppV,int)
{
    QIODevice *sipCpp = reinterpret_cast<QIODevice *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QIODevice(sipSimpleWrapper *);}
static void dealloc_QIODevice(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQIODevice *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QIODevice(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QIODevice(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QIODevice(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQIODevice *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQIODevice();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQIODevice(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QIODevice[] = {{162, 255, 1}};


static PyMethodDef methods_QIODevice[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QIODevice_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_atEnd)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QIODevice_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QIODevice_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QIODevice_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_canReadLine)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QIODevice_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QIODevice_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_close)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QIODevice_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QIODevice_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QIODevice_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QIODevice_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_errorString)},
    {SIP_MLNAME_CAST(sipName_getChar), meth_QIODevice_getChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_getChar)},
    {SIP_MLNAME_CAST(sipName_isOpen), meth_QIODevice_isOpen, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_isOpen)},
    {SIP_MLNAME_CAST(sipName_isReadable), meth_QIODevice_isReadable, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_isReadable)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QIODevice_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_isSequential)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QIODevice_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isTextModeEnabled), meth_QIODevice_isTextModeEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_isTextModeEnabled)},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QIODevice_isWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_isWritable)},
    {SIP_MLNAME_CAST(sipName_open), meth_QIODevice_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_open)},
    {SIP_MLNAME_CAST(sipName_openMode), meth_QIODevice_openMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_openMode)},
    {SIP_MLNAME_CAST(sipName_peek), meth_QIODevice_peek, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_peek)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QIODevice_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_pos)},
    {SIP_MLNAME_CAST(sipName_putChar), meth_QIODevice_putChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_putChar)},
    {SIP_MLNAME_CAST(sipName_read), meth_QIODevice_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_read)},
    {SIP_MLNAME_CAST(sipName_readAll), meth_QIODevice_readAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_readAll)},
    {SIP_MLNAME_CAST(sipName_readData), (PyCFunction)meth_QIODevice_readData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIODevice_readData)},
    {SIP_MLNAME_CAST(sipName_readLine), (PyCFunction)meth_QIODevice_readLine, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIODevice_readLine)},
    {SIP_MLNAME_CAST(sipName_readLineData), (PyCFunction)meth_QIODevice_readLineData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIODevice_readLineData)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QIODevice_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QIODevice_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_reset)},
    {SIP_MLNAME_CAST(sipName_seek), meth_QIODevice_seek, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_seek)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QIODevice_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QIODevice_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setErrorString), (PyCFunction)meth_QIODevice_setErrorString, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIODevice_setErrorString)},
    {SIP_MLNAME_CAST(sipName_setOpenMode), (PyCFunction)meth_QIODevice_setOpenMode, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIODevice_setOpenMode)},
    {SIP_MLNAME_CAST(sipName_setTextModeEnabled), meth_QIODevice_setTextModeEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_setTextModeEnabled)},
    {SIP_MLNAME_CAST(sipName_size), meth_QIODevice_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_size)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QIODevice_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_ungetChar), meth_QIODevice_ungetChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_ungetChar)},
    {SIP_MLNAME_CAST(sipName_waitForBytesWritten), meth_QIODevice_waitForBytesWritten, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_waitForBytesWritten)},
    {SIP_MLNAME_CAST(sipName_waitForReadyRead), meth_QIODevice_waitForReadyRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_waitForReadyRead)},
    {SIP_MLNAME_CAST(sipName_write), meth_QIODevice_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QIODevice_write)},
    {SIP_MLNAME_CAST(sipName_writeData), (PyCFunction)meth_QIODevice_writeData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIODevice_writeData)}
};

static sipEnumMemberDef enummembers_QIODevice[] = {
    {sipName_Append, static_cast<int>(QIODevice::Append), 80},
    {sipName_NotOpen, static_cast<int>(QIODevice::NotOpen), 80},
    {sipName_ReadOnly, static_cast<int>(QIODevice::ReadOnly), 80},
    {sipName_ReadWrite, static_cast<int>(QIODevice::ReadWrite), 80},
    {sipName_Text, static_cast<int>(QIODevice::Text), 80},
    {sipName_Truncate, static_cast<int>(QIODevice::Truncate), 80},
    {sipName_Unbuffered, static_cast<int>(QIODevice::Unbuffered), 80},
    {sipName_WriteOnly, static_cast<int>(QIODevice::WriteOnly), 80},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QIODevice[] = {
    {"readChannelFinished()", "\1QIODevice.readChannelFinished", 0, 0},
    {"aboutToClose()", "\1QIODevice.aboutToClose", 0, 0},
    {"bytesWritten(qint64)", "\1QIODevice.bytesWritten[int]", 0, 0},
    {"readyRead()", "\1QIODevice.readyRead", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QIODevice, "\1QIODevice()\n"
    "QIODevice(QObject)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QIODevice = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QIODevice,
        {0}
    },
    {
        sipNameNr_QIODevice,
        {0, 0, 1},
        42, methods_QIODevice,
        8, enummembers_QIODevice,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QIODevice,
    -1,
    -1,
    supers_QIODevice,
    0,
    init_type_QIODevice,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QIODevice,
    0,
    0,
    0,
    release_QIODevice,
    cast_QIODevice,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QIODevice::staticMetaObject,
    0,
    signals_QIODevice,
    0
};
