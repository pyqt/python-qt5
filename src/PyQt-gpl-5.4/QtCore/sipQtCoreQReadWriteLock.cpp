/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qreadwritelock.sip"
#include <qreadwritelock.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQReadWriteLock.cpp"



PyDoc_STRVAR(doc_QReadWriteLock_lockForRead, "QReadWriteLock.lockForRead()");

extern "C" {static PyObject *meth_QReadWriteLock_lockForRead(PyObject *, PyObject *);}
static PyObject *meth_QReadWriteLock_lockForRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadWriteLock, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->lockForRead();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadWriteLock, sipName_lockForRead, doc_QReadWriteLock_lockForRead);

    return NULL;
}


PyDoc_STRVAR(doc_QReadWriteLock_tryLockForRead, "QReadWriteLock.tryLockForRead() -> bool\n"
    "QReadWriteLock.tryLockForRead(int) -> bool");

extern "C" {static PyObject *meth_QReadWriteLock_tryLockForRead(PyObject *, PyObject *);}
static PyObject *meth_QReadWriteLock_tryLockForRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadWriteLock, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tryLockForRead();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QReadWriteLock, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tryLockForRead(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadWriteLock, sipName_tryLockForRead, doc_QReadWriteLock_tryLockForRead);

    return NULL;
}


PyDoc_STRVAR(doc_QReadWriteLock_lockForWrite, "QReadWriteLock.lockForWrite()");

extern "C" {static PyObject *meth_QReadWriteLock_lockForWrite(PyObject *, PyObject *);}
static PyObject *meth_QReadWriteLock_lockForWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadWriteLock, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->lockForWrite();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadWriteLock, sipName_lockForWrite, doc_QReadWriteLock_lockForWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QReadWriteLock_tryLockForWrite, "QReadWriteLock.tryLockForWrite() -> bool\n"
    "QReadWriteLock.tryLockForWrite(int) -> bool");

extern "C" {static PyObject *meth_QReadWriteLock_tryLockForWrite(PyObject *, PyObject *);}
static PyObject *meth_QReadWriteLock_tryLockForWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadWriteLock, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tryLockForWrite();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QReadWriteLock, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tryLockForWrite(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadWriteLock, sipName_tryLockForWrite, doc_QReadWriteLock_tryLockForWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QReadWriteLock_unlock, "QReadWriteLock.unlock()");

extern "C" {static PyObject *meth_QReadWriteLock_unlock(PyObject *, PyObject *);}
static PyObject *meth_QReadWriteLock_unlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QReadWriteLock *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QReadWriteLock, &sipCpp))
        {
            sipCpp->unlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QReadWriteLock, sipName_unlock, doc_QReadWriteLock_unlock);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QReadWriteLock(void *, const sipTypeDef *);}
static void *cast_QReadWriteLock(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QReadWriteLock)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QReadWriteLock(void *, int);}
static void release_QReadWriteLock(void *sipCppV,int)
{
    delete reinterpret_cast<QReadWriteLock *>(sipCppV);
}


extern "C" {static void dealloc_QReadWriteLock(sipSimpleWrapper *);}
static void dealloc_QReadWriteLock(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QReadWriteLock(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QReadWriteLock(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QReadWriteLock(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QReadWriteLock *sipCpp = 0;

    {
        QReadWriteLock::RecursionMode a0 = QReadWriteLock::NonRecursive;

        static const char *sipKwdList[] = {
            sipName_recursionMode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|E", sipType_QReadWriteLock_RecursionMode, &a0))
        {
            sipCpp = new QReadWriteLock(a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QReadWriteLock[] = {
    {SIP_MLNAME_CAST(sipName_lockForRead), meth_QReadWriteLock_lockForRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadWriteLock_lockForRead)},
    {SIP_MLNAME_CAST(sipName_lockForWrite), meth_QReadWriteLock_lockForWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadWriteLock_lockForWrite)},
    {SIP_MLNAME_CAST(sipName_tryLockForRead), meth_QReadWriteLock_tryLockForRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadWriteLock_tryLockForRead)},
    {SIP_MLNAME_CAST(sipName_tryLockForWrite), meth_QReadWriteLock_tryLockForWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadWriteLock_tryLockForWrite)},
    {SIP_MLNAME_CAST(sipName_unlock), meth_QReadWriteLock_unlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QReadWriteLock_unlock)}
};

static sipEnumMemberDef enummembers_QReadWriteLock[] = {
    {sipName_NonRecursive, static_cast<int>(QReadWriteLock::NonRecursive), 182},
    {sipName_Recursive, static_cast<int>(QReadWriteLock::Recursive), 182},
};

PyDoc_STRVAR(doc_QReadWriteLock, "\1QReadWriteLock(QReadWriteLock.RecursionMode recursionMode=QReadWriteLock.NonRecursive)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QReadWriteLock = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QReadWriteLock,
        {0}
    },
    {
        sipNameNr_QReadWriteLock,
        {0, 0, 1},
        5, methods_QReadWriteLock,
        2, enummembers_QReadWriteLock,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QReadWriteLock,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QReadWriteLock,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QReadWriteLock,
    0,
    0,
    0,
    release_QReadWriteLock,
    cast_QReadWriteLock,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
