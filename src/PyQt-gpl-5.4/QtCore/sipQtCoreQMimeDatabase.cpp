/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmimedatabase.sip"
#include <qmimedatabase.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMimeDatabase.cpp"

#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMimeDatabase.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmimetype.sip"
#include <qmimetype.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMimeDatabase.cpp"
#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMimeDatabase.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMimeDatabase.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMimeDatabase.cpp"
#line 100 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qurl.sip"
#include <qurl.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMimeDatabase.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMimeDatabase.cpp"


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForName, "QMimeDatabase.mimeTypeForName(str) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForName(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QMimeType*sipRes;

            sipRes = new QMimeType(sipCpp->mimeTypeForName(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForName, doc_QMimeDatabase_mimeTypeForName);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForFile, "QMimeDatabase.mimeTypeForFile(str, QMimeDatabase.MatchMode mode=QMimeDatabase.MatchDefault) -> QMimeType\n"
    "QMimeDatabase.mimeTypeForFile(QFileInfo, QMimeDatabase.MatchMode mode=QMimeDatabase.MatchDefault) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMimeDatabase::MatchMode a1 = QMimeDatabase::MatchDefault;
        const QMimeDatabase *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QMimeDatabase_MatchMode, &a1))
        {
            QMimeType*sipRes;

            sipRes = new QMimeType(sipCpp->mimeTypeForFile(*a0,a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,NULL);
        }
    }

    {
        const QFileInfo* a0;
        QMimeDatabase::MatchMode a1 = QMimeDatabase::MatchDefault;
        const QMimeDatabase *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QFileInfo, &a0, sipType_QMimeDatabase_MatchMode, &a1))
        {
            QMimeType*sipRes;

            sipRes = new QMimeType(sipCpp->mimeTypeForFile(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QMimeType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForFile, doc_QMimeDatabase_mimeTypeForFile);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypesForFileName, "QMimeDatabase.mimeTypesForFileName(str) -> list-of-QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypesForFileName(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypesForFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QList<QMimeType>*sipRes;

            sipRes = new QList<QMimeType>(sipCpp->mimeTypesForFileName(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QMimeType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypesForFileName, doc_QMimeDatabase_mimeTypesForFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForData, "QMimeDatabase.mimeTypeForData(QByteArray) -> QMimeType\n"
    "QMimeDatabase.mimeTypeForData(QIODevice) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForData(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QMimeType*sipRes;

            sipRes = new QMimeType(sipCpp->mimeTypeForData(*a0));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,NULL);
        }
    }

    {
        QIODevice* a0;
        const QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QIODevice, &a0))
        {
            QMimeType*sipRes;

            sipRes = new QMimeType(sipCpp->mimeTypeForData(a0));

            return sipConvertFromNewType(sipRes,sipType_QMimeType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForData, doc_QMimeDatabase_mimeTypeForData);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForUrl, "QMimeDatabase.mimeTypeForUrl(QUrl) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForUrl(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        const QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QUrl, &a0))
        {
            QMimeType*sipRes;

            sipRes = new QMimeType(sipCpp->mimeTypeForUrl(*a0));

            return sipConvertFromNewType(sipRes,sipType_QMimeType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForUrl, doc_QMimeDatabase_mimeTypeForUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeDatabase_mimeTypeForFileNameAndData, "QMimeDatabase.mimeTypeForFileNameAndData(str, QIODevice) -> QMimeType\n"
    "QMimeDatabase.mimeTypeForFileNameAndData(str, QByteArray) -> QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_mimeTypeForFileNameAndData(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_mimeTypeForFileNameAndData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QIODevice* a1;
        const QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice, &a1))
        {
            QMimeType*sipRes;

            sipRes = new QMimeType(sipCpp->mimeTypeForFileNameAndData(*a0,a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QByteArray* a1;
        int a1State = 0;
        const QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            QMimeType*sipRes;

            sipRes = new QMimeType(sipCpp->mimeTypeForFileNameAndData(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromNewType(sipRes,sipType_QMimeType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_mimeTypeForFileNameAndData, doc_QMimeDatabase_mimeTypeForFileNameAndData);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeDatabase_suffixForFileName, "QMimeDatabase.suffixForFileName(str) -> str");

extern "C" {static PyObject *meth_QMimeDatabase_suffixForFileName(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_suffixForFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMimeDatabase, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->suffixForFileName(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_suffixForFileName, doc_QMimeDatabase_suffixForFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QMimeDatabase_allMimeTypes, "QMimeDatabase.allMimeTypes() -> list-of-QMimeType");

extern "C" {static PyObject *meth_QMimeDatabase_allMimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QMimeDatabase_allMimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeDatabase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMimeDatabase, &sipCpp))
        {
            QList<QMimeType>*sipRes;

            sipRes = new QList<QMimeType>(sipCpp->allMimeTypes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QMimeType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMimeDatabase, sipName_allMimeTypes, doc_QMimeDatabase_allMimeTypes);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMimeDatabase(void *, const sipTypeDef *);}
static void *cast_QMimeDatabase(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QMimeDatabase)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMimeDatabase(void *, int);}
static void release_QMimeDatabase(void *sipCppV,int)
{
    delete reinterpret_cast<QMimeDatabase *>(sipCppV);
}


extern "C" {static void dealloc_QMimeDatabase(sipSimpleWrapper *);}
static void dealloc_QMimeDatabase(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QMimeDatabase(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QMimeDatabase(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMimeDatabase(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QMimeDatabase *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QMimeDatabase();

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QMimeDatabase[] = {
    {SIP_MLNAME_CAST(sipName_allMimeTypes), meth_QMimeDatabase_allMimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_allMimeTypes)},
    {SIP_MLNAME_CAST(sipName_mimeTypeForData), meth_QMimeDatabase_mimeTypeForData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_mimeTypeForData)},
    {SIP_MLNAME_CAST(sipName_mimeTypeForFile), (PyCFunction)meth_QMimeDatabase_mimeTypeForFile, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMimeDatabase_mimeTypeForFile)},
    {SIP_MLNAME_CAST(sipName_mimeTypeForFileNameAndData), meth_QMimeDatabase_mimeTypeForFileNameAndData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_mimeTypeForFileNameAndData)},
    {SIP_MLNAME_CAST(sipName_mimeTypeForName), meth_QMimeDatabase_mimeTypeForName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_mimeTypeForName)},
    {SIP_MLNAME_CAST(sipName_mimeTypeForUrl), meth_QMimeDatabase_mimeTypeForUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_mimeTypeForUrl)},
    {SIP_MLNAME_CAST(sipName_mimeTypesForFileName), meth_QMimeDatabase_mimeTypesForFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_mimeTypesForFileName)},
    {SIP_MLNAME_CAST(sipName_suffixForFileName), meth_QMimeDatabase_suffixForFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMimeDatabase_suffixForFileName)}
};

static sipEnumMemberDef enummembers_QMimeDatabase[] = {
    {sipName_MatchContent, static_cast<int>(QMimeDatabase::MatchContent), 156},
    {sipName_MatchDefault, static_cast<int>(QMimeDatabase::MatchDefault), 156},
    {sipName_MatchExtension, static_cast<int>(QMimeDatabase::MatchExtension), 156},
};

PyDoc_STRVAR(doc_QMimeDatabase, "\1QMimeDatabase()");


pyqt5ClassTypeDef sipTypeDef_QtCore_QMimeDatabase = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMimeDatabase,
        {0}
    },
    {
        sipNameNr_QMimeDatabase,
        {0, 0, 1},
        8, methods_QMimeDatabase,
        3, enummembers_QMimeDatabase,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMimeDatabase,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QMimeDatabase,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMimeDatabase,
    0,
    0,
    0,
    release_QMimeDatabase,
    cast_QMimeDatabase,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
