/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 133 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQItemSelection.cpp"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQItemSelection.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQItemSelection.cpp"
#line 68 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQItemSelection.cpp"
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQItemSelection.cpp"


PyDoc_STRVAR(doc_QItemSelection_select, "QItemSelection.select(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QItemSelection_select(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_select(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp->select(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_select, doc_QItemSelection_select);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_contains, "QItemSelection.contains(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QItemSelection_contains(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_contains, doc_QItemSelection_contains);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_indexes, "QItemSelection.indexes() -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QItemSelection_indexes(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_indexes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
            QModelIndexList*sipRes;

            sipRes = new QModelIndexList(sipCpp->indexes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_indexes, doc_QItemSelection_indexes);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_merge, "QItemSelection.merge(QItemSelection, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QItemSelection_merge(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_merge(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelection* a0;
        QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            sipCpp->merge(*a0,*a1);
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_merge, doc_QItemSelection_merge);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_split, "QItemSelection.split(QItemSelectionRange, QItemSelectionRange, QItemSelection)");

extern "C" {static PyObject *meth_QItemSelection_split(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_split(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelectionRange* a0;
        const QItemSelectionRange* a1;
        QItemSelection* a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9J8", sipType_QItemSelectionRange, &a0, sipType_QItemSelectionRange, &a1, sipType_QItemSelection, &a2))
        {
            QItemSelection::split(*a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_split, doc_QItemSelection_split);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_clear, "QItemSelection.clear()");

extern "C" {static PyObject *meth_QItemSelection_clear(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_clear, doc_QItemSelection_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_isEmpty, "QItemSelection.isEmpty() -> bool");

extern "C" {static PyObject *meth_QItemSelection_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_isEmpty, doc_QItemSelection_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_append, "QItemSelection.append(QItemSelectionRange)");

extern "C" {static PyObject *meth_QItemSelection_append(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelectionRange* a0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelectionRange, &a0))
        {
            sipCpp->append(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_append, doc_QItemSelection_append);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_prepend, "QItemSelection.prepend(QItemSelectionRange)");

extern "C" {static PyObject *meth_QItemSelection_prepend(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_prepend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelectionRange* a0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelectionRange, &a0))
        {
            sipCpp->prepend(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_prepend, doc_QItemSelection_prepend);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_insert, "QItemSelection.insert(int, QItemSelectionRange)");

extern "C" {static PyObject *meth_QItemSelection_insert(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QItemSelectionRange* a1;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelection, &sipCpp, &a0, sipType_QItemSelectionRange, &a1))
        {
            sipCpp->insert(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_insert, doc_QItemSelection_insert);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_replace, "QItemSelection.replace(int, QItemSelectionRange)");

extern "C" {static PyObject *meth_QItemSelection_replace(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_replace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QItemSelectionRange* a1;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QItemSelection, &sipCpp, &a0, sipType_QItemSelectionRange, &a1))
        {
            sipCpp->replace(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_replace, doc_QItemSelection_replace);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_removeAt, "QItemSelection.removeAt(int)");

extern "C" {static PyObject *meth_QItemSelection_removeAt(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_removeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QItemSelection, &sipCpp, &a0))
        {
            sipCpp->removeAt(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_removeAt, doc_QItemSelection_removeAt);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_removeAll, "QItemSelection.removeAll(QItemSelectionRange) -> int");

extern "C" {static PyObject *meth_QItemSelection_removeAll(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_removeAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelectionRange* a0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelectionRange, &a0))
        {
            int sipRes;

            sipRes = sipCpp->removeAll(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_removeAll, doc_QItemSelection_removeAll);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_takeAt, "QItemSelection.takeAt(int) -> QItemSelectionRange");

extern "C" {static PyObject *meth_QItemSelection_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QItemSelection, &sipCpp, &a0))
        {
            QItemSelectionRange*sipRes;

            sipRes = new QItemSelectionRange(sipCpp->takeAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionRange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_takeAt, doc_QItemSelection_takeAt);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_takeFirst, "QItemSelection.takeFirst() -> QItemSelectionRange");

extern "C" {static PyObject *meth_QItemSelection_takeFirst(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_takeFirst(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
            QItemSelectionRange*sipRes;

            sipRes = new QItemSelectionRange(sipCpp->takeFirst());

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionRange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_takeFirst, doc_QItemSelection_takeFirst);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_takeLast, "QItemSelection.takeLast() -> QItemSelectionRange");

extern "C" {static PyObject *meth_QItemSelection_takeLast(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_takeLast(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
            QItemSelectionRange*sipRes;

            sipRes = new QItemSelectionRange(sipCpp->takeLast());

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionRange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_takeLast, doc_QItemSelection_takeLast);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_move, "QItemSelection.move(int, int)");

extern "C" {static PyObject *meth_QItemSelection_move(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_move(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QItemSelection, &sipCpp, &a0, &a1))
        {
            sipCpp->move(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_move, doc_QItemSelection_move);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_swap, "QItemSelection.swap(int, int)");

extern "C" {static PyObject *meth_QItemSelection_swap(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QItemSelection, &sipCpp, &a0, &a1))
        {
            sipCpp->swap(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_swap, doc_QItemSelection_swap);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_count, "QItemSelection.count(QItemSelectionRange) -> int\n"
    "QItemSelection.count() -> int");

extern "C" {static PyObject *meth_QItemSelection_count(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelectionRange* a0;
        const QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelectionRange, &a0))
        {
            int sipRes;

            sipRes = sipCpp->count(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_count, doc_QItemSelection_count);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_first, "QItemSelection.first() -> QItemSelectionRange");

extern "C" {static PyObject *meth_QItemSelection_first(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_first(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
            QItemSelectionRange*sipRes;

            sipRes = &sipCpp->first();

            return sipConvertFromType(sipRes,sipType_QItemSelectionRange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_first, doc_QItemSelection_first);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_last, "QItemSelection.last() -> QItemSelectionRange");

extern "C" {static PyObject *meth_QItemSelection_last(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_last(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QItemSelection, &sipCpp))
        {
            QItemSelectionRange*sipRes;

            sipRes = &sipCpp->last();

            return sipConvertFromType(sipRes,sipType_QItemSelectionRange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_last, doc_QItemSelection_last);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_indexOf, "QItemSelection.indexOf(QItemSelectionRange, int from=0) -> int");

extern "C" {static PyObject *meth_QItemSelection_indexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_indexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelectionRange* a0;
        int a1 = 0;
        const QItemSelection *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelectionRange, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->indexOf(*a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_indexOf, doc_QItemSelection_indexOf);

    return NULL;
}


PyDoc_STRVAR(doc_QItemSelection_lastIndexOf, "QItemSelection.lastIndexOf(QItemSelectionRange, int from=-1) -> int");

extern "C" {static PyObject *meth_QItemSelection_lastIndexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QItemSelectionRange* a0;
        int a1 = -1;
        const QItemSelection *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QItemSelection, &sipCpp, sipType_QItemSelectionRange, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->lastIndexOf(*a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName_lastIndexOf, doc_QItemSelection_lastIndexOf);

    return NULL;
}


extern "C" {static PyObject *slot_QItemSelection___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelection___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QItemSelection* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QItemSelection, &a0))
        {
            sipCpp->QItemSelection::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const QItemSelectionRange* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QItemSelectionRange, &a0))
        {
            sipCpp->QItemSelection::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QItemSelection___len__(PyObject *);}
static SIP_SSIZE_T slot_QItemSelection___len__(PyObject *sipSelf)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 762 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQItemSelection.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QItemSelection___eq__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelection___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QItemSelection* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QItemSelection, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QItemSelection::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QItemSelection,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QItemSelection___ne__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelection___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QItemSelection* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QItemSelection, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QItemSelection::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QItemSelection,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QItemSelection___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QItemSelection___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            QItemSelectionRange*sipRes = 0;
            int sipIsErr = 0;

#line 231 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qitemselectionmodel.sip"
        SIP_SSIZE_T idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = new QItemSelectionRange(sipCpp->operator[]((int)idx));
#line 861 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQItemSelection.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionRange,NULL);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            QItemSelection*sipRes = 0;
            int sipIsErr = 0;

#line 241 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qitemselectionmodel.sip"
        SIP_SSIZE_T len, start, stop, step, slicelength, i;
        
        len = sipCpp->count();
        
        #if PY_VERSION_HEX >= 0x03020000
        if (PySlice_GetIndicesEx(a0, len, &start, &stop, &step, &slicelength) < 0)
        #else
        if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
        #endif
            sipIsErr = 1;
        else
        {
            sipRes = new QItemSelection();
        
            for (i = 0; i < slicelength; ++i)
            {
                (*sipRes) += (*sipCpp)[start];
                start += step;
            }
        }
#line 899 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQItemSelection.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static int slot_QItemSelection___delitem__(PyObject *,PyObject *);}
static int slot_QItemSelection___delitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            int sipIsErr = 0;

#line 199 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qitemselectionmodel.sip"
        int len;
        
        len = sipCpp->count();
        
        if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
            sipIsErr = 1;
        else
            sipCpp->removeAt(a0);
#line 941 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQItemSelection.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            int sipIsErr = 0;

#line 211 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qitemselectionmodel.sip"
        SIP_SSIZE_T len, start, stop, step, slicelength, i;
        
        len = sipCpp->count();
        
        #if PY_VERSION_HEX >= 0x03020000
        if (PySlice_GetIndicesEx(a0, len, &start, &stop, &step, &slicelength) < 0)
        #else
        if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
        #endif
            sipIsErr = 1;
        else
            for (i = 0; i < slicelength; ++i)
            {
                sipCpp->removeAt(start);
                start += step - 1;
            }
#line 974 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQItemSelection.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName___delitem__, NULL);

    return -1;
}


extern "C" {static int slot_QItemSelection___setitem__(PyObject *,PyObject *);}
static int slot_QItemSelection___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QItemSelectionRange* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "iJ9", &a0, sipType_QItemSelectionRange, &a1))
        {
            int sipIsErr = 0;

#line 152 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qitemselectionmodel.sip"
        int len;
        
        len = sipCpp->count();
        
        if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
            sipIsErr = 1;
        else
            (*sipCpp)[a0] = *a1;
#line 1017 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQItemSelection.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;
        const QItemSelection* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "TJ9", &PySlice_Type, &a0, sipType_QItemSelection, &a1))
        {
            int sipIsErr = 0;

#line 164 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qitemselectionmodel.sip"
        SIP_SSIZE_T len, start, stop, step, slicelength, i;
        
        len = sipCpp->count();
        
        #if PY_VERSION_HEX >= 0x03020000
        if (PySlice_GetIndicesEx(a0, len, &start, &stop, &step, &slicelength) < 0)
        #else
        if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
        #endif
            sipIsErr = 1;
        else
        {
            int vlen = a1->count();
        
            if (vlen != slicelength)
            {
                sipBadLengthForSlice(vlen, slicelength);
                sipIsErr = 1;
            }
            else
            {
                QItemSelection::const_iterator it = a1->begin();
        
                for (i = 0; i < slicelength; ++i)
                {
                    (*sipCpp)[start] = *it;
                    start += step;
                    ++it;
                }
            }
        }
#line 1066 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQItemSelection.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static int slot_QItemSelection___contains__(PyObject *,PyObject *);}
static int slot_QItemSelection___contains__(PyObject *sipSelf,PyObject *sipArg)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QModelIndex, &a0))
        {
            int sipRes = 0;

#line 143 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qitemselectionmodel.sip"
        // It looks like you can't assign QBool to int.
        sipRes = bool(sipCpp->contains(*a0));
#line 1102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQItemSelection.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QItemSelection, sipName___contains__, NULL);

    return -1;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QItemSelection(void *, const sipTypeDef *);}
static void *cast_QItemSelection(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QItemSelection)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QItemSelection(void *, int);}
static void release_QItemSelection(void *sipCppV,int)
{
    delete reinterpret_cast<QItemSelection *>(sipCppV);
}


extern "C" {static void assign_QItemSelection(void *, SIP_SSIZE_T, const void *);}
static void assign_QItemSelection(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QItemSelection *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QItemSelection *>(sipSrc);
}


extern "C" {static void *array_QItemSelection(SIP_SSIZE_T);}
static void *array_QItemSelection(SIP_SSIZE_T sipNrElem)
{
    return new QItemSelection[sipNrElem];
}


extern "C" {static void *copy_QItemSelection(const void *, SIP_SSIZE_T);}
static void *copy_QItemSelection(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QItemSelection(reinterpret_cast<const QItemSelection *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QItemSelection(sipSimpleWrapper *);}
static void dealloc_QItemSelection(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QItemSelection(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QItemSelection(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QItemSelection(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QItemSelection *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QItemSelection();

            return sipCpp;
        }
    }

    {
        const QModelIndex* a0;
        const QModelIndex* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9", sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp = new QItemSelection(*a0,*a1);

            return sipCpp;
        }
    }

    {
        const QItemSelection* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QItemSelection, &a0))
        {
            sipCpp = new QItemSelection(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QItemSelection[] = {
    {(void *)slot_QItemSelection___iadd__, iconcat_slot},
    {(void *)slot_QItemSelection___len__, len_slot},
    {(void *)slot_QItemSelection___eq__, eq_slot},
    {(void *)slot_QItemSelection___ne__, ne_slot},
    {(void *)slot_QItemSelection___getitem__, getitem_slot},
    {(void *)slot_QItemSelection___delitem__, delitem_slot},
    {(void *)slot_QItemSelection___setitem__, setitem_slot},
    {(void *)slot_QItemSelection___contains__, contains_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QItemSelection[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QItemSelection_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_append)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QItemSelection_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_clear)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QItemSelection_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_contains)},
    {SIP_MLNAME_CAST(sipName_count), meth_QItemSelection_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_count)},
    {SIP_MLNAME_CAST(sipName_first), meth_QItemSelection_first, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_first)},
    {SIP_MLNAME_CAST(sipName_indexOf), (PyCFunction)meth_QItemSelection_indexOf, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QItemSelection_indexOf)},
    {SIP_MLNAME_CAST(sipName_indexes), meth_QItemSelection_indexes, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_indexes)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QItemSelection_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_insert)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QItemSelection_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_isEmpty)},
    {SIP_MLNAME_CAST(sipName_last), meth_QItemSelection_last, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_last)},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), (PyCFunction)meth_QItemSelection_lastIndexOf, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QItemSelection_lastIndexOf)},
    {SIP_MLNAME_CAST(sipName_merge), meth_QItemSelection_merge, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_merge)},
    {SIP_MLNAME_CAST(sipName_move), meth_QItemSelection_move, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_move)},
    {SIP_MLNAME_CAST(sipName_prepend), meth_QItemSelection_prepend, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_prepend)},
    {SIP_MLNAME_CAST(sipName_removeAll), meth_QItemSelection_removeAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_removeAll)},
    {SIP_MLNAME_CAST(sipName_removeAt), meth_QItemSelection_removeAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_removeAt)},
    {SIP_MLNAME_CAST(sipName_replace), meth_QItemSelection_replace, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_replace)},
    {SIP_MLNAME_CAST(sipName_select), meth_QItemSelection_select, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_select)},
    {SIP_MLNAME_CAST(sipName_split), meth_QItemSelection_split, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_split)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QItemSelection_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_swap)},
    {SIP_MLNAME_CAST(sipName_takeAt), meth_QItemSelection_takeAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_takeAt)},
    {SIP_MLNAME_CAST(sipName_takeFirst), meth_QItemSelection_takeFirst, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_takeFirst)},
    {SIP_MLNAME_CAST(sipName_takeLast), meth_QItemSelection_takeLast, METH_VARARGS, SIP_MLDOC_CAST(doc_QItemSelection_takeLast)}
};

PyDoc_STRVAR(doc_QItemSelection, "\1QItemSelection()\n"
    "QItemSelection(QModelIndex, QModelIndex)\n"
    "QItemSelection(QItemSelection)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QItemSelection = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QItemSelection,
        {0}
    },
    {
        sipNameNr_QItemSelection,
        {0, 0, 1},
        23, methods_QItemSelection,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QItemSelection,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QItemSelection,
    init_type_QItemSelection,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QItemSelection,
    assign_QItemSelection,
    array_QItemSelection,
    copy_QItemSelection,
    release_QItemSelection,
    cast_QItemSelection,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
