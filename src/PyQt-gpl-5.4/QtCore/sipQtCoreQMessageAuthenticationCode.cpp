/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmessageauthenticationcode.sip"
#include <qmessageauthenticationcode.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMessageAuthenticationCode.cpp"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcryptographichash.sip"
#include <qcryptographichash.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMessageAuthenticationCode.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMessageAuthenticationCode.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMessageAuthenticationCode.cpp"


PyDoc_STRVAR(doc_QMessageAuthenticationCode_reset, "QMessageAuthenticationCode.reset()");

extern "C" {static PyObject *meth_QMessageAuthenticationCode_reset(PyObject *, PyObject *);}
static PyObject *meth_QMessageAuthenticationCode_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMessageAuthenticationCode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageAuthenticationCode, &sipCpp))
        {
            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageAuthenticationCode, sipName_reset, doc_QMessageAuthenticationCode_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageAuthenticationCode_setKey, "QMessageAuthenticationCode.setKey(QByteArray)");

extern "C" {static PyObject *meth_QMessageAuthenticationCode_setKey(PyObject *, PyObject *);}
static PyObject *meth_QMessageAuthenticationCode_setKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QMessageAuthenticationCode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageAuthenticationCode, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setKey(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageAuthenticationCode, sipName_setKey, doc_QMessageAuthenticationCode_setKey);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageAuthenticationCode_addData, "QMessageAuthenticationCode.addData(str, int)\n"
    "QMessageAuthenticationCode.addData(QByteArray)\n"
    "QMessageAuthenticationCode.addData(QIODevice) -> bool");

extern "C" {static PyObject *meth_QMessageAuthenticationCode_addData(PyObject *, PyObject *);}
static PyObject *meth_QMessageAuthenticationCode_addData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        int a1;
        QMessageAuthenticationCode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bsi", &sipSelf, sipType_QMessageAuthenticationCode, &sipCpp, &a0, &a1))
        {
            sipCpp->addData(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        QMessageAuthenticationCode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageAuthenticationCode, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->addData(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QIODevice* a0;
        QMessageAuthenticationCode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMessageAuthenticationCode, &sipCpp, sipType_QIODevice, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->addData(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageAuthenticationCode, sipName_addData, doc_QMessageAuthenticationCode_addData);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageAuthenticationCode_result, "QMessageAuthenticationCode.result() -> QByteArray");

extern "C" {static PyObject *meth_QMessageAuthenticationCode_result(PyObject *, PyObject *);}
static PyObject *meth_QMessageAuthenticationCode_result(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageAuthenticationCode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageAuthenticationCode, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->result());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageAuthenticationCode, sipName_result, doc_QMessageAuthenticationCode_result);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageAuthenticationCode_hash, "QMessageAuthenticationCode.hash(QByteArray, QByteArray, QCryptographicHash.Algorithm) -> QByteArray");

extern "C" {static PyObject *meth_QMessageAuthenticationCode_hash(PyObject *, PyObject *);}
static PyObject *meth_QMessageAuthenticationCode_hash(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QByteArray* a1;
        int a1State = 0;
        QCryptographicHash::Algorithm a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1E", sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State, sipType_QCryptographicHash_Algorithm, &a2))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(QMessageAuthenticationCode::hash(*a0,*a1,a2));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageAuthenticationCode, sipName_hash, doc_QMessageAuthenticationCode_hash);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMessageAuthenticationCode(void *, const sipTypeDef *);}
static void *cast_QMessageAuthenticationCode(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QMessageAuthenticationCode)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMessageAuthenticationCode(void *, int);}
static void release_QMessageAuthenticationCode(void *sipCppV,int)
{
    delete reinterpret_cast<QMessageAuthenticationCode *>(sipCppV);
}


extern "C" {static void dealloc_QMessageAuthenticationCode(sipSimpleWrapper *);}
static void dealloc_QMessageAuthenticationCode(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QMessageAuthenticationCode(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QMessageAuthenticationCode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMessageAuthenticationCode(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QMessageAuthenticationCode *sipCpp = 0;

    {
        QCryptographicHash::Algorithm a0;
        const QByteArray& a1def = QByteArray();
        const QByteArray* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_key,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|J1", sipType_QCryptographicHash_Algorithm, &a0, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp = new QMessageAuthenticationCode(a0,*a1);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QMessageAuthenticationCode[] = {
    {SIP_MLNAME_CAST(sipName_addData), meth_QMessageAuthenticationCode_addData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageAuthenticationCode_addData)},
    {SIP_MLNAME_CAST(sipName_hash), meth_QMessageAuthenticationCode_hash, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageAuthenticationCode_hash)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QMessageAuthenticationCode_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageAuthenticationCode_reset)},
    {SIP_MLNAME_CAST(sipName_result), meth_QMessageAuthenticationCode_result, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageAuthenticationCode_result)},
    {SIP_MLNAME_CAST(sipName_setKey), meth_QMessageAuthenticationCode_setKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageAuthenticationCode_setKey)}
};

PyDoc_STRVAR(doc_QMessageAuthenticationCode, "\1QMessageAuthenticationCode(QCryptographicHash.Algorithm, QByteArray key=QByteArray())");


pyqt5ClassTypeDef sipTypeDef_QtCore_QMessageAuthenticationCode = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMessageAuthenticationCode,
        {0}
    },
    {
        sipNameNr_QMessageAuthenticationCode,
        {0, 0, 1},
        5, methods_QMessageAuthenticationCode,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMessageAuthenticationCode,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QMessageAuthenticationCode,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMessageAuthenticationCode,
    0,
    0,
    0,
    release_QMessageAuthenticationCode,
    cast_QMessageAuthenticationCode,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
