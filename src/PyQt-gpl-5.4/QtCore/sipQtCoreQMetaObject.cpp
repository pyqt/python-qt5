/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"
#line 142 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"
#line 202 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"
#line 167 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"
#line 146 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
// Raise an exception when QMetaObject::invokeMethod() returns false.
static void qtcore_invokeMethod_exception()
{
    PyErr_SetString(PyExc_RuntimeError, "QMetaObject.invokeMethod() call failed");
}
#line 64 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"


PyDoc_STRVAR(doc_QMetaObject_className, "QMetaObject.className() -> str");

extern "C" {static PyObject *meth_QMetaObject_className(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_className(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            const char*sipRes;

            sipRes = sipCpp->className();

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_className, doc_QMetaObject_className);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_superClass, "QMetaObject.superClass() -> QMetaObject");

extern "C" {static PyObject *meth_QMetaObject_superClass(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_superClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            const QMetaObject*sipRes;

            sipRes = sipCpp->superClass();

            return sipConvertFromType(const_cast<QMetaObject *>(sipRes),sipType_QMetaObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_superClass, doc_QMetaObject_superClass);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_userProperty, "QMetaObject.userProperty() -> QMetaProperty");

extern "C" {static PyObject *meth_QMetaObject_userProperty(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_userProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            QMetaProperty*sipRes;

            sipRes = new QMetaProperty(sipCpp->userProperty());

            return sipConvertFromNewType(sipRes,sipType_QMetaProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_userProperty, doc_QMetaObject_userProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_methodOffset, "QMetaObject.methodOffset() -> int");

extern "C" {static PyObject *meth_QMetaObject_methodOffset(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_methodOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->methodOffset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_methodOffset, doc_QMetaObject_methodOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_enumeratorOffset, "QMetaObject.enumeratorOffset() -> int");

extern "C" {static PyObject *meth_QMetaObject_enumeratorOffset(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_enumeratorOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->enumeratorOffset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_enumeratorOffset, doc_QMetaObject_enumeratorOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_propertyOffset, "QMetaObject.propertyOffset() -> int");

extern "C" {static PyObject *meth_QMetaObject_propertyOffset(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_propertyOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->propertyOffset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_propertyOffset, doc_QMetaObject_propertyOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_classInfoOffset, "QMetaObject.classInfoOffset() -> int");

extern "C" {static PyObject *meth_QMetaObject_classInfoOffset(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_classInfoOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->classInfoOffset();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_classInfoOffset, doc_QMetaObject_classInfoOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_methodCount, "QMetaObject.methodCount() -> int");

extern "C" {static PyObject *meth_QMetaObject_methodCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_methodCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->methodCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_methodCount, doc_QMetaObject_methodCount);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_enumeratorCount, "QMetaObject.enumeratorCount() -> int");

extern "C" {static PyObject *meth_QMetaObject_enumeratorCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_enumeratorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->enumeratorCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_enumeratorCount, doc_QMetaObject_enumeratorCount);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_propertyCount, "QMetaObject.propertyCount() -> int");

extern "C" {static PyObject *meth_QMetaObject_propertyCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_propertyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->propertyCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_propertyCount, doc_QMetaObject_propertyCount);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_classInfoCount, "QMetaObject.classInfoCount() -> int");

extern "C" {static PyObject *meth_QMetaObject_classInfoCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_classInfoCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->classInfoCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_classInfoCount, doc_QMetaObject_classInfoCount);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfMethod, "QMetaObject.indexOfMethod(str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfMethod(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfMethod(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfMethod, doc_QMetaObject_indexOfMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfSignal, "QMetaObject.indexOfSignal(str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfSignal(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfSignal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfSignal(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfSignal, doc_QMetaObject_indexOfSignal);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfSlot, "QMetaObject.indexOfSlot(str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfSlot(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfSlot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfSlot(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfSlot, doc_QMetaObject_indexOfSlot);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfEnumerator, "QMetaObject.indexOfEnumerator(str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfEnumerator(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfEnumerator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfEnumerator(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfEnumerator, doc_QMetaObject_indexOfEnumerator);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfProperty, "QMetaObject.indexOfProperty(str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfProperty(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfProperty(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfProperty, doc_QMetaObject_indexOfProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfClassInfo, "QMetaObject.indexOfClassInfo(str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfClassInfo(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfClassInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfClassInfo(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfClassInfo, doc_QMetaObject_indexOfClassInfo);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_method, "QMetaObject.method(int) -> QMetaMethod");

extern "C" {static PyObject *meth_QMetaObject_method(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_method(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            QMetaMethod*sipRes;

            sipRes = new QMetaMethod(sipCpp->method(a0));

            return sipConvertFromNewType(sipRes,sipType_QMetaMethod,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_method, doc_QMetaObject_method);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_enumerator, "QMetaObject.enumerator(int) -> QMetaEnum");

extern "C" {static PyObject *meth_QMetaObject_enumerator(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_enumerator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            QMetaEnum*sipRes;

            sipRes = new QMetaEnum(sipCpp->enumerator(a0));

            return sipConvertFromNewType(sipRes,sipType_QMetaEnum,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_enumerator, doc_QMetaObject_enumerator);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_property, "QMetaObject.property(int) -> QMetaProperty");

extern "C" {static PyObject *meth_QMetaObject_property(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_property(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            QMetaProperty*sipRes;

            sipRes = new QMetaProperty(sipCpp->property(a0));

            return sipConvertFromNewType(sipRes,sipType_QMetaProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_property, doc_QMetaObject_property);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_classInfo, "QMetaObject.classInfo(int) -> QMetaClassInfo");

extern "C" {static PyObject *meth_QMetaObject_classInfo(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_classInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            QMetaClassInfo*sipRes;

            sipRes = new QMetaClassInfo(sipCpp->classInfo(a0));

            return sipConvertFromNewType(sipRes,sipType_QMetaClassInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_classInfo, doc_QMetaObject_classInfo);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_checkConnectArgs, "QMetaObject.checkConnectArgs(str, str) -> bool\n"
    "QMetaObject.checkConnectArgs(QMetaMethod, QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QMetaObject_checkConnectArgs(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_checkConnectArgs(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        const char* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "ss", &a0, &a1))
        {
            bool sipRes;

            sipRes = QMetaObject::checkConnectArgs(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QMetaMethod* a0;
        const QMetaMethod* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QMetaMethod, &a0, sipType_QMetaMethod, &a1))
        {
            bool sipRes;

            sipRes = QMetaObject::checkConnectArgs(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_checkConnectArgs, doc_QMetaObject_checkConnectArgs);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_connectSlotsByName, "QMetaObject.connectSlotsByName(QObject)");

extern "C" {static PyObject *meth_QMetaObject_connectSlotsByName(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_connectSlotsByName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        PyObject *a0Wrapper;

        if (sipParseArgs(&sipParseErr, sipArgs, "@J8", &a0Wrapper, sipType_QObject, &a0))
        {
#line 61 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
        qpycore_qmetaobject_connectslotsbyname(a0, a0Wrapper);
#line 708 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_connectSlotsByName, doc_QMetaObject_connectSlotsByName);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_normalizedSignature, "QMetaObject.normalizedSignature(str) -> QByteArray");

extern "C" {static PyObject *meth_QMetaObject_normalizedSignature(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_normalizedSignature(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "s", &a0))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(QMetaObject::normalizedSignature(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_normalizedSignature, doc_QMetaObject_normalizedSignature);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_normalizedType, "QMetaObject.normalizedType(str) -> QByteArray");

extern "C" {static PyObject *meth_QMetaObject_normalizedType(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_normalizedType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "s", &a0))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(QMetaObject::normalizedType(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_normalizedType, doc_QMetaObject_normalizedType);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_invokeMethod, "QMetaObject.invokeMethod(QObject, str, Qt.ConnectionType, QGenericReturnArgument, QGenericArgument value0=QGenericArgument(0,0), QGenericArgument value1=QGenericArgument(0,0), QGenericArgument value2=QGenericArgument(0,0), QGenericArgument value3=QGenericArgument(0,0), QGenericArgument value4=QGenericArgument(0,0), QGenericArgument value5=QGenericArgument(0,0), QGenericArgument value6=QGenericArgument(0,0), QGenericArgument value7=QGenericArgument(0,0), QGenericArgument value8=QGenericArgument(0,0), QGenericArgument value9=QGenericArgument(0,0)) -> object\n"
    "QMetaObject.invokeMethod(QObject, str, QGenericReturnArgument, QGenericArgument value0=QGenericArgument(0,0), QGenericArgument value1=QGenericArgument(0,0), QGenericArgument value2=QGenericArgument(0,0), QGenericArgument value3=QGenericArgument(0,0), QGenericArgument value4=QGenericArgument(0,0), QGenericArgument value5=QGenericArgument(0,0), QGenericArgument value6=QGenericArgument(0,0), QGenericArgument value7=QGenericArgument(0,0), QGenericArgument value8=QGenericArgument(0,0), QGenericArgument value9=QGenericArgument(0,0)) -> object\n"
    "QMetaObject.invokeMethod(QObject, str, Qt.ConnectionType, QGenericArgument value0=QGenericArgument(0,0), QGenericArgument value1=QGenericArgument(0,0), QGenericArgument value2=QGenericArgument(0,0), QGenericArgument value3=QGenericArgument(0,0), QGenericArgument value4=QGenericArgument(0,0), QGenericArgument value5=QGenericArgument(0,0), QGenericArgument value6=QGenericArgument(0,0), QGenericArgument value7=QGenericArgument(0,0), QGenericArgument value8=QGenericArgument(0,0), QGenericArgument value9=QGenericArgument(0,0)) -> object\n"
    "QMetaObject.invokeMethod(QObject, str, QGenericArgument value0=QGenericArgument(0,0), QGenericArgument value1=QGenericArgument(0,0), QGenericArgument value2=QGenericArgument(0,0), QGenericArgument value3=QGenericArgument(0,0), QGenericArgument value4=QGenericArgument(0,0), QGenericArgument value5=QGenericArgument(0,0), QGenericArgument value6=QGenericArgument(0,0), QGenericArgument value7=QGenericArgument(0,0), QGenericArgument value8=QGenericArgument(0,0), QGenericArgument value9=QGenericArgument(0,0)) -> object");

extern "C" {static PyObject *meth_QMetaObject_invokeMethod(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_invokeMethod(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        const char* a1;
        Qt::ConnectionType a2;
        QGenericReturnArgument* a3;
        PyObject *a3Wrapper;
        QGenericArgument a4def = QGenericArgument(0,0);
        QGenericArgument* a4 = &a4def;
        QGenericArgument a5def = QGenericArgument(0,0);
        QGenericArgument* a5 = &a5def;
        QGenericArgument a6def = QGenericArgument(0,0);
        QGenericArgument* a6 = &a6def;
        QGenericArgument a7def = QGenericArgument(0,0);
        QGenericArgument* a7 = &a7def;
        QGenericArgument a8def = QGenericArgument(0,0);
        QGenericArgument* a8 = &a8def;
        QGenericArgument a9def = QGenericArgument(0,0);
        QGenericArgument* a9 = &a9def;
        QGenericArgument a10def = QGenericArgument(0,0);
        QGenericArgument* a10 = &a10def;
        QGenericArgument a11def = QGenericArgument(0,0);
        QGenericArgument* a11 = &a11def;
        QGenericArgument a12def = QGenericArgument(0,0);
        QGenericArgument* a12 = &a12def;
        QGenericArgument a13def = QGenericArgument(0,0);
        QGenericArgument* a13 = &a13def;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8sE@J9|J9J9J9J9J9J9J9J9J9J9", sipType_QObject, &a0, &a1, sipType_Qt_ConnectionType, &a2, &a3Wrapper, sipType_QGenericReturnArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11, sipType_QGenericArgument, &a12, sipType_QGenericArgument, &a13))
        {
            PyObject * sipRes = 0;

#line 68 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = QMetaObject::invokeMethod(a0,a1,a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9,*a10,*a11,*a12,*a13);
        Py_END_ALLOW_THREADS
        
        if (ok)
            sipRes = qpycore_ReturnValue(a3Wrapper);
        else
            qtcore_invokeMethod_exception();
#line 846 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"

            return sipRes;
        }
    }

    {
        QObject* a0;
        const char* a1;
        QGenericReturnArgument* a2;
        PyObject *a2Wrapper;
        QGenericArgument a3def = QGenericArgument(0,0);
        QGenericArgument* a3 = &a3def;
        QGenericArgument a4def = QGenericArgument(0,0);
        QGenericArgument* a4 = &a4def;
        QGenericArgument a5def = QGenericArgument(0,0);
        QGenericArgument* a5 = &a5def;
        QGenericArgument a6def = QGenericArgument(0,0);
        QGenericArgument* a6 = &a6def;
        QGenericArgument a7def = QGenericArgument(0,0);
        QGenericArgument* a7 = &a7def;
        QGenericArgument a8def = QGenericArgument(0,0);
        QGenericArgument* a8 = &a8def;
        QGenericArgument a9def = QGenericArgument(0,0);
        QGenericArgument* a9 = &a9def;
        QGenericArgument a10def = QGenericArgument(0,0);
        QGenericArgument* a10 = &a10def;
        QGenericArgument a11def = QGenericArgument(0,0);
        QGenericArgument* a11 = &a11def;
        QGenericArgument a12def = QGenericArgument(0,0);
        QGenericArgument* a12 = &a12def;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8s@J9|J9J9J9J9J9J9J9J9J9J9", sipType_QObject, &a0, &a1, &a2Wrapper, sipType_QGenericReturnArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11, sipType_QGenericArgument, &a12))
        {
            PyObject * sipRes = 0;

#line 83 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = QMetaObject::invokeMethod(a0,a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9,*a10,*a11,*a12);
        Py_END_ALLOW_THREADS
        
        if (ok)
            sipRes = qpycore_ReturnValue(a2Wrapper);
        else
            qtcore_invokeMethod_exception();
#line 910 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"

            return sipRes;
        }
    }

    {
        QObject* a0;
        const char* a1;
        Qt::ConnectionType a2;
        QGenericArgument a3def = QGenericArgument(0,0);
        QGenericArgument* a3 = &a3def;
        QGenericArgument a4def = QGenericArgument(0,0);
        QGenericArgument* a4 = &a4def;
        QGenericArgument a5def = QGenericArgument(0,0);
        QGenericArgument* a5 = &a5def;
        QGenericArgument a6def = QGenericArgument(0,0);
        QGenericArgument* a6 = &a6def;
        QGenericArgument a7def = QGenericArgument(0,0);
        QGenericArgument* a7 = &a7def;
        QGenericArgument a8def = QGenericArgument(0,0);
        QGenericArgument* a8 = &a8def;
        QGenericArgument a9def = QGenericArgument(0,0);
        QGenericArgument* a9 = &a9def;
        QGenericArgument a10def = QGenericArgument(0,0);
        QGenericArgument* a10 = &a10def;
        QGenericArgument a11def = QGenericArgument(0,0);
        QGenericArgument* a11 = &a11def;
        QGenericArgument a12def = QGenericArgument(0,0);
        QGenericArgument* a12 = &a12def;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8sE|J9J9J9J9J9J9J9J9J9J9", sipType_QObject, &a0, &a1, sipType_Qt_ConnectionType, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11, sipType_QGenericArgument, &a12))
        {
            PyObject * sipRes = 0;

#line 98 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = QMetaObject::invokeMethod(a0,a1,a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9,*a10,*a11,*a12);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
        else
            qtcore_invokeMethod_exception();
#line 976 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"

            return sipRes;
        }
    }

    {
        QObject* a0;
        const char* a1;
        QGenericArgument a2def = QGenericArgument(0,0);
        QGenericArgument* a2 = &a2def;
        QGenericArgument a3def = QGenericArgument(0,0);
        QGenericArgument* a3 = &a3def;
        QGenericArgument a4def = QGenericArgument(0,0);
        QGenericArgument* a4 = &a4def;
        QGenericArgument a5def = QGenericArgument(0,0);
        QGenericArgument* a5 = &a5def;
        QGenericArgument a6def = QGenericArgument(0,0);
        QGenericArgument* a6 = &a6def;
        QGenericArgument a7def = QGenericArgument(0,0);
        QGenericArgument* a7 = &a7def;
        QGenericArgument a8def = QGenericArgument(0,0);
        QGenericArgument* a8 = &a8def;
        QGenericArgument a9def = QGenericArgument(0,0);
        QGenericArgument* a9 = &a9def;
        QGenericArgument a10def = QGenericArgument(0,0);
        QGenericArgument* a10 = &a10def;
        QGenericArgument a11def = QGenericArgument(0,0);
        QGenericArgument* a11 = &a11def;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_value0,
            sipName_value1,
            sipName_value2,
            sipName_value3,
            sipName_value4,
            sipName_value5,
            sipName_value6,
            sipName_value7,
            sipName_value8,
            sipName_value9,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8s|J9J9J9J9J9J9J9J9J9J9", sipType_QObject, &a0, &a1, sipType_QGenericArgument, &a2, sipType_QGenericArgument, &a3, sipType_QGenericArgument, &a4, sipType_QGenericArgument, &a5, sipType_QGenericArgument, &a6, sipType_QGenericArgument, &a7, sipType_QGenericArgument, &a8, sipType_QGenericArgument, &a9, sipType_QGenericArgument, &a10, sipType_QGenericArgument, &a11))
        {
            PyObject * sipRes = 0;

#line 116 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
        // Raise an exception if the call failed.
        bool ok;
        
        Py_BEGIN_ALLOW_THREADS
        ok = QMetaObject::invokeMethod(a0,a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9,*a10,*a11);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
        else
            qtcore_invokeMethod_exception();
#line 1040 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQMetaObject.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_invokeMethod, doc_QMetaObject_invokeMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_constructorCount, "QMetaObject.constructorCount() -> int");

extern "C" {static PyObject *meth_QMetaObject_constructorCount(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_constructorCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMetaObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->constructorCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_constructorCount, doc_QMetaObject_constructorCount);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_indexOfConstructor, "QMetaObject.indexOfConstructor(str) -> int");

extern "C" {static PyObject *meth_QMetaObject_indexOfConstructor(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_indexOfConstructor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfConstructor(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_indexOfConstructor, doc_QMetaObject_indexOfConstructor);

    return NULL;
}


PyDoc_STRVAR(doc_QMetaObject_constructor, "QMetaObject.constructor(int) -> QMetaMethod");

extern "C" {static PyObject *meth_QMetaObject_constructor(PyObject *, PyObject *);}
static PyObject *meth_QMetaObject_constructor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QMetaObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMetaObject, &sipCpp, &a0))
        {
            QMetaMethod*sipRes;

            sipRes = new QMetaMethod(sipCpp->constructor(a0));

            return sipConvertFromNewType(sipRes,sipType_QMetaMethod,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMetaObject, sipName_constructor, doc_QMetaObject_constructor);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMetaObject(void *, const sipTypeDef *);}
static void *cast_QMetaObject(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QMetaObject)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMetaObject(void *, int);}
static void release_QMetaObject(void *sipCppV,int)
{
    delete reinterpret_cast<QMetaObject *>(sipCppV);
}


extern "C" {static void assign_QMetaObject(void *, SIP_SSIZE_T, const void *);}
static void assign_QMetaObject(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QMetaObject *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QMetaObject *>(sipSrc);
}


extern "C" {static void *array_QMetaObject(SIP_SSIZE_T);}
static void *array_QMetaObject(SIP_SSIZE_T sipNrElem)
{
    return new QMetaObject[sipNrElem];
}


extern "C" {static void *copy_QMetaObject(const void *, SIP_SSIZE_T);}
static void *copy_QMetaObject(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QMetaObject(reinterpret_cast<const QMetaObject *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMetaObject(sipSimpleWrapper *);}
static void dealloc_QMetaObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QMetaObject(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QMetaObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMetaObject(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QMetaObject *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QMetaObject();

            return sipCpp;
        }
    }

    {
        const QMetaObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QMetaObject, &a0))
        {
            sipCpp = new QMetaObject(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QMetaObject[] = {
    {SIP_MLNAME_CAST(sipName_checkConnectArgs), meth_QMetaObject_checkConnectArgs, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_checkConnectArgs)},
    {SIP_MLNAME_CAST(sipName_classInfo), meth_QMetaObject_classInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_classInfo)},
    {SIP_MLNAME_CAST(sipName_classInfoCount), meth_QMetaObject_classInfoCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_classInfoCount)},
    {SIP_MLNAME_CAST(sipName_classInfoOffset), meth_QMetaObject_classInfoOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_classInfoOffset)},
    {SIP_MLNAME_CAST(sipName_className), meth_QMetaObject_className, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_className)},
    {SIP_MLNAME_CAST(sipName_connectSlotsByName), meth_QMetaObject_connectSlotsByName, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_connectSlotsByName)},
    {SIP_MLNAME_CAST(sipName_constructor), meth_QMetaObject_constructor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_constructor)},
    {SIP_MLNAME_CAST(sipName_constructorCount), meth_QMetaObject_constructorCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_constructorCount)},
    {SIP_MLNAME_CAST(sipName_enumerator), meth_QMetaObject_enumerator, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_enumerator)},
    {SIP_MLNAME_CAST(sipName_enumeratorCount), meth_QMetaObject_enumeratorCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_enumeratorCount)},
    {SIP_MLNAME_CAST(sipName_enumeratorOffset), meth_QMetaObject_enumeratorOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_enumeratorOffset)},
    {SIP_MLNAME_CAST(sipName_indexOfClassInfo), meth_QMetaObject_indexOfClassInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfClassInfo)},
    {SIP_MLNAME_CAST(sipName_indexOfConstructor), meth_QMetaObject_indexOfConstructor, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfConstructor)},
    {SIP_MLNAME_CAST(sipName_indexOfEnumerator), meth_QMetaObject_indexOfEnumerator, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfEnumerator)},
    {SIP_MLNAME_CAST(sipName_indexOfMethod), meth_QMetaObject_indexOfMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfMethod)},
    {SIP_MLNAME_CAST(sipName_indexOfProperty), meth_QMetaObject_indexOfProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfProperty)},
    {SIP_MLNAME_CAST(sipName_indexOfSignal), meth_QMetaObject_indexOfSignal, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfSignal)},
    {SIP_MLNAME_CAST(sipName_indexOfSlot), meth_QMetaObject_indexOfSlot, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_indexOfSlot)},
    {SIP_MLNAME_CAST(sipName_invokeMethod), (PyCFunction)meth_QMetaObject_invokeMethod, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMetaObject_invokeMethod)},
    {SIP_MLNAME_CAST(sipName_method), meth_QMetaObject_method, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_method)},
    {SIP_MLNAME_CAST(sipName_methodCount), meth_QMetaObject_methodCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_methodCount)},
    {SIP_MLNAME_CAST(sipName_methodOffset), meth_QMetaObject_methodOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_methodOffset)},
    {SIP_MLNAME_CAST(sipName_normalizedSignature), meth_QMetaObject_normalizedSignature, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_normalizedSignature)},
    {SIP_MLNAME_CAST(sipName_normalizedType), meth_QMetaObject_normalizedType, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_normalizedType)},
    {SIP_MLNAME_CAST(sipName_property), meth_QMetaObject_property, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_property)},
    {SIP_MLNAME_CAST(sipName_propertyCount), meth_QMetaObject_propertyCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_propertyCount)},
    {SIP_MLNAME_CAST(sipName_propertyOffset), meth_QMetaObject_propertyOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_propertyOffset)},
    {SIP_MLNAME_CAST(sipName_superClass), meth_QMetaObject_superClass, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_superClass)},
    {SIP_MLNAME_CAST(sipName_userProperty), meth_QMetaObject_userProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QMetaObject_userProperty)}
};

PyDoc_STRVAR(doc_QMetaObject, "\1QMetaObject()\n"
    "QMetaObject(QMetaObject)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QMetaObject = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMetaObject,
        {0}
    },
    {
        sipNameNr_QMetaObject,
        {0, 0, 1},
        29, methods_QMetaObject,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMetaObject,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QMetaObject,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMetaObject,
    assign_QMetaObject,
    array_QMetaObject,
    copy_QMetaObject,
    release_QMetaObject,
    cast_QMetaObject,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
