/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstorageinfo.sip"
#include <qstorageinfo.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStorageInfo.cpp"

#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStorageInfo.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qdir.sip"
#include <qdir.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStorageInfo.cpp"
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStorageInfo.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStorageInfo.cpp"


PyDoc_STRVAR(doc_QStorageInfo_swap, "QStorageInfo.swap(QStorageInfo)");

extern "C" {static PyObject *meth_QStorageInfo_swap(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStorageInfo* a0;
        QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStorageInfo, &sipCpp, sipType_QStorageInfo, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_swap, doc_QStorageInfo_swap);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_setPath, "QStorageInfo.setPath(str)");

extern "C" {static PyObject *meth_QStorageInfo_setPath(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_setPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStorageInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPath(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_setPath, doc_QStorageInfo_setPath);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_rootPath, "QStorageInfo.rootPath() -> str");

extern "C" {static PyObject *meth_QStorageInfo_rootPath(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_rootPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->rootPath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_rootPath, doc_QStorageInfo_rootPath);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_device, "QStorageInfo.device() -> QByteArray");

extern "C" {static PyObject *meth_QStorageInfo_device(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->device());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_device, doc_QStorageInfo_device);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_fileSystemType, "QStorageInfo.fileSystemType() -> QByteArray");

extern "C" {static PyObject *meth_QStorageInfo_fileSystemType(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_fileSystemType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->fileSystemType());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_fileSystemType, doc_QStorageInfo_fileSystemType);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_name, "QStorageInfo.name() -> str");

extern "C" {static PyObject *meth_QStorageInfo_name(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_name, doc_QStorageInfo_name);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_displayName, "QStorageInfo.displayName() -> str");

extern "C" {static PyObject *meth_QStorageInfo_displayName(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_displayName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->displayName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_displayName, doc_QStorageInfo_displayName);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_bytesTotal, "QStorageInfo.bytesTotal() -> int");

extern "C" {static PyObject *meth_QStorageInfo_bytesTotal(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_bytesTotal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->bytesTotal();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_bytesTotal, doc_QStorageInfo_bytesTotal);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_bytesFree, "QStorageInfo.bytesFree() -> int");

extern "C" {static PyObject *meth_QStorageInfo_bytesFree(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_bytesFree(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->bytesFree();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_bytesFree, doc_QStorageInfo_bytesFree);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_bytesAvailable, "QStorageInfo.bytesAvailable() -> int");

extern "C" {static PyObject *meth_QStorageInfo_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->bytesAvailable();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_bytesAvailable, doc_QStorageInfo_bytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_isReadOnly, "QStorageInfo.isReadOnly() -> bool");

extern "C" {static PyObject *meth_QStorageInfo_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_isReadOnly, doc_QStorageInfo_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_isReady, "QStorageInfo.isReady() -> bool");

extern "C" {static PyObject *meth_QStorageInfo_isReady(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_isReady(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReady();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_isReady, doc_QStorageInfo_isReady);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_isValid, "QStorageInfo.isValid() -> bool");

extern "C" {static PyObject *meth_QStorageInfo_isValid(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_isValid, doc_QStorageInfo_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_refresh, "QStorageInfo.refresh()");

extern "C" {static PyObject *meth_QStorageInfo_refresh(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_refresh(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            sipCpp->refresh();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_refresh, doc_QStorageInfo_refresh);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_mountedVolumes, "QStorageInfo.mountedVolumes() -> list-of-QStorageInfo");

extern "C" {static PyObject *meth_QStorageInfo_mountedVolumes(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_mountedVolumes(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QStorageInfo>*sipRes;

            sipRes = new QList<QStorageInfo>(QStorageInfo::mountedVolumes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QStorageInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_mountedVolumes, doc_QStorageInfo_mountedVolumes);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_root, "QStorageInfo.root() -> QStorageInfo");

extern "C" {static PyObject *meth_QStorageInfo_root(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_root(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStorageInfo*sipRes;

            sipRes = new QStorageInfo(QStorageInfo::root());

            return sipConvertFromNewType(sipRes,sipType_QStorageInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_root, doc_QStorageInfo_root);

    return NULL;
}


PyDoc_STRVAR(doc_QStorageInfo_isRoot, "QStorageInfo.isRoot() -> bool");

extern "C" {static PyObject *meth_QStorageInfo_isRoot(PyObject *, PyObject *);}
static PyObject *meth_QStorageInfo_isRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStorageInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRoot();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStorageInfo, sipName_isRoot, doc_QStorageInfo_isRoot);

    return NULL;
}


extern "C" {static PyObject *slot_QStorageInfo___eq__(PyObject *,PyObject *);}
static PyObject *slot_QStorageInfo___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QStorageInfo *sipCpp = reinterpret_cast<QStorageInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStorageInfo));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QStorageInfo, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QStorageInfo,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QStorageInfo___ne__(PyObject *,PyObject *);}
static PyObject *slot_QStorageInfo___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QStorageInfo *sipCpp = reinterpret_cast<QStorageInfo *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStorageInfo));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QStorageInfo* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QStorageInfo, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QStorageInfo,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QStorageInfo(void *, const sipTypeDef *);}
static void *cast_QStorageInfo(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QStorageInfo)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStorageInfo(void *, int);}
static void release_QStorageInfo(void *sipCppV,int)
{
    delete reinterpret_cast<QStorageInfo *>(sipCppV);
}


extern "C" {static void assign_QStorageInfo(void *, SIP_SSIZE_T, const void *);}
static void assign_QStorageInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QStorageInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QStorageInfo *>(sipSrc);
}


extern "C" {static void *array_QStorageInfo(SIP_SSIZE_T);}
static void *array_QStorageInfo(SIP_SSIZE_T sipNrElem)
{
    return new QStorageInfo[sipNrElem];
}


extern "C" {static void *copy_QStorageInfo(const void *, SIP_SSIZE_T);}
static void *copy_QStorageInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QStorageInfo(reinterpret_cast<const QStorageInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QStorageInfo(sipSimpleWrapper *);}
static void dealloc_QStorageInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QStorageInfo(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QStorageInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStorageInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QStorageInfo *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QStorageInfo();

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new QStorageInfo(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QDir* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDir, &a0))
        {
            sipCpp = new QStorageInfo(*a0);

            return sipCpp;
        }
    }

    {
        const QStorageInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QStorageInfo, &a0))
        {
            sipCpp = new QStorageInfo(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QStorageInfo[] = {
    {(void *)slot_QStorageInfo___eq__, eq_slot},
    {(void *)slot_QStorageInfo___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QStorageInfo[] = {
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QStorageInfo_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesFree), meth_QStorageInfo_bytesFree, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_bytesFree)},
    {SIP_MLNAME_CAST(sipName_bytesTotal), meth_QStorageInfo_bytesTotal, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_bytesTotal)},
    {SIP_MLNAME_CAST(sipName_device), meth_QStorageInfo_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_device)},
    {SIP_MLNAME_CAST(sipName_displayName), meth_QStorageInfo_displayName, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_displayName)},
    {SIP_MLNAME_CAST(sipName_fileSystemType), meth_QStorageInfo_fileSystemType, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_fileSystemType)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QStorageInfo_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_isReady), meth_QStorageInfo_isReady, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_isReady)},
    {SIP_MLNAME_CAST(sipName_isRoot), meth_QStorageInfo_isRoot, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_isRoot)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QStorageInfo_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_isValid)},
    {SIP_MLNAME_CAST(sipName_mountedVolumes), meth_QStorageInfo_mountedVolumes, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_mountedVolumes)},
    {SIP_MLNAME_CAST(sipName_name), meth_QStorageInfo_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_name)},
    {SIP_MLNAME_CAST(sipName_refresh), meth_QStorageInfo_refresh, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_refresh)},
    {SIP_MLNAME_CAST(sipName_root), meth_QStorageInfo_root, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_root)},
    {SIP_MLNAME_CAST(sipName_rootPath), meth_QStorageInfo_rootPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_rootPath)},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QStorageInfo_setPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_setPath)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QStorageInfo_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QStorageInfo_swap)}
};

PyDoc_STRVAR(doc_QStorageInfo, "\1QStorageInfo()\n"
    "QStorageInfo(str)\n"
    "QStorageInfo(QDir)\n"
    "QStorageInfo(QStorageInfo)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QStorageInfo = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QStorageInfo,
        {0}
    },
    {
        sipNameNr_QStorageInfo,
        {0, 0, 1},
        17, methods_QStorageInfo,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QStorageInfo,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QStorageInfo,
    init_type_QStorageInfo,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStorageInfo,
    assign_QStorageInfo,
    array_QStorageInfo,
    copy_QStorageInfo,
    release_QStorageInfo,
    cast_QStorageInfo,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
