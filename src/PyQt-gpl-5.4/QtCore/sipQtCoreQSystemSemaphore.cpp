/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qsystemsemaphore.sip"
#include <qsystemsemaphore.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSystemSemaphore.cpp"

#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSystemSemaphore.cpp"


PyDoc_STRVAR(doc_QSystemSemaphore_setKey, "QSystemSemaphore.setKey(str, int initialValue=0, QSystemSemaphore.AccessMode mode=QSystemSemaphore.Open)");

extern "C" {static PyObject *meth_QSystemSemaphore_setKey(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_setKey(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        int a1 = 0;
        QSystemSemaphore::AccessMode a2 = QSystemSemaphore::Open;
        QSystemSemaphore *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_initialValue,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|iE", &sipSelf, sipType_QSystemSemaphore, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QSystemSemaphore_AccessMode, &a2))
        {
            sipCpp->setKey(*a0,a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemSemaphore, sipName_setKey, doc_QSystemSemaphore_setKey);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemSemaphore_key, "QSystemSemaphore.key() -> str");

extern "C" {static PyObject *meth_QSystemSemaphore_key(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_key(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemSemaphore, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->key());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemSemaphore, sipName_key, doc_QSystemSemaphore_key);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemSemaphore_acquire, "QSystemSemaphore.acquire() -> bool");

extern "C" {static PyObject *meth_QSystemSemaphore_acquire(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_acquire(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemSemaphore, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->acquire();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemSemaphore, sipName_acquire, doc_QSystemSemaphore_acquire);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemSemaphore_release, "QSystemSemaphore.release(int n=1) -> bool");

extern "C" {static PyObject *meth_QSystemSemaphore_release(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_release(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 1;
        QSystemSemaphore *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QSystemSemaphore, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->release(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemSemaphore, sipName_release, doc_QSystemSemaphore_release);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemSemaphore_error, "QSystemSemaphore.error() -> QSystemSemaphore.SystemSemaphoreError");

extern "C" {static PyObject *meth_QSystemSemaphore_error(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemSemaphore, &sipCpp))
        {
            QSystemSemaphore::SystemSemaphoreError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QSystemSemaphore_SystemSemaphoreError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemSemaphore, sipName_error, doc_QSystemSemaphore_error);

    return NULL;
}


PyDoc_STRVAR(doc_QSystemSemaphore_errorString, "QSystemSemaphore.errorString() -> str");

extern "C" {static PyObject *meth_QSystemSemaphore_errorString(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSystemSemaphore, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSystemSemaphore, sipName_errorString, doc_QSystemSemaphore_errorString);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSystemSemaphore(void *, const sipTypeDef *);}
static void *cast_QSystemSemaphore(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QSystemSemaphore)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSystemSemaphore(void *, int);}
static void release_QSystemSemaphore(void *sipCppV,int)
{
    delete reinterpret_cast<QSystemSemaphore *>(sipCppV);
}


extern "C" {static void dealloc_QSystemSemaphore(sipSimpleWrapper *);}
static void dealloc_QSystemSemaphore(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QSystemSemaphore(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QSystemSemaphore(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSystemSemaphore(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QSystemSemaphore *sipCpp = 0;

    {
        const QString* a0;
        int a0State = 0;
        int a1 = 0;
        QSystemSemaphore::AccessMode a2 = QSystemSemaphore::Open;

        static const char *sipKwdList[] = {
            NULL,
            sipName_initialValue,
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|iE", sipType_QString,&a0, &a0State, &a1, sipType_QSystemSemaphore_AccessMode, &a2))
        {
            sipCpp = new QSystemSemaphore(*a0,a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QSystemSemaphore[] = {
    {SIP_MLNAME_CAST(sipName_acquire), meth_QSystemSemaphore_acquire, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemSemaphore_acquire)},
    {SIP_MLNAME_CAST(sipName_error), meth_QSystemSemaphore_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemSemaphore_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QSystemSemaphore_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemSemaphore_errorString)},
    {SIP_MLNAME_CAST(sipName_key), meth_QSystemSemaphore_key, METH_VARARGS, SIP_MLDOC_CAST(doc_QSystemSemaphore_key)},
    {SIP_MLNAME_CAST(sipName_release), (PyCFunction)meth_QSystemSemaphore_release, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSystemSemaphore_release)},
    {SIP_MLNAME_CAST(sipName_setKey), (PyCFunction)meth_QSystemSemaphore_setKey, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSystemSemaphore_setKey)}
};

static sipEnumMemberDef enummembers_QSystemSemaphore[] = {
    {sipName_AlreadyExists, static_cast<int>(QSystemSemaphore::AlreadyExists), 240},
    {sipName_Create, static_cast<int>(QSystemSemaphore::Create), 239},
    {sipName_KeyError, static_cast<int>(QSystemSemaphore::KeyError), 240},
    {sipName_NoError, static_cast<int>(QSystemSemaphore::NoError), 240},
    {sipName_NotFound, static_cast<int>(QSystemSemaphore::NotFound), 240},
    {sipName_Open, static_cast<int>(QSystemSemaphore::Open), 239},
    {sipName_OutOfResources, static_cast<int>(QSystemSemaphore::OutOfResources), 240},
    {sipName_PermissionDenied, static_cast<int>(QSystemSemaphore::PermissionDenied), 240},
    {sipName_UnknownError, static_cast<int>(QSystemSemaphore::UnknownError), 240},
};

PyDoc_STRVAR(doc_QSystemSemaphore, "\1QSystemSemaphore(str, int initialValue=0, QSystemSemaphore.AccessMode mode=QSystemSemaphore.Open)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QSystemSemaphore = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSystemSemaphore,
        {0}
    },
    {
        sipNameNr_QSystemSemaphore,
        {0, 0, 1},
        6, methods_QSystemSemaphore,
        9, enummembers_QSystemSemaphore,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSystemSemaphore,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QSystemSemaphore,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSystemSemaphore,
    0,
    0,
    0,
    release_QSystemSemaphore,
    cast_QSystemSemaphore,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
