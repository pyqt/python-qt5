/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpropertyanimation.sip"
#include <qpropertyanimation.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qeasingcurve.sip"
#include <qeasingcurve.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#include <qpair.h>
#line 52 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qanimationgroup.sip"
#include <qanimationgroup.h>
#line 55 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 58 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 67 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 70 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 73 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qthread.sip"
#include <qthread.h>
#line 79 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 85 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 88 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 91 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"


class sipQPropertyAnimation : public QPropertyAnimation
{
public:
    sipQPropertyAnimation(QObject*);
    sipQPropertyAnimation(QObject*,const QByteArray&,QObject*);
    virtual ~sipQPropertyAnimation();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_updateDirection(bool,QAbstractAnimation::Direction);
    void sipProtectVirt_updateCurrentTime(bool,int);
    QVariant sipProtectVirt_interpolated(bool,const QVariant&,const QVariant&,qreal) const;
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_updateCurrentValue(bool,const QVariant&);
    void sipProtectVirt_updateState(bool,QAbstractAnimation::State,QAbstractAnimation::State);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void updateDirection(QAbstractAnimation::Direction);
    QVariant interpolated(const QVariant&,const QVariant&,qreal) const;
    void updateCurrentTime(int);
    int duration() const;
    void updateState(QAbstractAnimation::State,QAbstractAnimation::State);
    void updateCurrentValue(const QVariant&);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPropertyAnimation(const sipQPropertyAnimation &);
    sipQPropertyAnimation &operator = (const sipQPropertyAnimation &);

    char sipPyMethods[13];
};

sipQPropertyAnimation::sipQPropertyAnimation(QObject*a0): QPropertyAnimation(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPropertyAnimation::sipQPropertyAnimation(QObject*a0,const QByteArray& a1,QObject*a2): QPropertyAnimation(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPropertyAnimation::~sipQPropertyAnimation()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQPropertyAnimation::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QPropertyAnimation);
}

int sipQPropertyAnimation::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QPropertyAnimation::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QPropertyAnimation,_c,_id,_a);

    return _id;
}

void *sipQPropertyAnimation::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QPropertyAnimation, _clname, &sipCpp) ? sipCpp : QPropertyAnimation::qt_metacast(_clname));
}

void sipQPropertyAnimation::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QPropertyAnimation::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QPropertyAnimation::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QPropertyAnimation::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QPropertyAnimation::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQPropertyAnimation::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QPropertyAnimation::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQPropertyAnimation::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QPropertyAnimation::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQPropertyAnimation::updateDirection(QAbstractAnimation::Direction a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_updateDirection);

    if (!sipMeth)
    {
        QPropertyAnimation::updateDirection(a0);
        return;
    }

    extern void sipVH_QtCore_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractAnimation::Direction);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_41(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QVariant sipQPropertyAnimation::interpolated(const QVariant& a0,const QVariant& a1,qreal a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_interpolated);

    if (!sipMeth)
        return QPropertyAnimation::interpolated(a0,a1,a2);

    extern QVariant sipVH_QtCore_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QVariant&,const QVariant&,double);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_1(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPropertyAnimation::updateCurrentTime(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_updateCurrentTime);

    if (!sipMeth)
    {
        QPropertyAnimation::updateCurrentTime(a0);
        return;
    }

    extern void sipVH_QtCore_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_4(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

int sipQPropertyAnimation::duration() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_duration);

    if (!sipMeth)
        return QPropertyAnimation::duration();

    extern int sipVH_QtCore_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_6(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQPropertyAnimation::updateState(QAbstractAnimation::State a0,QAbstractAnimation::State a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_updateState);

    if (!sipMeth)
    {
        QPropertyAnimation::updateState(a0,a1);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractAnimation::State,QAbstractAnimation::State);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_3(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQPropertyAnimation::updateCurrentValue(const QVariant& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_updateCurrentValue);

    if (!sipMeth)
    {
        QPropertyAnimation::updateCurrentValue(a0);
        return;
    }

    extern void sipVH_QtCore_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QVariant&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_2(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQPropertyAnimation::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QPropertyAnimation::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QObject* sipQPropertyAnimation::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQPropertyAnimation::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQPropertyAnimation::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQPropertyAnimation::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQPropertyAnimation::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQPropertyAnimation::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQPropertyAnimation::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQPropertyAnimation::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQPropertyAnimation::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQPropertyAnimation::sipProtectVirt_updateDirection(bool sipSelfWasArg,QAbstractAnimation::Direction a0)
{
    (sipSelfWasArg ? QAbstractAnimation::updateDirection(a0) : updateDirection(a0));
}

void sipQPropertyAnimation::sipProtectVirt_updateCurrentTime(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QVariantAnimation::updateCurrentTime(a0) : updateCurrentTime(a0));
}

QVariant sipQPropertyAnimation::sipProtectVirt_interpolated(bool sipSelfWasArg,const QVariant& a0,const QVariant& a1,qreal a2) const
{
    return (sipSelfWasArg ? QVariantAnimation::interpolated(a0,a1,a2) : interpolated(a0,a1,a2));
}

bool sipQPropertyAnimation::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QPropertyAnimation::event(a0) : event(a0));
}

void sipQPropertyAnimation::sipProtectVirt_updateCurrentValue(bool sipSelfWasArg,const QVariant& a0)
{
    (sipSelfWasArg ? QPropertyAnimation::updateCurrentValue(a0) : updateCurrentValue(a0));
}

void sipQPropertyAnimation::sipProtectVirt_updateState(bool sipSelfWasArg,QAbstractAnimation::State a0,QAbstractAnimation::State a1)
{
    (sipSelfWasArg ? QPropertyAnimation::updateState(a0,a1) : updateState(a0,a1));
}


PyDoc_STRVAR(doc_QPropertyAnimation_sender, "QPropertyAnimation.sender() -> QObject");

extern "C" {static PyObject *meth_QPropertyAnimation_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QPropertyAnimation, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 542 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_sender, doc_QPropertyAnimation_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_receivers, "QPropertyAnimation.receivers(signal) -> int");

extern "C" {static PyObject *meth_QPropertyAnimation_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QPropertyAnimation, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 601 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQPropertyAnimation.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_receivers, doc_QPropertyAnimation_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_timerEvent, "QPropertyAnimation.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QPropertyAnimation_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_timerEvent, doc_QPropertyAnimation_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_childEvent, "QPropertyAnimation.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QPropertyAnimation_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_childEvent, doc_QPropertyAnimation_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_customEvent, "QPropertyAnimation.customEvent(QEvent)");

extern "C" {static PyObject *meth_QPropertyAnimation_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_customEvent, doc_QPropertyAnimation_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_connectNotify, "QPropertyAnimation.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QPropertyAnimation_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_connectNotify, doc_QPropertyAnimation_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_disconnectNotify, "QPropertyAnimation.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QPropertyAnimation_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_disconnectNotify, doc_QPropertyAnimation_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_senderSignalIndex, "QPropertyAnimation.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QPropertyAnimation_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QPropertyAnimation, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_senderSignalIndex, doc_QPropertyAnimation_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_isSignalConnected, "QPropertyAnimation.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QPropertyAnimation_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_isSignalConnected, doc_QPropertyAnimation_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_updateDirection, "QPropertyAnimation.updateDirection(QAbstractAnimation.Direction)");

extern "C" {static PyObject *meth_QPropertyAnimation_updateDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_updateDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractAnimation::Direction a0;
        sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QAbstractAnimation_Direction, &a0))
        {
            sipCpp->sipProtectVirt_updateDirection(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_updateDirection, doc_QPropertyAnimation_updateDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_updateCurrentTime, "QPropertyAnimation.updateCurrentTime(int)");

extern "C" {static PyObject *meth_QPropertyAnimation_updateCurrentTime(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_updateCurrentTime(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QPropertyAnimation, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_updateCurrentTime(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_updateCurrentTime, doc_QPropertyAnimation_updateCurrentTime);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_interpolated, "QPropertyAnimation.interpolated(QVariant, QVariant, float) -> QVariant");

extern "C" {static PyObject *meth_QPropertyAnimation_interpolated(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_interpolated(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QVariant* a0;
        int a0State = 0;
        const QVariant* a1;
        int a1State = 0;
        qreal a2;
        const sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1d", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QVariant, &a0, &a0State, sipType_QVariant, &a1, &a1State, &a2))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->sipProtectVirt_interpolated(sipSelfWasArg,*a0,*a1,a2));
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_interpolated, doc_QPropertyAnimation_interpolated);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_targetObject, "QPropertyAnimation.targetObject() -> QObject");

extern "C" {static PyObject *meth_QPropertyAnimation_targetObject(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_targetObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPropertyAnimation, &sipCpp))
        {
            QObject*sipRes;

            sipRes = sipCpp->targetObject();

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_targetObject, doc_QPropertyAnimation_targetObject);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_setTargetObject, "QPropertyAnimation.setTargetObject(QObject)");

extern "C" {static PyObject *meth_QPropertyAnimation_setTargetObject(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_setTargetObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        PyObject *a0Keep;
        QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QPropertyAnimation, &sipCpp, &a0Keep, sipType_QObject, &a0))
        {
            sipCpp->setTargetObject(a0);

            sipKeepReference(sipSelf, 0, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_setTargetObject, doc_QPropertyAnimation_setTargetObject);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_propertyName, "QPropertyAnimation.propertyName() -> QByteArray");

extern "C" {static PyObject *meth_QPropertyAnimation_propertyName(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_propertyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPropertyAnimation, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->propertyName());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_propertyName, doc_QPropertyAnimation_propertyName);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_setPropertyName, "QPropertyAnimation.setPropertyName(QByteArray)");

extern "C" {static PyObject *meth_QPropertyAnimation_setPropertyName(PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_setPropertyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QPropertyAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setPropertyName(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_setPropertyName, doc_QPropertyAnimation_setPropertyName);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_event, "QPropertyAnimation.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QPropertyAnimation_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_event, doc_QPropertyAnimation_event);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_updateCurrentValue, "QPropertyAnimation.updateCurrentValue(QVariant)");

extern "C" {static PyObject *meth_QPropertyAnimation_updateCurrentValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_updateCurrentValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QVariant* a0;
        int a0State = 0;
        sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->sipProtectVirt_updateCurrentValue(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_updateCurrentValue, doc_QPropertyAnimation_updateCurrentValue);

    return NULL;
}


PyDoc_STRVAR(doc_QPropertyAnimation_updateState, "QPropertyAnimation.updateState(QAbstractAnimation.State, QAbstractAnimation.State)");

extern "C" {static PyObject *meth_QPropertyAnimation_updateState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPropertyAnimation_updateState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractAnimation::State a0;
        QAbstractAnimation::State a1;
        sipQPropertyAnimation *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BEE", &sipSelf, sipType_QPropertyAnimation, &sipCpp, sipType_QAbstractAnimation_State, &a0, sipType_QAbstractAnimation_State, &a1))
        {
            sipCpp->sipProtectVirt_updateState(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPropertyAnimation, sipName_updateState, doc_QPropertyAnimation_updateState);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPropertyAnimation(void *, const sipTypeDef *);}
static void *cast_QPropertyAnimation(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QPropertyAnimation)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QVariantAnimation)->ctd_cast((QVariantAnimation *)(QPropertyAnimation *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPropertyAnimation(void *, int);}
static void release_QPropertyAnimation(void *sipCppV,int)
{
    QPropertyAnimation *sipCpp = reinterpret_cast<QPropertyAnimation *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPropertyAnimation(sipSimpleWrapper *);}
static void dealloc_QPropertyAnimation(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPropertyAnimation *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPropertyAnimation(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPropertyAnimation(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPropertyAnimation(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQPropertyAnimation *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQPropertyAnimation(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0;
        PyObject *a0Keep;
        const QByteArray* a1;
        int a1State = 0;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J8J1|JH", &a0Keep, sipType_QObject, &a0, sipType_QByteArray, &a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQPropertyAnimation(a0,*a1,a2);

            sipKeepReference((PyObject *)sipSelf, 0, a0Keep);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPropertyAnimation[] = {{289, 255, 1}};


static PyMethodDef methods_QPropertyAnimation[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QPropertyAnimation_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QPropertyAnimation_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QPropertyAnimation_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QPropertyAnimation_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QPropertyAnimation_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPropertyAnimation_event)},
    {SIP_MLNAME_CAST(sipName_interpolated), (PyCFunction)meth_QPropertyAnimation_interpolated, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QPropertyAnimation_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_propertyName), meth_QPropertyAnimation_propertyName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_propertyName)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QPropertyAnimation_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QPropertyAnimation_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QPropertyAnimation_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setPropertyName), meth_QPropertyAnimation_setPropertyName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_setPropertyName)},
    {SIP_MLNAME_CAST(sipName_setTargetObject), meth_QPropertyAnimation_setTargetObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_setTargetObject)},
    {SIP_MLNAME_CAST(sipName_targetObject), meth_QPropertyAnimation_targetObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QPropertyAnimation_targetObject)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QPropertyAnimation_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateCurrentTime), (PyCFunction)meth_QPropertyAnimation_updateCurrentTime, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateCurrentValue), (PyCFunction)meth_QPropertyAnimation_updateCurrentValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPropertyAnimation_updateCurrentValue)},
    {SIP_MLNAME_CAST(sipName_updateDirection), (PyCFunction)meth_QPropertyAnimation_updateDirection, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateState), (PyCFunction)meth_QPropertyAnimation_updateState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPropertyAnimation_updateState)}
};

PyDoc_STRVAR(doc_QPropertyAnimation, "\1QPropertyAnimation(QObject parent=None)\n"
    "QPropertyAnimation(QObject, QByteArray, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QPropertyAnimation = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPropertyAnimation,
        {0}
    },
    {
        sipNameNr_QPropertyAnimation,
        {0, 0, 1},
        19, methods_QPropertyAnimation,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPropertyAnimation,
    -1,
    -1,
    supers_QPropertyAnimation,
    0,
    init_type_QPropertyAnimation,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPropertyAnimation,
    0,
    0,
    0,
    release_QPropertyAnimation,
    cast_QPropertyAnimation,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QPropertyAnimation::staticMetaObject,
    0,
    0,
    0
};
