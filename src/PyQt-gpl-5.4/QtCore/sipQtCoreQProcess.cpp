/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qprocess.sip"
#include <qprocess.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 220 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qprocess.sip"
#include <qprocess.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"


class sipQProcess : public QProcess
{
public:
    sipQProcess(QObject*);
    virtual ~sipQProcess();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    qint64 sipProtectVirt_readLineData(bool,char*,qint64);
    void sipProtect_setOpenMode(QIODevice::OpenMode);
    void sipProtect_setErrorString(const QString&);
    void sipProtect_setProcessState(QProcess::ProcessState);
    void sipProtectVirt_setupChildProcess(bool);
    qint64 sipProtectVirt_readData(bool,char*,qint64);
    qint64 sipProtectVirt_writeData(bool,const char*,PY_LONG_LONG);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    qint64 readLineData(char*,qint64);
    bool reset();
    bool seek(qint64);
    qint64 size() const;
    qint64 pos() const;
    bool open(QIODevice::OpenMode);
    qint64 writeData(const char*,PY_LONG_LONG);
    qint64 readData(char*,qint64);
    void setupChildProcess();
    bool atEnd() const;
    void close();
    bool canReadLine() const;
    bool isSequential() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;
    bool waitForBytesWritten(int);
    bool waitForReadyRead(int);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQProcess(const sipQProcess &);
    sipQProcess &operator = (const sipQProcess &);

    char sipPyMethods[24];
};

sipQProcess::sipQProcess(QObject*a0): QProcess(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQProcess::~sipQProcess()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQProcess::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QProcess);
}

int sipQProcess::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QProcess::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QProcess,_c,_id,_a);

    return _id;
}

void *sipQProcess::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QProcess, _clname, &sipCpp) ? sipCpp : QProcess::qt_metacast(_clname));
}

void sipQProcess::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QProcess::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QProcess::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QProcess::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QProcess::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQProcess::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QProcess::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQProcess::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QProcess::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQProcess::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QProcess::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

qint64 sipQProcess::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QProcess::readLineData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_43(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQProcess::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QProcess::reset();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QProcess::seek(a0);

    extern bool sipVH_QtCore_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_53(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

qint64 sipQProcess::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QProcess::size();

    extern PY_LONG_LONG sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

qint64 sipQProcess::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QProcess::pos();

    extern PY_LONG_LONG sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QProcess::open(a0);

    extern bool sipVH_QtCore_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_15(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

qint64 sipQProcess::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_writeData);

    if (!sipMeth)
        return QProcess::writeData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_42(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

qint64 sipQProcess::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_readData);

    if (!sipMeth)
        return QProcess::readData(a0,a1);

    extern PY_LONG_LONG sipVH_QtCore_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_43(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQProcess::setupChildProcess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_setupChildProcess);

    if (!sipMeth)
    {
        QProcess::setupChildProcess();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QProcess::atEnd();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

void sipQProcess::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QProcess::close();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QProcess::canReadLine();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QProcess::isSequential();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

qint64 sipQProcess::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QProcess::bytesToWrite();

    extern PY_LONG_LONG sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

qint64 sipQProcess::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QProcess::bytesAvailable();

    extern PY_LONG_LONG sipVH_QtCore_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_44(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQProcess::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QProcess::waitForBytesWritten(a0);

    extern bool sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQProcess::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QProcess::waitForReadyRead(a0);

    extern bool sipVH_QtCore_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_45(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QObject* sipQProcess::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQProcess::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQProcess::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQProcess::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQProcess::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQProcess::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQProcess::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQProcess::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQProcess::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

qint64 sipQProcess::sipProtectVirt_readLineData(bool sipSelfWasArg,char*a0,qint64 a1)
{
    return (sipSelfWasArg ? QIODevice::readLineData(a0,a1) : readLineData(a0,a1));
}

void sipQProcess::sipProtect_setOpenMode(QIODevice::OpenMode a0)
{
    QIODevice::setOpenMode(a0);
}

void sipQProcess::sipProtect_setErrorString(const QString& a0)
{
    QIODevice::setErrorString(a0);
}

void sipQProcess::sipProtect_setProcessState(QProcess::ProcessState a0)
{
    QProcess::setProcessState(a0);
}

void sipQProcess::sipProtectVirt_setupChildProcess(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QProcess::setupChildProcess() : setupChildProcess());
}

qint64 sipQProcess::sipProtectVirt_readData(bool sipSelfWasArg,char*a0,qint64 a1)
{
    return (sipSelfWasArg ? QProcess::readData(a0,a1) : readData(a0,a1));
}

qint64 sipQProcess::sipProtectVirt_writeData(bool sipSelfWasArg,const char*a0,PY_LONG_LONG a1)
{
    return (sipSelfWasArg ? QProcess::writeData(a0,a1) : writeData(a0,a1));
}


PyDoc_STRVAR(doc_QProcess_sender, "QProcess.sender() -> QObject");

extern "C" {static PyObject *meth_QProcess_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 719 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_sender, doc_QProcess_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_receivers, "QProcess.receivers(signal) -> int");

extern "C" {static PyObject *meth_QProcess_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 778 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_receivers, doc_QProcess_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_timerEvent, "QProcess.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QProcess_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QProcess, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_timerEvent, doc_QProcess_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_childEvent, "QProcess.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QProcess_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QProcess, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_childEvent, doc_QProcess_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_customEvent, "QProcess.customEvent(QEvent)");

extern "C" {static PyObject *meth_QProcess_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QProcess, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_customEvent, doc_QProcess_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_connectNotify, "QProcess.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QProcess_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QProcess, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_connectNotify, doc_QProcess_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_disconnectNotify, "QProcess.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QProcess_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QProcess, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_disconnectNotify, doc_QProcess_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_senderSignalIndex, "QProcess.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QProcess_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_senderSignalIndex, doc_QProcess_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_isSignalConnected, "QProcess.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QProcess_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QProcess, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_isSignalConnected, doc_QProcess_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_readLineData, "QProcess.readLineData(int) -> str");

extern "C" {static PyObject *meth_QProcess_readLineData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_readLineData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bn", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 232 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qiodevice.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QIODevice::readLineData(s, a0) : sipCpp->readLineData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1046 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readLineData, doc_QProcess_readLineData);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setOpenMode, "QProcess.setOpenMode(QIODevice.OpenMode)");

extern "C" {static PyObject *meth_QProcess_setOpenMode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_setOpenMode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice::OpenMode* a0;
        int a0State = 0;
        sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            sipCpp->sipProtect_setOpenMode(*a0);
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setOpenMode, doc_QProcess_setOpenMode);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setErrorString, "QProcess.setErrorString(str)");

extern "C" {static PyObject *meth_QProcess_setErrorString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_setErrorString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->sipProtect_setErrorString(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setErrorString, doc_QProcess_setErrorString);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_start, "QProcess.start(str, list-of-str, QIODevice.OpenMode mode=QIODevice.ReadWrite)\n"
    "QProcess.start(str, QIODevice.OpenMode mode=QIODevice.ReadWrite)\n"
    "QProcess.start(QIODevice.OpenMode mode=QIODevice.ReadWrite)");

extern "C" {static PyObject *meth_QProcess_start(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_start(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QStringList* a1;
        int a1State = 0;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            sipCpp->start(*a0,*a1,*a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QIODevice::OpenMode a1def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp->start(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QIODevice::OpenMode a0def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a0 = &a0def;
        int a0State = 0;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            sipCpp->start(*a0);
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_start, doc_QProcess_start);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_readChannel, "QProcess.readChannel() -> QProcess.ProcessChannel");

extern "C" {static PyObject *meth_QProcess_readChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcess::ProcessChannel sipRes;

            sipRes = sipCpp->readChannel();

            return sipConvertFromEnum(sipRes,sipType_QProcess_ProcessChannel);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readChannel, doc_QProcess_readChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setReadChannel, "QProcess.setReadChannel(QProcess.ProcessChannel)");

extern "C" {static PyObject *meth_QProcess_setReadChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setReadChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess::ProcessChannel a0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessChannel, &a0))
        {
            sipCpp->setReadChannel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setReadChannel, doc_QProcess_setReadChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_closeReadChannel, "QProcess.closeReadChannel(QProcess.ProcessChannel)");

extern "C" {static PyObject *meth_QProcess_closeReadChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_closeReadChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess::ProcessChannel a0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessChannel, &a0))
        {
            sipCpp->closeReadChannel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_closeReadChannel, doc_QProcess_closeReadChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_closeWriteChannel, "QProcess.closeWriteChannel()");

extern "C" {static PyObject *meth_QProcess_closeWriteChannel(PyObject *, PyObject *);}
static PyObject *meth_QProcess_closeWriteChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            sipCpp->closeWriteChannel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_closeWriteChannel, doc_QProcess_closeWriteChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_workingDirectory, "QProcess.workingDirectory() -> str");

extern "C" {static PyObject *meth_QProcess_workingDirectory(PyObject *, PyObject *);}
static PyObject *meth_QProcess_workingDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->workingDirectory());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_workingDirectory, doc_QProcess_workingDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setWorkingDirectory, "QProcess.setWorkingDirectory(str)");

extern "C" {static PyObject *meth_QProcess_setWorkingDirectory(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setWorkingDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWorkingDirectory(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setWorkingDirectory, doc_QProcess_setWorkingDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_error, "QProcess.error() -> QProcess.ProcessError");

extern "C" {static PyObject *meth_QProcess_error(PyObject *, PyObject *);}
static PyObject *meth_QProcess_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcess::ProcessError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QProcess_ProcessError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_error, doc_QProcess_error);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_state, "QProcess.state() -> QProcess.ProcessState");

extern "C" {static PyObject *meth_QProcess_state(PyObject *, PyObject *);}
static PyObject *meth_QProcess_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcess::ProcessState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QProcess_ProcessState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_state, doc_QProcess_state);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_pid, "QProcess.pid() -> sip.voidptr");

extern "C" {static PyObject *meth_QProcess_pid(PyObject *, PyObject *);}
static PyObject *meth_QProcess_pid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            Q_PID sipRes;

            sipRes = sipCpp->pid();

            return sipConvertFromVoidPtr((void *)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_pid, doc_QProcess_pid);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_waitForStarted, "QProcess.waitForStarted(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForStarted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForStarted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForStarted(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForStarted, doc_QProcess_waitForStarted);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_waitForReadyRead, "QProcess.waitForReadyRead(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForReadyRead(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProcess::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForReadyRead, doc_QProcess_waitForReadyRead);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_waitForBytesWritten, "QProcess.waitForBytesWritten(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForBytesWritten(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProcess::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForBytesWritten, doc_QProcess_waitForBytesWritten);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_waitForFinished, "QProcess.waitForFinished(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QProcess_waitForFinished(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_waitForFinished(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForFinished(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_waitForFinished, doc_QProcess_waitForFinished);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_readAllStandardOutput, "QProcess.readAllStandardOutput() -> QByteArray");

extern "C" {static PyObject *meth_QProcess_readAllStandardOutput(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readAllStandardOutput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->readAllStandardOutput());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readAllStandardOutput, doc_QProcess_readAllStandardOutput);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_readAllStandardError, "QProcess.readAllStandardError() -> QByteArray");

extern "C" {static PyObject *meth_QProcess_readAllStandardError(PyObject *, PyObject *);}
static PyObject *meth_QProcess_readAllStandardError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->readAllStandardError());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readAllStandardError, doc_QProcess_readAllStandardError);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_exitCode, "QProcess.exitCode() -> int");

extern "C" {static PyObject *meth_QProcess_exitCode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_exitCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->exitCode();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_exitCode, doc_QProcess_exitCode);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_exitStatus, "QProcess.exitStatus() -> QProcess.ExitStatus");

extern "C" {static PyObject *meth_QProcess_exitStatus(PyObject *, PyObject *);}
static PyObject *meth_QProcess_exitStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcess::ExitStatus sipRes;

            sipRes = sipCpp->exitStatus();

            return sipConvertFromEnum(sipRes,sipType_QProcess_ExitStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_exitStatus, doc_QProcess_exitStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_bytesAvailable, "QProcess.bytesAvailable() -> int");

extern "C" {static PyObject *meth_QProcess_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QProcess_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QProcess::bytesAvailable() : sipCpp->bytesAvailable());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_bytesAvailable, doc_QProcess_bytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_bytesToWrite, "QProcess.bytesToWrite() -> int");

extern "C" {static PyObject *meth_QProcess_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QProcess_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QProcess::bytesToWrite() : sipCpp->bytesToWrite());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_bytesToWrite, doc_QProcess_bytesToWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_isSequential, "QProcess.isSequential() -> bool");

extern "C" {static PyObject *meth_QProcess_isSequential(PyObject *, PyObject *);}
static PyObject *meth_QProcess_isSequential(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QProcess::isSequential() : sipCpp->isSequential());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_isSequential, doc_QProcess_isSequential);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_canReadLine, "QProcess.canReadLine() -> bool");

extern "C" {static PyObject *meth_QProcess_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QProcess_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QProcess::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_canReadLine, doc_QProcess_canReadLine);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_close, "QProcess.close()");

extern "C" {static PyObject *meth_QProcess_close(PyObject *, PyObject *);}
static PyObject *meth_QProcess_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QProcess::close() : sipCpp->close());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_close, doc_QProcess_close);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_atEnd, "QProcess.atEnd() -> bool");

extern "C" {static PyObject *meth_QProcess_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QProcess_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QProcess::atEnd() : sipCpp->atEnd());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_atEnd, doc_QProcess_atEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_execute, "QProcess.execute(str, list-of-str) -> int\n"
    "QProcess.execute(str) -> int");

extern "C" {static PyObject *meth_QProcess_execute(PyObject *, PyObject *);}
static PyObject *meth_QProcess_execute(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QStringList* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QProcess::execute(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QProcess::execute(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_execute, doc_QProcess_execute);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_startDetached, "QProcess.startDetached(str, list-of-str, str) -> (bool, int)\n"
    "QProcess.startDetached(str, list-of-str) -> bool\n"
    "QProcess.startDetached(str) -> bool");

extern "C" {static PyObject *meth_QProcess_startDetached(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_startDetached(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QStringList* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        qint64 a3;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            bool sipRes;

            sipRes = QProcess::startDetached(*a0,*a1,*a2,&a3);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipBuildResult(0,"(bn)",sipRes,a3);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QStringList* a1;
        int a1State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            bool sipRes;

            sipRes = QProcess::startDetached(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = QProcess::startDetached(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_startDetached, doc_QProcess_startDetached);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_systemEnvironment, "QProcess.systemEnvironment() -> list-of-str");

extern "C" {static PyObject *meth_QProcess_systemEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_systemEnvironment(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList*sipRes;

            sipRes = new QStringList(QProcess::systemEnvironment());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_systemEnvironment, doc_QProcess_systemEnvironment);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_processChannelMode, "QProcess.processChannelMode() -> QProcess.ProcessChannelMode");

extern "C" {static PyObject *meth_QProcess_processChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_processChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcess::ProcessChannelMode sipRes;

            sipRes = sipCpp->processChannelMode();

            return sipConvertFromEnum(sipRes,sipType_QProcess_ProcessChannelMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_processChannelMode, doc_QProcess_processChannelMode);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setProcessChannelMode, "QProcess.setProcessChannelMode(QProcess.ProcessChannelMode)");

extern "C" {static PyObject *meth_QProcess_setProcessChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProcessChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess::ProcessChannelMode a0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessChannelMode, &a0))
        {
            sipCpp->setProcessChannelMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProcessChannelMode, doc_QProcess_setProcessChannelMode);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setStandardInputFile, "QProcess.setStandardInputFile(str)");

extern "C" {static PyObject *meth_QProcess_setStandardInputFile(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardInputFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setStandardInputFile(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardInputFile, doc_QProcess_setStandardInputFile);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setStandardOutputFile, "QProcess.setStandardOutputFile(str, QIODevice.OpenMode mode=QIODevice.Truncate)");

extern "C" {static PyObject *meth_QProcess_setStandardOutputFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardOutputFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QIODevice::OpenMode a1def = QIODevice::Truncate;
        QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp->setStandardOutputFile(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardOutputFile, doc_QProcess_setStandardOutputFile);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setStandardErrorFile, "QProcess.setStandardErrorFile(str, QIODevice.OpenMode mode=QIODevice.Truncate)");

extern "C" {static PyObject *meth_QProcess_setStandardErrorFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardErrorFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QIODevice::OpenMode a1def = QIODevice::Truncate;
        QIODevice::OpenMode* a1 = &a1def;
        int a1State = 0;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State, sipType_QIODevice_OpenMode, &a1, &a1State))
        {
            sipCpp->setStandardErrorFile(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardErrorFile, doc_QProcess_setStandardErrorFile);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setStandardOutputProcess, "QProcess.setStandardOutputProcess(QProcess)");

extern "C" {static PyObject *meth_QProcess_setStandardOutputProcess(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setStandardOutputProcess(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess* a0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess, &a0))
        {
            sipCpp->setStandardOutputProcess(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setStandardOutputProcess, doc_QProcess_setStandardOutputProcess);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_terminate, "QProcess.terminate()");

extern "C" {static PyObject *meth_QProcess_terminate(PyObject *, PyObject *);}
static PyObject *meth_QProcess_terminate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            sipCpp->terminate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_terminate, doc_QProcess_terminate);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_kill, "QProcess.kill()");

extern "C" {static PyObject *meth_QProcess_kill(PyObject *, PyObject *);}
static PyObject *meth_QProcess_kill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            sipCpp->kill();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_kill, doc_QProcess_kill);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setProcessState, "QProcess.setProcessState(QProcess.ProcessState)");

extern "C" {static PyObject *meth_QProcess_setProcessState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProcessState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess::ProcessState a0;
        sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_ProcessState, &a0))
        {
            sipCpp->sipProtect_setProcessState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProcessState, doc_QProcess_setProcessState);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setupChildProcess, "QProcess.setupChildProcess()");

extern "C" {static PyObject *meth_QProcess_setupChildProcess(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_setupChildProcess(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            sipCpp->sipProtectVirt_setupChildProcess(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setupChildProcess, doc_QProcess_setupChildProcess);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_readData, "QProcess.readData(int) -> str");

extern "C" {static PyObject *meth_QProcess_readData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_readData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bn", &sipSelf, sipType_QProcess, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 139 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qprocess.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QProcess::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 2367 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQProcess.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_readData, doc_QProcess_readData);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_writeData, "QProcess.writeData(str) -> int");

extern "C" {static PyObject *meth_QProcess_writeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_writeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
        sipQProcess *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bk", &sipSelf, sipType_QProcess, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_writeData(sipSelfWasArg,a0,(PY_LONG_LONG)a1);
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_writeData, doc_QProcess_writeData);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setProcessEnvironment, "QProcess.setProcessEnvironment(QProcessEnvironment)");

extern "C" {static PyObject *meth_QProcess_setProcessEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProcessEnvironment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcessEnvironment* a0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcessEnvironment, &a0))
        {
            sipCpp->setProcessEnvironment(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProcessEnvironment, doc_QProcess_setProcessEnvironment);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_processEnvironment, "QProcess.processEnvironment() -> QProcessEnvironment");

extern "C" {static PyObject *meth_QProcess_processEnvironment(PyObject *, PyObject *);}
static PyObject *meth_QProcess_processEnvironment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcessEnvironment*sipRes;

            sipRes = new QProcessEnvironment(sipCpp->processEnvironment());

            return sipConvertFromNewType(sipRes,sipType_QProcessEnvironment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_processEnvironment, doc_QProcess_processEnvironment);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_program, "QProcess.program() -> str");

extern "C" {static PyObject *meth_QProcess_program(PyObject *, PyObject *);}
static PyObject *meth_QProcess_program(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->program());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_program, doc_QProcess_program);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setProgram, "QProcess.setProgram(str)");

extern "C" {static PyObject *meth_QProcess_setProgram(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setProgram(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setProgram, doc_QProcess_setProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_arguments, "QProcess.arguments() -> list-of-str");

extern "C" {static PyObject *meth_QProcess_arguments(PyObject *, PyObject *);}
static PyObject *meth_QProcess_arguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->arguments());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_arguments, doc_QProcess_arguments);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setArguments, "QProcess.setArguments(list-of-str)");

extern "C" {static PyObject *meth_QProcess_setArguments(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setArguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setArguments(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setArguments, doc_QProcess_setArguments);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_open, "QProcess.open(QIODevice.OpenMode mode=QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QProcess_open(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QProcess_open(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIODevice::OpenMode a0def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a0 = &a0def;
        int a0State = 0;
        QProcess *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QProcess, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QProcess::open(*a0) : sipCpp->open(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_open, doc_QProcess_open);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_inputChannelMode, "QProcess.inputChannelMode() -> QProcess.InputChannelMode");

extern "C" {static PyObject *meth_QProcess_inputChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_inputChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            QProcess::InputChannelMode sipRes;

            sipRes = sipCpp->inputChannelMode();

            return sipConvertFromEnum(sipRes,sipType_QProcess_InputChannelMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_inputChannelMode, doc_QProcess_inputChannelMode);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_setInputChannelMode, "QProcess.setInputChannelMode(QProcess.InputChannelMode)");

extern "C" {static PyObject *meth_QProcess_setInputChannelMode(PyObject *, PyObject *);}
static PyObject *meth_QProcess_setInputChannelMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QProcess::InputChannelMode a0;
        QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QProcess, &sipCpp, sipType_QProcess_InputChannelMode, &a0))
        {
            sipCpp->setInputChannelMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_setInputChannelMode, doc_QProcess_setInputChannelMode);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_nullDevice, "QProcess.nullDevice() -> str");

extern "C" {static PyObject *meth_QProcess_nullDevice(PyObject *, PyObject *);}
static PyObject *meth_QProcess_nullDevice(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            sipRes = new QString(QProcess::nullDevice());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_nullDevice, doc_QProcess_nullDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QProcess_processId, "QProcess.processId() -> int");

extern "C" {static PyObject *meth_QProcess_processId(PyObject *, PyObject *);}
static PyObject *meth_QProcess_processId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QProcess *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QProcess, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->processId();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QProcess, sipName_processId, doc_QProcess_processId);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QProcess(void *, const sipTypeDef *);}
static void *cast_QProcess(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QProcess)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QIODevice)->ctd_cast((QIODevice *)(QProcess *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QProcess(void *, int);}
static void release_QProcess(void *sipCppV,int)
{
    QProcess *sipCpp = reinterpret_cast<QProcess *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QProcess(sipSimpleWrapper *);}
static void dealloc_QProcess(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQProcess *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QProcess(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QProcess(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QProcess(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQProcess *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQProcess(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QProcess[] = {{78, 255, 1}};


static PyMethodDef methods_QProcess[] = {
    {SIP_MLNAME_CAST(sipName_arguments), meth_QProcess_arguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_arguments)},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QProcess_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_atEnd)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QProcess_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QProcess_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QProcess_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_canReadLine)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QProcess_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QProcess_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_close)},
    {SIP_MLNAME_CAST(sipName_closeReadChannel), meth_QProcess_closeReadChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_closeReadChannel)},
    {SIP_MLNAME_CAST(sipName_closeWriteChannel), meth_QProcess_closeWriteChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_closeWriteChannel)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QProcess_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QProcess_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QProcess_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QProcess_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_error)},
    {SIP_MLNAME_CAST(sipName_execute), meth_QProcess_execute, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_execute)},
    {SIP_MLNAME_CAST(sipName_exitCode), meth_QProcess_exitCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_exitCode)},
    {SIP_MLNAME_CAST(sipName_exitStatus), meth_QProcess_exitStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_exitStatus)},
    {SIP_MLNAME_CAST(sipName_inputChannelMode), meth_QProcess_inputChannelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_inputChannelMode)},
    {SIP_MLNAME_CAST(sipName_isSequential), meth_QProcess_isSequential, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_isSequential)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QProcess_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_kill), meth_QProcess_kill, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_kill)},
    {SIP_MLNAME_CAST(sipName_nullDevice), meth_QProcess_nullDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_nullDevice)},
    {SIP_MLNAME_CAST(sipName_open), (PyCFunction)meth_QProcess_open, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_open)},
    {SIP_MLNAME_CAST(sipName_pid), meth_QProcess_pid, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_pid)},
    {SIP_MLNAME_CAST(sipName_processChannelMode), meth_QProcess_processChannelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_processChannelMode)},
    {SIP_MLNAME_CAST(sipName_processEnvironment), meth_QProcess_processEnvironment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_processEnvironment)},
    {SIP_MLNAME_CAST(sipName_processId), meth_QProcess_processId, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_processId)},
    {SIP_MLNAME_CAST(sipName_program), meth_QProcess_program, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_program)},
    {SIP_MLNAME_CAST(sipName_readAllStandardError), meth_QProcess_readAllStandardError, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_readAllStandardError)},
    {SIP_MLNAME_CAST(sipName_readAllStandardOutput), meth_QProcess_readAllStandardOutput, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_readAllStandardOutput)},
    {SIP_MLNAME_CAST(sipName_readChannel), meth_QProcess_readChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_readChannel)},
    {SIP_MLNAME_CAST(sipName_readData), (PyCFunction)meth_QProcess_readData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_readData)},
    {SIP_MLNAME_CAST(sipName_readLineData), (PyCFunction)meth_QProcess_readLineData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QProcess_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QProcess_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QProcess_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setArguments), meth_QProcess_setArguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setArguments)},
    {SIP_MLNAME_CAST(sipName_setErrorString), (PyCFunction)meth_QProcess_setErrorString, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setInputChannelMode), meth_QProcess_setInputChannelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setInputChannelMode)},
    {SIP_MLNAME_CAST(sipName_setOpenMode), (PyCFunction)meth_QProcess_setOpenMode, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setProcessChannelMode), meth_QProcess_setProcessChannelMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setProcessChannelMode)},
    {SIP_MLNAME_CAST(sipName_setProcessEnvironment), meth_QProcess_setProcessEnvironment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setProcessEnvironment)},
    {SIP_MLNAME_CAST(sipName_setProcessState), (PyCFunction)meth_QProcess_setProcessState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_setProcessState)},
    {SIP_MLNAME_CAST(sipName_setProgram), meth_QProcess_setProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setProgram)},
    {SIP_MLNAME_CAST(sipName_setReadChannel), meth_QProcess_setReadChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setReadChannel)},
    {SIP_MLNAME_CAST(sipName_setStandardErrorFile), (PyCFunction)meth_QProcess_setStandardErrorFile, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_setStandardErrorFile)},
    {SIP_MLNAME_CAST(sipName_setStandardInputFile), meth_QProcess_setStandardInputFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setStandardInputFile)},
    {SIP_MLNAME_CAST(sipName_setStandardOutputFile), (PyCFunction)meth_QProcess_setStandardOutputFile, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_setStandardOutputFile)},
    {SIP_MLNAME_CAST(sipName_setStandardOutputProcess), meth_QProcess_setStandardOutputProcess, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setStandardOutputProcess)},
    {SIP_MLNAME_CAST(sipName_setWorkingDirectory), meth_QProcess_setWorkingDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_setWorkingDirectory)},
    {SIP_MLNAME_CAST(sipName_setupChildProcess), (PyCFunction)meth_QProcess_setupChildProcess, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_setupChildProcess)},
    {SIP_MLNAME_CAST(sipName_start), (PyCFunction)meth_QProcess_start, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_start)},
    {SIP_MLNAME_CAST(sipName_startDetached), (PyCFunction)meth_QProcess_startDetached, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_startDetached)},
    {SIP_MLNAME_CAST(sipName_state), meth_QProcess_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_state)},
    {SIP_MLNAME_CAST(sipName_systemEnvironment), meth_QProcess_systemEnvironment, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_systemEnvironment)},
    {SIP_MLNAME_CAST(sipName_terminate), meth_QProcess_terminate, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_terminate)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QProcess_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_waitForBytesWritten), (PyCFunction)meth_QProcess_waitForBytesWritten, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_waitForBytesWritten)},
    {SIP_MLNAME_CAST(sipName_waitForFinished), (PyCFunction)meth_QProcess_waitForFinished, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_waitForFinished)},
    {SIP_MLNAME_CAST(sipName_waitForReadyRead), (PyCFunction)meth_QProcess_waitForReadyRead, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_waitForReadyRead)},
    {SIP_MLNAME_CAST(sipName_waitForStarted), (PyCFunction)meth_QProcess_waitForStarted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_waitForStarted)},
    {SIP_MLNAME_CAST(sipName_workingDirectory), meth_QProcess_workingDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QProcess_workingDirectory)},
    {SIP_MLNAME_CAST(sipName_writeData), (PyCFunction)meth_QProcess_writeData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QProcess_writeData)}
};

static sipEnumMemberDef enummembers_QProcess[] = {
    {sipName_CrashExit, static_cast<int>(QProcess::CrashExit), 172},
    {sipName_Crashed, static_cast<int>(QProcess::Crashed), 176},
    {sipName_FailedToStart, static_cast<int>(QProcess::FailedToStart), 176},
    {sipName_ForwardedChannels, static_cast<int>(QProcess::ForwardedChannels), 175},
    {sipName_ForwardedErrorChannel, static_cast<int>(QProcess::ForwardedErrorChannel), 175},
    {sipName_ForwardedInputChannel, static_cast<int>(QProcess::ForwardedInputChannel), 173},
    {sipName_ForwardedOutputChannel, static_cast<int>(QProcess::ForwardedOutputChannel), 175},
    {sipName_ManagedInputChannel, static_cast<int>(QProcess::ManagedInputChannel), 173},
    {sipName_MergedChannels, static_cast<int>(QProcess::MergedChannels), 175},
    {sipName_NormalExit, static_cast<int>(QProcess::NormalExit), 172},
    {sipName_NotRunning, static_cast<int>(QProcess::NotRunning), 177},
    {sipName_ReadError, static_cast<int>(QProcess::ReadError), 176},
    {sipName_Running, static_cast<int>(QProcess::Running), 177},
    {sipName_SeparateChannels, static_cast<int>(QProcess::SeparateChannels), 175},
    {sipName_StandardError, static_cast<int>(QProcess::StandardError), 174},
    {sipName_StandardOutput, static_cast<int>(QProcess::StandardOutput), 174},
    {sipName_Starting, static_cast<int>(QProcess::Starting), 177},
    {sipName_Timedout, static_cast<int>(QProcess::Timedout), 176},
    {sipName_UnknownError, static_cast<int>(QProcess::UnknownError), 176},
    {sipName_WriteError, static_cast<int>(QProcess::WriteError), 176},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QProcess[] = {
    {"readyReadStandardError()", "\1QProcess.readyReadStandardError", 0, 0},
    {"readyReadStandardOutput()", "\1QProcess.readyReadStandardOutput", 0, 0},
    {"stateChanged(QProcess::ProcessState)", "\1QProcess.stateChanged[QProcess.ProcessState]", 0, 0},
    {"finished(int,QProcess::ExitStatus)", "\1QProcess.finished[int, QProcess.ExitStatus]", 0, 0},
    {"started()", "\1QProcess.started", 0, 0},
    {"error(QProcess::ProcessError)", "\1QProcess.error[QProcess.ProcessError]", &methods_QProcess[12], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QProcess, "\1QProcess(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QProcess = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QProcess,
        {0}
    },
    {
        sipNameNr_QProcess,
        {0, 0, 1},
        62, methods_QProcess,
        20, enummembers_QProcess,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QProcess,
    -1,
    -1,
    supers_QProcess,
    0,
    init_type_QProcess,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QProcess,
    0,
    0,
    0,
    release_QProcess,
    cast_QProcess,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QProcess::staticMetaObject,
    0,
    signals_QProcess,
    0
};
