/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcommandlineparser.sip"
#include <qcommandlineparser.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQCommandLineParser.cpp"

#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQCommandLineParser.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcommandlineoption.sip"
#include <qcommandlineoption.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQCommandLineParser.cpp"
#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQCommandLineParser.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQCommandLineParser.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQCommandLineParser.cpp"


PyDoc_STRVAR(doc_QCommandLineParser_setSingleDashWordOptionMode, "QCommandLineParser.setSingleDashWordOptionMode(QCommandLineParser.SingleDashWordOptionMode)");

extern "C" {static PyObject *meth_QCommandLineParser_setSingleDashWordOptionMode(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_setSingleDashWordOptionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCommandLineParser::SingleDashWordOptionMode a0;
        QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineParser_SingleDashWordOptionMode, &a0))
        {
            sipCpp->setSingleDashWordOptionMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_setSingleDashWordOptionMode, doc_QCommandLineParser_setSingleDashWordOptionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_addOption, "QCommandLineParser.addOption(QCommandLineOption) -> bool");

extern "C" {static PyObject *meth_QCommandLineParser_addOption(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCommandLineOption* a0;
        QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->addOption(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addOption, doc_QCommandLineParser_addOption);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_addVersionOption, "QCommandLineParser.addVersionOption() -> QCommandLineOption");

extern "C" {static PyObject *meth_QCommandLineParser_addVersionOption(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addVersionOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            QCommandLineOption*sipRes;

            sipRes = new QCommandLineOption(sipCpp->addVersionOption());

            return sipConvertFromNewType(sipRes,sipType_QCommandLineOption,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addVersionOption, doc_QCommandLineParser_addVersionOption);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_addHelpOption, "QCommandLineParser.addHelpOption() -> QCommandLineOption");

extern "C" {static PyObject *meth_QCommandLineParser_addHelpOption(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addHelpOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            QCommandLineOption*sipRes;

            sipRes = new QCommandLineOption(sipCpp->addHelpOption());

            return sipConvertFromNewType(sipRes,sipType_QCommandLineOption,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addHelpOption, doc_QCommandLineParser_addHelpOption);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_setApplicationDescription, "QCommandLineParser.setApplicationDescription(str)");

extern "C" {static PyObject *meth_QCommandLineParser_setApplicationDescription(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_setApplicationDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setApplicationDescription(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_setApplicationDescription, doc_QCommandLineParser_setApplicationDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_applicationDescription, "QCommandLineParser.applicationDescription() -> str");

extern "C" {static PyObject *meth_QCommandLineParser_applicationDescription(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_applicationDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->applicationDescription());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_applicationDescription, doc_QCommandLineParser_applicationDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_addPositionalArgument, "QCommandLineParser.addPositionalArgument(str, str, str syntax=QString())");

extern "C" {static PyObject *meth_QCommandLineParser_addPositionalArgument(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addPositionalArgument(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        QCommandLineParser *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_syntax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|J1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            sipCpp->addPositionalArgument(*a0,*a1,*a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addPositionalArgument, doc_QCommandLineParser_addPositionalArgument);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_clearPositionalArguments, "QCommandLineParser.clearPositionalArguments()");

extern "C" {static PyObject *meth_QCommandLineParser_clearPositionalArguments(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_clearPositionalArguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            sipCpp->clearPositionalArguments();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_clearPositionalArguments, doc_QCommandLineParser_clearPositionalArguments);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_process, "QCommandLineParser.process(list-of-str)\n"
    "QCommandLineParser.process(QCoreApplication)");

extern "C" {static PyObject *meth_QCommandLineParser_process(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_process(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->process(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QCoreApplication* a0;
        QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCoreApplication, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->process(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_process, doc_QCommandLineParser_process);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_parse, "QCommandLineParser.parse(list-of-str) -> bool");

extern "C" {static PyObject *meth_QCommandLineParser_parse(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_parse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->parse(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_parse, doc_QCommandLineParser_parse);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_errorText, "QCommandLineParser.errorText() -> str");

extern "C" {static PyObject *meth_QCommandLineParser_errorText(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_errorText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_errorText, doc_QCommandLineParser_errorText);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_isSet, "QCommandLineParser.isSet(str) -> bool\n"
    "QCommandLineParser.isSet(QCommandLineOption) -> bool");

extern "C" {static PyObject *meth_QCommandLineParser_isSet(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_isSet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->isSet(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QCommandLineOption* a0;
        const QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isSet(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_isSet, doc_QCommandLineParser_isSet);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_value, "QCommandLineParser.value(str) -> str\n"
    "QCommandLineParser.value(QCommandLineOption) -> str");

extern "C" {static PyObject *meth_QCommandLineParser_value(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->value(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QCommandLineOption* a0;
        const QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineOption, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->value(*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_value, doc_QCommandLineParser_value);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_values, "QCommandLineParser.values(str) -> list-of-str\n"
    "QCommandLineParser.values(QCommandLineOption) -> list-of-str");

extern "C" {static PyObject *meth_QCommandLineParser_values(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_values(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->values(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    {
        const QCommandLineOption* a0;
        const QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QCommandLineOption, &a0))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->values(*a0));

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_values, doc_QCommandLineParser_values);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_positionalArguments, "QCommandLineParser.positionalArguments() -> list-of-str");

extern "C" {static PyObject *meth_QCommandLineParser_positionalArguments(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_positionalArguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->positionalArguments());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_positionalArguments, doc_QCommandLineParser_positionalArguments);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_optionNames, "QCommandLineParser.optionNames() -> list-of-str");

extern "C" {static PyObject *meth_QCommandLineParser_optionNames(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_optionNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->optionNames());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_optionNames, doc_QCommandLineParser_optionNames);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_unknownOptionNames, "QCommandLineParser.unknownOptionNames() -> list-of-str");

extern "C" {static PyObject *meth_QCommandLineParser_unknownOptionNames(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_unknownOptionNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->unknownOptionNames());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_unknownOptionNames, doc_QCommandLineParser_unknownOptionNames);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_showHelp, "QCommandLineParser.showHelp(int exitCode=0)");

extern "C" {static PyObject *meth_QCommandLineParser_showHelp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_showHelp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        QCommandLineParser *sipCpp;

        static const char *sipKwdList[] = {
            sipName_exitCode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QCommandLineParser, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showHelp(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_showHelp, doc_QCommandLineParser_showHelp);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_helpText, "QCommandLineParser.helpText() -> str");

extern "C" {static PyObject *meth_QCommandLineParser_helpText(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_helpText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->helpText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_helpText, doc_QCommandLineParser_helpText);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_addOptions, "QCommandLineParser.addOptions(list-of-QCommandLineOption) -> bool");

extern "C" {static PyObject *meth_QCommandLineParser_addOptions(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_addOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QCommandLineOption>* a0;
        int a0State = 0;
        QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCommandLineParser, &sipCpp, sipType_QList_0100QCommandLineOption,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->addOptions(*a0);
            sipReleaseType(const_cast<QList<QCommandLineOption> *>(a0),sipType_QList_0100QCommandLineOption,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_addOptions, doc_QCommandLineParser_addOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QCommandLineParser_showVersion, "QCommandLineParser.showVersion()");

extern "C" {static PyObject *meth_QCommandLineParser_showVersion(PyObject *, PyObject *);}
static PyObject *meth_QCommandLineParser_showVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCommandLineParser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCommandLineParser, &sipCpp))
        {
            sipCpp->showVersion();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommandLineParser, sipName_showVersion, doc_QCommandLineParser_showVersion);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QCommandLineParser(void *, const sipTypeDef *);}
static void *cast_QCommandLineParser(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QCommandLineParser)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCommandLineParser(void *, int);}
static void release_QCommandLineParser(void *sipCppV,int)
{
    delete reinterpret_cast<QCommandLineParser *>(sipCppV);
}


extern "C" {static void dealloc_QCommandLineParser(sipSimpleWrapper *);}
static void dealloc_QCommandLineParser(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QCommandLineParser(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QCommandLineParser(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCommandLineParser(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QCommandLineParser *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QCommandLineParser();

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QCommandLineParser[] = {
    {SIP_MLNAME_CAST(sipName_addHelpOption), meth_QCommandLineParser_addHelpOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_addHelpOption)},
    {SIP_MLNAME_CAST(sipName_addOption), meth_QCommandLineParser_addOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_addOption)},
    {SIP_MLNAME_CAST(sipName_addOptions), meth_QCommandLineParser_addOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_addOptions)},
    {SIP_MLNAME_CAST(sipName_addPositionalArgument), (PyCFunction)meth_QCommandLineParser_addPositionalArgument, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommandLineParser_addPositionalArgument)},
    {SIP_MLNAME_CAST(sipName_addVersionOption), meth_QCommandLineParser_addVersionOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_addVersionOption)},
    {SIP_MLNAME_CAST(sipName_applicationDescription), meth_QCommandLineParser_applicationDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_applicationDescription)},
    {SIP_MLNAME_CAST(sipName_clearPositionalArguments), meth_QCommandLineParser_clearPositionalArguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_clearPositionalArguments)},
    {SIP_MLNAME_CAST(sipName_errorText), meth_QCommandLineParser_errorText, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_errorText)},
    {SIP_MLNAME_CAST(sipName_helpText), meth_QCommandLineParser_helpText, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_helpText)},
    {SIP_MLNAME_CAST(sipName_isSet), meth_QCommandLineParser_isSet, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_isSet)},
    {SIP_MLNAME_CAST(sipName_optionNames), meth_QCommandLineParser_optionNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_optionNames)},
    {SIP_MLNAME_CAST(sipName_parse), meth_QCommandLineParser_parse, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_parse)},
    {SIP_MLNAME_CAST(sipName_positionalArguments), meth_QCommandLineParser_positionalArguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_positionalArguments)},
    {SIP_MLNAME_CAST(sipName_process), meth_QCommandLineParser_process, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_process)},
    {SIP_MLNAME_CAST(sipName_setApplicationDescription), meth_QCommandLineParser_setApplicationDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_setApplicationDescription)},
    {SIP_MLNAME_CAST(sipName_setSingleDashWordOptionMode), meth_QCommandLineParser_setSingleDashWordOptionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_setSingleDashWordOptionMode)},
    {SIP_MLNAME_CAST(sipName_showHelp), (PyCFunction)meth_QCommandLineParser_showHelp, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommandLineParser_showHelp)},
    {SIP_MLNAME_CAST(sipName_showVersion), meth_QCommandLineParser_showVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_showVersion)},
    {SIP_MLNAME_CAST(sipName_unknownOptionNames), meth_QCommandLineParser_unknownOptionNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_unknownOptionNames)},
    {SIP_MLNAME_CAST(sipName_value), meth_QCommandLineParser_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_value)},
    {SIP_MLNAME_CAST(sipName_values), meth_QCommandLineParser_values, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommandLineParser_values)}
};

static sipEnumMemberDef enummembers_QCommandLineParser[] = {
    {sipName_ParseAsCompactedShortOptions, static_cast<int>(QCommandLineParser::ParseAsCompactedShortOptions), 28},
    {sipName_ParseAsLongOptions, static_cast<int>(QCommandLineParser::ParseAsLongOptions), 28},
};

PyDoc_STRVAR(doc_QCommandLineParser, "\1QCommandLineParser()");


pyqt5ClassTypeDef sipTypeDef_QtCore_QCommandLineParser = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QCommandLineParser,
        {0}
    },
    {
        sipNameNr_QCommandLineParser,
        {0, 0, 1},
        21, methods_QCommandLineParser,
        2, enummembers_QCommandLineParser,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QCommandLineParser,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QCommandLineParser,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCommandLineParser,
    0,
    0,
    0,
    release_QCommandLineParser,
    cast_QCommandLineParser,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
