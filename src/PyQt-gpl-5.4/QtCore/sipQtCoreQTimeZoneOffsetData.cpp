/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:21 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qtimezone.sip"
#include <qtimezone.h>
#line 31 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeZoneOffsetData.cpp"

#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 35 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeZoneOffsetData.cpp"
#line 299 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 38 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTimeZoneOffsetData.cpp"


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTimeZone_OffsetData(void *, const sipTypeDef *);}
static void *cast_QTimeZone_OffsetData(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTimeZone_OffsetData)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTimeZone_OffsetData(void *, int);}
static void release_QTimeZone_OffsetData(void *sipCppV,int)
{
    delete reinterpret_cast<QTimeZone::OffsetData *>(sipCppV);
}


extern "C" {static void assign_QTimeZone_OffsetData(void *, SIP_SSIZE_T, const void *);}
static void assign_QTimeZone_OffsetData(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTimeZone::OffsetData *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTimeZone::OffsetData *>(sipSrc);
}


extern "C" {static void *array_QTimeZone_OffsetData(SIP_SSIZE_T);}
static void *array_QTimeZone_OffsetData(SIP_SSIZE_T sipNrElem)
{
    return new QTimeZone::OffsetData[sipNrElem];
}


extern "C" {static void *copy_QTimeZone_OffsetData(const void *, SIP_SSIZE_T);}
static void *copy_QTimeZone_OffsetData(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTimeZone::OffsetData(reinterpret_cast<const QTimeZone::OffsetData *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTimeZone_OffsetData(sipSimpleWrapper *);}
static void dealloc_QTimeZone_OffsetData(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTimeZone_OffsetData(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTimeZone_OffsetData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTimeZone_OffsetData(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTimeZone::OffsetData *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QTimeZone::OffsetData();

            return sipCpp;
        }
    }

    {
        const QTimeZone::OffsetData* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTimeZone_OffsetData, &a0))
        {
            sipCpp = new QTimeZone::OffsetData(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static PyObject *varget_QTimeZone_OffsetData_abbreviation(void *, PyObject *, PyObject *);}
static PyObject *varget_QTimeZone_OffsetData_abbreviation(void *sipSelf, PyObject *, PyObject *)
{
    QString*sipVal;
    QTimeZone::OffsetData *sipCpp = reinterpret_cast<QTimeZone::OffsetData *>(sipSelf);

    sipVal = &sipCpp->abbreviation;

    return sipConvertFromType(sipVal, sipType_QString, NULL);
}


extern "C" {static int varset_QTimeZone_OffsetData_abbreviation(void *, PyObject *, PyObject *);}
static int varset_QTimeZone_OffsetData_abbreviation(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QString*sipVal;
    QTimeZone::OffsetData *sipCpp = reinterpret_cast<QTimeZone::OffsetData *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QString *>(sipForceConvertToType(sipPy,sipType_QString,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->abbreviation = *sipVal;

    sipReleaseType(sipVal, sipType_QString, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_QTimeZone_OffsetData_atUtc(void *, PyObject *, PyObject *);}
static PyObject *varget_QTimeZone_OffsetData_atUtc(void *sipSelf, PyObject *sipPySelf, PyObject *)
{
    PyObject *sipPy;
    QDateTime*sipVal;
    QTimeZone::OffsetData *sipCpp = reinterpret_cast<QTimeZone::OffsetData *>(sipSelf);

    sipVal = &sipCpp->atUtc;

    sipPy = sipConvertFromType(sipVal, sipType_QDateTime, NULL);
    sipKeepReference(sipPy, -1, sipPySelf);

    return sipPy;
}


extern "C" {static int varset_QTimeZone_OffsetData_atUtc(void *, PyObject *, PyObject *);}
static int varset_QTimeZone_OffsetData_atUtc(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QDateTime*sipVal;
    QTimeZone::OffsetData *sipCpp = reinterpret_cast<QTimeZone::OffsetData *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QDateTime *>(sipForceConvertToType(sipPy,sipType_QDateTime,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->atUtc = *sipVal;

    sipReleaseType(sipVal, sipType_QDateTime, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_QTimeZone_OffsetData_daylightTimeOffset(void *, PyObject *, PyObject *);}
static PyObject *varget_QTimeZone_OffsetData_daylightTimeOffset(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
    QTimeZone::OffsetData *sipCpp = reinterpret_cast<QTimeZone::OffsetData *>(sipSelf);

    sipVal = sipCpp->daylightTimeOffset;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QTimeZone_OffsetData_daylightTimeOffset(void *, PyObject *, PyObject *);}
static int varset_QTimeZone_OffsetData_daylightTimeOffset(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    QTimeZone::OffsetData *sipCpp = reinterpret_cast<QTimeZone::OffsetData *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->daylightTimeOffset = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QTimeZone_OffsetData_offsetFromUtc(void *, PyObject *, PyObject *);}
static PyObject *varget_QTimeZone_OffsetData_offsetFromUtc(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
    QTimeZone::OffsetData *sipCpp = reinterpret_cast<QTimeZone::OffsetData *>(sipSelf);

    sipVal = sipCpp->offsetFromUtc;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QTimeZone_OffsetData_offsetFromUtc(void *, PyObject *, PyObject *);}
static int varset_QTimeZone_OffsetData_offsetFromUtc(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    QTimeZone::OffsetData *sipCpp = reinterpret_cast<QTimeZone::OffsetData *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->offsetFromUtc = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_QTimeZone_OffsetData_standardTimeOffset(void *, PyObject *, PyObject *);}
static PyObject *varget_QTimeZone_OffsetData_standardTimeOffset(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
    QTimeZone::OffsetData *sipCpp = reinterpret_cast<QTimeZone::OffsetData *>(sipSelf);

    sipVal = sipCpp->standardTimeOffset;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_QTimeZone_OffsetData_standardTimeOffset(void *, PyObject *, PyObject *);}
static int varset_QTimeZone_OffsetData_standardTimeOffset(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
    QTimeZone::OffsetData *sipCpp = reinterpret_cast<QTimeZone::OffsetData *>(sipSelf);

    sipVal = (int)SIPLong_AsLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->standardTimeOffset = sipVal;

    return 0;
}

sipVariableDef variables_QTimeZone_OffsetData[] = {
    {InstanceVariable, sipName_abbreviation, (PyMethodDef *)varget_QTimeZone_OffsetData_abbreviation, (PyMethodDef *)varset_QTimeZone_OffsetData_abbreviation, NULL, NULL},
    {InstanceVariable, sipName_atUtc, (PyMethodDef *)varget_QTimeZone_OffsetData_atUtc, (PyMethodDef *)varset_QTimeZone_OffsetData_atUtc, NULL, NULL},
    {InstanceVariable, sipName_daylightTimeOffset, (PyMethodDef *)varget_QTimeZone_OffsetData_daylightTimeOffset, (PyMethodDef *)varset_QTimeZone_OffsetData_daylightTimeOffset, NULL, NULL},
    {InstanceVariable, sipName_offsetFromUtc, (PyMethodDef *)varget_QTimeZone_OffsetData_offsetFromUtc, (PyMethodDef *)varset_QTimeZone_OffsetData_offsetFromUtc, NULL, NULL},
    {InstanceVariable, sipName_standardTimeOffset, (PyMethodDef *)varget_QTimeZone_OffsetData_standardTimeOffset, (PyMethodDef *)varset_QTimeZone_OffsetData_standardTimeOffset, NULL, NULL},
};

PyDoc_STRVAR(doc_QTimeZone_OffsetData, "\1QTimeZone.OffsetData()\n"
    "QTimeZone.OffsetData(QTimeZone.OffsetData)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QTimeZone_OffsetData = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTimeZone__OffsetData,
        {0}
    },
    {
        sipNameNr_OffsetData,
        {268, 255, 0},
        0, 0,
        0, 0,
        5, variables_QTimeZone_OffsetData,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTimeZone_OffsetData,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QTimeZone_OffsetData,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTimeZone_OffsetData,
    assign_QTimeZone_OffsetData,
    array_QTimeZone_OffsetData,
    copy_QTimeZone_OffsetData,
    release_QTimeZone_OffsetData,
    cast_QTimeZone_OffsetData,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
