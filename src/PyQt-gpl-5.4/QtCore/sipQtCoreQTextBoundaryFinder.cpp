/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qtextboundaryfinder.sip"
#include <qtextboundaryfinder.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTextBoundaryFinder.cpp"

#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTextBoundaryFinder.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qtextboundaryfinder.sip"
#include <qtextboundaryfinder.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTextBoundaryFinder.cpp"


PyDoc_STRVAR(doc_QTextBoundaryFinder_isValid, "QTextBoundaryFinder.isValid() -> bool");

extern "C" {static PyObject *meth_QTextBoundaryFinder_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_isValid, doc_QTextBoundaryFinder_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_type, "QTextBoundaryFinder.type() -> QTextBoundaryFinder.BoundaryType");

extern "C" {static PyObject *meth_QTextBoundaryFinder_type(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            QTextBoundaryFinder::BoundaryType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(sipRes,sipType_QTextBoundaryFinder_BoundaryType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_type, doc_QTextBoundaryFinder_type);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_string, "QTextBoundaryFinder.string() -> str");

extern "C" {static PyObject *meth_QTextBoundaryFinder_string(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_string(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->string());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_string, doc_QTextBoundaryFinder_string);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_toStart, "QTextBoundaryFinder.toStart()");

extern "C" {static PyObject *meth_QTextBoundaryFinder_toStart(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_toStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            sipCpp->toStart();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_toStart, doc_QTextBoundaryFinder_toStart);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_toEnd, "QTextBoundaryFinder.toEnd()");

extern "C" {static PyObject *meth_QTextBoundaryFinder_toEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_toEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            sipCpp->toEnd();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_toEnd, doc_QTextBoundaryFinder_toEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_position, "QTextBoundaryFinder.position() -> int");

extern "C" {static PyObject *meth_QTextBoundaryFinder_position(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->position();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_position, doc_QTextBoundaryFinder_position);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_setPosition, "QTextBoundaryFinder.setPosition(int)");

extern "C" {static PyObject *meth_QTextBoundaryFinder_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp, &a0))
        {
            sipCpp->setPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_setPosition, doc_QTextBoundaryFinder_setPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_toNextBoundary, "QTextBoundaryFinder.toNextBoundary() -> int");

extern "C" {static PyObject *meth_QTextBoundaryFinder_toNextBoundary(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_toNextBoundary(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->toNextBoundary();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_toNextBoundary, doc_QTextBoundaryFinder_toNextBoundary);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_toPreviousBoundary, "QTextBoundaryFinder.toPreviousBoundary() -> int");

extern "C" {static PyObject *meth_QTextBoundaryFinder_toPreviousBoundary(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_toPreviousBoundary(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->toPreviousBoundary();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_toPreviousBoundary, doc_QTextBoundaryFinder_toPreviousBoundary);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_isAtBoundary, "QTextBoundaryFinder.isAtBoundary() -> bool");

extern "C" {static PyObject *meth_QTextBoundaryFinder_isAtBoundary(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_isAtBoundary(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAtBoundary();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_isAtBoundary, doc_QTextBoundaryFinder_isAtBoundary);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBoundaryFinder_boundaryReasons, "QTextBoundaryFinder.boundaryReasons() -> QTextBoundaryFinder.BoundaryReasons");

extern "C" {static PyObject *meth_QTextBoundaryFinder_boundaryReasons(PyObject *, PyObject *);}
static PyObject *meth_QTextBoundaryFinder_boundaryReasons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBoundaryFinder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBoundaryFinder, &sipCpp))
        {
            QTextBoundaryFinder::BoundaryReasons*sipRes;

            sipRes = new QTextBoundaryFinder::BoundaryReasons(sipCpp->boundaryReasons());

            return sipConvertFromNewType(sipRes,sipType_QTextBoundaryFinder_BoundaryReasons,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBoundaryFinder, sipName_boundaryReasons, doc_QTextBoundaryFinder_boundaryReasons);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextBoundaryFinder(void *, const sipTypeDef *);}
static void *cast_QTextBoundaryFinder(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTextBoundaryFinder)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextBoundaryFinder(void *, int);}
static void release_QTextBoundaryFinder(void *sipCppV,int)
{
    delete reinterpret_cast<QTextBoundaryFinder *>(sipCppV);
}


extern "C" {static void assign_QTextBoundaryFinder(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextBoundaryFinder(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextBoundaryFinder *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextBoundaryFinder *>(sipSrc);
}


extern "C" {static void *array_QTextBoundaryFinder(SIP_SSIZE_T);}
static void *array_QTextBoundaryFinder(SIP_SSIZE_T sipNrElem)
{
    return new QTextBoundaryFinder[sipNrElem];
}


extern "C" {static void *copy_QTextBoundaryFinder(const void *, SIP_SSIZE_T);}
static void *copy_QTextBoundaryFinder(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextBoundaryFinder(reinterpret_cast<const QTextBoundaryFinder *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextBoundaryFinder(sipSimpleWrapper *);}
static void dealloc_QTextBoundaryFinder(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextBoundaryFinder(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTextBoundaryFinder(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextBoundaryFinder(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextBoundaryFinder *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QTextBoundaryFinder();

            return sipCpp;
        }
    }

    {
        const QTextBoundaryFinder* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextBoundaryFinder, &a0))
        {
            sipCpp = new QTextBoundaryFinder(*a0);

            return sipCpp;
        }
    }

    {
        QTextBoundaryFinder::BoundaryType a0;
        const QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "EJ1", sipType_QTextBoundaryFinder_BoundaryType, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp = new QTextBoundaryFinder(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QTextBoundaryFinder[] = {
    {SIP_MLNAME_CAST(sipName_boundaryReasons), meth_QTextBoundaryFinder_boundaryReasons, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_boundaryReasons)},
    {SIP_MLNAME_CAST(sipName_isAtBoundary), meth_QTextBoundaryFinder_isAtBoundary, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_isAtBoundary)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextBoundaryFinder_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_isValid)},
    {SIP_MLNAME_CAST(sipName_position), meth_QTextBoundaryFinder_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_position)},
    {SIP_MLNAME_CAST(sipName_setPosition), meth_QTextBoundaryFinder_setPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_setPosition)},
    {SIP_MLNAME_CAST(sipName_string), meth_QTextBoundaryFinder_string, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_string)},
    {SIP_MLNAME_CAST(sipName_toEnd), meth_QTextBoundaryFinder_toEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_toEnd)},
    {SIP_MLNAME_CAST(sipName_toNextBoundary), meth_QTextBoundaryFinder_toNextBoundary, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_toNextBoundary)},
    {SIP_MLNAME_CAST(sipName_toPreviousBoundary), meth_QTextBoundaryFinder_toPreviousBoundary, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_toPreviousBoundary)},
    {SIP_MLNAME_CAST(sipName_toStart), meth_QTextBoundaryFinder_toStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_toStart)},
    {SIP_MLNAME_CAST(sipName_type), meth_QTextBoundaryFinder_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBoundaryFinder_type)}
};

static sipEnumMemberDef enummembers_QTextBoundaryFinder[] = {
    {sipName_BreakOpportunity, static_cast<int>(QTextBoundaryFinder::BreakOpportunity), 244},
    {sipName_EndOfItem, static_cast<int>(QTextBoundaryFinder::EndOfItem), 244},
    {sipName_Grapheme, static_cast<int>(QTextBoundaryFinder::Grapheme), 246},
    {sipName_Line, static_cast<int>(QTextBoundaryFinder::Line), 246},
    {sipName_MandatoryBreak, static_cast<int>(QTextBoundaryFinder::MandatoryBreak), 244},
    {sipName_NotAtBoundary, static_cast<int>(QTextBoundaryFinder::NotAtBoundary), 244},
    {sipName_Sentence, static_cast<int>(QTextBoundaryFinder::Sentence), 246},
    {sipName_SoftHyphen, static_cast<int>(QTextBoundaryFinder::SoftHyphen), 244},
    {sipName_StartOfItem, static_cast<int>(QTextBoundaryFinder::StartOfItem), 244},
    {sipName_Word, static_cast<int>(QTextBoundaryFinder::Word), 246},
};

PyDoc_STRVAR(doc_QTextBoundaryFinder, "\1QTextBoundaryFinder()\n"
    "QTextBoundaryFinder(QTextBoundaryFinder)\n"
    "QTextBoundaryFinder(QTextBoundaryFinder.BoundaryType, str)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QTextBoundaryFinder = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTextBoundaryFinder,
        {0}
    },
    {
        sipNameNr_QTextBoundaryFinder,
        {0, 0, 1},
        11, methods_QTextBoundaryFinder,
        10, enummembers_QTextBoundaryFinder,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextBoundaryFinder,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QTextBoundaryFinder,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextBoundaryFinder,
    assign_QTextBoundaryFinder,
    array_QTextBoundaryFinder,
    copy_QTextBoundaryFinder,
    release_QTextBoundaryFinder,
    cast_QTextBoundaryFinder,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
