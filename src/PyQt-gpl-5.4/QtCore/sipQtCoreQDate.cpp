/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQDate.cpp"

#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQDate.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQDate.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qdatetime.sip"
#include <QHash>
#include <datetime.h>
#line 40 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQDate.cpp"


PyDoc_STRVAR(doc_QDate_toPyDate, "QDate.toPyDate() -> datetime.date");

extern "C" {static PyObject *meth_QDate_toPyDate(PyObject *, PyObject *);}
static PyObject *meth_QDate_toPyDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            PyObject * sipRes = 0;

#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qdatetime.sip"
        if (!PyDateTimeAPI)
            PyDateTime_IMPORT;
        
        // Convert to a Python date object.
        sipRes = PyDate_FromDate(sipCpp->year(), sipCpp->month(), sipCpp->day());
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQDate.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_toPyDate, doc_QDate_toPyDate);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_isNull, "QDate.isNull() -> bool");

extern "C" {static PyObject *meth_QDate_isNull(PyObject *, PyObject *);}
static PyObject *meth_QDate_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_isNull, doc_QDate_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_isValid, "QDate.isValid() -> bool\n"
    "QDate.isValid(int, int, int) -> bool");

extern "C" {static PyObject *meth_QDate_isValid(PyObject *, PyObject *);}
static PyObject *meth_QDate_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "iii", &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes = QDate::isValid(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_isValid, doc_QDate_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_year, "QDate.year() -> int");

extern "C" {static PyObject *meth_QDate_year(PyObject *, PyObject *);}
static PyObject *meth_QDate_year(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->year();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_year, doc_QDate_year);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_month, "QDate.month() -> int");

extern "C" {static PyObject *meth_QDate_month(PyObject *, PyObject *);}
static PyObject *meth_QDate_month(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->month();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_month, doc_QDate_month);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_day, "QDate.day() -> int");

extern "C" {static PyObject *meth_QDate_day(PyObject *, PyObject *);}
static PyObject *meth_QDate_day(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->day();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_day, doc_QDate_day);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_dayOfWeek, "QDate.dayOfWeek() -> int");

extern "C" {static PyObject *meth_QDate_dayOfWeek(PyObject *, PyObject *);}
static PyObject *meth_QDate_dayOfWeek(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dayOfWeek();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_dayOfWeek, doc_QDate_dayOfWeek);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_dayOfYear, "QDate.dayOfYear() -> int");

extern "C" {static PyObject *meth_QDate_dayOfYear(PyObject *, PyObject *);}
static PyObject *meth_QDate_dayOfYear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dayOfYear();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_dayOfYear, doc_QDate_dayOfYear);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_daysInMonth, "QDate.daysInMonth() -> int");

extern "C" {static PyObject *meth_QDate_daysInMonth(PyObject *, PyObject *);}
static PyObject *meth_QDate_daysInMonth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->daysInMonth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_daysInMonth, doc_QDate_daysInMonth);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_daysInYear, "QDate.daysInYear() -> int");

extern "C" {static PyObject *meth_QDate_daysInYear(PyObject *, PyObject *);}
static PyObject *meth_QDate_daysInYear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->daysInYear();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_daysInYear, doc_QDate_daysInYear);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_weekNumber, "QDate.weekNumber() -> (int, int)");

extern "C" {static PyObject *meth_QDate_weekNumber(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_weekNumber(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QDate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->weekNumber(&a0);

            return sipBuildResult(0,"(ii)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_weekNumber, doc_QDate_weekNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_shortMonthName, "QDate.shortMonthName(int, QDate.MonthNameType type=QDate.DateFormat) -> str");

extern "C" {static PyObject *meth_QDate_shortMonthName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_shortMonthName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDate::MonthNameType a1 = QDate::DateFormat;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "i|E", &a0, sipType_QDate_MonthNameType, &a1))
        {
            QString*sipRes;

            sipRes = new QString(QDate::shortMonthName(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_shortMonthName, doc_QDate_shortMonthName);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_shortDayName, "QDate.shortDayName(int, QDate.MonthNameType type=QDate.DateFormat) -> str");

extern "C" {static PyObject *meth_QDate_shortDayName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_shortDayName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDate::MonthNameType a1 = QDate::DateFormat;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "i|E", &a0, sipType_QDate_MonthNameType, &a1))
        {
            QString*sipRes;

            sipRes = new QString(QDate::shortDayName(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_shortDayName, doc_QDate_shortDayName);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_longMonthName, "QDate.longMonthName(int, QDate.MonthNameType type=QDate.DateFormat) -> str");

extern "C" {static PyObject *meth_QDate_longMonthName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_longMonthName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDate::MonthNameType a1 = QDate::DateFormat;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "i|E", &a0, sipType_QDate_MonthNameType, &a1))
        {
            QString*sipRes;

            sipRes = new QString(QDate::longMonthName(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_longMonthName, doc_QDate_longMonthName);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_longDayName, "QDate.longDayName(int, QDate.MonthNameType type=QDate.DateFormat) -> str");

extern "C" {static PyObject *meth_QDate_longDayName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_longDayName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QDate::MonthNameType a1 = QDate::DateFormat;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "i|E", &a0, sipType_QDate_MonthNameType, &a1))
        {
            QString*sipRes;

            sipRes = new QString(QDate::longDayName(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_longDayName, doc_QDate_longDayName);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_toString, "QDate.toString(Qt.DateFormat format=Qt.TextDate) -> str\n"
    "QDate.toString(str) -> str");

extern "C" {static PyObject *meth_QDate_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::DateFormat a0 = Qt::TextDate;
        const QDate *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QDate, &sipCpp, sipType_Qt_DateFormat, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QDate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QDate, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toString(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_toString, doc_QDate_toString);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_addDays, "QDate.addDays(int) -> QDate");

extern "C" {static PyObject *meth_QDate_addDays(PyObject *, PyObject *);}
static PyObject *meth_QDate_addDays(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QDate, &sipCpp, &a0))
        {
            QDate*sipRes;

            sipRes = new QDate(sipCpp->addDays(a0));

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_addDays, doc_QDate_addDays);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_addMonths, "QDate.addMonths(int) -> QDate");

extern "C" {static PyObject *meth_QDate_addMonths(PyObject *, PyObject *);}
static PyObject *meth_QDate_addMonths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDate, &sipCpp, &a0))
        {
            QDate*sipRes;

            sipRes = new QDate(sipCpp->addMonths(a0));

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_addMonths, doc_QDate_addMonths);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_addYears, "QDate.addYears(int) -> QDate");

extern "C" {static PyObject *meth_QDate_addYears(PyObject *, PyObject *);}
static PyObject *meth_QDate_addYears(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDate, &sipCpp, &a0))
        {
            QDate*sipRes;

            sipRes = new QDate(sipCpp->addYears(a0));

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_addYears, doc_QDate_addYears);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_daysTo, "QDate.daysTo(QDate) -> int");

extern "C" {static PyObject *meth_QDate_daysTo(PyObject *, PyObject *);}
static PyObject *meth_QDate_daysTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate* a0;
        int a0State = 0;
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDate, &sipCpp, sipType_QDate, &a0, &a0State))
        {
            qint64 sipRes;

            sipRes = sipCpp->daysTo(*a0);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_daysTo, doc_QDate_daysTo);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_currentDate, "QDate.currentDate() -> QDate");

extern "C" {static PyObject *meth_QDate_currentDate(PyObject *, PyObject *);}
static PyObject *meth_QDate_currentDate(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QDate*sipRes;

            sipRes = new QDate(QDate::currentDate());

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_currentDate, doc_QDate_currentDate);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_fromString, "QDate.fromString(str, Qt.DateFormat format=Qt.TextDate) -> QDate\n"
    "QDate.fromString(str, str) -> QDate");

extern "C" {static PyObject *meth_QDate_fromString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDate_fromString(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Qt::DateFormat a1 = Qt::TextDate;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|E", sipType_QString,&a0, &a0State, sipType_Qt_DateFormat, &a1))
        {
            QDate*sipRes;

            sipRes = new QDate(QDate::fromString(*a0,a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QDate*sipRes;

            sipRes = new QDate(QDate::fromString(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_fromString, doc_QDate_fromString);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_isLeapYear, "QDate.isLeapYear(int) -> bool");

extern "C" {static PyObject *meth_QDate_isLeapYear(PyObject *, PyObject *);}
static PyObject *meth_QDate_isLeapYear(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "i", &a0))
        {
            bool sipRes;

            sipRes = QDate::isLeapYear(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_isLeapYear, doc_QDate_isLeapYear);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_fromJulianDay, "QDate.fromJulianDay(int) -> QDate");

extern "C" {static PyObject *meth_QDate_fromJulianDay(PyObject *, PyObject *);}
static PyObject *meth_QDate_fromJulianDay(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "n", &a0))
        {
            QDate*sipRes;

            sipRes = new QDate(QDate::fromJulianDay(a0));

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_fromJulianDay, doc_QDate_fromJulianDay);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_toJulianDay, "QDate.toJulianDay() -> int");

extern "C" {static PyObject *meth_QDate_toJulianDay(PyObject *, PyObject *);}
static PyObject *meth_QDate_toJulianDay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->toJulianDay();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_toJulianDay, doc_QDate_toJulianDay);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_setDate, "QDate.setDate(int, int, int) -> bool");

extern "C" {static PyObject *meth_QDate_setDate(PyObject *, PyObject *);}
static PyObject *meth_QDate_setDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_QDate, &sipCpp, &a0, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->setDate(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_setDate, doc_QDate_setDate);

    return NULL;
}


PyDoc_STRVAR(doc_QDate_getDate, "QDate.getDate() -> (int, int, int)");

extern "C" {static PyObject *meth_QDate_getDate(PyObject *, PyObject *);}
static PyObject *meth_QDate_getDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        QDate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDate, &sipCpp))
        {
            sipCpp->getDate(&a0,&a1,&a2);

            return sipBuildResult(0,"(iii)",a0,a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDate, sipName_getDate, doc_QDate_getDate);

    return NULL;
}


extern "C" {static PyObject *slot_QDate___ge__(PyObject *,PyObject *);}
static PyObject *slot_QDate___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QDate *sipCpp = reinterpret_cast<QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDate* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDate, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->QDate::operator>=(*a0);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ge_slot,sipType_QDate,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QDate___gt__(PyObject *,PyObject *);}
static PyObject *slot_QDate___gt__(PyObject *sipSelf,PyObject *sipArg)
{
    QDate *sipCpp = reinterpret_cast<QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDate* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDate, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->QDate::operator>(*a0);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,gt_slot,sipType_QDate,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QDate___le__(PyObject *,PyObject *);}
static PyObject *slot_QDate___le__(PyObject *sipSelf,PyObject *sipArg)
{
    QDate *sipCpp = reinterpret_cast<QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDate* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDate, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->QDate::operator<=(*a0);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,le_slot,sipType_QDate,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QDate___lt__(PyObject *,PyObject *);}
static PyObject *slot_QDate___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QDate *sipCpp = reinterpret_cast<QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDate* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDate, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->QDate::operator<(*a0);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,lt_slot,sipType_QDate,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QDate___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDate___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QDate *sipCpp = reinterpret_cast<QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDate* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDate, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->QDate::operator!=(*a0);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QDate,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QDate___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDate___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QDate *sipCpp = reinterpret_cast<QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDate* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QDate, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->QDate::operator==(*a0);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QDate,sipSelf,sipArg);
}


extern "C" {static int slot_QDate___bool__(PyObject *);}
static int slot_QDate___bool__(PyObject *sipSelf)
{
    QDate *sipCpp = reinterpret_cast<QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 109 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qdatetime.sip"
        sipRes = !sipCpp->isNull();
#line 1095 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQDate.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static long slot_QDate___hash__(PyObject *);}
static long slot_QDate___hash__(PyObject *sipSelf)
{
    QDate *sipCpp = reinterpret_cast<QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 94 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qdatetime.sip"
        sipRes = qHash(sipCpp->toString(Qt::ISODate));
#line 1120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQDate.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QDate___repr__(PyObject *);}
static PyObject *slot_QDate___repr__(PyObject *sipSelf)
{
    QDate *sipCpp = reinterpret_cast<QDate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDate));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 71 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qdatetime.sip"
        if (sipCpp->isNull())
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromString("PyQt5.QtCore.QDate()");
        #else
            sipRes = PyString_FromString("PyQt5.QtCore.QDate()");
        #endif
        }
        else
        {
            sipRes =
        #if PY_MAJOR_VERSION >= 3
                PyUnicode_FromFormat
        #else
                PyString_FromFormat
        #endif
                    ("PyQt5.QtCore.QDate(%i, %i, %i)", sipCpp->year(),
                    sipCpp->month(), sipCpp->day());
        }
#line 1163 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQDate.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDate(void *, const sipTypeDef *);}
static void *cast_QDate(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDate)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDate(void *, int);}
static void release_QDate(void *sipCppV,int)
{
    delete reinterpret_cast<QDate *>(sipCppV);
}


extern "C" {static PyObject *pickle_QDate(void *);}
static PyObject *pickle_QDate(void *sipCppV)
{
    QDate *sipCpp = reinterpret_cast<QDate *>(sipCppV);
    PyObject *sipRes;

#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qdatetime.sip"
    sipRes = Py_BuildValue((char *)"iii", sipCpp->year(), sipCpp->month(), sipCpp->day());
#line 1200 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQDate.cpp"

    return sipRes;
}


extern "C" {static void assign_QDate(void *, SIP_SSIZE_T, const void *);}
static void assign_QDate(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDate *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDate *>(sipSrc);
}


extern "C" {static void *array_QDate(SIP_SSIZE_T);}
static void *array_QDate(SIP_SSIZE_T sipNrElem)
{
    return new QDate[sipNrElem];
}


extern "C" {static void *copy_QDate(const void *, SIP_SSIZE_T);}
static void *copy_QDate(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDate(reinterpret_cast<const QDate *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDate(sipSimpleWrapper *);}
static void dealloc_QDate(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDate(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QDate(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDate(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QDate *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QDate();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "iii", &a0, &a1, &a2))
        {
            sipCpp = new QDate(a0,a1,a2);

            return sipCpp;
        }
    }

    {
        const QDate* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QDate, &a0, &a0State))
        {
            sipCpp = new QDate(*a0);
            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static int convertTo_QDate(PyObject *, void **, int *, PyObject *);}
static int convertTo_QDate(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QDate **sipCppPtr = reinterpret_cast<QDate **>(sipCppPtrV);

#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qdatetime.sip"
if (!PyDateTimeAPI)
    PyDateTime_IMPORT;

// Allow a Python date object whenever a QDate is expected.

if (sipIsErr == NULL)
    return (PyDate_Check(sipPy) ||
            sipCanConvertToType(sipPy, sipType_QDate, SIP_NO_CONVERTORS));

if (PyDate_Check(sipPy))
{
    *sipCppPtr = new QDate(PyDateTime_GET_YEAR(sipPy),
                           PyDateTime_GET_MONTH(sipPy),
                           PyDateTime_GET_DAY(sipPy));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QDate *>(sipConvertToType(sipPy, sipType_QDate, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 1308 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQDate.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDate[] = {
    {(void *)slot_QDate___ge__, ge_slot},
    {(void *)slot_QDate___gt__, gt_slot},
    {(void *)slot_QDate___le__, le_slot},
    {(void *)slot_QDate___lt__, lt_slot},
    {(void *)slot_QDate___ne__, ne_slot},
    {(void *)slot_QDate___eq__, eq_slot},
    {(void *)slot_QDate___bool__, bool_slot},
    {(void *)slot_QDate___hash__, hash_slot},
    {(void *)slot_QDate___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDate[] = {
    {SIP_MLNAME_CAST(sipName_addDays), meth_QDate_addDays, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_addDays)},
    {SIP_MLNAME_CAST(sipName_addMonths), meth_QDate_addMonths, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_addMonths)},
    {SIP_MLNAME_CAST(sipName_addYears), meth_QDate_addYears, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_addYears)},
    {SIP_MLNAME_CAST(sipName_currentDate), meth_QDate_currentDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_currentDate)},
    {SIP_MLNAME_CAST(sipName_day), meth_QDate_day, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_day)},
    {SIP_MLNAME_CAST(sipName_dayOfWeek), meth_QDate_dayOfWeek, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_dayOfWeek)},
    {SIP_MLNAME_CAST(sipName_dayOfYear), meth_QDate_dayOfYear, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_dayOfYear)},
    {SIP_MLNAME_CAST(sipName_daysInMonth), meth_QDate_daysInMonth, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_daysInMonth)},
    {SIP_MLNAME_CAST(sipName_daysInYear), meth_QDate_daysInYear, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_daysInYear)},
    {SIP_MLNAME_CAST(sipName_daysTo), meth_QDate_daysTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_daysTo)},
    {SIP_MLNAME_CAST(sipName_fromJulianDay), meth_QDate_fromJulianDay, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_fromJulianDay)},
    {SIP_MLNAME_CAST(sipName_fromString), (PyCFunction)meth_QDate_fromString, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_fromString)},
    {SIP_MLNAME_CAST(sipName_getDate), meth_QDate_getDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_getDate)},
    {SIP_MLNAME_CAST(sipName_isLeapYear), meth_QDate_isLeapYear, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_isLeapYear)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QDate_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_isNull)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QDate_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_isValid)},
    {SIP_MLNAME_CAST(sipName_longDayName), (PyCFunction)meth_QDate_longDayName, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_longDayName)},
    {SIP_MLNAME_CAST(sipName_longMonthName), (PyCFunction)meth_QDate_longMonthName, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_longMonthName)},
    {SIP_MLNAME_CAST(sipName_month), meth_QDate_month, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_month)},
    {SIP_MLNAME_CAST(sipName_setDate), meth_QDate_setDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_setDate)},
    {SIP_MLNAME_CAST(sipName_shortDayName), (PyCFunction)meth_QDate_shortDayName, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_shortDayName)},
    {SIP_MLNAME_CAST(sipName_shortMonthName), (PyCFunction)meth_QDate_shortMonthName, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_shortMonthName)},
    {SIP_MLNAME_CAST(sipName_toJulianDay), meth_QDate_toJulianDay, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_toJulianDay)},
    {SIP_MLNAME_CAST(sipName_toPyDate), meth_QDate_toPyDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_toPyDate)},
    {SIP_MLNAME_CAST(sipName_toString), (PyCFunction)meth_QDate_toString, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_toString)},
    {SIP_MLNAME_CAST(sipName_weekNumber), (PyCFunction)meth_QDate_weekNumber, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDate_weekNumber)},
    {SIP_MLNAME_CAST(sipName_year), meth_QDate_year, METH_VARARGS, SIP_MLDOC_CAST(doc_QDate_year)}
};

static sipEnumMemberDef enummembers_QDate[] = {
    {sipName_DateFormat, static_cast<int>(QDate::DateFormat), 38},
    {sipName_StandaloneFormat, static_cast<int>(QDate::StandaloneFormat), 38},
};

PyDoc_STRVAR(doc_QDate, "\1QDate()\n"
    "QDate(int, int, int)\n"
    "QDate(QDate)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QDate = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QDate,
        {0}
    },
    {
        sipNameNr_QDate,
        {0, 0, 1},
        27, methods_QDate,
        2, enummembers_QDate,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDate,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QDate,
    init_type_QDate,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDate,
    assign_QDate,
    array_QDate,
    copy_QDate,
    release_QDate,
    cast_QDate,
    convertTo_QDate,
    0,
    0,
    pickle_QDate,
    0,
    0
},
    0,
    0,
    0,
    0
};
