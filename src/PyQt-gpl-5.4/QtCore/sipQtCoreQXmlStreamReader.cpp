/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:21 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 308 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQXmlStreamReader.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQXmlStreamReader.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQXmlStreamReader.cpp"
#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQXmlStreamReader.cpp"
#line 297 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQXmlStreamReader.cpp"
#line 68 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQXmlStreamReader.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQXmlStreamReader.cpp"
#line 276 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQXmlStreamReader.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQXmlStreamReader.cpp"
#line 257 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQXmlStreamReader.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQXmlStreamReader.cpp"
#line 238 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQXmlStreamReader.cpp"
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQXmlStreamReader.cpp"


PyDoc_STRVAR(doc_QXmlStreamReader_setDevice, "QXmlStreamReader.setDevice(QIODevice)");

extern "C" {static PyObject *meth_QXmlStreamReader_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice* a0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_setDevice, doc_QXmlStreamReader_setDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_device, "QXmlStreamReader.device() -> QIODevice");

extern "C" {static PyObject *meth_QXmlStreamReader_device(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_device, doc_QXmlStreamReader_device);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_addData, "QXmlStreamReader.addData(QByteArray)\n"
    "QXmlStreamReader.addData(str)");

extern "C" {static PyObject *meth_QXmlStreamReader_addData(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_addData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->addData(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->addData(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_addData, doc_QXmlStreamReader_addData);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_clear, "QXmlStreamReader.clear()");

extern "C" {static PyObject *meth_QXmlStreamReader_clear(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_clear, doc_QXmlStreamReader_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_atEnd, "QXmlStreamReader.atEnd() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atEnd();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_atEnd, doc_QXmlStreamReader_atEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_readNext, "QXmlStreamReader.readNext() -> QXmlStreamReader.TokenType");

extern "C" {static PyObject *meth_QXmlStreamReader_readNext(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_readNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QXmlStreamReader::TokenType sipRes;

            sipRes = sipCpp->readNext();

            return sipConvertFromEnum(sipRes,sipType_QXmlStreamReader_TokenType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_readNext, doc_QXmlStreamReader_readNext);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_tokenType, "QXmlStreamReader.tokenType() -> QXmlStreamReader.TokenType");

extern "C" {static PyObject *meth_QXmlStreamReader_tokenType(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_tokenType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QXmlStreamReader::TokenType sipRes;

            sipRes = sipCpp->tokenType();

            return sipConvertFromEnum(sipRes,sipType_QXmlStreamReader_TokenType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_tokenType, doc_QXmlStreamReader_tokenType);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_tokenString, "QXmlStreamReader.tokenString() -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_tokenString(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_tokenString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->tokenString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_tokenString, doc_QXmlStreamReader_tokenString);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_setNamespaceProcessing, "QXmlStreamReader.setNamespaceProcessing(bool)");

extern "C" {static PyObject *meth_QXmlStreamReader_setNamespaceProcessing(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_setNamespaceProcessing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QXmlStreamReader, &sipCpp, &a0))
        {
            sipCpp->setNamespaceProcessing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_setNamespaceProcessing, doc_QXmlStreamReader_setNamespaceProcessing);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_namespaceProcessing, "QXmlStreamReader.namespaceProcessing() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_namespaceProcessing(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_namespaceProcessing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->namespaceProcessing();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_namespaceProcessing, doc_QXmlStreamReader_namespaceProcessing);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isStartDocument, "QXmlStreamReader.isStartDocument() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isStartDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isStartDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStartDocument();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isStartDocument, doc_QXmlStreamReader_isStartDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isEndDocument, "QXmlStreamReader.isEndDocument() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isEndDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isEndDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEndDocument();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isEndDocument, doc_QXmlStreamReader_isEndDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isStartElement, "QXmlStreamReader.isStartElement() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isStartElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isStartElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStartElement();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isStartElement, doc_QXmlStreamReader_isStartElement);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isEndElement, "QXmlStreamReader.isEndElement() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isEndElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isEndElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEndElement();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isEndElement, doc_QXmlStreamReader_isEndElement);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isCharacters, "QXmlStreamReader.isCharacters() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isCharacters(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isCharacters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCharacters();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isCharacters, doc_QXmlStreamReader_isCharacters);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isWhitespace, "QXmlStreamReader.isWhitespace() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isWhitespace(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isWhitespace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWhitespace();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isWhitespace, doc_QXmlStreamReader_isWhitespace);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isCDATA, "QXmlStreamReader.isCDATA() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCDATA();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isCDATA, doc_QXmlStreamReader_isCDATA);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isComment, "QXmlStreamReader.isComment() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isComment(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isComment();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isComment, doc_QXmlStreamReader_isComment);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isDTD, "QXmlStreamReader.isDTD() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDTD();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isDTD, doc_QXmlStreamReader_isDTD);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isEntityReference, "QXmlStreamReader.isEntityReference() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEntityReference();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isEntityReference, doc_QXmlStreamReader_isEntityReference);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isProcessingInstruction, "QXmlStreamReader.isProcessingInstruction() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isProcessingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isProcessingInstruction();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isProcessingInstruction, doc_QXmlStreamReader_isProcessingInstruction);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_isStandaloneDocument, "QXmlStreamReader.isStandaloneDocument() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_isStandaloneDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isStandaloneDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStandaloneDocument();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_isStandaloneDocument, doc_QXmlStreamReader_isStandaloneDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_documentVersion, "QXmlStreamReader.documentVersion() -> QStringRef");

extern "C" {static PyObject *meth_QXmlStreamReader_documentVersion(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_documentVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QStringRef*sipRes;

            sipRes = new QStringRef(sipCpp->documentVersion());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_documentVersion, doc_QXmlStreamReader_documentVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_documentEncoding, "QXmlStreamReader.documentEncoding() -> QStringRef");

extern "C" {static PyObject *meth_QXmlStreamReader_documentEncoding(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_documentEncoding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QStringRef*sipRes;

            sipRes = new QStringRef(sipCpp->documentEncoding());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_documentEncoding, doc_QXmlStreamReader_documentEncoding);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_lineNumber, "QXmlStreamReader.lineNumber() -> int");

extern "C" {static PyObject *meth_QXmlStreamReader_lineNumber(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_lineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->lineNumber();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_lineNumber, doc_QXmlStreamReader_lineNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_columnNumber, "QXmlStreamReader.columnNumber() -> int");

extern "C" {static PyObject *meth_QXmlStreamReader_columnNumber(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_columnNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->columnNumber();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_columnNumber, doc_QXmlStreamReader_columnNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_characterOffset, "QXmlStreamReader.characterOffset() -> int");

extern "C" {static PyObject *meth_QXmlStreamReader_characterOffset(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_characterOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->characterOffset();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_characterOffset, doc_QXmlStreamReader_characterOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_attributes, "QXmlStreamReader.attributes() -> QXmlStreamAttributes");

extern "C" {static PyObject *meth_QXmlStreamReader_attributes(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_attributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QXmlStreamAttributes*sipRes;

            sipRes = new QXmlStreamAttributes(sipCpp->attributes());

            return sipConvertFromNewType(sipRes,sipType_QXmlStreamAttributes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_attributes, doc_QXmlStreamReader_attributes);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_readElementText, "QXmlStreamReader.readElementText(QXmlStreamReader.ReadElementTextBehaviour behaviour=QXmlStreamReader.ErrorOnUnexpectedElement) -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_readElementText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_readElementText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamReader::ReadElementTextBehaviour a0 = QXmlStreamReader::ErrorOnUnexpectedElement;
        QXmlStreamReader *sipCpp;

        static const char *sipKwdList[] = {
            sipName_behaviour,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QXmlStreamReader_ReadElementTextBehaviour, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->readElementText(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_readElementText, doc_QXmlStreamReader_readElementText);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_name, "QXmlStreamReader.name() -> QStringRef");

extern "C" {static PyObject *meth_QXmlStreamReader_name(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QStringRef*sipRes;

            sipRes = new QStringRef(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_name, doc_QXmlStreamReader_name);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_namespaceUri, "QXmlStreamReader.namespaceUri() -> QStringRef");

extern "C" {static PyObject *meth_QXmlStreamReader_namespaceUri(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_namespaceUri(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QStringRef*sipRes;

            sipRes = new QStringRef(sipCpp->namespaceUri());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_namespaceUri, doc_QXmlStreamReader_namespaceUri);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_qualifiedName, "QXmlStreamReader.qualifiedName() -> QStringRef");

extern "C" {static PyObject *meth_QXmlStreamReader_qualifiedName(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_qualifiedName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QStringRef*sipRes;

            sipRes = new QStringRef(sipCpp->qualifiedName());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_qualifiedName, doc_QXmlStreamReader_qualifiedName);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_prefix, "QXmlStreamReader.prefix() -> QStringRef");

extern "C" {static PyObject *meth_QXmlStreamReader_prefix(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_prefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QStringRef*sipRes;

            sipRes = new QStringRef(sipCpp->prefix());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_prefix, doc_QXmlStreamReader_prefix);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_processingInstructionTarget, "QXmlStreamReader.processingInstructionTarget() -> QStringRef");

extern "C" {static PyObject *meth_QXmlStreamReader_processingInstructionTarget(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_processingInstructionTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QStringRef*sipRes;

            sipRes = new QStringRef(sipCpp->processingInstructionTarget());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_processingInstructionTarget, doc_QXmlStreamReader_processingInstructionTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_processingInstructionData, "QXmlStreamReader.processingInstructionData() -> QStringRef");

extern "C" {static PyObject *meth_QXmlStreamReader_processingInstructionData(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_processingInstructionData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QStringRef*sipRes;

            sipRes = new QStringRef(sipCpp->processingInstructionData());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_processingInstructionData, doc_QXmlStreamReader_processingInstructionData);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_text, "QXmlStreamReader.text() -> QStringRef");

extern "C" {static PyObject *meth_QXmlStreamReader_text(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QStringRef*sipRes;

            sipRes = new QStringRef(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_text, doc_QXmlStreamReader_text);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_namespaceDeclarations, "QXmlStreamReader.namespaceDeclarations() -> list-of-QXmlStreamNamespaceDeclaration");

extern "C" {static PyObject *meth_QXmlStreamReader_namespaceDeclarations(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_namespaceDeclarations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QXmlStreamNamespaceDeclarations*sipRes;

            sipRes = new QXmlStreamNamespaceDeclarations(sipCpp->namespaceDeclarations());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QXmlStreamNamespaceDeclaration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_namespaceDeclarations, doc_QXmlStreamReader_namespaceDeclarations);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_addExtraNamespaceDeclaration, "QXmlStreamReader.addExtraNamespaceDeclaration(QXmlStreamNamespaceDeclaration)");

extern "C" {static PyObject *meth_QXmlStreamReader_addExtraNamespaceDeclaration(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_addExtraNamespaceDeclaration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamNamespaceDeclaration* a0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QXmlStreamNamespaceDeclaration, &a0))
        {
            sipCpp->addExtraNamespaceDeclaration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_addExtraNamespaceDeclaration, doc_QXmlStreamReader_addExtraNamespaceDeclaration);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_addExtraNamespaceDeclarations, "QXmlStreamReader.addExtraNamespaceDeclarations(list-of-QXmlStreamNamespaceDeclaration)");

extern "C" {static PyObject *meth_QXmlStreamReader_addExtraNamespaceDeclarations(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_addExtraNamespaceDeclarations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamNamespaceDeclarations* a0;
        int a0State = 0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QVector_0100QXmlStreamNamespaceDeclaration,&a0, &a0State))
        {
            sipCpp->addExtraNamespaceDeclarations(*a0);
            sipReleaseType(const_cast<QXmlStreamNamespaceDeclarations *>(a0),sipType_QVector_0100QXmlStreamNamespaceDeclaration,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_addExtraNamespaceDeclarations, doc_QXmlStreamReader_addExtraNamespaceDeclarations);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_notationDeclarations, "QXmlStreamReader.notationDeclarations() -> list-of-QXmlStreamNotationDeclaration");

extern "C" {static PyObject *meth_QXmlStreamReader_notationDeclarations(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_notationDeclarations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QXmlStreamNotationDeclarations*sipRes;

            sipRes = new QXmlStreamNotationDeclarations(sipCpp->notationDeclarations());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QXmlStreamNotationDeclaration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_notationDeclarations, doc_QXmlStreamReader_notationDeclarations);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_entityDeclarations, "QXmlStreamReader.entityDeclarations() -> list-of-QXmlStreamEntityDeclaration");

extern "C" {static PyObject *meth_QXmlStreamReader_entityDeclarations(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_entityDeclarations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QXmlStreamEntityDeclarations*sipRes;

            sipRes = new QXmlStreamEntityDeclarations(sipCpp->entityDeclarations());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QXmlStreamEntityDeclaration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_entityDeclarations, doc_QXmlStreamReader_entityDeclarations);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_dtdName, "QXmlStreamReader.dtdName() -> QStringRef");

extern "C" {static PyObject *meth_QXmlStreamReader_dtdName(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_dtdName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QStringRef*sipRes;

            sipRes = new QStringRef(sipCpp->dtdName());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_dtdName, doc_QXmlStreamReader_dtdName);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_dtdPublicId, "QXmlStreamReader.dtdPublicId() -> QStringRef");

extern "C" {static PyObject *meth_QXmlStreamReader_dtdPublicId(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_dtdPublicId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QStringRef*sipRes;

            sipRes = new QStringRef(sipCpp->dtdPublicId());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_dtdPublicId, doc_QXmlStreamReader_dtdPublicId);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_dtdSystemId, "QXmlStreamReader.dtdSystemId() -> QStringRef");

extern "C" {static PyObject *meth_QXmlStreamReader_dtdSystemId(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_dtdSystemId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QStringRef*sipRes;

            sipRes = new QStringRef(sipCpp->dtdSystemId());

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_dtdSystemId, doc_QXmlStreamReader_dtdSystemId);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_raiseError, "QXmlStreamReader.raiseError(str message='')");

extern "C" {static PyObject *meth_QXmlStreamReader_raiseError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_raiseError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        QXmlStreamReader *sipCpp;

        static const char *sipKwdList[] = {
            sipName_message,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QXmlStreamReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->raiseError(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_raiseError, doc_QXmlStreamReader_raiseError);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_errorString, "QXmlStreamReader.errorString() -> str");

extern "C" {static PyObject *meth_QXmlStreamReader_errorString(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_errorString, doc_QXmlStreamReader_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_error, "QXmlStreamReader.error() -> QXmlStreamReader.Error");

extern "C" {static PyObject *meth_QXmlStreamReader_error(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QXmlStreamReader::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QXmlStreamReader_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_error, doc_QXmlStreamReader_error);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_hasError, "QXmlStreamReader.hasError() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_hasError(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_hasError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasError();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_hasError, doc_QXmlStreamReader_hasError);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_setEntityResolver, "QXmlStreamReader.setEntityResolver(QXmlStreamEntityResolver)");

extern "C" {static PyObject *meth_QXmlStreamReader_setEntityResolver(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_setEntityResolver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamEntityResolver* a0;
        PyObject *a0Keep;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QXmlStreamReader, &sipCpp, &a0Keep, sipType_QXmlStreamEntityResolver, &a0))
        {
            sipCpp->setEntityResolver(a0);

            sipKeepReference(sipSelf, -12, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_setEntityResolver, doc_QXmlStreamReader_setEntityResolver);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_entityResolver, "QXmlStreamReader.entityResolver() -> QXmlStreamEntityResolver");

extern "C" {static PyObject *meth_QXmlStreamReader_entityResolver(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_entityResolver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            QXmlStreamEntityResolver*sipRes;

            sipRes = sipCpp->entityResolver();

            return sipConvertFromType(sipRes,sipType_QXmlStreamEntityResolver,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_entityResolver, doc_QXmlStreamReader_entityResolver);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_readNextStartElement, "QXmlStreamReader.readNextStartElement() -> bool");

extern "C" {static PyObject *meth_QXmlStreamReader_readNextStartElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_readNextStartElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->readNextStartElement();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_readNextStartElement, doc_QXmlStreamReader_readNextStartElement);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlStreamReader_skipCurrentElement, "QXmlStreamReader.skipCurrentElement()");

extern "C" {static PyObject *meth_QXmlStreamReader_skipCurrentElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_skipCurrentElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlStreamReader, &sipCpp))
        {
            sipCpp->skipCurrentElement();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlStreamReader, sipName_skipCurrentElement, doc_QXmlStreamReader_skipCurrentElement);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QXmlStreamReader(void *, const sipTypeDef *);}
static void *cast_QXmlStreamReader(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QXmlStreamReader)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamReader(void *, int);}
static void release_QXmlStreamReader(void *sipCppV,int)
{
    delete reinterpret_cast<QXmlStreamReader *>(sipCppV);
}


extern "C" {static void dealloc_QXmlStreamReader(sipSimpleWrapper *);}
static void dealloc_QXmlStreamReader(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QXmlStreamReader(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QXmlStreamReader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlStreamReader(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QXmlStreamReader *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QXmlStreamReader();

            return sipCpp;
        }
    }

    {
        QIODevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QIODevice, &a0))
        {
            sipCpp = new QXmlStreamReader(a0);

            return sipCpp;
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QByteArray, &a0, &a0State))
        {
            sipCpp = new QXmlStreamReader(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new QXmlStreamReader(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QXmlStreamReader[] = {
    {SIP_MLNAME_CAST(sipName_addData), meth_QXmlStreamReader_addData, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_addData)},
    {SIP_MLNAME_CAST(sipName_addExtraNamespaceDeclaration), meth_QXmlStreamReader_addExtraNamespaceDeclaration, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_addExtraNamespaceDeclaration)},
    {SIP_MLNAME_CAST(sipName_addExtraNamespaceDeclarations), meth_QXmlStreamReader_addExtraNamespaceDeclarations, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_addExtraNamespaceDeclarations)},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QXmlStreamReader_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_atEnd)},
    {SIP_MLNAME_CAST(sipName_attributes), meth_QXmlStreamReader_attributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_attributes)},
    {SIP_MLNAME_CAST(sipName_characterOffset), meth_QXmlStreamReader_characterOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_characterOffset)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QXmlStreamReader_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_clear)},
    {SIP_MLNAME_CAST(sipName_columnNumber), meth_QXmlStreamReader_columnNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_columnNumber)},
    {SIP_MLNAME_CAST(sipName_device), meth_QXmlStreamReader_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_device)},
    {SIP_MLNAME_CAST(sipName_documentEncoding), meth_QXmlStreamReader_documentEncoding, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_documentEncoding)},
    {SIP_MLNAME_CAST(sipName_documentVersion), meth_QXmlStreamReader_documentVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_documentVersion)},
    {SIP_MLNAME_CAST(sipName_dtdName), meth_QXmlStreamReader_dtdName, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_dtdName)},
    {SIP_MLNAME_CAST(sipName_dtdPublicId), meth_QXmlStreamReader_dtdPublicId, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_dtdPublicId)},
    {SIP_MLNAME_CAST(sipName_dtdSystemId), meth_QXmlStreamReader_dtdSystemId, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_dtdSystemId)},
    {SIP_MLNAME_CAST(sipName_entityDeclarations), meth_QXmlStreamReader_entityDeclarations, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_entityDeclarations)},
    {SIP_MLNAME_CAST(sipName_entityResolver), meth_QXmlStreamReader_entityResolver, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_entityResolver)},
    {SIP_MLNAME_CAST(sipName_error), meth_QXmlStreamReader_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QXmlStreamReader_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_errorString)},
    {SIP_MLNAME_CAST(sipName_hasError), meth_QXmlStreamReader_hasError, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_hasError)},
    {SIP_MLNAME_CAST(sipName_isCDATA), meth_QXmlStreamReader_isCDATA, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isCDATA)},
    {SIP_MLNAME_CAST(sipName_isCharacters), meth_QXmlStreamReader_isCharacters, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isCharacters)},
    {SIP_MLNAME_CAST(sipName_isComment), meth_QXmlStreamReader_isComment, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isComment)},
    {SIP_MLNAME_CAST(sipName_isDTD), meth_QXmlStreamReader_isDTD, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isDTD)},
    {SIP_MLNAME_CAST(sipName_isEndDocument), meth_QXmlStreamReader_isEndDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isEndDocument)},
    {SIP_MLNAME_CAST(sipName_isEndElement), meth_QXmlStreamReader_isEndElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isEndElement)},
    {SIP_MLNAME_CAST(sipName_isEntityReference), meth_QXmlStreamReader_isEntityReference, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isEntityReference)},
    {SIP_MLNAME_CAST(sipName_isProcessingInstruction), meth_QXmlStreamReader_isProcessingInstruction, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isProcessingInstruction)},
    {SIP_MLNAME_CAST(sipName_isStandaloneDocument), meth_QXmlStreamReader_isStandaloneDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isStandaloneDocument)},
    {SIP_MLNAME_CAST(sipName_isStartDocument), meth_QXmlStreamReader_isStartDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isStartDocument)},
    {SIP_MLNAME_CAST(sipName_isStartElement), meth_QXmlStreamReader_isStartElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isStartElement)},
    {SIP_MLNAME_CAST(sipName_isWhitespace), meth_QXmlStreamReader_isWhitespace, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_isWhitespace)},
    {SIP_MLNAME_CAST(sipName_lineNumber), meth_QXmlStreamReader_lineNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_lineNumber)},
    {SIP_MLNAME_CAST(sipName_name), meth_QXmlStreamReader_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_name)},
    {SIP_MLNAME_CAST(sipName_namespaceDeclarations), meth_QXmlStreamReader_namespaceDeclarations, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_namespaceDeclarations)},
    {SIP_MLNAME_CAST(sipName_namespaceProcessing), meth_QXmlStreamReader_namespaceProcessing, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_namespaceProcessing)},
    {SIP_MLNAME_CAST(sipName_namespaceUri), meth_QXmlStreamReader_namespaceUri, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_namespaceUri)},
    {SIP_MLNAME_CAST(sipName_notationDeclarations), meth_QXmlStreamReader_notationDeclarations, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_notationDeclarations)},
    {SIP_MLNAME_CAST(sipName_prefix), meth_QXmlStreamReader_prefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_prefix)},
    {SIP_MLNAME_CAST(sipName_processingInstructionData), meth_QXmlStreamReader_processingInstructionData, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_processingInstructionData)},
    {SIP_MLNAME_CAST(sipName_processingInstructionTarget), meth_QXmlStreamReader_processingInstructionTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_processingInstructionTarget)},
    {SIP_MLNAME_CAST(sipName_qualifiedName), meth_QXmlStreamReader_qualifiedName, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_qualifiedName)},
    {SIP_MLNAME_CAST(sipName_raiseError), (PyCFunction)meth_QXmlStreamReader_raiseError, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamReader_raiseError)},
    {SIP_MLNAME_CAST(sipName_readElementText), (PyCFunction)meth_QXmlStreamReader_readElementText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QXmlStreamReader_readElementText)},
    {SIP_MLNAME_CAST(sipName_readNext), meth_QXmlStreamReader_readNext, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_readNext)},
    {SIP_MLNAME_CAST(sipName_readNextStartElement), meth_QXmlStreamReader_readNextStartElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_readNextStartElement)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QXmlStreamReader_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_setDevice)},
    {SIP_MLNAME_CAST(sipName_setEntityResolver), meth_QXmlStreamReader_setEntityResolver, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_setEntityResolver)},
    {SIP_MLNAME_CAST(sipName_setNamespaceProcessing), meth_QXmlStreamReader_setNamespaceProcessing, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_setNamespaceProcessing)},
    {SIP_MLNAME_CAST(sipName_skipCurrentElement), meth_QXmlStreamReader_skipCurrentElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_skipCurrentElement)},
    {SIP_MLNAME_CAST(sipName_text), meth_QXmlStreamReader_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_text)},
    {SIP_MLNAME_CAST(sipName_tokenString), meth_QXmlStreamReader_tokenString, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_tokenString)},
    {SIP_MLNAME_CAST(sipName_tokenType), meth_QXmlStreamReader_tokenType, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlStreamReader_tokenType)}
};

static sipEnumMemberDef enummembers_QXmlStreamReader[] = {
    {sipName_Characters, static_cast<int>(QXmlStreamReader::Characters), 310},
    {sipName_Comment, static_cast<int>(QXmlStreamReader::Comment), 310},
    {sipName_CustomError, static_cast<int>(QXmlStreamReader::CustomError), 308},
    {sipName_DTD, static_cast<int>(QXmlStreamReader::DTD), 310},
    {sipName_EndDocument, static_cast<int>(QXmlStreamReader::EndDocument), 310},
    {sipName_EndElement, static_cast<int>(QXmlStreamReader::EndElement), 310},
    {sipName_EntityReference, static_cast<int>(QXmlStreamReader::EntityReference), 310},
    {sipName_ErrorOnUnexpectedElement, static_cast<int>(QXmlStreamReader::ErrorOnUnexpectedElement), 309},
    {sipName_IncludeChildElements, static_cast<int>(QXmlStreamReader::IncludeChildElements), 309},
    {sipName_Invalid, static_cast<int>(QXmlStreamReader::Invalid), 310},
    {sipName_NoError, static_cast<int>(QXmlStreamReader::NoError), 308},
    {sipName_NoToken, static_cast<int>(QXmlStreamReader::NoToken), 310},
    {sipName_NotWellFormedError, static_cast<int>(QXmlStreamReader::NotWellFormedError), 308},
    {sipName_PrematureEndOfDocumentError, static_cast<int>(QXmlStreamReader::PrematureEndOfDocumentError), 308},
    {sipName_ProcessingInstruction, static_cast<int>(QXmlStreamReader::ProcessingInstruction), 310},
    {sipName_SkipChildElements, static_cast<int>(QXmlStreamReader::SkipChildElements), 309},
    {sipName_StartDocument, static_cast<int>(QXmlStreamReader::StartDocument), 310},
    {sipName_StartElement, static_cast<int>(QXmlStreamReader::StartElement), 310},
    {sipName_UnexpectedElementError, static_cast<int>(QXmlStreamReader::UnexpectedElementError), 308},
};

PyDoc_STRVAR(doc_QXmlStreamReader, "\1QXmlStreamReader()\n"
    "QXmlStreamReader(QIODevice)\n"
    "QXmlStreamReader(QByteArray)\n"
    "QXmlStreamReader(str)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QXmlStreamReader = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamReader,
        {0}
    },
    {
        sipNameNr_QXmlStreamReader,
        {0, 0, 1},
        52, methods_QXmlStreamReader,
        19, enummembers_QXmlStreamReader,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QXmlStreamReader,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QXmlStreamReader,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QXmlStreamReader,
    0,
    0,
    0,
    release_QXmlStreamReader,
    cast_QXmlStreamReader,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
