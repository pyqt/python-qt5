/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qtemporarydir.sip"
#include <qtemporarydir.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTemporaryDir.cpp"

#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQTemporaryDir.cpp"


PyDoc_STRVAR(doc_QTemporaryDir_isValid, "QTemporaryDir.isValid() -> bool");

extern "C" {static PyObject *meth_QTemporaryDir_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryDir_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTemporaryDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryDir, sipName_isValid, doc_QTemporaryDir_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QTemporaryDir_autoRemove, "QTemporaryDir.autoRemove() -> bool");

extern "C" {static PyObject *meth_QTemporaryDir_autoRemove(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryDir_autoRemove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTemporaryDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoRemove();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryDir, sipName_autoRemove, doc_QTemporaryDir_autoRemove);

    return NULL;
}


PyDoc_STRVAR(doc_QTemporaryDir_setAutoRemove, "QTemporaryDir.setAutoRemove(bool)");

extern "C" {static PyObject *meth_QTemporaryDir_setAutoRemove(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryDir_setAutoRemove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTemporaryDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTemporaryDir, &sipCpp, &a0))
        {
            sipCpp->setAutoRemove(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryDir, sipName_setAutoRemove, doc_QTemporaryDir_setAutoRemove);

    return NULL;
}


PyDoc_STRVAR(doc_QTemporaryDir_remove, "QTemporaryDir.remove() -> bool");

extern "C" {static PyObject *meth_QTemporaryDir_remove(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryDir_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTemporaryDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryDir, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->remove();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryDir, sipName_remove, doc_QTemporaryDir_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QTemporaryDir_path, "QTemporaryDir.path() -> str");

extern "C" {static PyObject *meth_QTemporaryDir_path(PyObject *, PyObject *);}
static PyObject *meth_QTemporaryDir_path(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTemporaryDir *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTemporaryDir, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->path());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTemporaryDir, sipName_path, doc_QTemporaryDir_path);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTemporaryDir(void *, const sipTypeDef *);}
static void *cast_QTemporaryDir(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTemporaryDir)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTemporaryDir(void *, int);}
static void release_QTemporaryDir(void *sipCppV,int)
{
    delete reinterpret_cast<QTemporaryDir *>(sipCppV);
}


extern "C" {static void dealloc_QTemporaryDir(sipSimpleWrapper *);}
static void dealloc_QTemporaryDir(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTemporaryDir(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTemporaryDir(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTemporaryDir(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTemporaryDir *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QTemporaryDir();

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new QTemporaryDir(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QTemporaryDir[] = {
    {SIP_MLNAME_CAST(sipName_autoRemove), meth_QTemporaryDir_autoRemove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryDir_autoRemove)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTemporaryDir_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryDir_isValid)},
    {SIP_MLNAME_CAST(sipName_path), meth_QTemporaryDir_path, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryDir_path)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QTemporaryDir_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryDir_remove)},
    {SIP_MLNAME_CAST(sipName_setAutoRemove), meth_QTemporaryDir_setAutoRemove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTemporaryDir_setAutoRemove)}
};

PyDoc_STRVAR(doc_QTemporaryDir, "\1QTemporaryDir()\n"
    "QTemporaryDir(str)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QTemporaryDir = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTemporaryDir,
        {0}
    },
    {
        sipNameNr_QTemporaryDir,
        {0, 0, 1},
        5, methods_QTemporaryDir,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTemporaryDir,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QTemporaryDir,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTemporaryDir,
    0,
    0,
    0,
    release_QTemporaryDir,
    cast_QTemporaryDir,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
