/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstatemachine.sip"
#include <qstatemachine.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstate.sip"
#include <qstate.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 139 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qset.sip"
#include <qset.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qabstractstate.sip"
#include <qabstractstate.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qabstractanimation.sip"
#include <qabstractanimation.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qabstracttransition.sip"
#include <qabstracttransition.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qsignaltransition.sip"
#include <qsignaltransition.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qthread.sip"
#include <qthread.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"


class sipQStateMachine : public QStateMachine
{
public:
    sipQStateMachine(QObject*);
    sipQStateMachine(QState::ChildMode,QObject*);
    virtual ~sipQStateMachine();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_onEntry(bool,QEvent*);
    void sipProtectVirt_onExit(bool,QEvent*);
    bool sipProtectVirt_event(bool,QEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool event(QEvent*);
    void onExit(QEvent*);
    void onEntry(QEvent*);
    bool eventFilter(QObject*,QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStateMachine(const sipQStateMachine &);
    sipQStateMachine &operator = (const sipQStateMachine &);

    char sipPyMethods[9];
};

sipQStateMachine::sipQStateMachine(QObject*a0): QStateMachine(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStateMachine::sipQStateMachine(QState::ChildMode a0,QObject*a1): QStateMachine(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStateMachine::~sipQStateMachine()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQStateMachine::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QStateMachine);
}

int sipQStateMachine::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QStateMachine::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QStateMachine,_c,_id,_a);

    return _id;
}

void *sipQStateMachine::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QStateMachine, _clname, &sipCpp) ? sipCpp : QStateMachine::qt_metacast(_clname));
}

void sipQStateMachine::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QStateMachine::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QStateMachine::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QStateMachine::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QStateMachine::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QStateMachine::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQStateMachine::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QStateMachine::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::onExit(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_onExit);

    if (!sipMeth)
    {
        QStateMachine::onExit(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQStateMachine::onEntry(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_onEntry);

    if (!sipMeth)
    {
        QStateMachine::onEntry(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQStateMachine::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QStateMachine::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

QObject* sipQStateMachine::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQStateMachine::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQStateMachine::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQStateMachine::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQStateMachine::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQStateMachine::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQStateMachine::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQStateMachine::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQStateMachine::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQStateMachine::sipProtectVirt_onEntry(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QStateMachine::onEntry(a0) : onEntry(a0));
}

void sipQStateMachine::sipProtectVirt_onExit(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QStateMachine::onExit(a0) : onExit(a0));
}

bool sipQStateMachine::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QStateMachine::event(a0) : event(a0));
}


PyDoc_STRVAR(doc_QStateMachine_sender, "QStateMachine.sender() -> QObject");

extern "C" {static PyObject *meth_QStateMachine_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQStateMachine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 461 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_sender, doc_QStateMachine_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_receivers, "QStateMachine.receivers(signal) -> int");

extern "C" {static PyObject *meth_QStateMachine_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQStateMachine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QStateMachine, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 520 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_receivers, doc_QStateMachine_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_timerEvent, "QStateMachine.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QStateMachine_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQStateMachine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_timerEvent, doc_QStateMachine_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_childEvent, "QStateMachine.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QStateMachine_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQStateMachine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_childEvent, doc_QStateMachine_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_customEvent, "QStateMachine.customEvent(QEvent)");

extern "C" {static PyObject *meth_QStateMachine_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQStateMachine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_customEvent, doc_QStateMachine_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_connectNotify, "QStateMachine.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QStateMachine_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQStateMachine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_connectNotify, doc_QStateMachine_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_disconnectNotify, "QStateMachine.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QStateMachine_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQStateMachine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_disconnectNotify, doc_QStateMachine_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_senderSignalIndex, "QStateMachine.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QStateMachine_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQStateMachine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_senderSignalIndex, doc_QStateMachine_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_isSignalConnected, "QStateMachine.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QStateMachine_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQStateMachine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_isSignalConnected, doc_QStateMachine_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_addState, "QStateMachine.addState(QAbstractState)");

extern "C" {static PyObject *meth_QStateMachine_addState(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_addState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractState* a0;
        QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QAbstractState, &a0))
        {
            sipCpp->addState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_addState, doc_QStateMachine_addState);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_removeState, "QStateMachine.removeState(QAbstractState)");

extern "C" {static PyObject *meth_QStateMachine_removeState(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_removeState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractState* a0;
        QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QAbstractState, &a0))
        {
            sipCpp->removeState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_removeState, doc_QStateMachine_removeState);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_error, "QStateMachine.error() -> QStateMachine.Error");

extern "C" {static PyObject *meth_QStateMachine_error(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            QStateMachine::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QStateMachine_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_error, doc_QStateMachine_error);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_errorString, "QStateMachine.errorString() -> str");

extern "C" {static PyObject *meth_QStateMachine_errorString(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_errorString, doc_QStateMachine_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_clearError, "QStateMachine.clearError()");

extern "C" {static PyObject *meth_QStateMachine_clearError(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_clearError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            sipCpp->clearError();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_clearError, doc_QStateMachine_clearError);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_isRunning, "QStateMachine.isRunning() -> bool");

extern "C" {static PyObject *meth_QStateMachine_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRunning();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_isRunning, doc_QStateMachine_isRunning);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_isAnimated, "QStateMachine.isAnimated() -> bool");

extern "C" {static PyObject *meth_QStateMachine_isAnimated(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_isAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAnimated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_isAnimated, doc_QStateMachine_isAnimated);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_setAnimated, "QStateMachine.setAnimated(bool)");

extern "C" {static PyObject *meth_QStateMachine_setAnimated(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_setAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStateMachine, &sipCpp, &a0))
        {
            sipCpp->setAnimated(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_setAnimated, doc_QStateMachine_setAnimated);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_addDefaultAnimation, "QStateMachine.addDefaultAnimation(QAbstractAnimation)");

extern "C" {static PyObject *meth_QStateMachine_addDefaultAnimation(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_addDefaultAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractAnimation* a0;
        PyObject *a0Wrapper;
        QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QStateMachine, &sipCpp, &a0Wrapper, sipType_QAbstractAnimation, &a0))
        {
#line 82 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstatemachine.sip"
        // We want to keep a reference to the animation but this is in addition to the
        // existing ones and does not replace them - so we can't use /KeepReference/.
        sipCpp->addDefaultAnimation(a0);
        
        // Use the user object as a list of the references.
        PyObject *user = ((sipSimpleWrapper *)sipSelf)->user;
        
        if (!user)
            user = ((sipSimpleWrapper *)sipSelf)->user = PyList_New(0);
        
        if (user)
            PyList_Append(user, a0Wrapper);
#line 978 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_addDefaultAnimation, doc_QStateMachine_addDefaultAnimation);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_defaultAnimations, "QStateMachine.defaultAnimations() -> list-of-QAbstractAnimation");

extern "C" {static PyObject *meth_QStateMachine_defaultAnimations(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_defaultAnimations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            QList<QAbstractAnimation*>*sipRes;

            sipRes = new QList<QAbstractAnimation*>(sipCpp->defaultAnimations());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractAnimation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_defaultAnimations, doc_QStateMachine_defaultAnimations);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_removeDefaultAnimation, "QStateMachine.removeDefaultAnimation(QAbstractAnimation)");

extern "C" {static PyObject *meth_QStateMachine_removeDefaultAnimation(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_removeDefaultAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractAnimation* a0;
        PyObject *a0Wrapper;
        QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QStateMachine, &sipCpp, &a0Wrapper, sipType_QAbstractAnimation, &a0))
        {
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstatemachine.sip"
        // Discard the extra animation reference that we took in addDefaultAnimation().
        sipCpp->removeDefaultAnimation(a0);
        
        // Use the user object as a list of the references.
        PyObject *user = ((sipSimpleWrapper *)sipSelf)->user;
        
        if (user)
        {
            Py_ssize_t i = 0;
            
            // Note that we deal with an object appearing in the list more than once.
            while (i < PyList_GET_SIZE(user))
                if (PyList_GET_ITEM(user, i) == a0Wrapper)
                    PyList_SetSlice(user, i, i + 1, NULL);
                else
                    ++i;
        }
#line 1051 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQStateMachine.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_removeDefaultAnimation, doc_QStateMachine_removeDefaultAnimation);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_globalRestorePolicy, "QStateMachine.globalRestorePolicy() -> QState.RestorePolicy");

extern "C" {static PyObject *meth_QStateMachine_globalRestorePolicy(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_globalRestorePolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            QState::RestorePolicy sipRes;

            sipRes = sipCpp->globalRestorePolicy();

            return sipConvertFromEnum(sipRes,sipType_QState_RestorePolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_globalRestorePolicy, doc_QStateMachine_globalRestorePolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_setGlobalRestorePolicy, "QStateMachine.setGlobalRestorePolicy(QState.RestorePolicy)");

extern "C" {static PyObject *meth_QStateMachine_setGlobalRestorePolicy(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_setGlobalRestorePolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QState::RestorePolicy a0;
        QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QState_RestorePolicy, &a0))
        {
            sipCpp->setGlobalRestorePolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_setGlobalRestorePolicy, doc_QStateMachine_setGlobalRestorePolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_postEvent, "QStateMachine.postEvent(QEvent, QStateMachine.EventPriority priority=QStateMachine.NormalPriority)");

extern "C" {static PyObject *meth_QStateMachine_postEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_postEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QEvent* a0;
        QStateMachine::EventPriority a1 = QStateMachine::NormalPriority;
        QStateMachine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_priority,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:|E", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0, sipType_QStateMachine_EventPriority, &a1))
        {
            sipCpp->postEvent(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_postEvent, doc_QStateMachine_postEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_postDelayedEvent, "QStateMachine.postDelayedEvent(QEvent, int) -> int");

extern "C" {static PyObject *meth_QStateMachine_postDelayedEvent(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_postDelayedEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QEvent* a0;
        int a1;
        QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:i", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0, &a1))
        {
            int sipRes;

            sipRes = sipCpp->postDelayedEvent(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_postDelayedEvent, doc_QStateMachine_postDelayedEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_cancelDelayedEvent, "QStateMachine.cancelDelayedEvent(int) -> bool");

extern "C" {static PyObject *meth_QStateMachine_cancelDelayedEvent(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_cancelDelayedEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStateMachine, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->cancelDelayedEvent(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_cancelDelayedEvent, doc_QStateMachine_cancelDelayedEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_configuration, "QStateMachine.configuration() -> set-of-QAbstractState");

extern "C" {static PyObject *meth_QStateMachine_configuration(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_configuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            QSet<QAbstractState*>*sipRes;

            sipRes = new QSet<QAbstractState*>(sipCpp->configuration());

            return sipConvertFromNewType(sipRes,sipType_QSet_0101QAbstractState,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_configuration, doc_QStateMachine_configuration);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_eventFilter, "QStateMachine.eventFilter(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QStateMachine_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QStateMachine::eventFilter(a0,a1) : sipCpp->eventFilter(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_eventFilter, doc_QStateMachine_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_start, "QStateMachine.start()");

extern "C" {static PyObject *meth_QStateMachine_start(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_start, doc_QStateMachine_start);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_stop, "QStateMachine.stop()");

extern "C" {static PyObject *meth_QStateMachine_stop(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStateMachine, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_stop, doc_QStateMachine_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_setRunning, "QStateMachine.setRunning(bool)");

extern "C" {static PyObject *meth_QStateMachine_setRunning(PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_setRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QStateMachine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStateMachine, &sipCpp, &a0))
        {
            sipCpp->setRunning(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_setRunning, doc_QStateMachine_setRunning);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_onEntry, "QStateMachine.onEntry(QEvent)");

extern "C" {static PyObject *meth_QStateMachine_onEntry(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_onEntry(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQStateMachine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_onEntry(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_onEntry, doc_QStateMachine_onEntry);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_onExit, "QStateMachine.onExit(QEvent)");

extern "C" {static PyObject *meth_QStateMachine_onExit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_onExit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQStateMachine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_onExit(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_onExit, doc_QStateMachine_onExit);

    return NULL;
}


PyDoc_STRVAR(doc_QStateMachine_event, "QStateMachine.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QStateMachine_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStateMachine_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQStateMachine *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QStateMachine, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStateMachine, sipName_event, doc_QStateMachine_event);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QStateMachine(void *, const sipTypeDef *);}
static void *cast_QStateMachine(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QStateMachine)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QState)->ctd_cast((QState *)(QStateMachine *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStateMachine(void *, int);}
static void release_QStateMachine(void *sipCppV,int)
{
    QStateMachine *sipCpp = reinterpret_cast<QStateMachine *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QStateMachine(sipSimpleWrapper *);}
static void dealloc_QStateMachine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQStateMachine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QStateMachine(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QStateMachine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStateMachine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQStateMachine *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQStateMachine(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QState::ChildMode a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QState_ChildMode, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQStateMachine(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStateMachine[] = {{221, 255, 1}};


static PyMethodDef methods_QStateMachine[] = {
    {SIP_MLNAME_CAST(sipName_addDefaultAnimation), meth_QStateMachine_addDefaultAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_addDefaultAnimation)},
    {SIP_MLNAME_CAST(sipName_addState), meth_QStateMachine_addState, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_addState)},
    {SIP_MLNAME_CAST(sipName_cancelDelayedEvent), meth_QStateMachine_cancelDelayedEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_cancelDelayedEvent)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QStateMachine_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clearError), meth_QStateMachine_clearError, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_clearError)},
    {SIP_MLNAME_CAST(sipName_configuration), meth_QStateMachine_configuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_configuration)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QStateMachine_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QStateMachine_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultAnimations), meth_QStateMachine_defaultAnimations, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_defaultAnimations)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QStateMachine_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QStateMachine_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QStateMachine_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_errorString)},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QStateMachine_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStateMachine_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), meth_QStateMachine_eventFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_eventFilter)},
    {SIP_MLNAME_CAST(sipName_globalRestorePolicy), meth_QStateMachine_globalRestorePolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_globalRestorePolicy)},
    {SIP_MLNAME_CAST(sipName_isAnimated), meth_QStateMachine_isAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_isAnimated)},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QStateMachine_isRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_isRunning)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QStateMachine_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_onEntry), (PyCFunction)meth_QStateMachine_onEntry, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStateMachine_onEntry)},
    {SIP_MLNAME_CAST(sipName_onExit), (PyCFunction)meth_QStateMachine_onExit, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStateMachine_onExit)},
    {SIP_MLNAME_CAST(sipName_postDelayedEvent), meth_QStateMachine_postDelayedEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_postDelayedEvent)},
    {SIP_MLNAME_CAST(sipName_postEvent), (PyCFunction)meth_QStateMachine_postEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStateMachine_postEvent)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QStateMachine_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removeDefaultAnimation), meth_QStateMachine_removeDefaultAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_removeDefaultAnimation)},
    {SIP_MLNAME_CAST(sipName_removeState), meth_QStateMachine_removeState, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_removeState)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QStateMachine_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QStateMachine_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAnimated), meth_QStateMachine_setAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_setAnimated)},
    {SIP_MLNAME_CAST(sipName_setGlobalRestorePolicy), meth_QStateMachine_setGlobalRestorePolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_setGlobalRestorePolicy)},
    {SIP_MLNAME_CAST(sipName_setRunning), meth_QStateMachine_setRunning, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_setRunning)},
    {SIP_MLNAME_CAST(sipName_start), meth_QStateMachine_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QStateMachine_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QStateMachine_stop)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QStateMachine_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QStateMachine[] = {
    {sipName_HighPriority, static_cast<int>(QStateMachine::HighPriority), 226},
    {sipName_NoCommonAncestorForTransitionError, static_cast<int>(QStateMachine::NoCommonAncestorForTransitionError), 225},
    {sipName_NoDefaultStateInHistoryStateError, static_cast<int>(QStateMachine::NoDefaultStateInHistoryStateError), 225},
    {sipName_NoError, static_cast<int>(QStateMachine::NoError), 225},
    {sipName_NoInitialStateError, static_cast<int>(QStateMachine::NoInitialStateError), 225},
    {sipName_NormalPriority, static_cast<int>(QStateMachine::NormalPriority), 226},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QStateMachine[] = {
    {"runningChanged(bool)", "\1QStateMachine.runningChanged[bool]", 0, 0},
    {"stopped()", "\1QStateMachine.stopped", 0, 0},
    {"started()", "\1QStateMachine.started", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QStateMachine, "\1QStateMachine(QObject parent=None)\n"
    "QStateMachine(QState.ChildMode, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QStateMachine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QStateMachine,
        {0}
    },
    {
        sipNameNr_QStateMachine,
        {0, 0, 1},
        33, methods_QStateMachine,
        6, enummembers_QStateMachine,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QStateMachine,
    -1,
    -1,
    supers_QStateMachine,
    0,
    init_type_QStateMachine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStateMachine,
    0,
    0,
    0,
    release_QStateMachine,
    cast_QStateMachine,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QStateMachine::staticMetaObject,
    0,
    signals_QStateMachine,
    0
};
