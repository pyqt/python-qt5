/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qidentityproxymodel.sip"
#include <qidentityproxymodel.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 133 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qsize.sip"
#include <qsize.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 266 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 70 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 321 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qthread.sip"
#include <qthread.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"


class sipQIdentityProxyModel : public QIdentityProxyModel
{
public:
    sipQIdentityProxyModel(QObject*);
    virtual ~sipQIdentityProxyModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtect_encodeData(const QModelIndexList&,QDataStream&) const;
    bool sipProtect_decodeData(int,int,const QModelIndex&,QDataStream&);
    void sipProtect_beginInsertRows(const QModelIndex&,int,int);
    void sipProtect_endInsertRows();
    void sipProtect_beginRemoveRows(const QModelIndex&,int,int);
    void sipProtect_endRemoveRows();
    void sipProtect_beginInsertColumns(const QModelIndex&,int,int);
    void sipProtect_endInsertColumns();
    void sipProtect_beginRemoveColumns(const QModelIndex&,int,int);
    void sipProtect_endRemoveColumns();
    QModelIndexList sipProtect_persistentIndexList() const;
    void sipProtect_changePersistentIndex(const QModelIndex&,const QModelIndex&);
    void sipProtect_changePersistentIndexList(const QModelIndexList&,const QModelIndexList&);
    QModelIndex sipProtect_createIndex(int,int,void*) const;
    bool sipProtect_beginMoveRows(const QModelIndex&,int,int,const QModelIndex&,int);
    void sipProtect_endMoveRows();
    bool sipProtect_beginMoveColumns(const QModelIndex&,int,int,const QModelIndex&,int);
    void sipProtect_endMoveColumns();
    void sipProtect_beginResetModel();
    void sipProtect_endResetModel();
    void sipProtect_resetInternalData();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool moveColumns(const QModelIndex&,int,int,const QModelIndex&,int);
    bool moveRows(const QModelIndex&,int,int,const QModelIndex&,int);
    QHash<int,QByteArray> roleNames() const;
    Qt::DropActions supportedDragActions() const;
    bool canDropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&) const;
    Qt::DropActions supportedDropActions() const;
    QStringList mimeTypes() const;
    QMimeData* mimeData(const QModelIndexList&) const;
    bool hasChildren(const QModelIndex&) const;
    QSize span(const QModelIndex&) const;
    void sort(int,Qt::SortOrder);
    void fetchMore(const QModelIndex&);
    bool canFetchMore(const QModelIndex&) const;
    QModelIndex buddy(const QModelIndex&) const;
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    Qt::ItemFlags flags(const QModelIndex&) const;
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    bool setData(const QModelIndex&,const QVariant&,int);
    QVariant data(const QModelIndex&,int) const;
    void revert();
    bool submit();
    QModelIndex sibling(int,int,const QModelIndex&) const;
    QVariant headerData(int,Qt::Orientation,int) const;
    bool removeRows(int,int,const QModelIndex&);
    bool removeColumns(int,int,const QModelIndex&);
    bool insertRows(int,int,const QModelIndex&);
    bool insertColumns(int,int,const QModelIndex&);
    void setSourceModel(QAbstractItemModel*);
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    QItemSelection mapSelectionToSource(const QItemSelection&) const;
    QItemSelection mapSelectionFromSource(const QItemSelection&) const;
    bool dropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);
    int rowCount(const QModelIndex&) const;
    QModelIndex parent(const QModelIndex&) const;
    QModelIndex mapToSource(const QModelIndex&) const;
    QModelIndex mapFromSource(const QModelIndex&) const;
    QModelIndex index(int,int,const QModelIndex&) const;
    int columnCount(const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQIdentityProxyModel(const sipQIdentityProxyModel &);
    sipQIdentityProxyModel &operator = (const sipQIdentityProxyModel &);

    char sipPyMethods[46];
};

sipQIdentityProxyModel::sipQIdentityProxyModel(QObject*a0): QIdentityProxyModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQIdentityProxyModel::~sipQIdentityProxyModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQIdentityProxyModel::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QIdentityProxyModel);
}

int sipQIdentityProxyModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QIdentityProxyModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QIdentityProxyModel,_c,_id,_a);

    return _id;
}

void *sipQIdentityProxyModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QIdentityProxyModel, _clname, &sipCpp) ? sipCpp : QIdentityProxyModel::qt_metacast(_clname));
}

void sipQIdentityProxyModel::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QIdentityProxyModel::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QIdentityProxyModel::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QIdentityProxyModel::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QIdentityProxyModel::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QIdentityProxyModel::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QIdentityProxyModel::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQIdentityProxyModel::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QIdentityProxyModel::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::moveColumns(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_moveColumns);

    if (!sipMeth)
        return QIdentityProxyModel::moveColumns(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int,const QModelIndex&,int);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_59(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQIdentityProxyModel::moveRows(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_moveRows);

    if (!sipMeth)
        return QIdentityProxyModel::moveRows(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int,const QModelIndex&,int);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_59(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QHash<int,QByteArray> sipQIdentityProxyModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_roleNames);

    if (!sipMeth)
        return QIdentityProxyModel::roleNames();

    extern QHash<int,QByteArray> sipVH_QtCore_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_60(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

Qt::DropActions sipQIdentityProxyModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_supportedDragActions);

    if (!sipMeth)
        return QIdentityProxyModel::supportedDragActions();

    extern Qt::DropActions sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_18(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIdentityProxyModel::canDropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_canDropMimeData);

    if (!sipMeth)
        return QIdentityProxyModel::canDropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

Qt::DropActions sipQIdentityProxyModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return QIdentityProxyModel::supportedDropActions();

    extern Qt::DropActions sipVH_QtCore_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_18(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

QStringList sipQIdentityProxyModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return QIdentityProxyModel::mimeTypes();

    extern QStringList sipVH_QtCore_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_27(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

QMimeData* sipQIdentityProxyModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return QIdentityProxyModel::mimeData(a0);

    extern QMimeData* sipVH_QtCore_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QModelIndex>&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_34(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::hasChildren(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_hasChildren);

    if (!sipMeth)
        return QIdentityProxyModel::hasChildren(a0);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QSize sipQIdentityProxyModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return QIdentityProxyModel::span(a0);

    extern QSize sipVH_QtCore_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_29(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQIdentityProxyModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
        QIdentityProxyModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::SortOrder);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_19(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQIdentityProxyModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
        QIdentityProxyModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_32(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return QIdentityProxyModel::canFetchMore(a0);

    extern bool sipVH_QtCore_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_31(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QModelIndex sipQIdentityProxyModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return QIdentityProxyModel::buddy(a0);

    extern QModelIndex sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return QIdentityProxyModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QMap<int,QVariant>&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_56(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

Qt::ItemFlags sipQIdentityProxyModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return QIdentityProxyModel::flags(a0);

    extern Qt::ItemFlags sipVH_QtCore_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_21(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QMap<int,QVariant> sipQIdentityProxyModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return QIdentityProxyModel::itemData(a0);

    extern QMap<int,QVariant> sipVH_QtCore_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_57(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return QIdentityProxyModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,const QVariant&,int);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_35(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3);
}

bool sipQIdentityProxyModel::setData(const QModelIndex& a0,const QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return QIdentityProxyModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QVariant&,int);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_22(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

QVariant sipQIdentityProxyModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return QIdentityProxyModel::data(a0,a1);

    extern QVariant sipVH_QtCore_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_23(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

void sipQIdentityProxyModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
        QIdentityProxyModel::revert();
        return;
    }

    extern void sipVH_QtCore_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_11(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

bool sipQIdentityProxyModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return QIdentityProxyModel::submit();

    extern bool sipVH_QtCore_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_7(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth);
}

QModelIndex sipQIdentityProxyModel::sibling(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_sibling);

    if (!sipMeth)
        return QIdentityProxyModel::sibling(a0,a1,a2);

    extern QModelIndex sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

QVariant sipQIdentityProxyModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return QIdentityProxyModel::headerData(a0,a1,a2);

    extern QVariant sipVH_QtCore_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,int);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_36(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQIdentityProxyModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return QIdentityProxyModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQIdentityProxyModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return QIdentityProxyModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQIdentityProxyModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return QIdentityProxyModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQIdentityProxyModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return QIdentityProxyModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_20(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

void sipQIdentityProxyModel::setSourceModel(QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_setSourceModel);

    if (!sipMeth)
    {
        QIdentityProxyModel::setSourceModel(a0);
        return;
    }

    extern void sipVH_QtCore_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemModel*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_40(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QModelIndexList sipQIdentityProxyModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return QIdentityProxyModel::match(a0,a1,a2,a3,a4);

    extern QList<QModelIndex> sipVH_QtCore_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_28(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QItemSelection sipQIdentityProxyModel::mapSelectionToSource(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_mapSelectionToSource);

    if (!sipMeth)
        return QIdentityProxyModel::mapSelectionToSource(a0);

    extern QItemSelection sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_39(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QItemSelection sipQIdentityProxyModel::mapSelectionFromSource(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_mapSelectionFromSource);

    if (!sipMeth)
        return QIdentityProxyModel::mapSelectionFromSource(a0);

    extern QItemSelection sipVH_QtCore_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_39(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQIdentityProxyModel::dropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return QIdentityProxyModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_33(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

int sipQIdentityProxyModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_rowCount);

    if (!sipMeth)
        return QIdentityProxyModel::rowCount(a0);

    extern int sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_24(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QModelIndex sipQIdentityProxyModel::parent(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_parent);

    if (!sipMeth)
        return QIdentityProxyModel::parent(a0);

    extern QModelIndex sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QModelIndex sipQIdentityProxyModel::mapToSource(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_mapToSource);

    if (!sipMeth)
        return QIdentityProxyModel::mapToSource(a0);

    extern QModelIndex sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QModelIndex sipQIdentityProxyModel::mapFromSource(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,NULL,sipName_mapFromSource);

    if (!sipMeth)
        return QIdentityProxyModel::mapFromSource(a0);

    extern QModelIndex sipVH_QtCore_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_30(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QModelIndex sipQIdentityProxyModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return QIdentityProxyModel::index(a0,a1,a2);

    extern QModelIndex sipVH_QtCore_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_17(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1, a2);
}

int sipQIdentityProxyModel::columnCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_columnCount);

    if (!sipMeth)
        return QIdentityProxyModel::columnCount(a0);

    extern int sipVH_QtCore_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_24(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QObject* sipQIdentityProxyModel::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQIdentityProxyModel::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQIdentityProxyModel::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQIdentityProxyModel::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQIdentityProxyModel::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQIdentityProxyModel::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQIdentityProxyModel::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQIdentityProxyModel::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQIdentityProxyModel::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQIdentityProxyModel::sipProtect_encodeData(const QModelIndexList& a0,QDataStream& a1) const
{
    QAbstractItemModel::encodeData(a0,a1);
}

bool sipQIdentityProxyModel::sipProtect_decodeData(int a0,int a1,const QModelIndex& a2,QDataStream& a3)
{
    return QAbstractItemModel::decodeData(a0,a1,a2,a3);
}

void sipQIdentityProxyModel::sipProtect_beginInsertRows(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginInsertRows(a0,a1,a2);
}

void sipQIdentityProxyModel::sipProtect_endInsertRows()
{
    QAbstractItemModel::endInsertRows();
}

void sipQIdentityProxyModel::sipProtect_beginRemoveRows(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginRemoveRows(a0,a1,a2);
}

void sipQIdentityProxyModel::sipProtect_endRemoveRows()
{
    QAbstractItemModel::endRemoveRows();
}

void sipQIdentityProxyModel::sipProtect_beginInsertColumns(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginInsertColumns(a0,a1,a2);
}

void sipQIdentityProxyModel::sipProtect_endInsertColumns()
{
    QAbstractItemModel::endInsertColumns();
}

void sipQIdentityProxyModel::sipProtect_beginRemoveColumns(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginRemoveColumns(a0,a1,a2);
}

void sipQIdentityProxyModel::sipProtect_endRemoveColumns()
{
    QAbstractItemModel::endRemoveColumns();
}

QModelIndexList sipQIdentityProxyModel::sipProtect_persistentIndexList() const
{
    return QAbstractItemModel::persistentIndexList();
}

void sipQIdentityProxyModel::sipProtect_changePersistentIndex(const QModelIndex& a0,const QModelIndex& a1)
{
    QAbstractItemModel::changePersistentIndex(a0,a1);
}

void sipQIdentityProxyModel::sipProtect_changePersistentIndexList(const QModelIndexList& a0,const QModelIndexList& a1)
{
    QAbstractItemModel::changePersistentIndexList(a0,a1);
}

QModelIndex sipQIdentityProxyModel::sipProtect_createIndex(int a0,int a1,void*a2) const
{
    return QAbstractItemModel::createIndex(a0,a1,a2);
}

bool sipQIdentityProxyModel::sipProtect_beginMoveRows(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    return QAbstractItemModel::beginMoveRows(a0,a1,a2,a3,a4);
}

void sipQIdentityProxyModel::sipProtect_endMoveRows()
{
    QAbstractItemModel::endMoveRows();
}

bool sipQIdentityProxyModel::sipProtect_beginMoveColumns(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    return QAbstractItemModel::beginMoveColumns(a0,a1,a2,a3,a4);
}

void sipQIdentityProxyModel::sipProtect_endMoveColumns()
{
    QAbstractItemModel::endMoveColumns();
}

void sipQIdentityProxyModel::sipProtect_beginResetModel()
{
    QAbstractItemModel::beginResetModel();
}

void sipQIdentityProxyModel::sipProtect_endResetModel()
{
    QAbstractItemModel::endResetModel();
}

void sipQIdentityProxyModel::sipProtect_resetInternalData()
{
    QAbstractProxyModel::resetInternalData();
}


PyDoc_STRVAR(doc_QIdentityProxyModel_sender, "QIdentityProxyModel.sender() -> QObject");

extern "C" {static PyObject *meth_QIdentityProxyModel_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIdentityProxyModel, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_sender, doc_QIdentityProxyModel_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_receivers, "QIdentityProxyModel.receivers(signal) -> int");

extern "C" {static PyObject *meth_QIdentityProxyModel_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1281 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_receivers, doc_QIdentityProxyModel_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_timerEvent, "QIdentityProxyModel.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QIdentityProxyModel_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_timerEvent, doc_QIdentityProxyModel_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_childEvent, "QIdentityProxyModel.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QIdentityProxyModel_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_childEvent, doc_QIdentityProxyModel_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_customEvent, "QIdentityProxyModel.customEvent(QEvent)");

extern "C" {static PyObject *meth_QIdentityProxyModel_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_customEvent, doc_QIdentityProxyModel_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_connectNotify, "QIdentityProxyModel.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QIdentityProxyModel_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_connectNotify, doc_QIdentityProxyModel_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_disconnectNotify, "QIdentityProxyModel.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QIdentityProxyModel_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_disconnectNotify, doc_QIdentityProxyModel_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_senderSignalIndex, "QIdentityProxyModel.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QIdentityProxyModel_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIdentityProxyModel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_senderSignalIndex, doc_QIdentityProxyModel_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_isSignalConnected, "QIdentityProxyModel.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_isSignalConnected, doc_QIdentityProxyModel_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_encodeData, "QIdentityProxyModel.encodeData(list-of-QModelIndex, QDataStream)");

extern "C" {static PyObject *meth_QIdentityProxyModel_encodeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_encodeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndexList* a0;
        int a0State = 0;
        QDataStream* a1;
        const sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State, sipType_QDataStream, &a1))
        {
            sipCpp->sipProtect_encodeData(*a0,*a1);
            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_encodeData, doc_QIdentityProxyModel_encodeData);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_decodeData, "QIdentityProxyModel.decodeData(int, int, QModelIndex, QDataStream) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_decodeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_decodeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QModelIndex* a2;
        QDataStream* a3;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiiJ9J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2, sipType_QDataStream, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_decodeData(a0,a1,*a2,*a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_decodeData, doc_QIdentityProxyModel_decodeData);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_beginInsertRows, "QIdentityProxyModel.beginInsertRows(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QIdentityProxyModel_beginInsertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_beginInsertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_beginInsertRows(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_beginInsertRows, doc_QIdentityProxyModel_beginInsertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_endInsertRows, "QIdentityProxyModel.endInsertRows()");

extern "C" {static PyObject *meth_QIdentityProxyModel_endInsertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_endInsertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIdentityProxyModel, &sipCpp))
        {
            sipCpp->sipProtect_endInsertRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_endInsertRows, doc_QIdentityProxyModel_endInsertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_beginRemoveRows, "QIdentityProxyModel.beginRemoveRows(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QIdentityProxyModel_beginRemoveRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_beginRemoveRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_beginRemoveRows(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_beginRemoveRows, doc_QIdentityProxyModel_beginRemoveRows);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_endRemoveRows, "QIdentityProxyModel.endRemoveRows()");

extern "C" {static PyObject *meth_QIdentityProxyModel_endRemoveRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_endRemoveRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIdentityProxyModel, &sipCpp))
        {
            sipCpp->sipProtect_endRemoveRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_endRemoveRows, doc_QIdentityProxyModel_endRemoveRows);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_beginInsertColumns, "QIdentityProxyModel.beginInsertColumns(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QIdentityProxyModel_beginInsertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_beginInsertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_beginInsertColumns(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_beginInsertColumns, doc_QIdentityProxyModel_beginInsertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_endInsertColumns, "QIdentityProxyModel.endInsertColumns()");

extern "C" {static PyObject *meth_QIdentityProxyModel_endInsertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_endInsertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIdentityProxyModel, &sipCpp))
        {
            sipCpp->sipProtect_endInsertColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_endInsertColumns, doc_QIdentityProxyModel_endInsertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_beginRemoveColumns, "QIdentityProxyModel.beginRemoveColumns(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QIdentityProxyModel_beginRemoveColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_beginRemoveColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_beginRemoveColumns(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_beginRemoveColumns, doc_QIdentityProxyModel_beginRemoveColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_endRemoveColumns, "QIdentityProxyModel.endRemoveColumns()");

extern "C" {static PyObject *meth_QIdentityProxyModel_endRemoveColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_endRemoveColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIdentityProxyModel, &sipCpp))
        {
            sipCpp->sipProtect_endRemoveColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_endRemoveColumns, doc_QIdentityProxyModel_endRemoveColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_persistentIndexList, "QIdentityProxyModel.persistentIndexList() -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_persistentIndexList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_persistentIndexList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIdentityProxyModel, &sipCpp))
        {
            QModelIndexList*sipRes;

            sipRes = new QModelIndexList(sipCpp->sipProtect_persistentIndexList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_persistentIndexList, doc_QIdentityProxyModel_persistentIndexList);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_changePersistentIndex, "QIdentityProxyModel.changePersistentIndex(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QIdentityProxyModel_changePersistentIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_changePersistentIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp->sipProtect_changePersistentIndex(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_changePersistentIndex, doc_QIdentityProxyModel_changePersistentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_changePersistentIndexList, "QIdentityProxyModel.changePersistentIndexList(list-of-QModelIndex, list-of-QModelIndex)");

extern "C" {static PyObject *meth_QIdentityProxyModel_changePersistentIndexList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_changePersistentIndexList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndexList* a0;
        int a0State = 0;
        const QModelIndexList* a1;
        int a1State = 0;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State, sipType_QList_0100QModelIndex,&a1, &a1State))
        {
            sipCpp->sipProtect_changePersistentIndexList(*a0,*a1);
            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);
            sipReleaseType(const_cast<QModelIndexList *>(a1),sipType_QList_0100QModelIndex,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_changePersistentIndexList, doc_QIdentityProxyModel_changePersistentIndexList);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_createIndex, "QIdentityProxyModel.createIndex(int, int, object object=0) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_createIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_createIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        PyObject * a2 = 0;
        const sipQIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|P0", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, &a2))
        {
            QModelIndex*sipRes = 0;

#line 194 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qabstractitemmodel.sip"
        // The Qt API is broken (and won't be fixed as it would break binary
        // compatibility) regarding the internal id of a model index on different
        // architectures (32 vs 64 bits).  We choose to work around the breakage as it
        // is fairly subtle and continues to catch people out.  Instead of letting Qt
        // convert betweed an integer id and a pointer id (the internal format used by
        // Qt) we let Python do it.
        
        void *ptr;
        
        if (a2)
        {
            // Try and convert it to a Python long and fallback to the object's
            // address if it fails.
            ptr = PyLong_AsVoidPtr(a2);
        
            if (PyErr_Occurred())
            {
                PyErr_Clear();
                ptr = a2;
            }
        }
        else
        {
            ptr = 0;
        }
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = new QModelIndex(sipCpp->createIndex(a0, a1, ptr));
        #else
        sipRes = new QModelIndex(sipCpp->sipProtect_createIndex(a0, a1, ptr));
        #endif
#line 1920 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQIdentityProxyModel.cpp"

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_createIndex, doc_QIdentityProxyModel_createIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_beginMoveRows, "QIdentityProxyModel.beginMoveRows(QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_beginMoveRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_beginMoveRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        const QModelIndex* a3;
        int a4;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9iiJ9i", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_beginMoveRows(*a0,a1,a2,*a3,a4);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_beginMoveRows, doc_QIdentityProxyModel_beginMoveRows);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_endMoveRows, "QIdentityProxyModel.endMoveRows()");

extern "C" {static PyObject *meth_QIdentityProxyModel_endMoveRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_endMoveRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIdentityProxyModel, &sipCpp))
        {
            sipCpp->sipProtect_endMoveRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_endMoveRows, doc_QIdentityProxyModel_endMoveRows);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_beginMoveColumns, "QIdentityProxyModel.beginMoveColumns(QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_beginMoveColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_beginMoveColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        const QModelIndex* a3;
        int a4;
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9iiJ9i", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_beginMoveColumns(*a0,a1,a2,*a3,a4);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_beginMoveColumns, doc_QIdentityProxyModel_beginMoveColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_endMoveColumns, "QIdentityProxyModel.endMoveColumns()");

extern "C" {static PyObject *meth_QIdentityProxyModel_endMoveColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_endMoveColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIdentityProxyModel, &sipCpp))
        {
            sipCpp->sipProtect_endMoveColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_endMoveColumns, doc_QIdentityProxyModel_endMoveColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_beginResetModel, "QIdentityProxyModel.beginResetModel()");

extern "C" {static PyObject *meth_QIdentityProxyModel_beginResetModel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_beginResetModel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIdentityProxyModel, &sipCpp))
        {
            sipCpp->sipProtect_beginResetModel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_beginResetModel, doc_QIdentityProxyModel_beginResetModel);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_endResetModel, "QIdentityProxyModel.endResetModel()");

extern "C" {static PyObject *meth_QIdentityProxyModel_endResetModel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_endResetModel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIdentityProxyModel, &sipCpp))
        {
            sipCpp->sipProtect_endResetModel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_endResetModel, doc_QIdentityProxyModel_endResetModel);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_resetInternalData, "QIdentityProxyModel.resetInternalData()");

extern "C" {static PyObject *meth_QIdentityProxyModel_resetInternalData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_resetInternalData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQIdentityProxyModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QIdentityProxyModel, &sipCpp))
        {
            sipCpp->sipProtect_resetInternalData();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_resetInternalData, doc_QIdentityProxyModel_resetInternalData);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_columnCount, "QIdentityProxyModel.columnCount(QModelIndex parent=QModelIndex()) -> int");

extern "C" {static PyObject *meth_QIdentityProxyModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::columnCount(*a0) : sipCpp->columnCount(*a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_columnCount, doc_QIdentityProxyModel_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_index, "QIdentityProxyModel.index(int, int, QModelIndex parent=QModelIndex()) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        const QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QIdentityProxyModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_index, doc_QIdentityProxyModel_index);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_mapFromSource, "QIdentityProxyModel.mapFromSource(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_mapFromSource(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_mapFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QIdentityProxyModel::mapFromSource(*a0) : sipCpp->mapFromSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_mapFromSource, doc_QIdentityProxyModel_mapFromSource);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_mapToSource, "QIdentityProxyModel.mapToSource(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_mapToSource(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_mapToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QIdentityProxyModel::mapToSource(*a0) : sipCpp->mapToSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_mapToSource, doc_QIdentityProxyModel_mapToSource);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_parent, "QIdentityProxyModel.parent(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QIdentityProxyModel::parent(*a0) : sipCpp->parent(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_parent, doc_QIdentityProxyModel_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_rowCount, "QIdentityProxyModel.rowCount(QModelIndex parent=QModelIndex()) -> int");

extern "C" {static PyObject *meth_QIdentityProxyModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::rowCount(*a0) : sipCpp->rowCount(*a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_rowCount, doc_QIdentityProxyModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_dropMimeData, "QIdentityProxyModel.dropMimeData(QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData* a0;
        Qt::DropAction a1;
        int a2;
        int a3;
        const QModelIndex* a4;
        QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_dropMimeData, doc_QIdentityProxyModel_dropMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_mapSelectionFromSource, "QIdentityProxyModel.mapSelectionFromSource(QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QIdentityProxyModel_mapSelectionFromSource(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_mapSelectionFromSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
            QItemSelection*sipRes;

            sipRes = new QItemSelection((sipSelfWasArg ? sipCpp->QIdentityProxyModel::mapSelectionFromSource(*a0) : sipCpp->mapSelectionFromSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_mapSelectionFromSource, doc_QIdentityProxyModel_mapSelectionFromSource);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_mapSelectionToSource, "QIdentityProxyModel.mapSelectionToSource(QItemSelection) -> QItemSelection");

extern "C" {static PyObject *meth_QIdentityProxyModel_mapSelectionToSource(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_mapSelectionToSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QItemSelection, &a0))
        {
            QItemSelection*sipRes;

            sipRes = new QItemSelection((sipSelfWasArg ? sipCpp->QIdentityProxyModel::mapSelectionToSource(*a0) : sipCpp->mapSelectionToSource(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_mapSelectionToSource, doc_QIdentityProxyModel_mapSelectionToSource);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_match, "QIdentityProxyModel.match(QModelIndex, int, QVariant, int hits=1, Qt.MatchFlags flags=Qt.MatchStartsWith|Qt.MatchWrap) -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_match(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_match(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        const QVariant* a2;
        int a2State = 0;
        int a3 = 1;
        Qt::MatchFlags a4def = Qt::MatchStartsWith|Qt::MatchWrap;
        Qt::MatchFlags* a4 = &a4def;
        int a4State = 0;
        const QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_hits,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9iJ1|iJ1", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, sipType_QModelIndex, &a0, &a1, sipType_QVariant, &a2, &a2State, &a3, sipType_Qt_MatchFlags, &a4, &a4State))
        {
            QModelIndexList*sipRes;

            sipRes = new QModelIndexList((sipSelfWasArg ? sipCpp->QIdentityProxyModel::match(*a0,a1,*a2,a3,*a4) : sipCpp->match(*a0,a1,*a2,a3,*a4)));
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);
            sipReleaseType(a4,sipType_Qt_MatchFlags,a4State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_match, doc_QIdentityProxyModel_match);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_setSourceModel, "QIdentityProxyModel.setSourceModel(QAbstractItemModel)");

extern "C" {static PyObject *meth_QIdentityProxyModel_setSourceModel(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_setSourceModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel* a0;
        PyObject *a0Keep;
        QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp->QIdentityProxyModel::setSourceModel(a0) : sipCpp->setSourceModel(a0));

            sipKeepReference(sipSelf, -4, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_setSourceModel, doc_QIdentityProxyModel_setSourceModel);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_insertColumns, "QIdentityProxyModel.insertColumns(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_insertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_insertColumns, doc_QIdentityProxyModel_insertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_insertRows, "QIdentityProxyModel.insertRows(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_insertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_insertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_insertRows, doc_QIdentityProxyModel_insertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_removeColumns, "QIdentityProxyModel.removeColumns(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_removeColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_removeColumns, doc_QIdentityProxyModel_removeColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_removeRows, "QIdentityProxyModel.removeRows(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QIdentityProxyModel_removeRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_removeRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        QIdentityProxyModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QIdentityProxyModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_removeRows, doc_QIdentityProxyModel_removeRows);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_headerData, "QIdentityProxyModel.headerData(int, Qt.Orientation, int) -> QVariant");

extern "C" {static PyObject *meth_QIdentityProxyModel_headerData(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_headerData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::Orientation a1;
        int a2;
        const QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiEi", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QIdentityProxyModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_headerData, doc_QIdentityProxyModel_headerData);

    return NULL;
}


PyDoc_STRVAR(doc_QIdentityProxyModel_sibling, "QIdentityProxyModel.sibling(int, int, QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QIdentityProxyModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QIdentityProxyModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex* a2;
        const QIdentityProxyModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QIdentityProxyModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QIdentityProxyModel::sibling(a0,a1,*a2) : sipCpp->sibling(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QIdentityProxyModel, sipName_sibling, doc_QIdentityProxyModel_sibling);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QIdentityProxyModel(void *, const sipTypeDef *);}
static void *cast_QIdentityProxyModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QIdentityProxyModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractProxyModel)->ctd_cast((QAbstractProxyModel *)(QIdentityProxyModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QIdentityProxyModel(void *, int);}
static void release_QIdentityProxyModel(void *sipCppV,int)
{
    QIdentityProxyModel *sipCpp = reinterpret_cast<QIdentityProxyModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QIdentityProxyModel(sipSimpleWrapper *);}
static void dealloc_QIdentityProxyModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQIdentityProxyModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QIdentityProxyModel(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QIdentityProxyModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QIdentityProxyModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQIdentityProxyModel *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQIdentityProxyModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QIdentityProxyModel[] = {{10, 255, 1}};


static PyMethodDef methods_QIdentityProxyModel[] = {
    {SIP_MLNAME_CAST(sipName_beginInsertColumns), (PyCFunction)meth_QIdentityProxyModel_beginInsertColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginInsertRows), (PyCFunction)meth_QIdentityProxyModel_beginInsertRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginMoveColumns), (PyCFunction)meth_QIdentityProxyModel_beginMoveColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginMoveRows), (PyCFunction)meth_QIdentityProxyModel_beginMoveRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginRemoveColumns), (PyCFunction)meth_QIdentityProxyModel_beginRemoveColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginRemoveRows), (PyCFunction)meth_QIdentityProxyModel_beginRemoveRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginResetModel), (PyCFunction)meth_QIdentityProxyModel_beginResetModel, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_changePersistentIndex), (PyCFunction)meth_QIdentityProxyModel_changePersistentIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_changePersistentIndexList), (PyCFunction)meth_QIdentityProxyModel_changePersistentIndexList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QIdentityProxyModel_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_columnCount), (PyCFunction)meth_QIdentityProxyModel_columnCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QIdentityProxyModel_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createIndex), (PyCFunction)meth_QIdentityProxyModel_createIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QIdentityProxyModel_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_decodeData), (PyCFunction)meth_QIdentityProxyModel_decodeData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QIdentityProxyModel_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QIdentityProxyModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_encodeData), (PyCFunction)meth_QIdentityProxyModel_encodeData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endInsertColumns), (PyCFunction)meth_QIdentityProxyModel_endInsertColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endInsertRows), (PyCFunction)meth_QIdentityProxyModel_endInsertRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endMoveColumns), (PyCFunction)meth_QIdentityProxyModel_endMoveColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endMoveRows), (PyCFunction)meth_QIdentityProxyModel_endMoveRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endRemoveColumns), (PyCFunction)meth_QIdentityProxyModel_endRemoveColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endRemoveRows), (PyCFunction)meth_QIdentityProxyModel_endRemoveRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endResetModel), (PyCFunction)meth_QIdentityProxyModel_endResetModel, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_headerData), meth_QIdentityProxyModel_headerData, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_headerData)},
    {SIP_MLNAME_CAST(sipName_index), (PyCFunction)meth_QIdentityProxyModel_index, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_index)},
    {SIP_MLNAME_CAST(sipName_insertColumns), (PyCFunction)meth_QIdentityProxyModel_insertColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRows), (PyCFunction)meth_QIdentityProxyModel_insertRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_insertRows)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QIdentityProxyModel_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mapFromSource), meth_QIdentityProxyModel_mapFromSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_mapFromSource)},
    {SIP_MLNAME_CAST(sipName_mapSelectionFromSource), meth_QIdentityProxyModel_mapSelectionFromSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_mapSelectionFromSource)},
    {SIP_MLNAME_CAST(sipName_mapSelectionToSource), meth_QIdentityProxyModel_mapSelectionToSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_mapSelectionToSource)},
    {SIP_MLNAME_CAST(sipName_mapToSource), meth_QIdentityProxyModel_mapToSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_mapToSource)},
    {SIP_MLNAME_CAST(sipName_match), (PyCFunction)meth_QIdentityProxyModel_match, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_match)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QIdentityProxyModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_parent)},
    {SIP_MLNAME_CAST(sipName_persistentIndexList), (PyCFunction)meth_QIdentityProxyModel_persistentIndexList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QIdentityProxyModel_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removeColumns), (PyCFunction)meth_QIdentityProxyModel_removeColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_removeColumns)},
    {SIP_MLNAME_CAST(sipName_removeRows), (PyCFunction)meth_QIdentityProxyModel_removeRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_removeRows)},
    {SIP_MLNAME_CAST(sipName_resetInternalData), (PyCFunction)meth_QIdentityProxyModel_resetInternalData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_rowCount), (PyCFunction)meth_QIdentityProxyModel_rowCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QIdentityProxyModel_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QIdentityProxyModel_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setSourceModel), meth_QIdentityProxyModel_setSourceModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_setSourceModel)},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QIdentityProxyModel_sibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QIdentityProxyModel_sibling)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QIdentityProxyModel_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

PyDoc_STRVAR(doc_QIdentityProxyModel, "\1QIdentityProxyModel(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QIdentityProxyModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QIdentityProxyModel,
        {0}
    },
    {
        sipNameNr_QIdentityProxyModel,
        {0, 0, 1},
        47, methods_QIdentityProxyModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QIdentityProxyModel,
    -1,
    -1,
    supers_QIdentityProxyModel,
    0,
    init_type_QIdentityProxyModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QIdentityProxyModel,
    0,
    0,
    0,
    release_QIdentityProxyModel,
    cast_QIdentityProxyModel,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QIdentityProxyModel::staticMetaObject,
    0,
    0,
    0
};
