/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qsettings.sip"
#include <qsettings.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"

#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"


class sipQSettings : public QSettings
{
public:
    sipQSettings(const QString&,const QString&,QObject*);
    sipQSettings(QSettings::Scope,const QString&,const QString&,QObject*);
    sipQSettings(QSettings::Format,QSettings::Scope,const QString&,const QString&,QObject*);
    sipQSettings(const QString&,QSettings::Format,QObject*);
    sipQSettings(QObject*);
    virtual ~sipQSettings();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    bool sipProtectVirt_event(bool,QEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSettings(const sipQSettings &);
    sipQSettings &operator = (const sipQSettings &);

    char sipPyMethods[7];
};

sipQSettings::sipQSettings(const QString& a0,const QString& a1,QObject*a2): QSettings(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings(QSettings::Scope a0,const QString& a1,const QString& a2,QObject*a3): QSettings(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings(QSettings::Format a0,QSettings::Scope a1,const QString& a2,const QString& a3,QObject*a4): QSettings(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings(const QString& a0,QSettings::Format a1,QObject*a2): QSettings(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings(QObject*a0): QSettings(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::~sipQSettings()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSettings::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtCore_qt_metaobject(sipPySelf,sipType_QSettings);
}

int sipQSettings::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSettings::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSettings,_c,_id,_a);

    return _id;
}

void *sipQSettings::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtCore_qt_metacast(sipPySelf, sipType_QSettings, _clname, &sipCpp) ? sipCpp : QSettings::qt_metacast(_clname));
}

void sipQSettings::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSettings::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSettings::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSettings::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_46(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSettings::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSettings::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_25(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSettings::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSettings::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_47(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

void sipQSettings::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSettings::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    sipVH_QtCore_9(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

bool sipQSettings::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSettings::eventFilter(a0,a1);

    extern bool sipVH_QtCore_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_26(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0, a1);
}

bool sipQSettings::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSettings::event(a0);

    extern bool sipVH_QtCore_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);
    extern void sipVEH_QtCore_PyQt5(sipSimpleWrapper *, sip_gilstate_t);

    return sipVH_QtCore_5(sipGILState, sipVEH_QtCore_PyQt5, sipPySelf, sipMeth, a0);
}

QObject* sipQSettings::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQSettings::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQSettings::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQSettings::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQSettings::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQSettings::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQSettings::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQSettings::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQSettings::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

bool sipQSettings::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QSettings::event(a0) : event(a0));
}


PyDoc_STRVAR(doc_QSettings_sender, "QSettings.sender() -> QObject");

extern "C" {static PyObject *meth_QSettings_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 409 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_sender, doc_QSettings_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_receivers, "QSettings.receivers(signal) -> int");

extern "C" {static PyObject *meth_QSettings_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 468 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_receivers, doc_QSettings_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_timerEvent, "QSettings.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QSettings_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSettings, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_timerEvent, doc_QSettings_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_childEvent, "QSettings.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QSettings_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSettings, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_childEvent, doc_QSettings_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_customEvent, "QSettings.customEvent(QEvent)");

extern "C" {static PyObject *meth_QSettings_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSettings, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_customEvent, doc_QSettings_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_connectNotify, "QSettings.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QSettings_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSettings, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_connectNotify, doc_QSettings_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_disconnectNotify, "QSettings.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QSettings_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSettings, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_disconnectNotify, doc_QSettings_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_senderSignalIndex, "QSettings.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QSettings_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_senderSignalIndex, doc_QSettings_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_isSignalConnected, "QSettings.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QSettings_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSettings, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_isSignalConnected, doc_QSettings_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_clear, "QSettings.clear()");

extern "C" {static PyObject *meth_QSettings_clear(PyObject *, PyObject *);}
static PyObject *meth_QSettings_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_clear, doc_QSettings_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_sync, "QSettings.sync()");

extern "C" {static PyObject *meth_QSettings_sync(PyObject *, PyObject *);}
static PyObject *meth_QSettings_sync(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            sipCpp->sync();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_sync, doc_QSettings_sync);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_status, "QSettings.status() -> QSettings.Status");

extern "C" {static PyObject *meth_QSettings_status(PyObject *, PyObject *);}
static PyObject *meth_QSettings_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            QSettings::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(sipRes,sipType_QSettings_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_status, doc_QSettings_status);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_beginGroup, "QSettings.beginGroup(str)");

extern "C" {static PyObject *meth_QSettings_beginGroup(PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->beginGroup(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_beginGroup, doc_QSettings_beginGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_endGroup, "QSettings.endGroup()");

extern "C" {static PyObject *meth_QSettings_endGroup(PyObject *, PyObject *);}
static PyObject *meth_QSettings_endGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            sipCpp->endGroup();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_endGroup, doc_QSettings_endGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_group, "QSettings.group() -> str");

extern "C" {static PyObject *meth_QSettings_group(PyObject *, PyObject *);}
static PyObject *meth_QSettings_group(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->group());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_group, doc_QSettings_group);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_beginReadArray, "QSettings.beginReadArray(str) -> int");

extern "C" {static PyObject *meth_QSettings_beginReadArray(PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginReadArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->beginReadArray(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_beginReadArray, doc_QSettings_beginReadArray);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_beginWriteArray, "QSettings.beginWriteArray(str, int size=-1)");

extern "C" {static PyObject *meth_QSettings_beginWriteArray(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginWriteArray(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        int a1 = -1;
        QSettings *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->beginWriteArray(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_beginWriteArray, doc_QSettings_beginWriteArray);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_endArray, "QSettings.endArray()");

extern "C" {static PyObject *meth_QSettings_endArray(PyObject *, PyObject *);}
static PyObject *meth_QSettings_endArray(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            sipCpp->endArray();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_endArray, doc_QSettings_endArray);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_setArrayIndex, "QSettings.setArrayIndex(int)");

extern "C" {static PyObject *meth_QSettings_setArrayIndex(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setArrayIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            sipCpp->setArrayIndex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setArrayIndex, doc_QSettings_setArrayIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_allKeys, "QSettings.allKeys() -> list-of-str");

extern "C" {static PyObject *meth_QSettings_allKeys(PyObject *, PyObject *);}
static PyObject *meth_QSettings_allKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->allKeys());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_allKeys, doc_QSettings_allKeys);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_childKeys, "QSettings.childKeys() -> list-of-str");

extern "C" {static PyObject *meth_QSettings_childKeys(PyObject *, PyObject *);}
static PyObject *meth_QSettings_childKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->childKeys());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_childKeys, doc_QSettings_childKeys);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_childGroups, "QSettings.childGroups() -> list-of-str");

extern "C" {static PyObject *meth_QSettings_childGroups(PyObject *, PyObject *);}
static PyObject *meth_QSettings_childGroups(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->childGroups());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_childGroups, doc_QSettings_childGroups);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_isWritable, "QSettings.isWritable() -> bool");

extern "C" {static PyObject *meth_QSettings_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QSettings_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWritable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_isWritable, doc_QSettings_isWritable);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_setValue, "QSettings.setValue(str, QVariant)");

extern "C" {static PyObject *meth_QSettings_setValue(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QVariant* a1;
        int a1State = 0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setValue(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setValue, doc_QSettings_setValue);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_value, "QSettings.value(str, QVariant defaultValue=None, object type=None) -> object");

extern "C" {static PyObject *meth_QSettings_value(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_value(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QVariant& a1def = QVariant();
        const QVariant* a1 = &a1def;
        int a1State = 0;
        PyObject * a2 = 0;
        const QSettings *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_defaultValue,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1P0", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State, &a2))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 73 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qsettings.sip"
        QVariant value;
        
        // QSettings has an internal mutex so release the GIL to avoid the possibility
        // of deadlocks.
        Py_BEGIN_ALLOW_THREADS
        value = sipCpp->value(*a0, *a1);
        Py_END_ALLOW_THREADS
        
        sipRes = pyqt5_from_qvariant_by_type(value, a2);
        
        sipIsErr = !sipRes;
#line 1142 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSettings.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_value, doc_QSettings_value);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_remove, "QSettings.remove(str)");

extern "C" {static PyObject *meth_QSettings_remove(PyObject *, PyObject *);}
static PyObject *meth_QSettings_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->remove(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_remove, doc_QSettings_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_contains, "QSettings.contains(str) -> bool");

extern "C" {static PyObject *meth_QSettings_contains(PyObject *, PyObject *);}
static PyObject *meth_QSettings_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_contains, doc_QSettings_contains);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_setFallbacksEnabled, "QSettings.setFallbacksEnabled(bool)");

extern "C" {static PyObject *meth_QSettings_setFallbacksEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setFallbacksEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            sipCpp->setFallbacksEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setFallbacksEnabled, doc_QSettings_setFallbacksEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_fallbacksEnabled, "QSettings.fallbacksEnabled() -> bool");

extern "C" {static PyObject *meth_QSettings_fallbacksEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSettings_fallbacksEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fallbacksEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_fallbacksEnabled, doc_QSettings_fallbacksEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_fileName, "QSettings.fileName() -> str");

extern "C" {static PyObject *meth_QSettings_fileName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_fileName, doc_QSettings_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_setPath, "QSettings.setPath(QSettings.Format, QSettings.Scope, str)");

extern "C" {static PyObject *meth_QSettings_setPath(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setPath(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSettings::Format a0;
        QSettings::Scope a1;
        const QString* a2;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "EEJ1", sipType_QSettings_Format, &a0, sipType_QSettings_Scope, &a1, sipType_QString,&a2, &a2State))
        {
            QSettings::setPath(a0,a1,*a2);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setPath, doc_QSettings_setPath);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_format, "QSettings.format() -> QSettings.Format");

extern "C" {static PyObject *meth_QSettings_format(PyObject *, PyObject *);}
static PyObject *meth_QSettings_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            QSettings::Format sipRes;

            sipRes = sipCpp->format();

            return sipConvertFromEnum(sipRes,sipType_QSettings_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_format, doc_QSettings_format);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_scope, "QSettings.scope() -> QSettings.Scope");

extern "C" {static PyObject *meth_QSettings_scope(PyObject *, PyObject *);}
static PyObject *meth_QSettings_scope(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            QSettings::Scope sipRes;

            sipRes = sipCpp->scope();

            return sipConvertFromEnum(sipRes,sipType_QSettings_Scope);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_scope, doc_QSettings_scope);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_organizationName, "QSettings.organizationName() -> str");

extern "C" {static PyObject *meth_QSettings_organizationName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_organizationName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->organizationName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_organizationName, doc_QSettings_organizationName);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_applicationName, "QSettings.applicationName() -> str");

extern "C" {static PyObject *meth_QSettings_applicationName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_applicationName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->applicationName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_applicationName, doc_QSettings_applicationName);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_setDefaultFormat, "QSettings.setDefaultFormat(QSettings.Format)");

extern "C" {static PyObject *meth_QSettings_setDefaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setDefaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSettings::Format a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QSettings_Format, &a0))
        {
            QSettings::setDefaultFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setDefaultFormat, doc_QSettings_setDefaultFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_defaultFormat, "QSettings.defaultFormat() -> QSettings.Format");

extern "C" {static PyObject *meth_QSettings_defaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSettings_defaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QSettings::Format sipRes;

            sipRes = QSettings::defaultFormat();

            return sipConvertFromEnum(sipRes,sipType_QSettings_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_defaultFormat, doc_QSettings_defaultFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_setIniCodec, "QSettings.setIniCodec(QTextCodec)\n"
    "QSettings.setIniCodec(str)");

extern "C" {static PyObject *meth_QSettings_setIniCodec(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setIniCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCodec* a0;
        PyObject *a0Keep;
        QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QSettings, &sipCpp, &a0Keep, sipType_QTextCodec, &a0))
        {
            sipCpp->setIniCodec(a0);

            sipKeepReference(sipSelf, -5, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char* a0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_QSettings, &sipCpp, &a0))
        {
            sipCpp->setIniCodec(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_setIniCodec, doc_QSettings_setIniCodec);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_iniCodec, "QSettings.iniCodec() -> QTextCodec");

extern "C" {static PyObject *meth_QSettings_iniCodec(PyObject *, PyObject *);}
static PyObject *meth_QSettings_iniCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSettings, &sipCpp))
        {
            QTextCodec*sipRes;

            sipRes = sipCpp->iniCodec();

            return sipConvertFromType(sipRes,sipType_QTextCodec,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_iniCodec, doc_QSettings_iniCodec);

    return NULL;
}


PyDoc_STRVAR(doc_QSettings_event, "QSettings.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QSettings_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSettings_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQSettings *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSettings, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSettings, sipName_event, doc_QSettings_event);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSettings(void *, const sipTypeDef *);}
static void *cast_QSettings(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSettings)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QSettings *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSettings(void *, int);}
static void release_QSettings(void *sipCppV,int)
{
    QSettings *sipCpp = reinterpret_cast<QSettings *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSettings(sipSimpleWrapper *);}
static void dealloc_QSettings(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSettings *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSettings(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSettings(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSettings(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSettings *sipCpp = 0;

    {
        const QString* a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_application,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1JH", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQSettings(*a0,*a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QSettings::Scope a0;
        const QString* a1;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        QObject* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_application,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EJ1|J1JH", sipType_QSettings_Scope, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QObject, &a3, sipOwner))
        {
            sipCpp = new sipQSettings(a0,*a1,*a2,a3);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QSettings::Format a0;
        QSettings::Scope a1;
        const QString* a2;
        int a2State = 0;
        const QString& a3def = QString();
        const QString* a3 = &a3def;
        int a3State = 0;
        QObject* a4 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_application,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EEJ1|J1JH", sipType_QSettings_Format, &a0, sipType_QSettings_Scope, &a1, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QObject, &a4, sipOwner))
        {
            sipCpp = new sipQSettings(a0,a1,*a2,*a3,a4);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QSettings::Format a1;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1E|JH", sipType_QString,&a0, &a0State, sipType_QSettings_Format, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQSettings(*a0,a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSettings(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSettings[] = {{162, 255, 1}};


static PyMethodDef methods_QSettings[] = {
    {SIP_MLNAME_CAST(sipName_allKeys), meth_QSettings_allKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_allKeys)},
    {SIP_MLNAME_CAST(sipName_applicationName), meth_QSettings_applicationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_applicationName)},
    {SIP_MLNAME_CAST(sipName_beginGroup), meth_QSettings_beginGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_beginGroup)},
    {SIP_MLNAME_CAST(sipName_beginReadArray), meth_QSettings_beginReadArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_beginReadArray)},
    {SIP_MLNAME_CAST(sipName_beginWriteArray), (PyCFunction)meth_QSettings_beginWriteArray, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSettings_beginWriteArray)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QSettings_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childGroups), meth_QSettings_childGroups, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_childGroups)},
    {SIP_MLNAME_CAST(sipName_childKeys), meth_QSettings_childKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_childKeys)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QSettings_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_clear)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QSettings_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contains), meth_QSettings_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_contains)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QSettings_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultFormat), meth_QSettings_defaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_defaultFormat)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QSettings_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endArray), meth_QSettings_endArray, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_endArray)},
    {SIP_MLNAME_CAST(sipName_endGroup), meth_QSettings_endGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_endGroup)},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QSettings_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSettings_event)},
    {SIP_MLNAME_CAST(sipName_fallbacksEnabled), meth_QSettings_fallbacksEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_fallbacksEnabled)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QSettings_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_fileName)},
    {SIP_MLNAME_CAST(sipName_format), meth_QSettings_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_format)},
    {SIP_MLNAME_CAST(sipName_group), meth_QSettings_group, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_group)},
    {SIP_MLNAME_CAST(sipName_iniCodec), meth_QSettings_iniCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_iniCodec)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QSettings_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QSettings_isWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_isWritable)},
    {SIP_MLNAME_CAST(sipName_organizationName), meth_QSettings_organizationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_organizationName)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QSettings_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_remove), meth_QSettings_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_remove)},
    {SIP_MLNAME_CAST(sipName_scope), meth_QSettings_scope, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_scope)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QSettings_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QSettings_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setArrayIndex), meth_QSettings_setArrayIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setArrayIndex)},
    {SIP_MLNAME_CAST(sipName_setDefaultFormat), meth_QSettings_setDefaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setDefaultFormat)},
    {SIP_MLNAME_CAST(sipName_setFallbacksEnabled), meth_QSettings_setFallbacksEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setFallbacksEnabled)},
    {SIP_MLNAME_CAST(sipName_setIniCodec), meth_QSettings_setIniCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setIniCodec)},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QSettings_setPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setPath)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QSettings_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_setValue)},
    {SIP_MLNAME_CAST(sipName_status), meth_QSettings_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_status)},
    {SIP_MLNAME_CAST(sipName_sync), meth_QSettings_sync, METH_VARARGS, SIP_MLDOC_CAST(doc_QSettings_sync)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QSettings_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_value), (PyCFunction)meth_QSettings_value, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSettings_value)}
};

static sipEnumMemberDef enummembers_QSettings[] = {
    {sipName_AccessError, static_cast<int>(QSettings::AccessError), 205},
    {sipName_FormatError, static_cast<int>(QSettings::FormatError), 205},
    {sipName_IniFormat, static_cast<int>(QSettings::IniFormat), 203},
    {sipName_InvalidFormat, static_cast<int>(QSettings::InvalidFormat), 203},
    {sipName_NativeFormat, static_cast<int>(QSettings::NativeFormat), 203},
    {sipName_NoError, static_cast<int>(QSettings::NoError), 205},
    {sipName_SystemScope, static_cast<int>(QSettings::SystemScope), 204},
    {sipName_UserScope, static_cast<int>(QSettings::UserScope), 204},
};

PyDoc_STRVAR(doc_QSettings, "\1QSettings(str, str application='', QObject parent=None)\n"
    "QSettings(QSettings.Scope, str, str application='', QObject parent=None)\n"
    "QSettings(QSettings.Format, QSettings.Scope, str, str application='', QObject parent=None)\n"
    "QSettings(str, QSettings.Format, QObject parent=None)\n"
    "QSettings(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QSettings = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSettings,
        {0}
    },
    {
        sipNameNr_QSettings,
        {0, 0, 1},
        40, methods_QSettings,
        8, enummembers_QSettings,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSettings,
    -1,
    -1,
    supers_QSettings,
    0,
    init_type_QSettings,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSettings,
    0,
    0,
    0,
    release_QSettings,
    cast_QSettings,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSettings::staticMetaObject,
    0,
    0,
    0
};
