/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:21 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 24 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtCore/qsysinfo.sip"
#include <qsysinfo.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtCore/sipQtCoreQSysInfo.cpp"



PyDoc_STRVAR(doc_QSysInfo_windowsVersion, "QSysInfo.windowsVersion() -> QSysInfo.WinVersion");

extern "C" {static PyObject *meth_QSysInfo_windowsVersion(PyObject *, PyObject *);}
static PyObject *meth_QSysInfo_windowsVersion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QSysInfo::WinVersion sipRes;

            sipRes = QSysInfo::windowsVersion();

            return sipConvertFromEnum(sipRes,sipType_QSysInfo_WinVersion);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSysInfo, sipName_windowsVersion, doc_QSysInfo_windowsVersion);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSysInfo(void *, const sipTypeDef *);}
static void *cast_QSysInfo(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QSysInfo)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSysInfo(void *, int);}
static void release_QSysInfo(void *sipCppV,int)
{
    delete reinterpret_cast<QSysInfo *>(sipCppV);
}


extern "C" {static void assign_QSysInfo(void *, SIP_SSIZE_T, const void *);}
static void assign_QSysInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QSysInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QSysInfo *>(sipSrc);
}


extern "C" {static void *array_QSysInfo(SIP_SSIZE_T);}
static void *array_QSysInfo(SIP_SSIZE_T sipNrElem)
{
    return new QSysInfo[sipNrElem];
}


extern "C" {static void *copy_QSysInfo(const void *, SIP_SSIZE_T);}
static void *copy_QSysInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSysInfo(reinterpret_cast<const QSysInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSysInfo(sipSimpleWrapper *);}
static void dealloc_QSysInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QSysInfo(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QSysInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSysInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QSysInfo *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QSysInfo();

            return sipCpp;
        }
    }

    {
        const QSysInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSysInfo, &a0))
        {
            sipCpp = new QSysInfo(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QSysInfo[] = {
    {SIP_MLNAME_CAST(sipName_windowsVersion), meth_QSysInfo_windowsVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSysInfo_windowsVersion)}
};

static sipEnumMemberDef enummembers_QSysInfo[] = {
    {sipName_BigEndian, static_cast<int>(QSysInfo::BigEndian), 235},
    {sipName_ByteOrder, static_cast<int>(QSysInfo::ByteOrder), 235},
    {sipName_LittleEndian, static_cast<int>(QSysInfo::LittleEndian), 235},
    {sipName_WV_2000, static_cast<int>(QSysInfo::WV_2000), 237},
    {sipName_WV_2003, static_cast<int>(QSysInfo::WV_2003), 237},
    {sipName_WV_32s, static_cast<int>(QSysInfo::WV_32s), 237},
    {sipName_WV_4_0, static_cast<int>(QSysInfo::WV_4_0), 237},
    {sipName_WV_5_0, static_cast<int>(QSysInfo::WV_5_0), 237},
    {sipName_WV_5_1, static_cast<int>(QSysInfo::WV_5_1), 237},
    {sipName_WV_5_2, static_cast<int>(QSysInfo::WV_5_2), 237},
    {sipName_WV_6_0, static_cast<int>(QSysInfo::WV_6_0), 237},
    {sipName_WV_6_1, static_cast<int>(QSysInfo::WV_6_1), 237},
    {sipName_WV_6_2, static_cast<int>(QSysInfo::WV_6_2), 237},
    {sipName_WV_6_3, static_cast<int>(QSysInfo::WV_6_3), 237},
    {sipName_WV_95, static_cast<int>(QSysInfo::WV_95), 237},
    {sipName_WV_98, static_cast<int>(QSysInfo::WV_98), 237},
    {sipName_WV_CE, static_cast<int>(QSysInfo::WV_CE), 237},
    {sipName_WV_CENET, static_cast<int>(QSysInfo::WV_CENET), 237},
    {sipName_WV_CE_5, static_cast<int>(QSysInfo::WV_CE_5), 237},
    {sipName_WV_CE_6, static_cast<int>(QSysInfo::WV_CE_6), 237},
    {sipName_WV_CE_based, static_cast<int>(QSysInfo::WV_CE_based), 237},
    {sipName_WV_DOS_based, static_cast<int>(QSysInfo::WV_DOS_based), 237},
    {sipName_WV_Me, static_cast<int>(QSysInfo::WV_Me), 237},
    {sipName_WV_NT, static_cast<int>(QSysInfo::WV_NT), 237},
    {sipName_WV_NT_based, static_cast<int>(QSysInfo::WV_NT_based), 237},
    {sipName_WV_VISTA, static_cast<int>(QSysInfo::WV_VISTA), 237},
    {sipName_WV_WINDOWS7, static_cast<int>(QSysInfo::WV_WINDOWS7), 237},
    {sipName_WV_WINDOWS8, static_cast<int>(QSysInfo::WV_WINDOWS8), 237},
    {sipName_WV_WINDOWS8_1, static_cast<int>(QSysInfo::WV_WINDOWS8_1), 237},
    {sipName_WV_XP, static_cast<int>(QSysInfo::WV_XP), 237},
    {sipName_WordSize, static_cast<int>(QSysInfo::WordSize), 236},
};


extern "C" {static PyObject *varget_QSysInfo_WindowsVersion(void *, PyObject *, PyObject *);}
static PyObject *varget_QSysInfo_WindowsVersion(void *, PyObject *, PyObject *)
{
    QSysInfo::WinVersion sipVal;
    sipVal = QSysInfo::WindowsVersion;

    return sipConvertFromEnum(sipVal, sipType_QSysInfo_WinVersion);
}

sipVariableDef variables_QSysInfo[] = {
    {ClassVariable, sipName_WindowsVersion, (PyMethodDef *)varget_QSysInfo_WindowsVersion, NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_QSysInfo, "\1QSysInfo()\n"
    "QSysInfo(QSysInfo)");


pyqt5ClassTypeDef sipTypeDef_QtCore_QSysInfo = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSysInfo,
        {0}
    },
    {
        sipNameNr_QSysInfo,
        {0, 0, 1},
        1, methods_QSysInfo,
        31, enummembers_QSysInfo,
        1, variables_QSysInfo,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSysInfo,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QSysInfo,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSysInfo,
    assign_QSysInfo,
    array_QSysInfo,
    copy_QSysInfo,
    release_QSysInfo,
    cast_QSysInfo,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
