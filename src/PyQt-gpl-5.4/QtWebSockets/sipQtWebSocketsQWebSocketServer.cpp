/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:30 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebSockets.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebSockets/qwebsocketserver.sip"
#include <qwebsocketserver.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 28 "sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebSockets/qwebsocketcorsauthenticator.sip"
#include <qwebsocketcorsauthenticator.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebSockets/qwebsocketprotocol.sip"
#include <qwebsocketprotocol.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 30 "sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 28 "sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebSockets/qwebsocket.sip"
#include <qwebsocket.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 30 "sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"


class sipQWebSocketServer : public QWebSocketServer
{
public:
    sipQWebSocketServer(const QString&,QWebSocketServer::SslMode,QObject*);
    virtual ~sipQWebSocketServer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QWebSocket* nextPendingConnection();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebSocketServer(const sipQWebSocketServer &);
    sipQWebSocketServer &operator = (const sipQWebSocketServer &);

    char sipPyMethods[8];
};

sipQWebSocketServer::sipQWebSocketServer(const QString& a0,QWebSocketServer::SslMode a1,QObject*a2): QWebSocketServer(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebSocketServer::~sipQWebSocketServer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebSocketServer::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebSockets_qt_metaobject(sipPySelf,sipType_QWebSocketServer);
}

int sipQWebSocketServer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebSocketServer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebSockets_qt_metacall(sipPySelf,sipType_QWebSocketServer,_c,_id,_a);

    return _id;
}

void *sipQWebSocketServer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebSockets_qt_metacast(sipPySelf, sipType_QWebSocketServer, _clname, &sipCpp) ? sipCpp : QWebSocketServer::qt_metacast(_clname));
}

void sipQWebSocketServer::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWebSocketServer::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocketServer::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWebSocketServer::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocketServer::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWebSocketServer::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocketServer::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWebSocketServer::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocketServer::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWebSocketServer::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebSocketServer::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWebSocketServer::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQWebSocketServer::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWebSocketServer::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QWebSocket* sipQWebSocketServer::nextPendingConnection()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_nextPendingConnection);

    if (!sipMeth)
        return QWebSocketServer::nextPendingConnection();

    extern QWebSocket* sipVH_QtWebSockets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWebSockets_0(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQWebSocketServer::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQWebSocketServer::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQWebSocketServer::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQWebSocketServer::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQWebSocketServer::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQWebSocketServer::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQWebSocketServer::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQWebSocketServer::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQWebSocketServer::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QWebSocketServer_sender, "QWebSocketServer.sender() -> QObject");

extern "C" {static PyObject *meth_QWebSocketServer_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWebSocketServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 415 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_sender, doc_QWebSocketServer_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_receivers, "QWebSocketServer.receivers(signal) -> int");

extern "C" {static PyObject *meth_QWebSocketServer_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQWebSocketServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QWebSocketServer, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 474 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocketServer.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_receivers, doc_QWebSocketServer_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_timerEvent, "QWebSocketServer.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QWebSocketServer_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQWebSocketServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_timerEvent, doc_QWebSocketServer_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_childEvent, "QWebSocketServer.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QWebSocketServer_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQWebSocketServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_childEvent, doc_QWebSocketServer_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_customEvent, "QWebSocketServer.customEvent(QEvent)");

extern "C" {static PyObject *meth_QWebSocketServer_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWebSocketServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_customEvent, doc_QWebSocketServer_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_connectNotify, "QWebSocketServer.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWebSocketServer_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWebSocketServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_connectNotify, doc_QWebSocketServer_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_disconnectNotify, "QWebSocketServer.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWebSocketServer_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWebSocketServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_disconnectNotify, doc_QWebSocketServer_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_senderSignalIndex, "QWebSocketServer.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QWebSocketServer_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWebSocketServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_senderSignalIndex, doc_QWebSocketServer_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_isSignalConnected, "QWebSocketServer.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QWebSocketServer_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQWebSocketServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_isSignalConnected, doc_QWebSocketServer_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_listen, "QWebSocketServer.listen(QHostAddress address=QHostAddress.Any, int port=0) -> bool");

extern "C" {static PyObject *meth_QWebSocketServer_listen(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_listen(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress& a0def = QHostAddress::Any;
        const QHostAddress* a0 = &a0def;
        int a0State = 0;
        quint16 a1 = 0;
        QWebSocketServer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_address,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1t", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QHostAddress, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->listen(*a0,a1);
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_listen, doc_QWebSocketServer_listen);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_close, "QWebSocketServer.close()");

extern "C" {static PyObject *meth_QWebSocketServer_close(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            sipCpp->close();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_close, doc_QWebSocketServer_close);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_isListening, "QWebSocketServer.isListening() -> bool");

extern "C" {static PyObject *meth_QWebSocketServer_isListening(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_isListening(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isListening();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_isListening, doc_QWebSocketServer_isListening);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_setMaxPendingConnections, "QWebSocketServer.setMaxPendingConnections(int)");

extern "C" {static PyObject *meth_QWebSocketServer_setMaxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_setMaxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWebSocketServer, &sipCpp, &a0))
        {
            sipCpp->setMaxPendingConnections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_setMaxPendingConnections, doc_QWebSocketServer_setMaxPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_maxPendingConnections, "QWebSocketServer.maxPendingConnections() -> int");

extern "C" {static PyObject *meth_QWebSocketServer_maxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_maxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxPendingConnections();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_maxPendingConnections, doc_QWebSocketServer_maxPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_serverPort, "QWebSocketServer.serverPort() -> int");

extern "C" {static PyObject *meth_QWebSocketServer_serverPort(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_serverPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            quint16 sipRes;

            sipRes = sipCpp->serverPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_serverPort, doc_QWebSocketServer_serverPort);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_serverAddress, "QWebSocketServer.serverAddress() -> QHostAddress");

extern "C" {static PyObject *meth_QWebSocketServer_serverAddress(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_serverAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QHostAddress*sipRes;

            sipRes = new QHostAddress(sipCpp->serverAddress());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_serverAddress, doc_QWebSocketServer_serverAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_secureMode, "QWebSocketServer.secureMode() -> QWebSocketServer.SslMode");

extern "C" {static PyObject *meth_QWebSocketServer_secureMode(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_secureMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QWebSocketServer::SslMode sipRes;

            sipRes = sipCpp->secureMode();

            return sipConvertFromEnum(sipRes,sipType_QWebSocketServer_SslMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_secureMode, doc_QWebSocketServer_secureMode);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_setSocketDescriptor, "QWebSocketServer.setSocketDescriptor(int) -> bool");

extern "C" {static PyObject *meth_QWebSocketServer_setSocketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWebSocketServer, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setSocketDescriptor(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_setSocketDescriptor, doc_QWebSocketServer_setSocketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_socketDescriptor, "QWebSocketServer.socketDescriptor() -> int");

extern "C" {static PyObject *meth_QWebSocketServer_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->socketDescriptor();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_socketDescriptor, doc_QWebSocketServer_socketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_hasPendingConnections, "QWebSocketServer.hasPendingConnections() -> bool");

extern "C" {static PyObject *meth_QWebSocketServer_hasPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_hasPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasPendingConnections();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_hasPendingConnections, doc_QWebSocketServer_hasPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_nextPendingConnection, "QWebSocketServer.nextPendingConnection() -> QWebSocket");

extern "C" {static PyObject *meth_QWebSocketServer_nextPendingConnection(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_nextPendingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QWebSocket*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWebSocketServer::nextPendingConnection() : sipCpp->nextPendingConnection());

            return sipConvertFromNewType(sipRes,sipType_QWebSocket,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_nextPendingConnection, doc_QWebSocketServer_nextPendingConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_error, "QWebSocketServer.error() -> QWebSocketProtocol.CloseCode");

extern "C" {static PyObject *meth_QWebSocketServer_error(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QWebSocketProtocol::CloseCode sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QWebSocketProtocol_CloseCode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_error, doc_QWebSocketServer_error);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_errorString, "QWebSocketServer.errorString() -> str");

extern "C" {static PyObject *meth_QWebSocketServer_errorString(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_errorString, doc_QWebSocketServer_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_pauseAccepting, "QWebSocketServer.pauseAccepting()");

extern "C" {static PyObject *meth_QWebSocketServer_pauseAccepting(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_pauseAccepting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            sipCpp->pauseAccepting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_pauseAccepting, doc_QWebSocketServer_pauseAccepting);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_resumeAccepting, "QWebSocketServer.resumeAccepting()");

extern "C" {static PyObject *meth_QWebSocketServer_resumeAccepting(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_resumeAccepting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            sipCpp->resumeAccepting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_resumeAccepting, doc_QWebSocketServer_resumeAccepting);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_setServerName, "QWebSocketServer.setServerName(str)");

extern "C" {static PyObject *meth_QWebSocketServer_setServerName(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_setServerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setServerName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_setServerName, doc_QWebSocketServer_setServerName);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_serverName, "QWebSocketServer.serverName() -> str");

extern "C" {static PyObject *meth_QWebSocketServer_serverName(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_serverName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->serverName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_serverName, doc_QWebSocketServer_serverName);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_setProxy, "QWebSocketServer.setProxy(QNetworkProxy)");

extern "C" {static PyObject *meth_QWebSocketServer_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkProxy* a0;
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            sipCpp->setProxy(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_setProxy, doc_QWebSocketServer_setProxy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_proxy, "QWebSocketServer.proxy() -> QNetworkProxy");

extern "C" {static PyObject *meth_QWebSocketServer_proxy(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QNetworkProxy*sipRes;

            sipRes = new QNetworkProxy(sipCpp->proxy());

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_proxy, doc_QWebSocketServer_proxy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_setSslConfiguration, "QWebSocketServer.setSslConfiguration(QSslConfiguration)");

extern "C" {static PyObject *meth_QWebSocketServer_setSslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_setSslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration* a0;
        QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebSocketServer, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            sipCpp->setSslConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_setSslConfiguration, doc_QWebSocketServer_setSslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_sslConfiguration, "QWebSocketServer.sslConfiguration() -> QSslConfiguration");

extern "C" {static PyObject *meth_QWebSocketServer_sslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_sslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QSslConfiguration*sipRes;

            sipRes = new QSslConfiguration(sipCpp->sslConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_sslConfiguration, doc_QWebSocketServer_sslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_supportedVersions, "QWebSocketServer.supportedVersions() -> list-of-QWebSocketProtocol.Version");

extern "C" {static PyObject *meth_QWebSocketServer_supportedVersions(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_supportedVersions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QList<QWebSocketProtocol::Version>*sipRes;

            sipRes = new QList<QWebSocketProtocol::Version>(sipCpp->supportedVersions());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebSocketProtocol_Version,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_supportedVersions, doc_QWebSocketServer_supportedVersions);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocketServer_serverUrl, "QWebSocketServer.serverUrl() -> QUrl");

extern "C" {static PyObject *meth_QWebSocketServer_serverUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebSocketServer_serverUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocketServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocketServer, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->serverUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocketServer, sipName_serverUrl, doc_QWebSocketServer_serverUrl);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebSocketServer(void *, const sipTypeDef *);}
static void *cast_QWebSocketServer(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWebSocketServer)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QWebSocketServer *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebSocketServer(void *, int);}
static void release_QWebSocketServer(void *sipCppV,int)
{
    QWebSocketServer *sipCpp = reinterpret_cast<QWebSocketServer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebSocketServer(sipSimpleWrapper *);}
static void dealloc_QWebSocketServer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebSocketServer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebSocketServer(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWebSocketServer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebSocketServer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebSocketServer *sipCpp = 0;

    {
        const QString* a0;
        int a0State = 0;
        QWebSocketServer::SslMode a1;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1E|JH", sipType_QString,&a0, &a0State, sipType_QWebSocketServer_SslMode, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQWebSocketServer(*a0,a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebSocketServer[] = {{162, 0, 1}};


static PyMethodDef methods_QWebSocketServer[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QWebSocketServer_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QWebSocketServer_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_close)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QWebSocketServer_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QWebSocketServer_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QWebSocketServer_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QWebSocketServer_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QWebSocketServer_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_errorString)},
    {SIP_MLNAME_CAST(sipName_hasPendingConnections), meth_QWebSocketServer_hasPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_hasPendingConnections)},
    {SIP_MLNAME_CAST(sipName_isListening), meth_QWebSocketServer_isListening, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_isListening)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QWebSocketServer_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_listen), (PyCFunction)meth_QWebSocketServer_listen, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebSocketServer_listen)},
    {SIP_MLNAME_CAST(sipName_maxPendingConnections), meth_QWebSocketServer_maxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_maxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_nextPendingConnection), meth_QWebSocketServer_nextPendingConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_nextPendingConnection)},
    {SIP_MLNAME_CAST(sipName_pauseAccepting), meth_QWebSocketServer_pauseAccepting, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_pauseAccepting)},
    {SIP_MLNAME_CAST(sipName_proxy), meth_QWebSocketServer_proxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_proxy)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QWebSocketServer_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_resumeAccepting), meth_QWebSocketServer_resumeAccepting, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_resumeAccepting)},
    {SIP_MLNAME_CAST(sipName_secureMode), meth_QWebSocketServer_secureMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_secureMode)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QWebSocketServer_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QWebSocketServer_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_serverAddress), meth_QWebSocketServer_serverAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_serverAddress)},
    {SIP_MLNAME_CAST(sipName_serverName), meth_QWebSocketServer_serverName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_serverName)},
    {SIP_MLNAME_CAST(sipName_serverPort), meth_QWebSocketServer_serverPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_serverPort)},
    {SIP_MLNAME_CAST(sipName_serverUrl), meth_QWebSocketServer_serverUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_serverUrl)},
    {SIP_MLNAME_CAST(sipName_setMaxPendingConnections), meth_QWebSocketServer_setMaxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_setMaxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QWebSocketServer_setProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_setProxy)},
    {SIP_MLNAME_CAST(sipName_setServerName), meth_QWebSocketServer_setServerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_setServerName)},
    {SIP_MLNAME_CAST(sipName_setSocketDescriptor), meth_QWebSocketServer_setSocketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_setSocketDescriptor)},
    {SIP_MLNAME_CAST(sipName_setSslConfiguration), meth_QWebSocketServer_setSslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_setSslConfiguration)},
    {SIP_MLNAME_CAST(sipName_socketDescriptor), meth_QWebSocketServer_socketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_socketDescriptor)},
    {SIP_MLNAME_CAST(sipName_sslConfiguration), meth_QWebSocketServer_sslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_sslConfiguration)},
    {SIP_MLNAME_CAST(sipName_supportedVersions), meth_QWebSocketServer_supportedVersions, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocketServer_supportedVersions)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QWebSocketServer_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QWebSocketServer[] = {
    {sipName_NonSecureMode, static_cast<int>(QWebSocketServer::NonSecureMode), 8},
    {sipName_SecureMode, static_cast<int>(QWebSocketServer::SecureMode), 8},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWebSocketServer[] = {
    {"closed()", "\1QWebSocketServer.closed", 0, 0},
    {"sslErrors(QList<QSslError>)", "\1QWebSocketServer.sslErrors[list-of-QSslError]", 0, 0},
    {"peerVerifyError(QSslError)", "\1QWebSocketServer.peerVerifyError[QSslError]", 0, 0},
    {"newConnection()", "\1QWebSocketServer.newConnection", 0, 0},
    {"originAuthenticationRequired(QWebSocketCorsAuthenticator*)", "\1QWebSocketServer.originAuthenticationRequired[QWebSocketCorsAuthenticator]", 0, 0},
    {"serverError(QWebSocketProtocol::CloseCode)", "\1QWebSocketServer.serverError[QWebSocketProtocol.CloseCode]", 0, 0},
    {"acceptError(QAbstractSocket::SocketError)", "\1QWebSocketServer.acceptError[QAbstractSocket.SocketError]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QWebSocketServer, "\1QWebSocketServer(str, QWebSocketServer.SslMode, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWebSockets_QWebSocketServer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebSocketServer,
        {0}
    },
    {
        sipNameNr_QWebSocketServer,
        {0, 0, 1},
        33, methods_QWebSocketServer,
        2, enummembers_QWebSocketServer,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebSocketServer,
    -1,
    -1,
    supers_QWebSocketServer,
    0,
    init_type_QWebSocketServer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebSocketServer,
    0,
    0,
    0,
    release_QWebSocketServer,
    cast_QWebSocketServer,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebSocketServer::staticMetaObject,
    0,
    signals_QWebSocketServer,
    0
};
