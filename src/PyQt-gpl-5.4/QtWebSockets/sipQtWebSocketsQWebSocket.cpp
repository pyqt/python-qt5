/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:30 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebSockets.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebSockets/qwebsocket.sip"
#include <qwebsocket.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebSockets/qwebsocketprotocol.sip"
#include <qwebsocketprotocol.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 28 "sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 30 "sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 28 "sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 30 "sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebSockets/qmaskgenerator.sip"
#include <qmaskgenerator.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 30 "sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"


class sipQWebSocket : public QWebSocket
{
public:
    sipQWebSocket(const QString&,QWebSocketProtocol::Version,QObject*);
    virtual ~sipQWebSocket();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebSocket(const sipQWebSocket &);
    sipQWebSocket &operator = (const sipQWebSocket &);

    char sipPyMethods[7];
};

sipQWebSocket::sipQWebSocket(const QString& a0,QWebSocketProtocol::Version a1,QObject*a2): QWebSocket(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebSocket::~sipQWebSocket()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebSocket::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebSockets_qt_metaobject(sipPySelf,sipType_QWebSocket);
}

int sipQWebSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebSockets_qt_metacall(sipPySelf,sipType_QWebSocket,_c,_id,_a);

    return _id;
}

void *sipQWebSocket::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebSockets_qt_metacast(sipPySelf, sipType_QWebSocket, _clname, &sipCpp) ? sipCpp : QWebSocket::qt_metacast(_clname));
}

void sipQWebSocket::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWebSocket::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocket::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWebSocket::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocket::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWebSocket::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocket::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWebSocket::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebSocket::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWebSocket::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebSocket::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWebSocket::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQWebSocket::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWebSocket::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebSockets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebSockets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQWebSocket::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQWebSocket::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQWebSocket::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQWebSocket::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQWebSocket::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQWebSocket::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQWebSocket::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQWebSocket::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQWebSocket::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QWebSocket_sender, "QWebSocket.sender() -> QObject");

extern "C" {static PyObject *meth_QWebSocket_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWebSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 399 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_sender, doc_QWebSocket_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_receivers, "QWebSocket.receivers(signal) -> int");

extern "C" {static PyObject *meth_QWebSocket_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQWebSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QWebSocket, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 458 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebSockets/sipQtWebSocketsQWebSocket.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_receivers, doc_QWebSocket_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_timerEvent, "QWebSocket.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QWebSocket_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQWebSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_timerEvent, doc_QWebSocket_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_childEvent, "QWebSocket.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QWebSocket_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQWebSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_childEvent, doc_QWebSocket_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_customEvent, "QWebSocket.customEvent(QEvent)");

extern "C" {static PyObject *meth_QWebSocket_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWebSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_customEvent, doc_QWebSocket_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_connectNotify, "QWebSocket.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWebSocket_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWebSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_connectNotify, doc_QWebSocket_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_disconnectNotify, "QWebSocket.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWebSocket_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWebSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_disconnectNotify, doc_QWebSocket_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_senderSignalIndex, "QWebSocket.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QWebSocket_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWebSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_senderSignalIndex, doc_QWebSocket_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_isSignalConnected, "QWebSocket.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QWebSocket_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQWebSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_isSignalConnected, doc_QWebSocket_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_abort, "QWebSocket.abort()");

extern "C" {static PyObject *meth_QWebSocket_abort(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            sipCpp->abort();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_abort, doc_QWebSocket_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_error, "QWebSocket.error() -> QAbstractSocket.SocketError");

extern "C" {static PyObject *meth_QWebSocket_error(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QAbstractSocket::SocketError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QAbstractSocket_SocketError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_error, doc_QWebSocket_error);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_errorString, "QWebSocket.errorString() -> str");

extern "C" {static PyObject *meth_QWebSocket_errorString(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_errorString, doc_QWebSocket_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_flush, "QWebSocket.flush() -> bool");

extern "C" {static PyObject *meth_QWebSocket_flush(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->flush();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_flush, doc_QWebSocket_flush);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_isValid, "QWebSocket.isValid() -> bool");

extern "C" {static PyObject *meth_QWebSocket_isValid(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_isValid, doc_QWebSocket_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_localAddress, "QWebSocket.localAddress() -> QHostAddress");

extern "C" {static PyObject *meth_QWebSocket_localAddress(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_localAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QHostAddress*sipRes;

            sipRes = new QHostAddress(sipCpp->localAddress());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_localAddress, doc_QWebSocket_localAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_localPort, "QWebSocket.localPort() -> int");

extern "C" {static PyObject *meth_QWebSocket_localPort(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_localPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            quint16 sipRes;

            sipRes = sipCpp->localPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_localPort, doc_QWebSocket_localPort);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_pauseMode, "QWebSocket.pauseMode() -> QAbstractSocket.PauseModes");

extern "C" {static PyObject *meth_QWebSocket_pauseMode(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_pauseMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QAbstractSocket::PauseModes*sipRes;

            sipRes = new QAbstractSocket::PauseModes(sipCpp->pauseMode());

            return sipConvertFromNewType(sipRes,sipType_QAbstractSocket_PauseModes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_pauseMode, doc_QWebSocket_pauseMode);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_peerAddress, "QWebSocket.peerAddress() -> QHostAddress");

extern "C" {static PyObject *meth_QWebSocket_peerAddress(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_peerAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QHostAddress*sipRes;

            sipRes = new QHostAddress(sipCpp->peerAddress());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_peerAddress, doc_QWebSocket_peerAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_peerName, "QWebSocket.peerName() -> str");

extern "C" {static PyObject *meth_QWebSocket_peerName(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_peerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->peerName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_peerName, doc_QWebSocket_peerName);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_peerPort, "QWebSocket.peerPort() -> int");

extern "C" {static PyObject *meth_QWebSocket_peerPort(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_peerPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            quint16 sipRes;

            sipRes = sipCpp->peerPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_peerPort, doc_QWebSocket_peerPort);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_proxy, "QWebSocket.proxy() -> QNetworkProxy");

extern "C" {static PyObject *meth_QWebSocket_proxy(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QNetworkProxy*sipRes;

            sipRes = new QNetworkProxy(sipCpp->proxy());

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_proxy, doc_QWebSocket_proxy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_setProxy, "QWebSocket.setProxy(QNetworkProxy)");

extern "C" {static PyObject *meth_QWebSocket_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkProxy* a0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            sipCpp->setProxy(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_setProxy, doc_QWebSocket_setProxy);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_setMaskGenerator, "QWebSocket.setMaskGenerator(QMaskGenerator)");

extern "C" {static PyObject *meth_QWebSocket_setMaskGenerator(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_setMaskGenerator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMaskGenerator* a0;
        PyObject *a0Keep;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWebSocket, &sipCpp, &a0Keep, sipType_QMaskGenerator, &a0))
        {
            sipCpp->setMaskGenerator(a0);

            sipKeepReference(sipSelf, -2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_setMaskGenerator, doc_QWebSocket_setMaskGenerator);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_maskGenerator, "QWebSocket.maskGenerator() -> QMaskGenerator");

extern "C" {static PyObject *meth_QWebSocket_maskGenerator(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_maskGenerator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            const QMaskGenerator*sipRes;

            sipRes = sipCpp->maskGenerator();

            return sipConvertFromType(const_cast<QMaskGenerator *>(sipRes),sipType_QMaskGenerator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_maskGenerator, doc_QWebSocket_maskGenerator);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_readBufferSize, "QWebSocket.readBufferSize() -> int");

extern "C" {static PyObject *meth_QWebSocket_readBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_readBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->readBufferSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_readBufferSize, doc_QWebSocket_readBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_setReadBufferSize, "QWebSocket.setReadBufferSize(int)");

extern "C" {static PyObject *meth_QWebSocket_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QWebSocket, &sipCpp, &a0))
        {
            sipCpp->setReadBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_setReadBufferSize, doc_QWebSocket_setReadBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_resume, "QWebSocket.resume()");

extern "C" {static PyObject *meth_QWebSocket_resume(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_resume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resume();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_resume, doc_QWebSocket_resume);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_setPauseMode, "QWebSocket.setPauseMode(QAbstractSocket.PauseModes)");

extern "C" {static PyObject *meth_QWebSocket_setPauseMode(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_setPauseMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket::PauseModes* a0;
        int a0State = 0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QAbstractSocket_PauseModes, &a0, &a0State))
        {
            sipCpp->setPauseMode(*a0);
            sipReleaseType(a0,sipType_QAbstractSocket_PauseModes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_setPauseMode, doc_QWebSocket_setPauseMode);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_state, "QWebSocket.state() -> QAbstractSocket.SocketState");

extern "C" {static PyObject *meth_QWebSocket_state(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QAbstractSocket::SocketState sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QAbstractSocket_SocketState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_state, doc_QWebSocket_state);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_version, "QWebSocket.version() -> QWebSocketProtocol.Version");

extern "C" {static PyObject *meth_QWebSocket_version(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QWebSocketProtocol::Version sipRes;

            sipRes = sipCpp->version();

            return sipConvertFromEnum(sipRes,sipType_QWebSocketProtocol_Version);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_version, doc_QWebSocket_version);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_resourceName, "QWebSocket.resourceName() -> str");

extern "C" {static PyObject *meth_QWebSocket_resourceName(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_resourceName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->resourceName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_resourceName, doc_QWebSocket_resourceName);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_requestUrl, "QWebSocket.requestUrl() -> QUrl");

extern "C" {static PyObject *meth_QWebSocket_requestUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_requestUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->requestUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_requestUrl, doc_QWebSocket_requestUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_origin, "QWebSocket.origin() -> str");

extern "C" {static PyObject *meth_QWebSocket_origin(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_origin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->origin());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_origin, doc_QWebSocket_origin);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_closeCode, "QWebSocket.closeCode() -> QWebSocketProtocol.CloseCode");

extern "C" {static PyObject *meth_QWebSocket_closeCode(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_closeCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QWebSocketProtocol::CloseCode sipRes;

            sipRes = sipCpp->closeCode();

            return sipConvertFromEnum(sipRes,sipType_QWebSocketProtocol_CloseCode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_closeCode, doc_QWebSocket_closeCode);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_closeReason, "QWebSocket.closeReason() -> str");

extern "C" {static PyObject *meth_QWebSocket_closeReason(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_closeReason(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->closeReason());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_closeReason, doc_QWebSocket_closeReason);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_sendTextMessage, "QWebSocket.sendTextMessage(str) -> int");

extern "C" {static PyObject *meth_QWebSocket_sendTextMessage(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_sendTextMessage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sendTextMessage(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_sendTextMessage, doc_QWebSocket_sendTextMessage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_sendBinaryMessage, "QWebSocket.sendBinaryMessage(QByteArray) -> int");

extern "C" {static PyObject *meth_QWebSocket_sendBinaryMessage(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_sendBinaryMessage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sendBinaryMessage(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_sendBinaryMessage, doc_QWebSocket_sendBinaryMessage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_ignoreSslErrors, "QWebSocket.ignoreSslErrors(list-of-QSslError)\n"
    "QWebSocket.ignoreSslErrors()");

extern "C" {static PyObject *meth_QWebSocket_ignoreSslErrors(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_ignoreSslErrors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslError>* a0;
        int a0State = 0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QList_0100QSslError,&a0, &a0State))
        {
            sipCpp->ignoreSslErrors(*a0);
            sipReleaseType(const_cast<QList<QSslError> *>(a0),sipType_QList_0100QSslError,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            sipCpp->ignoreSslErrors();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_ignoreSslErrors, doc_QWebSocket_ignoreSslErrors);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_setSslConfiguration, "QWebSocket.setSslConfiguration(QSslConfiguration)");

extern "C" {static PyObject *meth_QWebSocket_setSslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_setSslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration* a0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            sipCpp->setSslConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_setSslConfiguration, doc_QWebSocket_setSslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_sslConfiguration, "QWebSocket.sslConfiguration() -> QSslConfiguration");

extern "C" {static PyObject *meth_QWebSocket_sslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_sslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSocket, &sipCpp))
        {
            QSslConfiguration*sipRes;

            sipRes = new QSslConfiguration(sipCpp->sslConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_sslConfiguration, doc_QWebSocket_sslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_close, "QWebSocket.close(QWebSocketProtocol.CloseCode closeCode=QWebSocketProtocol.CloseCodeNormal, str reason=QString())");

extern "C" {static PyObject *meth_QWebSocket_close(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_close(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWebSocketProtocol::CloseCode a0 = QWebSocketProtocol::CloseCodeNormal;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        QWebSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_closeCode,
            sipName_reason,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|EJ1", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QWebSocketProtocol_CloseCode, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->close(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_close, doc_QWebSocket_close);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_open, "QWebSocket.open(QUrl)");

extern "C" {static PyObject *meth_QWebSocket_open(PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QWebSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QUrl, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_open, doc_QWebSocket_open);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSocket_ping, "QWebSocket.ping(QByteArray payload=QByteArray())");

extern "C" {static PyObject *meth_QWebSocket_ping(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebSocket_ping(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray& a0def = QByteArray();
        const QByteArray* a0 = &a0def;
        int a0State = 0;
        QWebSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_payload,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QWebSocket, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ping(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSocket, sipName_ping, doc_QWebSocket_ping);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebSocket(void *, const sipTypeDef *);}
static void *cast_QWebSocket(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWebSocket)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QWebSocket *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebSocket(void *, int);}
static void release_QWebSocket(void *sipCppV,int)
{
    QWebSocket *sipCpp = reinterpret_cast<QWebSocket *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebSocket(sipSimpleWrapper *);}
static void dealloc_QWebSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebSocket *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebSocket(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWebSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebSocket *sipCpp = 0;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        QWebSocketProtocol::Version a1 = QWebSocketProtocol::Version13;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            sipName_origin,
            sipName_version,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1EJH", sipType_QString,&a0, &a0State, sipType_QWebSocketProtocol_Version, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQWebSocket(*a0,a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebSocket[] = {{162, 0, 1}};


static PyMethodDef methods_QWebSocket[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QWebSocket_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_abort)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QWebSocket_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_close), (PyCFunction)meth_QWebSocket_close, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebSocket_close)},
    {SIP_MLNAME_CAST(sipName_closeCode), meth_QWebSocket_closeCode, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_closeCode)},
    {SIP_MLNAME_CAST(sipName_closeReason), meth_QWebSocket_closeReason, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_closeReason)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QWebSocket_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QWebSocket_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QWebSocket_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QWebSocket_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QWebSocket_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_errorString)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QWebSocket_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_flush)},
    {SIP_MLNAME_CAST(sipName_ignoreSslErrors), meth_QWebSocket_ignoreSslErrors, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_ignoreSslErrors)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QWebSocket_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QWebSocket_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_isValid)},
    {SIP_MLNAME_CAST(sipName_localAddress), meth_QWebSocket_localAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_localAddress)},
    {SIP_MLNAME_CAST(sipName_localPort), meth_QWebSocket_localPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_localPort)},
    {SIP_MLNAME_CAST(sipName_maskGenerator), meth_QWebSocket_maskGenerator, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_maskGenerator)},
    {SIP_MLNAME_CAST(sipName_open), meth_QWebSocket_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_open)},
    {SIP_MLNAME_CAST(sipName_origin), meth_QWebSocket_origin, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_origin)},
    {SIP_MLNAME_CAST(sipName_pauseMode), meth_QWebSocket_pauseMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_pauseMode)},
    {SIP_MLNAME_CAST(sipName_peerAddress), meth_QWebSocket_peerAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_peerAddress)},
    {SIP_MLNAME_CAST(sipName_peerName), meth_QWebSocket_peerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_peerName)},
    {SIP_MLNAME_CAST(sipName_peerPort), meth_QWebSocket_peerPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_peerPort)},
    {SIP_MLNAME_CAST(sipName_ping), (PyCFunction)meth_QWebSocket_ping, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebSocket_ping)},
    {SIP_MLNAME_CAST(sipName_proxy), meth_QWebSocket_proxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_proxy)},
    {SIP_MLNAME_CAST(sipName_readBufferSize), meth_QWebSocket_readBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_readBufferSize)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QWebSocket_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_requestUrl), meth_QWebSocket_requestUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_requestUrl)},
    {SIP_MLNAME_CAST(sipName_resourceName), meth_QWebSocket_resourceName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_resourceName)},
    {SIP_MLNAME_CAST(sipName_resume), meth_QWebSocket_resume, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_resume)},
    {SIP_MLNAME_CAST(sipName_sendBinaryMessage), meth_QWebSocket_sendBinaryMessage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_sendBinaryMessage)},
    {SIP_MLNAME_CAST(sipName_sendTextMessage), meth_QWebSocket_sendTextMessage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_sendTextMessage)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QWebSocket_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QWebSocket_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setMaskGenerator), meth_QWebSocket_setMaskGenerator, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_setMaskGenerator)},
    {SIP_MLNAME_CAST(sipName_setPauseMode), meth_QWebSocket_setPauseMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_setPauseMode)},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QWebSocket_setProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_setProxy)},
    {SIP_MLNAME_CAST(sipName_setReadBufferSize), meth_QWebSocket_setReadBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_setReadBufferSize)},
    {SIP_MLNAME_CAST(sipName_setSslConfiguration), meth_QWebSocket_setSslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_setSslConfiguration)},
    {SIP_MLNAME_CAST(sipName_sslConfiguration), meth_QWebSocket_sslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_sslConfiguration)},
    {SIP_MLNAME_CAST(sipName_state), meth_QWebSocket_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_state)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QWebSocket_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_version), meth_QWebSocket_version, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSocket_version)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWebSocket[] = {
    {"sslErrors(QList<QSslError>)", "\1QWebSocket.sslErrors[list-of-QSslError]", 0, 0},
    {"bytesWritten(qint64)", "\1QWebSocket.bytesWritten[int]", 0, 0},
    {"pong(quint64,QByteArray)", "\1QWebSocket.pong[int, QByteArray]", 0, 0},
    {"binaryMessageReceived(QByteArray)", "\1QWebSocket.binaryMessageReceived[QByteArray]", 0, 0},
    {"textMessageReceived(QString)", "\1QWebSocket.textMessageReceived[str]", 0, 0},
    {"binaryFrameReceived(QByteArray,bool)", "\1QWebSocket.binaryFrameReceived[QByteArray, bool]", 0, 0},
    {"textFrameReceived(QString,bool)", "\1QWebSocket.textFrameReceived[str, bool]", 0, 0},
    {"readChannelFinished()", "\1QWebSocket.readChannelFinished", 0, 0},
    {"proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)", "\1QWebSocket.proxyAuthenticationRequired[QNetworkProxy, QAuthenticator]", 0, 0},
    {"stateChanged(QAbstractSocket::SocketState)", "\1QWebSocket.stateChanged[QAbstractSocket.SocketState]", 0, 0},
    {"disconnected()", "\1QWebSocket.disconnected", 0, 0},
    {"connected()", "\1QWebSocket.connected", 0, 0},
    {"aboutToClose()", "\1QWebSocket.aboutToClose", 0, 0},
    {"error(QAbstractSocket::SocketError)", "\1QWebSocket.error[QAbstractSocket.SocketError]", &methods_QWebSocket[8], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QWebSocket, "\1QWebSocket(str origin='', QWebSocketProtocol.Version version=QWebSocketProtocol.Version13, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWebSockets_QWebSocket = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebSocket,
        {0}
    },
    {
        sipNameNr_QWebSocket,
        {0, 0, 1},
        43, methods_QWebSocket,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebSocket,
    -1,
    -1,
    supers_QWebSocket,
    0,
    init_type_QWebSocket,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebSocket,
    0,
    0,
    0,
    release_QWebSocket,
    cast_QWebSocket,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebSocket::staticMetaObject,
    0,
    signals_QWebSocket,
    0
};
