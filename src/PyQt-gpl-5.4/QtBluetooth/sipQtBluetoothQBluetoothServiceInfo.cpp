/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:23 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtBluetooth.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtBluetooth/qbluetoothserviceinfo.sip"
#include <qbluetoothserviceinfo.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtBluetooth/sipQtBluetoothQBluetoothServiceInfo.cpp"

#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtBluetooth/sipQtBluetoothQBluetoothServiceInfo.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtBluetooth/qbluetoothuuid.sip"
#include <qbluetoothuuid.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtBluetooth/sipQtBluetoothQBluetoothServiceInfo.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtBluetooth/sipQtBluetoothQBluetoothServiceInfo.cpp"
#line 133 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtBluetooth/qpybluetooth_qlist.sip"
#include <qbluetoothserviceinfo.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtBluetooth/sipQtBluetoothQBluetoothServiceInfo.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtBluetooth/sipQtBluetoothQBluetoothServiceInfo.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtBluetooth/qbluetoothaddress.sip"
#include <qbluetoothaddress.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtBluetooth/sipQtBluetoothQBluetoothServiceInfo.cpp"
#line 25 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtBluetooth/qpybluetooth_qlist.sip"
#include <qlist.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtBluetooth/sipQtBluetoothQBluetoothServiceInfo.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtBluetooth/qbluetoothdeviceinfo.sip"
#include <qbluetoothdeviceinfo.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtBluetooth/sipQtBluetoothQBluetoothServiceInfo.cpp"


PyDoc_STRVAR(doc_QBluetoothServiceInfo_isValid, "QBluetoothServiceInfo.isValid() -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_isValid(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_isValid, doc_QBluetoothServiceInfo_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_isComplete, "QBluetoothServiceInfo.isComplete() -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_isComplete(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_isComplete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isComplete();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_isComplete, doc_QBluetoothServiceInfo_isComplete);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setDevice, "QBluetoothServiceInfo.setDevice(QBluetoothDeviceInfo)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothDeviceInfo* a0;
        QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QBluetoothDeviceInfo, &a0))
        {
            sipCpp->setDevice(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setDevice, doc_QBluetoothServiceInfo_setDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_device, "QBluetoothServiceInfo.device() -> QBluetoothDeviceInfo");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_device(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            QBluetoothDeviceInfo*sipRes;

            sipRes = new QBluetoothDeviceInfo(sipCpp->device());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothDeviceInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_device, doc_QBluetoothServiceInfo_device);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_attribute, "QBluetoothServiceInfo.attribute(int) -> QVariant");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_attribute(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_attribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        quint16 a0;
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->attribute(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_attribute, doc_QBluetoothServiceInfo_attribute);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_attributes, "QBluetoothServiceInfo.attributes() -> list-of-int");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_attributes(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_attributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            QList<quint16>*sipRes;

            sipRes = new QList<quint16>(sipCpp->attributes());

            return sipConvertFromNewType(sipRes,sipType_QList_1600,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_attributes, doc_QBluetoothServiceInfo_attributes);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_contains, "QBluetoothServiceInfo.contains(int) -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_contains(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        quint16 a0;
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_contains, doc_QBluetoothServiceInfo_contains);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_removeAttribute, "QBluetoothServiceInfo.removeAttribute(int)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_removeAttribute(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_removeAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        quint16 a0;
        QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bt", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0))
        {
            sipCpp->removeAttribute(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_removeAttribute, doc_QBluetoothServiceInfo_removeAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_socketProtocol, "QBluetoothServiceInfo.socketProtocol() -> QBluetoothServiceInfo.Protocol");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_socketProtocol(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_socketProtocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            QBluetoothServiceInfo::Protocol sipRes;

            sipRes = sipCpp->socketProtocol();

            return sipConvertFromEnum(sipRes,sipType_QBluetoothServiceInfo_Protocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_socketProtocol, doc_QBluetoothServiceInfo_socketProtocol);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_protocolServiceMultiplexer, "QBluetoothServiceInfo.protocolServiceMultiplexer() -> int");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_protocolServiceMultiplexer(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_protocolServiceMultiplexer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->protocolServiceMultiplexer();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_protocolServiceMultiplexer, doc_QBluetoothServiceInfo_protocolServiceMultiplexer);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serverChannel, "QBluetoothServiceInfo.serverChannel() -> int");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serverChannel(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serverChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->serverChannel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serverChannel, doc_QBluetoothServiceInfo_serverChannel);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_protocolDescriptor, "QBluetoothServiceInfo.protocolDescriptor(QBluetoothUuid.ProtocolUuid) -> list-of-object");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_protocolDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_protocolDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetoothUuid::ProtocolUuid a0;
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QBluetoothUuid_ProtocolUuid, &a0))
        {
            QBluetoothServiceInfo::Sequence*sipRes;

            sipRes = new QBluetoothServiceInfo::Sequence(sipCpp->protocolDescriptor(a0));

            return sipConvertFromNewType(sipRes,sipType_QBluetoothServiceInfo_Sequence,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_protocolDescriptor, doc_QBluetoothServiceInfo_protocolDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_isRegistered, "QBluetoothServiceInfo.isRegistered() -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_isRegistered(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_isRegistered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRegistered();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_isRegistered, doc_QBluetoothServiceInfo_isRegistered);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_registerService, "QBluetoothServiceInfo.registerService(QBluetoothAddress localAdapter=QBluetoothAddress()) -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_registerService(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_registerService(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothAddress& a0def = QBluetoothAddress();
        const QBluetoothAddress* a0 = &a0def;
        QBluetoothServiceInfo *sipCpp;

        static const char *sipKwdList[] = {
            sipName_localAdapter,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QBluetoothAddress, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->registerService(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_registerService, doc_QBluetoothServiceInfo_registerService);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_unregisterService, "QBluetoothServiceInfo.unregisterService() -> bool");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_unregisterService(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_unregisterService(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->unregisterService();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_unregisterService, doc_QBluetoothServiceInfo_unregisterService);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setAttribute, "QBluetoothServiceInfo.setAttribute(int, QBluetoothUuid)\n"
    "QBluetoothServiceInfo.setAttribute(int, list-of-object)\n"
    "QBluetoothServiceInfo.setAttribute(int, QVariant)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        quint16 a0;
        const QBluetoothUuid* a1;
        QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BtJ9", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0, sipType_QBluetoothUuid, &a1))
        {
            sipCpp->setAttribute(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        quint16 a0;
        const QBluetoothServiceInfo::Sequence* a1;
        int a1State = 0;
        QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BtJ1", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0, sipType_QBluetoothServiceInfo_Sequence,&a1, &a1State))
        {
            sipCpp->setAttribute(a0,*a1);
            sipReleaseType(const_cast<QBluetoothServiceInfo::Sequence *>(a1),sipType_QBluetoothServiceInfo_Sequence,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        quint16 a0;
        const QVariant* a1;
        int a1State = 0;
        QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BtJ1", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setAttribute(a0,*a1);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setAttribute, doc_QBluetoothServiceInfo_setAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setServiceName, "QBluetoothServiceInfo.setServiceName(str)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setServiceName(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setServiceName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setServiceName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setServiceName, doc_QBluetoothServiceInfo_setServiceName);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serviceName, "QBluetoothServiceInfo.serviceName() -> str");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serviceName(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serviceName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->serviceName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serviceName, doc_QBluetoothServiceInfo_serviceName);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setServiceDescription, "QBluetoothServiceInfo.setServiceDescription(str)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setServiceDescription(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setServiceDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setServiceDescription(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setServiceDescription, doc_QBluetoothServiceInfo_setServiceDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serviceDescription, "QBluetoothServiceInfo.serviceDescription() -> str");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serviceDescription(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serviceDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->serviceDescription());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serviceDescription, doc_QBluetoothServiceInfo_serviceDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setServiceProvider, "QBluetoothServiceInfo.setServiceProvider(str)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setServiceProvider(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setServiceProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setServiceProvider(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setServiceProvider, doc_QBluetoothServiceInfo_setServiceProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serviceProvider, "QBluetoothServiceInfo.serviceProvider() -> str");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serviceProvider(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serviceProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->serviceProvider());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serviceProvider, doc_QBluetoothServiceInfo_serviceProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setServiceAvailability, "QBluetoothServiceInfo.setServiceAvailability(int)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setServiceAvailability(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setServiceAvailability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        quint8 a0;
        QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BM", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, &a0))
        {
            sipCpp->setServiceAvailability(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setServiceAvailability, doc_QBluetoothServiceInfo_setServiceAvailability);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serviceAvailability, "QBluetoothServiceInfo.serviceAvailability() -> int");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serviceAvailability(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serviceAvailability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            quint8 sipRes;

            sipRes = sipCpp->serviceAvailability();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serviceAvailability, doc_QBluetoothServiceInfo_serviceAvailability);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_setServiceUuid, "QBluetoothServiceInfo.setServiceUuid(QBluetoothUuid)");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_setServiceUuid(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_setServiceUuid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothUuid* a0;
        QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp, sipType_QBluetoothUuid, &a0))
        {
            sipCpp->setServiceUuid(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_setServiceUuid, doc_QBluetoothServiceInfo_setServiceUuid);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serviceUuid, "QBluetoothServiceInfo.serviceUuid() -> QBluetoothUuid");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serviceUuid(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serviceUuid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            QBluetoothUuid*sipRes;

            sipRes = new QBluetoothUuid(sipCpp->serviceUuid());

            return sipConvertFromNewType(sipRes,sipType_QBluetoothUuid,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serviceUuid, doc_QBluetoothServiceInfo_serviceUuid);

    return NULL;
}


PyDoc_STRVAR(doc_QBluetoothServiceInfo_serviceClassUuids, "QBluetoothServiceInfo.serviceClassUuids() -> list-of-QBluetoothUuid");

extern "C" {static PyObject *meth_QBluetoothServiceInfo_serviceClassUuids(PyObject *, PyObject *);}
static PyObject *meth_QBluetoothServiceInfo_serviceClassUuids(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBluetoothServiceInfo *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBluetoothServiceInfo, &sipCpp))
        {
            QList<QBluetoothUuid>*sipRes;

            sipRes = new QList<QBluetoothUuid>(sipCpp->serviceClassUuids());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QBluetoothUuid,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBluetoothServiceInfo, sipName_serviceClassUuids, doc_QBluetoothServiceInfo_serviceClassUuids);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QBluetoothServiceInfo(void *, const sipTypeDef *);}
static void *cast_QBluetoothServiceInfo(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QBluetoothServiceInfo)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBluetoothServiceInfo(void *, int);}
static void release_QBluetoothServiceInfo(void *sipCppV,int)
{
    delete reinterpret_cast<QBluetoothServiceInfo *>(sipCppV);
}


extern "C" {static void assign_QBluetoothServiceInfo(void *, SIP_SSIZE_T, const void *);}
static void assign_QBluetoothServiceInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QBluetoothServiceInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QBluetoothServiceInfo *>(sipSrc);
}


extern "C" {static void *array_QBluetoothServiceInfo(SIP_SSIZE_T);}
static void *array_QBluetoothServiceInfo(SIP_SSIZE_T sipNrElem)
{
    return new QBluetoothServiceInfo[sipNrElem];
}


extern "C" {static void *copy_QBluetoothServiceInfo(const void *, SIP_SSIZE_T);}
static void *copy_QBluetoothServiceInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QBluetoothServiceInfo(reinterpret_cast<const QBluetoothServiceInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QBluetoothServiceInfo(sipSimpleWrapper *);}
static void dealloc_QBluetoothServiceInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QBluetoothServiceInfo(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QBluetoothServiceInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBluetoothServiceInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QBluetoothServiceInfo *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QBluetoothServiceInfo();

            return sipCpp;
        }
    }

    {
        const QBluetoothServiceInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QBluetoothServiceInfo, &a0))
        {
            sipCpp = new QBluetoothServiceInfo(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QBluetoothServiceInfo[] = {
    {SIP_MLNAME_CAST(sipName_attribute), meth_QBluetoothServiceInfo_attribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_attribute)},
    {SIP_MLNAME_CAST(sipName_attributes), meth_QBluetoothServiceInfo_attributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_attributes)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QBluetoothServiceInfo_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_contains)},
    {SIP_MLNAME_CAST(sipName_device), meth_QBluetoothServiceInfo_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_device)},
    {SIP_MLNAME_CAST(sipName_isComplete), meth_QBluetoothServiceInfo_isComplete, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_isComplete)},
    {SIP_MLNAME_CAST(sipName_isRegistered), meth_QBluetoothServiceInfo_isRegistered, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_isRegistered)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QBluetoothServiceInfo_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_isValid)},
    {SIP_MLNAME_CAST(sipName_protocolDescriptor), meth_QBluetoothServiceInfo_protocolDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_protocolDescriptor)},
    {SIP_MLNAME_CAST(sipName_protocolServiceMultiplexer), meth_QBluetoothServiceInfo_protocolServiceMultiplexer, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_protocolServiceMultiplexer)},
    {SIP_MLNAME_CAST(sipName_registerService), (PyCFunction)meth_QBluetoothServiceInfo_registerService, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_registerService)},
    {SIP_MLNAME_CAST(sipName_removeAttribute), meth_QBluetoothServiceInfo_removeAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_removeAttribute)},
    {SIP_MLNAME_CAST(sipName_serverChannel), meth_QBluetoothServiceInfo_serverChannel, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serverChannel)},
    {SIP_MLNAME_CAST(sipName_serviceAvailability), meth_QBluetoothServiceInfo_serviceAvailability, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serviceAvailability)},
    {SIP_MLNAME_CAST(sipName_serviceClassUuids), meth_QBluetoothServiceInfo_serviceClassUuids, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serviceClassUuids)},
    {SIP_MLNAME_CAST(sipName_serviceDescription), meth_QBluetoothServiceInfo_serviceDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serviceDescription)},
    {SIP_MLNAME_CAST(sipName_serviceName), meth_QBluetoothServiceInfo_serviceName, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serviceName)},
    {SIP_MLNAME_CAST(sipName_serviceProvider), meth_QBluetoothServiceInfo_serviceProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serviceProvider)},
    {SIP_MLNAME_CAST(sipName_serviceUuid), meth_QBluetoothServiceInfo_serviceUuid, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_serviceUuid)},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QBluetoothServiceInfo_setAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setAttribute)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QBluetoothServiceInfo_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setDevice)},
    {SIP_MLNAME_CAST(sipName_setServiceAvailability), meth_QBluetoothServiceInfo_setServiceAvailability, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setServiceAvailability)},
    {SIP_MLNAME_CAST(sipName_setServiceDescription), meth_QBluetoothServiceInfo_setServiceDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setServiceDescription)},
    {SIP_MLNAME_CAST(sipName_setServiceName), meth_QBluetoothServiceInfo_setServiceName, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setServiceName)},
    {SIP_MLNAME_CAST(sipName_setServiceProvider), meth_QBluetoothServiceInfo_setServiceProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setServiceProvider)},
    {SIP_MLNAME_CAST(sipName_setServiceUuid), meth_QBluetoothServiceInfo_setServiceUuid, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_setServiceUuid)},
    {SIP_MLNAME_CAST(sipName_socketProtocol), meth_QBluetoothServiceInfo_socketProtocol, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_socketProtocol)},
    {SIP_MLNAME_CAST(sipName_unregisterService), meth_QBluetoothServiceInfo_unregisterService, METH_VARARGS, SIP_MLDOC_CAST(doc_QBluetoothServiceInfo_unregisterService)}
};

static sipEnumMemberDef enummembers_QBluetoothServiceInfo[] = {
    {sipName_AdditionalProtocolDescriptorList, static_cast<int>(QBluetoothServiceInfo::AdditionalProtocolDescriptorList), 35},
    {sipName_BluetoothProfileDescriptorList, static_cast<int>(QBluetoothServiceInfo::BluetoothProfileDescriptorList), 35},
    {sipName_BrowseGroupList, static_cast<int>(QBluetoothServiceInfo::BrowseGroupList), 35},
    {sipName_ClientExecutableUrl, static_cast<int>(QBluetoothServiceInfo::ClientExecutableUrl), 35},
    {sipName_DocumentationUrl, static_cast<int>(QBluetoothServiceInfo::DocumentationUrl), 35},
    {sipName_IconUrl, static_cast<int>(QBluetoothServiceInfo::IconUrl), 35},
    {sipName_L2capProtocol, static_cast<int>(QBluetoothServiceInfo::L2capProtocol), 36},
    {sipName_LanguageBaseAttributeIdList, static_cast<int>(QBluetoothServiceInfo::LanguageBaseAttributeIdList), 35},
    {sipName_PrimaryLanguageBase, static_cast<int>(QBluetoothServiceInfo::PrimaryLanguageBase), 35},
    {sipName_ProtocolDescriptorList, static_cast<int>(QBluetoothServiceInfo::ProtocolDescriptorList), 35},
    {sipName_RfcommProtocol, static_cast<int>(QBluetoothServiceInfo::RfcommProtocol), 36},
    {sipName_ServiceAvailability, static_cast<int>(QBluetoothServiceInfo::ServiceAvailability), 35},
    {sipName_ServiceClassIds, static_cast<int>(QBluetoothServiceInfo::ServiceClassIds), 35},
    {sipName_ServiceDescription, static_cast<int>(QBluetoothServiceInfo::ServiceDescription), 35},
    {sipName_ServiceId, static_cast<int>(QBluetoothServiceInfo::ServiceId), 35},
    {sipName_ServiceInfoTimeToLive, static_cast<int>(QBluetoothServiceInfo::ServiceInfoTimeToLive), 35},
    {sipName_ServiceName, static_cast<int>(QBluetoothServiceInfo::ServiceName), 35},
    {sipName_ServiceProvider, static_cast<int>(QBluetoothServiceInfo::ServiceProvider), 35},
    {sipName_ServiceRecordHandle, static_cast<int>(QBluetoothServiceInfo::ServiceRecordHandle), 35},
    {sipName_ServiceRecordState, static_cast<int>(QBluetoothServiceInfo::ServiceRecordState), 35},
    {sipName_UnknownProtocol, static_cast<int>(QBluetoothServiceInfo::UnknownProtocol), 36},
};

PyDoc_STRVAR(doc_QBluetoothServiceInfo, "\1QBluetoothServiceInfo()\n"
    "QBluetoothServiceInfo(QBluetoothServiceInfo)");


pyqt5ClassTypeDef sipTypeDef_QtBluetooth_QBluetoothServiceInfo = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QBluetoothServiceInfo,
        {0}
    },
    {
        sipNameNr_QBluetoothServiceInfo,
        {0, 0, 1},
        27, methods_QBluetoothServiceInfo,
        21, enummembers_QBluetoothServiceInfo,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QBluetoothServiceInfo,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_QBluetoothServiceInfo,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QBluetoothServiceInfo,
    assign_QBluetoothServiceInfo,
    array_QBluetoothServiceInfo,
    copy_QBluetoothServiceInfo,
    release_QBluetoothServiceInfo,
    cast_QBluetoothServiceInfo,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
