/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:26 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWinExtras.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWinExtras/qwintaskbarprogress.sip"
#include <qwintaskbarprogress.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"


class sipQWinTaskbarProgress : public QWinTaskbarProgress
{
public:
    sipQWinTaskbarProgress(QObject*);
    virtual ~sipQWinTaskbarProgress();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWinTaskbarProgress(const sipQWinTaskbarProgress &);
    sipQWinTaskbarProgress &operator = (const sipQWinTaskbarProgress &);

    char sipPyMethods[7];
};

sipQWinTaskbarProgress::sipQWinTaskbarProgress(QObject*a0): QWinTaskbarProgress(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWinTaskbarProgress::~sipQWinTaskbarProgress()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWinTaskbarProgress::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWinExtras_qt_metaobject(sipPySelf,sipType_QWinTaskbarProgress);
}

int sipQWinTaskbarProgress::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWinTaskbarProgress::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWinExtras_qt_metacall(sipPySelf,sipType_QWinTaskbarProgress,_c,_id,_a);

    return _id;
}

void *sipQWinTaskbarProgress::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWinExtras_qt_metacast(sipPySelf, sipType_QWinTaskbarProgress, _clname, &sipCpp) ? sipCpp : QWinTaskbarProgress::qt_metacast(_clname));
}

void sipQWinTaskbarProgress::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWinTaskbarProgress::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWinTaskbarProgress::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWinTaskbarProgress::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWinTaskbarProgress::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWinTaskbarProgress::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWinTaskbarProgress::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWinTaskbarProgress::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWinTaskbarProgress::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWinTaskbarProgress::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWinTaskbarProgress::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWinTaskbarProgress::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQWinTaskbarProgress::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWinTaskbarProgress::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQWinTaskbarProgress::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQWinTaskbarProgress::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQWinTaskbarProgress::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQWinTaskbarProgress::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQWinTaskbarProgress::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQWinTaskbarProgress::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQWinTaskbarProgress::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQWinTaskbarProgress::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQWinTaskbarProgress::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_sender, "QWinTaskbarProgress.sender() -> QObject");

extern "C" {static PyObject *meth_QWinTaskbarProgress_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWinTaskbarProgress *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 366 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_sender, doc_QWinTaskbarProgress_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_receivers, "QWinTaskbarProgress.receivers(signal) -> int");

extern "C" {static PyObject *meth_QWinTaskbarProgress_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQWinTaskbarProgress *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 425 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinTaskbarProgress.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_receivers, doc_QWinTaskbarProgress_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_timerEvent, "QWinTaskbarProgress.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QWinTaskbarProgress_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQWinTaskbarProgress *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_timerEvent, doc_QWinTaskbarProgress_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_childEvent, "QWinTaskbarProgress.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QWinTaskbarProgress_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQWinTaskbarProgress *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_childEvent, doc_QWinTaskbarProgress_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_customEvent, "QWinTaskbarProgress.customEvent(QEvent)");

extern "C" {static PyObject *meth_QWinTaskbarProgress_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWinTaskbarProgress *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_customEvent, doc_QWinTaskbarProgress_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_connectNotify, "QWinTaskbarProgress.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWinTaskbarProgress_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWinTaskbarProgress *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_connectNotify, doc_QWinTaskbarProgress_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_disconnectNotify, "QWinTaskbarProgress.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWinTaskbarProgress_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWinTaskbarProgress *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_disconnectNotify, doc_QWinTaskbarProgress_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_senderSignalIndex, "QWinTaskbarProgress.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QWinTaskbarProgress_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWinTaskbarProgress *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_senderSignalIndex, doc_QWinTaskbarProgress_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_isSignalConnected, "QWinTaskbarProgress.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QWinTaskbarProgress_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQWinTaskbarProgress *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_isSignalConnected, doc_QWinTaskbarProgress_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_value, "QWinTaskbarProgress.value() -> int");

extern "C" {static PyObject *meth_QWinTaskbarProgress_value(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->value();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_value, doc_QWinTaskbarProgress_value);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_minimum, "QWinTaskbarProgress.minimum() -> int");

extern "C" {static PyObject *meth_QWinTaskbarProgress_minimum(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_minimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimum();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_minimum, doc_QWinTaskbarProgress_minimum);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_maximum, "QWinTaskbarProgress.maximum() -> int");

extern "C" {static PyObject *meth_QWinTaskbarProgress_maximum(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_maximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximum();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_maximum, doc_QWinTaskbarProgress_maximum);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_isVisible, "QWinTaskbarProgress.isVisible() -> bool");

extern "C" {static PyObject *meth_QWinTaskbarProgress_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_isVisible, doc_QWinTaskbarProgress_isVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_isPaused, "QWinTaskbarProgress.isPaused() -> bool");

extern "C" {static PyObject *meth_QWinTaskbarProgress_isPaused(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_isPaused(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isPaused();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_isPaused, doc_QWinTaskbarProgress_isPaused);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_isStopped, "QWinTaskbarProgress.isStopped() -> bool");

extern "C" {static PyObject *meth_QWinTaskbarProgress_isStopped(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_isStopped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isStopped();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_isStopped, doc_QWinTaskbarProgress_isStopped);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_setValue, "QWinTaskbarProgress.setValue(int)");

extern "C" {static PyObject *meth_QWinTaskbarProgress_setValue(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp, &a0))
        {
            sipCpp->setValue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_setValue, doc_QWinTaskbarProgress_setValue);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_setMinimum, "QWinTaskbarProgress.setMinimum(int)");

extern "C" {static PyObject *meth_QWinTaskbarProgress_setMinimum(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_setMinimum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp, &a0))
        {
            sipCpp->setMinimum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_setMinimum, doc_QWinTaskbarProgress_setMinimum);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_setMaximum, "QWinTaskbarProgress.setMaximum(int)");

extern "C" {static PyObject *meth_QWinTaskbarProgress_setMaximum(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_setMaximum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp, &a0))
        {
            sipCpp->setMaximum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_setMaximum, doc_QWinTaskbarProgress_setMaximum);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_setRange, "QWinTaskbarProgress.setRange(int, int)");

extern "C" {static PyObject *meth_QWinTaskbarProgress_setRange(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_setRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp, &a0, &a1))
        {
            sipCpp->setRange(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_setRange, doc_QWinTaskbarProgress_setRange);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_reset, "QWinTaskbarProgress.reset()");

extern "C" {static PyObject *meth_QWinTaskbarProgress_reset(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_reset, doc_QWinTaskbarProgress_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_show, "QWinTaskbarProgress.show()");

extern "C" {static PyObject *meth_QWinTaskbarProgress_show(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_show(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            sipCpp->show();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_show, doc_QWinTaskbarProgress_show);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_hide, "QWinTaskbarProgress.hide()");

extern "C" {static PyObject *meth_QWinTaskbarProgress_hide(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_hide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            sipCpp->hide();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_hide, doc_QWinTaskbarProgress_hide);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_setVisible, "QWinTaskbarProgress.setVisible(bool)");

extern "C" {static PyObject *meth_QWinTaskbarProgress_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp, &a0))
        {
            sipCpp->setVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_setVisible, doc_QWinTaskbarProgress_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_pause, "QWinTaskbarProgress.pause()");

extern "C" {static PyObject *meth_QWinTaskbarProgress_pause(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_pause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            sipCpp->pause();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_pause, doc_QWinTaskbarProgress_pause);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_resume, "QWinTaskbarProgress.resume()");

extern "C" {static PyObject *meth_QWinTaskbarProgress_resume(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_resume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            sipCpp->resume();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_resume, doc_QWinTaskbarProgress_resume);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_setPaused, "QWinTaskbarProgress.setPaused(bool)");

extern "C" {static PyObject *meth_QWinTaskbarProgress_setPaused(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_setPaused(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp, &a0))
        {
            sipCpp->setPaused(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_setPaused, doc_QWinTaskbarProgress_setPaused);

    return NULL;
}


PyDoc_STRVAR(doc_QWinTaskbarProgress_stop, "QWinTaskbarProgress.stop()");

extern "C" {static PyObject *meth_QWinTaskbarProgress_stop(PyObject *, PyObject *);}
static PyObject *meth_QWinTaskbarProgress_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWinTaskbarProgress *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinTaskbarProgress, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinTaskbarProgress, sipName_stop, doc_QWinTaskbarProgress_stop);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWinTaskbarProgress(void *, const sipTypeDef *);}
static void *cast_QWinTaskbarProgress(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWinTaskbarProgress)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QWinTaskbarProgress *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWinTaskbarProgress(void *, int);}
static void release_QWinTaskbarProgress(void *sipCppV,int)
{
    QWinTaskbarProgress *sipCpp = reinterpret_cast<QWinTaskbarProgress *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWinTaskbarProgress(sipSimpleWrapper *);}
static void dealloc_QWinTaskbarProgress(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWinTaskbarProgress *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWinTaskbarProgress(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWinTaskbarProgress(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWinTaskbarProgress(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWinTaskbarProgress *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQWinTaskbarProgress(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWinTaskbarProgress[] = {{162, 0, 1}};


static PyMethodDef methods_QWinTaskbarProgress[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QWinTaskbarProgress_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QWinTaskbarProgress_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QWinTaskbarProgress_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QWinTaskbarProgress_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hide), meth_QWinTaskbarProgress_hide, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_hide)},
    {SIP_MLNAME_CAST(sipName_isPaused), meth_QWinTaskbarProgress_isPaused, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_isPaused)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QWinTaskbarProgress_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isStopped), meth_QWinTaskbarProgress_isStopped, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_isStopped)},
    {SIP_MLNAME_CAST(sipName_isVisible), meth_QWinTaskbarProgress_isVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_isVisible)},
    {SIP_MLNAME_CAST(sipName_maximum), meth_QWinTaskbarProgress_maximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_maximum)},
    {SIP_MLNAME_CAST(sipName_minimum), meth_QWinTaskbarProgress_minimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_minimum)},
    {SIP_MLNAME_CAST(sipName_pause), meth_QWinTaskbarProgress_pause, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_pause)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QWinTaskbarProgress_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QWinTaskbarProgress_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_reset)},
    {SIP_MLNAME_CAST(sipName_resume), meth_QWinTaskbarProgress_resume, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_resume)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QWinTaskbarProgress_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QWinTaskbarProgress_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setMaximum), meth_QWinTaskbarProgress_setMaximum, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_setMaximum)},
    {SIP_MLNAME_CAST(sipName_setMinimum), meth_QWinTaskbarProgress_setMinimum, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_setMinimum)},
    {SIP_MLNAME_CAST(sipName_setPaused), meth_QWinTaskbarProgress_setPaused, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_setPaused)},
    {SIP_MLNAME_CAST(sipName_setRange), meth_QWinTaskbarProgress_setRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_setRange)},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QWinTaskbarProgress_setValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_setValue)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QWinTaskbarProgress_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_setVisible)},
    {SIP_MLNAME_CAST(sipName_show), meth_QWinTaskbarProgress_show, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_show)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QWinTaskbarProgress_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_stop)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QWinTaskbarProgress_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_value), meth_QWinTaskbarProgress_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinTaskbarProgress_value)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWinTaskbarProgress[] = {
    {"visibilityChanged(bool)", "\1QWinTaskbarProgress.visibilityChanged[bool]", 0, 0},
    {"maximumChanged(int)", "\1QWinTaskbarProgress.maximumChanged[int]", 0, 0},
    {"minimumChanged(int)", "\1QWinTaskbarProgress.minimumChanged[int]", 0, 0},
    {"valueChanged(int)", "\1QWinTaskbarProgress.valueChanged[int]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QWinTaskbarProgress, "\1QWinTaskbarProgress(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWinExtras_QWinTaskbarProgress = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWinTaskbarProgress,
        {0}
    },
    {
        sipNameNr_QWinTaskbarProgress,
        {0, 0, 1},
        27, methods_QWinTaskbarProgress,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWinTaskbarProgress,
    -1,
    -1,
    supers_QWinTaskbarProgress,
    0,
    init_type_QWinTaskbarProgress,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWinTaskbarProgress,
    0,
    0,
    0,
    release_QWinTaskbarProgress,
    cast_QWinTaskbarProgress,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWinTaskbarProgress::staticMetaObject,
    0,
    signals_QWinTaskbarProgress,
    0
};
