/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:26 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWinExtras.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWinExtras/qwinjumplistitem.sip"
#include <qwinjumplistitem.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinJumpListItem.cpp"

#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinJumpListItem.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinJumpListItem.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinJumpListItem.cpp"


PyDoc_STRVAR(doc_QWinJumpListItem_setType, "QWinJumpListItem.setType(QWinJumpListItem.Type)");

extern "C" {static PyObject *meth_QWinJumpListItem_setType(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_setType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWinJumpListItem::Type a0;
        QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWinJumpListItem, &sipCpp, sipType_QWinJumpListItem_Type, &a0))
        {
            sipCpp->setType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_setType, doc_QWinJumpListItem_setType);

    return NULL;
}


PyDoc_STRVAR(doc_QWinJumpListItem_type, "QWinJumpListItem.type() -> QWinJumpListItem.Type");

extern "C" {static PyObject *meth_QWinJumpListItem_type(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinJumpListItem, &sipCpp))
        {
            QWinJumpListItem::Type sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(sipRes,sipType_QWinJumpListItem_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_type, doc_QWinJumpListItem_type);

    return NULL;
}


PyDoc_STRVAR(doc_QWinJumpListItem_setFilePath, "QWinJumpListItem.setFilePath(str)");

extern "C" {static PyObject *meth_QWinJumpListItem_setFilePath(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_setFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWinJumpListItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFilePath(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_setFilePath, doc_QWinJumpListItem_setFilePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWinJumpListItem_filePath, "QWinJumpListItem.filePath() -> str");

extern "C" {static PyObject *meth_QWinJumpListItem_filePath(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinJumpListItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->filePath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_filePath, doc_QWinJumpListItem_filePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWinJumpListItem_setWorkingDirectory, "QWinJumpListItem.setWorkingDirectory(str)");

extern "C" {static PyObject *meth_QWinJumpListItem_setWorkingDirectory(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_setWorkingDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWinJumpListItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWorkingDirectory(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_setWorkingDirectory, doc_QWinJumpListItem_setWorkingDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QWinJumpListItem_workingDirectory, "QWinJumpListItem.workingDirectory() -> str");

extern "C" {static PyObject *meth_QWinJumpListItem_workingDirectory(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_workingDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinJumpListItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->workingDirectory());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_workingDirectory, doc_QWinJumpListItem_workingDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QWinJumpListItem_setIcon, "QWinJumpListItem.setIcon(QIcon)");

extern "C" {static PyObject *meth_QWinJumpListItem_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon* a0;
        QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWinJumpListItem, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_setIcon, doc_QWinJumpListItem_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QWinJumpListItem_icon, "QWinJumpListItem.icon() -> QIcon");

extern "C" {static PyObject *meth_QWinJumpListItem_icon(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinJumpListItem, &sipCpp))
        {
            QIcon*sipRes;

            sipRes = new QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_icon, doc_QWinJumpListItem_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QWinJumpListItem_setTitle, "QWinJumpListItem.setTitle(str)");

extern "C" {static PyObject *meth_QWinJumpListItem_setTitle(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_setTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWinJumpListItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setTitle(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_setTitle, doc_QWinJumpListItem_setTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QWinJumpListItem_title, "QWinJumpListItem.title() -> str");

extern "C" {static PyObject *meth_QWinJumpListItem_title(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinJumpListItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_title, doc_QWinJumpListItem_title);

    return NULL;
}


PyDoc_STRVAR(doc_QWinJumpListItem_setDescription, "QWinJumpListItem.setDescription(str)");

extern "C" {static PyObject *meth_QWinJumpListItem_setDescription(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_setDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWinJumpListItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDescription(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_setDescription, doc_QWinJumpListItem_setDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QWinJumpListItem_description, "QWinJumpListItem.description() -> str");

extern "C" {static PyObject *meth_QWinJumpListItem_description(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinJumpListItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->description());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_description, doc_QWinJumpListItem_description);

    return NULL;
}


PyDoc_STRVAR(doc_QWinJumpListItem_setArguments, "QWinJumpListItem.setArguments(list-of-str)");

extern "C" {static PyObject *meth_QWinJumpListItem_setArguments(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_setArguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWinJumpListItem, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setArguments(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_setArguments, doc_QWinJumpListItem_setArguments);

    return NULL;
}


PyDoc_STRVAR(doc_QWinJumpListItem_arguments, "QWinJumpListItem.arguments() -> list-of-str");

extern "C" {static PyObject *meth_QWinJumpListItem_arguments(PyObject *, PyObject *);}
static PyObject *meth_QWinJumpListItem_arguments(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinJumpListItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinJumpListItem, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->arguments());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinJumpListItem, sipName_arguments, doc_QWinJumpListItem_arguments);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWinJumpListItem(void *, const sipTypeDef *);}
static void *cast_QWinJumpListItem(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QWinJumpListItem)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWinJumpListItem(void *, int);}
static void release_QWinJumpListItem(void *sipCppV,int)
{
    delete reinterpret_cast<QWinJumpListItem *>(sipCppV);
}


extern "C" {static void dealloc_QWinJumpListItem(sipSimpleWrapper *);}
static void dealloc_QWinJumpListItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWinJumpListItem(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QWinJumpListItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWinJumpListItem(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QWinJumpListItem *sipCpp = 0;

    {
        QWinJumpListItem::Type a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "E", sipType_QWinJumpListItem_Type, &a0))
        {
            sipCpp = new QWinJumpListItem(a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QWinJumpListItem[] = {
    {SIP_MLNAME_CAST(sipName_arguments), meth_QWinJumpListItem_arguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_arguments)},
    {SIP_MLNAME_CAST(sipName_description), meth_QWinJumpListItem_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_description)},
    {SIP_MLNAME_CAST(sipName_filePath), meth_QWinJumpListItem_filePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_filePath)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QWinJumpListItem_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_icon)},
    {SIP_MLNAME_CAST(sipName_setArguments), meth_QWinJumpListItem_setArguments, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_setArguments)},
    {SIP_MLNAME_CAST(sipName_setDescription), meth_QWinJumpListItem_setDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_setDescription)},
    {SIP_MLNAME_CAST(sipName_setFilePath), meth_QWinJumpListItem_setFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_setFilePath)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QWinJumpListItem_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_setIcon)},
    {SIP_MLNAME_CAST(sipName_setTitle), meth_QWinJumpListItem_setTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_setTitle)},
    {SIP_MLNAME_CAST(sipName_setType), meth_QWinJumpListItem_setType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_setType)},
    {SIP_MLNAME_CAST(sipName_setWorkingDirectory), meth_QWinJumpListItem_setWorkingDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_setWorkingDirectory)},
    {SIP_MLNAME_CAST(sipName_title), meth_QWinJumpListItem_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_title)},
    {SIP_MLNAME_CAST(sipName_type), meth_QWinJumpListItem_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_type)},
    {SIP_MLNAME_CAST(sipName_workingDirectory), meth_QWinJumpListItem_workingDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinJumpListItem_workingDirectory)}
};

static sipEnumMemberDef enummembers_QWinJumpListItem[] = {
    {sipName_Destination, static_cast<int>(QWinJumpListItem::Destination), 7},
    {sipName_Link, static_cast<int>(QWinJumpListItem::Link), 7},
    {sipName_Separator, static_cast<int>(QWinJumpListItem::Separator), 7},
};

PyDoc_STRVAR(doc_QWinJumpListItem, "\1QWinJumpListItem(QWinJumpListItem.Type)");


pyqt5ClassTypeDef sipTypeDef_QtWinExtras_QWinJumpListItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWinJumpListItem,
        {0}
    },
    {
        sipNameNr_QWinJumpListItem,
        {0, 0, 1},
        14, methods_QWinJumpListItem,
        3, enummembers_QWinJumpListItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWinJumpListItem,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_QWinJumpListItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWinJumpListItem,
    0,
    0,
    0,
    release_QWinJumpListItem,
    cast_QWinJumpListItem,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
