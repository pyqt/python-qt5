/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:26 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWinExtras.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWinExtras/qwinthumbnailtoolbutton.sip"
#include <qwinthumbnailtoolbutton.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"


class sipQWinThumbnailToolButton : public QWinThumbnailToolButton
{
public:
    sipQWinThumbnailToolButton(QObject*);
    virtual ~sipQWinThumbnailToolButton();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWinThumbnailToolButton(const sipQWinThumbnailToolButton &);
    sipQWinThumbnailToolButton &operator = (const sipQWinThumbnailToolButton &);

    char sipPyMethods[7];
};

sipQWinThumbnailToolButton::sipQWinThumbnailToolButton(QObject*a0): QWinThumbnailToolButton(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWinThumbnailToolButton::~sipQWinThumbnailToolButton()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWinThumbnailToolButton::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWinExtras_qt_metaobject(sipPySelf,sipType_QWinThumbnailToolButton);
}

int sipQWinThumbnailToolButton::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWinThumbnailToolButton::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWinExtras_qt_metacall(sipPySelf,sipType_QWinThumbnailToolButton,_c,_id,_a);

    return _id;
}

void *sipQWinThumbnailToolButton::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWinExtras_qt_metacast(sipPySelf, sipType_QWinThumbnailToolButton, _clname, &sipCpp) ? sipCpp : QWinThumbnailToolButton::qt_metacast(_clname));
}

void sipQWinThumbnailToolButton::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWinThumbnailToolButton::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWinThumbnailToolButton::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWinThumbnailToolButton::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWinThumbnailToolButton::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWinThumbnailToolButton::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWinThumbnailToolButton::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWinThumbnailToolButton::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWinThumbnailToolButton::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWinThumbnailToolButton::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWinThumbnailToolButton::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWinThumbnailToolButton::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQWinThumbnailToolButton::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWinThumbnailToolButton::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWinExtras_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWinExtras_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQWinThumbnailToolButton::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQWinThumbnailToolButton::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQWinThumbnailToolButton::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQWinThumbnailToolButton::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQWinThumbnailToolButton::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQWinThumbnailToolButton::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQWinThumbnailToolButton::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQWinThumbnailToolButton::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQWinThumbnailToolButton::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_sender, "QWinThumbnailToolButton.sender() -> QObject");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWinThumbnailToolButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 369 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_sender, doc_QWinThumbnailToolButton_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_receivers, "QWinThumbnailToolButton.receivers(signal) -> int");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQWinThumbnailToolButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 428 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWinExtras/sipQtWinExtrasQWinThumbnailToolButton.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_receivers, doc_QWinThumbnailToolButton_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_timerEvent, "QWinThumbnailToolButton.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQWinThumbnailToolButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_timerEvent, doc_QWinThumbnailToolButton_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_childEvent, "QWinThumbnailToolButton.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQWinThumbnailToolButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_childEvent, doc_QWinThumbnailToolButton_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_customEvent, "QWinThumbnailToolButton.customEvent(QEvent)");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWinThumbnailToolButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_customEvent, doc_QWinThumbnailToolButton_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_connectNotify, "QWinThumbnailToolButton.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWinThumbnailToolButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_connectNotify, doc_QWinThumbnailToolButton_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_disconnectNotify, "QWinThumbnailToolButton.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWinThumbnailToolButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_disconnectNotify, doc_QWinThumbnailToolButton_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_senderSignalIndex, "QWinThumbnailToolButton.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWinThumbnailToolButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_senderSignalIndex, doc_QWinThumbnailToolButton_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_isSignalConnected, "QWinThumbnailToolButton.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQWinThumbnailToolButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_isSignalConnected, doc_QWinThumbnailToolButton_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_setToolTip, "QWinThumbnailToolButton.setToolTip(str)");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setToolTip(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_setToolTip, doc_QWinThumbnailToolButton_setToolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_toolTip, "QWinThumbnailToolButton.toolTip() -> str");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toolTip());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_toolTip, doc_QWinThumbnailToolButton_toolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_setIcon, "QWinThumbnailToolButton.setIcon(QIcon)");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon* a0;
        QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_setIcon, doc_QWinThumbnailToolButton_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_icon, "QWinThumbnailToolButton.icon() -> QIcon");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_icon(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp))
        {
            QIcon*sipRes;

            sipRes = new QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_icon, doc_QWinThumbnailToolButton_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_setEnabled, "QWinThumbnailToolButton.setEnabled(bool)");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, &a0))
        {
            sipCpp->setEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_setEnabled, doc_QWinThumbnailToolButton_setEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_isEnabled, "QWinThumbnailToolButton.isEnabled() -> bool");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_isEnabled, doc_QWinThumbnailToolButton_isEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_setInteractive, "QWinThumbnailToolButton.setInteractive(bool)");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_setInteractive(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_setInteractive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, &a0))
        {
            sipCpp->setInteractive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_setInteractive, doc_QWinThumbnailToolButton_setInteractive);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_isInteractive, "QWinThumbnailToolButton.isInteractive() -> bool");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_isInteractive(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_isInteractive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isInteractive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_isInteractive, doc_QWinThumbnailToolButton_isInteractive);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_setVisible, "QWinThumbnailToolButton.setVisible(bool)");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, &a0))
        {
            sipCpp->setVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_setVisible, doc_QWinThumbnailToolButton_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_isVisible, "QWinThumbnailToolButton.isVisible() -> bool");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_isVisible, doc_QWinThumbnailToolButton_isVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_setDismissOnClick, "QWinThumbnailToolButton.setDismissOnClick(bool)");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_setDismissOnClick(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_setDismissOnClick(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, &a0))
        {
            sipCpp->setDismissOnClick(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_setDismissOnClick, doc_QWinThumbnailToolButton_setDismissOnClick);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_dismissOnClick, "QWinThumbnailToolButton.dismissOnClick() -> bool");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_dismissOnClick(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_dismissOnClick(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->dismissOnClick();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_dismissOnClick, doc_QWinThumbnailToolButton_dismissOnClick);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_setFlat, "QWinThumbnailToolButton.setFlat(bool)");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_setFlat(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_setFlat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp, &a0))
        {
            sipCpp->setFlat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_setFlat, doc_QWinThumbnailToolButton_setFlat);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_isFlat, "QWinThumbnailToolButton.isFlat() -> bool");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_isFlat(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_isFlat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFlat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_isFlat, doc_QWinThumbnailToolButton_isFlat);

    return NULL;
}


PyDoc_STRVAR(doc_QWinThumbnailToolButton_click, "QWinThumbnailToolButton.click()");

extern "C" {static PyObject *meth_QWinThumbnailToolButton_click(PyObject *, PyObject *);}
static PyObject *meth_QWinThumbnailToolButton_click(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWinThumbnailToolButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWinThumbnailToolButton, &sipCpp))
        {
            sipCpp->click();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWinThumbnailToolButton, sipName_click, doc_QWinThumbnailToolButton_click);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWinThumbnailToolButton(void *, const sipTypeDef *);}
static void *cast_QWinThumbnailToolButton(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWinThumbnailToolButton)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QWinThumbnailToolButton *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWinThumbnailToolButton(void *, int);}
static void release_QWinThumbnailToolButton(void *sipCppV,int)
{
    QWinThumbnailToolButton *sipCpp = reinterpret_cast<QWinThumbnailToolButton *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWinThumbnailToolButton(sipSimpleWrapper *);}
static void dealloc_QWinThumbnailToolButton(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWinThumbnailToolButton *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWinThumbnailToolButton(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWinThumbnailToolButton(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWinThumbnailToolButton(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWinThumbnailToolButton *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQWinThumbnailToolButton(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWinThumbnailToolButton[] = {{162, 0, 1}};


static PyMethodDef methods_QWinThumbnailToolButton[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QWinThumbnailToolButton_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_click), meth_QWinThumbnailToolButton_click, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_click)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QWinThumbnailToolButton_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QWinThumbnailToolButton_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QWinThumbnailToolButton_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dismissOnClick), meth_QWinThumbnailToolButton_dismissOnClick, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_dismissOnClick)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QWinThumbnailToolButton_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_icon)},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QWinThumbnailToolButton_isEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_isEnabled)},
    {SIP_MLNAME_CAST(sipName_isFlat), meth_QWinThumbnailToolButton_isFlat, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_isFlat)},
    {SIP_MLNAME_CAST(sipName_isInteractive), meth_QWinThumbnailToolButton_isInteractive, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_isInteractive)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QWinThumbnailToolButton_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isVisible), meth_QWinThumbnailToolButton_isVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_isVisible)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QWinThumbnailToolButton_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QWinThumbnailToolButton_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QWinThumbnailToolButton_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setDismissOnClick), meth_QWinThumbnailToolButton_setDismissOnClick, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_setDismissOnClick)},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QWinThumbnailToolButton_setEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_setEnabled)},
    {SIP_MLNAME_CAST(sipName_setFlat), meth_QWinThumbnailToolButton_setFlat, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_setFlat)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QWinThumbnailToolButton_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_setIcon)},
    {SIP_MLNAME_CAST(sipName_setInteractive), meth_QWinThumbnailToolButton_setInteractive, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_setInteractive)},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QWinThumbnailToolButton_setToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_setToolTip)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QWinThumbnailToolButton_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_setVisible)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QWinThumbnailToolButton_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QWinThumbnailToolButton_toolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QWinThumbnailToolButton_toolTip)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWinThumbnailToolButton[] = {
    {"clicked()", "\1QWinThumbnailToolButton.clicked", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QWinThumbnailToolButton, "\1QWinThumbnailToolButton(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWinExtras_QWinThumbnailToolButton = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWinThumbnailToolButton,
        {0}
    },
    {
        sipNameNr_QWinThumbnailToolButton,
        {0, 0, 1},
        24, methods_QWinThumbnailToolButton,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWinThumbnailToolButton,
    -1,
    -1,
    supers_QWinThumbnailToolButton,
    0,
    init_type_QWinThumbnailToolButton,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWinThumbnailToolButton,
    0,
    0,
    0,
    release_QWinThumbnailToolButton,
    cast_QWinThumbnailToolButton,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWinThumbnailToolButton::staticMetaObject,
    0,
    signals_QWinThumbnailToolButton,
    0
};
