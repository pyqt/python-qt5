/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSensors.h"

#line 88 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qsensor.sip"
#include <qsensor.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"

#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qsensor.sip"
#include <qsensor.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 71 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qsensor.sip"
#include <qsensor.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qsensor.sip"
#include <qsensor.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 446 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 61 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 64 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 76 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 79 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 85 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 91 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 94 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 97 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"


class sipQSensor : public QSensor
{
public:
    sipQSensor(const QByteArray&,QObject*);
    virtual ~sipQSensor();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSensor(const sipQSensor &);
    sipQSensor &operator = (const sipQSensor &);

    char sipPyMethods[7];
};

sipQSensor::sipQSensor(const QByteArray& a0,QObject*a1): QSensor(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSensor::~sipQSensor()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSensor::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtSensors_qt_metaobject(sipPySelf,sipType_QSensor);
}

int sipQSensor::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSensor::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtSensors_qt_metacall(sipPySelf,sipType_QSensor,_c,_id,_a);

    return _id;
}

void *sipQSensor::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtSensors_qt_metacast(sipPySelf, sipType_QSensor, _clname, &sipCpp) ? sipCpp : QSensor::qt_metacast(_clname));
}

void sipQSensor::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSensor::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtSensors_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtSensors_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSensor::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSensor::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtSensors_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtSensors_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSensor::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSensor::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtSensors_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtSensors_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSensor::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSensor::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtSensors_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtSensors_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSensor::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSensor::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtSensors_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtSensors_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSensor::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSensor::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtSensors_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtSensors_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQSensor::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSensor::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtSensors_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtSensors_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQSensor::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQSensor::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQSensor::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQSensor::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQSensor::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQSensor::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQSensor::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQSensor::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQSensor::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QSensor_sender, "QSensor.sender() -> QObject");

extern "C" {static PyObject *meth_QSensor_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSensor_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSensor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 385 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_sender, doc_QSensor_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_receivers, "QSensor.receivers(signal) -> int");

extern "C" {static PyObject *meth_QSensor_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSensor_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQSensor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QSensor, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 444 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQSensor.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_receivers, doc_QSensor_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_timerEvent, "QSensor.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QSensor_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSensor_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQSensor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSensor, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_timerEvent, doc_QSensor_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_childEvent, "QSensor.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QSensor_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSensor_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQSensor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSensor, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_childEvent, doc_QSensor_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_customEvent, "QSensor.customEvent(QEvent)");

extern "C" {static PyObject *meth_QSensor_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSensor_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQSensor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSensor, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_customEvent, doc_QSensor_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_connectNotify, "QSensor.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QSensor_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSensor_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQSensor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSensor, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_connectNotify, doc_QSensor_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_disconnectNotify, "QSensor.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QSensor_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSensor_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQSensor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSensor, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_disconnectNotify, doc_QSensor_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_senderSignalIndex, "QSensor.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QSensor_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSensor_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSensor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_senderSignalIndex, doc_QSensor_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_isSignalConnected, "QSensor.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QSensor_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSensor_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQSensor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSensor, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_isSignalConnected, doc_QSensor_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_identifier, "QSensor.identifier() -> QByteArray");

extern "C" {static PyObject *meth_QSensor_identifier(PyObject *, PyObject *);}
static PyObject *meth_QSensor_identifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->identifier());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_identifier, doc_QSensor_identifier);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_setIdentifier, "QSensor.setIdentifier(QByteArray)");

extern "C" {static PyObject *meth_QSensor_setIdentifier(PyObject *, PyObject *);}
static PyObject *meth_QSensor_setIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSensor, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setIdentifier(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_setIdentifier, doc_QSensor_setIdentifier);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_type, "QSensor.type() -> QByteArray");

extern "C" {static PyObject *meth_QSensor_type(PyObject *, PyObject *);}
static PyObject *meth_QSensor_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->type());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_type, doc_QSensor_type);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_connectToBackend, "QSensor.connectToBackend() -> bool");

extern "C" {static PyObject *meth_QSensor_connectToBackend(PyObject *, PyObject *);}
static PyObject *meth_QSensor_connectToBackend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->connectToBackend();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_connectToBackend, doc_QSensor_connectToBackend);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_isConnectedToBackend, "QSensor.isConnectedToBackend() -> bool");

extern "C" {static PyObject *meth_QSensor_isConnectedToBackend(PyObject *, PyObject *);}
static PyObject *meth_QSensor_isConnectedToBackend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isConnectedToBackend();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_isConnectedToBackend, doc_QSensor_isConnectedToBackend);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_isBusy, "QSensor.isBusy() -> bool");

extern "C" {static PyObject *meth_QSensor_isBusy(PyObject *, PyObject *);}
static PyObject *meth_QSensor_isBusy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBusy();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_isBusy, doc_QSensor_isBusy);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_setActive, "QSensor.setActive(bool)");

extern "C" {static PyObject *meth_QSensor_setActive(PyObject *, PyObject *);}
static PyObject *meth_QSensor_setActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSensor, &sipCpp, &a0))
        {
            sipCpp->setActive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_setActive, doc_QSensor_setActive);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_isActive, "QSensor.isActive() -> bool");

extern "C" {static PyObject *meth_QSensor_isActive(PyObject *, PyObject *);}
static PyObject *meth_QSensor_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_isActive, doc_QSensor_isActive);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_isAlwaysOn, "QSensor.isAlwaysOn() -> bool");

extern "C" {static PyObject *meth_QSensor_isAlwaysOn(PyObject *, PyObject *);}
static PyObject *meth_QSensor_isAlwaysOn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAlwaysOn();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_isAlwaysOn, doc_QSensor_isAlwaysOn);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_setAlwaysOn, "QSensor.setAlwaysOn(bool)");

extern "C" {static PyObject *meth_QSensor_setAlwaysOn(PyObject *, PyObject *);}
static PyObject *meth_QSensor_setAlwaysOn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSensor, &sipCpp, &a0))
        {
            sipCpp->setAlwaysOn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_setAlwaysOn, doc_QSensor_setAlwaysOn);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_skipDuplicates, "QSensor.skipDuplicates() -> bool");

extern "C" {static PyObject *meth_QSensor_skipDuplicates(PyObject *, PyObject *);}
static PyObject *meth_QSensor_skipDuplicates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->skipDuplicates();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_skipDuplicates, doc_QSensor_skipDuplicates);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_setSkipDuplicates, "QSensor.setSkipDuplicates(bool)");

extern "C" {static PyObject *meth_QSensor_setSkipDuplicates(PyObject *, PyObject *);}
static PyObject *meth_QSensor_setSkipDuplicates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSensor, &sipCpp, &a0))
        {
            sipCpp->setSkipDuplicates(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_setSkipDuplicates, doc_QSensor_setSkipDuplicates);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_availableDataRates, "QSensor.availableDataRates() -> list-of-tuple-of-int-int");

extern "C" {static PyObject *meth_QSensor_availableDataRates(PyObject *, PyObject *);}
static PyObject *meth_QSensor_availableDataRates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            qrangelist*sipRes;

            sipRes = new qrangelist(sipCpp->availableDataRates());

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_1800_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_availableDataRates, doc_QSensor_availableDataRates);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_dataRate, "QSensor.dataRate() -> int");

extern "C" {static PyObject *meth_QSensor_dataRate(PyObject *, PyObject *);}
static PyObject *meth_QSensor_dataRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->dataRate();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_dataRate, doc_QSensor_dataRate);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_setDataRate, "QSensor.setDataRate(int)");

extern "C" {static PyObject *meth_QSensor_setDataRate(PyObject *, PyObject *);}
static PyObject *meth_QSensor_setDataRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSensor, &sipCpp, &a0))
        {
            sipCpp->setDataRate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_setDataRate, doc_QSensor_setDataRate);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_outputRanges, "QSensor.outputRanges() -> list-of-qoutputrange");

extern "C" {static PyObject *meth_QSensor_outputRanges(PyObject *, PyObject *);}
static PyObject *meth_QSensor_outputRanges(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            qoutputrangelist*sipRes;

            sipRes = new qoutputrangelist(sipCpp->outputRanges());

            return sipConvertFromNewType(sipRes,sipType_QList_0100qoutputrange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_outputRanges, doc_QSensor_outputRanges);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_outputRange, "QSensor.outputRange() -> int");

extern "C" {static PyObject *meth_QSensor_outputRange(PyObject *, PyObject *);}
static PyObject *meth_QSensor_outputRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->outputRange();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_outputRange, doc_QSensor_outputRange);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_setOutputRange, "QSensor.setOutputRange(int)");

extern "C" {static PyObject *meth_QSensor_setOutputRange(PyObject *, PyObject *);}
static PyObject *meth_QSensor_setOutputRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSensor, &sipCpp, &a0))
        {
            sipCpp->setOutputRange(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_setOutputRange, doc_QSensor_setOutputRange);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_description, "QSensor.description() -> str");

extern "C" {static PyObject *meth_QSensor_description(PyObject *, PyObject *);}
static PyObject *meth_QSensor_description(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->description());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_description, doc_QSensor_description);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_error, "QSensor.error() -> int");

extern "C" {static PyObject *meth_QSensor_error(PyObject *, PyObject *);}
static PyObject *meth_QSensor_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->error();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_error, doc_QSensor_error);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_addFilter, "QSensor.addFilter(QSensorFilter)");

extern "C" {static PyObject *meth_QSensor_addFilter(PyObject *, PyObject *);}
static PyObject *meth_QSensor_addFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSensorFilter* a0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSensor, &sipCpp, sipType_QSensorFilter, &a0))
        {
            sipCpp->addFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_addFilter, doc_QSensor_addFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_removeFilter, "QSensor.removeFilter(QSensorFilter)");

extern "C" {static PyObject *meth_QSensor_removeFilter(PyObject *, PyObject *);}
static PyObject *meth_QSensor_removeFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSensorFilter* a0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSensor, &sipCpp, sipType_QSensorFilter, &a0))
        {
            sipCpp->removeFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_removeFilter, doc_QSensor_removeFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_filters, "QSensor.filters() -> list-of-QSensorFilter");

extern "C" {static PyObject *meth_QSensor_filters(PyObject *, PyObject *);}
static PyObject *meth_QSensor_filters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            QList<QSensorFilter*>*sipRes;

            sipRes = new QList<QSensorFilter*>(sipCpp->filters());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QSensorFilter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_filters, doc_QSensor_filters);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_reading, "QSensor.reading() -> QSensorReading");

extern "C" {static PyObject *meth_QSensor_reading(PyObject *, PyObject *);}
static PyObject *meth_QSensor_reading(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            QSensorReading*sipRes;

            sipRes = sipCpp->reading();

            return sipConvertFromType(sipRes,sipType_QSensorReading,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_reading, doc_QSensor_reading);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_sensorTypes, "QSensor.sensorTypes() -> list-of-QByteArray");

extern "C" {static PyObject *meth_QSensor_sensorTypes(PyObject *, PyObject *);}
static PyObject *meth_QSensor_sensorTypes(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QByteArray>*sipRes;

            sipRes = new QList<QByteArray>(QSensor::sensorTypes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_sensorTypes, doc_QSensor_sensorTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_sensorsForType, "QSensor.sensorsForType(QByteArray) -> list-of-QByteArray");

extern "C" {static PyObject *meth_QSensor_sensorsForType(PyObject *, PyObject *);}
static PyObject *meth_QSensor_sensorsForType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QList<QByteArray>*sipRes;

            sipRes = new QList<QByteArray>(QSensor::sensorsForType(*a0));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_sensorsForType, doc_QSensor_sensorsForType);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_defaultSensorForType, "QSensor.defaultSensorForType(QByteArray) -> QByteArray");

extern "C" {static PyObject *meth_QSensor_defaultSensorForType(PyObject *, PyObject *);}
static PyObject *meth_QSensor_defaultSensorForType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(QSensor::defaultSensorForType(*a0));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_defaultSensorForType, doc_QSensor_defaultSensorForType);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_isFeatureSupported, "QSensor.isFeatureSupported(QSensor.Feature) -> bool");

extern "C" {static PyObject *meth_QSensor_isFeatureSupported(PyObject *, PyObject *);}
static PyObject *meth_QSensor_isFeatureSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSensor::Feature a0;
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSensor, &sipCpp, sipType_QSensor_Feature, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isFeatureSupported(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_isFeatureSupported, doc_QSensor_isFeatureSupported);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_axesOrientationMode, "QSensor.axesOrientationMode() -> QSensor.AxesOrientationMode");

extern "C" {static PyObject *meth_QSensor_axesOrientationMode(PyObject *, PyObject *);}
static PyObject *meth_QSensor_axesOrientationMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            QSensor::AxesOrientationMode sipRes;

            sipRes = sipCpp->axesOrientationMode();

            return sipConvertFromEnum(sipRes,sipType_QSensor_AxesOrientationMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_axesOrientationMode, doc_QSensor_axesOrientationMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_setAxesOrientationMode, "QSensor.setAxesOrientationMode(QSensor.AxesOrientationMode)");

extern "C" {static PyObject *meth_QSensor_setAxesOrientationMode(PyObject *, PyObject *);}
static PyObject *meth_QSensor_setAxesOrientationMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSensor::AxesOrientationMode a0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSensor, &sipCpp, sipType_QSensor_AxesOrientationMode, &a0))
        {
            sipCpp->setAxesOrientationMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_setAxesOrientationMode, doc_QSensor_setAxesOrientationMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_currentOrientation, "QSensor.currentOrientation() -> int");

extern "C" {static PyObject *meth_QSensor_currentOrientation(PyObject *, PyObject *);}
static PyObject *meth_QSensor_currentOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentOrientation();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_currentOrientation, doc_QSensor_currentOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_setCurrentOrientation, "QSensor.setCurrentOrientation(int)");

extern "C" {static PyObject *meth_QSensor_setCurrentOrientation(PyObject *, PyObject *);}
static PyObject *meth_QSensor_setCurrentOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSensor, &sipCpp, &a0))
        {
            sipCpp->setCurrentOrientation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_setCurrentOrientation, doc_QSensor_setCurrentOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_userOrientation, "QSensor.userOrientation() -> int");

extern "C" {static PyObject *meth_QSensor_userOrientation(PyObject *, PyObject *);}
static PyObject *meth_QSensor_userOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->userOrientation();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_userOrientation, doc_QSensor_userOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_setUserOrientation, "QSensor.setUserOrientation(int)");

extern "C" {static PyObject *meth_QSensor_setUserOrientation(PyObject *, PyObject *);}
static PyObject *meth_QSensor_setUserOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSensor, &sipCpp, &a0))
        {
            sipCpp->setUserOrientation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_setUserOrientation, doc_QSensor_setUserOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_maxBufferSize, "QSensor.maxBufferSize() -> int");

extern "C" {static PyObject *meth_QSensor_maxBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSensor_maxBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_maxBufferSize, doc_QSensor_maxBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_setMaxBufferSize, "QSensor.setMaxBufferSize(int)");

extern "C" {static PyObject *meth_QSensor_setMaxBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSensor_setMaxBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSensor, &sipCpp, &a0))
        {
            sipCpp->setMaxBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_setMaxBufferSize, doc_QSensor_setMaxBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_efficientBufferSize, "QSensor.efficientBufferSize() -> int");

extern "C" {static PyObject *meth_QSensor_efficientBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSensor_efficientBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->efficientBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_efficientBufferSize, doc_QSensor_efficientBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_setEfficientBufferSize, "QSensor.setEfficientBufferSize(int)");

extern "C" {static PyObject *meth_QSensor_setEfficientBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSensor_setEfficientBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSensor, &sipCpp, &a0))
        {
            sipCpp->setEfficientBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_setEfficientBufferSize, doc_QSensor_setEfficientBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_bufferSize, "QSensor.bufferSize() -> int");

extern "C" {static PyObject *meth_QSensor_bufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSensor_bufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_bufferSize, doc_QSensor_bufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_setBufferSize, "QSensor.setBufferSize(int)");

extern "C" {static PyObject *meth_QSensor_setBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSensor_setBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSensor, &sipCpp, &a0))
        {
            sipCpp->setBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_setBufferSize, doc_QSensor_setBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_start, "QSensor.start() -> bool");

extern "C" {static PyObject *meth_QSensor_start(PyObject *, PyObject *);}
static PyObject *meth_QSensor_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->start();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_start, doc_QSensor_start);

    return NULL;
}


PyDoc_STRVAR(doc_QSensor_stop, "QSensor.stop()");

extern "C" {static PyObject *meth_QSensor_stop(PyObject *, PyObject *);}
static PyObject *meth_QSensor_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSensor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSensor, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSensor, sipName_stop, doc_QSensor_stop);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSensor(void *, const sipTypeDef *);}
static void *cast_QSensor(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSensor)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QSensor *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSensor(void *, int);}
static void release_QSensor(void *sipCppV,int)
{
    QSensor *sipCpp = reinterpret_cast<QSensor *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSensor(sipSimpleWrapper *);}
static void dealloc_QSensor(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSensor *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSensor(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSensor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSensor(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSensor *sipCpp = 0;

    {
        const QByteArray* a0;
        int a0State = 0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QByteArray, &a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQSensor(*a0,a1);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSensor[] = {{162, 0, 1}};


static PyMethodDef methods_QSensor[] = {
    {SIP_MLNAME_CAST(sipName_addFilter), meth_QSensor_addFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_addFilter)},
    {SIP_MLNAME_CAST(sipName_availableDataRates), meth_QSensor_availableDataRates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_availableDataRates)},
    {SIP_MLNAME_CAST(sipName_axesOrientationMode), meth_QSensor_axesOrientationMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_axesOrientationMode)},
    {SIP_MLNAME_CAST(sipName_bufferSize), meth_QSensor_bufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_bufferSize)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QSensor_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QSensor_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectToBackend), meth_QSensor_connectToBackend, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_connectToBackend)},
    {SIP_MLNAME_CAST(sipName_currentOrientation), meth_QSensor_currentOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_currentOrientation)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QSensor_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dataRate), meth_QSensor_dataRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_dataRate)},
    {SIP_MLNAME_CAST(sipName_defaultSensorForType), meth_QSensor_defaultSensorForType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_defaultSensorForType)},
    {SIP_MLNAME_CAST(sipName_description), meth_QSensor_description, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_description)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QSensor_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_efficientBufferSize), meth_QSensor_efficientBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_efficientBufferSize)},
    {SIP_MLNAME_CAST(sipName_error), meth_QSensor_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_error)},
    {SIP_MLNAME_CAST(sipName_filters), meth_QSensor_filters, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_filters)},
    {SIP_MLNAME_CAST(sipName_identifier), meth_QSensor_identifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_identifier)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QSensor_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_isActive)},
    {SIP_MLNAME_CAST(sipName_isAlwaysOn), meth_QSensor_isAlwaysOn, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_isAlwaysOn)},
    {SIP_MLNAME_CAST(sipName_isBusy), meth_QSensor_isBusy, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_isBusy)},
    {SIP_MLNAME_CAST(sipName_isConnectedToBackend), meth_QSensor_isConnectedToBackend, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_isConnectedToBackend)},
    {SIP_MLNAME_CAST(sipName_isFeatureSupported), meth_QSensor_isFeatureSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_isFeatureSupported)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QSensor_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_maxBufferSize), meth_QSensor_maxBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_maxBufferSize)},
    {SIP_MLNAME_CAST(sipName_outputRange), meth_QSensor_outputRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_outputRange)},
    {SIP_MLNAME_CAST(sipName_outputRanges), meth_QSensor_outputRanges, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_outputRanges)},
    {SIP_MLNAME_CAST(sipName_reading), meth_QSensor_reading, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_reading)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QSensor_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removeFilter), meth_QSensor_removeFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_removeFilter)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QSensor_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QSensor_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sensorTypes), meth_QSensor_sensorTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_sensorTypes)},
    {SIP_MLNAME_CAST(sipName_sensorsForType), meth_QSensor_sensorsForType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_sensorsForType)},
    {SIP_MLNAME_CAST(sipName_setActive), meth_QSensor_setActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_setActive)},
    {SIP_MLNAME_CAST(sipName_setAlwaysOn), meth_QSensor_setAlwaysOn, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_setAlwaysOn)},
    {SIP_MLNAME_CAST(sipName_setAxesOrientationMode), meth_QSensor_setAxesOrientationMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_setAxesOrientationMode)},
    {SIP_MLNAME_CAST(sipName_setBufferSize), meth_QSensor_setBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_setBufferSize)},
    {SIP_MLNAME_CAST(sipName_setCurrentOrientation), meth_QSensor_setCurrentOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_setCurrentOrientation)},
    {SIP_MLNAME_CAST(sipName_setDataRate), meth_QSensor_setDataRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_setDataRate)},
    {SIP_MLNAME_CAST(sipName_setEfficientBufferSize), meth_QSensor_setEfficientBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_setEfficientBufferSize)},
    {SIP_MLNAME_CAST(sipName_setIdentifier), meth_QSensor_setIdentifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_setIdentifier)},
    {SIP_MLNAME_CAST(sipName_setMaxBufferSize), meth_QSensor_setMaxBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_setMaxBufferSize)},
    {SIP_MLNAME_CAST(sipName_setOutputRange), meth_QSensor_setOutputRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_setOutputRange)},
    {SIP_MLNAME_CAST(sipName_setSkipDuplicates), meth_QSensor_setSkipDuplicates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_setSkipDuplicates)},
    {SIP_MLNAME_CAST(sipName_setUserOrientation), meth_QSensor_setUserOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_setUserOrientation)},
    {SIP_MLNAME_CAST(sipName_skipDuplicates), meth_QSensor_skipDuplicates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_skipDuplicates)},
    {SIP_MLNAME_CAST(sipName_start), meth_QSensor_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_start)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QSensor_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_stop)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QSensor_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_type), meth_QSensor_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_type)},
    {SIP_MLNAME_CAST(sipName_userOrientation), meth_QSensor_userOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSensor_userOrientation)}
};

static sipEnumMemberDef enummembers_QSensor[] = {
    {sipName_AccelerationMode, static_cast<int>(QSensor::AccelerationMode), 52},
    {sipName_AlwaysOn, static_cast<int>(QSensor::AlwaysOn), 52},
    {sipName_AutomaticOrientation, static_cast<int>(QSensor::AutomaticOrientation), 51},
    {sipName_AxesOrientation, static_cast<int>(QSensor::AxesOrientation), 52},
    {sipName_Buffering, static_cast<int>(QSensor::Buffering), 52},
    {sipName_FieldOfView, static_cast<int>(QSensor::FieldOfView), 52},
    {sipName_FixedOrientation, static_cast<int>(QSensor::FixedOrientation), 51},
    {sipName_GeoValues, static_cast<int>(QSensor::GeoValues), 52},
    {sipName_PressureSensorTemperature, static_cast<int>(QSensor::PressureSensorTemperature), 52},
    {sipName_SkipDuplicates, static_cast<int>(QSensor::SkipDuplicates), 52},
    {sipName_UserOrientation, static_cast<int>(QSensor::UserOrientation), 51},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSensor[] = {
    {"bufferSizeChanged(int)", "\1QSensor.bufferSizeChanged[int]", 0, 0},
    {"efficientBufferSizeChanged(int)", "\1QSensor.efficientBufferSizeChanged[int]", 0, 0},
    {"maxBufferSizeChanged(int)", "\1QSensor.maxBufferSizeChanged[int]", 0, 0},
    {"userOrientationChanged(int)", "\1QSensor.userOrientationChanged[int]", 0, 0},
    {"currentOrientationChanged(int)", "\1QSensor.currentOrientationChanged[int]", 0, 0},
    {"axesOrientationModeChanged(QSensor::AxesOrientationMode)", "\1QSensor.axesOrientationModeChanged[QSensor.AxesOrientationMode]", 0, 0},
    {"skipDuplicatesChanged(bool)", "\1QSensor.skipDuplicatesChanged[bool]", 0, 0},
    {"dataRateChanged()", "\1QSensor.dataRateChanged", 0, 0},
    {"alwaysOnChanged()", "\1QSensor.alwaysOnChanged", 0, 0},
    {"availableSensorsChanged()", "\1QSensor.availableSensorsChanged", 0, 0},
    {"sensorError(int)", "\1QSensor.sensorError[int]", 0, 0},
    {"readingChanged()", "\1QSensor.readingChanged", 0, 0},
    {"activeChanged()", "\1QSensor.activeChanged", 0, 0},
    {"busyChanged()", "\1QSensor.busyChanged", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QSensor, "\1QSensor(QByteArray, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtSensors_QSensor = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSensor,
        {0}
    },
    {
        sipNameNr_QSensor,
        {0, 0, 1},
        51, methods_QSensor,
        11, enummembers_QSensor,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSensor,
    -1,
    -1,
    supers_QSensor,
    0,
    init_type_QSensor,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSensor,
    0,
    0,
    0,
    release_QSensor,
    cast_QSensor,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSensor::staticMetaObject,
    0,
    signals_QSensor,
    0
};
