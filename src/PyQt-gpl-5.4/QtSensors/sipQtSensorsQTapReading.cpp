/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSensors.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qtapsensor.sip"
#include <qtapsensor.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"

#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorsQTapReading.cpp"


PyDoc_STRVAR(doc_QTapReading_tapDirection, "QTapReading.tapDirection() -> QTapReading.TapDirection");

extern "C" {static PyObject *meth_QTapReading_tapDirection(PyObject *, PyObject *);}
static PyObject *meth_QTapReading_tapDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTapReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTapReading, &sipCpp))
        {
            QTapReading::TapDirection sipRes;

            sipRes = sipCpp->tapDirection();

            return sipConvertFromEnum(sipRes,sipType_QTapReading_TapDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTapReading, sipName_tapDirection, doc_QTapReading_tapDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QTapReading_setTapDirection, "QTapReading.setTapDirection(QTapReading.TapDirection)");

extern "C" {static PyObject *meth_QTapReading_setTapDirection(PyObject *, PyObject *);}
static PyObject *meth_QTapReading_setTapDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTapReading::TapDirection a0;
        QTapReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTapReading, &sipCpp, sipType_QTapReading_TapDirection, &a0))
        {
            sipCpp->setTapDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTapReading, sipName_setTapDirection, doc_QTapReading_setTapDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QTapReading_isDoubleTap, "QTapReading.isDoubleTap() -> bool");

extern "C" {static PyObject *meth_QTapReading_isDoubleTap(PyObject *, PyObject *);}
static PyObject *meth_QTapReading_isDoubleTap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTapReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTapReading, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDoubleTap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTapReading, sipName_isDoubleTap, doc_QTapReading_isDoubleTap);

    return NULL;
}


PyDoc_STRVAR(doc_QTapReading_setDoubleTap, "QTapReading.setDoubleTap(bool)");

extern "C" {static PyObject *meth_QTapReading_setDoubleTap(PyObject *, PyObject *);}
static PyObject *meth_QTapReading_setDoubleTap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTapReading *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTapReading, &sipCpp, &a0))
        {
            sipCpp->setDoubleTap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTapReading, sipName_setDoubleTap, doc_QTapReading_setDoubleTap);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTapReading(void *, const sipTypeDef *);}
static void *cast_QTapReading(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTapReading)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QSensorReading)->ctd_cast((QSensorReading *)(QTapReading *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTapReading(void *, int);}
static void release_QTapReading(void *sipCppV,int)
{
    QTapReading *sipCpp = reinterpret_cast<QTapReading *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTapReading(sipSimpleWrapper *);}
static void dealloc_QTapReading(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTapReading(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTapReading[] = {{54, 255, 1}};


static PyMethodDef methods_QTapReading[] = {
    {SIP_MLNAME_CAST(sipName_isDoubleTap), meth_QTapReading_isDoubleTap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTapReading_isDoubleTap)},
    {SIP_MLNAME_CAST(sipName_setDoubleTap), meth_QTapReading_setDoubleTap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTapReading_setDoubleTap)},
    {SIP_MLNAME_CAST(sipName_setTapDirection), meth_QTapReading_setTapDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTapReading_setTapDirection)},
    {SIP_MLNAME_CAST(sipName_tapDirection), meth_QTapReading_tapDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTapReading_tapDirection)}
};

static sipEnumMemberDef enummembers_QTapReading[] = {
    {sipName_Undefined, static_cast<int>(QTapReading::Undefined), 57},
    {sipName_X, static_cast<int>(QTapReading::X), 57},
    {sipName_X_Both, static_cast<int>(QTapReading::X_Both), 57},
    {sipName_X_Neg, static_cast<int>(QTapReading::X_Neg), 57},
    {sipName_X_Pos, static_cast<int>(QTapReading::X_Pos), 57},
    {sipName_Y, static_cast<int>(QTapReading::Y), 57},
    {sipName_Y_Both, static_cast<int>(QTapReading::Y_Both), 57},
    {sipName_Y_Neg, static_cast<int>(QTapReading::Y_Neg), 57},
    {sipName_Y_Pos, static_cast<int>(QTapReading::Y_Pos), 57},
    {sipName_Z, static_cast<int>(QTapReading::Z), 57},
    {sipName_Z_Both, static_cast<int>(QTapReading::Z_Both), 57},
    {sipName_Z_Neg, static_cast<int>(QTapReading::Z_Neg), 57},
    {sipName_Z_Pos, static_cast<int>(QTapReading::Z_Pos), 57},
};


pyqt5ClassTypeDef sipTypeDef_QtSensors_QTapReading = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTapReading,
        {0}
    },
    {
        sipNameNr_QTapReading,
        {0, 0, 1},
        4, methods_QTapReading,
        13, enummembers_QTapReading,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QTapReading,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTapReading,
    0,
    0,
    0,
    release_QTapReading,
    cast_QTapReading,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTapReading::staticMetaObject,
    0,
    0,
    0
};
