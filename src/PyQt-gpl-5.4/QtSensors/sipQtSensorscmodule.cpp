/*
 * Module code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:22 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSensors.h"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qrotationsensor.sip"
#include <qrotationsensor.h>
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qtiltsensor.sip"
#include <qtiltsensor.h>
#line 35 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qtapsensor.sip"
#include <qtapsensor.h>
#line 38 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qsensor.sip"
#include <qsensor.h>
#line 41 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qproximitysensor.sip"
#include <qproximitysensor.h>
#line 44 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qpressuresensor.sip"
#include <qpressuresensor.h>
#line 47 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qorientationsensor.sip"
#include <qorientationsensor.h>
#line 50 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qmagnetometer.sip"
#include <qmagnetometer.h>
#line 53 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qlightsensor.sip"
#include <qlightsensor.h>
#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qirproximitysensor.sip"
#include <qirproximitysensor.h>
#line 59 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qholstersensor.sip"
#include <qholstersensor.h>
#line 62 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qgyroscope.sip"
#include <qgyroscope.h>
#line 65 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qdistancesensor.sip"
#include <qdistancesensor.h>
#line 68 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qcompass.sip"
#include <qcompass.h>
#line 71 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qambienttemperaturesensor.sip"
#include <qambienttemperaturesensor.h>
#line 74 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qambientlightsensor.sip"
#include <qambientlightsensor.h>
#line 77 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qaltimeter.sip"
#include <qaltimeter.h>
#line 80 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qaccelerometer.sip"
#include <qaccelerometer.h>
#line 83 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qsensor.sip"
#include <qsensor.h>
#line 86 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"

/* Define the strings used by this module. */
const char sipStrings_QtSensors[] = {
    'Q', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'a', 'd', 'i', 'n', 'g', ':', ':', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'A', 'm', 'b', 'i', 'e', 'n', 't', 'L', 'i', 'g', 'h', 't', 'R', 'e', 'a', 'd', 'i', 'n', 'g', ':', ':', 'L', 'i', 'g', 'h', 't', 'L', 'e', 'v', 'e', 'l', 0,
    'Q', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'o', 'm', 'e', 't', 'e', 'r', ':', ':', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'r', 'e', 't', 'u', 'r', 'n', 'D', 'o', 'u', 'b', 'l', 'e', 'T', 'a', 'p', 'E', 'v', 'e', 'n', 't', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'S', 'e', 'n', 's', 'o', 'r', ':', ':', 'A', 'x', 'e', 's', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'C', 'o', 'r', 'e', '.', 'p', 'y', 'q', 't', 'W', 'r', 'a', 'p', 'p', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'e', 'f', 'f', 'i', 'c', 'i', 'e', 'n', 't', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'a', 'x', 'e', 's', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'A', 'm', 'b', 'i', 'e', 'n', 't', 'T', 'e', 'm', 'p', 'e', 'r', 'a', 't', 'u', 'r', 'e', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'Q', 'T', 'a', 'p', 'R', 'e', 'a', 'd', 'i', 'n', 'g', ':', ':', 'T', 'a', 'p', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'P', 'r', 'e', 's', 's', 'u', 'r', 'e', 'S', 'e', 'n', 's', 'o', 'r', 'T', 'e', 'm', 'p', 'e', 'r', 'a', 't', 'u', 'r', 'e', 0,
    'Q', 'A', 'm', 'b', 'i', 'e', 'n', 't', 'T', 'e', 'm', 'p', 'e', 'r', 'a', 't', 'u', 'r', 'e', 'S', 'e', 'n', 's', 'o', 'r', 0,
    'Q', 'A', 'm', 'b', 'i', 'e', 'n', 't', 'T', 'e', 'm', 'p', 'e', 'r', 'a', 't', 'u', 'r', 'e', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'e', 't', 'R', 'e', 't', 'u', 'r', 'n', 'D', 'o', 'u', 'b', 'l', 'e', 'T', 'a', 'p', 'E', 'v', 'e', 'n', 't', 's', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'S', 'e', 'n', 's', 'o', 'r', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'a', 'c', 'c', 'e', 'l', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'u', 's', 'e', 'r', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'E', 'f', 'f', 'i', 'c', 'i', 'e', 'n', 't', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'A', 'x', 'e', 's', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'r', 'e', 't', 'u', 'r', 'n', 'G', 'e', 'o', 'V', 'a', 'l', 'u', 'e', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'S', 'e', 'n', 's', 'o', 'r', 'F', 'i', 'l', 't', 'e', 'r', '*', '>', 0,
    'r', 'e', 't', 'u', 'r', 'n', 'D', 'o', 'u', 'b', 'l', 'e', 'T', 'a', 'p', 'E', 'v', 'e', 'n', 't', 's', 0,
    's', 'k', 'i', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'e', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'o', 'm', 'e', 't', 'e', 'r', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'm', 'a', 'x', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'S', 'e', 'n', 's', 'o', 'r', 'F', 'o', 'r', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 'T', 'o', 'B', 'a', 'c', 'k', 'e', 'n', 'd', 0,
    'A', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'M', 'a', 'g', 'n', 'e', 't', 'o', 'm', 'e', 't', 'e', 'r', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'Q', 'A', 'm', 'b', 'i', 'e', 'n', 't', 'L', 'i', 'g', 'h', 't', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'Q', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'o', 'm', 'e', 't', 'e', 'r', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'Q', 'L', 'i', 's', 't', '<', 'q', 'o', 'u', 't', 'p', 'u', 't', 'r', 'a', 'n', 'g', 'e', '>', 0,
    'e', 'f', 'f', 'i', 'c', 'i', 'e', 'n', 't', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'a', 'x', 'e', 's', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'Q', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'Q', 'M', 'a', 'g', 'n', 'e', 't', 'o', 'm', 'e', 't', 'e', 'r', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'Q', 'I', 'R', 'P', 'r', 'o', 'x', 'i', 'm', 'i', 't', 'y', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'C', 'a', 'l', 'i', 'b', 'r', 'a', 't', 'i', 'o', 'n', 'L', 'e', 'v', 'e', 'l', 0,
    'Q', 'A', 'm', 'b', 'i', 'e', 'n', 't', 'L', 'i', 'g', 'h', 't', 'S', 'e', 'n', 's', 'o', 'r', 0,
    'Q', 'A', 'm', 'b', 'i', 'e', 'n', 't', 'L', 'i', 'g', 'h', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'e', 't', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    's', 'e', 't', 'U', 's', 'e', 'r', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'i', 's', 'F', 'e', 'a', 't', 'u', 'r', 'e', 'S', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'D', 'a', 't', 'a', 'R', 'a', 't', 'e', 's', 0,
    'Q', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'n', 's', 'o', 'r', 0,
    'Q', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'e', 't', 'R', 'e', 't', 'u', 'r', 'n', 'G', 'e', 'o', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'f', 'i', 'e', 'l', 'd', 'O', 'f', 'V', 'i', 'e', 'w', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'I', 'R', 'P', 'r', 'o', 'x', 'i', 'm', 'i', 't', 'y', 'S', 'e', 'n', 's', 'o', 'r', 0,
    'Q', 'I', 'R', 'P', 'r', 'o', 'x', 'i', 'm', 'i', 't', 'y', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'b', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'S', 'k', 'i', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'e', 's', 0,
    'Q', 'P', 'r', 'o', 'x', 'i', 'm', 'i', 't', 'y', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'Q', 'G', 'y', 'r', 'o', 's', 'c', 'o', 'p', 'e', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'Q', 'A', 'l', 't', 'i', 'm', 'e', 't', 'e', 'r', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'i', 's', 'S', 'i', 'g', 'n', 'a', 'l', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    's', 'e', 'n', 'd', 'e', 'r', 'S', 'i', 'g', 'n', 'a', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    's', 'i', 'p', '.', 's', 'i', 'm', 'p', 'l', 'e', 'w', 'r', 'a', 'p', 'p', 'e', 'r', 0,
    'Q', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'M', 'a', 'x', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'c', 'o', 'n', 'n', 'e', 'c', 't', 'T', 'o', 'B', 'a', 'c', 'k', 'e', 'n', 'd', 0,
    'F', 'i', 'x', 'e', 'd', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 'e', 'n', 's', 'o', 'r', ':', ':', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'Q', 'P', 'r', 'o', 'x', 'i', 'm', 'i', 't', 'y', 'S', 'e', 'n', 's', 'o', 'r', 0,
    'Q', 'P', 'r', 'o', 'x', 'i', 'm', 'i', 't', 'y', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'Q', 'P', 'r', 'e', 's', 's', 'u', 'r', 'e', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'Q', 'G', 'y', 'r', 'o', 's', 'c', 'o', 'p', 'e', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'Q', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'c', 'a', 'l', 'i', 'b', 'r', 'a', 't', 'i', 'o', 'n', 'L', 'e', 'v', 'e', 'l', 0,
    'Q', 'A', 'l', 't', 'i', 'm', 'e', 't', 'e', 'r', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'a', 'c', 'c', 'e', 'l', 'e', 'r', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    'Q', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 'S', 'e', 'n', 's', 'o', 'r', 0,
    'Q', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'e', 't', 'T', 'a', 'p', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'd', 'a', 't', 'a', 'R', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'a', 'l', 'w', 'a', 'y', 's', 'O', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'u', 's', 'e', 'r', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'A', 'x', 'e', 's', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'P', 'r', 'e', 's', 's', 'u', 'r', 'e', 'S', 'e', 'n', 's', 'o', 'r', 0,
    'Q', 'P', 'r', 'e', 's', 's', 'u', 'r', 'e', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'r', 'e', 't', 'u', 'r', 'n', 'G', 'e', 'o', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'Q', 'H', 'o', 'l', 's', 't', 'e', 'r', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'Q', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 'S', 'e', 'n', 's', 'o', 'r', 0,
    'Q', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'Q', 'C', 'o', 'm', 'p', 'a', 's', 's', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'S', 'e', 'n', 's', 'o', 'r', 's', 0,
    'r', 'e', 'a', 'd', 'i', 'n', 'g', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 'n', 's', 'o', 'r', 's', 'F', 'o', 'r', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'O', 'u', 't', 'p', 'u', 't', 'R', 'a', 'n', 'g', 'e', 0,
    's', 'k', 'i', 'p', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'e', 's', 0,
    's', 'e', 't', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'F', 'i', 'e', 'l', 'd', 'O', 'f', 'V', 'i', 'e', 'w', 0,
    's', 'e', 't', 'R', 'e', 'f', 'l', 'e', 'c', 't', 'a', 'n', 'c', 'e', 0,
    'Q', 'H', 'o', 'l', 's', 't', 'e', 'r', 'S', 'e', 'n', 's', 'o', 'r', 0,
    'Q', 'H', 'o', 'l', 's', 't', 'e', 'r', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'Q', 'C', 'o', 'm', 'p', 'a', 's', 's', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'e', 't', 'T', 'e', 'm', 'p', 'e', 'r', 'a', 't', 'u', 'r', 'e', 0,
    'Q', 'A', 'c', 'c', 'e', 'l', 'e', 'r', 'o', 'm', 'e', 't', 'e', 'r', 0,
    'Q', 'S', 'e', 'n', 's', 'o', 'r', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'm', 'a', 'x', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'I', 'd', 'e', 'n', 't', 'i', 'f', 'i', 'e', 'r', 0,
    'Q', 'M', 'a', 'g', 'n', 'e', 't', 'o', 'm', 'e', 't', 'e', 'r', 0,
    'Q', 'L', 'i', 'g', 'h', 't', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'L', 'i', 'g', 'h', 't', 'L', 'e', 'v', 'e', 'l', 0,
    'Q', 'S', 'e', 'n', 's', 'o', 'r', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'a', 'c', 't', 'i', 'v', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'F', 'r', 'o', 'm', 'E', 'u', 'l', 'e', 'r', 0,
    's', 'e', 't', 'X', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'Y', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'T', 'i', 'l', 't', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'D', 'o', 'u', 'b', 'l', 'e', 'T', 'a', 'p', 0,
    't', 'a', 'p', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'o', 'u', 't', 'p', 'u', 't', 'R', 'a', 'n', 'g', 'e', 's', 0,
    's', 'e', 't', 'T', 'i', 'm', 'e', 's', 't', 'a', 'm', 'p', 0,
    'q', 'o', 'u', 't', 'p', 'u', 't', 'r', 'a', 'n', 'g', 'e', 0,
    'Q', 'L', 'i', 'g', 'h', 't', 'S', 'e', 'n', 's', 'o', 'r', 0,
    'Q', 'L', 'i', 'g', 'h', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'e', 't', 'H', 'o', 'l', 's', 't', 'e', 'r', 'e', 'd', 0,
    'h', 'a', 's', 'Z', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'T', 'i', 'l', 't', 'S', 'e', 'n', 's', 'o', 'r', 0,
    'Q', 'T', 'i', 'l', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'i', 's', 'D', 'o', 'u', 'b', 'l', 'e', 'T', 'a', 'p', 0,
    'Q', 'T', 'a', 'p', 'R', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    's', 'e', 'n', 's', 'o', 'r', 'E', 'r', 'r', 'o', 'r', 0,
    'b', 'u', 's', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 'n', 's', 'o', 'r', 'T', 'y', 'p', 'e', 's', 0,
    'o', 'u', 't', 'p', 'u', 't', 'R', 'a', 'n', 'g', 'e', 0,
    's', 'e', 't', 'D', 'a', 't', 'a', 'R', 'a', 't', 'e', 0,
    's', 'e', 't', 'A', 'l', 'w', 'a', 'y', 's', 'O', 'n', 0,
    's', 'e', 't', 'P', 'r', 'e', 's', 's', 'u', 'r', 'e', 0,
    'f', 'i', 'e', 'l', 'd', 'O', 'f', 'V', 'i', 'e', 'w', 0,
    'r', 'e', 'f', 'l', 'e', 'c', 't', 'a', 'n', 'c', 'e', 0,
    's', 'e', 't', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 0,
    't', 'e', 'm', 'p', 'e', 'r', 'a', 't', 'u', 'r', 'e', 0,
    's', 'e', 't', 'A', 'l', 't', 'i', 't', 'u', 'd', 'e', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'd', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'o', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'T', 'a', 'p', 'S', 'e', 'n', 's', 'o', 'r', 0,
    'Q', 'T', 'a', 'p', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'b', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'i', 's', 'A', 'l', 'w', 'a', 'y', 's', 'O', 'n', 0,
    'i', 'd', 'e', 'n', 't', 'i', 'f', 'i', 'e', 'r', 0,
    'v', 'a', 'l', 'u', 'e', 'C', 'o', 'u', 'n', 't', 0,
    'Q', 'G', 'y', 'r', 'o', 's', 'c', 'o', 'p', 'e', 0,
    's', 'e', 't', 'A', 'z', 'i', 'm', 'u', 't', 'h', 0,
    'l', 'i', 'g', 'h', 't', 'L', 'e', 'v', 'e', 'l', 0,
    'Q', 'A', 'l', 't', 'i', 'm', 'e', 't', 'e', 'r', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'c', 'a', 'l', 'i', 'b', 'r', 'a', 't', 'e', 0,
    'x', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'y', 'R', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'a', 'd', 'd', 'F', 'i', 'l', 't', 'e', 'r', 0,
    's', 'e', 't', 'A', 'c', 't', 'i', 'v', 'e', 0,
    'B', 'u', 'f', 'f', 'e', 'r', 'i', 'n', 'g', 0,
    't', 'i', 'm', 'e', 's', 't', 'a', 'm', 'p', 0,
    'h', 'o', 'l', 's', 't', 'e', 'r', 'e', 'd', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 0,
    'r', 'e', 'c', 'e', 'i', 'v', 'e', 'r', 's', 0,
    'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 0,
    'p', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'd', 'a', 't', 'a', 'R', 'a', 't', 'e', 0,
    'a', 'c', 'c', 'u', 'r', 'a', 'c', 'y', 0,
    's', 'e', 't', 'C', 'l', 'o', 's', 'e', 0,
    'p', 'r', 'e', 's', 's', 'u', 'r', 'e', 0,
    'F', 'a', 'c', 'e', 'D', 'o', 'w', 'n', 0,
    'd', 'i', 's', 't', 'a', 'n', 'c', 'e', 0,
    'Q', 'C', 'o', 'm', 'p', 'a', 's', 's', 0,
    'T', 'w', 'i', 'l', 'i', 'g', 'h', 't', 0,
    'a', 'l', 't', 'i', 't', 'u', 'd', 'e', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'e', 'd', 0,
    'n', 'a', 'm', 'e', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'A', 'c', 't', 'i', 'v', 'e', 0,
    's', 'e', 't', 'H', 'a', 's', 'Z', 0,
    'm', 'a', 'x', 'i', 'm', 'u', 'm', 0,
    'm', 'i', 'n', 'i', 'm', 'u', 'm', 0,
    'R', 'i', 'g', 'h', 't', 'U', 'p', 0,
    'T', 'o', 'p', 'D', 'o', 'w', 'n', 0,
    'a', 'z', 'i', 'm', 'u', 't', 'h', 0,
    'G', 'r', 'a', 'v', 'i', 't', 'y', 0,
    'Q', 'S', 'e', 'n', 's', 'o', 'r', 0,
    'r', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'f', 'i', 'l', 't', 'e', 'r', 's', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'o', 'p', 't', 'i', 'o', 'n', 's', 0,
    'Z', '_', 'B', 'o', 't', 'h', 0,
    'Y', '_', 'B', 'o', 't', 'h', 0,
    'X', '_', 'B', 'o', 't', 'h', 0,
    'i', 's', 'B', 'u', 's', 'y', 0,
    'F', 'a', 'c', 'e', 'U', 'p', 0,
    'L', 'e', 'f', 't', 'U', 'p', 0,
    's', 'e', 't', 'L', 'u', 'x', 0,
    'B', 'r', 'i', 'g', 'h', 't', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 0,
    's', 'e', 'n', 'd', 'e', 'r', 0,
    'v', 'a', 'l', 'u', 'e', '9', 0,
    'v', 'a', 'l', 'u', 'e', '8', 0,
    'v', 'a', 'l', 'u', 'e', '7', 0,
    'v', 'a', 'l', 'u', 'e', '6', 0,
    'v', 'a', 'l', 'u', 'e', '5', 0,
    'v', 'a', 'l', 'u', 'e', '4', 0,
    'v', 'a', 'l', 'u', 'e', '3', 0,
    'v', 'a', 'l', 'u', 'e', '2', 0,
    'v', 'a', 'l', 'u', 'e', '1', 0,
    'v', 'a', 'l', 'u', 'e', '0', 0,
    's', 'y', 'm', 'b', 'o', 'l', 0,
    's', 'u', 'f', 'f', 'i', 'x', 0,
    'p', 'r', 'e', 'f', 'i', 'x', 0,
    'f', 'i', 'l', 't', 'e', 'r', 0,
    'l', 'o', 'c', 'a', 'l', 'e', 0,
    'f', 'o', 'r', 'm', 'a', 't', 0,
    'o', 'b', 'j', 'e', 'c', 't', 0,
    'p', 'a', 'r', 'e', 'n', 't', 0,
    'Z', '_', 'N', 'e', 'g', 0,
    'Y', '_', 'N', 'e', 'g', 0,
    'X', '_', 'N', 'e', 'g', 0,
    'Z', '_', 'P', 'o', 's', 0,
    'Y', '_', 'P', 'o', 's', 0,
    'X', '_', 'P', 'o', 's', 0,
    'T', 'o', 'p', 'U', 'p', 0,
    'S', 'u', 'n', 'n', 'y', 0,
    'L', 'i', 'g', 'h', 't', 0,
    'e', 'r', 'r', 'o', 'r', 0,
    'c', 'l', 'o', 's', 'e', 0,
    'v', 'a', 'l', 'u', 'e', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'm', 's', 'e', 'c', 's', 0,
    's', 't', 'a', 'r', 't', 0,
    'h', 'a', 's', 'Z', 0,
    'D', 'a', 'r', 'k', 0,
    's', 'e', 't', 'Z', 0,
    's', 'e', 't', 'Y', 0,
    's', 'e', 't', 'X', 0,
    'm', 'o', 'd', 'e', 0,
    't', 'y', 'p', 'e', 0,
    'U', 's', 'e', 'r', 0,
    'n', 'a', 'm', 'e', 0,
    'b', 'a', 's', 'e', 0,
    'f', 'r', 'o', 'm', 0,
    's', 'o', 'r', 't', 0,
    's', 't', 'o', 'p', 0,
    'l', 'u', 'x', 0,
    'z', 0,
};

bool sipVH_QtSensors_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QRotationReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QRotationReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QTiltReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QTiltReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QTapReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QTapReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QSensorReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QSensorReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QProximityReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QProximityReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QPressureReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QPressureReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QOrientationReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QOrientationReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QMagnetometerReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QMagnetometerReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QLightReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QLightReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_9(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QIRProximityReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QIRProximityReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_10(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QHolsterReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QHolsterReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_11(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QGyroscopeReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QGyroscopeReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_12(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QDistanceReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QDistanceReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_13(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QCompassReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QCompassReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_14(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QAmbientTemperatureReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QAmbientTemperatureReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_15(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QAmbientLightReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QAmbientLightReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_16(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QAltimeterReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QAltimeterReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtSensors_17(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QAccelerometerReading*a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QAccelerometerReading,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QSensor(void **);}
static const sipTypeDef *sipSubClass_QSensor(void **sipCppRet)
{
    QObject *sipCpp = reinterpret_cast<QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 92 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSensors/qsensor.sip"
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QSensorReading, &sipType_QSensorReading, 2, 1},
        {sipName_QSensor, &sipType_QSensor, 19, -1},
        {sipName_QTiltReading, &sipType_QTiltReading, -1, 3},
        {sipName_QTapReading, &sipType_QTapReading, -1, 4},
        {sipName_QProximityReading, &sipType_QProximityReading, -1, 5},
        {sipName_QHolsterReading, &sipType_QHolsterReading, -1, 6},
    #if QT_VERSION >= 0x050400
        {sipName_QDistanceReading, &sipType_QDistanceReading, -1, 7},
    #else
        {0, 0, -1, 7},
    #endif
        {sipName_QAmbientLightReading, &sipType_QAmbientLightReading, -1, 8},
        {sipName_QPressureReading, &sipType_QPressureReading, -1, 9},
        {sipName_QAmbientTemperatureReading, &sipType_QAmbientTemperatureReading, -1, 10},
        {sipName_QMagnetometerReading, &sipType_QMagnetometerReading, -1, 11},
        {sipName_QOrientationReading, &sipType_QOrientationReading, -1, 12},
        {sipName_QGyroscopeReading, &sipType_QGyroscopeReading, -1, 13},
        {sipName_QAltimeterReading, &sipType_QAltimeterReading, -1, 14},
        {sipName_QIRProximityReading, &sipType_QIRProximityReading, -1, 15},
        {sipName_QLightReading, &sipType_QLightReading, -1, 16},
        {sipName_QRotationReading, &sipType_QRotationReading, -1, 17},
        {sipName_QCompassReading, &sipType_QCompassReading, -1, 18},
        {sipName_QAccelerometerReading, &sipType_QAccelerometerReading, -1, -1},
        {sipName_QGyroscope, &sipType_QGyroscope, -1, 20},
        {sipName_QIRProximitySensor, &sipType_QIRProximitySensor, -1, 21},
        {sipName_QAccelerometer, &sipType_QAccelerometer, -1, 22},
        {sipName_QProximitySensor, &sipType_QProximitySensor, -1, 23},
        {sipName_QTiltSensor, &sipType_QTiltSensor, -1, 24},
        {sipName_QHolsterSensor, &sipType_QHolsterSensor, -1, 25},
        {sipName_QAmbientLightSensor, &sipType_QAmbientLightSensor, -1, 26},
        {sipName_QOrientationSensor, &sipType_QOrientationSensor, -1, 27},
        {sipName_QTapSensor, &sipType_QTapSensor, -1, 28},
        {sipName_QAmbientTemperatureSensor, &sipType_QAmbientTemperatureSensor, -1, 29},
        {sipName_QMagnetometer, &sipType_QMagnetometer, -1, 30},
        {sipName_QPressureSensor, &sipType_QPressureSensor, -1, 31},
    #if QT_VERSION >= 0x050400
        {sipName_QDistanceSensor, &sipType_QDistanceSensor, -1, 32},
    #else
        {0, 0, -1, 32},
    #endif
        {sipName_QRotationSensor, &sipType_QRotationSensor, -1, 33},
        {sipName_QCompass, &sipType_QCompass, -1, 34},
        {sipName_QAltimeter, &sipType_QAltimeter, -1, 35},
        {sipName_QLightSensor, &sipType_QLightSensor, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
#line 600 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSensors/sipQtSensorscmodule.cpp"

    return sipType;
}
static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTapReading__TapDirection, {0}}, sipNameNr_TapDirection, 56, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSensor__AxesOrientationMode, {0}}, sipNameNr_AxesOrientationMode, 50, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSensor__Feature, {0}}, sipNameNr_Feature, 50, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QOrientationReading__Orientation, {0}}, sipNameNr_Orientation, 38, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QAmbientLightReading__LightLevel, {0}}, sipNameNr_LightLevel, 8, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QAccelerometer__AccelerationMode, {0}}, sipNameNr_AccelerationMode, 0, NULL},
};


/*
 * This defines each type in this module.
 */
static sipTypeDef *typesTable[] = {
    &sipTypeDef_QtSensors_QAccelerometer.super.ctd_base,
    &enumTypes[5].etd_base,
    &sipTypeDef_QtSensors_QAccelerometerFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QAccelerometerReading.super.ctd_base,
    &sipTypeDef_QtSensors_QAltimeter.super.ctd_base,
    &sipTypeDef_QtSensors_QAltimeterFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QAltimeterReading.super.ctd_base,
    &sipTypeDef_QtSensors_QAmbientLightFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QAmbientLightReading.super.ctd_base,
    &enumTypes[4].etd_base,
    &sipTypeDef_QtSensors_QAmbientLightSensor.super.ctd_base,
    &sipTypeDef_QtSensors_QAmbientTemperatureFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QAmbientTemperatureReading.super.ctd_base,
    &sipTypeDef_QtSensors_QAmbientTemperatureSensor.super.ctd_base,
    &sipTypeDef_QtSensors_QCompass.super.ctd_base,
    &sipTypeDef_QtSensors_QCompassFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QCompassReading.super.ctd_base,
    &sipTypeDef_QtSensors_QDistanceFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QDistanceReading.super.ctd_base,
    &sipTypeDef_QtSensors_QDistanceSensor.super.ctd_base,
    &sipTypeDef_QtSensors_QGyroscope.super.ctd_base,
    &sipTypeDef_QtSensors_QGyroscopeFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QGyroscopeReading.super.ctd_base,
    &sipTypeDef_QtSensors_QHolsterFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QHolsterReading.super.ctd_base,
    &sipTypeDef_QtSensors_QHolsterSensor.super.ctd_base,
    &sipTypeDef_QtSensors_QIRProximityFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QIRProximityReading.super.ctd_base,
    &sipTypeDef_QtSensors_QIRProximitySensor.super.ctd_base,
    &sipTypeDef_QtSensors_QLightFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QLightReading.super.ctd_base,
    &sipTypeDef_QtSensors_QLightSensor.super.ctd_base,
    &sipTypeDef_QtSensors_QList_0101QSensorFilter.mtd_base,
    &sipTypeDef_QtSensors_QList_0100qoutputrange.mtd_base,
    &sipTypeDef_QtSensors_QMagnetometer.super.ctd_base,
    &sipTypeDef_QtSensors_QMagnetometerFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QMagnetometerReading.super.ctd_base,
    &sipTypeDef_QtSensors_QOrientationFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QOrientationReading.super.ctd_base,
    &enumTypes[3].etd_base,
    &sipTypeDef_QtSensors_QOrientationSensor.super.ctd_base,
    &sipTypeDef_QtSensors_QPressureFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QPressureReading.super.ctd_base,
    &sipTypeDef_QtSensors_QPressureSensor.super.ctd_base,
    &sipTypeDef_QtSensors_QProximityFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QProximityReading.super.ctd_base,
    &sipTypeDef_QtSensors_QProximitySensor.super.ctd_base,
    &sipTypeDef_QtSensors_QRotationFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QRotationReading.super.ctd_base,
    &sipTypeDef_QtSensors_QRotationSensor.super.ctd_base,
    &sipTypeDef_QtSensors_QSensor.super.ctd_base,
    &enumTypes[1].etd_base,
    &enumTypes[2].etd_base,
    &sipTypeDef_QtSensors_QSensorFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QSensorReading.super.ctd_base,
    &sipTypeDef_QtSensors_QTapFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QTapReading.super.ctd_base,
    &enumTypes[0].etd_base,
    &sipTypeDef_QtSensors_QTapSensor.super.ctd_base,
    &sipTypeDef_QtSensors_QTiltFilter.super.ctd_base,
    &sipTypeDef_QtSensors_QTiltReading.super.ctd_base,
    &sipTypeDef_QtSensors_QTiltSensor.super.ctd_base,
    &sipTypeDef_QtSensors_qoutputrange.super.ctd_base,
};


/*
 * These define each typedef in this module.
 */
static sipTypedefDef typedefsTable[] = {
    {"qoutputrangelist", "QList<qoutputrange>"},
    {"qrangelist", "QList<QPair<int,int> >"},
    {"qtimestamp", "unsigned long long"},
};


/*
 * This defines the virtual handlers that this module implements and can be
 * used by other modules.
 */
static sipVirtHandlerFunc virtHandlersTable[] = {
    (sipVirtHandlerFunc)sipVH_QtSensors_0,
    (sipVirtHandlerFunc)sipVH_QtSensors_1,
    (sipVirtHandlerFunc)sipVH_QtSensors_2,
    (sipVirtHandlerFunc)sipVH_QtSensors_3,
    (sipVirtHandlerFunc)sipVH_QtSensors_4,
    (sipVirtHandlerFunc)sipVH_QtSensors_5,
    (sipVirtHandlerFunc)sipVH_QtSensors_6,
    (sipVirtHandlerFunc)sipVH_QtSensors_7,
    (sipVirtHandlerFunc)sipVH_QtSensors_8,
    (sipVirtHandlerFunc)sipVH_QtSensors_9,
    (sipVirtHandlerFunc)sipVH_QtSensors_10,
    (sipVirtHandlerFunc)sipVH_QtSensors_11,
    (sipVirtHandlerFunc)sipVH_QtSensors_12,
    (sipVirtHandlerFunc)sipVH_QtSensors_13,
    (sipVirtHandlerFunc)sipVH_QtSensors_14,
    (sipVirtHandlerFunc)sipVH_QtSensors_15,
    (sipVirtHandlerFunc)sipVH_QtSensors_16,
    (sipVirtHandlerFunc)sipVH_QtSensors_17,
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt5.QtCore", 1, NULL},
    {NULL, -1, NULL}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QSensor, {162, 0, 0}, NULL},
    {NULL, {0, 0, 0}, NULL}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtSensors = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt5_QtSensors,
    0,
    -1,
    sipStrings_QtSensors,
    importsTable,
    NULL,
    63,
    typesTable,
    NULL,
    0,
    NULL,
    3,
    typedefsTable,
    virtHandlersTable,
    NULL,
    convertorsTable,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtSensors;
const sipExportedModuleDef *sipModuleAPI_QtSensors_QtCore;

sip_qt_metaobject_func sip_QtSensors_qt_metaobject;
sip_qt_metacall_func sip_QtSensors_qt_metacall;
sip_qt_metacast_func sip_QtSensors_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtSensors
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtSensors
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt5.QtSensors",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt5_QtSensors, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt5_QtSensors), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule(SIP_MODULE_NAME);
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>(SIP_MODULE_NAME));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == NULL || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_QtSensors = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, SIP_MODULE_NAME "._C_API"));
#else
    sipAPI_QtSensors = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_QtSensors == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtSensors,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    sip_QtSensors_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtSensors_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtSensors_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    if (!sip_QtSensors_qt_metacast)
        Py_FatalError("Unable to import qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtSensors,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    /* Get the APIs of the modules that this one is dependent on. */
    sipModuleAPI_QtSensors_QtCore = sipModuleAPI_QtSensors.em_imports[0].im_module;

    SIP_MODULE_RETURN(sipModule);
}
