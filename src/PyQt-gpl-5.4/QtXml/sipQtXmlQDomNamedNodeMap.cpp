/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:13 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 238 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNamedNodeMap.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNamedNodeMap.cpp"
#line 58 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNamedNodeMap.cpp"


PyDoc_STRVAR(doc_QDomNamedNodeMap_namedItem, "QDomNamedNodeMap.namedItem(str) -> QDomNode");

extern "C" {static PyObject *meth_QDomNamedNodeMap_namedItem(PyObject *, PyObject *);}
static PyObject *meth_QDomNamedNodeMap_namedItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QDomNamedNodeMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomNamedNodeMap, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->namedItem(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNamedNodeMap, sipName_namedItem, doc_QDomNamedNodeMap_namedItem);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNamedNodeMap_setNamedItem, "QDomNamedNodeMap.setNamedItem(QDomNode) -> QDomNode");

extern "C" {static PyObject *meth_QDomNamedNodeMap_setNamedItem(PyObject *, PyObject *);}
static PyObject *meth_QDomNamedNodeMap_setNamedItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode* a0;
        QDomNamedNodeMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDomNamedNodeMap, &sipCpp, sipType_QDomNode, &a0))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->setNamedItem(*a0));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNamedNodeMap, sipName_setNamedItem, doc_QDomNamedNodeMap_setNamedItem);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNamedNodeMap_removeNamedItem, "QDomNamedNodeMap.removeNamedItem(str) -> QDomNode");

extern "C" {static PyObject *meth_QDomNamedNodeMap_removeNamedItem(PyObject *, PyObject *);}
static PyObject *meth_QDomNamedNodeMap_removeNamedItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDomNamedNodeMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomNamedNodeMap, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->removeNamedItem(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNamedNodeMap, sipName_removeNamedItem, doc_QDomNamedNodeMap_removeNamedItem);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNamedNodeMap_item, "QDomNamedNodeMap.item(int) -> QDomNode");

extern "C" {static PyObject *meth_QDomNamedNodeMap_item(PyObject *, PyObject *);}
static PyObject *meth_QDomNamedNodeMap_item(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QDomNamedNodeMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QDomNamedNodeMap, &sipCpp, &a0))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->item(a0));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNamedNodeMap, sipName_item, doc_QDomNamedNodeMap_item);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNamedNodeMap_namedItemNS, "QDomNamedNodeMap.namedItemNS(str, str) -> QDomNode");

extern "C" {static PyObject *meth_QDomNamedNodeMap_namedItemNS(PyObject *, PyObject *);}
static PyObject *meth_QDomNamedNodeMap_namedItemNS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QDomNamedNodeMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDomNamedNodeMap, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->namedItemNS(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNamedNodeMap, sipName_namedItemNS, doc_QDomNamedNodeMap_namedItemNS);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNamedNodeMap_setNamedItemNS, "QDomNamedNodeMap.setNamedItemNS(QDomNode) -> QDomNode");

extern "C" {static PyObject *meth_QDomNamedNodeMap_setNamedItemNS(PyObject *, PyObject *);}
static PyObject *meth_QDomNamedNodeMap_setNamedItemNS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode* a0;
        QDomNamedNodeMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDomNamedNodeMap, &sipCpp, sipType_QDomNode, &a0))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->setNamedItemNS(*a0));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNamedNodeMap, sipName_setNamedItemNS, doc_QDomNamedNodeMap_setNamedItemNS);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNamedNodeMap_removeNamedItemNS, "QDomNamedNodeMap.removeNamedItemNS(str, str) -> QDomNode");

extern "C" {static PyObject *meth_QDomNamedNodeMap_removeNamedItemNS(PyObject *, PyObject *);}
static PyObject *meth_QDomNamedNodeMap_removeNamedItemNS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QDomNamedNodeMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDomNamedNodeMap, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->removeNamedItemNS(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNamedNodeMap, sipName_removeNamedItemNS, doc_QDomNamedNodeMap_removeNamedItemNS);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNamedNodeMap_length, "QDomNamedNodeMap.length() -> int");

extern "C" {static PyObject *meth_QDomNamedNodeMap_length(PyObject *, PyObject *);}
static PyObject *meth_QDomNamedNodeMap_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNamedNodeMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNamedNodeMap, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->length();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNamedNodeMap, sipName_length, doc_QDomNamedNodeMap_length);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNamedNodeMap_count, "QDomNamedNodeMap.count() -> int");

extern "C" {static PyObject *meth_QDomNamedNodeMap_count(PyObject *, PyObject *);}
static PyObject *meth_QDomNamedNodeMap_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNamedNodeMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNamedNodeMap, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNamedNodeMap, sipName_count, doc_QDomNamedNodeMap_count);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNamedNodeMap_size, "QDomNamedNodeMap.size() -> int");

extern "C" {static PyObject *meth_QDomNamedNodeMap_size(PyObject *, PyObject *);}
static PyObject *meth_QDomNamedNodeMap_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNamedNodeMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNamedNodeMap, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNamedNodeMap, sipName_size, doc_QDomNamedNodeMap_size);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNamedNodeMap_isEmpty, "QDomNamedNodeMap.isEmpty() -> bool");

extern "C" {static PyObject *meth_QDomNamedNodeMap_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QDomNamedNodeMap_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNamedNodeMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNamedNodeMap, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNamedNodeMap, sipName_isEmpty, doc_QDomNamedNodeMap_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNamedNodeMap_contains, "QDomNamedNodeMap.contains(str) -> bool");

extern "C" {static PyObject *meth_QDomNamedNodeMap_contains(PyObject *, PyObject *);}
static PyObject *meth_QDomNamedNodeMap_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QDomNamedNodeMap *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomNamedNodeMap, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNamedNodeMap, sipName_contains, doc_QDomNamedNodeMap_contains);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QDomNamedNodeMap___len__(PyObject *);}
static SIP_SSIZE_T slot_QDomNamedNodeMap___len__(PyObject *sipSelf)
{
    QDomNamedNodeMap *sipCpp = reinterpret_cast<QDomNamedNodeMap *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDomNamedNodeMap));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 402 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNamedNodeMap.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QDomNamedNodeMap___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDomNamedNodeMap___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QDomNamedNodeMap *sipCpp = reinterpret_cast<QDomNamedNodeMap *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDomNamedNodeMap));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDomNamedNodeMap* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDomNamedNodeMap, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QDomNamedNodeMap::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtXml,ne_slot,sipType_QDomNamedNodeMap,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QDomNamedNodeMap___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDomNamedNodeMap___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QDomNamedNodeMap *sipCpp = reinterpret_cast<QDomNamedNodeMap *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDomNamedNodeMap));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDomNamedNodeMap* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDomNamedNodeMap, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QDomNamedNodeMap::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtXml,eq_slot,sipType_QDomNamedNodeMap,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDomNamedNodeMap(void *, const sipTypeDef *);}
static void *cast_QDomNamedNodeMap(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDomNamedNodeMap)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDomNamedNodeMap(void *, int);}
static void release_QDomNamedNodeMap(void *sipCppV,int)
{
    delete reinterpret_cast<QDomNamedNodeMap *>(sipCppV);
}


extern "C" {static void assign_QDomNamedNodeMap(void *, SIP_SSIZE_T, const void *);}
static void assign_QDomNamedNodeMap(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDomNamedNodeMap *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDomNamedNodeMap *>(sipSrc);
}


extern "C" {static void *array_QDomNamedNodeMap(SIP_SSIZE_T);}
static void *array_QDomNamedNodeMap(SIP_SSIZE_T sipNrElem)
{
    return new QDomNamedNodeMap[sipNrElem];
}


extern "C" {static void *copy_QDomNamedNodeMap(const void *, SIP_SSIZE_T);}
static void *copy_QDomNamedNodeMap(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDomNamedNodeMap(reinterpret_cast<const QDomNamedNodeMap *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDomNamedNodeMap(sipSimpleWrapper *);}
static void dealloc_QDomNamedNodeMap(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDomNamedNodeMap(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QDomNamedNodeMap(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDomNamedNodeMap(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QDomNamedNodeMap *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QDomNamedNodeMap();

            return sipCpp;
        }
    }

    {
        const QDomNamedNodeMap* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDomNamedNodeMap, &a0))
        {
            sipCpp = new QDomNamedNodeMap(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDomNamedNodeMap[] = {
    {(void *)slot_QDomNamedNodeMap___len__, len_slot},
    {(void *)slot_QDomNamedNodeMap___ne__, ne_slot},
    {(void *)slot_QDomNamedNodeMap___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDomNamedNodeMap[] = {
    {SIP_MLNAME_CAST(sipName_contains), meth_QDomNamedNodeMap_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNamedNodeMap_contains)},
    {SIP_MLNAME_CAST(sipName_count), meth_QDomNamedNodeMap_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNamedNodeMap_count)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QDomNamedNodeMap_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNamedNodeMap_isEmpty)},
    {SIP_MLNAME_CAST(sipName_item), meth_QDomNamedNodeMap_item, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNamedNodeMap_item)},
    {SIP_MLNAME_CAST(sipName_length), meth_QDomNamedNodeMap_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNamedNodeMap_length)},
    {SIP_MLNAME_CAST(sipName_namedItem), meth_QDomNamedNodeMap_namedItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNamedNodeMap_namedItem)},
    {SIP_MLNAME_CAST(sipName_namedItemNS), meth_QDomNamedNodeMap_namedItemNS, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNamedNodeMap_namedItemNS)},
    {SIP_MLNAME_CAST(sipName_removeNamedItem), meth_QDomNamedNodeMap_removeNamedItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNamedNodeMap_removeNamedItem)},
    {SIP_MLNAME_CAST(sipName_removeNamedItemNS), meth_QDomNamedNodeMap_removeNamedItemNS, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNamedNodeMap_removeNamedItemNS)},
    {SIP_MLNAME_CAST(sipName_setNamedItem), meth_QDomNamedNodeMap_setNamedItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNamedNodeMap_setNamedItem)},
    {SIP_MLNAME_CAST(sipName_setNamedItemNS), meth_QDomNamedNodeMap_setNamedItemNS, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNamedNodeMap_setNamedItemNS)},
    {SIP_MLNAME_CAST(sipName_size), meth_QDomNamedNodeMap_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNamedNodeMap_size)}
};

PyDoc_STRVAR(doc_QDomNamedNodeMap, "\1QDomNamedNodeMap()\n"
    "QDomNamedNodeMap(QDomNamedNodeMap)");


pyqt5ClassTypeDef sipTypeDef_QtXml_QDomNamedNodeMap = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QDomNamedNodeMap,
        {0}
    },
    {
        sipNameNr_QDomNamedNodeMap,
        {0, 0, 1},
        12, methods_QDomNamedNodeMap,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDomNamedNodeMap,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QDomNamedNodeMap,
    init_type_QDomNamedNodeMap,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDomNamedNodeMap,
    assign_QDomNamedNodeMap,
    array_QDomNamedNodeMap,
    copy_QDomNamedNodeMap,
    release_QDomNamedNodeMap,
    cast_QDomNamedNodeMap,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
