/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:13 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 430 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"

#line 58 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 313 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 30 "sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 365 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 276 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 389 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 403 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 352 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 418 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 178 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 196 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 264 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 377 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 296 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 238 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"
#line 158 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomProcessingInstruction.cpp"


PyDoc_STRVAR(doc_QDomProcessingInstruction_target, "QDomProcessingInstruction.target() -> str");

extern "C" {static PyObject *meth_QDomProcessingInstruction_target(PyObject *, PyObject *);}
static PyObject *meth_QDomProcessingInstruction_target(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomProcessingInstruction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomProcessingInstruction, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->target());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomProcessingInstruction, sipName_target, doc_QDomProcessingInstruction_target);

    return NULL;
}


PyDoc_STRVAR(doc_QDomProcessingInstruction_data, "QDomProcessingInstruction.data() -> str");

extern "C" {static PyObject *meth_QDomProcessingInstruction_data(PyObject *, PyObject *);}
static PyObject *meth_QDomProcessingInstruction_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomProcessingInstruction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomProcessingInstruction, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->data());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomProcessingInstruction, sipName_data, doc_QDomProcessingInstruction_data);

    return NULL;
}


PyDoc_STRVAR(doc_QDomProcessingInstruction_setData, "QDomProcessingInstruction.setData(str)");

extern "C" {static PyObject *meth_QDomProcessingInstruction_setData(PyObject *, PyObject *);}
static PyObject *meth_QDomProcessingInstruction_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDomProcessingInstruction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomProcessingInstruction, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setData(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomProcessingInstruction, sipName_setData, doc_QDomProcessingInstruction_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QDomProcessingInstruction_nodeType, "QDomProcessingInstruction.nodeType() -> QDomNode.NodeType");

extern "C" {static PyObject *meth_QDomProcessingInstruction_nodeType(PyObject *, PyObject *);}
static PyObject *meth_QDomProcessingInstruction_nodeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomProcessingInstruction *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomProcessingInstruction, &sipCpp))
        {
            QDomNode::NodeType sipRes;

            sipRes = sipCpp->nodeType();

            return sipConvertFromEnum(sipRes,sipType_QDomNode_NodeType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomProcessingInstruction, sipName_nodeType, doc_QDomProcessingInstruction_nodeType);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDomProcessingInstruction(void *, const sipTypeDef *);}
static void *cast_QDomProcessingInstruction(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDomProcessingInstruction)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QDomNode)->ctd_cast((QDomNode *)(QDomProcessingInstruction *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDomProcessingInstruction(void *, int);}
static void release_QDomProcessingInstruction(void *sipCppV,int)
{
    delete reinterpret_cast<QDomProcessingInstruction *>(sipCppV);
}


extern "C" {static void assign_QDomProcessingInstruction(void *, SIP_SSIZE_T, const void *);}
static void assign_QDomProcessingInstruction(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDomProcessingInstruction *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDomProcessingInstruction *>(sipSrc);
}


extern "C" {static void *array_QDomProcessingInstruction(SIP_SSIZE_T);}
static void *array_QDomProcessingInstruction(SIP_SSIZE_T sipNrElem)
{
    return new QDomProcessingInstruction[sipNrElem];
}


extern "C" {static void *copy_QDomProcessingInstruction(const void *, SIP_SSIZE_T);}
static void *copy_QDomProcessingInstruction(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDomProcessingInstruction(reinterpret_cast<const QDomProcessingInstruction *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDomProcessingInstruction(sipSimpleWrapper *);}
static void dealloc_QDomProcessingInstruction(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDomProcessingInstruction(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QDomProcessingInstruction(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDomProcessingInstruction(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QDomProcessingInstruction *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QDomProcessingInstruction();

            return sipCpp;
        }
    }

    {
        const QDomProcessingInstruction* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDomProcessingInstruction, &a0))
        {
            sipCpp = new QDomProcessingInstruction(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDomProcessingInstruction[] = {{13, 255, 1}};


static PyMethodDef methods_QDomProcessingInstruction[] = {
    {SIP_MLNAME_CAST(sipName_data), meth_QDomProcessingInstruction_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomProcessingInstruction_data)},
    {SIP_MLNAME_CAST(sipName_nodeType), meth_QDomProcessingInstruction_nodeType, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomProcessingInstruction_nodeType)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QDomProcessingInstruction_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomProcessingInstruction_setData)},
    {SIP_MLNAME_CAST(sipName_target), meth_QDomProcessingInstruction_target, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomProcessingInstruction_target)}
};

PyDoc_STRVAR(doc_QDomProcessingInstruction, "\1QDomProcessingInstruction()\n"
    "QDomProcessingInstruction(QDomProcessingInstruction)");


pyqt5ClassTypeDef sipTypeDef_QtXml_QDomProcessingInstruction = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QDomProcessingInstruction,
        {0}
    },
    {
        sipNameNr_QDomProcessingInstruction,
        {0, 0, 1},
        4, methods_QDomProcessingInstruction,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDomProcessingInstruction,
    -1,
    -1,
    supers_QDomProcessingInstruction,
    0,
    init_type_QDomProcessingInstruction,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDomProcessingInstruction,
    assign_QDomProcessingInstruction,
    array_QDomProcessingInstruction,
    copy_QDomProcessingInstruction,
    release_QDomProcessingInstruction,
    cast_QDomProcessingInstruction,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
