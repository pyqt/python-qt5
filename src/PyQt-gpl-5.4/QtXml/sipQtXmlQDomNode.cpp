/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:13 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 58 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"

#line 313 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 30 "sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 365 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 276 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 430 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 389 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 403 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 352 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 418 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 178 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 196 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 264 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 377 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 296 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 238 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"
#line 158 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomNode.cpp"


PyDoc_STRVAR(doc_QDomNode_insertBefore, "QDomNode.insertBefore(QDomNode, QDomNode) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_insertBefore(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_insertBefore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode* a0;
        const QDomNode* a1;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0, sipType_QDomNode, &a1))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->insertBefore(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_insertBefore, doc_QDomNode_insertBefore);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_insertAfter, "QDomNode.insertAfter(QDomNode, QDomNode) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_insertAfter(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_insertAfter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode* a0;
        const QDomNode* a1;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0, sipType_QDomNode, &a1))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->insertAfter(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_insertAfter, doc_QDomNode_insertAfter);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_replaceChild, "QDomNode.replaceChild(QDomNode, QDomNode) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_replaceChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_replaceChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode* a0;
        const QDomNode* a1;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0, sipType_QDomNode, &a1))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->replaceChild(*a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_replaceChild, doc_QDomNode_replaceChild);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_removeChild, "QDomNode.removeChild(QDomNode) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_removeChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_removeChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode* a0;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->removeChild(*a0));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_removeChild, doc_QDomNode_removeChild);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_appendChild, "QDomNode.appendChild(QDomNode) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_appendChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_appendChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode* a0;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QDomNode, &a0))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->appendChild(*a0));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_appendChild, doc_QDomNode_appendChild);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_hasChildNodes, "QDomNode.hasChildNodes() -> bool");

extern "C" {static PyObject *meth_QDomNode_hasChildNodes(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_hasChildNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasChildNodes();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_hasChildNodes, doc_QDomNode_hasChildNodes);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_cloneNode, "QDomNode.cloneNode(bool deep=True) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_cloneNode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_cloneNode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        const QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_deep,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QDomNode, &sipCpp, &a0))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->cloneNode(a0));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_cloneNode, doc_QDomNode_cloneNode);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_normalize, "QDomNode.normalize()");

extern "C" {static PyObject *meth_QDomNode_normalize(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_normalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            sipCpp->normalize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_normalize, doc_QDomNode_normalize);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isSupported, "QDomNode.isSupported(str, str) -> bool");

extern "C" {static PyObject *meth_QDomNode_isSupported(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->isSupported(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isSupported, doc_QDomNode_isSupported);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_nodeName, "QDomNode.nodeName() -> str");

extern "C" {static PyObject *meth_QDomNode_nodeName(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nodeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->nodeName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nodeName, doc_QDomNode_nodeName);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_nodeType, "QDomNode.nodeType() -> QDomNode.NodeType");

extern "C" {static PyObject *meth_QDomNode_nodeType(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nodeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNode::NodeType sipRes;

            sipRes = sipCpp->nodeType();

            return sipConvertFromEnum(sipRes,sipType_QDomNode_NodeType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nodeType, doc_QDomNode_nodeType);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_parentNode, "QDomNode.parentNode() -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_parentNode(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_parentNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->parentNode());

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_parentNode, doc_QDomNode_parentNode);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_childNodes, "QDomNode.childNodes() -> QDomNodeList");

extern "C" {static PyObject *meth_QDomNode_childNodes(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_childNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNodeList*sipRes;

            sipRes = new QDomNodeList(sipCpp->childNodes());

            return sipConvertFromNewType(sipRes,sipType_QDomNodeList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_childNodes, doc_QDomNode_childNodes);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_firstChild, "QDomNode.firstChild() -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_firstChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_firstChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->firstChild());

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_firstChild, doc_QDomNode_firstChild);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_lastChild, "QDomNode.lastChild() -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_lastChild(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_lastChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->lastChild());

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_lastChild, doc_QDomNode_lastChild);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_previousSibling, "QDomNode.previousSibling() -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_previousSibling(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_previousSibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->previousSibling());

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_previousSibling, doc_QDomNode_previousSibling);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_nextSibling, "QDomNode.nextSibling() -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_nextSibling(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nextSibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->nextSibling());

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nextSibling, doc_QDomNode_nextSibling);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_attributes, "QDomNode.attributes() -> QDomNamedNodeMap");

extern "C" {static PyObject *meth_QDomNode_attributes(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_attributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNamedNodeMap*sipRes;

            sipRes = new QDomNamedNodeMap(sipCpp->attributes());

            return sipConvertFromNewType(sipRes,sipType_QDomNamedNodeMap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_attributes, doc_QDomNode_attributes);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_ownerDocument, "QDomNode.ownerDocument() -> QDomDocument");

extern "C" {static PyObject *meth_QDomNode_ownerDocument(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_ownerDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomDocument*sipRes;

            sipRes = new QDomDocument(sipCpp->ownerDocument());

            return sipConvertFromNewType(sipRes,sipType_QDomDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_ownerDocument, doc_QDomNode_ownerDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_namespaceURI, "QDomNode.namespaceURI() -> str");

extern "C" {static PyObject *meth_QDomNode_namespaceURI(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_namespaceURI(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->namespaceURI());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_namespaceURI, doc_QDomNode_namespaceURI);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_localName, "QDomNode.localName() -> str");

extern "C" {static PyObject *meth_QDomNode_localName(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_localName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->localName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_localName, doc_QDomNode_localName);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_hasAttributes, "QDomNode.hasAttributes() -> bool");

extern "C" {static PyObject *meth_QDomNode_hasAttributes(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_hasAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAttributes();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_hasAttributes, doc_QDomNode_hasAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_nodeValue, "QDomNode.nodeValue() -> str");

extern "C" {static PyObject *meth_QDomNode_nodeValue(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->nodeValue());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nodeValue, doc_QDomNode_nodeValue);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_setNodeValue, "QDomNode.setNodeValue(str)");

extern "C" {static PyObject *meth_QDomNode_setNodeValue(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_setNodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNodeValue(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_setNodeValue, doc_QDomNode_setNodeValue);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_prefix, "QDomNode.prefix() -> str");

extern "C" {static PyObject *meth_QDomNode_prefix(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_prefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->prefix());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_prefix, doc_QDomNode_prefix);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_setPrefix, "QDomNode.setPrefix(str)");

extern "C" {static PyObject *meth_QDomNode_setPrefix(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_setPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPrefix(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_setPrefix, doc_QDomNode_setPrefix);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isAttr, "QDomNode.isAttr() -> bool");

extern "C" {static PyObject *meth_QDomNode_isAttr(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isAttr(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAttr();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isAttr, doc_QDomNode_isAttr);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isCDATASection, "QDomNode.isCDATASection() -> bool");

extern "C" {static PyObject *meth_QDomNode_isCDATASection(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isCDATASection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCDATASection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isCDATASection, doc_QDomNode_isCDATASection);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isDocumentFragment, "QDomNode.isDocumentFragment() -> bool");

extern "C" {static PyObject *meth_QDomNode_isDocumentFragment(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isDocumentFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDocumentFragment();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isDocumentFragment, doc_QDomNode_isDocumentFragment);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isDocument, "QDomNode.isDocument() -> bool");

extern "C" {static PyObject *meth_QDomNode_isDocument(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDocument();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isDocument, doc_QDomNode_isDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isDocumentType, "QDomNode.isDocumentType() -> bool");

extern "C" {static PyObject *meth_QDomNode_isDocumentType(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isDocumentType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDocumentType();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isDocumentType, doc_QDomNode_isDocumentType);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isElement, "QDomNode.isElement() -> bool");

extern "C" {static PyObject *meth_QDomNode_isElement(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isElement();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isElement, doc_QDomNode_isElement);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isEntityReference, "QDomNode.isEntityReference() -> bool");

extern "C" {static PyObject *meth_QDomNode_isEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEntityReference();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isEntityReference, doc_QDomNode_isEntityReference);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isText, "QDomNode.isText() -> bool");

extern "C" {static PyObject *meth_QDomNode_isText(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isText();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isText, doc_QDomNode_isText);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isEntity, "QDomNode.isEntity() -> bool");

extern "C" {static PyObject *meth_QDomNode_isEntity(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEntity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isEntity, doc_QDomNode_isEntity);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isNotation, "QDomNode.isNotation() -> bool");

extern "C" {static PyObject *meth_QDomNode_isNotation(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isNotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNotation();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isNotation, doc_QDomNode_isNotation);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isProcessingInstruction, "QDomNode.isProcessingInstruction() -> bool");

extern "C" {static PyObject *meth_QDomNode_isProcessingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isProcessingInstruction();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isProcessingInstruction, doc_QDomNode_isProcessingInstruction);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isCharacterData, "QDomNode.isCharacterData() -> bool");

extern "C" {static PyObject *meth_QDomNode_isCharacterData(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isCharacterData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCharacterData();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isCharacterData, doc_QDomNode_isCharacterData);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isComment, "QDomNode.isComment() -> bool");

extern "C" {static PyObject *meth_QDomNode_isComment(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isComment();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isComment, doc_QDomNode_isComment);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_namedItem, "QDomNode.namedItem(str) -> QDomNode");

extern "C" {static PyObject *meth_QDomNode_namedItem(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_namedItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->namedItem(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_namedItem, doc_QDomNode_namedItem);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_isNull, "QDomNode.isNull() -> bool");

extern "C" {static PyObject *meth_QDomNode_isNull(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_isNull, doc_QDomNode_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_clear, "QDomNode.clear()");

extern "C" {static PyObject *meth_QDomNode_clear(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_clear, doc_QDomNode_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_toAttr, "QDomNode.toAttr() -> QDomAttr");

extern "C" {static PyObject *meth_QDomNode_toAttr(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toAttr(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomAttr*sipRes;

            sipRes = new QDomAttr(sipCpp->toAttr());

            return sipConvertFromNewType(sipRes,sipType_QDomAttr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toAttr, doc_QDomNode_toAttr);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_toCDATASection, "QDomNode.toCDATASection() -> QDomCDATASection");

extern "C" {static PyObject *meth_QDomNode_toCDATASection(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toCDATASection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomCDATASection*sipRes;

            sipRes = new QDomCDATASection(sipCpp->toCDATASection());

            return sipConvertFromNewType(sipRes,sipType_QDomCDATASection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toCDATASection, doc_QDomNode_toCDATASection);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_toDocumentFragment, "QDomNode.toDocumentFragment() -> QDomDocumentFragment");

extern "C" {static PyObject *meth_QDomNode_toDocumentFragment(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toDocumentFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomDocumentFragment*sipRes;

            sipRes = new QDomDocumentFragment(sipCpp->toDocumentFragment());

            return sipConvertFromNewType(sipRes,sipType_QDomDocumentFragment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toDocumentFragment, doc_QDomNode_toDocumentFragment);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_toDocument, "QDomNode.toDocument() -> QDomDocument");

extern "C" {static PyObject *meth_QDomNode_toDocument(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomDocument*sipRes;

            sipRes = new QDomDocument(sipCpp->toDocument());

            return sipConvertFromNewType(sipRes,sipType_QDomDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toDocument, doc_QDomNode_toDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_toDocumentType, "QDomNode.toDocumentType() -> QDomDocumentType");

extern "C" {static PyObject *meth_QDomNode_toDocumentType(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toDocumentType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomDocumentType*sipRes;

            sipRes = new QDomDocumentType(sipCpp->toDocumentType());

            return sipConvertFromNewType(sipRes,sipType_QDomDocumentType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toDocumentType, doc_QDomNode_toDocumentType);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_toElement, "QDomNode.toElement() -> QDomElement");

extern "C" {static PyObject *meth_QDomNode_toElement(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomElement*sipRes;

            sipRes = new QDomElement(sipCpp->toElement());

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toElement, doc_QDomNode_toElement);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_toEntityReference, "QDomNode.toEntityReference() -> QDomEntityReference");

extern "C" {static PyObject *meth_QDomNode_toEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomEntityReference*sipRes;

            sipRes = new QDomEntityReference(sipCpp->toEntityReference());

            return sipConvertFromNewType(sipRes,sipType_QDomEntityReference,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toEntityReference, doc_QDomNode_toEntityReference);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_toText, "QDomNode.toText() -> QDomText");

extern "C" {static PyObject *meth_QDomNode_toText(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomText*sipRes;

            sipRes = new QDomText(sipCpp->toText());

            return sipConvertFromNewType(sipRes,sipType_QDomText,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toText, doc_QDomNode_toText);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_toEntity, "QDomNode.toEntity() -> QDomEntity");

extern "C" {static PyObject *meth_QDomNode_toEntity(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomEntity*sipRes;

            sipRes = new QDomEntity(sipCpp->toEntity());

            return sipConvertFromNewType(sipRes,sipType_QDomEntity,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toEntity, doc_QDomNode_toEntity);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_toNotation, "QDomNode.toNotation() -> QDomNotation");

extern "C" {static PyObject *meth_QDomNode_toNotation(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toNotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomNotation*sipRes;

            sipRes = new QDomNotation(sipCpp->toNotation());

            return sipConvertFromNewType(sipRes,sipType_QDomNotation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toNotation, doc_QDomNode_toNotation);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_toProcessingInstruction, "QDomNode.toProcessingInstruction() -> QDomProcessingInstruction");

extern "C" {static PyObject *meth_QDomNode_toProcessingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomProcessingInstruction*sipRes;

            sipRes = new QDomProcessingInstruction(sipCpp->toProcessingInstruction());

            return sipConvertFromNewType(sipRes,sipType_QDomProcessingInstruction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toProcessingInstruction, doc_QDomNode_toProcessingInstruction);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_toCharacterData, "QDomNode.toCharacterData() -> QDomCharacterData");

extern "C" {static PyObject *meth_QDomNode_toCharacterData(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toCharacterData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomCharacterData*sipRes;

            sipRes = new QDomCharacterData(sipCpp->toCharacterData());

            return sipConvertFromNewType(sipRes,sipType_QDomCharacterData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toCharacterData, doc_QDomNode_toCharacterData);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_toComment, "QDomNode.toComment() -> QDomComment");

extern "C" {static PyObject *meth_QDomNode_toComment(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_toComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            QDomComment*sipRes;

            sipRes = new QDomComment(sipCpp->toComment());

            return sipConvertFromNewType(sipRes,sipType_QDomComment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_toComment, doc_QDomNode_toComment);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_save, "QDomNode.save(QTextStream, int, QDomNode.EncodingPolicy=QDomNode.EncodingFromDocument)");

extern "C" {static PyObject *meth_QDomNode_save(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextStream* a0;
        int a1;
        QDomNode::EncodingPolicy a2 = QDomNode::EncodingFromDocument;
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9i|E", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QTextStream, &a0, &a1, sipType_QDomNode_EncodingPolicy, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->save(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_save, doc_QDomNode_save);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_firstChildElement, "QDomNode.firstChildElement(str tagName=QString()) -> QDomElement");

extern "C" {static PyObject *meth_QDomNode_firstChildElement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_firstChildElement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        const QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tagName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomElement*sipRes;

            sipRes = new QDomElement(sipCpp->firstChildElement(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_firstChildElement, doc_QDomNode_firstChildElement);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_lastChildElement, "QDomNode.lastChildElement(str tagName=QString()) -> QDomElement");

extern "C" {static PyObject *meth_QDomNode_lastChildElement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_lastChildElement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        const QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tagName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomElement*sipRes;

            sipRes = new QDomElement(sipCpp->lastChildElement(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_lastChildElement, doc_QDomNode_lastChildElement);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_previousSiblingElement, "QDomNode.previousSiblingElement(str tagName=QString()) -> QDomElement");

extern "C" {static PyObject *meth_QDomNode_previousSiblingElement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_previousSiblingElement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        const QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tagName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomElement*sipRes;

            sipRes = new QDomElement(sipCpp->previousSiblingElement(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_previousSiblingElement, doc_QDomNode_previousSiblingElement);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_nextSiblingElement, "QDomNode.nextSiblingElement(str taName=QString()) -> QDomElement");

extern "C" {static PyObject *meth_QDomNode_nextSiblingElement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomNode_nextSiblingElement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        const QDomNode *sipCpp;

        static const char *sipKwdList[] = {
            sipName_taName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QDomNode, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomElement*sipRes;

            sipRes = new QDomElement(sipCpp->nextSiblingElement(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_nextSiblingElement, doc_QDomNode_nextSiblingElement);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_lineNumber, "QDomNode.lineNumber() -> int");

extern "C" {static PyObject *meth_QDomNode_lineNumber(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_lineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_lineNumber, doc_QDomNode_lineNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QDomNode_columnNumber, "QDomNode.columnNumber() -> int");

extern "C" {static PyObject *meth_QDomNode_columnNumber(PyObject *, PyObject *);}
static PyObject *meth_QDomNode_columnNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomNode, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomNode, sipName_columnNumber, doc_QDomNode_columnNumber);

    return NULL;
}


extern "C" {static PyObject *slot_QDomNode___ne__(PyObject *,PyObject *);}
static PyObject *slot_QDomNode___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QDomNode *sipCpp = reinterpret_cast<QDomNode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDomNode));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDomNode* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDomNode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QDomNode::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtXml,ne_slot,sipType_QDomNode,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QDomNode___eq__(PyObject *,PyObject *);}
static PyObject *slot_QDomNode___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QDomNode *sipCpp = reinterpret_cast<QDomNode *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QDomNode));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QDomNode* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QDomNode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QDomNode::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtXml,eq_slot,sipType_QDomNode,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDomNode(void *, const sipTypeDef *);}
static void *cast_QDomNode(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDomNode)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDomNode(void *, int);}
static void release_QDomNode(void *sipCppV,int)
{
    delete reinterpret_cast<QDomNode *>(sipCppV);
}


extern "C" {static void assign_QDomNode(void *, SIP_SSIZE_T, const void *);}
static void assign_QDomNode(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDomNode *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDomNode *>(sipSrc);
}


extern "C" {static void *array_QDomNode(SIP_SSIZE_T);}
static void *array_QDomNode(SIP_SSIZE_T sipNrElem)
{
    return new QDomNode[sipNrElem];
}


extern "C" {static void *copy_QDomNode(const void *, SIP_SSIZE_T);}
static void *copy_QDomNode(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDomNode(reinterpret_cast<const QDomNode *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDomNode(sipSimpleWrapper *);}
static void dealloc_QDomNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDomNode(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QDomNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDomNode(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QDomNode *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QDomNode();

            return sipCpp;
        }
    }

    {
        const QDomNode* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDomNode, &a0))
        {
            sipCpp = new QDomNode(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDomNode[] = {
    {(void *)slot_QDomNode___ne__, ne_slot},
    {(void *)slot_QDomNode___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDomNode[] = {
    {SIP_MLNAME_CAST(sipName_appendChild), meth_QDomNode_appendChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_appendChild)},
    {SIP_MLNAME_CAST(sipName_attributes), meth_QDomNode_attributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_attributes)},
    {SIP_MLNAME_CAST(sipName_childNodes), meth_QDomNode_childNodes, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_childNodes)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QDomNode_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_clear)},
    {SIP_MLNAME_CAST(sipName_cloneNode), (PyCFunction)meth_QDomNode_cloneNode, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDomNode_cloneNode)},
    {SIP_MLNAME_CAST(sipName_columnNumber), meth_QDomNode_columnNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_columnNumber)},
    {SIP_MLNAME_CAST(sipName_firstChild), meth_QDomNode_firstChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_firstChild)},
    {SIP_MLNAME_CAST(sipName_firstChildElement), (PyCFunction)meth_QDomNode_firstChildElement, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDomNode_firstChildElement)},
    {SIP_MLNAME_CAST(sipName_hasAttributes), meth_QDomNode_hasAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_hasAttributes)},
    {SIP_MLNAME_CAST(sipName_hasChildNodes), meth_QDomNode_hasChildNodes, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_hasChildNodes)},
    {SIP_MLNAME_CAST(sipName_insertAfter), meth_QDomNode_insertAfter, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_insertAfter)},
    {SIP_MLNAME_CAST(sipName_insertBefore), meth_QDomNode_insertBefore, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_insertBefore)},
    {SIP_MLNAME_CAST(sipName_isAttr), meth_QDomNode_isAttr, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isAttr)},
    {SIP_MLNAME_CAST(sipName_isCDATASection), meth_QDomNode_isCDATASection, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isCDATASection)},
    {SIP_MLNAME_CAST(sipName_isCharacterData), meth_QDomNode_isCharacterData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isCharacterData)},
    {SIP_MLNAME_CAST(sipName_isComment), meth_QDomNode_isComment, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isComment)},
    {SIP_MLNAME_CAST(sipName_isDocument), meth_QDomNode_isDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isDocument)},
    {SIP_MLNAME_CAST(sipName_isDocumentFragment), meth_QDomNode_isDocumentFragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isDocumentFragment)},
    {SIP_MLNAME_CAST(sipName_isDocumentType), meth_QDomNode_isDocumentType, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isDocumentType)},
    {SIP_MLNAME_CAST(sipName_isElement), meth_QDomNode_isElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isElement)},
    {SIP_MLNAME_CAST(sipName_isEntity), meth_QDomNode_isEntity, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isEntity)},
    {SIP_MLNAME_CAST(sipName_isEntityReference), meth_QDomNode_isEntityReference, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isEntityReference)},
    {SIP_MLNAME_CAST(sipName_isNotation), meth_QDomNode_isNotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isNotation)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QDomNode_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isNull)},
    {SIP_MLNAME_CAST(sipName_isProcessingInstruction), meth_QDomNode_isProcessingInstruction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isProcessingInstruction)},
    {SIP_MLNAME_CAST(sipName_isSupported), meth_QDomNode_isSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isSupported)},
    {SIP_MLNAME_CAST(sipName_isText), meth_QDomNode_isText, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_isText)},
    {SIP_MLNAME_CAST(sipName_lastChild), meth_QDomNode_lastChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_lastChild)},
    {SIP_MLNAME_CAST(sipName_lastChildElement), (PyCFunction)meth_QDomNode_lastChildElement, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDomNode_lastChildElement)},
    {SIP_MLNAME_CAST(sipName_lineNumber), meth_QDomNode_lineNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_lineNumber)},
    {SIP_MLNAME_CAST(sipName_localName), meth_QDomNode_localName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_localName)},
    {SIP_MLNAME_CAST(sipName_namedItem), meth_QDomNode_namedItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_namedItem)},
    {SIP_MLNAME_CAST(sipName_namespaceURI), meth_QDomNode_namespaceURI, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_namespaceURI)},
    {SIP_MLNAME_CAST(sipName_nextSibling), meth_QDomNode_nextSibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_nextSibling)},
    {SIP_MLNAME_CAST(sipName_nextSiblingElement), (PyCFunction)meth_QDomNode_nextSiblingElement, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDomNode_nextSiblingElement)},
    {SIP_MLNAME_CAST(sipName_nodeName), meth_QDomNode_nodeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_nodeName)},
    {SIP_MLNAME_CAST(sipName_nodeType), meth_QDomNode_nodeType, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_nodeType)},
    {SIP_MLNAME_CAST(sipName_nodeValue), meth_QDomNode_nodeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_nodeValue)},
    {SIP_MLNAME_CAST(sipName_normalize), meth_QDomNode_normalize, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_normalize)},
    {SIP_MLNAME_CAST(sipName_ownerDocument), meth_QDomNode_ownerDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_ownerDocument)},
    {SIP_MLNAME_CAST(sipName_parentNode), meth_QDomNode_parentNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_parentNode)},
    {SIP_MLNAME_CAST(sipName_prefix), meth_QDomNode_prefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_prefix)},
    {SIP_MLNAME_CAST(sipName_previousSibling), meth_QDomNode_previousSibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_previousSibling)},
    {SIP_MLNAME_CAST(sipName_previousSiblingElement), (PyCFunction)meth_QDomNode_previousSiblingElement, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDomNode_previousSiblingElement)},
    {SIP_MLNAME_CAST(sipName_removeChild), meth_QDomNode_removeChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_removeChild)},
    {SIP_MLNAME_CAST(sipName_replaceChild), meth_QDomNode_replaceChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_replaceChild)},
    {SIP_MLNAME_CAST(sipName_save), meth_QDomNode_save, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_save)},
    {SIP_MLNAME_CAST(sipName_setNodeValue), meth_QDomNode_setNodeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_setNodeValue)},
    {SIP_MLNAME_CAST(sipName_setPrefix), meth_QDomNode_setPrefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_setPrefix)},
    {SIP_MLNAME_CAST(sipName_toAttr), meth_QDomNode_toAttr, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_toAttr)},
    {SIP_MLNAME_CAST(sipName_toCDATASection), meth_QDomNode_toCDATASection, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_toCDATASection)},
    {SIP_MLNAME_CAST(sipName_toCharacterData), meth_QDomNode_toCharacterData, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_toCharacterData)},
    {SIP_MLNAME_CAST(sipName_toComment), meth_QDomNode_toComment, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_toComment)},
    {SIP_MLNAME_CAST(sipName_toDocument), meth_QDomNode_toDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_toDocument)},
    {SIP_MLNAME_CAST(sipName_toDocumentFragment), meth_QDomNode_toDocumentFragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_toDocumentFragment)},
    {SIP_MLNAME_CAST(sipName_toDocumentType), meth_QDomNode_toDocumentType, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_toDocumentType)},
    {SIP_MLNAME_CAST(sipName_toElement), meth_QDomNode_toElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_toElement)},
    {SIP_MLNAME_CAST(sipName_toEntity), meth_QDomNode_toEntity, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_toEntity)},
    {SIP_MLNAME_CAST(sipName_toEntityReference), meth_QDomNode_toEntityReference, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_toEntityReference)},
    {SIP_MLNAME_CAST(sipName_toNotation), meth_QDomNode_toNotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_toNotation)},
    {SIP_MLNAME_CAST(sipName_toProcessingInstruction), meth_QDomNode_toProcessingInstruction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_toProcessingInstruction)},
    {SIP_MLNAME_CAST(sipName_toText), meth_QDomNode_toText, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomNode_toText)}
};

static sipEnumMemberDef enummembers_QDomNode[] = {
    {sipName_AttributeNode, static_cast<int>(QDomNode::AttributeNode), 15},
    {sipName_BaseNode, static_cast<int>(QDomNode::BaseNode), 15},
    {sipName_CDATASectionNode, static_cast<int>(QDomNode::CDATASectionNode), 15},
    {sipName_CharacterDataNode, static_cast<int>(QDomNode::CharacterDataNode), 15},
    {sipName_CommentNode, static_cast<int>(QDomNode::CommentNode), 15},
    {sipName_DocumentFragmentNode, static_cast<int>(QDomNode::DocumentFragmentNode), 15},
    {sipName_DocumentNode, static_cast<int>(QDomNode::DocumentNode), 15},
    {sipName_DocumentTypeNode, static_cast<int>(QDomNode::DocumentTypeNode), 15},
    {sipName_ElementNode, static_cast<int>(QDomNode::ElementNode), 15},
    {sipName_EncodingFromDocument, static_cast<int>(QDomNode::EncodingFromDocument), 14},
    {sipName_EncodingFromTextStream, static_cast<int>(QDomNode::EncodingFromTextStream), 14},
    {sipName_EntityNode, static_cast<int>(QDomNode::EntityNode), 15},
    {sipName_EntityReferenceNode, static_cast<int>(QDomNode::EntityReferenceNode), 15},
    {sipName_NotationNode, static_cast<int>(QDomNode::NotationNode), 15},
    {sipName_ProcessingInstructionNode, static_cast<int>(QDomNode::ProcessingInstructionNode), 15},
    {sipName_TextNode, static_cast<int>(QDomNode::TextNode), 15},
};

PyDoc_STRVAR(doc_QDomNode, "\1QDomNode()\n"
    "QDomNode(QDomNode)");


pyqt5ClassTypeDef sipTypeDef_QtXml_QDomNode = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QDomNode,
        {0}
    },
    {
        sipNameNr_QDomNode,
        {0, 0, 1},
        62, methods_QDomNode,
        16, enummembers_QDomNode,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDomNode,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QDomNode,
    init_type_QDomNode,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDomNode,
    assign_QDomNode,
    array_QDomNode,
    copy_QDomNode,
    release_QDomNode,
    cast_QDomNode,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
