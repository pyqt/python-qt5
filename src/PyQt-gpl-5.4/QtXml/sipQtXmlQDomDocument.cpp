/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:13 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 196 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 178 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 30 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 76 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qxml.sip"
#include <qxml.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 119 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qxml.sip"
#include <qxml.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 58 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 313 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 158 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 296 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 418 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 430 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 377 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 365 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 352 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 264 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 30 "sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 276 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 389 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 403 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"
#line 238 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXml/qdom.sip"
#include <qdom.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXml/sipQtXmlQDomDocument.cpp"


PyDoc_STRVAR(doc_QDomDocument_createElement, "QDomDocument.createElement(str) -> QDomElement");

extern "C" {static PyObject *meth_QDomDocument_createElement(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomElement*sipRes;

            sipRes = new QDomElement(sipCpp->createElement(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createElement, doc_QDomDocument_createElement);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_createDocumentFragment, "QDomDocument.createDocumentFragment() -> QDomDocumentFragment");

extern "C" {static PyObject *meth_QDomDocument_createDocumentFragment(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createDocumentFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomDocument, &sipCpp))
        {
            QDomDocumentFragment*sipRes;

            sipRes = new QDomDocumentFragment(sipCpp->createDocumentFragment());

            return sipConvertFromNewType(sipRes,sipType_QDomDocumentFragment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createDocumentFragment, doc_QDomDocument_createDocumentFragment);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_createTextNode, "QDomDocument.createTextNode(str) -> QDomText");

extern "C" {static PyObject *meth_QDomDocument_createTextNode(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createTextNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomText*sipRes;

            sipRes = new QDomText(sipCpp->createTextNode(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomText,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createTextNode, doc_QDomDocument_createTextNode);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_createComment, "QDomDocument.createComment(str) -> QDomComment");

extern "C" {static PyObject *meth_QDomDocument_createComment(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomComment*sipRes;

            sipRes = new QDomComment(sipCpp->createComment(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomComment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createComment, doc_QDomDocument_createComment);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_createCDATASection, "QDomDocument.createCDATASection(str) -> QDomCDATASection");

extern "C" {static PyObject *meth_QDomDocument_createCDATASection(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createCDATASection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomCDATASection*sipRes;

            sipRes = new QDomCDATASection(sipCpp->createCDATASection(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomCDATASection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createCDATASection, doc_QDomDocument_createCDATASection);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_createProcessingInstruction, "QDomDocument.createProcessingInstruction(str, str) -> QDomProcessingInstruction");

extern "C" {static PyObject *meth_QDomDocument_createProcessingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QDomProcessingInstruction*sipRes;

            sipRes = new QDomProcessingInstruction(sipCpp->createProcessingInstruction(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomProcessingInstruction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createProcessingInstruction, doc_QDomDocument_createProcessingInstruction);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_createAttribute, "QDomDocument.createAttribute(str) -> QDomAttr");

extern "C" {static PyObject *meth_QDomDocument_createAttribute(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomAttr*sipRes;

            sipRes = new QDomAttr(sipCpp->createAttribute(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomAttr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createAttribute, doc_QDomDocument_createAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_createEntityReference, "QDomDocument.createEntityReference(str) -> QDomEntityReference");

extern "C" {static PyObject *meth_QDomDocument_createEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomEntityReference*sipRes;

            sipRes = new QDomEntityReference(sipCpp->createEntityReference(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomEntityReference,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createEntityReference, doc_QDomDocument_createEntityReference);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_elementsByTagName, "QDomDocument.elementsByTagName(str) -> QDomNodeList");

extern "C" {static PyObject *meth_QDomDocument_elementsByTagName(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_elementsByTagName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomNodeList*sipRes;

            sipRes = new QDomNodeList(sipCpp->elementsByTagName(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomNodeList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_elementsByTagName, doc_QDomDocument_elementsByTagName);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_importNode, "QDomDocument.importNode(QDomNode, bool) -> QDomNode");

extern "C" {static PyObject *meth_QDomDocument_importNode(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_importNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomNode* a0;
        bool a1;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9b", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QDomNode, &a0, &a1))
        {
            QDomNode*sipRes;

            sipRes = new QDomNode(sipCpp->importNode(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_importNode, doc_QDomDocument_importNode);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_createElementNS, "QDomDocument.createElementNS(str, str) -> QDomElement");

extern "C" {static PyObject *meth_QDomDocument_createElementNS(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createElementNS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QDomElement*sipRes;

            sipRes = new QDomElement(sipCpp->createElementNS(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createElementNS, doc_QDomDocument_createElementNS);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_createAttributeNS, "QDomDocument.createAttributeNS(str, str) -> QDomAttr");

extern "C" {static PyObject *meth_QDomDocument_createAttributeNS(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createAttributeNS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QDomAttr*sipRes;

            sipRes = new QDomAttr(sipCpp->createAttributeNS(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomAttr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_createAttributeNS, doc_QDomDocument_createAttributeNS);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_elementsByTagNameNS, "QDomDocument.elementsByTagNameNS(str, str) -> QDomNodeList");

extern "C" {static PyObject *meth_QDomDocument_elementsByTagNameNS(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_elementsByTagNameNS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QDomNodeList*sipRes;

            sipRes = new QDomNodeList(sipCpp->elementsByTagNameNS(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomNodeList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_elementsByTagNameNS, doc_QDomDocument_elementsByTagNameNS);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_elementById, "QDomDocument.elementById(str) -> QDomElement");

extern "C" {static PyObject *meth_QDomDocument_elementById(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_elementById(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QDomElement*sipRes;

            sipRes = new QDomElement(sipCpp->elementById(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_elementById, doc_QDomDocument_elementById);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_doctype, "QDomDocument.doctype() -> QDomDocumentType");

extern "C" {static PyObject *meth_QDomDocument_doctype(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_doctype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomDocument, &sipCpp))
        {
            QDomDocumentType*sipRes;

            sipRes = new QDomDocumentType(sipCpp->doctype());

            return sipConvertFromNewType(sipRes,sipType_QDomDocumentType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_doctype, doc_QDomDocument_doctype);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_implementation, "QDomDocument.implementation() -> QDomImplementation");

extern "C" {static PyObject *meth_QDomDocument_implementation(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_implementation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomDocument, &sipCpp))
        {
            QDomImplementation*sipRes;

            sipRes = new QDomImplementation(sipCpp->implementation());

            return sipConvertFromNewType(sipRes,sipType_QDomImplementation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_implementation, doc_QDomDocument_implementation);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_documentElement, "QDomDocument.documentElement() -> QDomElement");

extern "C" {static PyObject *meth_QDomDocument_documentElement(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_documentElement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomDocument, &sipCpp))
        {
            QDomElement*sipRes;

            sipRes = new QDomElement(sipCpp->documentElement());

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_documentElement, doc_QDomDocument_documentElement);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_nodeType, "QDomDocument.nodeType() -> QDomNode.NodeType");

extern "C" {static PyObject *meth_QDomDocument_nodeType(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_nodeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDomDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDomDocument, &sipCpp))
        {
            QDomNode::NodeType sipRes;

            sipRes = sipCpp->nodeType();

            return sipConvertFromEnum(sipRes,sipType_QDomNode_NodeType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_nodeType, doc_QDomDocument_nodeType);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_setContent, "QDomDocument.setContent(QByteArray, bool) -> (bool, str, int, int)\n"
    "QDomDocument.setContent(str, bool) -> (bool, str, int, int)\n"
    "QDomDocument.setContent(QIODevice, bool) -> (bool, str, int, int)\n"
    "QDomDocument.setContent(QXmlInputSource, bool) -> (bool, str, int, int)\n"
    "QDomDocument.setContent(QByteArray) -> (bool, str, int, int)\n"
    "QDomDocument.setContent(str) -> (bool, str, int, int)\n"
    "QDomDocument.setContent(QIODevice) -> (bool, str, int, int)\n"
    "QDomDocument.setContent(QXmlInputSource, QXmlReader) -> (bool, str, int, int)");

extern "C" {static PyObject *meth_QDomDocument_setContent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_setContent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        bool a1;
        QString* a2;
        int a3;
        int a4;
        QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1b", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;
            a2 = new QString();

            sipRes = sipCpp->setContent(*a0,a1,a2,&a3,&a4);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bNii)",sipRes,a2,sipType_QString,NULL,a3,a4);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        bool a1;
        QString* a2;
        int a3;
        int a4;
        QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1b", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            bool sipRes;
            a2 = new QString();

            sipRes = sipCpp->setContent(*a0,a1,a2,&a3,&a4);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(bNii)",sipRes,a2,sipType_QString,NULL,a3,a4);
        }
    }

    {
        QIODevice* a0;
        bool a1;
        QString* a2;
        int a3;
        int a4;
        QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8b", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QIODevice, &a0, &a1))
        {
            bool sipRes;
            a2 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(a0,a1,a2,&a3,&a4);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bNii)",sipRes,a2,sipType_QString,NULL,a3,a4);
        }
    }

    {
        QXmlInputSource* a0;
        bool a1;
        QString* a2;
        int a3;
        int a4;
        QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8b", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QXmlInputSource, &a0, &a1))
        {
            bool sipRes;
            a2 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(a0,a1,a2,&a3,&a4);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bNii)",sipRes,a2,sipType_QString,NULL,a3,a4);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        QString* a1;
        int a2;
        int a3;
        QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;
            a1 = new QString();

            sipRes = sipCpp->setContent(*a0,a1,&a2,&a3);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bNii)",sipRes,a1,sipType_QString,NULL,a2,a3);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QString* a1;
        int a2;
        int a3;
        QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;
            a1 = new QString();

            sipRes = sipCpp->setContent(*a0,a1,&a2,&a3);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(bNii)",sipRes,a1,sipType_QString,NULL,a2,a3);
        }
    }

    {
        QIODevice* a0;
        QString* a1;
        int a2;
        int a3;
        QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QIODevice, &a0))
        {
            bool sipRes;
            a1 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(a0,a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bNii)",sipRes,a1,sipType_QString,NULL,a2,a3);
        }
    }

    {
        QXmlInputSource* a0;
        QXmlReader* a1;
        QString* a2;
        int a3;
        int a4;
        QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J8", &sipSelf, sipType_QDomDocument, &sipCpp, sipType_QXmlInputSource, &a0, sipType_QXmlReader, &a1))
        {
            bool sipRes;
            a2 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(a0,a1,a2,&a3,&a4);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bNii)",sipRes,a2,sipType_QString,NULL,a3,a4);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_setContent, doc_QDomDocument_setContent);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_toString, "QDomDocument.toString(int indent=1) -> str");

extern "C" {static PyObject *meth_QDomDocument_toString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_toString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 1;
        const QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            sipName_indent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QDomDocument, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toString(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_toString, doc_QDomDocument_toString);

    return NULL;
}


PyDoc_STRVAR(doc_QDomDocument_toByteArray, "QDomDocument.toByteArray(int indent=1) -> QByteArray");

extern "C" {static PyObject *meth_QDomDocument_toByteArray(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_toByteArray(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 1;
        const QDomDocument *sipCpp;

        static const char *sipKwdList[] = {
            sipName_indent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QDomDocument, &sipCpp, &a0))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->toByteArray(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDomDocument, sipName_toByteArray, doc_QDomDocument_toByteArray);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDomDocument(void *, const sipTypeDef *);}
static void *cast_QDomDocument(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDomDocument)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QDomNode)->ctd_cast((QDomNode *)(QDomDocument *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDomDocument(void *, int);}
static void release_QDomDocument(void *sipCppV,int)
{
    delete reinterpret_cast<QDomDocument *>(sipCppV);
}


extern "C" {static void assign_QDomDocument(void *, SIP_SSIZE_T, const void *);}
static void assign_QDomDocument(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDomDocument *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDomDocument *>(sipSrc);
}


extern "C" {static void *array_QDomDocument(SIP_SSIZE_T);}
static void *array_QDomDocument(SIP_SSIZE_T sipNrElem)
{
    return new QDomDocument[sipNrElem];
}


extern "C" {static void *copy_QDomDocument(const void *, SIP_SSIZE_T);}
static void *copy_QDomDocument(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDomDocument(reinterpret_cast<const QDomDocument *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDomDocument(sipSimpleWrapper *);}
static void dealloc_QDomDocument(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDomDocument(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QDomDocument(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDomDocument(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QDomDocument *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QDomDocument();

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new QDomDocument(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QDomDocumentType* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDomDocumentType, &a0))
        {
            sipCpp = new QDomDocument(*a0);

            return sipCpp;
        }
    }

    {
        const QDomDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDomDocument, &a0))
        {
            sipCpp = new QDomDocument(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDomDocument[] = {{13, 255, 1}};


static PyMethodDef methods_QDomDocument[] = {
    {SIP_MLNAME_CAST(sipName_createAttribute), meth_QDomDocument_createAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_createAttribute)},
    {SIP_MLNAME_CAST(sipName_createAttributeNS), meth_QDomDocument_createAttributeNS, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_createAttributeNS)},
    {SIP_MLNAME_CAST(sipName_createCDATASection), meth_QDomDocument_createCDATASection, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_createCDATASection)},
    {SIP_MLNAME_CAST(sipName_createComment), meth_QDomDocument_createComment, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_createComment)},
    {SIP_MLNAME_CAST(sipName_createDocumentFragment), meth_QDomDocument_createDocumentFragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_createDocumentFragment)},
    {SIP_MLNAME_CAST(sipName_createElement), meth_QDomDocument_createElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_createElement)},
    {SIP_MLNAME_CAST(sipName_createElementNS), meth_QDomDocument_createElementNS, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_createElementNS)},
    {SIP_MLNAME_CAST(sipName_createEntityReference), meth_QDomDocument_createEntityReference, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_createEntityReference)},
    {SIP_MLNAME_CAST(sipName_createProcessingInstruction), meth_QDomDocument_createProcessingInstruction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_createProcessingInstruction)},
    {SIP_MLNAME_CAST(sipName_createTextNode), meth_QDomDocument_createTextNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_createTextNode)},
    {SIP_MLNAME_CAST(sipName_doctype), meth_QDomDocument_doctype, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_doctype)},
    {SIP_MLNAME_CAST(sipName_documentElement), meth_QDomDocument_documentElement, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_documentElement)},
    {SIP_MLNAME_CAST(sipName_elementById), meth_QDomDocument_elementById, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_elementById)},
    {SIP_MLNAME_CAST(sipName_elementsByTagName), meth_QDomDocument_elementsByTagName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_elementsByTagName)},
    {SIP_MLNAME_CAST(sipName_elementsByTagNameNS), meth_QDomDocument_elementsByTagNameNS, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_elementsByTagNameNS)},
    {SIP_MLNAME_CAST(sipName_implementation), meth_QDomDocument_implementation, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_implementation)},
    {SIP_MLNAME_CAST(sipName_importNode), meth_QDomDocument_importNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_importNode)},
    {SIP_MLNAME_CAST(sipName_nodeType), meth_QDomDocument_nodeType, METH_VARARGS, SIP_MLDOC_CAST(doc_QDomDocument_nodeType)},
    {SIP_MLNAME_CAST(sipName_setContent), (PyCFunction)meth_QDomDocument_setContent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDomDocument_setContent)},
    {SIP_MLNAME_CAST(sipName_toByteArray), (PyCFunction)meth_QDomDocument_toByteArray, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDomDocument_toByteArray)},
    {SIP_MLNAME_CAST(sipName_toString), (PyCFunction)meth_QDomDocument_toString, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDomDocument_toString)}
};

PyDoc_STRVAR(doc_QDomDocument, "\1QDomDocument()\n"
    "QDomDocument(str)\n"
    "QDomDocument(QDomDocumentType)\n"
    "QDomDocument(QDomDocument)");


pyqt5ClassTypeDef sipTypeDef_QtXml_QDomDocument = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QDomDocument,
        {0}
    },
    {
        sipNameNr_QDomDocument,
        {0, 0, 1},
        21, methods_QDomDocument,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDomDocument,
    -1,
    -1,
    supers_QDomDocument,
    0,
    init_type_QDomDocument,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDomDocument,
    assign_QDomDocument,
    array_QDomDocument,
    copy_QDomDocument,
    release_QDomDocument,
    cast_QDomDocument,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
