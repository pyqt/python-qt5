/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 104 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qicon.sip"
#include <qicon.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qfont.sip"
#include <qfont.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStandardItem.cpp"


class sipQStandardItem : public QStandardItem
{
public:
    sipQStandardItem();
    sipQStandardItem(const QString&);
    sipQStandardItem(const QIcon&,const QString&);
    sipQStandardItem(int,int);
    sipQStandardItem(const QStandardItem&);
    virtual ~sipQStandardItem();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_emitDataChanged();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool operator<(const QStandardItem&) const;
    void write(QDataStream&) const;
    void read(QDataStream&);
    int type() const;
    QStandardItem* clone() const;
    void setData(const QVariant&,int);
    QVariant data(int) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStandardItem(const sipQStandardItem &);
    sipQStandardItem &operator = (const sipQStandardItem &);

    char sipPyMethods[7];
};

sipQStandardItem::sipQStandardItem(): QStandardItem(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::sipQStandardItem(const QString& a0): QStandardItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::sipQStandardItem(const QIcon& a0,const QString& a1): QStandardItem(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::sipQStandardItem(int a0,int a1): QStandardItem(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::sipQStandardItem(const QStandardItem& a0): QStandardItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::~sipQStandardItem()
{
    sipCommonDtor(sipPySelf);
}

bool sipQStandardItem::operator<(const QStandardItem& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName___lt__);

    if (!sipMeth)
        return QStandardItem::operator<(a0);

    extern bool sipVH_QtGui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QStandardItem&);

    return sipVH_QtGui_23(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQStandardItem::write(QDataStream& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_write);

    if (!sipMeth)
    {
        QStandardItem::write(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDataStream&);

    sipVH_QtGui_24(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQStandardItem::read(QDataStream& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_read);

    if (!sipMeth)
    {
        QStandardItem::read(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDataStream&);

    sipVH_QtGui_24(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQStandardItem::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_type);

    if (!sipMeth)
        return QStandardItem::type();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtGui_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QStandardItem* sipQStandardItem::clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_clone);

    if (!sipMeth)
        return QStandardItem::clone();

    extern QStandardItem* sipVH_QtGui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_25(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQStandardItem::setData(const QVariant& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
    {
        QStandardItem::setData(a0,a1);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QVariant&,int);

    sipVH_QtGui_26(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QVariant sipQStandardItem::data(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return QStandardItem::data(a0);

    extern QVariant sipVH_QtGui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtGui_27(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQStandardItem::sipProtect_emitDataChanged()
{
    QStandardItem::emitDataChanged();
}


PyDoc_STRVAR(doc_QStandardItem_data, "QStandardItem.data(int role=Qt.UserRole+1) -> QVariant");

extern "C" {static PyObject *meth_QStandardItem_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = Qt::UserRole+1;
        const QStandardItem *sipCpp;

        static const char *sipKwdList[] = {
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QStandardItem::data(a0) : sipCpp->data(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_data, doc_QStandardItem_data);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setData, "QStandardItem.setData(QVariant, int role=Qt.UserRole+1)");

extern "C" {static PyObject *meth_QStandardItem_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QVariant* a0;
        int a0State = 0;
        int a1 = Qt::UserRole+1;
        QStandardItem *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QVariant, &a0, &a0State, &a1))
        {
            (sipSelfWasArg ? sipCpp->QStandardItem::setData(*a0,a1) : sipCpp->setData(*a0,a1));
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setData, doc_QStandardItem_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_text, "QStandardItem.text() -> str");

extern "C" {static PyObject *meth_QStandardItem_text(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_text, doc_QStandardItem_text);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_icon, "QStandardItem.icon() -> QIcon");

extern "C" {static PyObject *meth_QStandardItem_icon(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QIcon*sipRes;

            sipRes = new QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_icon, doc_QStandardItem_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_toolTip, "QStandardItem.toolTip() -> str");

extern "C" {static PyObject *meth_QStandardItem_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toolTip());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_toolTip, doc_QStandardItem_toolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_statusTip, "QStandardItem.statusTip() -> str");

extern "C" {static PyObject *meth_QStandardItem_statusTip(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_statusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->statusTip());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_statusTip, doc_QStandardItem_statusTip);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_whatsThis, "QStandardItem.whatsThis() -> str");

extern "C" {static PyObject *meth_QStandardItem_whatsThis(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_whatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->whatsThis());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_whatsThis, doc_QStandardItem_whatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_sizeHint, "QStandardItem.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QStandardItem_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->sizeHint());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_sizeHint, doc_QStandardItem_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_font, "QStandardItem.font() -> QFont");

extern "C" {static PyObject *meth_QStandardItem_font(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QFont*sipRes;

            sipRes = new QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_font, doc_QStandardItem_font);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_textAlignment, "QStandardItem.textAlignment() -> Qt.Alignment");

extern "C" {static PyObject *meth_QStandardItem_textAlignment(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_textAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            Qt::Alignment*sipRes;

            sipRes = new Qt::Alignment(sipCpp->textAlignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_textAlignment, doc_QStandardItem_textAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_background, "QStandardItem.background() -> QBrush");

extern "C" {static PyObject *meth_QStandardItem_background(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->background());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_background, doc_QStandardItem_background);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_foreground, "QStandardItem.foreground() -> QBrush");

extern "C" {static PyObject *meth_QStandardItem_foreground(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->foreground());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_foreground, doc_QStandardItem_foreground);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_checkState, "QStandardItem.checkState() -> Qt.CheckState");

extern "C" {static PyObject *meth_QStandardItem_checkState(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_checkState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            Qt::CheckState sipRes;

            sipRes = sipCpp->checkState();

            return sipConvertFromEnum(sipRes,sipType_Qt_CheckState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_checkState, doc_QStandardItem_checkState);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_accessibleText, "QStandardItem.accessibleText() -> str");

extern "C" {static PyObject *meth_QStandardItem_accessibleText(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_accessibleText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->accessibleText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_accessibleText, doc_QStandardItem_accessibleText);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_accessibleDescription, "QStandardItem.accessibleDescription() -> str");

extern "C" {static PyObject *meth_QStandardItem_accessibleDescription(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_accessibleDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->accessibleDescription());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_accessibleDescription, doc_QStandardItem_accessibleDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_flags, "QStandardItem.flags() -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QStandardItem_flags(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            Qt::ItemFlags*sipRes;

            sipRes = new Qt::ItemFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_flags, doc_QStandardItem_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setFlags, "QStandardItem.setFlags(Qt.ItemFlags)");

extern "C" {static PyObject *meth_QStandardItem_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ItemFlags* a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_Qt_ItemFlags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_Qt_ItemFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setFlags, doc_QStandardItem_setFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_isEnabled, "QStandardItem.isEnabled() -> bool");

extern "C" {static PyObject *meth_QStandardItem_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isEnabled, doc_QStandardItem_isEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setEnabled, "QStandardItem.setEnabled(bool)");

extern "C" {static PyObject *meth_QStandardItem_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setEnabled, doc_QStandardItem_setEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_isEditable, "QStandardItem.isEditable() -> bool");

extern "C" {static PyObject *meth_QStandardItem_isEditable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEditable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isEditable, doc_QStandardItem_isEditable);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setEditable, "QStandardItem.setEditable(bool)");

extern "C" {static PyObject *meth_QStandardItem_setEditable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setEditable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setEditable, doc_QStandardItem_setEditable);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_isSelectable, "QStandardItem.isSelectable() -> bool");

extern "C" {static PyObject *meth_QStandardItem_isSelectable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isSelectable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSelectable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isSelectable, doc_QStandardItem_isSelectable);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setSelectable, "QStandardItem.setSelectable(bool)");

extern "C" {static PyObject *meth_QStandardItem_setSelectable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setSelectable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setSelectable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setSelectable, doc_QStandardItem_setSelectable);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_isCheckable, "QStandardItem.isCheckable() -> bool");

extern "C" {static PyObject *meth_QStandardItem_isCheckable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCheckable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isCheckable, doc_QStandardItem_isCheckable);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setCheckable, "QStandardItem.setCheckable(bool)");

extern "C" {static PyObject *meth_QStandardItem_setCheckable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setCheckable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setCheckable, doc_QStandardItem_setCheckable);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_isTristate, "QStandardItem.isTristate() -> bool");

extern "C" {static PyObject *meth_QStandardItem_isTristate(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isTristate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTristate();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isTristate, doc_QStandardItem_isTristate);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setTristate, "QStandardItem.setTristate(bool)");

extern "C" {static PyObject *meth_QStandardItem_setTristate(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setTristate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setTristate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setTristate, doc_QStandardItem_setTristate);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_isDragEnabled, "QStandardItem.isDragEnabled() -> bool");

extern "C" {static PyObject *meth_QStandardItem_isDragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isDragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDragEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isDragEnabled, doc_QStandardItem_isDragEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setDragEnabled, "QStandardItem.setDragEnabled(bool)");

extern "C" {static PyObject *meth_QStandardItem_setDragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setDragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setDragEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setDragEnabled, doc_QStandardItem_setDragEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_isDropEnabled, "QStandardItem.isDropEnabled() -> bool");

extern "C" {static PyObject *meth_QStandardItem_isDropEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isDropEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDropEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_isDropEnabled, doc_QStandardItem_isDropEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setDropEnabled, "QStandardItem.setDropEnabled(bool)");

extern "C" {static PyObject *meth_QStandardItem_setDropEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setDropEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setDropEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setDropEnabled, doc_QStandardItem_setDropEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_parent, "QStandardItem.parent() -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItem_parent(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QStandardItem*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_parent, doc_QStandardItem_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_row, "QStandardItem.row() -> int");

extern "C" {static PyObject *meth_QStandardItem_row(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_row(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->row();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_row, doc_QStandardItem_row);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_column, "QStandardItem.column() -> int");

extern "C" {static PyObject *meth_QStandardItem_column(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_column(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->column();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_column, doc_QStandardItem_column);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_index, "QStandardItem.index() -> QModelIndex");

extern "C" {static PyObject *meth_QStandardItem_index(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_index(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->index());

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_index, doc_QStandardItem_index);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_model, "QStandardItem.model() -> QStandardItemModel");

extern "C" {static PyObject *meth_QStandardItem_model(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_model(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QStandardItemModel*sipRes;

            sipRes = sipCpp->model();

            return sipConvertFromType(sipRes,sipType_QStandardItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_model, doc_QStandardItem_model);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_rowCount, "QStandardItem.rowCount() -> int");

extern "C" {static PyObject *meth_QStandardItem_rowCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_rowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->rowCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_rowCount, doc_QStandardItem_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setRowCount, "QStandardItem.setRowCount(int)");

extern "C" {static PyObject *meth_QStandardItem_setRowCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setRowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setRowCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setRowCount, doc_QStandardItem_setRowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_columnCount, "QStandardItem.columnCount() -> int");

extern "C" {static PyObject *meth_QStandardItem_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_columnCount, doc_QStandardItem_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setColumnCount, "QStandardItem.setColumnCount(int)");

extern "C" {static PyObject *meth_QStandardItem_setColumnCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->setColumnCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setColumnCount, doc_QStandardItem_setColumnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_hasChildren, "QStandardItem.hasChildren() -> bool");

extern "C" {static PyObject *meth_QStandardItem_hasChildren(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_hasChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasChildren();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_hasChildren, doc_QStandardItem_hasChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_child, "QStandardItem.child(int, int column=0) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItem_child(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_child(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = 0;
        const QStandardItem *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1))
        {
            QStandardItem*sipRes;

            sipRes = sipCpp->child(a0,a1);

            return sipConvertFromType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_child, doc_QStandardItem_child);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setChild, "QStandardItem.setChild(int, int, QStandardItem)\n"
    "QStandardItem.setChild(int, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItem_setChild(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QStandardItem* a2;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ:", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1, sipType_QStandardItem, &a2))
        {
            sipCpp->setChild(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QStandardItem* a1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            sipCpp->setChild(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setChild, doc_QStandardItem_setChild);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_insertRow, "QStandardItem.insertRow(int, list-of-QStandardItem)\n"
    "QStandardItem.insertRow(int, QStandardItem)");

extern "C" {static PyObject *meth_QStandardItem_insertRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_insertRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QList<QStandardItem*>* a1;
        int a1State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ3", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, sipType_QList_0101QStandardItem,&a1, &a1State))
        {
            sipCpp->insertRow(a0,*a1);
            sipReleaseType(const_cast<QList<QStandardItem*> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QStandardItem* a1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, sipType_QStandardItem, &a1))
        {
            sipCpp->insertRow(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_insertRow, doc_QStandardItem_insertRow);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_insertRows, "QStandardItem.insertRows(int, int)\n"
    "QStandardItem.insertRows(int, list-of-QStandardItem)");

extern "C" {static PyObject *meth_QStandardItem_insertRows(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_insertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1))
        {
            sipCpp->insertRows(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QList<QStandardItem*>* a1;
        int a1State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ3", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, sipType_QList_0101QStandardItem,&a1, &a1State))
        {
            sipCpp->insertRows(a0,*a1);
            sipReleaseType(const_cast<QList<QStandardItem*> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_insertRows, doc_QStandardItem_insertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_insertColumn, "QStandardItem.insertColumn(int, list-of-QStandardItem)");

extern "C" {static PyObject *meth_QStandardItem_insertColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_insertColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QList<QStandardItem*>* a1;
        int a1State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ3", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, sipType_QList_0101QStandardItem,&a1, &a1State))
        {
            sipCpp->insertColumn(a0,*a1);
            sipReleaseType(const_cast<QList<QStandardItem*> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_insertColumn, doc_QStandardItem_insertColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_insertColumns, "QStandardItem.insertColumns(int, int)");

extern "C" {static PyObject *meth_QStandardItem_insertColumns(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_insertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1))
        {
            sipCpp->insertColumns(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_insertColumns, doc_QStandardItem_insertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_removeRow, "QStandardItem.removeRow(int)");

extern "C" {static PyObject *meth_QStandardItem_removeRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_removeRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->removeRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_removeRow, doc_QStandardItem_removeRow);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_removeColumn, "QStandardItem.removeColumn(int)");

extern "C" {static PyObject *meth_QStandardItem_removeColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_removeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            sipCpp->removeColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_removeColumn, doc_QStandardItem_removeColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_removeRows, "QStandardItem.removeRows(int, int)");

extern "C" {static PyObject *meth_QStandardItem_removeRows(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_removeRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1))
        {
            sipCpp->removeRows(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_removeRows, doc_QStandardItem_removeRows);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_removeColumns, "QStandardItem.removeColumns(int, int)");

extern "C" {static PyObject *meth_QStandardItem_removeColumns(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_removeColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1))
        {
            sipCpp->removeColumns(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_removeColumns, doc_QStandardItem_removeColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_takeChild, "QStandardItem.takeChild(int, int column=0) -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItem_takeChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_takeChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = 0;
        QStandardItem *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, &a1))
        {
            QStandardItem*sipRes;

            sipRes = sipCpp->takeChild(a0,a1);

            return sipConvertFromType(sipRes,sipType_QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_takeChild, doc_QStandardItem_takeChild);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_takeRow, "QStandardItem.takeRow(int) -> list-of-QStandardItem");

extern "C" {static PyObject *meth_QStandardItem_takeRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_takeRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            QList<QStandardItem*>*sipRes;

            sipRes = new QList<QStandardItem*>(sipCpp->takeRow(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_takeRow, doc_QStandardItem_takeRow);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_takeColumn, "QStandardItem.takeColumn(int) -> list-of-QStandardItem");

extern "C" {static PyObject *meth_QStandardItem_takeColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_takeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QStandardItem, &sipCpp, &a0))
        {
            QList<QStandardItem*>*sipRes;

            sipRes = new QList<QStandardItem*>(sipCpp->takeColumn(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_takeColumn, doc_QStandardItem_takeColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_sortChildren, "QStandardItem.sortChildren(int, Qt.SortOrder order=Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QStandardItem_sortChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_sortChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::SortOrder a1 = Qt::AscendingOrder;
        QStandardItem *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QStandardItem, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            sipCpp->sortChildren(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_sortChildren, doc_QStandardItem_sortChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_clone, "QStandardItem.clone() -> QStandardItem");

extern "C" {static PyObject *meth_QStandardItem_clone(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            QStandardItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QStandardItem::clone() : sipCpp->clone());

            return sipConvertFromNewType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_clone, doc_QStandardItem_clone);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_type, "QStandardItem.type() -> int");

extern "C" {static PyObject *meth_QStandardItem_type(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QStandardItem::type() : sipCpp->type());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_type, doc_QStandardItem_type);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_read, "QStandardItem.read(QDataStream)");

extern "C" {static PyObject *meth_QStandardItem_read(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream* a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QDataStream, &a0))
        {
            (sipSelfWasArg ? sipCpp->QStandardItem::read(*a0) : sipCpp->read(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_read, doc_QStandardItem_read);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_write, "QStandardItem.write(QDataStream)");

extern "C" {static PyObject *meth_QStandardItem_write(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream* a0;
        const QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QDataStream, &a0))
        {
            (sipSelfWasArg ? sipCpp->QStandardItem::write(*a0) : sipCpp->write(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_write, doc_QStandardItem_write);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setText, "QStandardItem.setText(str)");

extern "C" {static PyObject *meth_QStandardItem_setText(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setText, doc_QStandardItem_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setIcon, "QStandardItem.setIcon(QIcon)");

extern "C" {static PyObject *meth_QStandardItem_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon* a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setIcon, doc_QStandardItem_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setToolTip, "QStandardItem.setToolTip(str)");

extern "C" {static PyObject *meth_QStandardItem_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setToolTip(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setToolTip, doc_QStandardItem_setToolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setStatusTip, "QStandardItem.setStatusTip(str)");

extern "C" {static PyObject *meth_QStandardItem_setStatusTip(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setStatusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setStatusTip(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setStatusTip, doc_QStandardItem_setStatusTip);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setWhatsThis, "QStandardItem.setWhatsThis(str)");

extern "C" {static PyObject *meth_QStandardItem_setWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWhatsThis(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setWhatsThis, doc_QStandardItem_setWhatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setSizeHint, "QStandardItem.setSizeHint(QSize)");

extern "C" {static PyObject *meth_QStandardItem_setSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setSizeHint(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setSizeHint, doc_QStandardItem_setSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setFont, "QStandardItem.setFont(QFont)");

extern "C" {static PyObject *meth_QStandardItem_setFont(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setFont, doc_QStandardItem_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setTextAlignment, "QStandardItem.setTextAlignment(Qt.Alignment)");

extern "C" {static PyObject *meth_QStandardItem_setTextAlignment(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setTextAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment* a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setTextAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setTextAlignment, doc_QStandardItem_setTextAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setBackground, "QStandardItem.setBackground(QBrush)");

extern "C" {static PyObject *meth_QStandardItem_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBackground(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setBackground, doc_QStandardItem_setBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setForeground, "QStandardItem.setForeground(QBrush)");

extern "C" {static PyObject *meth_QStandardItem_setForeground(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setForeground(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setForeground, doc_QStandardItem_setForeground);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setCheckState, "QStandardItem.setCheckState(Qt.CheckState)");

extern "C" {static PyObject *meth_QStandardItem_setCheckState(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setCheckState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::CheckState a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_Qt_CheckState, &a0))
        {
            sipCpp->setCheckState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setCheckState, doc_QStandardItem_setCheckState);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setAccessibleText, "QStandardItem.setAccessibleText(str)");

extern "C" {static PyObject *meth_QStandardItem_setAccessibleText(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setAccessibleText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setAccessibleText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setAccessibleText, doc_QStandardItem_setAccessibleText);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_setAccessibleDescription, "QStandardItem.setAccessibleDescription(str)");

extern "C" {static PyObject *meth_QStandardItem_setAccessibleDescription(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setAccessibleDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setAccessibleDescription(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_setAccessibleDescription, doc_QStandardItem_setAccessibleDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_appendRow, "QStandardItem.appendRow(list-of-QStandardItem)\n"
    "QStandardItem.appendRow(QStandardItem)");

extern "C" {static PyObject *meth_QStandardItem_appendRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_appendRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QStandardItem*>* a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QList_0101QStandardItem,&a0, &a0State))
        {
            sipCpp->appendRow(*a0);
            sipReleaseType(const_cast<QList<QStandardItem*> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QStandardItem* a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QStandardItem, &a0))
        {
            sipCpp->appendRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_appendRow, doc_QStandardItem_appendRow);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_appendColumn, "QStandardItem.appendColumn(list-of-QStandardItem)");

extern "C" {static PyObject *meth_QStandardItem_appendColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_appendColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QStandardItem*>* a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QList_0101QStandardItem,&a0, &a0State))
        {
            sipCpp->appendColumn(*a0);
            sipReleaseType(const_cast<QList<QStandardItem*> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_appendColumn, doc_QStandardItem_appendColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_appendRows, "QStandardItem.appendRows(list-of-QStandardItem)");

extern "C" {static PyObject *meth_QStandardItem_appendRows(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_appendRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QStandardItem*>* a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QStandardItem, &sipCpp, sipType_QList_0101QStandardItem,&a0, &a0State))
        {
            sipCpp->appendRows(*a0);
            sipReleaseType(const_cast<QList<QStandardItem*> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_appendRows, doc_QStandardItem_appendRows);

    return NULL;
}


PyDoc_STRVAR(doc_QStandardItem_emitDataChanged, "QStandardItem.emitDataChanged()");

extern "C" {static PyObject *meth_QStandardItem_emitDataChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_emitDataChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQStandardItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QStandardItem, &sipCpp))
        {
            sipCpp->sipProtect_emitDataChanged();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStandardItem, sipName_emitDataChanged, doc_QStandardItem_emitDataChanged);

    return NULL;
}


extern "C" {static PyObject *slot_QStandardItem___ge__(PyObject *,PyObject *);}
static PyObject *slot_QStandardItem___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QStandardItem *sipCpp = reinterpret_cast<QStandardItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardItem));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QStandardItem* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QStandardItem, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp->QStandardItem::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ge_slot,sipType_QStandardItem,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QStandardItem___lt__(PyObject *,PyObject *);}
static PyObject *slot_QStandardItem___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QStandardItem *sipCpp = reinterpret_cast<QStandardItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardItem));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QStandardItem* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QStandardItem, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QStandardItem::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,lt_slot,sipType_QStandardItem,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QStandardItem(void *, const sipTypeDef *);}
static void *cast_QStandardItem(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QStandardItem)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStandardItem(void *, int);}
static void release_QStandardItem(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQStandardItem *>(sipCppV);
    else
        delete reinterpret_cast<QStandardItem *>(sipCppV);
}


extern "C" {static void dealloc_QStandardItem(sipSimpleWrapper *);}
static void dealloc_QStandardItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQStandardItem *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QStandardItem(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QStandardItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QStandardItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQStandardItem *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQStandardItem();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new sipQStandardItem(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QIcon* a0;
        const QString* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J1", sipType_QIcon, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp = new sipQStandardItem(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1 = 1;

        static const char *sipKwdList[] = {
            NULL,
            sipName_columns,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "i|i", &a0, &a1))
        {
            sipCpp = new sipQStandardItem(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QStandardItem* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QStandardItem, &a0))
        {
            sipCpp = new sipQStandardItem(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QStandardItem[] = {
    {(void *)slot_QStandardItem___ge__, ge_slot},
    {(void *)slot_QStandardItem___lt__, lt_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QStandardItem[] = {
    {SIP_MLNAME_CAST(sipName_accessibleDescription), meth_QStandardItem_accessibleDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_accessibleDescription)},
    {SIP_MLNAME_CAST(sipName_accessibleText), meth_QStandardItem_accessibleText, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_accessibleText)},
    {SIP_MLNAME_CAST(sipName_appendColumn), meth_QStandardItem_appendColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_appendColumn)},
    {SIP_MLNAME_CAST(sipName_appendRow), meth_QStandardItem_appendRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_appendRow)},
    {SIP_MLNAME_CAST(sipName_appendRows), meth_QStandardItem_appendRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_appendRows)},
    {SIP_MLNAME_CAST(sipName_background), meth_QStandardItem_background, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_background)},
    {SIP_MLNAME_CAST(sipName_checkState), meth_QStandardItem_checkState, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_checkState)},
    {SIP_MLNAME_CAST(sipName_child), (PyCFunction)meth_QStandardItem_child, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItem_child)},
    {SIP_MLNAME_CAST(sipName_clone), meth_QStandardItem_clone, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_clone)},
    {SIP_MLNAME_CAST(sipName_column), meth_QStandardItem_column, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_column)},
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QStandardItem_columnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_columnCount)},
    {SIP_MLNAME_CAST(sipName_data), (PyCFunction)meth_QStandardItem_data, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItem_data)},
    {SIP_MLNAME_CAST(sipName_emitDataChanged), (PyCFunction)meth_QStandardItem_emitDataChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItem_emitDataChanged)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QStandardItem_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_flags)},
    {SIP_MLNAME_CAST(sipName_font), meth_QStandardItem_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_font)},
    {SIP_MLNAME_CAST(sipName_foreground), meth_QStandardItem_foreground, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_foreground)},
    {SIP_MLNAME_CAST(sipName_hasChildren), meth_QStandardItem_hasChildren, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_hasChildren)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QStandardItem_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_icon)},
    {SIP_MLNAME_CAST(sipName_index), meth_QStandardItem_index, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_index)},
    {SIP_MLNAME_CAST(sipName_insertColumn), meth_QStandardItem_insertColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_insertColumn)},
    {SIP_MLNAME_CAST(sipName_insertColumns), meth_QStandardItem_insertColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_insertColumns)},
    {SIP_MLNAME_CAST(sipName_insertRow), meth_QStandardItem_insertRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_insertRow)},
    {SIP_MLNAME_CAST(sipName_insertRows), meth_QStandardItem_insertRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_insertRows)},
    {SIP_MLNAME_CAST(sipName_isCheckable), meth_QStandardItem_isCheckable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isCheckable)},
    {SIP_MLNAME_CAST(sipName_isDragEnabled), meth_QStandardItem_isDragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isDragEnabled)},
    {SIP_MLNAME_CAST(sipName_isDropEnabled), meth_QStandardItem_isDropEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isDropEnabled)},
    {SIP_MLNAME_CAST(sipName_isEditable), meth_QStandardItem_isEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isEditable)},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QStandardItem_isEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isEnabled)},
    {SIP_MLNAME_CAST(sipName_isSelectable), meth_QStandardItem_isSelectable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isSelectable)},
    {SIP_MLNAME_CAST(sipName_isTristate), meth_QStandardItem_isTristate, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_isTristate)},
    {SIP_MLNAME_CAST(sipName_model), meth_QStandardItem_model, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_model)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QStandardItem_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_parent)},
    {SIP_MLNAME_CAST(sipName_read), meth_QStandardItem_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_read)},
    {SIP_MLNAME_CAST(sipName_removeColumn), meth_QStandardItem_removeColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_removeColumn)},
    {SIP_MLNAME_CAST(sipName_removeColumns), meth_QStandardItem_removeColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_removeColumns)},
    {SIP_MLNAME_CAST(sipName_removeRow), meth_QStandardItem_removeRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_removeRow)},
    {SIP_MLNAME_CAST(sipName_removeRows), meth_QStandardItem_removeRows, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_removeRows)},
    {SIP_MLNAME_CAST(sipName_row), meth_QStandardItem_row, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_row)},
    {SIP_MLNAME_CAST(sipName_rowCount), meth_QStandardItem_rowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_rowCount)},
    {SIP_MLNAME_CAST(sipName_setAccessibleDescription), meth_QStandardItem_setAccessibleDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setAccessibleDescription)},
    {SIP_MLNAME_CAST(sipName_setAccessibleText), meth_QStandardItem_setAccessibleText, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setAccessibleText)},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QStandardItem_setBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setBackground)},
    {SIP_MLNAME_CAST(sipName_setCheckState), meth_QStandardItem_setCheckState, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setCheckState)},
    {SIP_MLNAME_CAST(sipName_setCheckable), meth_QStandardItem_setCheckable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setCheckable)},
    {SIP_MLNAME_CAST(sipName_setChild), meth_QStandardItem_setChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setChild)},
    {SIP_MLNAME_CAST(sipName_setColumnCount), meth_QStandardItem_setColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setColumnCount)},
    {SIP_MLNAME_CAST(sipName_setData), (PyCFunction)meth_QStandardItem_setData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItem_setData)},
    {SIP_MLNAME_CAST(sipName_setDragEnabled), meth_QStandardItem_setDragEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setDragEnabled)},
    {SIP_MLNAME_CAST(sipName_setDropEnabled), meth_QStandardItem_setDropEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setDropEnabled)},
    {SIP_MLNAME_CAST(sipName_setEditable), meth_QStandardItem_setEditable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setEditable)},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QStandardItem_setEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setEnabled)},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QStandardItem_setFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setFlags)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QStandardItem_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setFont)},
    {SIP_MLNAME_CAST(sipName_setForeground), meth_QStandardItem_setForeground, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setForeground)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QStandardItem_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setIcon)},
    {SIP_MLNAME_CAST(sipName_setRowCount), meth_QStandardItem_setRowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setRowCount)},
    {SIP_MLNAME_CAST(sipName_setSelectable), meth_QStandardItem_setSelectable, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setSelectable)},
    {SIP_MLNAME_CAST(sipName_setSizeHint), meth_QStandardItem_setSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setSizeHint)},
    {SIP_MLNAME_CAST(sipName_setStatusTip), meth_QStandardItem_setStatusTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setStatusTip)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QStandardItem_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setText)},
    {SIP_MLNAME_CAST(sipName_setTextAlignment), meth_QStandardItem_setTextAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setTextAlignment)},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QStandardItem_setToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setToolTip)},
    {SIP_MLNAME_CAST(sipName_setTristate), meth_QStandardItem_setTristate, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setTristate)},
    {SIP_MLNAME_CAST(sipName_setWhatsThis), meth_QStandardItem_setWhatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_setWhatsThis)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QStandardItem_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_sizeHint)},
    {SIP_MLNAME_CAST(sipName_sortChildren), (PyCFunction)meth_QStandardItem_sortChildren, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItem_sortChildren)},
    {SIP_MLNAME_CAST(sipName_statusTip), meth_QStandardItem_statusTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_statusTip)},
    {SIP_MLNAME_CAST(sipName_takeChild), (PyCFunction)meth_QStandardItem_takeChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QStandardItem_takeChild)},
    {SIP_MLNAME_CAST(sipName_takeColumn), meth_QStandardItem_takeColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_takeColumn)},
    {SIP_MLNAME_CAST(sipName_takeRow), meth_QStandardItem_takeRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_takeRow)},
    {SIP_MLNAME_CAST(sipName_text), meth_QStandardItem_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_text)},
    {SIP_MLNAME_CAST(sipName_textAlignment), meth_QStandardItem_textAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_textAlignment)},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QStandardItem_toolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_toolTip)},
    {SIP_MLNAME_CAST(sipName_type), meth_QStandardItem_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_type)},
    {SIP_MLNAME_CAST(sipName_whatsThis), meth_QStandardItem_whatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_whatsThis)},
    {SIP_MLNAME_CAST(sipName_write), meth_QStandardItem_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QStandardItem_write)}
};

static sipEnumMemberDef enummembers_QStandardItem[] = {
    {sipName_Type, static_cast<int>(QStandardItem::Type), 250},
    {sipName_UserType, static_cast<int>(QStandardItem::UserType), 250},
};

PyDoc_STRVAR(doc_QStandardItem, "\1QStandardItem()\n"
    "QStandardItem(str)\n"
    "QStandardItem(QIcon, str)\n"
    "QStandardItem(int, int columns=1)\n"
    "QStandardItem(QStandardItem)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QStandardItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QStandardItem,
        {0}
    },
    {
        sipNameNr_QStandardItem,
        {0, 0, 1},
        76, methods_QStandardItem,
        2, enummembers_QStandardItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QStandardItem,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    -1,
    0,
    slots_QStandardItem,
    init_type_QStandardItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStandardItem,
    0,
    0,
    0,
    release_QStandardItem,
    cast_QStandardItem,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
