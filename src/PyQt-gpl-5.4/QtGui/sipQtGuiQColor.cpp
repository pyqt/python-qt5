/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQColor.cpp"

#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQColor.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQColor.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQColor.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQColor.cpp"


PyDoc_STRVAR(doc_QColor_name, "QColor.name() -> str\n"
    "QColor.name(QColor.NameFormat) -> str");

extern "C" {static PyObject *meth_QColor_name(PyObject *, PyObject *);}
static PyObject *meth_QColor_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        QColor::NameFormat a0;
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QColor, &sipCpp, sipType_QColor_NameFormat, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_name, doc_QColor_name);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setNamedColor, "QColor.setNamedColor(str)");

extern "C" {static PyObject *meth_QColor_setNamedColor(PyObject *, PyObject *);}
static PyObject *meth_QColor_setNamedColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QColor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNamedColor(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setNamedColor, doc_QColor_setNamedColor);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_colorNames, "QColor.colorNames() -> list-of-str");

extern "C" {static PyObject *meth_QColor_colorNames(PyObject *, PyObject *);}
static PyObject *meth_QColor_colorNames(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList*sipRes;

            sipRes = new QStringList(QColor::colorNames());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_colorNames, doc_QColor_colorNames);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_spec, "QColor.spec() -> QColor.Spec");

extern "C" {static PyObject *meth_QColor_spec(PyObject *, PyObject *);}
static PyObject *meth_QColor_spec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            QColor::Spec sipRes;

            sipRes = sipCpp->spec();

            return sipConvertFromEnum(sipRes,sipType_QColor_Spec);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_spec, doc_QColor_spec);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_alpha, "QColor.alpha() -> int");

extern "C" {static PyObject *meth_QColor_alpha(PyObject *, PyObject *);}
static PyObject *meth_QColor_alpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->alpha();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_alpha, doc_QColor_alpha);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setAlpha, "QColor.setAlpha(int)");

extern "C" {static PyObject *meth_QColor_setAlpha(PyObject *, PyObject *);}
static PyObject *meth_QColor_setAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setAlpha(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setAlpha, doc_QColor_setAlpha);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_alphaF, "QColor.alphaF() -> float");

extern "C" {static PyObject *meth_QColor_alphaF(PyObject *, PyObject *);}
static PyObject *meth_QColor_alphaF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->alphaF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_alphaF, doc_QColor_alphaF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setAlphaF, "QColor.setAlphaF(float)");

extern "C" {static PyObject *meth_QColor_setAlphaF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setAlphaF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setAlphaF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setAlphaF, doc_QColor_setAlphaF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_red, "QColor.red() -> int");

extern "C" {static PyObject *meth_QColor_red(PyObject *, PyObject *);}
static PyObject *meth_QColor_red(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->red();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_red, doc_QColor_red);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_green, "QColor.green() -> int");

extern "C" {static PyObject *meth_QColor_green(PyObject *, PyObject *);}
static PyObject *meth_QColor_green(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->green();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_green, doc_QColor_green);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_blue, "QColor.blue() -> int");

extern "C" {static PyObject *meth_QColor_blue(PyObject *, PyObject *);}
static PyObject *meth_QColor_blue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blue();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_blue, doc_QColor_blue);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setRed, "QColor.setRed(int)");

extern "C" {static PyObject *meth_QColor_setRed(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setRed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRed, doc_QColor_setRed);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setGreen, "QColor.setGreen(int)");

extern "C" {static PyObject *meth_QColor_setGreen(PyObject *, PyObject *);}
static PyObject *meth_QColor_setGreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setGreen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setGreen, doc_QColor_setGreen);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setBlue, "QColor.setBlue(int)");

extern "C" {static PyObject *meth_QColor_setBlue(PyObject *, PyObject *);}
static PyObject *meth_QColor_setBlue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setBlue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setBlue, doc_QColor_setBlue);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_redF, "QColor.redF() -> float");

extern "C" {static PyObject *meth_QColor_redF(PyObject *, PyObject *);}
static PyObject *meth_QColor_redF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->redF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_redF, doc_QColor_redF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_greenF, "QColor.greenF() -> float");

extern "C" {static PyObject *meth_QColor_greenF(PyObject *, PyObject *);}
static PyObject *meth_QColor_greenF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->greenF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_greenF, doc_QColor_greenF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_blueF, "QColor.blueF() -> float");

extern "C" {static PyObject *meth_QColor_blueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_blueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->blueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_blueF, doc_QColor_blueF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setRedF, "QColor.setRedF(float)");

extern "C" {static PyObject *meth_QColor_setRedF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRedF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setRedF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRedF, doc_QColor_setRedF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setGreenF, "QColor.setGreenF(float)");

extern "C" {static PyObject *meth_QColor_setGreenF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setGreenF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setGreenF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setGreenF, doc_QColor_setGreenF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setBlueF, "QColor.setBlueF(float)");

extern "C" {static PyObject *meth_QColor_setBlueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setBlueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setBlueF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setBlueF, doc_QColor_setBlueF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_getRgb, "QColor.getRgb() -> (int, int, int, int)");

extern "C" {static PyObject *meth_QColor_getRgb(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getRgb(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getRgb(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getRgb, doc_QColor_getRgb);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setRgb, "QColor.setRgb(int, int, int, int alpha=255)\n"
    "QColor.setRgb(int)");

extern "C" {static PyObject *meth_QColor_setRgb(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgb(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;
        QColor *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii|i", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRgb(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QRgb a0;
        QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bu", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setRgb(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRgb, doc_QColor_setRgb);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_getRgbF, "QColor.getRgbF() -> (float, float, float, float)");

extern "C" {static PyObject *meth_QColor_getRgbF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getRgbF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        const QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getRgbF(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getRgbF, doc_QColor_getRgbF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setRgbF, "QColor.setRgbF(float, float, float, float alpha=1)");

extern "C" {static PyObject *meth_QColor_setRgbF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgbF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3 = 1;
        QColor *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bddd|d", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setRgbF(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRgbF, doc_QColor_setRgbF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_rgba, "QColor.rgba() -> int");

extern "C" {static PyObject *meth_QColor_rgba(PyObject *, PyObject *);}
static PyObject *meth_QColor_rgba(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            QRgb sipRes;

            sipRes = sipCpp->rgba();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_rgba, doc_QColor_rgba);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setRgba, "QColor.setRgba(int)");

extern "C" {static PyObject *meth_QColor_setRgba(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgba(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRgb a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            sipCpp->setRgba(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setRgba, doc_QColor_setRgba);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_rgb, "QColor.rgb() -> int");

extern "C" {static PyObject *meth_QColor_rgb(PyObject *, PyObject *);}
static PyObject *meth_QColor_rgb(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            QRgb sipRes;

            sipRes = sipCpp->rgb();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_rgb, doc_QColor_rgb);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_hue, "QColor.hue() -> int");

extern "C" {static PyObject *meth_QColor_hue(PyObject *, PyObject *);}
static PyObject *meth_QColor_hue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hue();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hue, doc_QColor_hue);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_saturation, "QColor.saturation() -> int");

extern "C" {static PyObject *meth_QColor_saturation(PyObject *, PyObject *);}
static PyObject *meth_QColor_saturation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->saturation();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_saturation, doc_QColor_saturation);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_value, "QColor.value() -> int");

extern "C" {static PyObject *meth_QColor_value(PyObject *, PyObject *);}
static PyObject *meth_QColor_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->value();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_value, doc_QColor_value);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_hueF, "QColor.hueF() -> float");

extern "C" {static PyObject *meth_QColor_hueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->hueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hueF, doc_QColor_hueF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_saturationF, "QColor.saturationF() -> float");

extern "C" {static PyObject *meth_QColor_saturationF(PyObject *, PyObject *);}
static PyObject *meth_QColor_saturationF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->saturationF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_saturationF, doc_QColor_saturationF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_valueF, "QColor.valueF() -> float");

extern "C" {static PyObject *meth_QColor_valueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_valueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->valueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_valueF, doc_QColor_valueF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_getHsv, "QColor.getHsv() -> (int, int, int, int)");

extern "C" {static PyObject *meth_QColor_getHsv(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getHsv(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getHsv(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getHsv, doc_QColor_getHsv);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setHsv, "QColor.setHsv(int, int, int, int alpha=255)");

extern "C" {static PyObject *meth_QColor_setHsv(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setHsv(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;
        QColor *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii|i", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setHsv(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setHsv, doc_QColor_setHsv);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_getHsvF, "QColor.getHsvF() -> (float, float, float, float)");

extern "C" {static PyObject *meth_QColor_getHsvF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getHsvF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        const QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getHsvF(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getHsvF, doc_QColor_getHsvF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setHsvF, "QColor.setHsvF(float, float, float, float alpha=1)");

extern "C" {static PyObject *meth_QColor_setHsvF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setHsvF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3 = 1;
        QColor *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bddd|d", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setHsvF(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setHsvF, doc_QColor_setHsvF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_cyan, "QColor.cyan() -> int");

extern "C" {static PyObject *meth_QColor_cyan(PyObject *, PyObject *);}
static PyObject *meth_QColor_cyan(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cyan();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_cyan, doc_QColor_cyan);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_magenta, "QColor.magenta() -> int");

extern "C" {static PyObject *meth_QColor_magenta(PyObject *, PyObject *);}
static PyObject *meth_QColor_magenta(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->magenta();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_magenta, doc_QColor_magenta);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_yellow, "QColor.yellow() -> int");

extern "C" {static PyObject *meth_QColor_yellow(PyObject *, PyObject *);}
static PyObject *meth_QColor_yellow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->yellow();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_yellow, doc_QColor_yellow);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_black, "QColor.black() -> int");

extern "C" {static PyObject *meth_QColor_black(PyObject *, PyObject *);}
static PyObject *meth_QColor_black(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->black();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_black, doc_QColor_black);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_cyanF, "QColor.cyanF() -> float");

extern "C" {static PyObject *meth_QColor_cyanF(PyObject *, PyObject *);}
static PyObject *meth_QColor_cyanF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->cyanF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_cyanF, doc_QColor_cyanF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_magentaF, "QColor.magentaF() -> float");

extern "C" {static PyObject *meth_QColor_magentaF(PyObject *, PyObject *);}
static PyObject *meth_QColor_magentaF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->magentaF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_magentaF, doc_QColor_magentaF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_yellowF, "QColor.yellowF() -> float");

extern "C" {static PyObject *meth_QColor_yellowF(PyObject *, PyObject *);}
static PyObject *meth_QColor_yellowF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->yellowF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_yellowF, doc_QColor_yellowF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_blackF, "QColor.blackF() -> float");

extern "C" {static PyObject *meth_QColor_blackF(PyObject *, PyObject *);}
static PyObject *meth_QColor_blackF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->blackF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_blackF, doc_QColor_blackF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_getCmyk, "QColor.getCmyk() -> (int, int, int, int, int)");

extern "C" {static PyObject *meth_QColor_getCmyk(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getCmyk(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getCmyk(&a0,&a1,&a2,&a3,&a4);

            return sipBuildResult(0,"(iiiii)",a0,a1,a2,a3,a4);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getCmyk, doc_QColor_getCmyk);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setCmyk, "QColor.setCmyk(int, int, int, int, int alpha=255)");

extern "C" {static PyObject *meth_QColor_setCmyk(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setCmyk(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4 = 255;
        QColor *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii|i", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setCmyk(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setCmyk, doc_QColor_setCmyk);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_getCmykF, "QColor.getCmykF() -> (float, float, float, float, float)");

extern "C" {static PyObject *meth_QColor_getCmykF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getCmykF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getCmykF(&a0,&a1,&a2,&a3,&a4);

            return sipBuildResult(0,"(ddddd)",a0,a1,a2,a3,a4);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getCmykF, doc_QColor_getCmykF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setCmykF, "QColor.setCmykF(float, float, float, float, float alpha=1)");

extern "C" {static PyObject *meth_QColor_setCmykF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setCmykF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4 = 1;
        QColor *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdddd|d", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->setCmykF(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setCmykF, doc_QColor_setCmykF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_toRgb, "QColor.toRgb() -> QColor");

extern "C" {static PyObject *meth_QColor_toRgb(PyObject *, PyObject *);}
static PyObject *meth_QColor_toRgb(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->toRgb());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_toRgb, doc_QColor_toRgb);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_toHsv, "QColor.toHsv() -> QColor");

extern "C" {static PyObject *meth_QColor_toHsv(PyObject *, PyObject *);}
static PyObject *meth_QColor_toHsv(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->toHsv());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_toHsv, doc_QColor_toHsv);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_toCmyk, "QColor.toCmyk() -> QColor");

extern "C" {static PyObject *meth_QColor_toCmyk(PyObject *, PyObject *);}
static PyObject *meth_QColor_toCmyk(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->toCmyk());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_toCmyk, doc_QColor_toCmyk);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_convertTo, "QColor.convertTo(QColor.Spec) -> QColor");

extern "C" {static PyObject *meth_QColor_convertTo(PyObject *, PyObject *);}
static PyObject *meth_QColor_convertTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QColor::Spec a0;
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QColor, &sipCpp, sipType_QColor_Spec, &a0))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->convertTo(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_convertTo, doc_QColor_convertTo);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_fromRgb, "QColor.fromRgb(int) -> QColor\n"
    "QColor.fromRgb(int, int, int, int alpha=255) -> QColor");

extern "C" {static PyObject *meth_QColor_fromRgb(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgb(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QRgb a0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "u", &a0))
        {
            QColor*sipRes;

            sipRes = new QColor(QColor::fromRgb(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "iii|i", &a0, &a1, &a2, &a3))
        {
            QColor*sipRes;

            sipRes = new QColor(QColor::fromRgb(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromRgb, doc_QColor_fromRgb);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_fromRgba, "QColor.fromRgba(int) -> QColor");

extern "C" {static PyObject *meth_QColor_fromRgba(PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgba(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRgb a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "u", &a0))
        {
            QColor*sipRes;

            sipRes = new QColor(QColor::fromRgba(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromRgba, doc_QColor_fromRgba);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_fromRgbF, "QColor.fromRgbF(float, float, float, float alpha=1) -> QColor");

extern "C" {static PyObject *meth_QColor_fromRgbF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgbF(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3 = 1;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "ddd|d", &a0, &a1, &a2, &a3))
        {
            QColor*sipRes;

            sipRes = new QColor(QColor::fromRgbF(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromRgbF, doc_QColor_fromRgbF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_fromHsv, "QColor.fromHsv(int, int, int, int alpha=255) -> QColor");

extern "C" {static PyObject *meth_QColor_fromHsv(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHsv(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "iii|i", &a0, &a1, &a2, &a3))
        {
            QColor*sipRes;

            sipRes = new QColor(QColor::fromHsv(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromHsv, doc_QColor_fromHsv);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_fromHsvF, "QColor.fromHsvF(float, float, float, float alpha=1) -> QColor");

extern "C" {static PyObject *meth_QColor_fromHsvF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHsvF(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3 = 1;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "ddd|d", &a0, &a1, &a2, &a3))
        {
            QColor*sipRes;

            sipRes = new QColor(QColor::fromHsvF(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromHsvF, doc_QColor_fromHsvF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_fromCmyk, "QColor.fromCmyk(int, int, int, int, int alpha=255) -> QColor");

extern "C" {static PyObject *meth_QColor_fromCmyk(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromCmyk(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4 = 255;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "iiii|i", &a0, &a1, &a2, &a3, &a4))
        {
            QColor*sipRes;

            sipRes = new QColor(QColor::fromCmyk(a0,a1,a2,a3,a4));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromCmyk, doc_QColor_fromCmyk);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_fromCmykF, "QColor.fromCmykF(float, float, float, float, float alpha=1) -> QColor");

extern "C" {static PyObject *meth_QColor_fromCmykF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromCmykF(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4 = 1;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "dddd|d", &a0, &a1, &a2, &a3, &a4))
        {
            QColor*sipRes;

            sipRes = new QColor(QColor::fromCmykF(a0,a1,a2,a3,a4));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromCmykF, doc_QColor_fromCmykF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_isValid, "QColor.isValid() -> bool");

extern "C" {static PyObject *meth_QColor_isValid(PyObject *, PyObject *);}
static PyObject *meth_QColor_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_isValid, doc_QColor_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_lighter, "QColor.lighter(int factor=150) -> QColor");

extern "C" {static PyObject *meth_QColor_lighter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_lighter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 150;
        const QColor *sipCpp;

        static const char *sipKwdList[] = {
            sipName_factor,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->lighter(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_lighter, doc_QColor_lighter);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_darker, "QColor.darker(int factor=200) -> QColor");

extern "C" {static PyObject *meth_QColor_darker(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_darker(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 200;
        const QColor *sipCpp;

        static const char *sipKwdList[] = {
            sipName_factor,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QColor, &sipCpp, &a0))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->darker(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_darker, doc_QColor_darker);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_hsvHue, "QColor.hsvHue() -> int");

extern "C" {static PyObject *meth_QColor_hsvHue(PyObject *, PyObject *);}
static PyObject *meth_QColor_hsvHue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hsvHue();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hsvHue, doc_QColor_hsvHue);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_hsvSaturation, "QColor.hsvSaturation() -> int");

extern "C" {static PyObject *meth_QColor_hsvSaturation(PyObject *, PyObject *);}
static PyObject *meth_QColor_hsvSaturation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hsvSaturation();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hsvSaturation, doc_QColor_hsvSaturation);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_hsvHueF, "QColor.hsvHueF() -> float");

extern "C" {static PyObject *meth_QColor_hsvHueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hsvHueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->hsvHueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hsvHueF, doc_QColor_hsvHueF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_hsvSaturationF, "QColor.hsvSaturationF() -> float");

extern "C" {static PyObject *meth_QColor_hsvSaturationF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hsvSaturationF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->hsvSaturationF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hsvSaturationF, doc_QColor_hsvSaturationF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_hslHue, "QColor.hslHue() -> int");

extern "C" {static PyObject *meth_QColor_hslHue(PyObject *, PyObject *);}
static PyObject *meth_QColor_hslHue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hslHue();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hslHue, doc_QColor_hslHue);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_hslSaturation, "QColor.hslSaturation() -> int");

extern "C" {static PyObject *meth_QColor_hslSaturation(PyObject *, PyObject *);}
static PyObject *meth_QColor_hslSaturation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->hslSaturation();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hslSaturation, doc_QColor_hslSaturation);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_lightness, "QColor.lightness() -> int");

extern "C" {static PyObject *meth_QColor_lightness(PyObject *, PyObject *);}
static PyObject *meth_QColor_lightness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lightness();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_lightness, doc_QColor_lightness);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_hslHueF, "QColor.hslHueF() -> float");

extern "C" {static PyObject *meth_QColor_hslHueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hslHueF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->hslHueF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hslHueF, doc_QColor_hslHueF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_hslSaturationF, "QColor.hslSaturationF() -> float");

extern "C" {static PyObject *meth_QColor_hslSaturationF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hslSaturationF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->hslSaturationF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_hslSaturationF, doc_QColor_hslSaturationF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_lightnessF, "QColor.lightnessF() -> float");

extern "C" {static PyObject *meth_QColor_lightnessF(PyObject *, PyObject *);}
static PyObject *meth_QColor_lightnessF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->lightnessF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_lightnessF, doc_QColor_lightnessF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_getHsl, "QColor.getHsl() -> (int, int, int, int)");

extern "C" {static PyObject *meth_QColor_getHsl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getHsl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getHsl(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getHsl, doc_QColor_getHsl);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setHsl, "QColor.setHsl(int, int, int, int alpha=255)");

extern "C" {static PyObject *meth_QColor_setHsl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setHsl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;
        QColor *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii|i", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setHsl(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setHsl, doc_QColor_setHsl);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_getHslF, "QColor.getHslF() -> (float, float, float, float)");

extern "C" {static PyObject *meth_QColor_getHslF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_getHslF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        const QColor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            sipCpp->getHslF(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_getHslF, doc_QColor_getHslF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_setHslF, "QColor.setHslF(float, float, float, float alpha=1)");

extern "C" {static PyObject *meth_QColor_setHslF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_setHslF(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3 = 1;
        QColor *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bddd|d", &sipSelf, sipType_QColor, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setHslF(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_setHslF, doc_QColor_setHslF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_toHsl, "QColor.toHsl() -> QColor");

extern "C" {static PyObject *meth_QColor_toHsl(PyObject *, PyObject *);}
static PyObject *meth_QColor_toHsl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QColor, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->toHsl());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_toHsl, doc_QColor_toHsl);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_fromHsl, "QColor.fromHsl(int, int, int, int alpha=255) -> QColor");

extern "C" {static PyObject *meth_QColor_fromHsl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHsl(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "iii|i", &a0, &a1, &a2, &a3))
        {
            QColor*sipRes;

            sipRes = new QColor(QColor::fromHsl(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromHsl, doc_QColor_fromHsl);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_fromHslF, "QColor.fromHslF(float, float, float, float alpha=1) -> QColor");

extern "C" {static PyObject *meth_QColor_fromHslF(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHslF(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3 = 1;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "ddd|d", &a0, &a1, &a2, &a3))
        {
            QColor*sipRes;

            sipRes = new QColor(QColor::fromHslF(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_fromHslF, doc_QColor_fromHslF);

    return NULL;
}


PyDoc_STRVAR(doc_QColor_isValidColor, "QColor.isValidColor(str) -> bool");

extern "C" {static PyObject *meth_QColor_isValidColor(PyObject *, PyObject *);}
static PyObject *meth_QColor_isValidColor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = QColor::isValidColor(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QColor, sipName_isValidColor, doc_QColor_isValidColor);

    return NULL;
}


extern "C" {static PyObject *slot_QColor___ne__(PyObject *,PyObject *);}
static PyObject *slot_QColor___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QColor *sipCpp = reinterpret_cast<QColor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QColor));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QColor, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->QColor::operator!=(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QColor,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QColor___eq__(PyObject *,PyObject *);}
static PyObject *slot_QColor___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QColor *sipCpp = reinterpret_cast<QColor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QColor));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QColor, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->QColor::operator==(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QColor,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QColor(void *, const sipTypeDef *);}
static void *cast_QColor(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QColor)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QColor(void *, int);}
static void release_QColor(void *sipCppV,int)
{
    delete reinterpret_cast<QColor *>(sipCppV);
}


extern "C" {static PyObject *pickle_QColor(void *);}
static PyObject *pickle_QColor(void *sipCppV)
{
    QColor *sipCpp = reinterpret_cast<QColor *>(sipCppV);
    PyObject *sipRes;

#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qcolor.sip"
    sipRes = Py_BuildValue((char *)"iiii", sipCpp->red(), sipCpp->green(), sipCpp->blue(), sipCpp->alpha());
#line 2569 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQColor.cpp"

    return sipRes;
}


extern "C" {static void assign_QColor(void *, SIP_SSIZE_T, const void *);}
static void assign_QColor(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QColor *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QColor *>(sipSrc);
}


extern "C" {static void *array_QColor(SIP_SSIZE_T);}
static void *array_QColor(SIP_SSIZE_T sipNrElem)
{
    return new QColor[sipNrElem];
}


extern "C" {static void *copy_QColor(const void *, SIP_SSIZE_T);}
static void *copy_QColor(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QColor(reinterpret_cast<const QColor *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QColor(sipSimpleWrapper *);}
static void dealloc_QColor(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QColor(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QColor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QColor(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QColor *sipCpp = 0;

    {
        Qt::GlobalColor a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "XE", sipType_Qt_GlobalColor, &a0))
        {
            sipCpp = new QColor(a0);

            return sipCpp;
        }
    }

    {
        QRgb a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "u", &a0))
        {
            sipCpp = new QColor(a0);

            return sipCpp;
        }
    }

    {
        const QVariant* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QVariant, &a0, &a0State))
        {
#line 73 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qcolor.sip"
        sipCpp = new QColor(a0->value<QColor>());
#line 2641 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQColor.cpp"
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QColor();

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_alpha,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iii|i", &a0, &a1, &a2, &a3))
        {
            sipCpp = new QColor(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new QColor(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QColor* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QColor, &a0, &a0State))
        {
            sipCpp = new QColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static int convertTo_QColor(PyObject *, void **, int *, PyObject *);}
static int convertTo_QColor(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QColor **sipCppPtr = reinterpret_cast<QColor **>(sipCppPtrV);

#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qcolor.sip"
// SIP doesn't support automatic type convertors so we explicitly allow a
// Qt::GlobalColor to be used whenever a QColor is expected.  Note that SIP
// must process QColor before QBrush so that the former's QVariant cast
// operator is applied before the latter's.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_GlobalColor)) ||
            sipCanConvertToType(sipPy, sipType_QColor, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_GlobalColor)))
{
    *sipCppPtr = new QColor((Qt::GlobalColor)SIPLong_AsLong(sipPy));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QColor *>(sipConvertToType(sipPy, sipType_QColor, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 2733 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQColor.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QColor[] = {
    {(void *)slot_QColor___ne__, ne_slot},
    {(void *)slot_QColor___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QColor[] = {
    {SIP_MLNAME_CAST(sipName_alpha), meth_QColor_alpha, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_alpha)},
    {SIP_MLNAME_CAST(sipName_alphaF), meth_QColor_alphaF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_alphaF)},
    {SIP_MLNAME_CAST(sipName_black), meth_QColor_black, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_black)},
    {SIP_MLNAME_CAST(sipName_blackF), meth_QColor_blackF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_blackF)},
    {SIP_MLNAME_CAST(sipName_blue), meth_QColor_blue, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_blue)},
    {SIP_MLNAME_CAST(sipName_blueF), meth_QColor_blueF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_blueF)},
    {SIP_MLNAME_CAST(sipName_colorNames), meth_QColor_colorNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_colorNames)},
    {SIP_MLNAME_CAST(sipName_convertTo), meth_QColor_convertTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_convertTo)},
    {SIP_MLNAME_CAST(sipName_cyan), meth_QColor_cyan, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_cyan)},
    {SIP_MLNAME_CAST(sipName_cyanF), meth_QColor_cyanF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_cyanF)},
    {SIP_MLNAME_CAST(sipName_darker), (PyCFunction)meth_QColor_darker, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_darker)},
    {SIP_MLNAME_CAST(sipName_fromCmyk), (PyCFunction)meth_QColor_fromCmyk, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromCmyk)},
    {SIP_MLNAME_CAST(sipName_fromCmykF), (PyCFunction)meth_QColor_fromCmykF, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromCmykF)},
    {SIP_MLNAME_CAST(sipName_fromHsl), (PyCFunction)meth_QColor_fromHsl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromHsl)},
    {SIP_MLNAME_CAST(sipName_fromHslF), (PyCFunction)meth_QColor_fromHslF, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromHslF)},
    {SIP_MLNAME_CAST(sipName_fromHsv), (PyCFunction)meth_QColor_fromHsv, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromHsv)},
    {SIP_MLNAME_CAST(sipName_fromHsvF), (PyCFunction)meth_QColor_fromHsvF, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromHsvF)},
    {SIP_MLNAME_CAST(sipName_fromRgb), (PyCFunction)meth_QColor_fromRgb, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromRgb)},
    {SIP_MLNAME_CAST(sipName_fromRgbF), (PyCFunction)meth_QColor_fromRgbF, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_fromRgbF)},
    {SIP_MLNAME_CAST(sipName_fromRgba), meth_QColor_fromRgba, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_fromRgba)},
    {SIP_MLNAME_CAST(sipName_getCmyk), (PyCFunction)meth_QColor_getCmyk, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getCmyk)},
    {SIP_MLNAME_CAST(sipName_getCmykF), (PyCFunction)meth_QColor_getCmykF, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getCmykF)},
    {SIP_MLNAME_CAST(sipName_getHsl), (PyCFunction)meth_QColor_getHsl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getHsl)},
    {SIP_MLNAME_CAST(sipName_getHslF), (PyCFunction)meth_QColor_getHslF, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getHslF)},
    {SIP_MLNAME_CAST(sipName_getHsv), (PyCFunction)meth_QColor_getHsv, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getHsv)},
    {SIP_MLNAME_CAST(sipName_getHsvF), (PyCFunction)meth_QColor_getHsvF, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getHsvF)},
    {SIP_MLNAME_CAST(sipName_getRgb), (PyCFunction)meth_QColor_getRgb, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getRgb)},
    {SIP_MLNAME_CAST(sipName_getRgbF), (PyCFunction)meth_QColor_getRgbF, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_getRgbF)},
    {SIP_MLNAME_CAST(sipName_green), meth_QColor_green, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_green)},
    {SIP_MLNAME_CAST(sipName_greenF), meth_QColor_greenF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_greenF)},
    {SIP_MLNAME_CAST(sipName_hslHue), meth_QColor_hslHue, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hslHue)},
    {SIP_MLNAME_CAST(sipName_hslHueF), meth_QColor_hslHueF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hslHueF)},
    {SIP_MLNAME_CAST(sipName_hslSaturation), meth_QColor_hslSaturation, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hslSaturation)},
    {SIP_MLNAME_CAST(sipName_hslSaturationF), meth_QColor_hslSaturationF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hslSaturationF)},
    {SIP_MLNAME_CAST(sipName_hsvHue), meth_QColor_hsvHue, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hsvHue)},
    {SIP_MLNAME_CAST(sipName_hsvHueF), meth_QColor_hsvHueF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hsvHueF)},
    {SIP_MLNAME_CAST(sipName_hsvSaturation), meth_QColor_hsvSaturation, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hsvSaturation)},
    {SIP_MLNAME_CAST(sipName_hsvSaturationF), meth_QColor_hsvSaturationF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hsvSaturationF)},
    {SIP_MLNAME_CAST(sipName_hue), meth_QColor_hue, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hue)},
    {SIP_MLNAME_CAST(sipName_hueF), meth_QColor_hueF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_hueF)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QColor_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_isValid)},
    {SIP_MLNAME_CAST(sipName_isValidColor), meth_QColor_isValidColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_isValidColor)},
    {SIP_MLNAME_CAST(sipName_lighter), (PyCFunction)meth_QColor_lighter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_lighter)},
    {SIP_MLNAME_CAST(sipName_lightness), meth_QColor_lightness, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_lightness)},
    {SIP_MLNAME_CAST(sipName_lightnessF), meth_QColor_lightnessF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_lightnessF)},
    {SIP_MLNAME_CAST(sipName_magenta), meth_QColor_magenta, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_magenta)},
    {SIP_MLNAME_CAST(sipName_magentaF), meth_QColor_magentaF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_magentaF)},
    {SIP_MLNAME_CAST(sipName_name), meth_QColor_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_name)},
    {SIP_MLNAME_CAST(sipName_red), meth_QColor_red, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_red)},
    {SIP_MLNAME_CAST(sipName_redF), meth_QColor_redF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_redF)},
    {SIP_MLNAME_CAST(sipName_rgb), meth_QColor_rgb, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_rgb)},
    {SIP_MLNAME_CAST(sipName_rgba), meth_QColor_rgba, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_rgba)},
    {SIP_MLNAME_CAST(sipName_saturation), meth_QColor_saturation, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_saturation)},
    {SIP_MLNAME_CAST(sipName_saturationF), meth_QColor_saturationF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_saturationF)},
    {SIP_MLNAME_CAST(sipName_setAlpha), meth_QColor_setAlpha, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setAlpha)},
    {SIP_MLNAME_CAST(sipName_setAlphaF), meth_QColor_setAlphaF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setAlphaF)},
    {SIP_MLNAME_CAST(sipName_setBlue), meth_QColor_setBlue, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setBlue)},
    {SIP_MLNAME_CAST(sipName_setBlueF), meth_QColor_setBlueF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setBlueF)},
    {SIP_MLNAME_CAST(sipName_setCmyk), (PyCFunction)meth_QColor_setCmyk, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setCmyk)},
    {SIP_MLNAME_CAST(sipName_setCmykF), (PyCFunction)meth_QColor_setCmykF, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setCmykF)},
    {SIP_MLNAME_CAST(sipName_setGreen), meth_QColor_setGreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setGreen)},
    {SIP_MLNAME_CAST(sipName_setGreenF), meth_QColor_setGreenF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setGreenF)},
    {SIP_MLNAME_CAST(sipName_setHsl), (PyCFunction)meth_QColor_setHsl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setHsl)},
    {SIP_MLNAME_CAST(sipName_setHslF), (PyCFunction)meth_QColor_setHslF, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setHslF)},
    {SIP_MLNAME_CAST(sipName_setHsv), (PyCFunction)meth_QColor_setHsv, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setHsv)},
    {SIP_MLNAME_CAST(sipName_setHsvF), (PyCFunction)meth_QColor_setHsvF, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setHsvF)},
    {SIP_MLNAME_CAST(sipName_setNamedColor), meth_QColor_setNamedColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setNamedColor)},
    {SIP_MLNAME_CAST(sipName_setRed), meth_QColor_setRed, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setRed)},
    {SIP_MLNAME_CAST(sipName_setRedF), meth_QColor_setRedF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setRedF)},
    {SIP_MLNAME_CAST(sipName_setRgb), (PyCFunction)meth_QColor_setRgb, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setRgb)},
    {SIP_MLNAME_CAST(sipName_setRgbF), (PyCFunction)meth_QColor_setRgbF, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QColor_setRgbF)},
    {SIP_MLNAME_CAST(sipName_setRgba), meth_QColor_setRgba, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_setRgba)},
    {SIP_MLNAME_CAST(sipName_spec), meth_QColor_spec, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_spec)},
    {SIP_MLNAME_CAST(sipName_toCmyk), meth_QColor_toCmyk, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_toCmyk)},
    {SIP_MLNAME_CAST(sipName_toHsl), meth_QColor_toHsl, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_toHsl)},
    {SIP_MLNAME_CAST(sipName_toHsv), meth_QColor_toHsv, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_toHsv)},
    {SIP_MLNAME_CAST(sipName_toRgb), meth_QColor_toRgb, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_toRgb)},
    {SIP_MLNAME_CAST(sipName_value), meth_QColor_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_value)},
    {SIP_MLNAME_CAST(sipName_valueF), meth_QColor_valueF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_valueF)},
    {SIP_MLNAME_CAST(sipName_yellow), meth_QColor_yellow, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_yellow)},
    {SIP_MLNAME_CAST(sipName_yellowF), meth_QColor_yellowF, METH_VARARGS, SIP_MLDOC_CAST(doc_QColor_yellowF)}
};

static sipEnumMemberDef enummembers_QColor[] = {
    {sipName_Cmyk, static_cast<int>(QColor::Cmyk), 14},
    {sipName_HexArgb, static_cast<int>(QColor::HexArgb), 13},
    {sipName_HexRgb, static_cast<int>(QColor::HexRgb), 13},
    {sipName_Hsl, static_cast<int>(QColor::Hsl), 14},
    {sipName_Hsv, static_cast<int>(QColor::Hsv), 14},
    {sipName_Invalid, static_cast<int>(QColor::Invalid), 14},
    {sipName_Rgb, static_cast<int>(QColor::Rgb), 14},
};

PyDoc_STRVAR(doc_QColor, "\1QColor(Qt.GlobalColor)\n"
    "QColor(int)\n"
    "QColor(QVariant)\n"
    "QColor()\n"
    "QColor(int, int, int, int alpha=255)\n"
    "QColor(str)\n"
    "QColor(QColor)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QColor = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QColor,
        {0}
    },
    {
        sipNameNr_QColor,
        {0, 0, 1},
        81, methods_QColor,
        7, enummembers_QColor,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QColor,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QColor,
    init_type_QColor,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QColor,
    assign_QColor,
    array_QColor,
    copy_QColor,
    release_QColor,
    cast_QColor,
    convertTo_QColor,
    0,
    0,
    pickle_QColor,
    0,
    0
},
    0,
    0,
    0,
    0
};
