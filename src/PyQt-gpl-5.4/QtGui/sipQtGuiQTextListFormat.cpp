/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 395 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 533 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 427 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 444 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 507 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 247 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 350 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 144 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 26 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpen.sip"
#include <qpen.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextListFormat.cpp"


PyDoc_STRVAR(doc_QTextListFormat_isValid, "QTextListFormat.isValid() -> bool");

extern "C" {static PyObject *meth_QTextListFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_isValid, doc_QTextListFormat_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QTextListFormat_style, "QTextListFormat.style() -> QTextListFormat.Style");

extern "C" {static PyObject *meth_QTextListFormat_style(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
            QTextListFormat::Style sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromEnum(sipRes,sipType_QTextListFormat_Style);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_style, doc_QTextListFormat_style);

    return NULL;
}


PyDoc_STRVAR(doc_QTextListFormat_indent, "QTextListFormat.indent() -> int");

extern "C" {static PyObject *meth_QTextListFormat_indent(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_indent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->indent();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_indent, doc_QTextListFormat_indent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextListFormat_setStyle, "QTextListFormat.setStyle(QTextListFormat.Style)");

extern "C" {static PyObject *meth_QTextListFormat_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextListFormat::Style a0;
        QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextListFormat, &sipCpp, sipType_QTextListFormat_Style, &a0))
        {
            sipCpp->setStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setStyle, doc_QTextListFormat_setStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextListFormat_setIndent, "QTextListFormat.setIndent(int)");

extern "C" {static PyObject *meth_QTextListFormat_setIndent(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextListFormat, &sipCpp, &a0))
        {
            sipCpp->setIndent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setIndent, doc_QTextListFormat_setIndent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextListFormat_numberPrefix, "QTextListFormat.numberPrefix() -> str");

extern "C" {static PyObject *meth_QTextListFormat_numberPrefix(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_numberPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->numberPrefix());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_numberPrefix, doc_QTextListFormat_numberPrefix);

    return NULL;
}


PyDoc_STRVAR(doc_QTextListFormat_numberSuffix, "QTextListFormat.numberSuffix() -> str");

extern "C" {static PyObject *meth_QTextListFormat_numberSuffix(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_numberSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextListFormat, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->numberSuffix());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_numberSuffix, doc_QTextListFormat_numberSuffix);

    return NULL;
}


PyDoc_STRVAR(doc_QTextListFormat_setNumberPrefix, "QTextListFormat.setNumberPrefix(str)");

extern "C" {static PyObject *meth_QTextListFormat_setNumberPrefix(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setNumberPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextListFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNumberPrefix(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setNumberPrefix, doc_QTextListFormat_setNumberPrefix);

    return NULL;
}


PyDoc_STRVAR(doc_QTextListFormat_setNumberSuffix, "QTextListFormat.setNumberSuffix(str)");

extern "C" {static PyObject *meth_QTextListFormat_setNumberSuffix(PyObject *, PyObject *);}
static PyObject *meth_QTextListFormat_setNumberSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextListFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextListFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNumberSuffix(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextListFormat, sipName_setNumberSuffix, doc_QTextListFormat_setNumberSuffix);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextListFormat(void *, const sipTypeDef *);}
static void *cast_QTextListFormat(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextListFormat)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTextFormat)->ctd_cast((QTextFormat *)(QTextListFormat *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextListFormat(void *, int);}
static void release_QTextListFormat(void *sipCppV,int)
{
    delete reinterpret_cast<QTextListFormat *>(sipCppV);
}


extern "C" {static void assign_QTextListFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextListFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextListFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextListFormat *>(sipSrc);
}


extern "C" {static void *array_QTextListFormat(SIP_SSIZE_T);}
static void *array_QTextListFormat(SIP_SSIZE_T sipNrElem)
{
    return new QTextListFormat[sipNrElem];
}


extern "C" {static void *copy_QTextListFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextListFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextListFormat(reinterpret_cast<const QTextListFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextListFormat(sipSimpleWrapper *);}
static void dealloc_QTextListFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextListFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTextListFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextListFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextListFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QTextListFormat();

            return sipCpp;
        }
    }

    {
        const QTextListFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextListFormat, &a0))
        {
            sipCpp = new QTextListFormat(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextListFormat[] = {{291, 255, 1}};


static PyMethodDef methods_QTextListFormat[] = {
    {SIP_MLNAME_CAST(sipName_indent), meth_QTextListFormat_indent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_indent)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextListFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_numberPrefix), meth_QTextListFormat_numberPrefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_numberPrefix)},
    {SIP_MLNAME_CAST(sipName_numberSuffix), meth_QTextListFormat_numberSuffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_numberSuffix)},
    {SIP_MLNAME_CAST(sipName_setIndent), meth_QTextListFormat_setIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_setIndent)},
    {SIP_MLNAME_CAST(sipName_setNumberPrefix), meth_QTextListFormat_setNumberPrefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_setNumberPrefix)},
    {SIP_MLNAME_CAST(sipName_setNumberSuffix), meth_QTextListFormat_setNumberSuffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_setNumberSuffix)},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QTextListFormat_setStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_setStyle)},
    {SIP_MLNAME_CAST(sipName_style), meth_QTextListFormat_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextListFormat_style)}
};

static sipEnumMemberDef enummembers_QTextListFormat[] = {
    {sipName_ListCircle, static_cast<int>(QTextListFormat::ListCircle), 318},
    {sipName_ListDecimal, static_cast<int>(QTextListFormat::ListDecimal), 318},
    {sipName_ListDisc, static_cast<int>(QTextListFormat::ListDisc), 318},
    {sipName_ListLowerAlpha, static_cast<int>(QTextListFormat::ListLowerAlpha), 318},
    {sipName_ListLowerRoman, static_cast<int>(QTextListFormat::ListLowerRoman), 318},
    {sipName_ListSquare, static_cast<int>(QTextListFormat::ListSquare), 318},
    {sipName_ListUpperAlpha, static_cast<int>(QTextListFormat::ListUpperAlpha), 318},
    {sipName_ListUpperRoman, static_cast<int>(QTextListFormat::ListUpperRoman), 318},
};

PyDoc_STRVAR(doc_QTextListFormat, "\1QTextListFormat()\n"
    "QTextListFormat(QTextListFormat)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QTextListFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTextListFormat,
        {0}
    },
    {
        sipNameNr_QTextListFormat,
        {0, 0, 1},
        9, methods_QTextListFormat,
        8, enummembers_QTextListFormat,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextListFormat,
    -1,
    -1,
    supers_QTextListFormat,
    0,
    init_type_QTextListFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextListFormat,
    assign_QTextListFormat,
    array_QTextListFormat,
    copy_QTextListFormat,
    release_QTextListFormat,
    cast_QTextListFormat,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
