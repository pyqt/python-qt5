/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qguiapplication.sip"
#include <qguiapplication.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qicon.sip"
#include <qicon.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qsessionmanager.sip"
#include <qsessionmanager.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qclipboard.sip"
#include <qclipboard.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qfont.sip"
#include <qfont.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qabstractnativeeventfilter.sip"
#include <qabstractnativeeventfilter.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qtranslator.sip"
#include <qtranslator.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"


class sipQGuiApplication : public QGuiApplication
{
public:
    sipQGuiApplication(int&,char**,int);
    virtual ~sipQGuiApplication();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    bool sipProtectVirt_event(bool,QEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool notify(QObject*,QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGuiApplication(const sipQGuiApplication &);
    sipQGuiApplication &operator = (const sipQGuiApplication &);

    char sipPyMethods[8];
};

sipQGuiApplication::sipQGuiApplication(int& a0,char**a1,int a2): QGuiApplication(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGuiApplication::~sipQGuiApplication()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGuiApplication::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QGuiApplication);
}

int sipQGuiApplication::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGuiApplication::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QGuiApplication,_c,_id,_a);

    return _id;
}

void *sipQGuiApplication::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QGuiApplication, _clname, &sipCpp) ? sipCpp : QGuiApplication::qt_metacast(_clname));
}

void sipQGuiApplication::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QGuiApplication::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGuiApplication::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QGuiApplication::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGuiApplication::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QGuiApplication::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGuiApplication::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QGuiApplication::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtGui_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGuiApplication::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QGuiApplication::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGuiApplication::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QGuiApplication::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtGui_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQGuiApplication::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QGuiApplication::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGuiApplication::notify(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_notify);

    if (!sipMeth)
        return QGuiApplication::notify(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtGui_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QObject* sipQGuiApplication::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQGuiApplication::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQGuiApplication::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQGuiApplication::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQGuiApplication::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQGuiApplication::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQGuiApplication::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQGuiApplication::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQGuiApplication::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

bool sipQGuiApplication::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QGuiApplication::event(a0) : event(a0));
}


PyDoc_STRVAR(doc_QGuiApplication_sender, "QGuiApplication.sender() -> QObject");

extern "C" {static PyObject *meth_QGuiApplication_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGuiApplication *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 445 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_sender, doc_QGuiApplication_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_receivers, "QGuiApplication.receivers(signal) -> int");

extern "C" {static PyObject *meth_QGuiApplication_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQGuiApplication *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QGuiApplication, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 504 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_receivers, doc_QGuiApplication_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_timerEvent, "QGuiApplication.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QGuiApplication_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQGuiApplication *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGuiApplication, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_timerEvent, doc_QGuiApplication_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_childEvent, "QGuiApplication.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QGuiApplication_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQGuiApplication *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGuiApplication, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_childEvent, doc_QGuiApplication_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_customEvent, "QGuiApplication.customEvent(QEvent)");

extern "C" {static PyObject *meth_QGuiApplication_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGuiApplication *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGuiApplication, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_customEvent, doc_QGuiApplication_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_connectNotify, "QGuiApplication.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QGuiApplication_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQGuiApplication *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGuiApplication, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_connectNotify, doc_QGuiApplication_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_disconnectNotify, "QGuiApplication.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QGuiApplication_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQGuiApplication *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGuiApplication, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_disconnectNotify, doc_QGuiApplication_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_senderSignalIndex, "QGuiApplication.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QGuiApplication_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGuiApplication *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_senderSignalIndex, doc_QGuiApplication_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_isSignalConnected, "QGuiApplication.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQGuiApplication *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGuiApplication, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isSignalConnected, doc_QGuiApplication_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_allWindows, "QGuiApplication.allWindows() -> list-of-QWindow");

extern "C" {static PyObject *meth_QGuiApplication_allWindows(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_allWindows(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWindowList*sipRes;

            sipRes = new QWindowList(QGuiApplication::allWindows());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_allWindows, doc_QGuiApplication_allWindows);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_topLevelWindows, "QGuiApplication.topLevelWindows() -> list-of-QWindow");

extern "C" {static PyObject *meth_QGuiApplication_topLevelWindows(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_topLevelWindows(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWindowList*sipRes;

            sipRes = new QWindowList(QGuiApplication::topLevelWindows());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_topLevelWindows, doc_QGuiApplication_topLevelWindows);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_topLevelAt, "QGuiApplication.topLevelAt(QPoint) -> QWindow");

extern "C" {static PyObject *meth_QGuiApplication_topLevelAt(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_topLevelAt(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPoint, &a0))
        {
            QWindow*sipRes;

            sipRes = QGuiApplication::topLevelAt(*a0);

            return sipConvertFromType(sipRes,sipType_QWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_topLevelAt, doc_QGuiApplication_topLevelAt);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_platformName, "QGuiApplication.platformName() -> str");

extern "C" {static PyObject *meth_QGuiApplication_platformName(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_platformName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            sipRes = new QString(QGuiApplication::platformName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_platformName, doc_QGuiApplication_platformName);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_focusWindow, "QGuiApplication.focusWindow() -> QWindow");

extern "C" {static PyObject *meth_QGuiApplication_focusWindow(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_focusWindow(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWindow*sipRes;

            sipRes = QGuiApplication::focusWindow();

            return sipConvertFromType(sipRes,sipType_QWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_focusWindow, doc_QGuiApplication_focusWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_focusObject, "QGuiApplication.focusObject() -> QObject");

extern "C" {static PyObject *meth_QGuiApplication_focusObject(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_focusObject(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QObject*sipRes;

            sipRes = QGuiApplication::focusObject();

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_focusObject, doc_QGuiApplication_focusObject);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_primaryScreen, "QGuiApplication.primaryScreen() -> QScreen");

extern "C" {static PyObject *meth_QGuiApplication_primaryScreen(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_primaryScreen(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QScreen*sipRes;

            sipRes = QGuiApplication::primaryScreen();

            return sipConvertFromType(sipRes,sipType_QScreen,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_primaryScreen, doc_QGuiApplication_primaryScreen);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_screens, "QGuiApplication.screens() -> list-of-QScreen");

extern "C" {static PyObject *meth_QGuiApplication_screens(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_screens(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QScreen*>*sipRes;

            sipRes = new QList<QScreen*>(QGuiApplication::screens());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QScreen,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_screens, doc_QGuiApplication_screens);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_overrideCursor, "QGuiApplication.overrideCursor() -> QCursor");

extern "C" {static PyObject *meth_QGuiApplication_overrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_overrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QCursor*sipRes;

            sipRes = QGuiApplication::overrideCursor();

            return sipConvertFromType(sipRes,sipType_QCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_overrideCursor, doc_QGuiApplication_overrideCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_setOverrideCursor, "QGuiApplication.setOverrideCursor(QCursor)");

extern "C" {static PyObject *meth_QGuiApplication_setOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setOverrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCursor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QCursor, &a0, &a0State))
        {
            QGuiApplication::setOverrideCursor(*a0);
            sipReleaseType(const_cast<QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setOverrideCursor, doc_QGuiApplication_setOverrideCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_changeOverrideCursor, "QGuiApplication.changeOverrideCursor(QCursor)");

extern "C" {static PyObject *meth_QGuiApplication_changeOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_changeOverrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCursor* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QCursor, &a0, &a0State))
        {
            QGuiApplication::changeOverrideCursor(*a0);
            sipReleaseType(const_cast<QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_changeOverrideCursor, doc_QGuiApplication_changeOverrideCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_restoreOverrideCursor, "QGuiApplication.restoreOverrideCursor()");

extern "C" {static PyObject *meth_QGuiApplication_restoreOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_restoreOverrideCursor(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QGuiApplication::restoreOverrideCursor();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_restoreOverrideCursor, doc_QGuiApplication_restoreOverrideCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_font, "QGuiApplication.font() -> QFont");

extern "C" {static PyObject *meth_QGuiApplication_font(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_font(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QFont*sipRes;

            sipRes = new QFont(QGuiApplication::font());

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_font, doc_QGuiApplication_font);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_setFont, "QGuiApplication.setFont(QFont)");

extern "C" {static PyObject *meth_QGuiApplication_setFont(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setFont(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QFont, &a0))
        {
            QGuiApplication::setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setFont, doc_QGuiApplication_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_clipboard, "QGuiApplication.clipboard() -> QClipboard");

extern "C" {static PyObject *meth_QGuiApplication_clipboard(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_clipboard(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QClipboard*sipRes;

            sipRes = QGuiApplication::clipboard();

            return sipConvertFromType(sipRes,sipType_QClipboard,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_clipboard, doc_QGuiApplication_clipboard);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_palette, "QGuiApplication.palette() -> QPalette");

extern "C" {static PyObject *meth_QGuiApplication_palette(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_palette(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QPalette*sipRes;

            sipRes = new QPalette(QGuiApplication::palette());

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_palette, doc_QGuiApplication_palette);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_setPalette, "QGuiApplication.setPalette(QPalette)");

extern "C" {static PyObject *meth_QGuiApplication_setPalette(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setPalette(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QPalette, &a0))
        {
            QGuiApplication::setPalette(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setPalette, doc_QGuiApplication_setPalette);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_keyboardModifiers, "QGuiApplication.keyboardModifiers() -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QGuiApplication_keyboardModifiers(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_keyboardModifiers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Qt::KeyboardModifiers*sipRes;

            sipRes = new Qt::KeyboardModifiers(QGuiApplication::keyboardModifiers());

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_keyboardModifiers, doc_QGuiApplication_keyboardModifiers);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_queryKeyboardModifiers, "QGuiApplication.queryKeyboardModifiers() -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QGuiApplication_queryKeyboardModifiers(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_queryKeyboardModifiers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Qt::KeyboardModifiers*sipRes;

            sipRes = new Qt::KeyboardModifiers(QGuiApplication::queryKeyboardModifiers());

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_queryKeyboardModifiers, doc_QGuiApplication_queryKeyboardModifiers);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_mouseButtons, "QGuiApplication.mouseButtons() -> Qt.MouseButtons");

extern "C" {static PyObject *meth_QGuiApplication_mouseButtons(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_mouseButtons(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Qt::MouseButtons*sipRes;

            sipRes = new Qt::MouseButtons(QGuiApplication::mouseButtons());

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_mouseButtons, doc_QGuiApplication_mouseButtons);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_setLayoutDirection, "QGuiApplication.setLayoutDirection(Qt.LayoutDirection)");

extern "C" {static PyObject *meth_QGuiApplication_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setLayoutDirection(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::LayoutDirection a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_Qt_LayoutDirection, &a0))
        {
            QGuiApplication::setLayoutDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setLayoutDirection, doc_QGuiApplication_setLayoutDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_layoutDirection, "QGuiApplication.layoutDirection() -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QGuiApplication_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_layoutDirection(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Qt::LayoutDirection sipRes;

            sipRes = QGuiApplication::layoutDirection();

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_layoutDirection, doc_QGuiApplication_layoutDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_isRightToLeft, "QGuiApplication.isRightToLeft() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isRightToLeft(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isRightToLeft(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QGuiApplication::isRightToLeft();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isRightToLeft, doc_QGuiApplication_isRightToLeft);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_isLeftToRight, "QGuiApplication.isLeftToRight() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isLeftToRight(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isLeftToRight(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QGuiApplication::isLeftToRight();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isLeftToRight, doc_QGuiApplication_isLeftToRight);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_setDesktopSettingsAware, "QGuiApplication.setDesktopSettingsAware(bool)");

extern "C" {static PyObject *meth_QGuiApplication_setDesktopSettingsAware(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setDesktopSettingsAware(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
            QGuiApplication::setDesktopSettingsAware(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setDesktopSettingsAware, doc_QGuiApplication_setDesktopSettingsAware);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_desktopSettingsAware, "QGuiApplication.desktopSettingsAware() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_desktopSettingsAware(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_desktopSettingsAware(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QGuiApplication::desktopSettingsAware();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_desktopSettingsAware, doc_QGuiApplication_desktopSettingsAware);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_setQuitOnLastWindowClosed, "QGuiApplication.setQuitOnLastWindowClosed(bool)");

extern "C" {static PyObject *meth_QGuiApplication_setQuitOnLastWindowClosed(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setQuitOnLastWindowClosed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
            QGuiApplication::setQuitOnLastWindowClosed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setQuitOnLastWindowClosed, doc_QGuiApplication_setQuitOnLastWindowClosed);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_quitOnLastWindowClosed, "QGuiApplication.quitOnLastWindowClosed() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_quitOnLastWindowClosed(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_quitOnLastWindowClosed(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QGuiApplication::quitOnLastWindowClosed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_quitOnLastWindowClosed, doc_QGuiApplication_quitOnLastWindowClosed);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_exec_, "QGuiApplication.exec_() -> int");

extern "C" {static PyObject *meth_QGuiApplication_exec_(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_exec_(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = QGuiApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_exec_, doc_QGuiApplication_exec_);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_notify, "QGuiApplication.notify(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QGuiApplication_notify(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_notify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QGuiApplication, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QGuiApplication::notify(a0,a1) : sipCpp->notify(a0,a1));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_notify, doc_QGuiApplication_notify);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_setApplicationDisplayName, "QGuiApplication.setApplicationDisplayName(str)");

extern "C" {static PyObject *meth_QGuiApplication_setApplicationDisplayName(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setApplicationDisplayName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QGuiApplication::setApplicationDisplayName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setApplicationDisplayName, doc_QGuiApplication_setApplicationDisplayName);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_applicationDisplayName, "QGuiApplication.applicationDisplayName() -> str");

extern "C" {static PyObject *meth_QGuiApplication_applicationDisplayName(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_applicationDisplayName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            sipRes = new QString(QGuiApplication::applicationDisplayName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_applicationDisplayName, doc_QGuiApplication_applicationDisplayName);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_modalWindow, "QGuiApplication.modalWindow() -> QWindow");

extern "C" {static PyObject *meth_QGuiApplication_modalWindow(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_modalWindow(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWindow*sipRes;

            sipRes = QGuiApplication::modalWindow();

            return sipConvertFromType(sipRes,sipType_QWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_modalWindow, doc_QGuiApplication_modalWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_devicePixelRatio, "QGuiApplication.devicePixelRatio() -> float");

extern "C" {static PyObject *meth_QGuiApplication_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_devicePixelRatio, doc_QGuiApplication_devicePixelRatio);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_isSessionRestored, "QGuiApplication.isSessionRestored() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isSessionRestored(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isSessionRestored(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSessionRestored();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isSessionRestored, doc_QGuiApplication_isSessionRestored);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_sessionId, "QGuiApplication.sessionId() -> str");

extern "C" {static PyObject *meth_QGuiApplication_sessionId(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_sessionId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->sessionId());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_sessionId, doc_QGuiApplication_sessionId);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_sessionKey, "QGuiApplication.sessionKey() -> str");

extern "C" {static PyObject *meth_QGuiApplication_sessionKey(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_sessionKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->sessionKey());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_sessionKey, doc_QGuiApplication_sessionKey);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_isSavingSession, "QGuiApplication.isSavingSession() -> bool");

extern "C" {static PyObject *meth_QGuiApplication_isSavingSession(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_isSavingSession(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGuiApplication *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGuiApplication, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSavingSession();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_isSavingSession, doc_QGuiApplication_isSavingSession);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_applicationState, "QGuiApplication.applicationState() -> Qt.ApplicationState");

extern "C" {static PyObject *meth_QGuiApplication_applicationState(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_applicationState(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            Qt::ApplicationState sipRes;

            sipRes = QGuiApplication::applicationState();

            return sipConvertFromEnum(sipRes,sipType_Qt_ApplicationState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_applicationState, doc_QGuiApplication_applicationState);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_sync, "QGuiApplication.sync()");

extern "C" {static PyObject *meth_QGuiApplication_sync(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_sync(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QGuiApplication::sync();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_sync, doc_QGuiApplication_sync);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_setWindowIcon, "QGuiApplication.setWindowIcon(QIcon)");

extern "C" {static PyObject *meth_QGuiApplication_setWindowIcon(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_setWindowIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QIcon, &a0))
        {
            QGuiApplication::setWindowIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_setWindowIcon, doc_QGuiApplication_setWindowIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_windowIcon, "QGuiApplication.windowIcon() -> QIcon");

extern "C" {static PyObject *meth_QGuiApplication_windowIcon(PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_windowIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QIcon*sipRes;

            sipRes = new QIcon(QGuiApplication::windowIcon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_windowIcon, doc_QGuiApplication_windowIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QGuiApplication_event, "QGuiApplication.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QGuiApplication_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGuiApplication_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGuiApplication *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGuiApplication, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGuiApplication, sipName_event, doc_QGuiApplication_event);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGuiApplication(void *, const sipTypeDef *);}
static void *cast_QGuiApplication(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGuiApplication)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QCoreApplication)->ctd_cast((QCoreApplication *)(QGuiApplication *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGuiApplication(void *, int);}
static void release_QGuiApplication(void *sipCppV,int)
{
    QGuiApplication *sipCpp = reinterpret_cast<QGuiApplication *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGuiApplication(sipSimpleWrapper *);}
static void dealloc_QGuiApplication(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGuiApplication *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGuiApplication(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGuiApplication(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGuiApplication(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQGuiApplication *sipCpp = 0;

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "T", &PyList_Type, &a0))
        {
            int sipIsErr = 0;

#line 151 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qguiapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = pyqt5_qtgui_from_argv_list(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGuiApplication(nargc, argv, QCoreApplication::ApplicationFlags);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            pyqt5_qtgui_update_argv_list(a0, argc, argv);
        }
#line 1911 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQGuiApplication.cpp"

            if (sipIsErr)
            {
                if (sipUnused)
                {
                    Py_XDECREF(*sipUnused);
                }

                sipAddException(sipErrorFail, sipParseErr);
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            sipCallHook("__pyQtQAppHook__");

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGuiApplication[] = {{29, 0, 1}};


static PyMethodDef methods_QGuiApplication[] = {
    {SIP_MLNAME_CAST(sipName_allWindows), meth_QGuiApplication_allWindows, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_allWindows)},
    {SIP_MLNAME_CAST(sipName_applicationDisplayName), meth_QGuiApplication_applicationDisplayName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_applicationDisplayName)},
    {SIP_MLNAME_CAST(sipName_applicationState), meth_QGuiApplication_applicationState, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_applicationState)},
    {SIP_MLNAME_CAST(sipName_changeOverrideCursor), meth_QGuiApplication_changeOverrideCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_changeOverrideCursor)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QGuiApplication_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clipboard), meth_QGuiApplication_clipboard, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_clipboard)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QGuiApplication_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QGuiApplication_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_desktopSettingsAware), meth_QGuiApplication_desktopSettingsAware, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_desktopSettingsAware)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatio), meth_QGuiApplication_devicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_devicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QGuiApplication_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QGuiApplication_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGuiApplication_event)},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QGuiApplication_exec_, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_exec_)},
    {SIP_MLNAME_CAST(sipName_focusObject), meth_QGuiApplication_focusObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_focusObject)},
    {SIP_MLNAME_CAST(sipName_focusWindow), meth_QGuiApplication_focusWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_focusWindow)},
    {SIP_MLNAME_CAST(sipName_font), meth_QGuiApplication_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_font)},
    {SIP_MLNAME_CAST(sipName_isLeftToRight), meth_QGuiApplication_isLeftToRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_isLeftToRight)},
    {SIP_MLNAME_CAST(sipName_isRightToLeft), meth_QGuiApplication_isRightToLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_isRightToLeft)},
    {SIP_MLNAME_CAST(sipName_isSavingSession), meth_QGuiApplication_isSavingSession, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_isSavingSession)},
    {SIP_MLNAME_CAST(sipName_isSessionRestored), meth_QGuiApplication_isSessionRestored, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_isSessionRestored)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QGuiApplication_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyboardModifiers), meth_QGuiApplication_keyboardModifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_keyboardModifiers)},
    {SIP_MLNAME_CAST(sipName_layoutDirection), meth_QGuiApplication_layoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_layoutDirection)},
    {SIP_MLNAME_CAST(sipName_modalWindow), meth_QGuiApplication_modalWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_modalWindow)},
    {SIP_MLNAME_CAST(sipName_mouseButtons), meth_QGuiApplication_mouseButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_mouseButtons)},
    {SIP_MLNAME_CAST(sipName_notify), meth_QGuiApplication_notify, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_notify)},
    {SIP_MLNAME_CAST(sipName_overrideCursor), meth_QGuiApplication_overrideCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_overrideCursor)},
    {SIP_MLNAME_CAST(sipName_palette), meth_QGuiApplication_palette, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_palette)},
    {SIP_MLNAME_CAST(sipName_platformName), meth_QGuiApplication_platformName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_platformName)},
    {SIP_MLNAME_CAST(sipName_primaryScreen), meth_QGuiApplication_primaryScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_primaryScreen)},
    {SIP_MLNAME_CAST(sipName_queryKeyboardModifiers), meth_QGuiApplication_queryKeyboardModifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_queryKeyboardModifiers)},
    {SIP_MLNAME_CAST(sipName_quitOnLastWindowClosed), meth_QGuiApplication_quitOnLastWindowClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_quitOnLastWindowClosed)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QGuiApplication_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_restoreOverrideCursor), meth_QGuiApplication_restoreOverrideCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_restoreOverrideCursor)},
    {SIP_MLNAME_CAST(sipName_screens), meth_QGuiApplication_screens, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_screens)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QGuiApplication_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QGuiApplication_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sessionId), meth_QGuiApplication_sessionId, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_sessionId)},
    {SIP_MLNAME_CAST(sipName_sessionKey), meth_QGuiApplication_sessionKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_sessionKey)},
    {SIP_MLNAME_CAST(sipName_setApplicationDisplayName), meth_QGuiApplication_setApplicationDisplayName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setApplicationDisplayName)},
    {SIP_MLNAME_CAST(sipName_setDesktopSettingsAware), meth_QGuiApplication_setDesktopSettingsAware, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setDesktopSettingsAware)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QGuiApplication_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setFont)},
    {SIP_MLNAME_CAST(sipName_setLayoutDirection), meth_QGuiApplication_setLayoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setLayoutDirection)},
    {SIP_MLNAME_CAST(sipName_setOverrideCursor), meth_QGuiApplication_setOverrideCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setOverrideCursor)},
    {SIP_MLNAME_CAST(sipName_setPalette), meth_QGuiApplication_setPalette, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setPalette)},
    {SIP_MLNAME_CAST(sipName_setQuitOnLastWindowClosed), meth_QGuiApplication_setQuitOnLastWindowClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setQuitOnLastWindowClosed)},
    {SIP_MLNAME_CAST(sipName_setWindowIcon), meth_QGuiApplication_setWindowIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_setWindowIcon)},
    {SIP_MLNAME_CAST(sipName_sync), meth_QGuiApplication_sync, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_sync)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QGuiApplication_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_topLevelAt), meth_QGuiApplication_topLevelAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_topLevelAt)},
    {SIP_MLNAME_CAST(sipName_topLevelWindows), meth_QGuiApplication_topLevelWindows, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_topLevelWindows)},
    {SIP_MLNAME_CAST(sipName_windowIcon), meth_QGuiApplication_windowIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QGuiApplication_windowIcon)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGuiApplication[] = {
    {"paletteChanged(QPalette)", "\1QGuiApplication.paletteChanged[QPalette]", 0, 0},
    {"layoutDirectionChanged(Qt::LayoutDirection)", "\1QGuiApplication.layoutDirectionChanged[Qt.LayoutDirection]", 0, 0},
    {"screenRemoved(QScreen*)", "\1QGuiApplication.screenRemoved[QScreen]", 0, 0},
    {"applicationStateChanged(Qt::ApplicationState)", "\1QGuiApplication.applicationStateChanged[Qt.ApplicationState]", 0, 0},
    {"focusWindowChanged(QWindow*)", "\1QGuiApplication.focusWindowChanged[QWindow]", 0, 0},
    {"saveStateRequest(QSessionManager&)", "\1QGuiApplication.saveStateRequest[QSessionManager]", 0, 0},
    {"commitDataRequest(QSessionManager&)", "\1QGuiApplication.commitDataRequest[QSessionManager]", 0, 0},
    {"focusObjectChanged(QObject*)", "\1QGuiApplication.focusObjectChanged[QObject]", 0, 0},
    {"lastWindowClosed()", "\1QGuiApplication.lastWindowClosed", 0, 0},
    {"screenAdded(QScreen*)", "\1QGuiApplication.screenAdded[QScreen]", 0, 0},
    {"fontDatabaseChanged()", "\1QGuiApplication.fontDatabaseChanged", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QGuiApplication, "\1QGuiApplication(list-of-str)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QGuiApplication = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGuiApplication,
        {0}
    },
    {
        sipNameNr_QGuiApplication,
        {0, 0, 1},
        52, methods_QGuiApplication,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGuiApplication,
    -1,
    -1,
    supers_QGuiApplication,
    0,
    init_type_QGuiApplication,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGuiApplication,
    0,
    0,
    0,
    release_QGuiApplication,
    cast_QGuiApplication,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGuiApplication::staticMetaObject,
    0,
    signals_QGuiApplication,
    0
};
