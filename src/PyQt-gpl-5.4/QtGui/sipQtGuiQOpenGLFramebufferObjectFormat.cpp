/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLFramebufferObjectFormat.cpp"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLFramebufferObjectFormat.cpp"


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setSamples, "QOpenGLFramebufferObjectFormat.setSamples(int)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setSamples(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setSamples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, &a0))
        {
            sipCpp->setSamples(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setSamples, doc_QOpenGLFramebufferObjectFormat_setSamples);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_samples, "QOpenGLFramebufferObjectFormat.samples() -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_samples(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_samples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->samples();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_samples, doc_QOpenGLFramebufferObjectFormat_samples);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setMipmap, "QOpenGLFramebufferObjectFormat.setMipmap(bool)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setMipmap(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setMipmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, &a0))
        {
            sipCpp->setMipmap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setMipmap, doc_QOpenGLFramebufferObjectFormat_setMipmap);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_mipmap, "QOpenGLFramebufferObjectFormat.mipmap() -> bool");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_mipmap(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_mipmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->mipmap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_mipmap, doc_QOpenGLFramebufferObjectFormat_mipmap);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setAttachment, "QOpenGLFramebufferObjectFormat.setAttachment(QOpenGLFramebufferObject.Attachment)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setAttachment(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setAttachment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFramebufferObject::Attachment a0;
        QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, sipType_QOpenGLFramebufferObject_Attachment, &a0))
        {
            sipCpp->setAttachment(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setAttachment, doc_QOpenGLFramebufferObjectFormat_setAttachment);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_attachment, "QOpenGLFramebufferObjectFormat.attachment() -> QOpenGLFramebufferObject.Attachment");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_attachment(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_attachment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
            QOpenGLFramebufferObject::Attachment sipRes;

            sipRes = sipCpp->attachment();

            return sipConvertFromEnum(sipRes,sipType_QOpenGLFramebufferObject_Attachment);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_attachment, doc_QOpenGLFramebufferObjectFormat_attachment);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setTextureTarget, "QOpenGLFramebufferObjectFormat.setTextureTarget(int)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setTextureTarget(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setTextureTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, &a0))
        {
            sipCpp->setTextureTarget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setTextureTarget, doc_QOpenGLFramebufferObjectFormat_setTextureTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_textureTarget, "QOpenGLFramebufferObjectFormat.textureTarget() -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_textureTarget(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_textureTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
            GLenum sipRes;

            sipRes = sipCpp->textureTarget();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_textureTarget, doc_QOpenGLFramebufferObjectFormat_textureTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_setInternalTextureFormat, "QOpenGLFramebufferObjectFormat.setInternalTextureFormat(int)");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_setInternalTextureFormat(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_setInternalTextureFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        GLenum a0;
        QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp, &a0))
        {
            sipCpp->setInternalTextureFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_setInternalTextureFormat, doc_QOpenGLFramebufferObjectFormat_setInternalTextureFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat_internalTextureFormat, "QOpenGLFramebufferObjectFormat.internalTextureFormat() -> int");

extern "C" {static PyObject *meth_QOpenGLFramebufferObjectFormat_internalTextureFormat(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLFramebufferObjectFormat_internalTextureFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLFramebufferObjectFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLFramebufferObjectFormat, &sipCpp))
        {
            GLenum sipRes;

            sipRes = sipCpp->internalTextureFormat();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLFramebufferObjectFormat, sipName_internalTextureFormat, doc_QOpenGLFramebufferObjectFormat_internalTextureFormat);

    return NULL;
}


extern "C" {static PyObject *slot_QOpenGLFramebufferObjectFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLFramebufferObjectFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QOpenGLFramebufferObjectFormat *sipCpp = reinterpret_cast<QOpenGLFramebufferObjectFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLFramebufferObjectFormat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QOpenGLFramebufferObjectFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOpenGLFramebufferObjectFormat, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QOpenGLFramebufferObjectFormat::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QOpenGLFramebufferObjectFormat,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QOpenGLFramebufferObjectFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QOpenGLFramebufferObjectFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QOpenGLFramebufferObjectFormat *sipCpp = reinterpret_cast<QOpenGLFramebufferObjectFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QOpenGLFramebufferObjectFormat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QOpenGLFramebufferObjectFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QOpenGLFramebufferObjectFormat, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QOpenGLFramebufferObjectFormat::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QOpenGLFramebufferObjectFormat,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QOpenGLFramebufferObjectFormat(void *, const sipTypeDef *);}
static void *cast_QOpenGLFramebufferObjectFormat(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QOpenGLFramebufferObjectFormat)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLFramebufferObjectFormat(void *, int);}
static void release_QOpenGLFramebufferObjectFormat(void *sipCppV,int)
{
    delete reinterpret_cast<QOpenGLFramebufferObjectFormat *>(sipCppV);
}


extern "C" {static void assign_QOpenGLFramebufferObjectFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QOpenGLFramebufferObjectFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QOpenGLFramebufferObjectFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QOpenGLFramebufferObjectFormat *>(sipSrc);
}


extern "C" {static void *array_QOpenGLFramebufferObjectFormat(SIP_SSIZE_T);}
static void *array_QOpenGLFramebufferObjectFormat(SIP_SSIZE_T sipNrElem)
{
    return new QOpenGLFramebufferObjectFormat[sipNrElem];
}


extern "C" {static void *copy_QOpenGLFramebufferObjectFormat(const void *, SIP_SSIZE_T);}
static void *copy_QOpenGLFramebufferObjectFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QOpenGLFramebufferObjectFormat(reinterpret_cast<const QOpenGLFramebufferObjectFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QOpenGLFramebufferObjectFormat(sipSimpleWrapper *);}
static void dealloc_QOpenGLFramebufferObjectFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QOpenGLFramebufferObjectFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QOpenGLFramebufferObjectFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLFramebufferObjectFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QOpenGLFramebufferObjectFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QOpenGLFramebufferObjectFormat();

            return sipCpp;
        }
    }

    {
        const QOpenGLFramebufferObjectFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QOpenGLFramebufferObjectFormat, &a0))
        {
            sipCpp = new QOpenGLFramebufferObjectFormat(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QOpenGLFramebufferObjectFormat[] = {
    {(void *)slot_QOpenGLFramebufferObjectFormat___ne__, ne_slot},
    {(void *)slot_QOpenGLFramebufferObjectFormat___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QOpenGLFramebufferObjectFormat[] = {
    {SIP_MLNAME_CAST(sipName_attachment), meth_QOpenGLFramebufferObjectFormat_attachment, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_attachment)},
    {SIP_MLNAME_CAST(sipName_internalTextureFormat), meth_QOpenGLFramebufferObjectFormat_internalTextureFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_internalTextureFormat)},
    {SIP_MLNAME_CAST(sipName_mipmap), meth_QOpenGLFramebufferObjectFormat_mipmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_mipmap)},
    {SIP_MLNAME_CAST(sipName_samples), meth_QOpenGLFramebufferObjectFormat_samples, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_samples)},
    {SIP_MLNAME_CAST(sipName_setAttachment), meth_QOpenGLFramebufferObjectFormat_setAttachment, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_setAttachment)},
    {SIP_MLNAME_CAST(sipName_setInternalTextureFormat), meth_QOpenGLFramebufferObjectFormat_setInternalTextureFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_setInternalTextureFormat)},
    {SIP_MLNAME_CAST(sipName_setMipmap), meth_QOpenGLFramebufferObjectFormat_setMipmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_setMipmap)},
    {SIP_MLNAME_CAST(sipName_setSamples), meth_QOpenGLFramebufferObjectFormat_setSamples, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_setSamples)},
    {SIP_MLNAME_CAST(sipName_setTextureTarget), meth_QOpenGLFramebufferObjectFormat_setTextureTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_setTextureTarget)},
    {SIP_MLNAME_CAST(sipName_textureTarget), meth_QOpenGLFramebufferObjectFormat_textureTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLFramebufferObjectFormat_textureTarget)}
};

PyDoc_STRVAR(doc_QOpenGLFramebufferObjectFormat, "\1QOpenGLFramebufferObjectFormat()\n"
    "QOpenGLFramebufferObjectFormat(QOpenGLFramebufferObjectFormat)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QOpenGLFramebufferObjectFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLFramebufferObjectFormat,
        {0}
    },
    {
        sipNameNr_QOpenGLFramebufferObjectFormat,
        {0, 0, 1},
        10, methods_QOpenGLFramebufferObjectFormat,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOpenGLFramebufferObjectFormat,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QOpenGLFramebufferObjectFormat,
    init_type_QOpenGLFramebufferObjectFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOpenGLFramebufferObjectFormat,
    assign_QOpenGLFramebufferObjectFormat,
    array_QOpenGLFramebufferObjectFormat,
    copy_QOpenGLFramebufferObjectFormat,
    release_QOpenGLFramebufferObjectFormat,
    cast_QOpenGLFramebufferObjectFormat,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
