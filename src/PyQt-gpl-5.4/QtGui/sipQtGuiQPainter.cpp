/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qstatictext.sip"
#include <qstatictext.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qimage.sip"
#include <qimage.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 96 "sip/QtCore/qline.sip"
#include <qline.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "sip/QtCore/qline.sip"
#include <qline.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpicture.sip"
#include <qpicture.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 327 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 26 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 26 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 26 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 26 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 26 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 26 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpen.sip"
#include <qpen.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qregion.sip"
#include <qregion.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qfont.sip"
#include <qfont.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
// Return an array on the heap of class instances extracted from a set of
// Python arguments.
template<class TYPE>
static TYPE *qtgui_inst_array(const TYPE *first, PyObject *t, sipTypeDef *td)
{
    TYPE *arr = new TYPE[1 + PyTuple_GET_SIZE(t)];

    arr[0] = *first;

    for (SIP_SSIZE_T i = 0; i < PyTuple_GET_SIZE(t); ++i)
    {
        int iserr = 0, state;
        TYPE *itm;

        itm  = reinterpret_cast<TYPE *>(sipForceConvertToType(PyTuple_GET_ITEM(t, i), td, 0, SIP_NOT_NONE, &state, &iserr));

        if (iserr)
        {
            sipReleaseType(itm, td, state);

            PyErr_Format(PyExc_TypeError, "each argument must be an instance of %s", sipTypeAsPyTypeObject(td)->tp_name);

            delete[] arr;
            return 0;
        }

        arr[1 + i] = *itm;

        sipReleaseType(itm, td, state);
    }

    return arr;
}
#line 173 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"


PyDoc_STRVAR(doc_QPainter___enter__, "QPainter.__enter__() -> object");

extern "C" {static PyObject *meth_QPainter___enter__(PyObject *, PyObject *);}
static PyObject *meth_QPainter___enter__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            PyObject * sipRes = 0;

#line 86 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        // Check a device was passed.
        if (sipCpp->isActive())
        {
            // Just return a reference to self.
            sipRes = sipSelf;
            Py_INCREF(sipRes);
        }
        else
        {
            PyErr_SetString(PyExc_ValueError, "QPainter must be created with a device");
            sipRes = 0;
        }
#line 203 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName___enter__, doc_QPainter___enter__);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter___exit__, "QPainter.__exit__(object, object, object)");

extern "C" {static PyObject *meth_QPainter___exit__(PyObject *, PyObject *);}
static PyObject *meth_QPainter___exit__(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        PyObject * a1;
        PyObject * a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0P0P0", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2))
        {
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        sipCpp->end();
#line 233 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName___exit__, doc_QPainter___exit__);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_device, "QPainter.device() -> QPaintDevice");

extern "C" {static PyObject *meth_QPainter_device(PyObject *, PyObject *);}
static PyObject *meth_QPainter_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPaintDevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QPaintDevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_device, doc_QPainter_device);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_begin, "QPainter.begin(QPaintDevice) -> bool");

extern "C" {static PyObject *meth_QPainter_begin(PyObject *, PyObject *);}
static PyObject *meth_QPainter_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPaintDevice* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPaintDevice, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->begin(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_begin, doc_QPainter_begin);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_end, "QPainter.end() -> bool");

extern "C" {static PyObject *meth_QPainter_end(PyObject *, PyObject *);}
static PyObject *meth_QPainter_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->end();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_end, doc_QPainter_end);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_isActive, "QPainter.isActive() -> bool");

extern "C" {static PyObject *meth_QPainter_isActive(PyObject *, PyObject *);}
static PyObject *meth_QPainter_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_isActive, doc_QPainter_isActive);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setCompositionMode, "QPainter.setCompositionMode(QPainter.CompositionMode)");

extern "C" {static PyObject *meth_QPainter_setCompositionMode(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setCompositionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::CompositionMode a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainter_CompositionMode, &a0))
        {
            sipCpp->setCompositionMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setCompositionMode, doc_QPainter_setCompositionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_compositionMode, "QPainter.compositionMode() -> QPainter.CompositionMode");

extern "C" {static PyObject *meth_QPainter_compositionMode(PyObject *, PyObject *);}
static PyObject *meth_QPainter_compositionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPainter::CompositionMode sipRes;

            sipRes = sipCpp->compositionMode();

            return sipConvertFromEnum(sipRes,sipType_QPainter_CompositionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_compositionMode, doc_QPainter_compositionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_font, "QPainter.font() -> QFont");

extern "C" {static PyObject *meth_QPainter_font(PyObject *, PyObject *);}
static PyObject *meth_QPainter_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QFont*sipRes;

            sipRes = new QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_font, doc_QPainter_font);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setFont, "QPainter.setFont(QFont)");

extern "C" {static PyObject *meth_QPainter_setFont(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setFont, doc_QPainter_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_fontMetrics, "QPainter.fontMetrics() -> QFontMetrics");

extern "C" {static PyObject *meth_QPainter_fontMetrics(PyObject *, PyObject *);}
static PyObject *meth_QPainter_fontMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QFontMetrics*sipRes;

            sipRes = new QFontMetrics(sipCpp->fontMetrics());

            return sipConvertFromNewType(sipRes,sipType_QFontMetrics,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_fontMetrics, doc_QPainter_fontMetrics);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_fontInfo, "QPainter.fontInfo() -> QFontInfo");

extern "C" {static PyObject *meth_QPainter_fontInfo(PyObject *, PyObject *);}
static PyObject *meth_QPainter_fontInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QFontInfo*sipRes;

            sipRes = new QFontInfo(sipCpp->fontInfo());

            return sipConvertFromNewType(sipRes,sipType_QFontInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_fontInfo, doc_QPainter_fontInfo);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setPen, "QPainter.setPen(QColor)\n"
    "QPainter.setPen(QPen)\n"
    "QPainter.setPen(Qt.PenStyle)");

extern "C" {static PyObject *meth_QPainter_setPen(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setPen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setPen(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPen* a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPen, &a0, &a0State))
        {
            sipCpp->setPen(*a0);
            sipReleaseType(const_cast<QPen *>(a0),sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        Qt::PenStyle a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_Qt_PenStyle, &a0))
        {
            sipCpp->setPen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setPen, doc_QPainter_setPen);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_pen, "QPainter.pen() -> QPen");

extern "C" {static PyObject *meth_QPainter_pen(PyObject *, PyObject *);}
static PyObject *meth_QPainter_pen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPen*sipRes;

            sipRes = new QPen(sipCpp->pen());

            return sipConvertFromNewType(sipRes,sipType_QPen,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_pen, doc_QPainter_pen);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setBrush, "QPainter.setBrush(QBrush)\n"
    "QPainter.setBrush(Qt.BrushStyle)");

extern "C" {static PyObject *meth_QPainter_setBrush(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBrush(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        Qt::BrushStyle a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_Qt_BrushStyle, &a0))
        {
            sipCpp->setBrush(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setBrush, doc_QPainter_setBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_brush, "QPainter.brush() -> QBrush");

extern "C" {static PyObject *meth_QPainter_brush(PyObject *, PyObject *);}
static PyObject *meth_QPainter_brush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->brush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_brush, doc_QPainter_brush);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setBackgroundMode, "QPainter.setBackgroundMode(Qt.BGMode)");

extern "C" {static PyObject *meth_QPainter_setBackgroundMode(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setBackgroundMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::BGMode a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_Qt_BGMode, &a0))
        {
            sipCpp->setBackgroundMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setBackgroundMode, doc_QPainter_setBackgroundMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_backgroundMode, "QPainter.backgroundMode() -> Qt.BGMode");

extern "C" {static PyObject *meth_QPainter_backgroundMode(PyObject *, PyObject *);}
static PyObject *meth_QPainter_backgroundMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            Qt::BGMode sipRes;

            sipRes = sipCpp->backgroundMode();

            return sipConvertFromEnum(sipRes,sipType_Qt_BGMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_backgroundMode, doc_QPainter_backgroundMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_brushOrigin, "QPainter.brushOrigin() -> QPoint");

extern "C" {static PyObject *meth_QPainter_brushOrigin(PyObject *, PyObject *);}
static PyObject *meth_QPainter_brushOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->brushOrigin());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_brushOrigin, doc_QPainter_brushOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setBrushOrigin, "QPainter.setBrushOrigin(QPointF)\n"
    "QPainter.setBrushOrigin(int, int)\n"
    "QPainter.setBrushOrigin(QPoint)");

extern "C" {static PyObject *meth_QPainter_setBrushOrigin(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setBrushOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setBrushOrigin(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            sipCpp->setBrushOrigin(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setBrushOrigin(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setBrushOrigin, doc_QPainter_setBrushOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setBackground, "QPainter.setBackground(QBrush)");

extern "C" {static PyObject *meth_QPainter_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBackground(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setBackground, doc_QPainter_setBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_background, "QPainter.background() -> QBrush");

extern "C" {static PyObject *meth_QPainter_background(PyObject *, PyObject *);}
static PyObject *meth_QPainter_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->background());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_background, doc_QPainter_background);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_clipRegion, "QPainter.clipRegion() -> QRegion");

extern "C" {static PyObject *meth_QPainter_clipRegion(PyObject *, PyObject *);}
static PyObject *meth_QPainter_clipRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QRegion*sipRes;

            sipRes = new QRegion(sipCpp->clipRegion());

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_clipRegion, doc_QPainter_clipRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_clipPath, "QPainter.clipPath() -> QPainterPath");

extern "C" {static PyObject *meth_QPainter_clipPath(PyObject *, PyObject *);}
static PyObject *meth_QPainter_clipPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath(sipCpp->clipPath());

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_clipPath, doc_QPainter_clipPath);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setClipRect, "QPainter.setClipRect(QRectF, Qt.ClipOperation operation=Qt.ReplaceClip)\n"
    "QPainter.setClipRect(int, int, int, int, Qt.ClipOperation operation=Qt.ReplaceClip)\n"
    "QPainter.setClipRect(QRect, Qt.ClipOperation operation=Qt.ReplaceClip)");

extern "C" {static PyObject *meth_QPainter_setClipRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setClipRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        Qt::ClipOperation a1 = Qt::ReplaceClip;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_Qt_ClipOperation, &a1))
        {
            sipCpp->setClipRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        Qt::ClipOperation a4 = Qt::ReplaceClip;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii|E", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_ClipOperation, &a4))
        {
            sipCpp->setClipRect(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        Qt::ClipOperation a1 = Qt::ReplaceClip;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_Qt_ClipOperation, &a1))
        {
            sipCpp->setClipRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setClipRect, doc_QPainter_setClipRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setClipRegion, "QPainter.setClipRegion(QRegion, Qt.ClipOperation operation=Qt.ReplaceClip)");

extern "C" {static PyObject *meth_QPainter_setClipRegion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setClipRegion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRegion* a0;
        Qt::ClipOperation a1 = Qt::ReplaceClip;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRegion, &a0, sipType_Qt_ClipOperation, &a1))
        {
            sipCpp->setClipRegion(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setClipRegion, doc_QPainter_setClipRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setClipPath, "QPainter.setClipPath(QPainterPath, Qt.ClipOperation operation=Qt.ReplaceClip)");

extern "C" {static PyObject *meth_QPainter_setClipPath(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setClipPath(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        Qt::ClipOperation a1 = Qt::ReplaceClip;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_operation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainterPath, &a0, sipType_Qt_ClipOperation, &a1))
        {
            sipCpp->setClipPath(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setClipPath, doc_QPainter_setClipPath);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setClipping, "QPainter.setClipping(bool)");

extern "C" {static PyObject *meth_QPainter_setClipping(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setClipping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            sipCpp->setClipping(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setClipping, doc_QPainter_setClipping);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_hasClipping, "QPainter.hasClipping() -> bool");

extern "C" {static PyObject *meth_QPainter_hasClipping(PyObject *, PyObject *);}
static PyObject *meth_QPainter_hasClipping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasClipping();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_hasClipping, doc_QPainter_hasClipping);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_save, "QPainter.save()");

extern "C" {static PyObject *meth_QPainter_save(PyObject *, PyObject *);}
static PyObject *meth_QPainter_save(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            sipCpp->save();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_save, doc_QPainter_save);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_restore, "QPainter.restore()");

extern "C" {static PyObject *meth_QPainter_restore(PyObject *, PyObject *);}
static PyObject *meth_QPainter_restore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            sipCpp->restore();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_restore, doc_QPainter_restore);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_scale, "QPainter.scale(float, float)");

extern "C" {static PyObject *meth_QPainter_scale(PyObject *, PyObject *);}
static PyObject *meth_QPainter_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            sipCpp->scale(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_scale, doc_QPainter_scale);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_shear, "QPainter.shear(float, float)");

extern "C" {static PyObject *meth_QPainter_shear(PyObject *, PyObject *);}
static PyObject *meth_QPainter_shear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            sipCpp->shear(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_shear, doc_QPainter_shear);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_rotate, "QPainter.rotate(float)");

extern "C" {static PyObject *meth_QPainter_rotate(PyObject *, PyObject *);}
static PyObject *meth_QPainter_rotate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            sipCpp->rotate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_rotate, doc_QPainter_rotate);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_translate, "QPainter.translate(QPointF)\n"
    "QPainter.translate(float, float)\n"
    "QPainter.translate(QPoint)");

extern "C" {static PyObject *meth_QPainter_translate(PyObject *, PyObject *);}
static PyObject *meth_QPainter_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->translate(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->translate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_translate, doc_QPainter_translate);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_window, "QPainter.window() -> QRect");

extern "C" {static PyObject *meth_QPainter_window(PyObject *, PyObject *);}
static PyObject *meth_QPainter_window(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->window());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_window, doc_QPainter_window);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setWindow, "QPainter.setWindow(QRect)\n"
    "QPainter.setWindow(int, int, int, int)");

extern "C" {static PyObject *meth_QPainter_setWindow(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setWindow(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setWindow(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setWindow, doc_QPainter_setWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_viewport, "QPainter.viewport() -> QRect");

extern "C" {static PyObject *meth_QPainter_viewport(PyObject *, PyObject *);}
static PyObject *meth_QPainter_viewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->viewport());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_viewport, doc_QPainter_viewport);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setViewport, "QPainter.setViewport(QRect)\n"
    "QPainter.setViewport(int, int, int, int)");

extern "C" {static PyObject *meth_QPainter_setViewport(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setViewport(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setViewport(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setViewport, doc_QPainter_setViewport);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setViewTransformEnabled, "QPainter.setViewTransformEnabled(bool)");

extern "C" {static PyObject *meth_QPainter_setViewTransformEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setViewTransformEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            sipCpp->setViewTransformEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setViewTransformEnabled, doc_QPainter_setViewTransformEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_viewTransformEnabled, "QPainter.viewTransformEnabled() -> bool");

extern "C" {static PyObject *meth_QPainter_viewTransformEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_viewTransformEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->viewTransformEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_viewTransformEnabled, doc_QPainter_viewTransformEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_strokePath, "QPainter.strokePath(QPainterPath, QPen)");

extern "C" {static PyObject *meth_QPainter_strokePath(PyObject *, PyObject *);}
static PyObject *meth_QPainter_strokePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        const QPen* a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainterPath, &a0, sipType_QPen, &a1, &a1State))
        {
            sipCpp->strokePath(*a0,*a1);
            sipReleaseType(const_cast<QPen *>(a1),sipType_QPen,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_strokePath, doc_QPainter_strokePath);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_fillPath, "QPainter.fillPath(QPainterPath, QBrush)");

extern "C" {static PyObject *meth_QPainter_fillPath(PyObject *, PyObject *);}
static PyObject *meth_QPainter_fillPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        const QBrush* a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainterPath, &a0, sipType_QBrush, &a1, &a1State))
        {
            sipCpp->fillPath(*a0,*a1);
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_fillPath, doc_QPainter_fillPath);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawPath, "QPainter.drawPath(QPainterPath)");

extern "C" {static PyObject *meth_QPainter_drawPath(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainterPath, &a0))
        {
            sipCpp->drawPath(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPath, doc_QPainter_drawPath);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawPoints, "QPainter.drawPoints(QPointF, ...)\n"
    "QPainter.drawPoints(QPolygonF)\n"
    "QPainter.drawPoints(QPoint, ...)\n"
    "QPainter.drawPoints(QPolygon)");

extern "C" {static PyObject *meth_QPainter_drawPoints(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ0W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipIsErr = 0;

#line 195 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QPointF *points = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (points)
        {
            sipCpp->drawPoints(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 1628 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygonF* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygonF, &a0))
        {
            sipCpp->drawPoints(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 209 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QPoint *points = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (points)
        {
            sipCpp->drawPoints(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 1673 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygon* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygon, &a0))
        {
            sipCpp->drawPoints(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPoints, doc_QPainter_drawPoints);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawLines, "QPainter.drawLines(QLineF, ...)\n"
    "QPainter.drawLines(list-of-QLineF)\n"
    "QPainter.drawLines(QPointF, ...)\n"
    "QPainter.drawLines(list-of-QPointF)\n"
    "QPainter.drawLines(QLine, ...)\n"
    "QPainter.drawLines(list-of-QLine)\n"
    "QPainter.drawLines(QPoint, ...)\n"
    "QPainter.drawLines(list-of-QPoint)");

extern "C" {static PyObject *meth_QPainter_drawLines(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineF* a0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QLineF, &a0, &a1))
        {
            int sipIsErr = 0;

#line 223 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QLineF *lines = qtgui_inst_array<QLineF>(a0, a1, sipType_QLineF);
        
        if (lines)
        {
            sipCpp->drawLines(lines, 1 + PyTuple_GET_SIZE(a1));
            delete[] lines;
        }
        else
            sipIsErr = 1;
#line 1738 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<QLineF>* a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QLineF,&a0, &a0State))
        {
            sipCpp->drawLines(*a0);
            sipReleaseType(const_cast<QVector<QLineF> *>(a0),sipType_QVector_0100QLineF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ0W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipIsErr = 0;

#line 237 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QPointF *pairs = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (pairs)
        {
            sipCpp->drawLines(pairs, (1 + PyTuple_GET_SIZE(a1)) / 2);
            delete[] pairs;
        }
        else
            sipIsErr = 1;
#line 1785 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<QPointF>* a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QPointF,&a0, &a0State))
        {
            sipCpp->drawLines(*a0);
            sipReleaseType(const_cast<QVector<QPointF> *>(a0),sipType_QVector_0100QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QLine* a0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QLine, &a0, &a1))
        {
            int sipIsErr = 0;

#line 251 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QLine *lines = qtgui_inst_array<QLine>(a0, a1, sipType_QLine);
        
        if (lines)
        {
            sipCpp->drawLines(lines, 1 + PyTuple_GET_SIZE(a1));
            delete[] lines;
        }
        else
            sipIsErr = 1;
#line 1832 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<QLine>* a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QLine,&a0, &a0State))
        {
            sipCpp->drawLines(*a0);
            sipReleaseType(const_cast<QVector<QLine> *>(a0),sipType_QVector_0100QLine,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 265 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QPoint *pairs = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (pairs)
        {
            sipCpp->drawLines(pairs, (1 + PyTuple_GET_SIZE(a1)) / 2);
            delete[] pairs;
        }
        else
            sipIsErr = 1;
#line 1878 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<QPoint>* a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QPoint,&a0, &a0State))
        {
            sipCpp->drawLines(*a0);
            sipReleaseType(const_cast<QVector<QPoint> *>(a0),sipType_QVector_0100QPoint,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawLines, doc_QPainter_drawLines);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawRects, "QPainter.drawRects(QRectF, ...)\n"
    "QPainter.drawRects(list-of-QRectF)\n"
    "QPainter.drawRects(QRect, ...)\n"
    "QPainter.drawRects(list-of-QRect)");

extern "C" {static PyObject *meth_QPainter_drawRects(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawRects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1))
        {
            int sipIsErr = 0;

#line 279 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QRectF *rects = qtgui_inst_array<QRectF>(a0, a1, sipType_QRectF);
        
        if (rects)
        {
            sipCpp->drawRects(rects, 1 + PyTuple_GET_SIZE(a1));
            delete[] rects;
        }
        else
            sipIsErr = 1;
#line 1941 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<QRectF>* a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QRectF,&a0, &a0State))
        {
            sipCpp->drawRects(*a0);
            sipReleaseType(const_cast<QVector<QRectF> *>(a0),sipType_QVector_0100QRectF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1))
        {
            int sipIsErr = 0;

#line 293 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QRect *rects = qtgui_inst_array<QRect>(a0, a1, sipType_QRect);
        
        if (rects)
        {
            sipCpp->drawRects(rects, 1 + PyTuple_GET_SIZE(a1));
            delete[] rects;
        }
        else
            sipIsErr = 1;
#line 1987 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<QRect>* a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QVector_0100QRect,&a0, &a0State))
        {
            sipCpp->drawRects(*a0);
            sipReleaseType(const_cast<QVector<QRect> *>(a0),sipType_QVector_0100QRect,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawRects, doc_QPainter_drawRects);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawEllipse, "QPainter.drawEllipse(QRectF)\n"
    "QPainter.drawEllipse(QRect)\n"
    "QPainter.drawEllipse(int, int, int, int)\n"
    "QPainter.drawEllipse(QPointF, float, float)\n"
    "QPainter.drawEllipse(QPoint, int, int)");

extern "C" {static PyObject *meth_QPainter_drawEllipse(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawEllipse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->drawEllipse(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->drawEllipse(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->drawEllipse(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        qreal a1;
        qreal a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1dd", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, &a1, &a2))
        {
            sipCpp->drawEllipse(*a0,a1,a2);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1, &a2))
        {
            sipCpp->drawEllipse(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawEllipse, doc_QPainter_drawEllipse);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawPolyline, "QPainter.drawPolyline(QPointF, ...)\n"
    "QPainter.drawPolyline(QPolygonF)\n"
    "QPainter.drawPolyline(QPoint, ...)\n"
    "QPainter.drawPolyline(QPolygon)");

extern "C" {static PyObject *meth_QPainter_drawPolyline(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPolyline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ0W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipIsErr = 0;

#line 309 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QPointF *points = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (points)
        {
            sipCpp->drawPolyline(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2143 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygonF* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygonF, &a0))
        {
            sipCpp->drawPolyline(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 323 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QPoint *points = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (points)
        {
            sipCpp->drawPolyline(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2188 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygon* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygon, &a0))
        {
            sipCpp->drawPolyline(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPolyline, doc_QPainter_drawPolyline);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawPolygon, "QPainter.drawPolygon(QPointF, ...)\n"
    "QPainter.drawPolygon(QPolygonF, Qt.FillRule fillRule=Qt.OddEvenFill)\n"
    "QPainter.drawPolygon(QPoint, ...)\n"
    "QPainter.drawPolygon(QPolygon, Qt.FillRule fillRule=Qt.OddEvenFill)");

extern "C" {static PyObject *meth_QPainter_drawPolygon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPolygon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ0W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipIsErr = 0;

#line 337 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QPointF *points = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (points)
        {
            sipCpp->drawPolygon(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2250 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygonF* a0;
        Qt::FillRule a1 = Qt::OddEvenFill;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_fillRule,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygonF, &a0, sipType_Qt_FillRule, &a1))
        {
            sipCpp->drawPolygon(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 351 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QPoint *points = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (points)
        {
            sipCpp->drawPolygon(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2301 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygon* a0;
        Qt::FillRule a1 = Qt::OddEvenFill;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_fillRule,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygon, &a0, sipType_Qt_FillRule, &a1))
        {
            sipCpp->drawPolygon(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPolygon, doc_QPainter_drawPolygon);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawConvexPolygon, "QPainter.drawConvexPolygon(QPointF, ...)\n"
    "QPainter.drawConvexPolygon(QPolygonF)\n"
    "QPainter.drawConvexPolygon(QPoint, ...)\n"
    "QPainter.drawConvexPolygon(QPolygon)");

extern "C" {static PyObject *meth_QPainter_drawConvexPolygon(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawConvexPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ0W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipIsErr = 0;

#line 365 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QPointF *points = qtgui_inst_array<QPointF>(a0, a1, sipType_QPointF);
        
        if (points)
        {
            sipCpp->drawConvexPolygon(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2369 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygonF* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygonF, &a0))
        {
            sipCpp->drawConvexPolygon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        PyObject * a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8W", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            int sipIsErr = 0;

#line 379 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        QPoint *points = qtgui_inst_array<QPoint>(a0, a1, sipType_QPoint);
        
        if (points)
        {
            sipCpp->drawConvexPolygon(points, 1 + PyTuple_GET_SIZE(a1));
            delete[] points;
        }
        else
            sipIsErr = 1;
#line 2414 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"

            Py_DECREF(a1);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPolygon* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPolygon, &a0))
        {
            sipCpp->drawConvexPolygon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawConvexPolygon, doc_QPainter_drawConvexPolygon);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawArc, "QPainter.drawArc(QRectF, int, int)\n"
    "QPainter.drawArc(QRect, int, int)\n"
    "QPainter.drawArc(int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QPainter_drawArc(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawArc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            sipCpp->drawArc(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, &a2))
        {
            sipCpp->drawArc(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->drawArc(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawArc, doc_QPainter_drawArc);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawPie, "QPainter.drawPie(QRectF, int, int)\n"
    "QPainter.drawPie(QRect, int, int)\n"
    "QPainter.drawPie(int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QPainter_drawPie(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPie(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            sipCpp->drawPie(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, &a2))
        {
            sipCpp->drawPie(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->drawPie(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPie, doc_QPainter_drawPie);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawChord, "QPainter.drawChord(QRectF, int, int)\n"
    "QPainter.drawChord(QRect, int, int)\n"
    "QPainter.drawChord(int, int, int, int, int, int)");

extern "C" {static PyObject *meth_QPainter_drawChord(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawChord(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            sipCpp->drawChord(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        int a1;
        int a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9ii", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, &a2))
        {
            sipCpp->drawChord(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->drawChord(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawChord, doc_QPainter_drawChord);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawTiledPixmap, "QPainter.drawTiledPixmap(QRectF, QPixmap, QPointF pos=QPointF())\n"
    "QPainter.drawTiledPixmap(QRect, QPixmap, QPoint pos=QPoint())\n"
    "QPainter.drawTiledPixmap(int, int, int, int, QPixmap, int sx=0, int sy=0)");

extern "C" {static PyObject *meth_QPainter_drawTiledPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawTiledPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        const QPixmap* a1;
        const QPointF& a2def = QPointF();
        const QPointF* a2 = &a2def;
        int a2State = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QPixmap, &a1, sipType_QPointF, &a2, &a2State))
        {
            sipCpp->drawTiledPixmap(*a0,*a1,*a2);
            sipReleaseType(const_cast<QPointF *>(a2),sipType_QPointF,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        const QPixmap* a1;
        const QPoint& a2def = QPoint();
        const QPoint* a2 = &a2def;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QPixmap, &a1, sipType_QPoint, &a2))
        {
            sipCpp->drawTiledPixmap(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QPixmap* a4;
        int a5 = 0;
        int a6 = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_sx,
            sipName_sy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiiiJ9|ii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPixmap, &a4, &a5, &a6))
        {
            sipCpp->drawTiledPixmap(a0,a1,a2,a3,*a4,a5,a6);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawTiledPixmap, doc_QPainter_drawTiledPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawPicture, "QPainter.drawPicture(QPointF, QPicture)\n"
    "QPainter.drawPicture(int, int, QPicture)\n"
    "QPainter.drawPicture(QPoint, QPicture)");

extern "C" {static PyObject *meth_QPainter_drawPicture(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPicture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QPicture* a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPicture, &a1))
        {
            sipCpp->drawPicture(*a0,*a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QPicture* a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QPicture, &a2))
        {
            sipCpp->drawPicture(a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        const QPicture* a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QPicture, &a1))
        {
            sipCpp->drawPicture(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPicture, doc_QPainter_drawPicture);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawPixmap, "QPainter.drawPixmap(QRectF, QPixmap, QRectF)\n"
    "QPainter.drawPixmap(QRect, QPixmap, QRect)\n"
    "QPainter.drawPixmap(QPointF, QPixmap)\n"
    "QPainter.drawPixmap(QPoint, QPixmap)\n"
    "QPainter.drawPixmap(QRect, QPixmap)\n"
    "QPainter.drawPixmap(int, int, QPixmap)\n"
    "QPainter.drawPixmap(int, int, int, int, QPixmap)\n"
    "QPainter.drawPixmap(int, int, int, int, QPixmap, int, int, int, int)\n"
    "QPainter.drawPixmap(int, int, QPixmap, int, int, int, int)\n"
    "QPainter.drawPixmap(QPointF, QPixmap, QRectF)\n"
    "QPainter.drawPixmap(QPoint, QPixmap, QRect)");

extern "C" {static PyObject *meth_QPainter_drawPixmap(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        const QPixmap* a1;
        const QRectF* a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QPixmap, &a1, sipType_QRectF, &a2))
        {
            sipCpp->drawPixmap(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        const QPixmap* a1;
        const QRect* a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QPixmap, &a1, sipType_QRect, &a2))
        {
            sipCpp->drawPixmap(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        const QPixmap* a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPixmap, &a1))
        {
            sipCpp->drawPixmap(*a0,*a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        const QPixmap* a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QPixmap, &a1))
        {
            sipCpp->drawPixmap(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        const QPixmap* a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QPixmap, &a1))
        {
            sipCpp->drawPixmap(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QPixmap* a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QPixmap, &a2))
        {
            sipCpp->drawPixmap(a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QPixmap* a4;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiJ9", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPixmap, &a4))
        {
            sipCpp->drawPixmap(a0,a1,a2,a3,*a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QPixmap* a4;
        int a5;
        int a6;
        int a7;
        int a8;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiJ9iiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPixmap, &a4, &a5, &a6, &a7, &a8))
        {
            sipCpp->drawPixmap(a0,a1,a2,a3,*a4,a5,a6,a7,a8);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QPixmap* a2;
        int a3;
        int a4;
        int a5;
        int a6;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9iiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QPixmap, &a2, &a3, &a4, &a5, &a6))
        {
            sipCpp->drawPixmap(a0,a1,*a2,a3,a4,a5,a6);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        const QPixmap* a1;
        const QRectF* a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPixmap, &a1, sipType_QRectF, &a2))
        {
            sipCpp->drawPixmap(*a0,*a1,*a2);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        const QPixmap* a1;
        const QRect* a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QPixmap, &a1, sipType_QRect, &a2))
        {
            sipCpp->drawPixmap(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPixmap, doc_QPainter_drawPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setLayoutDirection, "QPainter.setLayoutDirection(Qt.LayoutDirection)");

extern "C" {static PyObject *meth_QPainter_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setLayoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::LayoutDirection a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_Qt_LayoutDirection, &a0))
        {
            sipCpp->setLayoutDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setLayoutDirection, doc_QPainter_setLayoutDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_layoutDirection, "QPainter.layoutDirection() -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QPainter_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QPainter_layoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            Qt::LayoutDirection sipRes;

            sipRes = sipCpp->layoutDirection();

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_layoutDirection, doc_QPainter_layoutDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawText, "QPainter.drawText(QPointF, str)\n"
    "QPainter.drawText(QRectF, int, str) -> QRectF\n"
    "QPainter.drawText(QRect, int, str) -> QRect\n"
    "QPainter.drawText(QRectF, str, QTextOption option=QTextOption())\n"
    "QPainter.drawText(QPoint, str)\n"
    "QPainter.drawText(int, int, int, int, int, str) -> QRect\n"
    "QPainter.drawText(int, int, str)");

extern "C" {static PyObject *meth_QPainter_drawText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->drawText(*a0,*a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF* a0;
        int a1;
        const QString* a2;
        int a2State = 0;
        QRectF* a3;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9iJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            a3 = new QRectF();

            sipCpp->drawText(*a0,a1,*a2,a3);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(a3,sipType_QRectF,NULL);
        }
    }

    {
        const QRect* a0;
        int a1;
        const QString* a2;
        int a2State = 0;
        QRect* a3;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9iJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            a3 = new QRect();

            sipCpp->drawText(*a0,a1,*a2,a3);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(a3,sipType_QRect,NULL);
        }
    }

    {
        const QRectF* a0;
        const QString* a1;
        int a1State = 0;
        const QTextOption& a2def = QTextOption();
        const QTextOption* a2 = &a2def;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_option,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QString,&a1, &a1State, sipType_QTextOption, &a2))
        {
            sipCpp->drawText(*a0,*a1,*a2);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        const QString* a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->drawText(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        const QString* a5;
        int a5State = 0;
        QRect* a6;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, sipType_QString,&a5, &a5State))
        {
            a6 = new QRect();

            sipCpp->drawText(a0,a1,a2,a3,a4,*a5,a6);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return sipConvertFromNewType(a6,sipType_QRect,NULL);
        }
    }

    {
        int a0;
        int a1;
        const QString* a2;
        int a2State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            sipCpp->drawText(a0,a1,*a2);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawText, doc_QPainter_drawText);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_boundingRect, "QPainter.boundingRect(QRectF, int, str) -> QRectF\n"
    "QPainter.boundingRect(QRect, int, str) -> QRect\n"
    "QPainter.boundingRect(QRectF, str, QTextOption option=QTextOption()) -> QRectF\n"
    "QPainter.boundingRect(int, int, int, int, int, str) -> QRect");

extern "C" {static PyObject *meth_QPainter_boundingRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_boundingRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        int a1;
        const QString* a2;
        int a2State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9iJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->boundingRect(*a0,a1,*a2));
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    {
        const QRect* a0;
        int a1;
        const QString* a2;
        int a2State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9iJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, sipType_QString,&a2, &a2State))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->boundingRect(*a0,a1,*a2));
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        const QRectF* a0;
        const QString* a1;
        int a1State = 0;
        const QTextOption& a2def = QTextOption();
        const QTextOption* a2 = &a2def;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_option,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QString,&a1, &a1State, sipType_QTextOption, &a2))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->boundingRect(*a0,*a1,*a2));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        const QString* a5;
        int a5State = 0;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiiiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, sipType_QString,&a5, &a5State))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->boundingRect(a0,a1,a2,a3,a4,*a5));
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_boundingRect, doc_QPainter_boundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_fillRect, "QPainter.fillRect(QRectF, QBrush)\n"
    "QPainter.fillRect(QRect, QBrush)\n"
    "QPainter.fillRect(int, int, int, int, QBrush)\n"
    "QPainter.fillRect(QRectF, QColor)\n"
    "QPainter.fillRect(QRect, QColor)\n"
    "QPainter.fillRect(int, int, int, int, QColor)\n"
    "QPainter.fillRect(int, int, int, int, Qt.GlobalColor)\n"
    "QPainter.fillRect(QRect, Qt.GlobalColor)\n"
    "QPainter.fillRect(QRectF, Qt.GlobalColor)\n"
    "QPainter.fillRect(int, int, int, int, Qt.BrushStyle)\n"
    "QPainter.fillRect(QRect, Qt.BrushStyle)\n"
    "QPainter.fillRect(QRectF, Qt.BrushStyle)");

extern "C" {static PyObject *meth_QPainter_fillRect(PyObject *, PyObject *);}
static PyObject *meth_QPainter_fillRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        const QBrush* a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QBrush, &a1, &a1State))
        {
            sipCpp->fillRect(*a0,*a1);
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        const QBrush* a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QBrush, &a1, &a1State))
        {
            sipCpp->fillRect(*a0,*a1);
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QBrush* a4;
        int a4State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QBrush, &a4, &a4State))
        {
            sipCpp->fillRect(a0,a1,a2,a3,*a4);
            sipReleaseType(const_cast<QBrush *>(a4),sipType_QBrush,a4State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF* a0;
        const QColor* a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->fillRect(*a0,*a1);
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        const QColor* a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->fillRect(*a0,*a1);
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QColor* a4;
        int a4State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QColor, &a4, &a4State))
        {
            sipCpp->fillRect(a0,a1,a2,a3,*a4);
            sipReleaseType(const_cast<QColor *>(a4),sipType_QColor,a4State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        Qt::GlobalColor a4;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiE", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_GlobalColor, &a4))
        {
            sipCpp->fillRect(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        Qt::GlobalColor a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_Qt_GlobalColor, &a1))
        {
            sipCpp->fillRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF* a0;
        Qt::GlobalColor a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_Qt_GlobalColor, &a1))
        {
            sipCpp->fillRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        Qt::BrushStyle a4;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiiiE", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_BrushStyle, &a4))
        {
            sipCpp->fillRect(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        Qt::BrushStyle a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_Qt_BrushStyle, &a1))
        {
            sipCpp->fillRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF* a0;
        Qt::BrushStyle a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_Qt_BrushStyle, &a1))
        {
            sipCpp->fillRect(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_fillRect, doc_QPainter_fillRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_eraseRect, "QPainter.eraseRect(QRectF)\n"
    "QPainter.eraseRect(QRect)\n"
    "QPainter.eraseRect(int, int, int, int)");

extern "C" {static PyObject *meth_QPainter_eraseRect(PyObject *, PyObject *);}
static PyObject *meth_QPainter_eraseRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->eraseRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->eraseRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->eraseRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_eraseRect, doc_QPainter_eraseRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setRenderHint, "QPainter.setRenderHint(QPainter.RenderHint, bool on=True)");

extern "C" {static PyObject *meth_QPainter_setRenderHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setRenderHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHint a0;
        bool a1 = 1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainter_RenderHint, &a0, &a1))
        {
            sipCpp->setRenderHint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setRenderHint, doc_QPainter_setRenderHint);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_renderHints, "QPainter.renderHints() -> QPainter.RenderHints");

extern "C" {static PyObject *meth_QPainter_renderHints(PyObject *, PyObject *);}
static PyObject *meth_QPainter_renderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPainter::RenderHints*sipRes;

            sipRes = new QPainter::RenderHints(sipCpp->renderHints());

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_renderHints, doc_QPainter_renderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setRenderHints, "QPainter.setRenderHints(QPainter.RenderHints, bool on=True)");

extern "C" {static PyObject *meth_QPainter_setRenderHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setRenderHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHints* a0;
        int a0State = 0;
        bool a1 = 1;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainter_RenderHints, &a0, &a0State, &a1))
        {
            sipCpp->setRenderHints(*a0,a1);
            sipReleaseType(a0,sipType_QPainter_RenderHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setRenderHints, doc_QPainter_setRenderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_paintEngine, "QPainter.paintEngine() -> QPaintEngine");

extern "C" {static PyObject *meth_QPainter_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPainter_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QPaintEngine*sipRes;

            sipRes = sipCpp->paintEngine();

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_paintEngine, doc_QPainter_paintEngine);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawLine, "QPainter.drawLine(QLineF)\n"
    "QPainter.drawLine(QLine)\n"
    "QPainter.drawLine(int, int, int, int)\n"
    "QPainter.drawLine(QPoint, QPoint)\n"
    "QPainter.drawLine(QPointF, QPointF)");

extern "C" {static PyObject *meth_QPainter_drawLine(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineF* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QLineF, &a0))
        {
            sipCpp->drawLine(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QLine* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QLine, &a0))
        {
            sipCpp->drawLine(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->drawLine(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        const QPoint* a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QPoint, &a1))
        {
            sipCpp->drawLine(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        const QPointF* a1;
        int a1State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->drawLine(*a0,*a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawLine, doc_QPainter_drawLine);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawRect, "QPainter.drawRect(QRectF)\n"
    "QPainter.drawRect(int, int, int, int)\n"
    "QPainter.drawRect(QRect)");

extern "C" {static PyObject *meth_QPainter_drawRect(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->drawRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->drawRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->drawRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawRect, doc_QPainter_drawRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawPoint, "QPainter.drawPoint(QPointF)\n"
    "QPainter.drawPoint(int, int)\n"
    "QPainter.drawPoint(QPoint)");

extern "C" {static PyObject *meth_QPainter_drawPoint(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->drawPoint(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1))
        {
            sipCpp->drawPoint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->drawPoint(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPoint, doc_QPainter_drawPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawImage, "QPainter.drawImage(QRectF, QImage, QRectF, Qt.ImageConversionFlags flags=Qt.AutoColor)\n"
    "QPainter.drawImage(QRect, QImage, QRect, Qt.ImageConversionFlags flags=Qt.AutoColor)\n"
    "QPainter.drawImage(QPointF, QImage, QRectF, Qt.ImageConversionFlags flags=Qt.AutoColor)\n"
    "QPainter.drawImage(QPoint, QImage, QRect, Qt.ImageConversionFlags flags=Qt.AutoColor)\n"
    "QPainter.drawImage(QRectF, QImage)\n"
    "QPainter.drawImage(QRect, QImage)\n"
    "QPainter.drawImage(QPointF, QImage)\n"
    "QPainter.drawImage(QPoint, QImage)\n"
    "QPainter.drawImage(int, int, QImage, int sx=0, int sy=0, int sw=-1, int sh=-1, Qt.ImageConversionFlags flags=Qt.AutoColor)");

extern "C" {static PyObject *meth_QPainter_drawImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        const QImage* a1;
        const QRectF* a2;
        Qt::ImageConversionFlags a3def = Qt::AutoColor;
        Qt::ImageConversionFlags* a3 = &a3def;
        int a3State = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QImage, &a1, sipType_QRectF, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            sipCpp->drawImage(*a0,*a1,*a2,*a3);
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        const QImage* a1;
        const QRect* a2;
        Qt::ImageConversionFlags a3def = Qt::AutoColor;
        Qt::ImageConversionFlags* a3 = &a3def;
        int a3State = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QImage, &a1, sipType_QRect, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            sipCpp->drawImage(*a0,*a1,*a2,*a3);
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        const QImage* a1;
        const QRectF* a2;
        Qt::ImageConversionFlags a3def = Qt::AutoColor;
        Qt::ImageConversionFlags* a3 = &a3def;
        int a3State = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QImage, &a1, sipType_QRectF, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            sipCpp->drawImage(*a0,*a1,*a2,*a3);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        const QImage* a1;
        const QRect* a2;
        Qt::ImageConversionFlags a3def = Qt::AutoColor;
        Qt::ImageConversionFlags* a3 = &a3def;
        int a3State = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J9|J1", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QImage, &a1, sipType_QRect, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            sipCpp->drawImage(*a0,*a1,*a2,*a3);
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF* a0;
        const QImage* a1;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, sipType_QImage, &a1))
        {
            sipCpp->drawImage(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        const QImage* a1;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, sipType_QImage, &a1))
        {
            sipCpp->drawImage(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        const QImage* a1;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QImage, &a1))
        {
            sipCpp->drawImage(*a0,*a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        const QImage* a1;
        QPainter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QImage, &a1))
        {
            sipCpp->drawImage(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QImage* a2;
        int a3 = 0;
        int a4 = 0;
        int a5 = -1;
        int a6 = -1;
        Qt::ImageConversionFlags a7def = Qt::AutoColor;
        Qt::ImageConversionFlags* a7 = &a7def;
        int a7State = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_sx,
            sipName_sy,
            sipName_sw,
            sipName_sh,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiJ9|iiiiJ1", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QImage, &a2, &a3, &a4, &a5, &a6, sipType_Qt_ImageConversionFlags, &a7, &a7State))
        {
            sipCpp->drawImage(a0,a1,*a2,a3,a4,a5,a6,*a7);
            sipReleaseType(a7,sipType_Qt_ImageConversionFlags,a7State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawImage, doc_QPainter_drawImage);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_opacity, "QPainter.opacity() -> float");

extern "C" {static PyObject *meth_QPainter_opacity(PyObject *, PyObject *);}
static PyObject *meth_QPainter_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->opacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_opacity, doc_QPainter_opacity);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setOpacity, "QPainter.setOpacity(float)");

extern "C" {static PyObject *meth_QPainter_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            sipCpp->setOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setOpacity, doc_QPainter_setOpacity);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_worldMatrixEnabled, "QPainter.worldMatrixEnabled() -> bool");

extern "C" {static PyObject *meth_QPainter_worldMatrixEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_worldMatrixEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->worldMatrixEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_worldMatrixEnabled, doc_QPainter_worldMatrixEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setWorldMatrixEnabled, "QPainter.setWorldMatrixEnabled(bool)");

extern "C" {static PyObject *meth_QPainter_setWorldMatrixEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPainter_setWorldMatrixEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPainter, &sipCpp, &a0))
        {
            sipCpp->setWorldMatrixEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setWorldMatrixEnabled, doc_QPainter_setWorldMatrixEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setTransform, "QPainter.setTransform(QTransform, bool combine=False)");

extern "C" {static PyObject *meth_QPainter_setTransform(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setTransform(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;
        bool a1 = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_combine,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QTransform, &a0, &a1))
        {
            sipCpp->setTransform(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setTransform, doc_QPainter_setTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_transform, "QPainter.transform() -> QTransform");

extern "C" {static PyObject *meth_QPainter_transform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_transform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QTransform*sipRes;

            sipRes = new QTransform(sipCpp->transform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_transform, doc_QPainter_transform);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_deviceTransform, "QPainter.deviceTransform() -> QTransform");

extern "C" {static PyObject *meth_QPainter_deviceTransform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_deviceTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QTransform*sipRes;

            sipRes = new QTransform(sipCpp->deviceTransform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_deviceTransform, doc_QPainter_deviceTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_resetTransform, "QPainter.resetTransform()");

extern "C" {static PyObject *meth_QPainter_resetTransform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_resetTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            sipCpp->resetTransform();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_resetTransform, doc_QPainter_resetTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_setWorldTransform, "QPainter.setWorldTransform(QTransform, bool combine=False)");

extern "C" {static PyObject *meth_QPainter_setWorldTransform(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_setWorldTransform(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;
        bool a1 = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_combine,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|b", &sipSelf, sipType_QPainter, &sipCpp, sipType_QTransform, &a0, &a1))
        {
            sipCpp->setWorldTransform(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_setWorldTransform, doc_QPainter_setWorldTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_worldTransform, "QPainter.worldTransform() -> QTransform");

extern "C" {static PyObject *meth_QPainter_worldTransform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_worldTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QTransform*sipRes;

            sipRes = new QTransform(sipCpp->worldTransform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_worldTransform, doc_QPainter_worldTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_combinedTransform, "QPainter.combinedTransform() -> QTransform");

extern "C" {static PyObject *meth_QPainter_combinedTransform(PyObject *, PyObject *);}
static PyObject *meth_QPainter_combinedTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QTransform*sipRes;

            sipRes = new QTransform(sipCpp->combinedTransform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_combinedTransform, doc_QPainter_combinedTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_testRenderHint, "QPainter.testRenderHint(QPainter.RenderHint) -> bool");

extern "C" {static PyObject *meth_QPainter_testRenderHint(PyObject *, PyObject *);}
static PyObject *meth_QPainter_testRenderHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHint a0;
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPainter_RenderHint, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->testRenderHint(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_testRenderHint, doc_QPainter_testRenderHint);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawRoundedRect, "QPainter.drawRoundedRect(QRectF, float, float, Qt.SizeMode mode=Qt.AbsoluteSize)\n"
    "QPainter.drawRoundedRect(int, int, int, int, float, float, Qt.SizeMode mode=Qt.AbsoluteSize)\n"
    "QPainter.drawRoundedRect(QRect, float, float, Qt.SizeMode mode=Qt.AbsoluteSize)");

extern "C" {static PyObject *meth_QPainter_drawRoundedRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawRoundedRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        qreal a1;
        qreal a2;
        Qt::SizeMode a3 = Qt::AbsoluteSize;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9dd|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRectF, &a0, &a1, &a2, sipType_Qt_SizeMode, &a3))
        {
            sipCpp->drawRoundedRect(*a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        qreal a4;
        qreal a5;
        Qt::SizeMode a6 = Qt::AbsoluteSize;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiidd|E", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, sipType_Qt_SizeMode, &a6))
        {
            sipCpp->drawRoundedRect(a0,a1,a2,a3,a4,a5,a6);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        qreal a1;
        qreal a2;
        Qt::SizeMode a3 = Qt::AbsoluteSize;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9dd|E", &sipSelf, sipType_QPainter, &sipCpp, sipType_QRect, &a0, &a1, &a2, sipType_Qt_SizeMode, &a3))
        {
            sipCpp->drawRoundedRect(*a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawRoundedRect, doc_QPainter_drawRoundedRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_beginNativePainting, "QPainter.beginNativePainting()");

extern "C" {static PyObject *meth_QPainter_beginNativePainting(PyObject *, PyObject *);}
static PyObject *meth_QPainter_beginNativePainting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            sipCpp->beginNativePainting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_beginNativePainting, doc_QPainter_beginNativePainting);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_endNativePainting, "QPainter.endNativePainting()");

extern "C" {static PyObject *meth_QPainter_endNativePainting(PyObject *, PyObject *);}
static PyObject *meth_QPainter_endNativePainting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            sipCpp->endNativePainting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_endNativePainting, doc_QPainter_endNativePainting);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawPixmapFragments, "QPainter.drawPixmapFragments(list-of-QPainter.PixmapFragment, QPixmap, QPainter.PixmapFragmentHints hints=0)");

extern "C" {static PyObject *meth_QPainter_drawPixmapFragments(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawPixmapFragments(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const QPixmap* a1;
        QPainter::PixmapFragmentHints a2def = 0;
        QPainter::PixmapFragmentHints* a2 = &a2def;
        int a2State = 0;
        QPainter *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_hints,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BTJ9|J1", &sipSelf, sipType_QPainter, &sipCpp, &PyList_Type, &a0, sipType_QPixmap, &a1, sipType_QPainter_PixmapFragmentHints, &a2, &a2State))
        {
            int sipIsErr = 0;

#line 526 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
        // Allocate temporary storage for the C++ conversions.
        SIP_SSIZE_T numFragments = PyList_GET_SIZE(a0);
        QPainter::PixmapFragment *fragments = new QPainter::PixmapFragment[numFragments];
        
        // Convert the fragments.
        for (SIP_SSIZE_T i = 0; i < numFragments; ++i)
        {
            void *cpp = sipForceConvertToType(PyList_GET_ITEM(a0, i), sipType_QPainter_PixmapFragment, NULL, SIP_NO_CONVERTORS, NULL, &sipIsErr);
        
            fragments[i] = *reinterpret_cast<QPainter::PixmapFragment *>(cpp);
        }
        
        if (!sipIsErr)
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmapFragments(fragments, numFragments, *a1, *a2);
            Py_END_ALLOW_THREADS
        }
        
        delete[] fragments;
#line 4671 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainter.cpp"
            sipReleaseType(a2,sipType_QPainter_PixmapFragmentHints,a2State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawPixmapFragments, doc_QPainter_drawPixmapFragments);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawStaticText, "QPainter.drawStaticText(QPointF, QStaticText)\n"
    "QPainter.drawStaticText(QPoint, QStaticText)\n"
    "QPainter.drawStaticText(int, int, QStaticText)");

extern "C" {static PyObject *meth_QPainter_drawStaticText(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawStaticText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QStaticText* a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QStaticText, &a1))
        {
            sipCpp->drawStaticText(*a0,*a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        const QStaticText* a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPoint, &a0, sipType_QStaticText, &a1))
        {
            sipCpp->drawStaticText(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QStaticText* a2;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QPainter, &sipCpp, &a0, &a1, sipType_QStaticText, &a2))
        {
            sipCpp->drawStaticText(a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawStaticText, doc_QPainter_drawStaticText);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_clipBoundingRect, "QPainter.clipBoundingRect() -> QRectF");

extern "C" {static PyObject *meth_QPainter_clipBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPainter_clipBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainter, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->clipBoundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_clipBoundingRect, doc_QPainter_clipBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPainter_drawGlyphRun, "QPainter.drawGlyphRun(QPointF, QGlyphRun)");

extern "C" {static PyObject *meth_QPainter_drawGlyphRun(PyObject *, PyObject *);}
static PyObject *meth_QPainter_drawGlyphRun(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QGlyphRun* a1;
        QPainter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QPainter, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QGlyphRun, &a1))
        {
            sipCpp->drawGlyphRun(*a0,*a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainter, sipName_drawGlyphRun, doc_QPainter_drawGlyphRun);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPainter(void *, const sipTypeDef *);}
static void *cast_QPainter(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QPainter)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPainter(void *, int);}
static void release_QPainter(void *sipCppV,int)
{
    delete reinterpret_cast<QPainter *>(sipCppV);
}


extern "C" {static void dealloc_QPainter(sipSimpleWrapper *);}
static void dealloc_QPainter(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPainter(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPainter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPainter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPainter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QPainter();

            return sipCpp;
        }
    }

    {
        QPaintDevice* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QPaintDevice, &a0))
        {
            sipCpp = new QPainter(a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QPainter[] = {
    {SIP_MLNAME_CAST(sipName___enter__), meth_QPainter___enter__, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter___enter__)},
    {SIP_MLNAME_CAST(sipName___exit__), meth_QPainter___exit__, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter___exit__)},
    {SIP_MLNAME_CAST(sipName_background), meth_QPainter_background, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_background)},
    {SIP_MLNAME_CAST(sipName_backgroundMode), meth_QPainter_backgroundMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_backgroundMode)},
    {SIP_MLNAME_CAST(sipName_begin), meth_QPainter_begin, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_begin)},
    {SIP_MLNAME_CAST(sipName_beginNativePainting), meth_QPainter_beginNativePainting, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_beginNativePainting)},
    {SIP_MLNAME_CAST(sipName_boundingRect), (PyCFunction)meth_QPainter_boundingRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_boundingRect)},
    {SIP_MLNAME_CAST(sipName_brush), meth_QPainter_brush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_brush)},
    {SIP_MLNAME_CAST(sipName_brushOrigin), meth_QPainter_brushOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_brushOrigin)},
    {SIP_MLNAME_CAST(sipName_clipBoundingRect), meth_QPainter_clipBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_clipBoundingRect)},
    {SIP_MLNAME_CAST(sipName_clipPath), meth_QPainter_clipPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_clipPath)},
    {SIP_MLNAME_CAST(sipName_clipRegion), meth_QPainter_clipRegion, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_clipRegion)},
    {SIP_MLNAME_CAST(sipName_combinedTransform), meth_QPainter_combinedTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_combinedTransform)},
    {SIP_MLNAME_CAST(sipName_compositionMode), meth_QPainter_compositionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_compositionMode)},
    {SIP_MLNAME_CAST(sipName_device), meth_QPainter_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_device)},
    {SIP_MLNAME_CAST(sipName_deviceTransform), meth_QPainter_deviceTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_deviceTransform)},
    {SIP_MLNAME_CAST(sipName_drawArc), meth_QPainter_drawArc, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawArc)},
    {SIP_MLNAME_CAST(sipName_drawChord), meth_QPainter_drawChord, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawChord)},
    {SIP_MLNAME_CAST(sipName_drawConvexPolygon), meth_QPainter_drawConvexPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawConvexPolygon)},
    {SIP_MLNAME_CAST(sipName_drawEllipse), meth_QPainter_drawEllipse, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawEllipse)},
    {SIP_MLNAME_CAST(sipName_drawGlyphRun), meth_QPainter_drawGlyphRun, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawGlyphRun)},
    {SIP_MLNAME_CAST(sipName_drawImage), (PyCFunction)meth_QPainter_drawImage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_drawImage)},
    {SIP_MLNAME_CAST(sipName_drawLine), meth_QPainter_drawLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawLine)},
    {SIP_MLNAME_CAST(sipName_drawLines), meth_QPainter_drawLines, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawLines)},
    {SIP_MLNAME_CAST(sipName_drawPath), meth_QPainter_drawPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPath)},
    {SIP_MLNAME_CAST(sipName_drawPicture), meth_QPainter_drawPicture, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPicture)},
    {SIP_MLNAME_CAST(sipName_drawPie), meth_QPainter_drawPie, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPie)},
    {SIP_MLNAME_CAST(sipName_drawPixmap), meth_QPainter_drawPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPixmap)},
    {SIP_MLNAME_CAST(sipName_drawPixmapFragments), (PyCFunction)meth_QPainter_drawPixmapFragments, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_drawPixmapFragments)},
    {SIP_MLNAME_CAST(sipName_drawPoint), meth_QPainter_drawPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPoint)},
    {SIP_MLNAME_CAST(sipName_drawPoints), meth_QPainter_drawPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPoints)},
    {SIP_MLNAME_CAST(sipName_drawPolygon), (PyCFunction)meth_QPainter_drawPolygon, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_drawPolygon)},
    {SIP_MLNAME_CAST(sipName_drawPolyline), meth_QPainter_drawPolyline, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawPolyline)},
    {SIP_MLNAME_CAST(sipName_drawRect), meth_QPainter_drawRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawRect)},
    {SIP_MLNAME_CAST(sipName_drawRects), meth_QPainter_drawRects, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawRects)},
    {SIP_MLNAME_CAST(sipName_drawRoundedRect), (PyCFunction)meth_QPainter_drawRoundedRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_drawRoundedRect)},
    {SIP_MLNAME_CAST(sipName_drawStaticText), meth_QPainter_drawStaticText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_drawStaticText)},
    {SIP_MLNAME_CAST(sipName_drawText), (PyCFunction)meth_QPainter_drawText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_drawText)},
    {SIP_MLNAME_CAST(sipName_drawTiledPixmap), (PyCFunction)meth_QPainter_drawTiledPixmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_drawTiledPixmap)},
    {SIP_MLNAME_CAST(sipName_end), meth_QPainter_end, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_end)},
    {SIP_MLNAME_CAST(sipName_endNativePainting), meth_QPainter_endNativePainting, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_endNativePainting)},
    {SIP_MLNAME_CAST(sipName_eraseRect), meth_QPainter_eraseRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_eraseRect)},
    {SIP_MLNAME_CAST(sipName_fillPath), meth_QPainter_fillPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_fillPath)},
    {SIP_MLNAME_CAST(sipName_fillRect), meth_QPainter_fillRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_fillRect)},
    {SIP_MLNAME_CAST(sipName_font), meth_QPainter_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_font)},
    {SIP_MLNAME_CAST(sipName_fontInfo), meth_QPainter_fontInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_fontInfo)},
    {SIP_MLNAME_CAST(sipName_fontMetrics), meth_QPainter_fontMetrics, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_fontMetrics)},
    {SIP_MLNAME_CAST(sipName_hasClipping), meth_QPainter_hasClipping, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_hasClipping)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QPainter_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_isActive)},
    {SIP_MLNAME_CAST(sipName_layoutDirection), meth_QPainter_layoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_layoutDirection)},
    {SIP_MLNAME_CAST(sipName_opacity), meth_QPainter_opacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_opacity)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QPainter_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_paintEngine)},
    {SIP_MLNAME_CAST(sipName_pen), meth_QPainter_pen, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_pen)},
    {SIP_MLNAME_CAST(sipName_renderHints), meth_QPainter_renderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_renderHints)},
    {SIP_MLNAME_CAST(sipName_resetTransform), meth_QPainter_resetTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_resetTransform)},
    {SIP_MLNAME_CAST(sipName_restore), meth_QPainter_restore, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_restore)},
    {SIP_MLNAME_CAST(sipName_rotate), meth_QPainter_rotate, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_rotate)},
    {SIP_MLNAME_CAST(sipName_save), meth_QPainter_save, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_save)},
    {SIP_MLNAME_CAST(sipName_scale), meth_QPainter_scale, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_scale)},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QPainter_setBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setBackground)},
    {SIP_MLNAME_CAST(sipName_setBackgroundMode), meth_QPainter_setBackgroundMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setBackgroundMode)},
    {SIP_MLNAME_CAST(sipName_setBrush), meth_QPainter_setBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setBrush)},
    {SIP_MLNAME_CAST(sipName_setBrushOrigin), meth_QPainter_setBrushOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setBrushOrigin)},
    {SIP_MLNAME_CAST(sipName_setClipPath), (PyCFunction)meth_QPainter_setClipPath, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setClipPath)},
    {SIP_MLNAME_CAST(sipName_setClipRect), (PyCFunction)meth_QPainter_setClipRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setClipRect)},
    {SIP_MLNAME_CAST(sipName_setClipRegion), (PyCFunction)meth_QPainter_setClipRegion, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setClipRegion)},
    {SIP_MLNAME_CAST(sipName_setClipping), meth_QPainter_setClipping, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setClipping)},
    {SIP_MLNAME_CAST(sipName_setCompositionMode), meth_QPainter_setCompositionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setCompositionMode)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QPainter_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setFont)},
    {SIP_MLNAME_CAST(sipName_setLayoutDirection), meth_QPainter_setLayoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setLayoutDirection)},
    {SIP_MLNAME_CAST(sipName_setOpacity), meth_QPainter_setOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setOpacity)},
    {SIP_MLNAME_CAST(sipName_setPen), meth_QPainter_setPen, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setPen)},
    {SIP_MLNAME_CAST(sipName_setRenderHint), (PyCFunction)meth_QPainter_setRenderHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setRenderHint)},
    {SIP_MLNAME_CAST(sipName_setRenderHints), (PyCFunction)meth_QPainter_setRenderHints, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setRenderHints)},
    {SIP_MLNAME_CAST(sipName_setTransform), (PyCFunction)meth_QPainter_setTransform, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setTransform)},
    {SIP_MLNAME_CAST(sipName_setViewTransformEnabled), meth_QPainter_setViewTransformEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setViewTransformEnabled)},
    {SIP_MLNAME_CAST(sipName_setViewport), meth_QPainter_setViewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setViewport)},
    {SIP_MLNAME_CAST(sipName_setWindow), meth_QPainter_setWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setWindow)},
    {SIP_MLNAME_CAST(sipName_setWorldMatrixEnabled), meth_QPainter_setWorldMatrixEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_setWorldMatrixEnabled)},
    {SIP_MLNAME_CAST(sipName_setWorldTransform), (PyCFunction)meth_QPainter_setWorldTransform, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainter_setWorldTransform)},
    {SIP_MLNAME_CAST(sipName_shear), meth_QPainter_shear, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_shear)},
    {SIP_MLNAME_CAST(sipName_strokePath), meth_QPainter_strokePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_strokePath)},
    {SIP_MLNAME_CAST(sipName_testRenderHint), meth_QPainter_testRenderHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_testRenderHint)},
    {SIP_MLNAME_CAST(sipName_transform), meth_QPainter_transform, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_transform)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QPainter_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_translate)},
    {SIP_MLNAME_CAST(sipName_viewTransformEnabled), meth_QPainter_viewTransformEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_viewTransformEnabled)},
    {SIP_MLNAME_CAST(sipName_viewport), meth_QPainter_viewport, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_viewport)},
    {SIP_MLNAME_CAST(sipName_window), meth_QPainter_window, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_window)},
    {SIP_MLNAME_CAST(sipName_worldMatrixEnabled), meth_QPainter_worldMatrixEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_worldMatrixEnabled)},
    {SIP_MLNAME_CAST(sipName_worldTransform), meth_QPainter_worldTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainter_worldTransform)}
};

static sipEnumMemberDef enummembers_QPainter[] = {
    {sipName_Antialiasing, static_cast<int>(QPainter::Antialiasing), 200},
    {sipName_CompositionMode_Clear, static_cast<int>(QPainter::CompositionMode_Clear), 196},
    {sipName_CompositionMode_ColorBurn, static_cast<int>(QPainter::CompositionMode_ColorBurn), 196},
    {sipName_CompositionMode_ColorDodge, static_cast<int>(QPainter::CompositionMode_ColorDodge), 196},
    {sipName_CompositionMode_Darken, static_cast<int>(QPainter::CompositionMode_Darken), 196},
    {sipName_CompositionMode_Destination, static_cast<int>(QPainter::CompositionMode_Destination), 196},
    {sipName_CompositionMode_DestinationAtop, static_cast<int>(QPainter::CompositionMode_DestinationAtop), 196},
    {sipName_CompositionMode_DestinationIn, static_cast<int>(QPainter::CompositionMode_DestinationIn), 196},
    {sipName_CompositionMode_DestinationOut, static_cast<int>(QPainter::CompositionMode_DestinationOut), 196},
    {sipName_CompositionMode_DestinationOver, static_cast<int>(QPainter::CompositionMode_DestinationOver), 196},
    {sipName_CompositionMode_Difference, static_cast<int>(QPainter::CompositionMode_Difference), 196},
    {sipName_CompositionMode_Exclusion, static_cast<int>(QPainter::CompositionMode_Exclusion), 196},
    {sipName_CompositionMode_HardLight, static_cast<int>(QPainter::CompositionMode_HardLight), 196},
    {sipName_CompositionMode_Lighten, static_cast<int>(QPainter::CompositionMode_Lighten), 196},
    {sipName_CompositionMode_Multiply, static_cast<int>(QPainter::CompositionMode_Multiply), 196},
    {sipName_CompositionMode_Overlay, static_cast<int>(QPainter::CompositionMode_Overlay), 196},
    {sipName_CompositionMode_Plus, static_cast<int>(QPainter::CompositionMode_Plus), 196},
    {sipName_CompositionMode_Screen, static_cast<int>(QPainter::CompositionMode_Screen), 196},
    {sipName_CompositionMode_SoftLight, static_cast<int>(QPainter::CompositionMode_SoftLight), 196},
    {sipName_CompositionMode_Source, static_cast<int>(QPainter::CompositionMode_Source), 196},
    {sipName_CompositionMode_SourceAtop, static_cast<int>(QPainter::CompositionMode_SourceAtop), 196},
    {sipName_CompositionMode_SourceIn, static_cast<int>(QPainter::CompositionMode_SourceIn), 196},
    {sipName_CompositionMode_SourceOut, static_cast<int>(QPainter::CompositionMode_SourceOut), 196},
    {sipName_CompositionMode_SourceOver, static_cast<int>(QPainter::CompositionMode_SourceOver), 196},
    {sipName_CompositionMode_Xor, static_cast<int>(QPainter::CompositionMode_Xor), 196},
    {sipName_HighQualityAntialiasing, static_cast<int>(QPainter::HighQualityAntialiasing), 200},
    {sipName_NonCosmeticDefaultPen, static_cast<int>(QPainter::NonCosmeticDefaultPen), 200},
    {sipName_OpaqueHint, static_cast<int>(QPainter::OpaqueHint), 198},
    {sipName_Qt4CompatiblePainting, static_cast<int>(QPainter::Qt4CompatiblePainting), 200},
    {sipName_RasterOp_ClearDestination, static_cast<int>(QPainter::RasterOp_ClearDestination), 196},
    {sipName_RasterOp_NotDestination, static_cast<int>(QPainter::RasterOp_NotDestination), 196},
    {sipName_RasterOp_NotSource, static_cast<int>(QPainter::RasterOp_NotSource), 196},
    {sipName_RasterOp_NotSourceAndDestination, static_cast<int>(QPainter::RasterOp_NotSourceAndDestination), 196},
    {sipName_RasterOp_NotSourceAndNotDestination, static_cast<int>(QPainter::RasterOp_NotSourceAndNotDestination), 196},
    {sipName_RasterOp_NotSourceOrDestination, static_cast<int>(QPainter::RasterOp_NotSourceOrDestination), 196},
    {sipName_RasterOp_NotSourceOrNotDestination, static_cast<int>(QPainter::RasterOp_NotSourceOrNotDestination), 196},
    {sipName_RasterOp_NotSourceXorDestination, static_cast<int>(QPainter::RasterOp_NotSourceXorDestination), 196},
    {sipName_RasterOp_SetDestination, static_cast<int>(QPainter::RasterOp_SetDestination), 196},
    {sipName_RasterOp_SourceAndDestination, static_cast<int>(QPainter::RasterOp_SourceAndDestination), 196},
    {sipName_RasterOp_SourceAndNotDestination, static_cast<int>(QPainter::RasterOp_SourceAndNotDestination), 196},
    {sipName_RasterOp_SourceOrDestination, static_cast<int>(QPainter::RasterOp_SourceOrDestination), 196},
    {sipName_RasterOp_SourceOrNotDestination, static_cast<int>(QPainter::RasterOp_SourceOrNotDestination), 196},
    {sipName_RasterOp_SourceXorDestination, static_cast<int>(QPainter::RasterOp_SourceXorDestination), 196},
    {sipName_SmoothPixmapTransform, static_cast<int>(QPainter::SmoothPixmapTransform), 200},
    {sipName_TextAntialiasing, static_cast<int>(QPainter::TextAntialiasing), 200},
};

PyDoc_STRVAR(doc_QPainter, "\1QPainter()\n"
    "QPainter(QPaintDevice)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QPainter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_NONLAZY|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPainter,
        {0}
    },
    {
        sipNameNr_QPainter,
        {0, 0, 1},
        90, methods_QPainter,
        45, enummembers_QPainter,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPainter,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QPainter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPainter,
    0,
    0,
    0,
    release_QPainter,
    cast_QPainter,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
