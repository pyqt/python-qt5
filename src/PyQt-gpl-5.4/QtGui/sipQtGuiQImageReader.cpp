/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qimagereader.sip"
#include <qimagereader.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQImageReader.cpp"

#line 30 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQImageReader.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQImageReader.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQImageReader.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQImageReader.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQImageReader.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQImageReader.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQImageReader.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qimage.sip"
#include <qimage.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQImageReader.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQImageReader.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQImageReader.cpp"


PyDoc_STRVAR(doc_QImageReader_setFormat, "QImageReader.setFormat(QByteArray)");

extern "C" {static PyObject *meth_QImageReader_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setFormat(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setFormat, doc_QImageReader_setFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_format, "QImageReader.format() -> QByteArray");

extern "C" {static PyObject *meth_QImageReader_format(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_format, doc_QImageReader_format);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_setDevice, "QImageReader.setDevice(QIODevice)");

extern "C" {static PyObject *meth_QImageReader_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice* a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setDevice, doc_QImageReader_setDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_device, "QImageReader.device() -> QIODevice");

extern "C" {static PyObject *meth_QImageReader_device(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_device, doc_QImageReader_device);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_setFileName, "QImageReader.setFileName(str)");

extern "C" {static PyObject *meth_QImageReader_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFileName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setFileName, doc_QImageReader_setFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_fileName, "QImageReader.fileName() -> str");

extern "C" {static PyObject *meth_QImageReader_fileName(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_fileName, doc_QImageReader_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_size, "QImageReader.size() -> QSize");

extern "C" {static PyObject *meth_QImageReader_size(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_size, doc_QImageReader_size);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_setClipRect, "QImageReader.setClipRect(QRect)");

extern "C" {static PyObject *meth_QImageReader_setClipRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setClipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setClipRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setClipRect, doc_QImageReader_setClipRect);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_clipRect, "QImageReader.clipRect() -> QRect");

extern "C" {static PyObject *meth_QImageReader_clipRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_clipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->clipRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_clipRect, doc_QImageReader_clipRect);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_setScaledSize, "QImageReader.setScaledSize(QSize)");

extern "C" {static PyObject *meth_QImageReader_setScaledSize(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setScaledSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setScaledSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setScaledSize, doc_QImageReader_setScaledSize);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_scaledSize, "QImageReader.scaledSize() -> QSize");

extern "C" {static PyObject *meth_QImageReader_scaledSize(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_scaledSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->scaledSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_scaledSize, doc_QImageReader_scaledSize);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_setScaledClipRect, "QImageReader.setScaledClipRect(QRect)");

extern "C" {static PyObject *meth_QImageReader_setScaledClipRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setScaledClipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setScaledClipRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setScaledClipRect, doc_QImageReader_setScaledClipRect);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_scaledClipRect, "QImageReader.scaledClipRect() -> QRect");

extern "C" {static PyObject *meth_QImageReader_scaledClipRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_scaledClipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->scaledClipRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_scaledClipRect, doc_QImageReader_scaledClipRect);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_canRead, "QImageReader.canRead() -> bool");

extern "C" {static PyObject *meth_QImageReader_canRead(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_canRead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canRead();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_canRead, doc_QImageReader_canRead);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_read, "QImageReader.read() -> QImage\n"
    "QImageReader.read(QImage) -> bool");

extern "C" {static PyObject *meth_QImageReader_read(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QImage*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->read());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    {
        QImage* a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QImage, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->read(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_read, doc_QImageReader_read);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_jumpToNextImage, "QImageReader.jumpToNextImage() -> bool");

extern "C" {static PyObject *meth_QImageReader_jumpToNextImage(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_jumpToNextImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->jumpToNextImage();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_jumpToNextImage, doc_QImageReader_jumpToNextImage);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_jumpToImage, "QImageReader.jumpToImage(int) -> bool");

extern "C" {static PyObject *meth_QImageReader_jumpToImage(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_jumpToImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImageReader, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->jumpToImage(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_jumpToImage, doc_QImageReader_jumpToImage);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_loopCount, "QImageReader.loopCount() -> int");

extern "C" {static PyObject *meth_QImageReader_loopCount(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_loopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->loopCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_loopCount, doc_QImageReader_loopCount);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_imageCount, "QImageReader.imageCount() -> int");

extern "C" {static PyObject *meth_QImageReader_imageCount(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_imageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->imageCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_imageCount, doc_QImageReader_imageCount);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_nextImageDelay, "QImageReader.nextImageDelay() -> int");

extern "C" {static PyObject *meth_QImageReader_nextImageDelay(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_nextImageDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->nextImageDelay();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_nextImageDelay, doc_QImageReader_nextImageDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_currentImageNumber, "QImageReader.currentImageNumber() -> int");

extern "C" {static PyObject *meth_QImageReader_currentImageNumber(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_currentImageNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentImageNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_currentImageNumber, doc_QImageReader_currentImageNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_currentImageRect, "QImageReader.currentImageRect() -> QRect");

extern "C" {static PyObject *meth_QImageReader_currentImageRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_currentImageRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->currentImageRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_currentImageRect, doc_QImageReader_currentImageRect);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_error, "QImageReader.error() -> QImageReader.ImageReaderError");

extern "C" {static PyObject *meth_QImageReader_error(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QImageReader::ImageReaderError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QImageReader_ImageReaderError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_error, doc_QImageReader_error);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_errorString, "QImageReader.errorString() -> str");

extern "C" {static PyObject *meth_QImageReader_errorString(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_errorString, doc_QImageReader_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_imageFormat, "QImageReader.imageFormat(str) -> QByteArray\n"
    "QImageReader.imageFormat(QIODevice) -> QByteArray\n"
    "QImageReader.imageFormat() -> QImage.Format");

extern "C" {static PyObject *meth_QImageReader_imageFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_imageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(QImageReader::imageFormat(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    {
        QIODevice* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QIODevice, &a0))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(QImageReader::imageFormat(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QImage::Format sipRes;

            sipRes = sipCpp->imageFormat();

            return sipConvertFromEnum(sipRes,sipType_QImage_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_imageFormat, doc_QImageReader_imageFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_supportedImageFormats, "QImageReader.supportedImageFormats() -> list-of-QByteArray");

extern "C" {static PyObject *meth_QImageReader_supportedImageFormats(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_supportedImageFormats(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QByteArray>*sipRes;

            sipRes = new QList<QByteArray>(QImageReader::supportedImageFormats());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_supportedImageFormats, doc_QImageReader_supportedImageFormats);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_textKeys, "QImageReader.textKeys() -> list-of-str");

extern "C" {static PyObject *meth_QImageReader_textKeys(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_textKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->textKeys());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_textKeys, doc_QImageReader_textKeys);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_text, "QImageReader.text(str) -> str");

extern "C" {static PyObject *meth_QImageReader_text(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->text(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_text, doc_QImageReader_text);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_setBackgroundColor, "QImageReader.setBackgroundColor(QColor)");

extern "C" {static PyObject *meth_QImageReader_setBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setBackgroundColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setBackgroundColor, doc_QImageReader_setBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_backgroundColor, "QImageReader.backgroundColor() -> QColor");

extern "C" {static PyObject *meth_QImageReader_backgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_backgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->backgroundColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_backgroundColor, doc_QImageReader_backgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_supportsAnimation, "QImageReader.supportsAnimation() -> bool");

extern "C" {static PyObject *meth_QImageReader_supportsAnimation(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_supportsAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->supportsAnimation();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_supportsAnimation, doc_QImageReader_supportsAnimation);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_setQuality, "QImageReader.setQuality(int)");

extern "C" {static PyObject *meth_QImageReader_setQuality(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setQuality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QImageReader, &sipCpp, &a0))
        {
            sipCpp->setQuality(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setQuality, doc_QImageReader_setQuality);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_quality, "QImageReader.quality() -> int");

extern "C" {static PyObject *meth_QImageReader_quality(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_quality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->quality();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_quality, doc_QImageReader_quality);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_supportsOption, "QImageReader.supportsOption(QImageIOHandler.ImageOption) -> bool");

extern "C" {static PyObject *meth_QImageReader_supportsOption(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_supportsOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QImageIOHandler::ImageOption a0;
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QImageReader, &sipCpp, sipType_QImageIOHandler_ImageOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->supportsOption(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_supportsOption, doc_QImageReader_supportsOption);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_setAutoDetectImageFormat, "QImageReader.setAutoDetectImageFormat(bool)");

extern "C" {static PyObject *meth_QImageReader_setAutoDetectImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setAutoDetectImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QImageReader, &sipCpp, &a0))
        {
            sipCpp->setAutoDetectImageFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setAutoDetectImageFormat, doc_QImageReader_setAutoDetectImageFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_autoDetectImageFormat, "QImageReader.autoDetectImageFormat() -> bool");

extern "C" {static PyObject *meth_QImageReader_autoDetectImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_autoDetectImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoDetectImageFormat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_autoDetectImageFormat, doc_QImageReader_autoDetectImageFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_setDecideFormatFromContent, "QImageReader.setDecideFormatFromContent(bool)");

extern "C" {static PyObject *meth_QImageReader_setDecideFormatFromContent(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setDecideFormatFromContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QImageReader, &sipCpp, &a0))
        {
            sipCpp->setDecideFormatFromContent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_setDecideFormatFromContent, doc_QImageReader_setDecideFormatFromContent);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_decideFormatFromContent, "QImageReader.decideFormatFromContent() -> bool");

extern "C" {static PyObject *meth_QImageReader_decideFormatFromContent(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_decideFormatFromContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->decideFormatFromContent();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_decideFormatFromContent, doc_QImageReader_decideFormatFromContent);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_supportedMimeTypes, "QImageReader.supportedMimeTypes() -> list-of-QByteArray");

extern "C" {static PyObject *meth_QImageReader_supportedMimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_supportedMimeTypes(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QByteArray>*sipRes;

            sipRes = new QList<QByteArray>(QImageReader::supportedMimeTypes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_supportedMimeTypes, doc_QImageReader_supportedMimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_subType, "QImageReader.subType() -> QByteArray");

extern "C" {static PyObject *meth_QImageReader_subType(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_subType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->subType());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_subType, doc_QImageReader_subType);

    return NULL;
}


PyDoc_STRVAR(doc_QImageReader_supportedSubTypes, "QImageReader.supportedSubTypes() -> list-of-QByteArray");

extern "C" {static PyObject *meth_QImageReader_supportedSubTypes(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_supportedSubTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImageReader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QImageReader, &sipCpp))
        {
            QList<QByteArray>*sipRes;

            sipRes = new QList<QByteArray>(sipCpp->supportedSubTypes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QImageReader, sipName_supportedSubTypes, doc_QImageReader_supportedSubTypes);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QImageReader(void *, const sipTypeDef *);}
static void *cast_QImageReader(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QImageReader)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QImageReader(void *, int);}
static void release_QImageReader(void *sipCppV,int)
{
    delete reinterpret_cast<QImageReader *>(sipCppV);
}


extern "C" {static void dealloc_QImageReader(sipSimpleWrapper *);}
static void dealloc_QImageReader(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QImageReader(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QImageReader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QImageReader(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QImageReader *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QImageReader();

            return sipCpp;
        }
    }

    {
        QIODevice* a0;
        const QByteArray& a1def = QByteArray();
        const QByteArray* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|J1", sipType_QIODevice, &a0, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp = new QImageReader(a0,*a1);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QByteArray& a1def = QByteArray();
        const QByteArray* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1", sipType_QString,&a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp = new QImageReader(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QImageReader[] = {
    {SIP_MLNAME_CAST(sipName_autoDetectImageFormat), meth_QImageReader_autoDetectImageFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_autoDetectImageFormat)},
    {SIP_MLNAME_CAST(sipName_backgroundColor), meth_QImageReader_backgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_backgroundColor)},
    {SIP_MLNAME_CAST(sipName_canRead), meth_QImageReader_canRead, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_canRead)},
    {SIP_MLNAME_CAST(sipName_clipRect), meth_QImageReader_clipRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_clipRect)},
    {SIP_MLNAME_CAST(sipName_currentImageNumber), meth_QImageReader_currentImageNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_currentImageNumber)},
    {SIP_MLNAME_CAST(sipName_currentImageRect), meth_QImageReader_currentImageRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_currentImageRect)},
    {SIP_MLNAME_CAST(sipName_decideFormatFromContent), meth_QImageReader_decideFormatFromContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_decideFormatFromContent)},
    {SIP_MLNAME_CAST(sipName_device), meth_QImageReader_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_device)},
    {SIP_MLNAME_CAST(sipName_error), meth_QImageReader_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QImageReader_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_errorString)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QImageReader_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_fileName)},
    {SIP_MLNAME_CAST(sipName_format), meth_QImageReader_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_format)},
    {SIP_MLNAME_CAST(sipName_imageCount), meth_QImageReader_imageCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_imageCount)},
    {SIP_MLNAME_CAST(sipName_imageFormat), meth_QImageReader_imageFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_imageFormat)},
    {SIP_MLNAME_CAST(sipName_jumpToImage), meth_QImageReader_jumpToImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_jumpToImage)},
    {SIP_MLNAME_CAST(sipName_jumpToNextImage), meth_QImageReader_jumpToNextImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_jumpToNextImage)},
    {SIP_MLNAME_CAST(sipName_loopCount), meth_QImageReader_loopCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_loopCount)},
    {SIP_MLNAME_CAST(sipName_nextImageDelay), meth_QImageReader_nextImageDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_nextImageDelay)},
    {SIP_MLNAME_CAST(sipName_quality), meth_QImageReader_quality, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_quality)},
    {SIP_MLNAME_CAST(sipName_read), meth_QImageReader_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_read)},
    {SIP_MLNAME_CAST(sipName_scaledClipRect), meth_QImageReader_scaledClipRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_scaledClipRect)},
    {SIP_MLNAME_CAST(sipName_scaledSize), meth_QImageReader_scaledSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_scaledSize)},
    {SIP_MLNAME_CAST(sipName_setAutoDetectImageFormat), meth_QImageReader_setAutoDetectImageFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setAutoDetectImageFormat)},
    {SIP_MLNAME_CAST(sipName_setBackgroundColor), meth_QImageReader_setBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setClipRect), meth_QImageReader_setClipRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setClipRect)},
    {SIP_MLNAME_CAST(sipName_setDecideFormatFromContent), meth_QImageReader_setDecideFormatFromContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setDecideFormatFromContent)},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QImageReader_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setDevice)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QImageReader_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setFileName)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QImageReader_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setFormat)},
    {SIP_MLNAME_CAST(sipName_setQuality), meth_QImageReader_setQuality, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setQuality)},
    {SIP_MLNAME_CAST(sipName_setScaledClipRect), meth_QImageReader_setScaledClipRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setScaledClipRect)},
    {SIP_MLNAME_CAST(sipName_setScaledSize), meth_QImageReader_setScaledSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_setScaledSize)},
    {SIP_MLNAME_CAST(sipName_size), meth_QImageReader_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_size)},
    {SIP_MLNAME_CAST(sipName_subType), meth_QImageReader_subType, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_subType)},
    {SIP_MLNAME_CAST(sipName_supportedImageFormats), meth_QImageReader_supportedImageFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_supportedImageFormats)},
    {SIP_MLNAME_CAST(sipName_supportedMimeTypes), meth_QImageReader_supportedMimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_supportedMimeTypes)},
    {SIP_MLNAME_CAST(sipName_supportedSubTypes), meth_QImageReader_supportedSubTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_supportedSubTypes)},
    {SIP_MLNAME_CAST(sipName_supportsAnimation), meth_QImageReader_supportsAnimation, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_supportsAnimation)},
    {SIP_MLNAME_CAST(sipName_supportsOption), meth_QImageReader_supportsOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_supportsOption)},
    {SIP_MLNAME_CAST(sipName_text), meth_QImageReader_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_text)},
    {SIP_MLNAME_CAST(sipName_textKeys), meth_QImageReader_textKeys, METH_VARARGS, SIP_MLDOC_CAST(doc_QImageReader_textKeys)}
};

static sipEnumMemberDef enummembers_QImageReader[] = {
    {sipName_DeviceError, static_cast<int>(QImageReader::DeviceError), 70},
    {sipName_FileNotFoundError, static_cast<int>(QImageReader::FileNotFoundError), 70},
    {sipName_InvalidDataError, static_cast<int>(QImageReader::InvalidDataError), 70},
    {sipName_UnknownError, static_cast<int>(QImageReader::UnknownError), 70},
    {sipName_UnsupportedFormatError, static_cast<int>(QImageReader::UnsupportedFormatError), 70},
};

PyDoc_STRVAR(doc_QImageReader, "\1QImageReader()\n"
    "QImageReader(QIODevice, QByteArray format=QByteArray())\n"
    "QImageReader(str, QByteArray format=QByteArray())");


pyqt5ClassTypeDef sipTypeDef_QtGui_QImageReader = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QImageReader,
        {0}
    },
    {
        sipNameNr_QImageReader,
        {0, 0, 1},
        41, methods_QImageReader,
        5, enummembers_QImageReader,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QImageReader,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QImageReader,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QImageReader,
    0,
    0,
    0,
    release_QImageReader,
    cast_QImageReader,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
