/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 140 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPathStroker.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpen.sip"
#include <qpen.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPathStroker.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPathStroker.cpp"
#line 233 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPathStroker.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPathStroker.cpp"


PyDoc_STRVAR(doc_QPainterPathStroker_setWidth, "QPainterPathStroker.setWidth(float)");

extern "C" {static PyObject *meth_QPainterPathStroker_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPathStroker, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setWidth, doc_QPainterPathStroker_setWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_width, "QPainterPathStroker.width() -> float");

extern "C" {static PyObject *meth_QPainterPathStroker_width(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_width, doc_QPainterPathStroker_width);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setCapStyle, "QPainterPathStroker.setCapStyle(Qt.PenCapStyle)");

extern "C" {static PyObject *meth_QPainterPathStroker_setCapStyle(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setCapStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::PenCapStyle a0;
        QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_Qt_PenCapStyle, &a0))
        {
            sipCpp->setCapStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setCapStyle, doc_QPainterPathStroker_setCapStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_capStyle, "QPainterPathStroker.capStyle() -> Qt.PenCapStyle");

extern "C" {static PyObject *meth_QPainterPathStroker_capStyle(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_capStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
            Qt::PenCapStyle sipRes;

            sipRes = sipCpp->capStyle();

            return sipConvertFromEnum(sipRes,sipType_Qt_PenCapStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_capStyle, doc_QPainterPathStroker_capStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setJoinStyle, "QPainterPathStroker.setJoinStyle(Qt.PenJoinStyle)");

extern "C" {static PyObject *meth_QPainterPathStroker_setJoinStyle(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setJoinStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::PenJoinStyle a0;
        QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_Qt_PenJoinStyle, &a0))
        {
            sipCpp->setJoinStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setJoinStyle, doc_QPainterPathStroker_setJoinStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_joinStyle, "QPainterPathStroker.joinStyle() -> Qt.PenJoinStyle");

extern "C" {static PyObject *meth_QPainterPathStroker_joinStyle(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_joinStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
            Qt::PenJoinStyle sipRes;

            sipRes = sipCpp->joinStyle();

            return sipConvertFromEnum(sipRes,sipType_Qt_PenJoinStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_joinStyle, doc_QPainterPathStroker_joinStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setMiterLimit, "QPainterPathStroker.setMiterLimit(float)");

extern "C" {static PyObject *meth_QPainterPathStroker_setMiterLimit(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setMiterLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPathStroker, &sipCpp, &a0))
        {
            sipCpp->setMiterLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setMiterLimit, doc_QPainterPathStroker_setMiterLimit);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_miterLimit, "QPainterPathStroker.miterLimit() -> float");

extern "C" {static PyObject *meth_QPainterPathStroker_miterLimit(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_miterLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->miterLimit();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_miterLimit, doc_QPainterPathStroker_miterLimit);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setCurveThreshold, "QPainterPathStroker.setCurveThreshold(float)");

extern "C" {static PyObject *meth_QPainterPathStroker_setCurveThreshold(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setCurveThreshold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPathStroker, &sipCpp, &a0))
        {
            sipCpp->setCurveThreshold(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setCurveThreshold, doc_QPainterPathStroker_setCurveThreshold);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_curveThreshold, "QPainterPathStroker.curveThreshold() -> float");

extern "C" {static PyObject *meth_QPainterPathStroker_curveThreshold(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_curveThreshold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->curveThreshold();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_curveThreshold, doc_QPainterPathStroker_curveThreshold);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setDashPattern, "QPainterPathStroker.setDashPattern(Qt.PenStyle)\n"
    "QPainterPathStroker.setDashPattern(list-of-float)");

extern "C" {static PyObject *meth_QPainterPathStroker_setDashPattern(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setDashPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::PenStyle a0;
        QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_Qt_PenStyle, &a0))
        {
            sipCpp->setDashPattern(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QVector<qreal>* a0;
        int a0State = 0;
        QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_QVector_2400,&a0, &a0State))
        {
            sipCpp->setDashPattern(*a0);
            sipReleaseType(const_cast<QVector<qreal> *>(a0),sipType_QVector_2400,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setDashPattern, doc_QPainterPathStroker_setDashPattern);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_dashPattern, "QPainterPathStroker.dashPattern() -> list-of-float");

extern "C" {static PyObject *meth_QPainterPathStroker_dashPattern(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_dashPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
            QVector<qreal>*sipRes;

            sipRes = new QVector<qreal>(sipCpp->dashPattern());

            return sipConvertFromNewType(sipRes,sipType_QVector_2400,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_dashPattern, doc_QPainterPathStroker_dashPattern);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_createStroke, "QPainterPathStroker.createStroke(QPainterPath) -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPathStroker_createStroke(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_createStroke(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        const QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPathStroker, &sipCpp, sipType_QPainterPath, &a0))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath(sipCpp->createStroke(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_createStroke, doc_QPainterPathStroker_createStroke);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_setDashOffset, "QPainterPathStroker.setDashOffset(float)");

extern "C" {static PyObject *meth_QPainterPathStroker_setDashOffset(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_setDashOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPathStroker, &sipCpp, &a0))
        {
            sipCpp->setDashOffset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_setDashOffset, doc_QPainterPathStroker_setDashOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPathStroker_dashOffset, "QPainterPathStroker.dashOffset() -> float");

extern "C" {static PyObject *meth_QPainterPathStroker_dashOffset(PyObject *, PyObject *);}
static PyObject *meth_QPainterPathStroker_dashOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPathStroker *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPathStroker, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->dashOffset();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPathStroker, sipName_dashOffset, doc_QPainterPathStroker_dashOffset);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPainterPathStroker(void *, const sipTypeDef *);}
static void *cast_QPainterPathStroker(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QPainterPathStroker)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPainterPathStroker(void *, int);}
static void release_QPainterPathStroker(void *sipCppV,int)
{
    delete reinterpret_cast<QPainterPathStroker *>(sipCppV);
}


extern "C" {static void dealloc_QPainterPathStroker(sipSimpleWrapper *);}
static void dealloc_QPainterPathStroker(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPainterPathStroker(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPainterPathStroker(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPainterPathStroker(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPainterPathStroker *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QPainterPathStroker();

            return sipCpp;
        }
    }

    {
        const QPen* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QPen, &a0, &a0State))
        {
            sipCpp = new QPainterPathStroker(*a0);
            sipReleaseType(const_cast<QPen *>(a0),sipType_QPen,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QPainterPathStroker[] = {
    {SIP_MLNAME_CAST(sipName_capStyle), meth_QPainterPathStroker_capStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_capStyle)},
    {SIP_MLNAME_CAST(sipName_createStroke), meth_QPainterPathStroker_createStroke, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_createStroke)},
    {SIP_MLNAME_CAST(sipName_curveThreshold), meth_QPainterPathStroker_curveThreshold, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_curveThreshold)},
    {SIP_MLNAME_CAST(sipName_dashOffset), meth_QPainterPathStroker_dashOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_dashOffset)},
    {SIP_MLNAME_CAST(sipName_dashPattern), meth_QPainterPathStroker_dashPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_dashPattern)},
    {SIP_MLNAME_CAST(sipName_joinStyle), meth_QPainterPathStroker_joinStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_joinStyle)},
    {SIP_MLNAME_CAST(sipName_miterLimit), meth_QPainterPathStroker_miterLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_miterLimit)},
    {SIP_MLNAME_CAST(sipName_setCapStyle), meth_QPainterPathStroker_setCapStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setCapStyle)},
    {SIP_MLNAME_CAST(sipName_setCurveThreshold), meth_QPainterPathStroker_setCurveThreshold, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setCurveThreshold)},
    {SIP_MLNAME_CAST(sipName_setDashOffset), meth_QPainterPathStroker_setDashOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setDashOffset)},
    {SIP_MLNAME_CAST(sipName_setDashPattern), meth_QPainterPathStroker_setDashPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setDashPattern)},
    {SIP_MLNAME_CAST(sipName_setJoinStyle), meth_QPainterPathStroker_setJoinStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setJoinStyle)},
    {SIP_MLNAME_CAST(sipName_setMiterLimit), meth_QPainterPathStroker_setMiterLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setMiterLimit)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QPainterPathStroker_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_setWidth)},
    {SIP_MLNAME_CAST(sipName_width), meth_QPainterPathStroker_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPathStroker_width)}
};

PyDoc_STRVAR(doc_QPainterPathStroker, "\1QPainterPathStroker()\n"
    "QPainterPathStroker(QPen)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QPainterPathStroker = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPainterPathStroker,
        {0}
    },
    {
        sipNameNr_QPainterPathStroker,
        {0, 0, 1},
        15, methods_QPainterPathStroker,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPainterPathStroker,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QPainterPathStroker,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPainterPathStroker,
    0,
    0,
    0,
    release_QPainterPathStroker,
    cast_QPainterPathStroker,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
