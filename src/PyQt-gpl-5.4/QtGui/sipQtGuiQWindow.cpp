/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qregion.sip"
#include <qregion.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 275 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 686 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 247 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 202 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 333 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 441 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 430 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 354 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 382 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 395 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 743 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qicon.sip"
#include <qicon.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"


class sipQWindow : public QWindow
{
public:
    sipQWindow(QScreen*);
    sipQWindow(QWindow*);
    virtual ~sipQWindow();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_exposeEvent(bool,QExposeEvent*);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    void sipProtectVirt_touchEvent(bool,QTouchEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void tabletEvent(QTabletEvent*);
    void touchEvent(QTouchEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    bool event(QEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void moveEvent(QMoveEvent*);
    void resizeEvent(QResizeEvent*);
    void exposeEvent(QExposeEvent*);
    QObject* focusObject() const;
    QSize size() const;
    QSurfaceFormat format() const;
    QSurface::SurfaceType surfaceType() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWindow(const sipQWindow &);
    sipQWindow &operator = (const sipQWindow &);

    char sipPyMethods[27];
};

sipQWindow::sipQWindow(QScreen*a0): QWindow(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWindow::sipQWindow(QWindow*a0): QWindow(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWindow::~sipQWindow()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWindow::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QWindow);
}

int sipQWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QWindow,_c,_id,_a);

    return _id;
}

void *sipQWindow::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QWindow, _clname, &sipCpp) ? sipCpp : QWindow::qt_metacast(_clname));
}

void sipQWindow::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWindow::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWindow::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWindow::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWindow::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtGui_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWindow::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWindow::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWindow::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtGui_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQWindow::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QWindow::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_0(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::touchEvent(QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_touchEvent);

    if (!sipMeth)
    {
        QWindow::touchEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTouchEvent*);

    sipVH_QtGui_1(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QWindow::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_2(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QWindow::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_3(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QWindow::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_3(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QWindow::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_3(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QWindow::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_3(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QWindow::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_4(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QWindow::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_4(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWindow::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWindow::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QWindow::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_5(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QWindow::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_6(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QWindow::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_7(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QWindow::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_7(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QWindow::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_8(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QWindow::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_9(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWindow::exposeEvent(QExposeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_exposeEvent);

    if (!sipMeth)
    {
        QWindow::exposeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QExposeEvent*);

    sipVH_QtGui_10(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQWindow::focusObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_focusObject);

    if (!sipMeth)
        return QWindow::focusObject();

    extern QObject* sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_11(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQWindow::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QWindow::size();

    extern QSize sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_12(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSurfaceFormat sipQWindow::format() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_format);

    if (!sipMeth)
        return QWindow::format();

    extern QSurfaceFormat sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_13(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSurface::SurfaceType sipQWindow::surfaceType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_surfaceType);

    if (!sipMeth)
        return QWindow::surfaceType();

    extern QSurface::SurfaceType sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_14(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQWindow::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQWindow::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQWindow::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQWindow::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQWindow::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQWindow::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQWindow::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQWindow::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQWindow::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQWindow::sipProtectVirt_exposeEvent(bool sipSelfWasArg,QExposeEvent*a0)
{
    (sipSelfWasArg ? QWindow::exposeEvent(a0) : exposeEvent(a0));
}

void sipQWindow::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QWindow::resizeEvent(a0) : resizeEvent(a0));
}

void sipQWindow::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWindow::moveEvent(a0) : moveEvent(a0));
}

void sipQWindow::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QWindow::focusInEvent(a0) : focusInEvent(a0));
}

void sipQWindow::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QWindow::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQWindow::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QWindow::showEvent(a0) : showEvent(a0));
}

void sipQWindow::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QWindow::hideEvent(a0) : hideEvent(a0));
}

bool sipQWindow::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QWindow::event(a0) : event(a0));
}

void sipQWindow::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QWindow::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQWindow::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QWindow::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQWindow::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWindow::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQWindow::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWindow::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQWindow::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWindow::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQWindow::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWindow::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQWindow::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QWindow::wheelEvent(a0) : wheelEvent(a0));
}

void sipQWindow::sipProtectVirt_touchEvent(bool sipSelfWasArg,QTouchEvent*a0)
{
    (sipSelfWasArg ? QWindow::touchEvent(a0) : touchEvent(a0));
}

void sipQWindow::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWindow::tabletEvent(a0) : tabletEvent(a0));
}


PyDoc_STRVAR(doc_QWindow_sender, "QWindow.sender() -> QObject");

extern "C" {static PyObject *meth_QWindow_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 911 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_sender, doc_QWindow_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_receivers, "QWindow.receivers(signal) -> int");

extern "C" {static PyObject *meth_QWindow_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 970 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindow.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_receivers, doc_QWindow_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_timerEvent, "QWindow.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QWindow_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_timerEvent, doc_QWindow_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_childEvent, "QWindow.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QWindow_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_childEvent, doc_QWindow_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_customEvent, "QWindow.customEvent(QEvent)");

extern "C" {static PyObject *meth_QWindow_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_customEvent, doc_QWindow_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_connectNotify, "QWindow.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWindow_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_connectNotify, doc_QWindow_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_disconnectNotify, "QWindow.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWindow_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_disconnectNotify, doc_QWindow_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_senderSignalIndex, "QWindow.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QWindow_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_senderSignalIndex, doc_QWindow_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_isSignalConnected, "QWindow.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QWindow_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isSignalConnected, doc_QWindow_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setSurfaceType, "QWindow.setSurfaceType(QSurface.SurfaceType)");

extern "C" {static PyObject *meth_QWindow_setSurfaceType(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setSurfaceType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSurface::SurfaceType a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSurface_SurfaceType, &a0))
        {
            sipCpp->setSurfaceType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setSurfaceType, doc_QWindow_setSurfaceType);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_surfaceType, "QWindow.surfaceType() -> QSurface.SurfaceType");

extern "C" {static PyObject *meth_QWindow_surfaceType(PyObject *, PyObject *);}
static PyObject *meth_QWindow_surfaceType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QSurface::SurfaceType sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWindow::surfaceType() : sipCpp->surfaceType());

            return sipConvertFromEnum(sipRes,sipType_QSurface_SurfaceType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_surfaceType, doc_QWindow_surfaceType);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_isVisible, "QWindow.isVisible() -> bool");

extern "C" {static PyObject *meth_QWindow_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isVisible, doc_QWindow_isVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_create, "QWindow.create()");

extern "C" {static PyObject *meth_QWindow_create(PyObject *, PyObject *);}
static PyObject *meth_QWindow_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->create();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_create, doc_QWindow_create);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_winId, "QWindow.winId() -> sip.voidptr");

extern "C" {static PyObject *meth_QWindow_winId(PyObject *, PyObject *);}
static PyObject *meth_QWindow_winId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            WId*sipRes;

            sipRes = new WId(sipCpp->winId());

            return sipConvertFromNewType(sipRes,sipType_quintptr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_winId, doc_QWindow_winId);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_parent, "QWindow.parent() -> QWindow");

extern "C" {static PyObject *meth_QWindow_parent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QWindow*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_parent, doc_QWindow_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setParent, "QWindow.setParent(QWindow)");

extern "C" {static PyObject *meth_QWindow_setParent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow, &a0))
        {
            sipCpp->setParent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setParent, doc_QWindow_setParent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_isTopLevel, "QWindow.isTopLevel() -> bool");

extern "C" {static PyObject *meth_QWindow_isTopLevel(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isTopLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTopLevel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isTopLevel, doc_QWindow_isTopLevel);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_isModal, "QWindow.isModal() -> bool");

extern "C" {static PyObject *meth_QWindow_isModal(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isModal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isModal();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isModal, doc_QWindow_isModal);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_modality, "QWindow.modality() -> Qt.WindowModality");

extern "C" {static PyObject *meth_QWindow_modality(PyObject *, PyObject *);}
static PyObject *meth_QWindow_modality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Qt::WindowModality sipRes;

            sipRes = sipCpp->modality();

            return sipConvertFromEnum(sipRes,sipType_Qt_WindowModality);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_modality, doc_QWindow_modality);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setModality, "QWindow.setModality(Qt.WindowModality)");

extern "C" {static PyObject *meth_QWindow_setModality(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setModality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::WindowModality a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_WindowModality, &a0))
        {
            sipCpp->setModality(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setModality, doc_QWindow_setModality);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setFormat, "QWindow.setFormat(QSurfaceFormat)");

extern "C" {static PyObject *meth_QWindow_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSurfaceFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFormat, doc_QWindow_setFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_format, "QWindow.format() -> QSurfaceFormat");

extern "C" {static PyObject *meth_QWindow_format(PyObject *, PyObject *);}
static PyObject *meth_QWindow_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QSurfaceFormat*sipRes;

            sipRes = new QSurfaceFormat((sipSelfWasArg ? sipCpp->QWindow::format() : sipCpp->format()));

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_format, doc_QWindow_format);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_requestedFormat, "QWindow.requestedFormat() -> QSurfaceFormat");

extern "C" {static PyObject *meth_QWindow_requestedFormat(PyObject *, PyObject *);}
static PyObject *meth_QWindow_requestedFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QSurfaceFormat*sipRes;

            sipRes = new QSurfaceFormat(sipCpp->requestedFormat());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_requestedFormat, doc_QWindow_requestedFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setFlags, "QWindow.setFlags(Qt.WindowFlags)");

extern "C" {static PyObject *meth_QWindow_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::WindowFlags* a0;
        int a0State = 0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_WindowFlags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_Qt_WindowFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFlags, doc_QWindow_setFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_flags, "QWindow.flags() -> Qt.WindowFlags");

extern "C" {static PyObject *meth_QWindow_flags(PyObject *, PyObject *);}
static PyObject *meth_QWindow_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Qt::WindowFlags*sipRes;

            sipRes = new Qt::WindowFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_flags, doc_QWindow_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_type, "QWindow.type() -> Qt.WindowType");

extern "C" {static PyObject *meth_QWindow_type(PyObject *, PyObject *);}
static PyObject *meth_QWindow_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Qt::WindowType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(sipRes,sipType_Qt_WindowType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_type, doc_QWindow_type);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_title, "QWindow.title() -> str");

extern "C" {static PyObject *meth_QWindow_title(PyObject *, PyObject *);}
static PyObject *meth_QWindow_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_title, doc_QWindow_title);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setOpacity, "QWindow.setOpacity(float)");

extern "C" {static PyObject *meth_QWindow_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setOpacity, doc_QWindow_setOpacity);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_requestActivate, "QWindow.requestActivate()");

extern "C" {static PyObject *meth_QWindow_requestActivate(PyObject *, PyObject *);}
static PyObject *meth_QWindow_requestActivate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->requestActivate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_requestActivate, doc_QWindow_requestActivate);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_isActive, "QWindow.isActive() -> bool");

extern "C" {static PyObject *meth_QWindow_isActive(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isActive, doc_QWindow_isActive);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_reportContentOrientationChange, "QWindow.reportContentOrientationChange(Qt.ScreenOrientation)");

extern "C" {static PyObject *meth_QWindow_reportContentOrientationChange(PyObject *, PyObject *);}
static PyObject *meth_QWindow_reportContentOrientationChange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ScreenOrientation a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_ScreenOrientation, &a0))
        {
            sipCpp->reportContentOrientationChange(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_reportContentOrientationChange, doc_QWindow_reportContentOrientationChange);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_contentOrientation, "QWindow.contentOrientation() -> Qt.ScreenOrientation");

extern "C" {static PyObject *meth_QWindow_contentOrientation(PyObject *, PyObject *);}
static PyObject *meth_QWindow_contentOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Qt::ScreenOrientation sipRes;

            sipRes = sipCpp->contentOrientation();

            return sipConvertFromEnum(sipRes,sipType_Qt_ScreenOrientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_contentOrientation, doc_QWindow_contentOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_devicePixelRatio, "QWindow.devicePixelRatio() -> float");

extern "C" {static PyObject *meth_QWindow_devicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QWindow_devicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->devicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_devicePixelRatio, doc_QWindow_devicePixelRatio);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_windowState, "QWindow.windowState() -> Qt.WindowState");

extern "C" {static PyObject *meth_QWindow_windowState(PyObject *, PyObject *);}
static PyObject *meth_QWindow_windowState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Qt::WindowState sipRes;

            sipRes = sipCpp->windowState();

            return sipConvertFromEnum(sipRes,sipType_Qt_WindowState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_windowState, doc_QWindow_windowState);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setWindowState, "QWindow.setWindowState(Qt.WindowState)");

extern "C" {static PyObject *meth_QWindow_setWindowState(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setWindowState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::WindowState a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_Qt_WindowState, &a0))
        {
            sipCpp->setWindowState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setWindowState, doc_QWindow_setWindowState);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setTransientParent, "QWindow.setTransientParent(QWindow)");

extern "C" {static PyObject *meth_QWindow_setTransientParent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setTransientParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow, &a0))
        {
            sipCpp->setTransientParent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setTransientParent, doc_QWindow_setTransientParent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_transientParent, "QWindow.transientParent() -> QWindow");

extern "C" {static PyObject *meth_QWindow_transientParent(PyObject *, PyObject *);}
static PyObject *meth_QWindow_transientParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QWindow*sipRes;

            sipRes = sipCpp->transientParent();

            return sipConvertFromType(sipRes,sipType_QWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_transientParent, doc_QWindow_transientParent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_isAncestorOf, "QWindow.isAncestorOf(QWindow, QWindow.AncestorMode mode=QWindow.IncludeTransients) -> bool");

extern "C" {static PyObject *meth_QWindow_isAncestorOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_isAncestorOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow* a0;
        QWindow::AncestorMode a1 = QWindow::IncludeTransients;
        const QWindow *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|E", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow, &a0, sipType_QWindow_AncestorMode, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isAncestorOf(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isAncestorOf, doc_QWindow_isAncestorOf);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_isExposed, "QWindow.isExposed() -> bool");

extern "C" {static PyObject *meth_QWindow_isExposed(PyObject *, PyObject *);}
static PyObject *meth_QWindow_isExposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isExposed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_isExposed, doc_QWindow_isExposed);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_minimumWidth, "QWindow.minimumWidth() -> int");

extern "C" {static PyObject *meth_QWindow_minimumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_minimumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_minimumWidth, doc_QWindow_minimumWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_minimumHeight, "QWindow.minimumHeight() -> int");

extern "C" {static PyObject *meth_QWindow_minimumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_minimumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumHeight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_minimumHeight, doc_QWindow_minimumHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_maximumWidth, "QWindow.maximumWidth() -> int");

extern "C" {static PyObject *meth_QWindow_maximumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_maximumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_maximumWidth, doc_QWindow_maximumWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_maximumHeight, "QWindow.maximumHeight() -> int");

extern "C" {static PyObject *meth_QWindow_maximumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_maximumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumHeight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_maximumHeight, doc_QWindow_maximumHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_minimumSize, "QWindow.minimumSize() -> QSize");

extern "C" {static PyObject *meth_QWindow_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->minimumSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_minimumSize, doc_QWindow_minimumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_maximumSize, "QWindow.maximumSize() -> QSize");

extern "C" {static PyObject *meth_QWindow_maximumSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_maximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->maximumSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_maximumSize, doc_QWindow_maximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_baseSize, "QWindow.baseSize() -> QSize");

extern "C" {static PyObject *meth_QWindow_baseSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_baseSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->baseSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_baseSize, doc_QWindow_baseSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_sizeIncrement, "QWindow.sizeIncrement() -> QSize");

extern "C" {static PyObject *meth_QWindow_sizeIncrement(PyObject *, PyObject *);}
static PyObject *meth_QWindow_sizeIncrement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->sizeIncrement());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_sizeIncrement, doc_QWindow_sizeIncrement);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setMinimumSize, "QWindow.setMinimumSize(QSize)");

extern "C" {static PyObject *meth_QWindow_setMinimumSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMinimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setMinimumSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMinimumSize, doc_QWindow_setMinimumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setMaximumSize, "QWindow.setMaximumSize(QSize)");

extern "C" {static PyObject *meth_QWindow_setMaximumSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMaximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setMaximumSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMaximumSize, doc_QWindow_setMaximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setBaseSize, "QWindow.setBaseSize(QSize)");

extern "C" {static PyObject *meth_QWindow_setBaseSize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setBaseSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setBaseSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setBaseSize, doc_QWindow_setBaseSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setSizeIncrement, "QWindow.setSizeIncrement(QSize)");

extern "C" {static PyObject *meth_QWindow_setSizeIncrement(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setSizeIncrement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setSizeIncrement(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setSizeIncrement, doc_QWindow_setSizeIncrement);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setGeometry, "QWindow.setGeometry(int, int, int, int)\n"
    "QWindow.setGeometry(QRect)");

extern "C" {static PyObject *meth_QWindow_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QWindow, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setGeometry(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setGeometry(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setGeometry, doc_QWindow_setGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_geometry, "QWindow.geometry() -> QRect");

extern "C" {static PyObject *meth_QWindow_geometry(PyObject *, PyObject *);}
static PyObject *meth_QWindow_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->geometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_geometry, doc_QWindow_geometry);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_frameMargins, "QWindow.frameMargins() -> QMargins");

extern "C" {static PyObject *meth_QWindow_frameMargins(PyObject *, PyObject *);}
static PyObject *meth_QWindow_frameMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QMargins*sipRes;

            sipRes = new QMargins(sipCpp->frameMargins());

            return sipConvertFromNewType(sipRes,sipType_QMargins,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_frameMargins, doc_QWindow_frameMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_frameGeometry, "QWindow.frameGeometry() -> QRect");

extern "C" {static PyObject *meth_QWindow_frameGeometry(PyObject *, PyObject *);}
static PyObject *meth_QWindow_frameGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->frameGeometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_frameGeometry, doc_QWindow_frameGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_framePosition, "QWindow.framePosition() -> QPoint");

extern "C" {static PyObject *meth_QWindow_framePosition(PyObject *, PyObject *);}
static PyObject *meth_QWindow_framePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->framePosition());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_framePosition, doc_QWindow_framePosition);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setFramePosition, "QWindow.setFramePosition(QPoint)");

extern "C" {static PyObject *meth_QWindow_setFramePosition(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFramePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setFramePosition(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFramePosition, doc_QWindow_setFramePosition);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_width, "QWindow.width() -> int");

extern "C" {static PyObject *meth_QWindow_width(PyObject *, PyObject *);}
static PyObject *meth_QWindow_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_width, doc_QWindow_width);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_height, "QWindow.height() -> int");

extern "C" {static PyObject *meth_QWindow_height(PyObject *, PyObject *);}
static PyObject *meth_QWindow_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_height, doc_QWindow_height);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_x, "QWindow.x() -> int");

extern "C" {static PyObject *meth_QWindow_x(PyObject *, PyObject *);}
static PyObject *meth_QWindow_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_x, doc_QWindow_x);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_y, "QWindow.y() -> int");

extern "C" {static PyObject *meth_QWindow_y(PyObject *, PyObject *);}
static PyObject *meth_QWindow_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_y, doc_QWindow_y);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_size, "QWindow.size() -> QSize");

extern "C" {static PyObject *meth_QWindow_size(PyObject *, PyObject *);}
static PyObject *meth_QWindow_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QWindow::size() : sipCpp->size()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_size, doc_QWindow_size);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_position, "QWindow.position() -> QPoint");

extern "C" {static PyObject *meth_QWindow_position(PyObject *, PyObject *);}
static PyObject *meth_QWindow_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->position());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_position, doc_QWindow_position);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setPosition, "QWindow.setPosition(QPoint)\n"
    "QWindow.setPosition(int, int)");

extern "C" {static PyObject *meth_QWindow_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->setPosition(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWindow, &sipCpp, &a0, &a1))
        {
            sipCpp->setPosition(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setPosition, doc_QWindow_setPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_resize, "QWindow.resize(QSize)\n"
    "QWindow.resize(int, int)");

extern "C" {static PyObject *meth_QWindow_resize(PyObject *, PyObject *);}
static PyObject *meth_QWindow_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->resize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWindow, &sipCpp, &a0, &a1))
        {
            sipCpp->resize(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_resize, doc_QWindow_resize);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setFilePath, "QWindow.setFilePath(str)");

extern "C" {static PyObject *meth_QWindow_setFilePath(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFilePath(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setFilePath, doc_QWindow_setFilePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_filePath, "QWindow.filePath() -> str");

extern "C" {static PyObject *meth_QWindow_filePath(PyObject *, PyObject *);}
static PyObject *meth_QWindow_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->filePath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_filePath, doc_QWindow_filePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setIcon, "QWindow.setIcon(QIcon)");

extern "C" {static PyObject *meth_QWindow_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setIcon, doc_QWindow_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_icon, "QWindow.icon() -> QIcon");

extern "C" {static PyObject *meth_QWindow_icon(PyObject *, PyObject *);}
static PyObject *meth_QWindow_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QIcon*sipRes;

            sipRes = new QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_icon, doc_QWindow_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_destroy, "QWindow.destroy()");

extern "C" {static PyObject *meth_QWindow_destroy(PyObject *, PyObject *);}
static PyObject *meth_QWindow_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->destroy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_destroy, doc_QWindow_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setKeyboardGrabEnabled, "QWindow.setKeyboardGrabEnabled(bool) -> bool");

extern "C" {static PyObject *meth_QWindow_setKeyboardGrabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setKeyboardGrabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setKeyboardGrabEnabled(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setKeyboardGrabEnabled, doc_QWindow_setKeyboardGrabEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setMouseGrabEnabled, "QWindow.setMouseGrabEnabled(bool) -> bool");

extern "C" {static PyObject *meth_QWindow_setMouseGrabEnabled(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMouseGrabEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setMouseGrabEnabled(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMouseGrabEnabled, doc_QWindow_setMouseGrabEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_screen, "QWindow.screen() -> QScreen");

extern "C" {static PyObject *meth_QWindow_screen(PyObject *, PyObject *);}
static PyObject *meth_QWindow_screen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QScreen*sipRes;

            sipRes = sipCpp->screen();

            return sipConvertFromType(sipRes,sipType_QScreen,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_screen, doc_QWindow_screen);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setScreen, "QWindow.setScreen(QScreen)");

extern "C" {static PyObject *meth_QWindow_setScreen(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScreen* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QScreen, &a0))
        {
            sipCpp->setScreen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setScreen, doc_QWindow_setScreen);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_focusObject, "QWindow.focusObject() -> QObject");

extern "C" {static PyObject *meth_QWindow_focusObject(PyObject *, PyObject *);}
static PyObject *meth_QWindow_focusObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWindow::focusObject() : sipCpp->focusObject());

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_focusObject, doc_QWindow_focusObject);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_mapToGlobal, "QWindow.mapToGlobal(QPoint) -> QPoint");

extern "C" {static PyObject *meth_QWindow_mapToGlobal(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mapToGlobal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QPoint, &a0))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->mapToGlobal(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mapToGlobal, doc_QWindow_mapToGlobal);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_mapFromGlobal, "QWindow.mapFromGlobal(QPoint) -> QPoint");

extern "C" {static PyObject *meth_QWindow_mapFromGlobal(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mapFromGlobal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QPoint, &a0))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->mapFromGlobal(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mapFromGlobal, doc_QWindow_mapFromGlobal);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_cursor, "QWindow.cursor() -> QCursor");

extern "C" {static PyObject *meth_QWindow_cursor(PyObject *, PyObject *);}
static PyObject *meth_QWindow_cursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QCursor*sipRes;

            sipRes = new QCursor(sipCpp->cursor());

            return sipConvertFromNewType(sipRes,sipType_QCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_cursor, doc_QWindow_cursor);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setCursor, "QWindow.setCursor(QCursor)");

extern "C" {static PyObject *meth_QWindow_setCursor(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCursor* a0;
        int a0State = 0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_QCursor, &a0, &a0State))
        {
            sipCpp->setCursor(*a0);
            sipReleaseType(const_cast<QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setCursor, doc_QWindow_setCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_unsetCursor, "QWindow.unsetCursor()");

extern "C" {static PyObject *meth_QWindow_unsetCursor(PyObject *, PyObject *);}
static PyObject *meth_QWindow_unsetCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->unsetCursor();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_unsetCursor, doc_QWindow_unsetCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setVisible, "QWindow.setVisible(bool)");

extern "C" {static PyObject *meth_QWindow_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setVisible, doc_QWindow_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_show, "QWindow.show()");

extern "C" {static PyObject *meth_QWindow_show(PyObject *, PyObject *);}
static PyObject *meth_QWindow_show(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->show();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_show, doc_QWindow_show);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_hide, "QWindow.hide()");

extern "C" {static PyObject *meth_QWindow_hide(PyObject *, PyObject *);}
static PyObject *meth_QWindow_hide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->hide();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_hide, doc_QWindow_hide);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_showMinimized, "QWindow.showMinimized()");

extern "C" {static PyObject *meth_QWindow_showMinimized(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showMinimized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showMinimized();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showMinimized, doc_QWindow_showMinimized);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_showMaximized, "QWindow.showMaximized()");

extern "C" {static PyObject *meth_QWindow_showMaximized(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showMaximized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showMaximized();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showMaximized, doc_QWindow_showMaximized);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_showFullScreen, "QWindow.showFullScreen()");

extern "C" {static PyObject *meth_QWindow_showFullScreen(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showFullScreen();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showFullScreen, doc_QWindow_showFullScreen);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_showNormal, "QWindow.showNormal()");

extern "C" {static PyObject *meth_QWindow_showNormal(PyObject *, PyObject *);}
static PyObject *meth_QWindow_showNormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showNormal();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showNormal, doc_QWindow_showNormal);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_close, "QWindow.close() -> bool");

extern "C" {static PyObject *meth_QWindow_close(PyObject *, PyObject *);}
static PyObject *meth_QWindow_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->close();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_close, doc_QWindow_close);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_raise_, "QWindow.raise_()");

extern "C" {static PyObject *meth_QWindow_raise_(PyObject *, PyObject *);}
static PyObject *meth_QWindow_raise_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->raise();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_raise_, doc_QWindow_raise_);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_lower, "QWindow.lower()");

extern "C" {static PyObject *meth_QWindow_lower(PyObject *, PyObject *);}
static PyObject *meth_QWindow_lower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            sipCpp->lower();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_lower, doc_QWindow_lower);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setTitle, "QWindow.setTitle(str)");

extern "C" {static PyObject *meth_QWindow_setTitle(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setTitle(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setTitle, doc_QWindow_setTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setX, "QWindow.setX(int)");

extern "C" {static PyObject *meth_QWindow_setX(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setX, doc_QWindow_setX);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setY, "QWindow.setY(int)");

extern "C" {static PyObject *meth_QWindow_setY(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setY, doc_QWindow_setY);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setWidth, "QWindow.setWidth(int)");

extern "C" {static PyObject *meth_QWindow_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setWidth, doc_QWindow_setWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setHeight, "QWindow.setHeight(int)");

extern "C" {static PyObject *meth_QWindow_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setHeight, doc_QWindow_setHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setMinimumWidth, "QWindow.setMinimumWidth(int)");

extern "C" {static PyObject *meth_QWindow_setMinimumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMinimumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setMinimumWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMinimumWidth, doc_QWindow_setMinimumWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setMinimumHeight, "QWindow.setMinimumHeight(int)");

extern "C" {static PyObject *meth_QWindow_setMinimumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMinimumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setMinimumHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMinimumHeight, doc_QWindow_setMinimumHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setMaximumWidth, "QWindow.setMaximumWidth(int)");

extern "C" {static PyObject *meth_QWindow_setMaximumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMaximumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setMaximumWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMaximumWidth, doc_QWindow_setMaximumWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setMaximumHeight, "QWindow.setMaximumHeight(int)");

extern "C" {static PyObject *meth_QWindow_setMaximumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMaximumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->setMaximumHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMaximumHeight, doc_QWindow_setMaximumHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_exposeEvent, "QWindow.exposeEvent(QExposeEvent)");

extern "C" {static PyObject *meth_QWindow_exposeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_exposeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QExposeEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QExposeEvent, &a0))
        {
            sipCpp->sipProtectVirt_exposeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_exposeEvent, doc_QWindow_exposeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_resizeEvent, "QWindow.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QWindow_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_resizeEvent, doc_QWindow_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_moveEvent, "QWindow.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QWindow_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_moveEvent, doc_QWindow_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_focusInEvent, "QWindow.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QWindow_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_focusInEvent, doc_QWindow_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_focusOutEvent, "QWindow.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QWindow_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_focusOutEvent, doc_QWindow_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_showEvent, "QWindow.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QWindow_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_showEvent, doc_QWindow_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_hideEvent, "QWindow.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QWindow_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_hideEvent, doc_QWindow_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_event, "QWindow.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QWindow_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_event, doc_QWindow_event);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_keyPressEvent, "QWindow.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QWindow_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_keyPressEvent, doc_QWindow_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_keyReleaseEvent, "QWindow.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QWindow_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_keyReleaseEvent, doc_QWindow_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_mousePressEvent, "QWindow.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QWindow_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mousePressEvent, doc_QWindow_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_mouseReleaseEvent, "QWindow.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QWindow_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mouseReleaseEvent, doc_QWindow_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_mouseDoubleClickEvent, "QWindow.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QWindow_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mouseDoubleClickEvent, doc_QWindow_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_mouseMoveEvent, "QWindow.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QWindow_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mouseMoveEvent, doc_QWindow_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_wheelEvent, "QWindow.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QWindow_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_wheelEvent, doc_QWindow_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_touchEvent, "QWindow.touchEvent(QTouchEvent)");

extern "C" {static PyObject *meth_QWindow_touchEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_touchEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTouchEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QTouchEvent, &a0))
        {
            sipCpp->sipProtectVirt_touchEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_touchEvent, doc_QWindow_touchEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_tabletEvent, "QWindow.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QWindow_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWindow_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWindow, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_tabletEvent, doc_QWindow_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_visibility, "QWindow.visibility() -> QWindow.Visibility");

extern "C" {static PyObject *meth_QWindow_visibility(PyObject *, PyObject *);}
static PyObject *meth_QWindow_visibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QWindow::Visibility sipRes;

            sipRes = sipCpp->visibility();

            return sipConvertFromEnum(sipRes,sipType_QWindow_Visibility);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_visibility, doc_QWindow_visibility);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setVisibility, "QWindow.setVisibility(QWindow.Visibility)");

extern "C" {static PyObject *meth_QWindow_setVisibility(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setVisibility(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow::Visibility a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWindow, &sipCpp, sipType_QWindow_Visibility, &a0))
        {
            sipCpp->setVisibility(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setVisibility, doc_QWindow_setVisibility);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_opacity, "QWindow.opacity() -> float");

extern "C" {static PyObject *meth_QWindow_opacity(PyObject *, PyObject *);}
static PyObject *meth_QWindow_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->opacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_opacity, doc_QWindow_opacity);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_setMask, "QWindow.setMask(QRegion)");

extern "C" {static PyObject *meth_QWindow_setMask(PyObject *, PyObject *);}
static PyObject *meth_QWindow_setMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRegion* a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWindow, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->setMask(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_setMask, doc_QWindow_setMask);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_mask, "QWindow.mask() -> QRegion");

extern "C" {static PyObject *meth_QWindow_mask(PyObject *, PyObject *);}
static PyObject *meth_QWindow_mask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindow, &sipCpp))
        {
            QRegion*sipRes;

            sipRes = new QRegion(sipCpp->mask());

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_mask, doc_QWindow_mask);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_fromWinId, "QWindow.fromWinId(sip.voidptr) -> QWindow");

extern "C" {static PyObject *meth_QWindow_fromWinId(PyObject *, PyObject *);}
static PyObject *meth_QWindow_fromWinId(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        WId* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_quintptr,&a0, &a0State))
        {
            QWindow*sipRes;

            sipRes = QWindow::fromWinId(*a0);
            sipReleaseType(a0,sipType_quintptr,a0State);

            return sipConvertFromType(sipRes,sipType_QWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_fromWinId, doc_QWindow_fromWinId);

    return NULL;
}


PyDoc_STRVAR(doc_QWindow_alert, "QWindow.alert(int)");

extern "C" {static PyObject *meth_QWindow_alert(PyObject *, PyObject *);}
static PyObject *meth_QWindow_alert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWindow, &sipCpp, &a0))
        {
            sipCpp->alert(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindow, sipName_alert, doc_QWindow_alert);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWindow(void *, const sipTypeDef *);}
static void *cast_QWindow(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWindow)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QWindow *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QSurface)->ctd_cast((QSurface *)(QWindow *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWindow(void *, int);}
static void release_QWindow(void *sipCppV,int)
{
    QWindow *sipCpp = reinterpret_cast<QWindow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWindow(sipSimpleWrapper *);}
static void dealloc_QWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWindow *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWindow(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWindow *sipCpp = 0;

    {
        QScreen* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_screen,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8", sipType_QScreen, &a0))
        {
            sipCpp = new sipQWindow(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QWindow* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QWindow, &a0, sipOwner))
        {
            sipCpp = new sipQWindow(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWindow[] = {{162, 0, 0}, {256, 255, 1}};


static PyMethodDef methods_QWindow[] = {
    {SIP_MLNAME_CAST(sipName_alert), meth_QWindow_alert, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_alert)},
    {SIP_MLNAME_CAST(sipName_baseSize), meth_QWindow_baseSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_baseSize)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QWindow_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QWindow_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_close)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QWindow_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contentOrientation), meth_QWindow_contentOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_contentOrientation)},
    {SIP_MLNAME_CAST(sipName_create), meth_QWindow_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_create)},
    {SIP_MLNAME_CAST(sipName_cursor), meth_QWindow_cursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_cursor)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QWindow_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QWindow_destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_destroy)},
    {SIP_MLNAME_CAST(sipName_devicePixelRatio), meth_QWindow_devicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_devicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QWindow_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QWindow_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_event)},
    {SIP_MLNAME_CAST(sipName_exposeEvent), (PyCFunction)meth_QWindow_exposeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_exposeEvent)},
    {SIP_MLNAME_CAST(sipName_filePath), meth_QWindow_filePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_filePath)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QWindow_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_flags)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QWindow_focusInEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusObject), meth_QWindow_focusObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_focusObject)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QWindow_focusOutEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_format), meth_QWindow_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_format)},
    {SIP_MLNAME_CAST(sipName_frameGeometry), meth_QWindow_frameGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_frameGeometry)},
    {SIP_MLNAME_CAST(sipName_frameMargins), meth_QWindow_frameMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_frameMargins)},
    {SIP_MLNAME_CAST(sipName_framePosition), meth_QWindow_framePosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_framePosition)},
    {SIP_MLNAME_CAST(sipName_fromWinId), meth_QWindow_fromWinId, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_fromWinId)},
    {SIP_MLNAME_CAST(sipName_geometry), meth_QWindow_geometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_geometry)},
    {SIP_MLNAME_CAST(sipName_height), meth_QWindow_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_height)},
    {SIP_MLNAME_CAST(sipName_hide), meth_QWindow_hide, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_hide)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QWindow_hideEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_hideEvent)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QWindow_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_icon)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QWindow_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_isActive)},
    {SIP_MLNAME_CAST(sipName_isAncestorOf), (PyCFunction)meth_QWindow_isAncestorOf, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_isAncestorOf)},
    {SIP_MLNAME_CAST(sipName_isExposed), meth_QWindow_isExposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_isExposed)},
    {SIP_MLNAME_CAST(sipName_isModal), meth_QWindow_isModal, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_isModal)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QWindow_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isTopLevel), meth_QWindow_isTopLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_isTopLevel)},
    {SIP_MLNAME_CAST(sipName_isVisible), meth_QWindow_isVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_isVisible)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QWindow_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QWindow_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_lower), meth_QWindow_lower, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_lower)},
    {SIP_MLNAME_CAST(sipName_mapFromGlobal), meth_QWindow_mapFromGlobal, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_mapFromGlobal)},
    {SIP_MLNAME_CAST(sipName_mapToGlobal), meth_QWindow_mapToGlobal, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_mapToGlobal)},
    {SIP_MLNAME_CAST(sipName_mask), meth_QWindow_mask, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_mask)},
    {SIP_MLNAME_CAST(sipName_maximumHeight), meth_QWindow_maximumHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_maximumHeight)},
    {SIP_MLNAME_CAST(sipName_maximumSize), meth_QWindow_maximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_maximumSize)},
    {SIP_MLNAME_CAST(sipName_maximumWidth), meth_QWindow_maximumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_maximumWidth)},
    {SIP_MLNAME_CAST(sipName_minimumHeight), meth_QWindow_minimumHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_minimumHeight)},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QWindow_minimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_minimumSize)},
    {SIP_MLNAME_CAST(sipName_minimumWidth), meth_QWindow_minimumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_minimumWidth)},
    {SIP_MLNAME_CAST(sipName_modality), meth_QWindow_modality, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_modality)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QWindow_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QWindow_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QWindow_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QWindow_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QWindow_moveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_moveEvent)},
    {SIP_MLNAME_CAST(sipName_opacity), meth_QWindow_opacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_opacity)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QWindow_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_parent)},
    {SIP_MLNAME_CAST(sipName_position), meth_QWindow_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_position)},
    {SIP_MLNAME_CAST(sipName_raise_), meth_QWindow_raise_, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_raise_)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QWindow_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_reportContentOrientationChange), meth_QWindow_reportContentOrientationChange, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_reportContentOrientationChange)},
    {SIP_MLNAME_CAST(sipName_requestActivate), meth_QWindow_requestActivate, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_requestActivate)},
    {SIP_MLNAME_CAST(sipName_requestedFormat), meth_QWindow_requestedFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_requestedFormat)},
    {SIP_MLNAME_CAST(sipName_resize), meth_QWindow_resize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_resize)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QWindow_resizeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_screen), meth_QWindow_screen, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_screen)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QWindow_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QWindow_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setBaseSize), meth_QWindow_setBaseSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setBaseSize)},
    {SIP_MLNAME_CAST(sipName_setCursor), meth_QWindow_setCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setCursor)},
    {SIP_MLNAME_CAST(sipName_setFilePath), meth_QWindow_setFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setFilePath)},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QWindow_setFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setFlags)},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QWindow_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setFormat)},
    {SIP_MLNAME_CAST(sipName_setFramePosition), meth_QWindow_setFramePosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setFramePosition)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QWindow_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setGeometry)},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QWindow_setHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setHeight)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QWindow_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setIcon)},
    {SIP_MLNAME_CAST(sipName_setKeyboardGrabEnabled), meth_QWindow_setKeyboardGrabEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setKeyboardGrabEnabled)},
    {SIP_MLNAME_CAST(sipName_setMask), meth_QWindow_setMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMask)},
    {SIP_MLNAME_CAST(sipName_setMaximumHeight), meth_QWindow_setMaximumHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMaximumHeight)},
    {SIP_MLNAME_CAST(sipName_setMaximumSize), meth_QWindow_setMaximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMaximumSize)},
    {SIP_MLNAME_CAST(sipName_setMaximumWidth), meth_QWindow_setMaximumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMaximumWidth)},
    {SIP_MLNAME_CAST(sipName_setMinimumHeight), meth_QWindow_setMinimumHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMinimumHeight)},
    {SIP_MLNAME_CAST(sipName_setMinimumSize), meth_QWindow_setMinimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMinimumSize)},
    {SIP_MLNAME_CAST(sipName_setMinimumWidth), meth_QWindow_setMinimumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMinimumWidth)},
    {SIP_MLNAME_CAST(sipName_setModality), meth_QWindow_setModality, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setModality)},
    {SIP_MLNAME_CAST(sipName_setMouseGrabEnabled), meth_QWindow_setMouseGrabEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setMouseGrabEnabled)},
    {SIP_MLNAME_CAST(sipName_setOpacity), meth_QWindow_setOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setOpacity)},
    {SIP_MLNAME_CAST(sipName_setParent), meth_QWindow_setParent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setParent)},
    {SIP_MLNAME_CAST(sipName_setPosition), meth_QWindow_setPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setPosition)},
    {SIP_MLNAME_CAST(sipName_setScreen), meth_QWindow_setScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setScreen)},
    {SIP_MLNAME_CAST(sipName_setSizeIncrement), meth_QWindow_setSizeIncrement, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setSizeIncrement)},
    {SIP_MLNAME_CAST(sipName_setSurfaceType), meth_QWindow_setSurfaceType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setSurfaceType)},
    {SIP_MLNAME_CAST(sipName_setTitle), meth_QWindow_setTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setTitle)},
    {SIP_MLNAME_CAST(sipName_setTransientParent), meth_QWindow_setTransientParent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setTransientParent)},
    {SIP_MLNAME_CAST(sipName_setVisibility), meth_QWindow_setVisibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setVisibility)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QWindow_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setVisible)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QWindow_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setWidth)},
    {SIP_MLNAME_CAST(sipName_setWindowState), meth_QWindow_setWindowState, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setWindowState)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QWindow_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QWindow_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_setY)},
    {SIP_MLNAME_CAST(sipName_show), meth_QWindow_show, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_show)},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QWindow_showEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_showEvent)},
    {SIP_MLNAME_CAST(sipName_showFullScreen), meth_QWindow_showFullScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_showFullScreen)},
    {SIP_MLNAME_CAST(sipName_showMaximized), meth_QWindow_showMaximized, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_showMaximized)},
    {SIP_MLNAME_CAST(sipName_showMinimized), meth_QWindow_showMinimized, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_showMinimized)},
    {SIP_MLNAME_CAST(sipName_showNormal), meth_QWindow_showNormal, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_showNormal)},
    {SIP_MLNAME_CAST(sipName_size), meth_QWindow_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_size)},
    {SIP_MLNAME_CAST(sipName_sizeIncrement), meth_QWindow_sizeIncrement, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_sizeIncrement)},
    {SIP_MLNAME_CAST(sipName_surfaceType), meth_QWindow_surfaceType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_surfaceType)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QWindow_tabletEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_tabletEvent)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QWindow_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_title), meth_QWindow_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_title)},
    {SIP_MLNAME_CAST(sipName_touchEvent), (PyCFunction)meth_QWindow_touchEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_touchEvent)},
    {SIP_MLNAME_CAST(sipName_transientParent), meth_QWindow_transientParent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_transientParent)},
    {SIP_MLNAME_CAST(sipName_type), meth_QWindow_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_type)},
    {SIP_MLNAME_CAST(sipName_unsetCursor), meth_QWindow_unsetCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_unsetCursor)},
    {SIP_MLNAME_CAST(sipName_visibility), meth_QWindow_visibility, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_visibility)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QWindow_wheelEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWindow_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_width), meth_QWindow_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_width)},
    {SIP_MLNAME_CAST(sipName_winId), meth_QWindow_winId, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_winId)},
    {SIP_MLNAME_CAST(sipName_windowState), meth_QWindow_windowState, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_windowState)},
    {SIP_MLNAME_CAST(sipName_x), meth_QWindow_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QWindow_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindow_y)}
};

static sipEnumMemberDef enummembers_QWindow[] = {
    {sipName_AutomaticVisibility, static_cast<int>(QWindow::AutomaticVisibility), 364},
    {sipName_ExcludeTransients, static_cast<int>(QWindow::ExcludeTransients), 363},
    {sipName_FullScreen, static_cast<int>(QWindow::FullScreen), 364},
    {sipName_Hidden, static_cast<int>(QWindow::Hidden), 364},
    {sipName_IncludeTransients, static_cast<int>(QWindow::IncludeTransients), 363},
    {sipName_Maximized, static_cast<int>(QWindow::Maximized), 364},
    {sipName_Minimized, static_cast<int>(QWindow::Minimized), 364},
    {sipName_Windowed, static_cast<int>(QWindow::Windowed), 364},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWindow[] = {
    {"opacityChanged(qreal)", "\1QWindow.opacityChanged[float]", 0, 0},
    {"activeChanged()", "\1QWindow.activeChanged", 0, 0},
    {"visibilityChanged(QWindow::Visibility)", "\1QWindow.visibilityChanged[QWindow.Visibility]", 0, 0},
    {"windowTitleChanged(QString)", "\1QWindow.windowTitleChanged[str]", 0, 0},
    {"focusObjectChanged(QObject*)", "\1QWindow.focusObjectChanged[QObject]", 0, 0},
    {"contentOrientationChanged(Qt::ScreenOrientation)", "\1QWindow.contentOrientationChanged[Qt.ScreenOrientation]", 0, 0},
    {"visibleChanged(bool)", "\1QWindow.visibleChanged[bool]", 0, 0},
    {"maximumHeightChanged(int)", "\1QWindow.maximumHeightChanged[int]", 0, 0},
    {"maximumWidthChanged(int)", "\1QWindow.maximumWidthChanged[int]", 0, 0},
    {"minimumHeightChanged(int)", "\1QWindow.minimumHeightChanged[int]", 0, 0},
    {"minimumWidthChanged(int)", "\1QWindow.minimumWidthChanged[int]", 0, 0},
    {"heightChanged(int)", "\1QWindow.heightChanged[int]", 0, 0},
    {"widthChanged(int)", "\1QWindow.widthChanged[int]", 0, 0},
    {"yChanged(int)", "\1QWindow.yChanged[int]", 0, 0},
    {"xChanged(int)", "\1QWindow.xChanged[int]", 0, 0},
    {"windowStateChanged(Qt::WindowState)", "\1QWindow.windowStateChanged[Qt.WindowState]", 0, 0},
    {"modalityChanged(Qt::WindowModality)", "\1QWindow.modalityChanged[Qt.WindowModality]", 0, 0},
    {"screenChanged(QScreen*)", "\1QWindow.screenChanged[QScreen]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QWindow, "\1QWindow(QScreen screen=None)\n"
    "QWindow(QWindow)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QWindow = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWindow,
        {0}
    },
    {
        sipNameNr_QWindow,
        {0, 0, 1},
        123, methods_QWindow,
        8, enummembers_QWindow,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWindow,
    -1,
    -1,
    supers_QWindow,
    0,
    init_type_QWindow,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWindow,
    0,
    0,
    0,
    release_QWindow,
    cast_QWindow,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWindow::staticMetaObject,
    0,
    signals_QWindow,
    0
};
