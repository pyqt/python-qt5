/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQSurfaceFormat.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQSurfaceFormat.cpp"
#line 133 "sip/QtCore/qpycore_qpair.sip"
#include <qpair.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQSurfaceFormat.cpp"


PyDoc_STRVAR(doc_QSurfaceFormat_setDepthBufferSize, "QSurfaceFormat.setDepthBufferSize(int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setDepthBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setDepthBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setDepthBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setDepthBufferSize, doc_QSurfaceFormat_setDepthBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_depthBufferSize, "QSurfaceFormat.depthBufferSize() -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_depthBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_depthBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depthBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_depthBufferSize, doc_QSurfaceFormat_depthBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setStencilBufferSize, "QSurfaceFormat.setStencilBufferSize(int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setStencilBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setStencilBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setStencilBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setStencilBufferSize, doc_QSurfaceFormat_setStencilBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_stencilBufferSize, "QSurfaceFormat.stencilBufferSize() -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_stencilBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_stencilBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->stencilBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_stencilBufferSize, doc_QSurfaceFormat_stencilBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setRedBufferSize, "QSurfaceFormat.setRedBufferSize(int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setRedBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setRedBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setRedBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setRedBufferSize, doc_QSurfaceFormat_setRedBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_redBufferSize, "QSurfaceFormat.redBufferSize() -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_redBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_redBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->redBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_redBufferSize, doc_QSurfaceFormat_redBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setGreenBufferSize, "QSurfaceFormat.setGreenBufferSize(int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setGreenBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setGreenBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setGreenBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setGreenBufferSize, doc_QSurfaceFormat_setGreenBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_greenBufferSize, "QSurfaceFormat.greenBufferSize() -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_greenBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_greenBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->greenBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_greenBufferSize, doc_QSurfaceFormat_greenBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setBlueBufferSize, "QSurfaceFormat.setBlueBufferSize(int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setBlueBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setBlueBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setBlueBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setBlueBufferSize, doc_QSurfaceFormat_setBlueBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_blueBufferSize, "QSurfaceFormat.blueBufferSize() -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_blueBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_blueBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blueBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_blueBufferSize, doc_QSurfaceFormat_blueBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setAlphaBufferSize, "QSurfaceFormat.setAlphaBufferSize(int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setAlphaBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setAlphaBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setAlphaBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setAlphaBufferSize, doc_QSurfaceFormat_setAlphaBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_alphaBufferSize, "QSurfaceFormat.alphaBufferSize() -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_alphaBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_alphaBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->alphaBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_alphaBufferSize, doc_QSurfaceFormat_alphaBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setSamples, "QSurfaceFormat.setSamples(int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setSamples(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setSamples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setSamples(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setSamples, doc_QSurfaceFormat_setSamples);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_samples, "QSurfaceFormat.samples() -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_samples(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_samples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->samples();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_samples, doc_QSurfaceFormat_samples);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setSwapBehavior, "QSurfaceFormat.setSwapBehavior(QSurfaceFormat.SwapBehavior)");

extern "C" {static PyObject *meth_QSurfaceFormat_setSwapBehavior(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setSwapBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSurfaceFormat::SwapBehavior a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_SwapBehavior, &a0))
        {
            sipCpp->setSwapBehavior(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setSwapBehavior, doc_QSurfaceFormat_setSwapBehavior);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_swapBehavior, "QSurfaceFormat.swapBehavior() -> QSurfaceFormat.SwapBehavior");

extern "C" {static PyObject *meth_QSurfaceFormat_swapBehavior(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_swapBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            QSurfaceFormat::SwapBehavior sipRes;

            sipRes = sipCpp->swapBehavior();

            return sipConvertFromEnum(sipRes,sipType_QSurfaceFormat_SwapBehavior);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_swapBehavior, doc_QSurfaceFormat_swapBehavior);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_hasAlpha, "QSurfaceFormat.hasAlpha() -> bool");

extern "C" {static PyObject *meth_QSurfaceFormat_hasAlpha(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_hasAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAlpha();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_hasAlpha, doc_QSurfaceFormat_hasAlpha);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setProfile, "QSurfaceFormat.setProfile(QSurfaceFormat.OpenGLContextProfile)");

extern "C" {static PyObject *meth_QSurfaceFormat_setProfile(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setProfile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSurfaceFormat::OpenGLContextProfile a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_OpenGLContextProfile, &a0))
        {
            sipCpp->setProfile(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setProfile, doc_QSurfaceFormat_setProfile);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_profile, "QSurfaceFormat.profile() -> QSurfaceFormat.OpenGLContextProfile");

extern "C" {static PyObject *meth_QSurfaceFormat_profile(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_profile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            QSurfaceFormat::OpenGLContextProfile sipRes;

            sipRes = sipCpp->profile();

            return sipConvertFromEnum(sipRes,sipType_QSurfaceFormat_OpenGLContextProfile);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_profile, doc_QSurfaceFormat_profile);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setRenderableType, "QSurfaceFormat.setRenderableType(QSurfaceFormat.RenderableType)");

extern "C" {static PyObject *meth_QSurfaceFormat_setRenderableType(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setRenderableType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSurfaceFormat::RenderableType a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_RenderableType, &a0))
        {
            sipCpp->setRenderableType(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setRenderableType, doc_QSurfaceFormat_setRenderableType);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_renderableType, "QSurfaceFormat.renderableType() -> QSurfaceFormat.RenderableType");

extern "C" {static PyObject *meth_QSurfaceFormat_renderableType(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_renderableType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            QSurfaceFormat::RenderableType sipRes;

            sipRes = sipCpp->renderableType();

            return sipConvertFromEnum(sipRes,sipType_QSurfaceFormat_RenderableType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_renderableType, doc_QSurfaceFormat_renderableType);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setMajorVersion, "QSurfaceFormat.setMajorVersion(int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setMajorVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setMajorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setMajorVersion(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setMajorVersion, doc_QSurfaceFormat_setMajorVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_majorVersion, "QSurfaceFormat.majorVersion() -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_majorVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_majorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->majorVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_majorVersion, doc_QSurfaceFormat_majorVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setMinorVersion, "QSurfaceFormat.setMinorVersion(int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setMinorVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setMinorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setMinorVersion(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setMinorVersion, doc_QSurfaceFormat_setMinorVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_minorVersion, "QSurfaceFormat.minorVersion() -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_minorVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_minorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minorVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_minorVersion, doc_QSurfaceFormat_minorVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setStereo, "QSurfaceFormat.setStereo(bool)");

extern "C" {static PyObject *meth_QSurfaceFormat_setStereo(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setStereo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setStereo(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setStereo, doc_QSurfaceFormat_setStereo);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setOption, "QSurfaceFormat.setOption(QSurfaceFormat.FormatOptions)\n"
    "QSurfaceFormat.setOption(QSurfaceFormat.FormatOption, bool on=True)");

extern "C" {static PyObject *meth_QSurfaceFormat_setOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;
        QSurfaceFormat *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            sipCpp->setOption(*a0);
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QSurfaceFormat::FormatOption a0;
        bool a1 = 1;
        QSurfaceFormat *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOption, &a0, &a1))
        {
            sipCpp->setOption(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setOption, doc_QSurfaceFormat_setOption);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_testOption, "QSurfaceFormat.testOption(QSurfaceFormat.FormatOptions) -> bool\n"
    "QSurfaceFormat.testOption(QSurfaceFormat.FormatOption) -> bool");

extern "C" {static PyObject *meth_QSurfaceFormat_testOption(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_testOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->testOption(*a0);
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QSurfaceFormat::FormatOption a0;
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->testOption(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_testOption, doc_QSurfaceFormat_testOption);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_stereo, "QSurfaceFormat.stereo() -> bool");

extern "C" {static PyObject *meth_QSurfaceFormat_stereo(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_stereo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->stereo();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_stereo, doc_QSurfaceFormat_stereo);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_version, "QSurfaceFormat.version() -> tuple-of-int-int");

extern "C" {static PyObject *meth_QSurfaceFormat_version(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            QPair<int,int>*sipRes;

            sipRes = new QPair<int,int>(sipCpp->version());

            return sipConvertFromNewType(sipRes,sipType_QPair_1800_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_version, doc_QSurfaceFormat_version);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setVersion, "QSurfaceFormat.setVersion(int, int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setVersion(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0, &a1))
        {
            sipCpp->setVersion(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setVersion, doc_QSurfaceFormat_setVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setOptions, "QSurfaceFormat.setOptions(QSurfaceFormat.FormatOptions)");

extern "C" {static PyObject *meth_QSurfaceFormat_setOptions(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSurfaceFormat, &sipCpp, sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            sipCpp->setOptions(*a0);
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setOptions, doc_QSurfaceFormat_setOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_options, "QSurfaceFormat.options() -> QSurfaceFormat.FormatOptions");

extern "C" {static PyObject *meth_QSurfaceFormat_options(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_options(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            QSurfaceFormat::FormatOptions*sipRes;

            sipRes = new QSurfaceFormat::FormatOptions(sipCpp->options());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat_FormatOptions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_options, doc_QSurfaceFormat_options);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_swapInterval, "QSurfaceFormat.swapInterval() -> int");

extern "C" {static PyObject *meth_QSurfaceFormat_swapInterval(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_swapInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSurfaceFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->swapInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_swapInterval, doc_QSurfaceFormat_swapInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setSwapInterval, "QSurfaceFormat.setSwapInterval(int)");

extern "C" {static PyObject *meth_QSurfaceFormat_setSwapInterval(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setSwapInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSurfaceFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSurfaceFormat, &sipCpp, &a0))
        {
            sipCpp->setSwapInterval(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setSwapInterval, doc_QSurfaceFormat_setSwapInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_setDefaultFormat, "QSurfaceFormat.setDefaultFormat(QSurfaceFormat)");

extern "C" {static PyObject *meth_QSurfaceFormat_setDefaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_setDefaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QSurfaceFormat, &a0))
        {
            QSurfaceFormat::setDefaultFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_setDefaultFormat, doc_QSurfaceFormat_setDefaultFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QSurfaceFormat_defaultFormat, "QSurfaceFormat.defaultFormat() -> QSurfaceFormat");

extern "C" {static PyObject *meth_QSurfaceFormat_defaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSurfaceFormat_defaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QSurfaceFormat*sipRes;

            sipRes = new QSurfaceFormat(QSurfaceFormat::defaultFormat());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSurfaceFormat, sipName_defaultFormat, doc_QSurfaceFormat_defaultFormat);

    return NULL;
}


extern "C" {static PyObject *slot_QSurfaceFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QSurfaceFormat *sipCpp = reinterpret_cast<QSurfaceFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSurfaceFormat, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QSurfaceFormat,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QSurfaceFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSurfaceFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QSurfaceFormat *sipCpp = reinterpret_cast<QSurfaceFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSurfaceFormat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSurfaceFormat, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QSurfaceFormat,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSurfaceFormat(void *, const sipTypeDef *);}
static void *cast_QSurfaceFormat(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QSurfaceFormat)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSurfaceFormat(void *, int);}
static void release_QSurfaceFormat(void *sipCppV,int)
{
    delete reinterpret_cast<QSurfaceFormat *>(sipCppV);
}


extern "C" {static void assign_QSurfaceFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QSurfaceFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QSurfaceFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QSurfaceFormat *>(sipSrc);
}


extern "C" {static void *array_QSurfaceFormat(SIP_SSIZE_T);}
static void *array_QSurfaceFormat(SIP_SSIZE_T sipNrElem)
{
    return new QSurfaceFormat[sipNrElem];
}


extern "C" {static void *copy_QSurfaceFormat(const void *, SIP_SSIZE_T);}
static void *copy_QSurfaceFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSurfaceFormat(reinterpret_cast<const QSurfaceFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSurfaceFormat(sipSimpleWrapper *);}
static void dealloc_QSurfaceFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QSurfaceFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QSurfaceFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSurfaceFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QSurfaceFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QSurfaceFormat();

            return sipCpp;
        }
    }

    {
        QSurfaceFormat::FormatOptions* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QSurfaceFormat_FormatOptions, &a0, &a0State))
        {
            sipCpp = new QSurfaceFormat(*a0);
            sipReleaseType(a0,sipType_QSurfaceFormat_FormatOptions,a0State);

            return sipCpp;
        }
    }

    {
        const QSurfaceFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSurfaceFormat, &a0))
        {
            sipCpp = new QSurfaceFormat(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSurfaceFormat[] = {
    {(void *)slot_QSurfaceFormat___eq__, eq_slot},
    {(void *)slot_QSurfaceFormat___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSurfaceFormat[] = {
    {SIP_MLNAME_CAST(sipName_alphaBufferSize), meth_QSurfaceFormat_alphaBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_alphaBufferSize)},
    {SIP_MLNAME_CAST(sipName_blueBufferSize), meth_QSurfaceFormat_blueBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_blueBufferSize)},
    {SIP_MLNAME_CAST(sipName_defaultFormat), meth_QSurfaceFormat_defaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_defaultFormat)},
    {SIP_MLNAME_CAST(sipName_depthBufferSize), meth_QSurfaceFormat_depthBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_depthBufferSize)},
    {SIP_MLNAME_CAST(sipName_greenBufferSize), meth_QSurfaceFormat_greenBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_greenBufferSize)},
    {SIP_MLNAME_CAST(sipName_hasAlpha), meth_QSurfaceFormat_hasAlpha, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_hasAlpha)},
    {SIP_MLNAME_CAST(sipName_majorVersion), meth_QSurfaceFormat_majorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_majorVersion)},
    {SIP_MLNAME_CAST(sipName_minorVersion), meth_QSurfaceFormat_minorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_minorVersion)},
    {SIP_MLNAME_CAST(sipName_options), meth_QSurfaceFormat_options, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_options)},
    {SIP_MLNAME_CAST(sipName_profile), meth_QSurfaceFormat_profile, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_profile)},
    {SIP_MLNAME_CAST(sipName_redBufferSize), meth_QSurfaceFormat_redBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_redBufferSize)},
    {SIP_MLNAME_CAST(sipName_renderableType), meth_QSurfaceFormat_renderableType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_renderableType)},
    {SIP_MLNAME_CAST(sipName_samples), meth_QSurfaceFormat_samples, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_samples)},
    {SIP_MLNAME_CAST(sipName_setAlphaBufferSize), meth_QSurfaceFormat_setAlphaBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setAlphaBufferSize)},
    {SIP_MLNAME_CAST(sipName_setBlueBufferSize), meth_QSurfaceFormat_setBlueBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setBlueBufferSize)},
    {SIP_MLNAME_CAST(sipName_setDefaultFormat), meth_QSurfaceFormat_setDefaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setDefaultFormat)},
    {SIP_MLNAME_CAST(sipName_setDepthBufferSize), meth_QSurfaceFormat_setDepthBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setDepthBufferSize)},
    {SIP_MLNAME_CAST(sipName_setGreenBufferSize), meth_QSurfaceFormat_setGreenBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setGreenBufferSize)},
    {SIP_MLNAME_CAST(sipName_setMajorVersion), meth_QSurfaceFormat_setMajorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setMajorVersion)},
    {SIP_MLNAME_CAST(sipName_setMinorVersion), meth_QSurfaceFormat_setMinorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setMinorVersion)},
    {SIP_MLNAME_CAST(sipName_setOption), (PyCFunction)meth_QSurfaceFormat_setOption, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setOption)},
    {SIP_MLNAME_CAST(sipName_setOptions), meth_QSurfaceFormat_setOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setOptions)},
    {SIP_MLNAME_CAST(sipName_setProfile), meth_QSurfaceFormat_setProfile, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setProfile)},
    {SIP_MLNAME_CAST(sipName_setRedBufferSize), meth_QSurfaceFormat_setRedBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setRedBufferSize)},
    {SIP_MLNAME_CAST(sipName_setRenderableType), meth_QSurfaceFormat_setRenderableType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setRenderableType)},
    {SIP_MLNAME_CAST(sipName_setSamples), meth_QSurfaceFormat_setSamples, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setSamples)},
    {SIP_MLNAME_CAST(sipName_setStencilBufferSize), meth_QSurfaceFormat_setStencilBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setStencilBufferSize)},
    {SIP_MLNAME_CAST(sipName_setStereo), meth_QSurfaceFormat_setStereo, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setStereo)},
    {SIP_MLNAME_CAST(sipName_setSwapBehavior), meth_QSurfaceFormat_setSwapBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setSwapBehavior)},
    {SIP_MLNAME_CAST(sipName_setSwapInterval), meth_QSurfaceFormat_setSwapInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setSwapInterval)},
    {SIP_MLNAME_CAST(sipName_setVersion), meth_QSurfaceFormat_setVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_setVersion)},
    {SIP_MLNAME_CAST(sipName_stencilBufferSize), meth_QSurfaceFormat_stencilBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_stencilBufferSize)},
    {SIP_MLNAME_CAST(sipName_stereo), meth_QSurfaceFormat_stereo, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_stereo)},
    {SIP_MLNAME_CAST(sipName_swapBehavior), meth_QSurfaceFormat_swapBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_swapBehavior)},
    {SIP_MLNAME_CAST(sipName_swapInterval), meth_QSurfaceFormat_swapInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_swapInterval)},
    {SIP_MLNAME_CAST(sipName_testOption), meth_QSurfaceFormat_testOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_testOption)},
    {SIP_MLNAME_CAST(sipName_version), meth_QSurfaceFormat_version, METH_VARARGS, SIP_MLDOC_CAST(doc_QSurfaceFormat_version)}
};

static sipEnumMemberDef enummembers_QSurfaceFormat[] = {
    {sipName_CompatibilityProfile, static_cast<int>(QSurfaceFormat::CompatibilityProfile), 262},
    {sipName_CoreProfile, static_cast<int>(QSurfaceFormat::CoreProfile), 262},
    {sipName_DebugContext, static_cast<int>(QSurfaceFormat::DebugContext), 260},
    {sipName_DefaultRenderableType, static_cast<int>(QSurfaceFormat::DefaultRenderableType), 263},
    {sipName_DefaultSwapBehavior, static_cast<int>(QSurfaceFormat::DefaultSwapBehavior), 264},
    {sipName_DeprecatedFunctions, static_cast<int>(QSurfaceFormat::DeprecatedFunctions), 260},
    {sipName_DoubleBuffer, static_cast<int>(QSurfaceFormat::DoubleBuffer), 264},
    {sipName_NoProfile, static_cast<int>(QSurfaceFormat::NoProfile), 262},
    {sipName_OpenGL, static_cast<int>(QSurfaceFormat::OpenGL), 263},
    {sipName_OpenGLES, static_cast<int>(QSurfaceFormat::OpenGLES), 263},
    {sipName_OpenVG, static_cast<int>(QSurfaceFormat::OpenVG), 263},
    {sipName_SingleBuffer, static_cast<int>(QSurfaceFormat::SingleBuffer), 264},
    {sipName_StereoBuffers, static_cast<int>(QSurfaceFormat::StereoBuffers), 260},
    {sipName_TripleBuffer, static_cast<int>(QSurfaceFormat::TripleBuffer), 264},
};

PyDoc_STRVAR(doc_QSurfaceFormat, "\1QSurfaceFormat()\n"
    "QSurfaceFormat(QSurfaceFormat.FormatOptions)\n"
    "QSurfaceFormat(QSurfaceFormat)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QSurfaceFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSurfaceFormat,
        {0}
    },
    {
        sipNameNr_QSurfaceFormat,
        {0, 0, 1},
        37, methods_QSurfaceFormat,
        14, enummembers_QSurfaceFormat,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSurfaceFormat,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QSurfaceFormat,
    init_type_QSurfaceFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSurfaceFormat,
    assign_QSurfaceFormat,
    array_QSurfaceFormat,
    copy_QSurfaceFormat,
    release_QSurfaceFormat,
    cast_QSurfaceFormat,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
