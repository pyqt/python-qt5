/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 50 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 119 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qpycore_qset.sip"
#include <qset.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"


class sipQOpenGLContext : public QOpenGLContext
{
public:
    sipQOpenGLContext(QObject*);
    virtual ~sipQOpenGLContext();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLContext(const sipQOpenGLContext &);
    sipQOpenGLContext &operator = (const sipQOpenGLContext &);

    char sipPyMethods[7];
};

sipQOpenGLContext::sipQOpenGLContext(QObject*a0): QOpenGLContext(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLContext::~sipQOpenGLContext()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQOpenGLContext::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLContext);
}

int sipQOpenGLContext::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QOpenGLContext::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLContext,_c,_id,_a);

    return _id;
}

void *sipQOpenGLContext::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLContext, _clname, &sipCpp) ? sipCpp : QOpenGLContext::qt_metacast(_clname));
}

void sipQOpenGLContext::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QOpenGLContext::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLContext::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QOpenGLContext::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLContext::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QOpenGLContext::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLContext::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QOpenGLContext::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtGui_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLContext::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QOpenGLContext::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQOpenGLContext::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QOpenGLContext::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtGui_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQOpenGLContext::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QOpenGLContext::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQOpenGLContext::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQOpenGLContext::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQOpenGLContext::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQOpenGLContext::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQOpenGLContext::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQOpenGLContext::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQOpenGLContext::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQOpenGLContext::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQOpenGLContext::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QOpenGLContext_sender, "QOpenGLContext.sender() -> QObject");

extern "C" {static PyObject *meth_QOpenGLContext_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQOpenGLContext *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 384 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_sender, doc_QOpenGLContext_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_receivers, "QOpenGLContext.receivers(signal) -> int");

extern "C" {static PyObject *meth_QOpenGLContext_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQOpenGLContext *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QOpenGLContext, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 443 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_receivers, doc_QOpenGLContext_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_timerEvent, "QOpenGLContext.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QOpenGLContext_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQOpenGLContext *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_timerEvent, doc_QOpenGLContext_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_childEvent, "QOpenGLContext.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QOpenGLContext_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQOpenGLContext *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_childEvent, doc_QOpenGLContext_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_customEvent, "QOpenGLContext.customEvent(QEvent)");

extern "C" {static PyObject *meth_QOpenGLContext_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQOpenGLContext *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_customEvent, doc_QOpenGLContext_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_connectNotify, "QOpenGLContext.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QOpenGLContext_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQOpenGLContext *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_connectNotify, doc_QOpenGLContext_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_disconnectNotify, "QOpenGLContext.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QOpenGLContext_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQOpenGLContext *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_disconnectNotify, doc_QOpenGLContext_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_senderSignalIndex, "QOpenGLContext.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QOpenGLContext_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQOpenGLContext *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_senderSignalIndex, doc_QOpenGLContext_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_isSignalConnected, "QOpenGLContext.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQOpenGLContext *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_isSignalConnected, doc_QOpenGLContext_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_setFormat, "QOpenGLContext.setFormat(QSurfaceFormat)");

extern "C" {static PyObject *meth_QOpenGLContext_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSurfaceFormat* a0;
        QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QSurfaceFormat, &a0))
        {
            sipCpp->setFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_setFormat, doc_QOpenGLContext_setFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_setShareContext, "QOpenGLContext.setShareContext(QOpenGLContext)");

extern "C" {static PyObject *meth_QOpenGLContext_setShareContext(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_setShareContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLContext* a0;
        QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QOpenGLContext, &a0))
        {
            sipCpp->setShareContext(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_setShareContext, doc_QOpenGLContext_setShareContext);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_setScreen, "QOpenGLContext.setScreen(QScreen)");

extern "C" {static PyObject *meth_QOpenGLContext_setScreen(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_setScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScreen* a0;
        QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QScreen, &a0))
        {
            sipCpp->setScreen(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_setScreen, doc_QOpenGLContext_setScreen);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_create, "QOpenGLContext.create() -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_create(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->create();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_create, doc_QOpenGLContext_create);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_isValid, "QOpenGLContext.isValid() -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_isValid(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_isValid, doc_QOpenGLContext_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_format, "QOpenGLContext.format() -> QSurfaceFormat");

extern "C" {static PyObject *meth_QOpenGLContext_format(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_format(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            QSurfaceFormat*sipRes;

            sipRes = new QSurfaceFormat(sipCpp->format());

            return sipConvertFromNewType(sipRes,sipType_QSurfaceFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_format, doc_QOpenGLContext_format);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_shareContext, "QOpenGLContext.shareContext() -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLContext_shareContext(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_shareContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            QOpenGLContext*sipRes;

            sipRes = sipCpp->shareContext();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_shareContext, doc_QOpenGLContext_shareContext);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_shareGroup, "QOpenGLContext.shareGroup() -> QOpenGLContextGroup");

extern "C" {static PyObject *meth_QOpenGLContext_shareGroup(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_shareGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            QOpenGLContextGroup*sipRes;

            sipRes = sipCpp->shareGroup();

            return sipConvertFromType(sipRes,sipType_QOpenGLContextGroup,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_shareGroup, doc_QOpenGLContext_shareGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_screen, "QOpenGLContext.screen() -> QScreen");

extern "C" {static PyObject *meth_QOpenGLContext_screen(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_screen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            QScreen*sipRes;

            sipRes = sipCpp->screen();

            return sipConvertFromType(sipRes,sipType_QScreen,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_screen, doc_QOpenGLContext_screen);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_defaultFramebufferObject, "QOpenGLContext.defaultFramebufferObject() -> int");

extern "C" {static PyObject *meth_QOpenGLContext_defaultFramebufferObject(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_defaultFramebufferObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            GLuint sipRes;

            sipRes = sipCpp->defaultFramebufferObject();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_defaultFramebufferObject, doc_QOpenGLContext_defaultFramebufferObject);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_makeCurrent, "QOpenGLContext.makeCurrent(QSurface) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_makeCurrent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_makeCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSurface* a0;
        QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QSurface, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->makeCurrent(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_makeCurrent, doc_QOpenGLContext_makeCurrent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_doneCurrent, "QOpenGLContext.doneCurrent()");

extern "C" {static PyObject *meth_QOpenGLContext_doneCurrent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_doneCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            sipCpp->doneCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_doneCurrent, doc_QOpenGLContext_doneCurrent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_swapBuffers, "QOpenGLContext.swapBuffers(QSurface)");

extern "C" {static PyObject *meth_QOpenGLContext_swapBuffers(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_swapBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSurface* a0;
        QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QSurface, &a0))
        {
            sipCpp->swapBuffers(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_swapBuffers, doc_QOpenGLContext_swapBuffers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_surface, "QOpenGLContext.surface() -> QSurface");

extern "C" {static PyObject *meth_QOpenGLContext_surface(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_surface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            QSurface*sipRes;

            sipRes = sipCpp->surface();

            return sipConvertFromType(sipRes,sipType_QSurface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_surface, doc_QOpenGLContext_surface);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_currentContext, "QOpenGLContext.currentContext() -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLContext_currentContext(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_currentContext(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QOpenGLContext*sipRes;

            sipRes = QOpenGLContext::currentContext();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_currentContext, doc_QOpenGLContext_currentContext);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_areSharing, "QOpenGLContext.areSharing(QOpenGLContext, QOpenGLContext) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_areSharing(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_areSharing(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLContext* a0;
        QOpenGLContext* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QOpenGLContext, &a0, sipType_QOpenGLContext, &a1))
        {
            bool sipRes;

            sipRes = QOpenGLContext::areSharing(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_areSharing, doc_QOpenGLContext_areSharing);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_extensions, "QOpenGLContext.extensions() -> set-of-QByteArray");

extern "C" {static PyObject *meth_QOpenGLContext_extensions(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_extensions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            QSet<QByteArray>*sipRes;

            sipRes = new QSet<QByteArray>(sipCpp->extensions());

            return sipConvertFromNewType(sipRes,sipType_QSet_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_extensions, doc_QOpenGLContext_extensions);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_hasExtension, "QOpenGLContext.hasExtension(QByteArray) -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_hasExtension(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_hasExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasExtension(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_hasExtension, doc_QOpenGLContext_hasExtension);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_versionFunctions, "QOpenGLContext.versionFunctions(QOpenGLVersionProfile versionProfile=None) -> object");

extern "C" {static PyObject *meth_QOpenGLContext_versionFunctions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_versionFunctions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLVersionProfile* a0 = 0;
        const QOpenGLContext *sipCpp;

        static const char *sipKwdList[] = {
            sipName_versionProfile,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J8", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QOpenGLVersionProfile, &a0))
        {
            PyObject * sipRes = 0;

#line 82 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qopenglcontext.sip"
        sipRes = qpyopengl_version_functions(sipCpp, sipSelf, a0);
#line 1168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLContext.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_versionFunctions, doc_QOpenGLContext_versionFunctions);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_openGLModuleHandle, "QOpenGLContext.openGLModuleHandle() -> sip.voidptr");

extern "C" {static PyObject *meth_QOpenGLContext_openGLModuleHandle(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_openGLModuleHandle(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            void*sipRes;

            sipRes = QOpenGLContext::openGLModuleHandle();

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_openGLModuleHandle, doc_QOpenGLContext_openGLModuleHandle);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_openGLModuleType, "QOpenGLContext.openGLModuleType() -> QOpenGLContext.OpenGLModuleType");

extern "C" {static PyObject *meth_QOpenGLContext_openGLModuleType(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_openGLModuleType(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QOpenGLContext::OpenGLModuleType sipRes;

            sipRes = QOpenGLContext::openGLModuleType();

            return sipConvertFromEnum(sipRes,sipType_QOpenGLContext_OpenGLModuleType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_openGLModuleType, doc_QOpenGLContext_openGLModuleType);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_isOpenGLES, "QOpenGLContext.isOpenGLES() -> bool");

extern "C" {static PyObject *meth_QOpenGLContext_isOpenGLES(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_isOpenGLES(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOpenGLES();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_isOpenGLES, doc_QOpenGLContext_isOpenGLES);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_setNativeHandle, "QOpenGLContext.setNativeHandle(QVariant)");

extern "C" {static PyObject *meth_QOpenGLContext_setNativeHandle(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_setNativeHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant* a0;
        int a0State = 0;
        QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QOpenGLContext, &sipCpp, sipType_QVariant, &a0, &a0State))
        {
            sipCpp->setNativeHandle(*a0);
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_setNativeHandle, doc_QOpenGLContext_setNativeHandle);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLContext_nativeHandle, "QOpenGLContext.nativeHandle() -> QVariant");

extern "C" {static PyObject *meth_QOpenGLContext_nativeHandle(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLContext_nativeHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLContext, &sipCpp))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->nativeHandle());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLContext, sipName_nativeHandle, doc_QOpenGLContext_nativeHandle);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QOpenGLContext(void *, const sipTypeDef *);}
static void *cast_QOpenGLContext(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QOpenGLContext)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QOpenGLContext *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLContext(void *, int);}
static void release_QOpenGLContext(void *sipCppV,int)
{
    QOpenGLContext *sipCpp = reinterpret_cast<QOpenGLContext *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOpenGLContext(sipSimpleWrapper *);}
static void dealloc_QOpenGLContext(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQOpenGLContext *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QOpenGLContext(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QOpenGLContext(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLContext(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLContext *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQOpenGLContext(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLContext[] = {{162, 0, 1}};


static PyMethodDef methods_QOpenGLContext[] = {
    {SIP_MLNAME_CAST(sipName_areSharing), meth_QOpenGLContext_areSharing, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_areSharing)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QOpenGLContext_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QOpenGLContext_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), meth_QOpenGLContext_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_create)},
    {SIP_MLNAME_CAST(sipName_currentContext), meth_QOpenGLContext_currentContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_currentContext)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QOpenGLContext_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultFramebufferObject), meth_QOpenGLContext_defaultFramebufferObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_defaultFramebufferObject)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QOpenGLContext_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_doneCurrent), meth_QOpenGLContext_doneCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_doneCurrent)},
    {SIP_MLNAME_CAST(sipName_extensions), meth_QOpenGLContext_extensions, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_extensions)},
    {SIP_MLNAME_CAST(sipName_format), meth_QOpenGLContext_format, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_format)},
    {SIP_MLNAME_CAST(sipName_hasExtension), meth_QOpenGLContext_hasExtension, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_hasExtension)},
    {SIP_MLNAME_CAST(sipName_isOpenGLES), meth_QOpenGLContext_isOpenGLES, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_isOpenGLES)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QOpenGLContext_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QOpenGLContext_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_isValid)},
    {SIP_MLNAME_CAST(sipName_makeCurrent), meth_QOpenGLContext_makeCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_makeCurrent)},
    {SIP_MLNAME_CAST(sipName_nativeHandle), meth_QOpenGLContext_nativeHandle, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_nativeHandle)},
    {SIP_MLNAME_CAST(sipName_openGLModuleHandle), meth_QOpenGLContext_openGLModuleHandle, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_openGLModuleHandle)},
    {SIP_MLNAME_CAST(sipName_openGLModuleType), meth_QOpenGLContext_openGLModuleType, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_openGLModuleType)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QOpenGLContext_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_screen), meth_QOpenGLContext_screen, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_screen)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QOpenGLContext_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QOpenGLContext_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QOpenGLContext_setFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_setFormat)},
    {SIP_MLNAME_CAST(sipName_setNativeHandle), meth_QOpenGLContext_setNativeHandle, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_setNativeHandle)},
    {SIP_MLNAME_CAST(sipName_setScreen), meth_QOpenGLContext_setScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_setScreen)},
    {SIP_MLNAME_CAST(sipName_setShareContext), meth_QOpenGLContext_setShareContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_setShareContext)},
    {SIP_MLNAME_CAST(sipName_shareContext), meth_QOpenGLContext_shareContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_shareContext)},
    {SIP_MLNAME_CAST(sipName_shareGroup), meth_QOpenGLContext_shareGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_shareGroup)},
    {SIP_MLNAME_CAST(sipName_surface), meth_QOpenGLContext_surface, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_surface)},
    {SIP_MLNAME_CAST(sipName_swapBuffers), meth_QOpenGLContext_swapBuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLContext_swapBuffers)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QOpenGLContext_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_versionFunctions), (PyCFunction)meth_QOpenGLContext_versionFunctions, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLContext_versionFunctions)}
};

static sipEnumMemberDef enummembers_QOpenGLContext[] = {
    {sipName_LibGL, static_cast<int>(QOpenGLContext::LibGL), 128},
    {sipName_LibGLES, static_cast<int>(QOpenGLContext::LibGLES), 128},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QOpenGLContext[] = {
    {"aboutToBeDestroyed()", "\1QOpenGLContext.aboutToBeDestroyed", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QOpenGLContext, "\1QOpenGLContext(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QOpenGLContext = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLContext,
        {0}
    },
    {
        sipNameNr_QOpenGLContext,
        {0, 0, 1},
        33, methods_QOpenGLContext,
        2, enummembers_QOpenGLContext,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOpenGLContext,
    -1,
    -1,
    supers_QOpenGLContext,
    0,
    init_type_QOpenGLContext,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOpenGLContext,
    0,
    0,
    0,
    release_QOpenGLContext,
    cast_QOpenGLContext,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QOpenGLContext::staticMetaObject,
    0,
    signals_QOpenGLContext,
    0
};
