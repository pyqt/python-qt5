/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 232 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQHoverEvent.cpp"

#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQHoverEvent.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQHoverEvent.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQHoverEvent.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQHoverEvent.cpp"


class sipQHoverEvent : public QHoverEvent
{
public:
    sipQHoverEvent(QEvent::Type,const QPointF&,const QPointF&,Qt::KeyboardModifiers);
    sipQHoverEvent(const QHoverEvent&);
    ~sipQHoverEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHoverEvent(const sipQHoverEvent &);
    sipQHoverEvent &operator = (const sipQHoverEvent &);
};

sipQHoverEvent::sipQHoverEvent(QEvent::Type a0,const QPointF& a1,const QPointF& a2,Qt::KeyboardModifiers a3): QHoverEvent(a0,a1,a2,a3), sipPySelf(0)
{
}

sipQHoverEvent::sipQHoverEvent(const QHoverEvent& a0): QHoverEvent(a0), sipPySelf(0)
{
}

sipQHoverEvent::~sipQHoverEvent()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_QHoverEvent_pos, "QHoverEvent.pos() -> QPoint");

extern "C" {static PyObject *meth_QHoverEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QHoverEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHoverEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHoverEvent, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHoverEvent, sipName_pos, doc_QHoverEvent_pos);

    return NULL;
}


PyDoc_STRVAR(doc_QHoverEvent_oldPos, "QHoverEvent.oldPos() -> QPoint");

extern "C" {static PyObject *meth_QHoverEvent_oldPos(PyObject *, PyObject *);}
static PyObject *meth_QHoverEvent_oldPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHoverEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHoverEvent, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->oldPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHoverEvent, sipName_oldPos, doc_QHoverEvent_oldPos);

    return NULL;
}


PyDoc_STRVAR(doc_QHoverEvent_posF, "QHoverEvent.posF() -> QPointF");

extern "C" {static PyObject *meth_QHoverEvent_posF(PyObject *, PyObject *);}
static PyObject *meth_QHoverEvent_posF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHoverEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHoverEvent, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->posF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHoverEvent, sipName_posF, doc_QHoverEvent_posF);

    return NULL;
}


PyDoc_STRVAR(doc_QHoverEvent_oldPosF, "QHoverEvent.oldPosF() -> QPointF");

extern "C" {static PyObject *meth_QHoverEvent_oldPosF(PyObject *, PyObject *);}
static PyObject *meth_QHoverEvent_oldPosF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHoverEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHoverEvent, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->oldPosF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHoverEvent, sipName_oldPosF, doc_QHoverEvent_oldPosF);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QHoverEvent(void *, const sipTypeDef *);}
static void *cast_QHoverEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QHoverEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QInputEvent)->ctd_cast((QInputEvent *)(QHoverEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHoverEvent(void *, int);}
static void release_QHoverEvent(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQHoverEvent *>(sipCppV);
    else
        delete reinterpret_cast<QHoverEvent *>(sipCppV);
}


extern "C" {static void dealloc_QHoverEvent(sipSimpleWrapper *);}
static void dealloc_QHoverEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQHoverEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QHoverEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QHoverEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHoverEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQHoverEvent *sipCpp = 0;

    {
        QEvent::Type a0;
        const QPointF* a1;
        int a1State = 0;
        const QPointF* a2;
        int a2State = 0;
        Qt::KeyboardModifiers a3def = Qt::NoModifier;
        Qt::KeyboardModifiers* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_modifiers,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EJ1J1|J1", sipType_QEvent_Type, &a0, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State, sipType_Qt_KeyboardModifiers, &a3, &a3State))
        {
            sipCpp = new sipQHoverEvent(a0,*a1,*a2,*a3);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast<QPointF *>(a2),sipType_QPointF,a2State);
            sipReleaseType(a3,sipType_Qt_KeyboardModifiers,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QHoverEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QHoverEvent, &a0))
        {
            sipCpp = new sipQHoverEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHoverEvent[] = {{73, 255, 1}};


static PyMethodDef methods_QHoverEvent[] = {
    {SIP_MLNAME_CAST(sipName_oldPos), meth_QHoverEvent_oldPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QHoverEvent_oldPos)},
    {SIP_MLNAME_CAST(sipName_oldPosF), meth_QHoverEvent_oldPosF, METH_VARARGS, SIP_MLDOC_CAST(doc_QHoverEvent_oldPosF)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QHoverEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QHoverEvent_pos)},
    {SIP_MLNAME_CAST(sipName_posF), meth_QHoverEvent_posF, METH_VARARGS, SIP_MLDOC_CAST(doc_QHoverEvent_posF)}
};

PyDoc_STRVAR(doc_QHoverEvent, "\1QHoverEvent(QEvent.Type, QPointF, QPointF, Qt.KeyboardModifiers modifiers=Qt.NoModifier)\n"
    "QHoverEvent(QHoverEvent)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QHoverEvent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QHoverEvent,
        {0}
    },
    {
        sipNameNr_QHoverEvent,
        {0, 0, 1},
        4, methods_QHoverEvent,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QHoverEvent,
    -1,
    -1,
    supers_QHoverEvent,
    0,
    init_type_QHoverEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHoverEvent,
    0,
    0,
    0,
    release_QHoverEvent,
    cast_QHoverEvent,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
