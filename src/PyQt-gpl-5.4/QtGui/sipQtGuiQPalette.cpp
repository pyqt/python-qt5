/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPalette.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPalette.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPalette.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPalette.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPalette.cpp"


PyDoc_STRVAR(doc_QPalette_currentColorGroup, "QPalette.currentColorGroup() -> QPalette.ColorGroup");

extern "C" {static PyObject *meth_QPalette_currentColorGroup(PyObject *, PyObject *);}
static PyObject *meth_QPalette_currentColorGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QPalette::ColorGroup sipRes;

            sipRes = sipCpp->currentColorGroup();

            return sipConvertFromEnum(sipRes,sipType_QPalette_ColorGroup);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_currentColorGroup, doc_QPalette_currentColorGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_setCurrentColorGroup, "QPalette.setCurrentColorGroup(QPalette.ColorGroup)");

extern "C" {static PyObject *meth_QPalette_setCurrentColorGroup(PyObject *, PyObject *);}
static PyObject *meth_QPalette_setCurrentColorGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPalette::ColorGroup a0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0))
        {
            sipCpp->setCurrentColorGroup(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_setCurrentColorGroup, doc_QPalette_setCurrentColorGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_color, "QPalette.color(QPalette.ColorGroup, QPalette.ColorRole) -> QColor\n"
    "QPalette.color(QPalette.ColorRole) -> QColor");

extern "C" {static PyObject *meth_QPalette_color(PyObject *, PyObject *);}
static PyObject *meth_QPalette_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPalette::ColorGroup a0;
        QPalette::ColorRole a1;
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QPalette_ColorRole, &a1))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->color(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    {
        QPalette::ColorRole a0;
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorRole, &a0))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->color(a0));

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_color, doc_QPalette_color);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_brush, "QPalette.brush(QPalette.ColorGroup, QPalette.ColorRole) -> QBrush\n"
    "QPalette.brush(QPalette.ColorRole) -> QBrush");

extern "C" {static PyObject *meth_QPalette_brush(PyObject *, PyObject *);}
static PyObject *meth_QPalette_brush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPalette::ColorGroup a0;
        QPalette::ColorRole a1;
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QPalette_ColorRole, &a1))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->brush(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    {
        QPalette::ColorRole a0;
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorRole, &a0))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->brush(a0));

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_brush, doc_QPalette_brush);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_setBrush, "QPalette.setBrush(QPalette.ColorGroup, QPalette.ColorRole, QBrush)\n"
    "QPalette.setBrush(QPalette.ColorRole, QBrush)");

extern "C" {static PyObject *meth_QPalette_setBrush(PyObject *, PyObject *);}
static PyObject *meth_QPalette_setBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPalette::ColorGroup a0;
        QPalette::ColorRole a1;
        const QBrush* a2;
        int a2State = 0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEEJ1", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QPalette_ColorRole, &a1, sipType_QBrush, &a2, &a2State))
        {
            sipCpp->setBrush(a0,a1,*a2);
            sipReleaseType(const_cast<QBrush *>(a2),sipType_QBrush,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPalette::ColorRole a0;
        const QBrush* a1;
        int a1State = 0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorRole, &a0, sipType_QBrush, &a1, &a1State))
        {
            sipCpp->setBrush(a0,*a1);
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_setBrush, doc_QPalette_setBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_setColorGroup, "QPalette.setColorGroup(QPalette.ColorGroup, QBrush, QBrush, QBrush, QBrush, QBrush, QBrush, QBrush, QBrush, QBrush)");

extern "C" {static PyObject *meth_QPalette_setColorGroup(PyObject *, PyObject *);}
static PyObject *meth_QPalette_setColorGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPalette::ColorGroup a0;
        const QBrush* a1;
        int a1State = 0;
        const QBrush* a2;
        int a2State = 0;
        const QBrush* a3;
        int a3State = 0;
        const QBrush* a4;
        int a4State = 0;
        const QBrush* a5;
        int a5State = 0;
        const QBrush* a6;
        int a6State = 0;
        const QBrush* a7;
        int a7State = 0;
        const QBrush* a8;
        int a8State = 0;
        const QBrush* a9;
        int a9State = 0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1J1J1J1J1J1J1J1J1", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QBrush, &a1, &a1State, sipType_QBrush, &a2, &a2State, sipType_QBrush, &a3, &a3State, sipType_QBrush, &a4, &a4State, sipType_QBrush, &a5, &a5State, sipType_QBrush, &a6, &a6State, sipType_QBrush, &a7, &a7State, sipType_QBrush, &a8, &a8State, sipType_QBrush, &a9, &a9State))
        {
            sipCpp->setColorGroup(a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9);
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);
            sipReleaseType(const_cast<QBrush *>(a2),sipType_QBrush,a2State);
            sipReleaseType(const_cast<QBrush *>(a3),sipType_QBrush,a3State);
            sipReleaseType(const_cast<QBrush *>(a4),sipType_QBrush,a4State);
            sipReleaseType(const_cast<QBrush *>(a5),sipType_QBrush,a5State);
            sipReleaseType(const_cast<QBrush *>(a6),sipType_QBrush,a6State);
            sipReleaseType(const_cast<QBrush *>(a7),sipType_QBrush,a7State);
            sipReleaseType(const_cast<QBrush *>(a8),sipType_QBrush,a8State);
            sipReleaseType(const_cast<QBrush *>(a9),sipType_QBrush,a9State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_setColorGroup, doc_QPalette_setColorGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_isEqual, "QPalette.isEqual(QPalette.ColorGroup, QPalette.ColorGroup) -> bool");

extern "C" {static PyObject *meth_QPalette_isEqual(PyObject *, PyObject *);}
static PyObject *meth_QPalette_isEqual(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPalette::ColorGroup a0;
        QPalette::ColorGroup a1;
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QPalette_ColorGroup, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isEqual(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_isEqual, doc_QPalette_isEqual);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_windowText, "QPalette.windowText() -> QBrush");

extern "C" {static PyObject *meth_QPalette_windowText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_windowText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->windowText());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_windowText, doc_QPalette_windowText);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_button, "QPalette.button() -> QBrush");

extern "C" {static PyObject *meth_QPalette_button(PyObject *, PyObject *);}
static PyObject *meth_QPalette_button(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->button());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_button, doc_QPalette_button);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_light, "QPalette.light() -> QBrush");

extern "C" {static PyObject *meth_QPalette_light(PyObject *, PyObject *);}
static PyObject *meth_QPalette_light(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->light());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_light, doc_QPalette_light);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_dark, "QPalette.dark() -> QBrush");

extern "C" {static PyObject *meth_QPalette_dark(PyObject *, PyObject *);}
static PyObject *meth_QPalette_dark(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->dark());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_dark, doc_QPalette_dark);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_mid, "QPalette.mid() -> QBrush");

extern "C" {static PyObject *meth_QPalette_mid(PyObject *, PyObject *);}
static PyObject *meth_QPalette_mid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->mid());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_mid, doc_QPalette_mid);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_text, "QPalette.text() -> QBrush");

extern "C" {static PyObject *meth_QPalette_text(PyObject *, PyObject *);}
static PyObject *meth_QPalette_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_text, doc_QPalette_text);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_base, "QPalette.base() -> QBrush");

extern "C" {static PyObject *meth_QPalette_base(PyObject *, PyObject *);}
static PyObject *meth_QPalette_base(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->base());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_base, doc_QPalette_base);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_alternateBase, "QPalette.alternateBase() -> QBrush");

extern "C" {static PyObject *meth_QPalette_alternateBase(PyObject *, PyObject *);}
static PyObject *meth_QPalette_alternateBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->alternateBase());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_alternateBase, doc_QPalette_alternateBase);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_window, "QPalette.window() -> QBrush");

extern "C" {static PyObject *meth_QPalette_window(PyObject *, PyObject *);}
static PyObject *meth_QPalette_window(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->window());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_window, doc_QPalette_window);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_midlight, "QPalette.midlight() -> QBrush");

extern "C" {static PyObject *meth_QPalette_midlight(PyObject *, PyObject *);}
static PyObject *meth_QPalette_midlight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->midlight());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_midlight, doc_QPalette_midlight);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_brightText, "QPalette.brightText() -> QBrush");

extern "C" {static PyObject *meth_QPalette_brightText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_brightText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->brightText());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_brightText, doc_QPalette_brightText);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_buttonText, "QPalette.buttonText() -> QBrush");

extern "C" {static PyObject *meth_QPalette_buttonText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_buttonText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->buttonText());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_buttonText, doc_QPalette_buttonText);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_shadow, "QPalette.shadow() -> QBrush");

extern "C" {static PyObject *meth_QPalette_shadow(PyObject *, PyObject *);}
static PyObject *meth_QPalette_shadow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->shadow());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_shadow, doc_QPalette_shadow);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_highlight, "QPalette.highlight() -> QBrush");

extern "C" {static PyObject *meth_QPalette_highlight(PyObject *, PyObject *);}
static PyObject *meth_QPalette_highlight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->highlight());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_highlight, doc_QPalette_highlight);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_highlightedText, "QPalette.highlightedText() -> QBrush");

extern "C" {static PyObject *meth_QPalette_highlightedText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_highlightedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->highlightedText());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_highlightedText, doc_QPalette_highlightedText);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_link, "QPalette.link() -> QBrush");

extern "C" {static PyObject *meth_QPalette_link(PyObject *, PyObject *);}
static PyObject *meth_QPalette_link(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->link());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_link, doc_QPalette_link);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_linkVisited, "QPalette.linkVisited() -> QBrush");

extern "C" {static PyObject *meth_QPalette_linkVisited(PyObject *, PyObject *);}
static PyObject *meth_QPalette_linkVisited(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->linkVisited());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_linkVisited, doc_QPalette_linkVisited);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_toolTipBase, "QPalette.toolTipBase() -> QBrush");

extern "C" {static PyObject *meth_QPalette_toolTipBase(PyObject *, PyObject *);}
static PyObject *meth_QPalette_toolTipBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->toolTipBase());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_toolTipBase, doc_QPalette_toolTipBase);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_toolTipText, "QPalette.toolTipText() -> QBrush");

extern "C" {static PyObject *meth_QPalette_toolTipText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_toolTipText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->toolTipText());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_toolTipText, doc_QPalette_toolTipText);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_isCopyOf, "QPalette.isCopyOf(QPalette) -> bool");

extern "C" {static PyObject *meth_QPalette_isCopyOf(PyObject *, PyObject *);}
static PyObject *meth_QPalette_isCopyOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette* a0;
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isCopyOf(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_isCopyOf, doc_QPalette_isCopyOf);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_resolve, "QPalette.resolve(QPalette) -> QPalette\n"
    "QPalette.resolve() -> int\n"
    "QPalette.resolve(int)");

extern "C" {static PyObject *meth_QPalette_resolve(PyObject *, PyObject *);}
static PyObject *meth_QPalette_resolve(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette* a0;
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette, &a0))
        {
            QPalette*sipRes;

            sipRes = new QPalette(sipCpp->resolve(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            uint sipRes;

            sipRes = sipCpp->resolve();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        uint a0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_QPalette, &sipCpp, &a0))
        {
            sipCpp->resolve(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_resolve, doc_QPalette_resolve);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_setColor, "QPalette.setColor(QPalette.ColorGroup, QPalette.ColorRole, QColor)\n"
    "QPalette.setColor(QPalette.ColorRole, QColor)");

extern "C" {static PyObject *meth_QPalette_setColor(PyObject *, PyObject *);}
static PyObject *meth_QPalette_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPalette::ColorGroup a0;
        QPalette::ColorRole a1;
        const QColor* a2;
        int a2State = 0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEEJ1", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QPalette_ColorRole, &a1, sipType_QColor, &a2, &a2State))
        {
            sipCpp->setColor(a0,a1,*a2);
            sipReleaseType(const_cast<QColor *>(a2),sipType_QColor,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPalette::ColorRole a0;
        const QColor* a1;
        int a1State = 0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorRole, &a0, sipType_QColor, &a1, &a1State))
        {
            sipCpp->setColor(a0,*a1);
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_setColor, doc_QPalette_setColor);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_isBrushSet, "QPalette.isBrushSet(QPalette.ColorGroup, QPalette.ColorRole) -> bool");

extern "C" {static PyObject *meth_QPalette_isBrushSet(PyObject *, PyObject *);}
static PyObject *meth_QPalette_isBrushSet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPalette::ColorGroup a0;
        QPalette::ColorRole a1;
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette_ColorGroup, &a0, sipType_QPalette_ColorRole, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isBrushSet(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_isBrushSet, doc_QPalette_isBrushSet);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_cacheKey, "QPalette.cacheKey() -> int");

extern "C" {static PyObject *meth_QPalette_cacheKey(PyObject *, PyObject *);}
static PyObject *meth_QPalette_cacheKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPalette, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->cacheKey();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_cacheKey, doc_QPalette_cacheKey);

    return NULL;
}


PyDoc_STRVAR(doc_QPalette_swap, "QPalette.swap(QPalette)");

extern "C" {static PyObject *meth_QPalette_swap(PyObject *, PyObject *);}
static PyObject *meth_QPalette_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPalette* a0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPalette, &sipCpp, sipType_QPalette, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPalette, sipName_swap, doc_QPalette_swap);

    return NULL;
}


extern "C" {static PyObject *slot_QPalette___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPalette___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPalette *sipCpp = reinterpret_cast<QPalette *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPalette));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPalette* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPalette, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPalette::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QPalette,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPalette___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPalette___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPalette *sipCpp = reinterpret_cast<QPalette *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPalette));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPalette* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPalette, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPalette::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QPalette,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPalette(void *, const sipTypeDef *);}
static void *cast_QPalette(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QPalette)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPalette(void *, int);}
static void release_QPalette(void *sipCppV,int)
{
    delete reinterpret_cast<QPalette *>(sipCppV);
}


extern "C" {static void assign_QPalette(void *, SIP_SSIZE_T, const void *);}
static void assign_QPalette(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPalette *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPalette *>(sipSrc);
}


extern "C" {static void *array_QPalette(SIP_SSIZE_T);}
static void *array_QPalette(SIP_SSIZE_T sipNrElem)
{
    return new QPalette[sipNrElem];
}


extern "C" {static void *copy_QPalette(const void *, SIP_SSIZE_T);}
static void *copy_QPalette(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPalette(reinterpret_cast<const QPalette *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPalette(sipSimpleWrapper *);}
static void dealloc_QPalette(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPalette(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPalette(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPalette(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPalette *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QPalette();

            return sipCpp;
        }
    }

    {
        const QColor* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QColor, &a0, &a0State))
        {
            sipCpp = new QPalette(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            return sipCpp;
        }
    }

    {
        Qt::GlobalColor a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "E", sipType_Qt_GlobalColor, &a0))
        {
            sipCpp = new QPalette(a0);

            return sipCpp;
        }
    }

    {
        const QColor* a0;
        int a0State = 0;
        const QColor* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J1", sipType_QColor, &a0, &a0State, sipType_QColor, &a1, &a1State))
        {
            sipCpp = new QPalette(*a0,*a1);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            return sipCpp;
        }
    }

    {
        const QBrush* a0;
        int a0State = 0;
        const QBrush* a1;
        int a1State = 0;
        const QBrush* a2;
        int a2State = 0;
        const QBrush* a3;
        int a3State = 0;
        const QBrush* a4;
        int a4State = 0;
        const QBrush* a5;
        int a5State = 0;
        const QBrush* a6;
        int a6State = 0;
        const QBrush* a7;
        int a7State = 0;
        const QBrush* a8;
        int a8State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J1J1J1J1J1J1J1J1", sipType_QBrush, &a0, &a0State, sipType_QBrush, &a1, &a1State, sipType_QBrush, &a2, &a2State, sipType_QBrush, &a3, &a3State, sipType_QBrush, &a4, &a4State, sipType_QBrush, &a5, &a5State, sipType_QBrush, &a6, &a6State, sipType_QBrush, &a7, &a7State, sipType_QBrush, &a8, &a8State))
        {
            sipCpp = new QPalette(*a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);
            sipReleaseType(const_cast<QBrush *>(a2),sipType_QBrush,a2State);
            sipReleaseType(const_cast<QBrush *>(a3),sipType_QBrush,a3State);
            sipReleaseType(const_cast<QBrush *>(a4),sipType_QBrush,a4State);
            sipReleaseType(const_cast<QBrush *>(a5),sipType_QBrush,a5State);
            sipReleaseType(const_cast<QBrush *>(a6),sipType_QBrush,a6State);
            sipReleaseType(const_cast<QBrush *>(a7),sipType_QBrush,a7State);
            sipReleaseType(const_cast<QBrush *>(a8),sipType_QBrush,a8State);

            return sipCpp;
        }
    }

    {
        const QPalette* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPalette, &a0))
        {
            sipCpp = new QPalette(*a0);

            return sipCpp;
        }
    }

    {
        const QVariant* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QVariant, &a0, &a0State))
        {
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpalette.sip"
        sipCpp = new QPalette(a0->value<QPalette>());
#line 1270 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPalette.cpp"
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPalette[] = {
    {(void *)slot_QPalette___ne__, ne_slot},
    {(void *)slot_QPalette___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPalette[] = {
    {SIP_MLNAME_CAST(sipName_alternateBase), meth_QPalette_alternateBase, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_alternateBase)},
    {SIP_MLNAME_CAST(sipName_base), meth_QPalette_base, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_base)},
    {SIP_MLNAME_CAST(sipName_brightText), meth_QPalette_brightText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_brightText)},
    {SIP_MLNAME_CAST(sipName_brush), meth_QPalette_brush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_brush)},
    {SIP_MLNAME_CAST(sipName_button), meth_QPalette_button, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_button)},
    {SIP_MLNAME_CAST(sipName_buttonText), meth_QPalette_buttonText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_buttonText)},
    {SIP_MLNAME_CAST(sipName_cacheKey), meth_QPalette_cacheKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_cacheKey)},
    {SIP_MLNAME_CAST(sipName_color), meth_QPalette_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_color)},
    {SIP_MLNAME_CAST(sipName_currentColorGroup), meth_QPalette_currentColorGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_currentColorGroup)},
    {SIP_MLNAME_CAST(sipName_dark), meth_QPalette_dark, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_dark)},
    {SIP_MLNAME_CAST(sipName_highlight), meth_QPalette_highlight, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_highlight)},
    {SIP_MLNAME_CAST(sipName_highlightedText), meth_QPalette_highlightedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_highlightedText)},
    {SIP_MLNAME_CAST(sipName_isBrushSet), meth_QPalette_isBrushSet, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_isBrushSet)},
    {SIP_MLNAME_CAST(sipName_isCopyOf), meth_QPalette_isCopyOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_isCopyOf)},
    {SIP_MLNAME_CAST(sipName_isEqual), meth_QPalette_isEqual, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_isEqual)},
    {SIP_MLNAME_CAST(sipName_light), meth_QPalette_light, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_light)},
    {SIP_MLNAME_CAST(sipName_link), meth_QPalette_link, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_link)},
    {SIP_MLNAME_CAST(sipName_linkVisited), meth_QPalette_linkVisited, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_linkVisited)},
    {SIP_MLNAME_CAST(sipName_mid), meth_QPalette_mid, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_mid)},
    {SIP_MLNAME_CAST(sipName_midlight), meth_QPalette_midlight, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_midlight)},
    {SIP_MLNAME_CAST(sipName_resolve), meth_QPalette_resolve, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_resolve)},
    {SIP_MLNAME_CAST(sipName_setBrush), meth_QPalette_setBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_setBrush)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QPalette_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_setColor)},
    {SIP_MLNAME_CAST(sipName_setColorGroup), meth_QPalette_setColorGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_setColorGroup)},
    {SIP_MLNAME_CAST(sipName_setCurrentColorGroup), meth_QPalette_setCurrentColorGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_setCurrentColorGroup)},
    {SIP_MLNAME_CAST(sipName_shadow), meth_QPalette_shadow, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_shadow)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPalette_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_swap)},
    {SIP_MLNAME_CAST(sipName_text), meth_QPalette_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_text)},
    {SIP_MLNAME_CAST(sipName_toolTipBase), meth_QPalette_toolTipBase, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_toolTipBase)},
    {SIP_MLNAME_CAST(sipName_toolTipText), meth_QPalette_toolTipText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_toolTipText)},
    {SIP_MLNAME_CAST(sipName_window), meth_QPalette_window, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_window)},
    {SIP_MLNAME_CAST(sipName_windowText), meth_QPalette_windowText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPalette_windowText)}
};

static sipEnumMemberDef enummembers_QPalette[] = {
    {sipName_Active, static_cast<int>(QPalette::Active), 209},
    {sipName_All, static_cast<int>(QPalette::All), 209},
    {sipName_AlternateBase, static_cast<int>(QPalette::AlternateBase), 210},
    {sipName_Background, static_cast<int>(QPalette::Background), 210},
    {sipName_Base, static_cast<int>(QPalette::Base), 210},
    {sipName_BrightText, static_cast<int>(QPalette::BrightText), 210},
    {sipName_Button, static_cast<int>(QPalette::Button), 210},
    {sipName_ButtonText, static_cast<int>(QPalette::ButtonText), 210},
    {sipName_Current, static_cast<int>(QPalette::Current), 209},
    {sipName_Dark, static_cast<int>(QPalette::Dark), 210},
    {sipName_Disabled, static_cast<int>(QPalette::Disabled), 209},
    {sipName_Foreground, static_cast<int>(QPalette::Foreground), 210},
    {sipName_Highlight, static_cast<int>(QPalette::Highlight), 210},
    {sipName_HighlightedText, static_cast<int>(QPalette::HighlightedText), 210},
    {sipName_Inactive, static_cast<int>(QPalette::Inactive), 209},
    {sipName_Light, static_cast<int>(QPalette::Light), 210},
    {sipName_Link, static_cast<int>(QPalette::Link), 210},
    {sipName_LinkVisited, static_cast<int>(QPalette::LinkVisited), 210},
    {sipName_Mid, static_cast<int>(QPalette::Mid), 210},
    {sipName_Midlight, static_cast<int>(QPalette::Midlight), 210},
    {sipName_NColorGroups, static_cast<int>(QPalette::NColorGroups), 209},
    {sipName_NColorRoles, static_cast<int>(QPalette::NColorRoles), 210},
    {sipName_NoRole, static_cast<int>(QPalette::NoRole), 210},
    {sipName_Normal, static_cast<int>(QPalette::Normal), 209},
    {sipName_Shadow, static_cast<int>(QPalette::Shadow), 210},
    {sipName_Text, static_cast<int>(QPalette::Text), 210},
    {sipName_ToolTipBase, static_cast<int>(QPalette::ToolTipBase), 210},
    {sipName_ToolTipText, static_cast<int>(QPalette::ToolTipText), 210},
    {sipName_Window, static_cast<int>(QPalette::Window), 210},
    {sipName_WindowText, static_cast<int>(QPalette::WindowText), 210},
};

PyDoc_STRVAR(doc_QPalette, "\1QPalette()\n"
    "QPalette(QColor)\n"
    "QPalette(Qt.GlobalColor)\n"
    "QPalette(QColor, QColor)\n"
    "QPalette(QBrush, QBrush, QBrush, QBrush, QBrush, QBrush, QBrush, QBrush, QBrush)\n"
    "QPalette(QPalette)\n"
    "QPalette(QVariant)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QPalette = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPalette,
        {0}
    },
    {
        sipNameNr_QPalette,
        {0, 0, 1},
        32, methods_QPalette,
        30, enummembers_QPalette,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPalette,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPalette,
    init_type_QPalette,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPalette,
    assign_QPalette,
    array_QPalette,
    copy_QPalette,
    release_QPalette,
    cast_QPalette,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
