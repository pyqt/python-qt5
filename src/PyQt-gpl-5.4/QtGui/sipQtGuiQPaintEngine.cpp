/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"

#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qimage.sip"
#include <qimage.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 30 "sip/QtCore/qline.sip"
#include <qline.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 96 "sip/QtCore/qline.sip"
#include <qline.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"
#line 178 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPaintEngine.cpp"


class sipQPaintEngine : public QPaintEngine
{
public:
    sipQPaintEngine(QPaintEngine::PaintEngineFeatures);
    virtual ~sipQPaintEngine();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QPaintEngine::Type type() const;
    void drawImage(const QRectF&,const QImage&,const QRectF&,Qt::ImageConversionFlags);
    void drawTiledPixmap(const QRectF&,const QPixmap&,const QPointF&);
    void drawTextItem(const QPointF&,const QTextItem&);
    void drawPixmap(const QRectF&,const QPixmap&,const QRectF&);
    void drawPolygon(const QPoint*,int,QPaintEngine::PolygonDrawMode);
    void drawPolygon(const QPointF*,int,QPaintEngine::PolygonDrawMode);
    void drawPoints(const QPoint*,int);
    void drawPoints(const QPointF*,int);
    void drawPath(const QPainterPath&);
    void drawEllipse(const QRect&);
    void drawEllipse(const QRectF&);
    void drawLines(const QLineF*,int);
    void drawLines(const QLine*,int);
    void drawRects(const QRectF*,int);
    void drawRects(const QRect*,int);
    void updateState(const QPaintEngineState&);
    bool end();
    bool begin(QPaintDevice*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPaintEngine(const sipQPaintEngine &);
    sipQPaintEngine &operator = (const sipQPaintEngine &);

    char sipPyMethods[19];
};

sipQPaintEngine::sipQPaintEngine(QPaintEngine::PaintEngineFeatures a0): QPaintEngine(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPaintEngine::~sipQPaintEngine()
{
    sipCommonDtor(sipPySelf);
}

QPaintEngine::Type sipQPaintEngine::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QPaintEngine,sipName_type);

    if (!sipMeth)
        return (QPaintEngine::Type)0;

    extern QPaintEngine::Type sipVH_QtGui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_34(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQPaintEngine::drawImage(const QRectF& a0,const QImage& a1,const QRectF& a2,Qt::ImageConversionFlags a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_drawImage);

    if (!sipMeth)
    {
        QPaintEngine::drawImage(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRectF&,const QImage&,const QRectF&,Qt::ImageConversionFlags);

    sipVH_QtGui_35(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQPaintEngine::drawTiledPixmap(const QRectF& a0,const QPixmap& a1,const QPointF& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_drawTiledPixmap);

    if (!sipMeth)
    {
        QPaintEngine::drawTiledPixmap(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRectF&,const QPixmap&,const QPointF&);

    sipVH_QtGui_36(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPaintEngine::drawTextItem(const QPointF& a0,const QTextItem& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_drawTextItem);

    if (!sipMeth)
    {
        QPaintEngine::drawTextItem(a0,a1);
        return;
    }

    extern void sipVH_QtGui_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPointF&,const QTextItem&);

    sipVH_QtGui_37(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::drawPixmap(const QRectF& a0,const QPixmap& a1,const QRectF& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QPaintEngine,sipName_drawPixmap);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRectF&,const QPixmap&,const QRectF&);

    sipVH_QtGui_38(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPaintEngine::drawPolygon(const QPoint*a0,int a1,QPaintEngine::PolygonDrawMode a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_drawPolygon);

    if (!sipMeth)
    {
        QPaintEngine::drawPolygon(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPoint*,int,QPaintEngine::PolygonDrawMode);

    sipVH_QtGui_39(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPaintEngine::drawPolygon(const QPointF*a0,int a1,QPaintEngine::PolygonDrawMode a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_drawPolygon);

    if (!sipMeth)
    {
        QPaintEngine::drawPolygon(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPointF*,int,QPaintEngine::PolygonDrawMode);

    sipVH_QtGui_40(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPaintEngine::drawPoints(const QPoint*a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_drawPoints);

    if (!sipMeth)
    {
        QPaintEngine::drawPoints(a0,a1);
        return;
    }

    extern void sipVH_QtGui_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPoint*,int);

    sipVH_QtGui_41(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::drawPoints(const QPointF*a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_drawPoints);

    if (!sipMeth)
    {
        QPaintEngine::drawPoints(a0,a1);
        return;
    }

    extern void sipVH_QtGui_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPointF*,int);

    sipVH_QtGui_42(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::drawPath(const QPainterPath& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_drawPath);

    if (!sipMeth)
    {
        QPaintEngine::drawPath(a0);
        return;
    }

    extern void sipVH_QtGui_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPainterPath&);

    sipVH_QtGui_43(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPaintEngine::drawEllipse(const QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_drawEllipse);

    if (!sipMeth)
    {
        QPaintEngine::drawEllipse(a0);
        return;
    }

    extern void sipVH_QtGui_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&);

    sipVH_QtGui_44(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPaintEngine::drawEllipse(const QRectF& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_drawEllipse);

    if (!sipMeth)
    {
        QPaintEngine::drawEllipse(a0);
        return;
    }

    extern void sipVH_QtGui_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRectF&);

    sipVH_QtGui_45(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPaintEngine::drawLines(const QLineF*a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_drawLines);

    if (!sipMeth)
    {
        QPaintEngine::drawLines(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QLineF*,int);

    sipVH_QtGui_46(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::drawLines(const QLine*a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_drawLines);

    if (!sipMeth)
    {
        QPaintEngine::drawLines(a0,a1);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QLine*,int);

    sipVH_QtGui_47(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::drawRects(const QRectF*a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_drawRects);

    if (!sipMeth)
    {
        QPaintEngine::drawRects(a0,a1);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRectF*,int);

    sipVH_QtGui_48(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::drawRects(const QRect*a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_drawRects);

    if (!sipMeth)
    {
        QPaintEngine::drawRects(a0,a1);
        return;
    }

    extern void sipVH_QtGui_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect*,int);

    sipVH_QtGui_49(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQPaintEngine::updateState(const QPaintEngineState& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,sipName_QPaintEngine,sipName_updateState);

    if (!sipMeth)
        return;

    extern void sipVH_QtGui_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPaintEngineState&);

    sipVH_QtGui_50(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQPaintEngine::end()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,sipName_QPaintEngine,sipName_end);

    if (!sipMeth)
        return 0;

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQPaintEngine::begin(QPaintDevice*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,sipName_QPaintEngine,sipName_begin);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtGui_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice*);

    return sipVH_QtGui_51(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}


PyDoc_STRVAR(doc_QPaintEngine_isActive, "QPaintEngine.isActive() -> bool");

extern "C" {static PyObject *meth_QPaintEngine_isActive(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngine, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_isActive, doc_QPaintEngine_isActive);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_setActive, "QPaintEngine.setActive(bool)");

extern "C" {static PyObject *meth_QPaintEngine_setActive(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_setActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPaintEngine, &sipCpp, &a0))
        {
            sipCpp->setActive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_setActive, doc_QPaintEngine_setActive);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_begin, "QPaintEngine.begin(QPaintDevice) -> bool");

extern "C" {static PyObject *meth_QPaintEngine_begin(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPaintDevice* a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPaintDevice, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_begin);
                return NULL;
            }

            sipRes = sipCpp->begin(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_begin, doc_QPaintEngine_begin);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_end, "QPaintEngine.end() -> bool");

extern "C" {static PyObject *meth_QPaintEngine_end(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngine, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_end);
                return NULL;
            }

            sipRes = sipCpp->end();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_end, doc_QPaintEngine_end);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_updateState, "QPaintEngine.updateState(QPaintEngineState)");

extern "C" {static PyObject *meth_QPaintEngine_updateState(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QPaintEngineState* a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPaintEngineState, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_updateState);
                return NULL;
            }

            sipCpp->updateState(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_updateState, doc_QPaintEngine_updateState);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_drawRects, "QPaintEngine.drawRects(QRect)\n"
    "QPaintEngine.drawRects(QRectF)");

extern "C" {static PyObject *meth_QPaintEngine_drawRects(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawRects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        SIP_SSIZE_T a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Br", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRect, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawRects(a0,(int)a1) : sipCpp->drawRects(a0,(int)a1));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF* a0;
        SIP_SSIZE_T a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Br", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRectF, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawRects(a0,(int)a1) : sipCpp->drawRects(a0,(int)a1));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawRects, doc_QPaintEngine_drawRects);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_drawLines, "QPaintEngine.drawLines(QLine)\n"
    "QPaintEngine.drawLines(QLineF)");

extern "C" {static PyObject *meth_QPaintEngine_drawLines(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLine* a0;
        SIP_SSIZE_T a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Br", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QLine, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawLines(a0,(int)a1) : sipCpp->drawLines(a0,(int)a1));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QLineF* a0;
        SIP_SSIZE_T a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Br", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QLineF, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawLines(a0,(int)a1) : sipCpp->drawLines(a0,(int)a1));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawLines, doc_QPaintEngine_drawLines);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_drawEllipse, "QPaintEngine.drawEllipse(QRectF)\n"
    "QPaintEngine.drawEllipse(QRect)");

extern "C" {static PyObject *meth_QPaintEngine_drawEllipse(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawEllipse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF* a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRectF, &a0))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawEllipse(*a0) : sipCpp->drawEllipse(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRect, &a0))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawEllipse(*a0) : sipCpp->drawEllipse(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawEllipse, doc_QPaintEngine_drawEllipse);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_drawPath, "QPaintEngine.drawPath(QPainterPath)");

extern "C" {static PyObject *meth_QPaintEngine_drawPath(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPainterPath* a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPainterPath, &a0))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawPath(*a0) : sipCpp->drawPath(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawPath, doc_QPaintEngine_drawPath);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_drawPoints, "QPaintEngine.drawPoints(QPointF)\n"
    "QPaintEngine.drawPoints(QPoint)");

extern "C" {static PyObject *meth_QPaintEngine_drawPoints(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPointF* a0;
        SIP_SSIZE_T a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Br", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPointF, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawPoints(a0,(int)a1) : sipCpp->drawPoints(a0,(int)a1));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        SIP_SSIZE_T a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Br", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPoint, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawPoints(a0,(int)a1) : sipCpp->drawPoints(a0,(int)a1));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawPoints, doc_QPaintEngine_drawPoints);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_drawPolygon, "QPaintEngine.drawPolygon(QPointF, QPaintEngine.PolygonDrawMode)\n"
    "QPaintEngine.drawPolygon(QPoint, QPaintEngine.PolygonDrawMode)");

extern "C" {static PyObject *meth_QPaintEngine_drawPolygon(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPointF* a0;
        SIP_SSIZE_T a1;
        QPaintEngine::PolygonDrawMode a2;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BrE", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPointF, &a0, &a1, sipType_QPaintEngine_PolygonDrawMode, &a2))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawPolygon(a0,(int)a1,a2) : sipCpp->drawPolygon(a0,(int)a1,a2));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint* a0;
        SIP_SSIZE_T a1;
        QPaintEngine::PolygonDrawMode a2;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BrE", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPoint, &a0, &a1, sipType_QPaintEngine_PolygonDrawMode, &a2))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawPolygon(a0,(int)a1,a2) : sipCpp->drawPolygon(a0,(int)a1,a2));
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawPolygon, doc_QPaintEngine_drawPolygon);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_drawPixmap, "QPaintEngine.drawPixmap(QRectF, QPixmap, QRectF)");

extern "C" {static PyObject *meth_QPaintEngine_drawPixmap(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QRectF* a0;
        const QPixmap* a1;
        const QRectF* a2;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRectF, &a0, sipType_QPixmap, &a1, sipType_QRectF, &a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_drawPixmap);
                return NULL;
            }

            sipCpp->drawPixmap(*a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawPixmap, doc_QPaintEngine_drawPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_drawTextItem, "QPaintEngine.drawTextItem(QPointF, QTextItem)");

extern "C" {static PyObject *meth_QPaintEngine_drawTextItem(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawTextItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPointF* a0;
        int a0State = 0;
        const QTextItem* a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QTextItem, &a1))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawTextItem(*a0,*a1) : sipCpp->drawTextItem(*a0,*a1));
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawTextItem, doc_QPaintEngine_drawTextItem);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_drawTiledPixmap, "QPaintEngine.drawTiledPixmap(QRectF, QPixmap, QPointF)");

extern "C" {static PyObject *meth_QPaintEngine_drawTiledPixmap(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawTiledPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF* a0;
        const QPixmap* a1;
        const QPointF* a2;
        int a2State = 0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J1", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRectF, &a0, sipType_QPixmap, &a1, sipType_QPointF, &a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawTiledPixmap(*a0,*a1,*a2) : sipCpp->drawTiledPixmap(*a0,*a1,*a2));
            sipReleaseType(const_cast<QPointF *>(a2),sipType_QPointF,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawTiledPixmap, doc_QPaintEngine_drawTiledPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_drawImage, "QPaintEngine.drawImage(QRectF, QImage, QRectF, Qt.ImageConversionFlags flags=Qt.AutoColor)");

extern "C" {static PyObject *meth_QPaintEngine_drawImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF* a0;
        const QImage* a1;
        const QRectF* a2;
        Qt::ImageConversionFlags a3def = Qt::AutoColor;
        Qt::ImageConversionFlags* a3 = &a3def;
        int a3State = 0;
        QPaintEngine *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J9|J1", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QRectF, &a0, sipType_QImage, &a1, sipType_QRectF, &a2, sipType_Qt_ImageConversionFlags, &a3, &a3State))
        {
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawImage(*a0,*a1,*a2,*a3) : sipCpp->drawImage(*a0,*a1,*a2,*a3));
            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_drawImage, doc_QPaintEngine_drawImage);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_setPaintDevice, "QPaintEngine.setPaintDevice(QPaintDevice)");

extern "C" {static PyObject *meth_QPaintEngine_setPaintDevice(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_setPaintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPaintDevice* a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPaintDevice, &a0))
        {
            sipCpp->setPaintDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_setPaintDevice, doc_QPaintEngine_setPaintDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_paintDevice, "QPaintEngine.paintDevice() -> QPaintDevice");

extern "C" {static PyObject *meth_QPaintEngine_paintDevice(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_paintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngine, &sipCpp))
        {
            QPaintDevice*sipRes;

            sipRes = sipCpp->paintDevice();

            return sipConvertFromType(sipRes,sipType_QPaintDevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_paintDevice, doc_QPaintEngine_paintDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_type, "QPaintEngine.type() -> QPaintEngine.Type");

extern "C" {static PyObject *meth_QPaintEngine_type(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngine, &sipCpp))
        {
            QPaintEngine::Type sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_type);
                return NULL;
            }

            sipRes = sipCpp->type();

            return sipConvertFromEnum(sipRes,sipType_QPaintEngine_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_type, doc_QPaintEngine_type);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_hasFeature, "QPaintEngine.hasFeature(QPaintEngine.PaintEngineFeatures) -> bool");

extern "C" {static PyObject *meth_QPaintEngine_hasFeature(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_hasFeature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPaintEngine::PaintEngineFeatures* a0;
        int a0State = 0;
        const QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPaintEngine, &sipCpp, sipType_QPaintEngine_PaintEngineFeatures, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasFeature(*a0);
            sipReleaseType(a0,sipType_QPaintEngine_PaintEngineFeatures,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_hasFeature, doc_QPaintEngine_hasFeature);

    return NULL;
}


PyDoc_STRVAR(doc_QPaintEngine_painter, "QPaintEngine.painter() -> QPainter");

extern "C" {static PyObject *meth_QPaintEngine_painter(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_painter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPaintEngine *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPaintEngine, &sipCpp))
        {
            QPainter*sipRes;

            sipRes = sipCpp->painter();

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPaintEngine, sipName_painter, doc_QPaintEngine_painter);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPaintEngine(void *, const sipTypeDef *);}
static void *cast_QPaintEngine(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QPaintEngine)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPaintEngine(void *, int);}
static void release_QPaintEngine(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPaintEngine *>(sipCppV);
    else
        delete reinterpret_cast<QPaintEngine *>(sipCppV);
}


extern "C" {static void dealloc_QPaintEngine(sipSimpleWrapper *);}
static void dealloc_QPaintEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPaintEngine *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPaintEngine(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPaintEngine(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPaintEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPaintEngine *sipCpp = 0;

    {
        QPaintEngine::PaintEngineFeatures a0def = 0;
        QPaintEngine::PaintEngineFeatures* a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_features,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1", sipType_QPaintEngine_PaintEngineFeatures, &a0, &a0State))
        {
            sipCpp = new sipQPaintEngine(*a0);
            sipReleaseType(a0,sipType_QPaintEngine_PaintEngineFeatures,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QPaintEngine[] = {
    {SIP_MLNAME_CAST(sipName_begin), meth_QPaintEngine_begin, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_begin)},
    {SIP_MLNAME_CAST(sipName_drawEllipse), meth_QPaintEngine_drawEllipse, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawEllipse)},
    {SIP_MLNAME_CAST(sipName_drawImage), (PyCFunction)meth_QPaintEngine_drawImage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPaintEngine_drawImage)},
    {SIP_MLNAME_CAST(sipName_drawLines), meth_QPaintEngine_drawLines, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawLines)},
    {SIP_MLNAME_CAST(sipName_drawPath), meth_QPaintEngine_drawPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawPath)},
    {SIP_MLNAME_CAST(sipName_drawPixmap), meth_QPaintEngine_drawPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawPixmap)},
    {SIP_MLNAME_CAST(sipName_drawPoints), meth_QPaintEngine_drawPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawPoints)},
    {SIP_MLNAME_CAST(sipName_drawPolygon), meth_QPaintEngine_drawPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawPolygon)},
    {SIP_MLNAME_CAST(sipName_drawRects), meth_QPaintEngine_drawRects, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawRects)},
    {SIP_MLNAME_CAST(sipName_drawTextItem), meth_QPaintEngine_drawTextItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawTextItem)},
    {SIP_MLNAME_CAST(sipName_drawTiledPixmap), meth_QPaintEngine_drawTiledPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_drawTiledPixmap)},
    {SIP_MLNAME_CAST(sipName_end), meth_QPaintEngine_end, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_end)},
    {SIP_MLNAME_CAST(sipName_hasFeature), meth_QPaintEngine_hasFeature, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_hasFeature)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QPaintEngine_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_isActive)},
    {SIP_MLNAME_CAST(sipName_paintDevice), meth_QPaintEngine_paintDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_paintDevice)},
    {SIP_MLNAME_CAST(sipName_painter), meth_QPaintEngine_painter, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_painter)},
    {SIP_MLNAME_CAST(sipName_setActive), meth_QPaintEngine_setActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_setActive)},
    {SIP_MLNAME_CAST(sipName_setPaintDevice), meth_QPaintEngine_setPaintDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_setPaintDevice)},
    {SIP_MLNAME_CAST(sipName_type), meth_QPaintEngine_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_type)},
    {SIP_MLNAME_CAST(sipName_updateState), meth_QPaintEngine_updateState, METH_VARARGS, SIP_MLDOC_CAST(doc_QPaintEngine_updateState)}
};

static sipEnumMemberDef enummembers_QPaintEngine[] = {
    {sipName_AllDirty, static_cast<int>(QPaintEngine::AllDirty), 187},
    {sipName_AllFeatures, static_cast<int>(QPaintEngine::AllFeatures), 189},
    {sipName_AlphaBlend, static_cast<int>(QPaintEngine::AlphaBlend), 189},
    {sipName_Antialiasing, static_cast<int>(QPaintEngine::Antialiasing), 189},
    {sipName_BlendModes, static_cast<int>(QPaintEngine::BlendModes), 189},
    {sipName_Blitter, static_cast<int>(QPaintEngine::Blitter), 192},
    {sipName_BrushStroke, static_cast<int>(QPaintEngine::BrushStroke), 189},
    {sipName_ConicalGradientFill, static_cast<int>(QPaintEngine::ConicalGradientFill), 189},
    {sipName_ConstantOpacity, static_cast<int>(QPaintEngine::ConstantOpacity), 189},
    {sipName_ConvexMode, static_cast<int>(QPaintEngine::ConvexMode), 191},
    {sipName_CoreGraphics, static_cast<int>(QPaintEngine::CoreGraphics), 192},
    {sipName_Direct2D, static_cast<int>(QPaintEngine::Direct2D), 192},
    {sipName_Direct3D, static_cast<int>(QPaintEngine::Direct3D), 192},
    {sipName_DirtyBackground, static_cast<int>(QPaintEngine::DirtyBackground), 187},
    {sipName_DirtyBackgroundMode, static_cast<int>(QPaintEngine::DirtyBackgroundMode), 187},
    {sipName_DirtyBrush, static_cast<int>(QPaintEngine::DirtyBrush), 187},
    {sipName_DirtyBrushOrigin, static_cast<int>(QPaintEngine::DirtyBrushOrigin), 187},
    {sipName_DirtyClipEnabled, static_cast<int>(QPaintEngine::DirtyClipEnabled), 187},
    {sipName_DirtyClipPath, static_cast<int>(QPaintEngine::DirtyClipPath), 187},
    {sipName_DirtyClipRegion, static_cast<int>(QPaintEngine::DirtyClipRegion), 187},
    {sipName_DirtyCompositionMode, static_cast<int>(QPaintEngine::DirtyCompositionMode), 187},
    {sipName_DirtyFont, static_cast<int>(QPaintEngine::DirtyFont), 187},
    {sipName_DirtyHints, static_cast<int>(QPaintEngine::DirtyHints), 187},
    {sipName_DirtyOpacity, static_cast<int>(QPaintEngine::DirtyOpacity), 187},
    {sipName_DirtyPen, static_cast<int>(QPaintEngine::DirtyPen), 187},
    {sipName_DirtyTransform, static_cast<int>(QPaintEngine::DirtyTransform), 187},
    {sipName_LinearGradientFill, static_cast<int>(QPaintEngine::LinearGradientFill), 189},
    {sipName_MacPrinter, static_cast<int>(QPaintEngine::MacPrinter), 192},
    {sipName_MaskedBrush, static_cast<int>(QPaintEngine::MaskedBrush), 189},
    {sipName_MaxUser, static_cast<int>(QPaintEngine::MaxUser), 192},
    {sipName_ObjectBoundingModeGradients, static_cast<int>(QPaintEngine::ObjectBoundingModeGradients), 189},
    {sipName_OddEvenMode, static_cast<int>(QPaintEngine::OddEvenMode), 191},
    {sipName_OpenGL, static_cast<int>(QPaintEngine::OpenGL), 192},
    {sipName_OpenGL2, static_cast<int>(QPaintEngine::OpenGL2), 192},
    {sipName_OpenVG, static_cast<int>(QPaintEngine::OpenVG), 192},
    {sipName_PaintBuffer, static_cast<int>(QPaintEngine::PaintBuffer), 192},
    {sipName_PaintOutsidePaintEvent, static_cast<int>(QPaintEngine::PaintOutsidePaintEvent), 189},
    {sipName_PainterPaths, static_cast<int>(QPaintEngine::PainterPaths), 189},
    {sipName_PatternBrush, static_cast<int>(QPaintEngine::PatternBrush), 189},
    {sipName_PatternTransform, static_cast<int>(QPaintEngine::PatternTransform), 189},
    {sipName_Pdf, static_cast<int>(QPaintEngine::Pdf), 192},
    {sipName_PerspectiveTransform, static_cast<int>(QPaintEngine::PerspectiveTransform), 189},
    {sipName_Picture, static_cast<int>(QPaintEngine::Picture), 192},
    {sipName_PixmapTransform, static_cast<int>(QPaintEngine::PixmapTransform), 189},
    {sipName_PolylineMode, static_cast<int>(QPaintEngine::PolylineMode), 191},
    {sipName_PorterDuff, static_cast<int>(QPaintEngine::PorterDuff), 189},
    {sipName_PostScript, static_cast<int>(QPaintEngine::PostScript), 192},
    {sipName_PrimitiveTransform, static_cast<int>(QPaintEngine::PrimitiveTransform), 189},
    {sipName_QWindowSystem, static_cast<int>(QPaintEngine::QWindowSystem), 192},
    {sipName_QuickDraw, static_cast<int>(QPaintEngine::QuickDraw), 192},
    {sipName_RadialGradientFill, static_cast<int>(QPaintEngine::RadialGradientFill), 189},
    {sipName_Raster, static_cast<int>(QPaintEngine::Raster), 192},
    {sipName_RasterOpModes, static_cast<int>(QPaintEngine::RasterOpModes), 189},
    {sipName_SVG, static_cast<int>(QPaintEngine::SVG), 192},
    {sipName_User, static_cast<int>(QPaintEngine::User), 192},
    {sipName_WindingMode, static_cast<int>(QPaintEngine::WindingMode), 191},
    {sipName_Windows, static_cast<int>(QPaintEngine::Windows), 192},
    {sipName_X11, static_cast<int>(QPaintEngine::X11), 192},
};

PyDoc_STRVAR(doc_QPaintEngine, "\1QPaintEngine(QPaintEngine.PaintEngineFeatures features=0)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QPaintEngine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPaintEngine,
        {0}
    },
    {
        sipNameNr_QPaintEngine,
        {0, 0, 1},
        20, methods_QPaintEngine,
        58, enummembers_QPaintEngine,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPaintEngine,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QPaintEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPaintEngine,
    0,
    0,
    0,
    release_QPaintEngine,
    cast_QPaintEngine,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
