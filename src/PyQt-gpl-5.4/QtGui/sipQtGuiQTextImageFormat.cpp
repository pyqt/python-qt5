/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 427 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qfont.sip"
#include <qfont.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 247 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpen.sip"
#include <qpen.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 533 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 444 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 507 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 395 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 350 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 144 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 26 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextImageFormat.cpp"


PyDoc_STRVAR(doc_QTextImageFormat_isValid, "QTextImageFormat.isValid() -> bool");

extern "C" {static PyObject *meth_QTextImageFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextImageFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_isValid, doc_QTextImageFormat_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QTextImageFormat_name, "QTextImageFormat.name() -> str");

extern "C" {static PyObject *meth_QTextImageFormat_name(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextImageFormat, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_name, doc_QTextImageFormat_name);

    return NULL;
}


PyDoc_STRVAR(doc_QTextImageFormat_width, "QTextImageFormat.width() -> float");

extern "C" {static PyObject *meth_QTextImageFormat_width(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextImageFormat, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_width, doc_QTextImageFormat_width);

    return NULL;
}


PyDoc_STRVAR(doc_QTextImageFormat_height, "QTextImageFormat.height() -> float");

extern "C" {static PyObject *meth_QTextImageFormat_height(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextImageFormat, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->height();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_height, doc_QTextImageFormat_height);

    return NULL;
}


PyDoc_STRVAR(doc_QTextImageFormat_setName, "QTextImageFormat.setName(str)");

extern "C" {static PyObject *meth_QTextImageFormat_setName(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_setName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextImageFormat, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_setName, doc_QTextImageFormat_setName);

    return NULL;
}


PyDoc_STRVAR(doc_QTextImageFormat_setWidth, "QTextImageFormat.setWidth(float)");

extern "C" {static PyObject *meth_QTextImageFormat_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextImageFormat, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_setWidth, doc_QTextImageFormat_setWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextImageFormat_setHeight, "QTextImageFormat.setHeight(float)");

extern "C" {static PyObject *meth_QTextImageFormat_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QTextImageFormat_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextImageFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextImageFormat, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextImageFormat, sipName_setHeight, doc_QTextImageFormat_setHeight);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextImageFormat(void *, const sipTypeDef *);}
static void *cast_QTextImageFormat(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextImageFormat)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTextCharFormat)->ctd_cast((QTextCharFormat *)(QTextImageFormat *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextImageFormat(void *, int);}
static void release_QTextImageFormat(void *sipCppV,int)
{
    delete reinterpret_cast<QTextImageFormat *>(sipCppV);
}


extern "C" {static void assign_QTextImageFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextImageFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextImageFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextImageFormat *>(sipSrc);
}


extern "C" {static void *array_QTextImageFormat(SIP_SSIZE_T);}
static void *array_QTextImageFormat(SIP_SSIZE_T sipNrElem)
{
    return new QTextImageFormat[sipNrElem];
}


extern "C" {static void *copy_QTextImageFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextImageFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextImageFormat(reinterpret_cast<const QTextImageFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextImageFormat(sipSimpleWrapper *);}
static void dealloc_QTextImageFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextImageFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTextImageFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextImageFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextImageFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QTextImageFormat();

            return sipCpp;
        }
    }

    {
        const QTextImageFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextImageFormat, &a0))
        {
            sipCpp = new QTextImageFormat(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextImageFormat[] = {{275, 255, 1}};


static PyMethodDef methods_QTextImageFormat[] = {
    {SIP_MLNAME_CAST(sipName_height), meth_QTextImageFormat_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_height)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextImageFormat_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_isValid)},
    {SIP_MLNAME_CAST(sipName_name), meth_QTextImageFormat_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_name)},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QTextImageFormat_setHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_setHeight)},
    {SIP_MLNAME_CAST(sipName_setName), meth_QTextImageFormat_setName, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_setName)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QTextImageFormat_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_setWidth)},
    {SIP_MLNAME_CAST(sipName_width), meth_QTextImageFormat_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextImageFormat_width)}
};

PyDoc_STRVAR(doc_QTextImageFormat, "\1QTextImageFormat()\n"
    "QTextImageFormat(QTextImageFormat)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QTextImageFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTextImageFormat,
        {0}
    },
    {
        sipNameNr_QTextImageFormat,
        {0, 0, 1},
        7, methods_QTextImageFormat,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextImageFormat,
    -1,
    -1,
    supers_QTextImageFormat,
    0,
    init_type_QTextImageFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextImageFormat,
    assign_QTextImageFormat,
    array_QTextImageFormat,
    copy_QTextImageFormat,
    release_QTextImageFormat,
    cast_QTextImageFormat,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
