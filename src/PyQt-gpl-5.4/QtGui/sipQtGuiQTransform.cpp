/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTransform.cpp"

#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTransform.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTransform.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTransform.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTransform.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTransform.cpp"
#line 30 "sip/QtCore/qline.sip"
#include <qline.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTransform.cpp"
#line 96 "sip/QtCore/qline.sip"
#include <qline.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTransform.cpp"
#line 327 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTransform.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qregion.sip"
#include <qregion.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTransform.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTransform.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTransform.cpp"


PyDoc_STRVAR(doc_QTransform_type, "QTransform.type() -> QTransform.TransformationType");

extern "C" {static PyObject *meth_QTransform_type(PyObject *, PyObject *);}
static PyObject *meth_QTransform_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            QTransform::TransformationType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(sipRes,sipType_QTransform_TransformationType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_type, doc_QTransform_type);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_setMatrix, "QTransform.setMatrix(float, float, float, float, float, float, float, float, float)");

extern "C" {static PyObject *meth_QTransform_setMatrix(PyObject *, PyObject *);}
static PyObject *meth_QTransform_setMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        qreal a5;
        qreal a6;
        qreal a7;
        qreal a8;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddddddddd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipCpp->setMatrix(a0,a1,a2,a3,a4,a5,a6,a7,a8);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_setMatrix, doc_QTransform_setMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_inverted, "QTransform.inverted() -> (QTransform, bool)");

extern "C" {static PyObject *meth_QTransform_inverted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTransform_inverted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        const QTransform *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            QTransform*sipRes;

            sipRes = new QTransform(sipCpp->inverted(&a0));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_inverted, doc_QTransform_inverted);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_adjoint, "QTransform.adjoint() -> QTransform");

extern "C" {static PyObject *meth_QTransform_adjoint(PyObject *, PyObject *);}
static PyObject *meth_QTransform_adjoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            QTransform*sipRes;

            sipRes = new QTransform(sipCpp->adjoint());

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_adjoint, doc_QTransform_adjoint);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_transposed, "QTransform.transposed() -> QTransform");

extern "C" {static PyObject *meth_QTransform_transposed(PyObject *, PyObject *);}
static PyObject *meth_QTransform_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            QTransform*sipRes;

            sipRes = new QTransform(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_transposed, doc_QTransform_transposed);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_translate, "QTransform.translate(float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_translate(PyObject *, PyObject *);}
static PyObject *meth_QTransform_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            QTransform*sipRes;

            sipRes = &sipCpp->translate(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_translate, doc_QTransform_translate);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_scale, "QTransform.scale(float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_scale(PyObject *, PyObject *);}
static PyObject *meth_QTransform_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            QTransform*sipRes;

            sipRes = &sipCpp->scale(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_scale, doc_QTransform_scale);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_shear, "QTransform.shear(float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_shear(PyObject *, PyObject *);}
static PyObject *meth_QTransform_shear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            QTransform*sipRes;

            sipRes = &sipCpp->shear(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_shear, doc_QTransform_shear);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_rotate, "QTransform.rotate(float, Qt.Axis axis=Qt.ZAxis) -> QTransform");

extern "C" {static PyObject *meth_QTransform_rotate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTransform_rotate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        Qt::Axis a1 = Qt::ZAxis;
        QTransform *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_axis,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd|E", &sipSelf, sipType_QTransform, &sipCpp, &a0, sipType_Qt_Axis, &a1))
        {
            QTransform*sipRes;

            sipRes = &sipCpp->rotate(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_rotate, doc_QTransform_rotate);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_rotateRadians, "QTransform.rotateRadians(float, Qt.Axis axis=Qt.ZAxis) -> QTransform");

extern "C" {static PyObject *meth_QTransform_rotateRadians(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTransform_rotateRadians(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        Qt::Axis a1 = Qt::ZAxis;
        QTransform *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_axis,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bd|E", &sipSelf, sipType_QTransform, &sipCpp, &a0, sipType_Qt_Axis, &a1))
        {
            QTransform*sipRes;

            sipRes = &sipCpp->rotateRadians(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_rotateRadians, doc_QTransform_rotateRadians);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_squareToQuad, "QTransform.squareToQuad(QPolygonF, QTransform) -> bool");

extern "C" {static PyObject *meth_QTransform_squareToQuad(PyObject *, PyObject *);}
static PyObject *meth_QTransform_squareToQuad(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF* a0;
        QTransform* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QPolygonF, &a0, sipType_QTransform, &a1))
        {
            bool sipRes;

            sipRes = QTransform::squareToQuad(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_squareToQuad, doc_QTransform_squareToQuad);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_quadToSquare, "QTransform.quadToSquare(QPolygonF, QTransform) -> bool");

extern "C" {static PyObject *meth_QTransform_quadToSquare(PyObject *, PyObject *);}
static PyObject *meth_QTransform_quadToSquare(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF* a0;
        QTransform* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_QPolygonF, &a0, sipType_QTransform, &a1))
        {
            bool sipRes;

            sipRes = QTransform::quadToSquare(*a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_quadToSquare, doc_QTransform_quadToSquare);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_quadToQuad, "QTransform.quadToQuad(QPolygonF, QPolygonF, QTransform) -> bool");

extern "C" {static PyObject *meth_QTransform_quadToQuad(PyObject *, PyObject *);}
static PyObject *meth_QTransform_quadToQuad(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF* a0;
        const QPolygonF* a1;
        QTransform* a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9J9", sipType_QPolygonF, &a0, sipType_QPolygonF, &a1, sipType_QTransform, &a2))
        {
            bool sipRes;

            sipRes = QTransform::quadToQuad(*a0,*a1,*a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_quadToQuad, doc_QTransform_quadToQuad);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_reset, "QTransform.reset()");

extern "C" {static PyObject *meth_QTransform_reset(PyObject *, PyObject *);}
static PyObject *meth_QTransform_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            sipCpp->reset();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_reset, doc_QTransform_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_map, "QTransform.map(int, int) -> (int, int)\n"
    "QTransform.map(float, float) -> (float, float)\n"
    "QTransform.map(QPoint) -> QPoint\n"
    "QTransform.map(QPointF) -> QPointF\n"
    "QTransform.map(QLine) -> QLine\n"
    "QTransform.map(QLineF) -> QLineF\n"
    "QTransform.map(QPolygonF) -> QPolygonF\n"
    "QTransform.map(QPolygon) -> QPolygon\n"
    "QTransform.map(QRegion) -> QRegion\n"
    "QTransform.map(QPainterPath) -> QPainterPath");

extern "C" {static PyObject *meth_QTransform_map(PyObject *, PyObject *);}
static PyObject *meth_QTransform_map(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BXiXi", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            sipCpp->map(a0,a1,&a2,&a3);

            return sipBuildResult(0,"(ii)",a2,a3);
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QTransform, &sipCpp, &a0, &a1))
        {
            sipCpp->map(a0,a1,&a2,&a3);

            return sipBuildResult(0,"(dd)",a2,a3);
        }
    }

    {
        const QPoint* a0;
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPoint, &a0))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->map(*a0));
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    {
        const QLine* a0;
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QLine, &a0))
        {
            QLine*sipRes;

            sipRes = new QLine(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QLine,NULL);
        }
    }

    {
        const QLineF* a0;
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QLineF, &a0))
        {
            QLineF*sipRes;

            sipRes = new QLineF(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QLineF,NULL);
        }
    }

    {
        const QPolygonF* a0;
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPolygonF, &a0))
        {
            QPolygonF*sipRes;

            sipRes = new QPolygonF(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    {
        const QPolygon* a0;
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPolygon, &a0))
        {
            QPolygon*sipRes;

            sipRes = new QPolygon(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    {
        const QRegion* a0;
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRegion, &a0))
        {
            QRegion*sipRes;

            sipRes = new QRegion(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    {
        const QPainterPath* a0;
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QPainterPath, &a0))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath(sipCpp->map(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_map, doc_QTransform_map);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_mapToPolygon, "QTransform.mapToPolygon(QRect) -> QPolygon");

extern "C" {static PyObject *meth_QTransform_mapToPolygon(PyObject *, PyObject *);}
static PyObject *meth_QTransform_mapToPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRect, &a0))
        {
            QPolygon*sipRes;

            sipRes = new QPolygon(sipCpp->mapToPolygon(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_mapToPolygon, doc_QTransform_mapToPolygon);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_mapRect, "QTransform.mapRect(QRect) -> QRect\n"
    "QTransform.mapRect(QRectF) -> QRectF");

extern "C" {static PyObject *meth_QTransform_mapRect(PyObject *, PyObject *);}
static PyObject *meth_QTransform_mapRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRect, &a0))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->mapRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        const QRectF* a0;
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTransform, &sipCpp, sipType_QRectF, &a0))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->mapRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_mapRect, doc_QTransform_mapRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_isAffine, "QTransform.isAffine() -> bool");

extern "C" {static PyObject *meth_QTransform_isAffine(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isAffine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAffine();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isAffine, doc_QTransform_isAffine);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_isIdentity, "QTransform.isIdentity() -> bool");

extern "C" {static PyObject *meth_QTransform_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isIdentity, doc_QTransform_isIdentity);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_isInvertible, "QTransform.isInvertible() -> bool");

extern "C" {static PyObject *meth_QTransform_isInvertible(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isInvertible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isInvertible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isInvertible, doc_QTransform_isInvertible);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_isScaling, "QTransform.isScaling() -> bool");

extern "C" {static PyObject *meth_QTransform_isScaling(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isScaling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isScaling();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isScaling, doc_QTransform_isScaling);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_isRotating, "QTransform.isRotating() -> bool");

extern "C" {static PyObject *meth_QTransform_isRotating(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isRotating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRotating();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isRotating, doc_QTransform_isRotating);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_isTranslating, "QTransform.isTranslating() -> bool");

extern "C" {static PyObject *meth_QTransform_isTranslating(PyObject *, PyObject *);}
static PyObject *meth_QTransform_isTranslating(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTranslating();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_isTranslating, doc_QTransform_isTranslating);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_determinant, "QTransform.determinant() -> float");

extern "C" {static PyObject *meth_QTransform_determinant(PyObject *, PyObject *);}
static PyObject *meth_QTransform_determinant(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->determinant();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_determinant, doc_QTransform_determinant);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_m11, "QTransform.m11() -> float");

extern "C" {static PyObject *meth_QTransform_m11(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m11(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->m11();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m11, doc_QTransform_m11);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_m12, "QTransform.m12() -> float");

extern "C" {static PyObject *meth_QTransform_m12(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m12(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->m12();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m12, doc_QTransform_m12);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_m13, "QTransform.m13() -> float");

extern "C" {static PyObject *meth_QTransform_m13(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m13(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->m13();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m13, doc_QTransform_m13);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_m21, "QTransform.m21() -> float");

extern "C" {static PyObject *meth_QTransform_m21(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m21(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->m21();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m21, doc_QTransform_m21);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_m22, "QTransform.m22() -> float");

extern "C" {static PyObject *meth_QTransform_m22(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m22(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->m22();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m22, doc_QTransform_m22);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_m23, "QTransform.m23() -> float");

extern "C" {static PyObject *meth_QTransform_m23(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m23(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->m23();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m23, doc_QTransform_m23);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_m31, "QTransform.m31() -> float");

extern "C" {static PyObject *meth_QTransform_m31(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m31(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->m31();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m31, doc_QTransform_m31);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_m32, "QTransform.m32() -> float");

extern "C" {static PyObject *meth_QTransform_m32(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m32(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->m32();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m32, doc_QTransform_m32);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_m33, "QTransform.m33() -> float");

extern "C" {static PyObject *meth_QTransform_m33(PyObject *, PyObject *);}
static PyObject *meth_QTransform_m33(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->m33();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_m33, doc_QTransform_m33);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_dx, "QTransform.dx() -> float");

extern "C" {static PyObject *meth_QTransform_dx(PyObject *, PyObject *);}
static PyObject *meth_QTransform_dx(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->dx();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_dx, doc_QTransform_dx);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_dy, "QTransform.dy() -> float");

extern "C" {static PyObject *meth_QTransform_dy(PyObject *, PyObject *);}
static PyObject *meth_QTransform_dy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTransform, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->dy();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_dy, doc_QTransform_dy);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_fromTranslate, "QTransform.fromTranslate(float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_fromTranslate(PyObject *, PyObject *);}
static PyObject *meth_QTransform_fromTranslate(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "dd", &a0, &a1))
        {
            QTransform*sipRes;

            sipRes = new QTransform(QTransform::fromTranslate(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_fromTranslate, doc_QTransform_fromTranslate);

    return NULL;
}


PyDoc_STRVAR(doc_QTransform_fromScale, "QTransform.fromScale(float, float) -> QTransform");

extern "C" {static PyObject *meth_QTransform_fromScale(PyObject *, PyObject *);}
static PyObject *meth_QTransform_fromScale(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "dd", &a0, &a1))
        {
            QTransform*sipRes;

            sipRes = new QTransform(QTransform::fromScale(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTransform, sipName_fromScale, doc_QTransform_fromScale);

    return NULL;
}


extern "C" {static PyObject *slot_QTransform___div__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;
        qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
            QTransform*sipRes;

            sipRes = new QTransform((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QTransform___add__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;
        qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
            QTransform*sipRes;

            sipRes = new QTransform((*a0 + a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QTransform___sub__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;
        qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
            QTransform*sipRes;

            sipRes = new QTransform((*a0 - a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QTransform___isub__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp->QTransform::operator-=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp->QTransform::operator+=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp->QTransform::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___mul__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QTransform* a0;
        const QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QTransform, &a0, sipType_QTransform, &a1))
        {
            QTransform*sipRes;

            sipRes = new QTransform((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    {
        const QTransform* a0;
        qreal a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9d", sipType_QTransform, &a0, &a1))
        {
            QTransform*sipRes;

            sipRes = new QTransform((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QTransform___imul__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QTransform)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            sipCpp->QTransform::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        qreal a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1d", &a0))
        {
            sipCpp->QTransform::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QTransform___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QTransform::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QTransform,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTransform___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTransform___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTransform));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTransform, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QTransform::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QTransform,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTransform(void *, const sipTypeDef *);}
static void *cast_QTransform(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTransform)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTransform(void *, int);}
static void release_QTransform(void *sipCppV,int)
{
    delete reinterpret_cast<QTransform *>(sipCppV);
}


extern "C" {static PyObject *pickle_QTransform(void *);}
static PyObject *pickle_QTransform(void *sipCppV)
{
    QTransform *sipCpp = reinterpret_cast<QTransform *>(sipCppV);
    PyObject *sipRes;

#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtransform.sip"
    sipRes = Py_BuildValue((char *)"ddddddddd", sipCpp->m11(), sipCpp->m12(), sipCpp->m13(), sipCpp->m21(), sipCpp->m22(), sipCpp->m23(), sipCpp->m31(), sipCpp->m32(), sipCpp->m33());
#line 1646 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTransform.cpp"

    return sipRes;
}


extern "C" {static void assign_QTransform(void *, SIP_SSIZE_T, const void *);}
static void assign_QTransform(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTransform *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTransform *>(sipSrc);
}


extern "C" {static void *array_QTransform(SIP_SSIZE_T);}
static void *array_QTransform(SIP_SSIZE_T sipNrElem)
{
    return new QTransform[sipNrElem];
}


extern "C" {static void *copy_QTransform(const void *, SIP_SSIZE_T);}
static void *copy_QTransform(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTransform(reinterpret_cast<const QTransform *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTransform(sipSimpleWrapper *);}
static void dealloc_QTransform(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTransform(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTransform(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTransform(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTransform *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QTransform();

            return sipCpp;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        qreal a5;
        qreal a6;
        qreal a7;
        qreal a8 = 1;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_m33,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "dddddddd|d", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
        {
            sipCpp = new QTransform(a0,a1,a2,a3,a4,a5,a6,a7,a8);

            return sipCpp;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        qreal a5;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "dddddd", &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp = new QTransform(a0,a1,a2,a3,a4,a5);

            return sipCpp;
        }
    }

    {
        const QTransform* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTransform, &a0))
        {
            sipCpp = new QTransform(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTransform[] = {
    {(void *)slot_QTransform___div__, div_slot},
    {(void *)slot_QTransform___add__, add_slot},
    {(void *)slot_QTransform___sub__, sub_slot},
    {(void *)slot_QTransform___isub__, isub_slot},
    {(void *)slot_QTransform___iadd__, iadd_slot},
    {(void *)slot_QTransform___idiv__, idiv_slot},
    {(void *)slot_QTransform___mul__, mul_slot},
    {(void *)slot_QTransform___imul__, imul_slot},
    {(void *)slot_QTransform___ne__, ne_slot},
    {(void *)slot_QTransform___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTransform[] = {
    {SIP_MLNAME_CAST(sipName_adjoint), meth_QTransform_adjoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_adjoint)},
    {SIP_MLNAME_CAST(sipName_determinant), meth_QTransform_determinant, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_determinant)},
    {SIP_MLNAME_CAST(sipName_dx), meth_QTransform_dx, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_dx)},
    {SIP_MLNAME_CAST(sipName_dy), meth_QTransform_dy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_dy)},
    {SIP_MLNAME_CAST(sipName_fromScale), meth_QTransform_fromScale, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_fromScale)},
    {SIP_MLNAME_CAST(sipName_fromTranslate), meth_QTransform_fromTranslate, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_fromTranslate)},
    {SIP_MLNAME_CAST(sipName_inverted), (PyCFunction)meth_QTransform_inverted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTransform_inverted)},
    {SIP_MLNAME_CAST(sipName_isAffine), meth_QTransform_isAffine, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_isAffine)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QTransform_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_isIdentity)},
    {SIP_MLNAME_CAST(sipName_isInvertible), meth_QTransform_isInvertible, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_isInvertible)},
    {SIP_MLNAME_CAST(sipName_isRotating), meth_QTransform_isRotating, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_isRotating)},
    {SIP_MLNAME_CAST(sipName_isScaling), meth_QTransform_isScaling, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_isScaling)},
    {SIP_MLNAME_CAST(sipName_isTranslating), meth_QTransform_isTranslating, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_isTranslating)},
    {SIP_MLNAME_CAST(sipName_m11), meth_QTransform_m11, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m11)},
    {SIP_MLNAME_CAST(sipName_m12), meth_QTransform_m12, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m12)},
    {SIP_MLNAME_CAST(sipName_m13), meth_QTransform_m13, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m13)},
    {SIP_MLNAME_CAST(sipName_m21), meth_QTransform_m21, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m21)},
    {SIP_MLNAME_CAST(sipName_m22), meth_QTransform_m22, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m22)},
    {SIP_MLNAME_CAST(sipName_m23), meth_QTransform_m23, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m23)},
    {SIP_MLNAME_CAST(sipName_m31), meth_QTransform_m31, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m31)},
    {SIP_MLNAME_CAST(sipName_m32), meth_QTransform_m32, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m32)},
    {SIP_MLNAME_CAST(sipName_m33), meth_QTransform_m33, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_m33)},
    {SIP_MLNAME_CAST(sipName_map), meth_QTransform_map, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_map)},
    {SIP_MLNAME_CAST(sipName_mapRect), meth_QTransform_mapRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_mapRect)},
    {SIP_MLNAME_CAST(sipName_mapToPolygon), meth_QTransform_mapToPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_mapToPolygon)},
    {SIP_MLNAME_CAST(sipName_quadToQuad), meth_QTransform_quadToQuad, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_quadToQuad)},
    {SIP_MLNAME_CAST(sipName_quadToSquare), meth_QTransform_quadToSquare, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_quadToSquare)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QTransform_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_reset)},
    {SIP_MLNAME_CAST(sipName_rotate), (PyCFunction)meth_QTransform_rotate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTransform_rotate)},
    {SIP_MLNAME_CAST(sipName_rotateRadians), (PyCFunction)meth_QTransform_rotateRadians, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTransform_rotateRadians)},
    {SIP_MLNAME_CAST(sipName_scale), meth_QTransform_scale, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_scale)},
    {SIP_MLNAME_CAST(sipName_setMatrix), meth_QTransform_setMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_setMatrix)},
    {SIP_MLNAME_CAST(sipName_shear), meth_QTransform_shear, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_shear)},
    {SIP_MLNAME_CAST(sipName_squareToQuad), meth_QTransform_squareToQuad, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_squareToQuad)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QTransform_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_translate)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QTransform_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_transposed)},
    {SIP_MLNAME_CAST(sipName_type), meth_QTransform_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QTransform_type)}
};

static sipEnumMemberDef enummembers_QTransform[] = {
    {sipName_TxNone, static_cast<int>(QTransform::TxNone), 340},
    {sipName_TxProject, static_cast<int>(QTransform::TxProject), 340},
    {sipName_TxRotate, static_cast<int>(QTransform::TxRotate), 340},
    {sipName_TxScale, static_cast<int>(QTransform::TxScale), 340},
    {sipName_TxShear, static_cast<int>(QTransform::TxShear), 340},
    {sipName_TxTranslate, static_cast<int>(QTransform::TxTranslate), 340},
};

PyDoc_STRVAR(doc_QTransform, "\1QTransform()\n"
    "QTransform(float, float, float, float, float, float, float, float, float m33=1)\n"
    "QTransform(float, float, float, float, float, float)\n"
    "QTransform(QTransform)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QTransform = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTransform,
        {0}
    },
    {
        sipNameNr_QTransform,
        {0, 0, 1},
        37, methods_QTransform,
        6, enummembers_QTransform,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTransform,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QTransform,
    init_type_QTransform,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTransform,
    assign_QTransform,
    array_QTransform,
    copy_QTransform,
    release_QTransform,
    cast_QTransform,
    0,
    0,
    0,
    pickle_QTransform,
    0,
    0
},
    0,
    0,
    0,
    0
};
