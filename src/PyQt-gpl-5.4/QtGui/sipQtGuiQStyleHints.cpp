/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qstylehints.sip"
#include <qstylehints.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"

#line 27 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQStyleHints.cpp"


PyDoc_STRVAR(doc_QStyleHints_mouseDoubleClickInterval, "QStyleHints.mouseDoubleClickInterval() -> int");

extern "C" {static PyObject *meth_QStyleHints_mouseDoubleClickInterval(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_mouseDoubleClickInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->mouseDoubleClickInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_mouseDoubleClickInterval, doc_QStyleHints_mouseDoubleClickInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QStyleHints_startDragDistance, "QStyleHints.startDragDistance() -> int");

extern "C" {static PyObject *meth_QStyleHints_startDragDistance(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_startDragDistance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->startDragDistance();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_startDragDistance, doc_QStyleHints_startDragDistance);

    return NULL;
}


PyDoc_STRVAR(doc_QStyleHints_startDragTime, "QStyleHints.startDragTime() -> int");

extern "C" {static PyObject *meth_QStyleHints_startDragTime(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_startDragTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->startDragTime();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_startDragTime, doc_QStyleHints_startDragTime);

    return NULL;
}


PyDoc_STRVAR(doc_QStyleHints_startDragVelocity, "QStyleHints.startDragVelocity() -> int");

extern "C" {static PyObject *meth_QStyleHints_startDragVelocity(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_startDragVelocity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->startDragVelocity();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_startDragVelocity, doc_QStyleHints_startDragVelocity);

    return NULL;
}


PyDoc_STRVAR(doc_QStyleHints_keyboardInputInterval, "QStyleHints.keyboardInputInterval() -> int");

extern "C" {static PyObject *meth_QStyleHints_keyboardInputInterval(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_keyboardInputInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->keyboardInputInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_keyboardInputInterval, doc_QStyleHints_keyboardInputInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QStyleHints_keyboardAutoRepeatRate, "QStyleHints.keyboardAutoRepeatRate() -> int");

extern "C" {static PyObject *meth_QStyleHints_keyboardAutoRepeatRate(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_keyboardAutoRepeatRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->keyboardAutoRepeatRate();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_keyboardAutoRepeatRate, doc_QStyleHints_keyboardAutoRepeatRate);

    return NULL;
}


PyDoc_STRVAR(doc_QStyleHints_cursorFlashTime, "QStyleHints.cursorFlashTime() -> int");

extern "C" {static PyObject *meth_QStyleHints_cursorFlashTime(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_cursorFlashTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cursorFlashTime();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_cursorFlashTime, doc_QStyleHints_cursorFlashTime);

    return NULL;
}


PyDoc_STRVAR(doc_QStyleHints_showIsFullScreen, "QStyleHints.showIsFullScreen() -> bool");

extern "C" {static PyObject *meth_QStyleHints_showIsFullScreen(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_showIsFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->showIsFullScreen();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_showIsFullScreen, doc_QStyleHints_showIsFullScreen);

    return NULL;
}


PyDoc_STRVAR(doc_QStyleHints_passwordMaskDelay, "QStyleHints.passwordMaskDelay() -> int");

extern "C" {static PyObject *meth_QStyleHints_passwordMaskDelay(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_passwordMaskDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->passwordMaskDelay();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_passwordMaskDelay, doc_QStyleHints_passwordMaskDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QStyleHints_fontSmoothingGamma, "QStyleHints.fontSmoothingGamma() -> float");

extern "C" {static PyObject *meth_QStyleHints_fontSmoothingGamma(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_fontSmoothingGamma(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->fontSmoothingGamma();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_fontSmoothingGamma, doc_QStyleHints_fontSmoothingGamma);

    return NULL;
}


PyDoc_STRVAR(doc_QStyleHints_useRtlExtensions, "QStyleHints.useRtlExtensions() -> bool");

extern "C" {static PyObject *meth_QStyleHints_useRtlExtensions(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_useRtlExtensions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->useRtlExtensions();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_useRtlExtensions, doc_QStyleHints_useRtlExtensions);

    return NULL;
}


PyDoc_STRVAR(doc_QStyleHints_passwordMaskCharacter, "QStyleHints.passwordMaskCharacter() -> str");

extern "C" {static PyObject *meth_QStyleHints_passwordMaskCharacter(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_passwordMaskCharacter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            QChar*sipRes;

            sipRes = new QChar(sipCpp->passwordMaskCharacter());

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_passwordMaskCharacter, doc_QStyleHints_passwordMaskCharacter);

    return NULL;
}


PyDoc_STRVAR(doc_QStyleHints_setFocusOnTouchRelease, "QStyleHints.setFocusOnTouchRelease() -> bool");

extern "C" {static PyObject *meth_QStyleHints_setFocusOnTouchRelease(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_setFocusOnTouchRelease(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->setFocusOnTouchRelease();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_setFocusOnTouchRelease, doc_QStyleHints_setFocusOnTouchRelease);

    return NULL;
}


PyDoc_STRVAR(doc_QStyleHints_mousePressAndHoldInterval, "QStyleHints.mousePressAndHoldInterval() -> int");

extern "C" {static PyObject *meth_QStyleHints_mousePressAndHoldInterval(PyObject *, PyObject *);}
static PyObject *meth_QStyleHints_mousePressAndHoldInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStyleHints *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QStyleHints, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->mousePressAndHoldInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QStyleHints, sipName_mousePressAndHoldInterval, doc_QStyleHints_mousePressAndHoldInterval);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QStyleHints(void *, const sipTypeDef *);}
static void *cast_QStyleHints(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QStyleHints)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QStyleHints *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStyleHints(void *, int);}
static void release_QStyleHints(void *sipCppV,int)
{
    QStyleHints *sipCpp = reinterpret_cast<QStyleHints *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QStyleHints(sipSimpleWrapper *);}
static void dealloc_QStyleHints(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QStyleHints(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStyleHints[] = {{162, 0, 1}};


static PyMethodDef methods_QStyleHints[] = {
    {SIP_MLNAME_CAST(sipName_cursorFlashTime), meth_QStyleHints_cursorFlashTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_cursorFlashTime)},
    {SIP_MLNAME_CAST(sipName_fontSmoothingGamma), meth_QStyleHints_fontSmoothingGamma, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_fontSmoothingGamma)},
    {SIP_MLNAME_CAST(sipName_keyboardAutoRepeatRate), meth_QStyleHints_keyboardAutoRepeatRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_keyboardAutoRepeatRate)},
    {SIP_MLNAME_CAST(sipName_keyboardInputInterval), meth_QStyleHints_keyboardInputInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_keyboardInputInterval)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickInterval), meth_QStyleHints_mouseDoubleClickInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_mouseDoubleClickInterval)},
    {SIP_MLNAME_CAST(sipName_mousePressAndHoldInterval), meth_QStyleHints_mousePressAndHoldInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_mousePressAndHoldInterval)},
    {SIP_MLNAME_CAST(sipName_passwordMaskCharacter), meth_QStyleHints_passwordMaskCharacter, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_passwordMaskCharacter)},
    {SIP_MLNAME_CAST(sipName_passwordMaskDelay), meth_QStyleHints_passwordMaskDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_passwordMaskDelay)},
    {SIP_MLNAME_CAST(sipName_setFocusOnTouchRelease), meth_QStyleHints_setFocusOnTouchRelease, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_setFocusOnTouchRelease)},
    {SIP_MLNAME_CAST(sipName_showIsFullScreen), meth_QStyleHints_showIsFullScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_showIsFullScreen)},
    {SIP_MLNAME_CAST(sipName_startDragDistance), meth_QStyleHints_startDragDistance, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_startDragDistance)},
    {SIP_MLNAME_CAST(sipName_startDragTime), meth_QStyleHints_startDragTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_startDragTime)},
    {SIP_MLNAME_CAST(sipName_startDragVelocity), meth_QStyleHints_startDragVelocity, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_startDragVelocity)},
    {SIP_MLNAME_CAST(sipName_useRtlExtensions), meth_QStyleHints_useRtlExtensions, METH_VARARGS, SIP_MLDOC_CAST(doc_QStyleHints_useRtlExtensions)}
};


pyqt5ClassTypeDef sipTypeDef_QtGui_QStyleHints = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QStyleHints,
        {0}
    },
    {
        sipNameNr_QStyleHints,
        {0, 0, 1},
        14, methods_QStyleHints,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QStyleHints,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStyleHints,
    0,
    0,
    0,
    release_QStyleHints,
    cast_QStyleHints,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QStyleHints::staticMetaObject,
    0,
    0,
    0
};
