/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 327 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"

#line 26 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"


PyDoc_STRVAR(doc_QPolygonF_translate, "QPolygonF.translate(QPointF)\n"
    "QPolygonF.translate(float, float)");

extern "C" {static PyObject *meth_QPolygonF_translate(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->translate(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_translate, doc_QPolygonF_translate);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_toPolygon, "QPolygonF.toPolygon() -> QPolygon");

extern "C" {static PyObject *meth_QPolygonF_toPolygon(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_toPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            QPolygon*sipRes;

            sipRes = new QPolygon(sipCpp->toPolygon());

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_toPolygon, doc_QPolygonF_toPolygon);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_isClosed, "QPolygonF.isClosed() -> bool");

extern "C" {static PyObject *meth_QPolygonF_isClosed(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_isClosed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isClosed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_isClosed, doc_QPolygonF_isClosed);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_boundingRect, "QPolygonF.boundingRect() -> QRectF");

extern "C" {static PyObject *meth_QPolygonF_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->boundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_boundingRect, doc_QPolygonF_boundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_containsPoint, "QPolygonF.containsPoint(QPointF, Qt.FillRule) -> bool");

extern "C" {static PyObject *meth_QPolygonF_containsPoint(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_containsPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        Qt::FillRule a1;
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_Qt_FillRule, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->containsPoint(*a0,a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_containsPoint, doc_QPolygonF_containsPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_united, "QPolygonF.united(QPolygonF) -> QPolygonF");

extern "C" {static PyObject *meth_QPolygonF_united(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_united(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF* a0;
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPolygonF, &a0))
        {
            QPolygonF*sipRes;

            sipRes = new QPolygonF(sipCpp->united(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_united, doc_QPolygonF_united);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_intersected, "QPolygonF.intersected(QPolygonF) -> QPolygonF");

extern "C" {static PyObject *meth_QPolygonF_intersected(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF* a0;
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPolygonF, &a0))
        {
            QPolygonF*sipRes;

            sipRes = new QPolygonF(sipCpp->intersected(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_intersected, doc_QPolygonF_intersected);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_subtracted, "QPolygonF.subtracted(QPolygonF) -> QPolygonF");

extern "C" {static PyObject *meth_QPolygonF_subtracted(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_subtracted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF* a0;
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPolygonF, &a0))
        {
            QPolygonF*sipRes;

            sipRes = new QPolygonF(sipCpp->subtracted(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_subtracted, doc_QPolygonF_subtracted);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_translated, "QPolygonF.translated(QPointF) -> QPolygonF\n"
    "QPolygonF.translated(float, float) -> QPolygonF");

extern "C" {static PyObject *meth_QPolygonF_translated(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            QPolygonF*sipRes;

            sipRes = new QPolygonF(sipCpp->translated(*a0));
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    {
        qreal a0;
        qreal a1;
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, &a1))
        {
            QPolygonF*sipRes;

            sipRes = new QPolygonF(sipCpp->translated(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_translated, doc_QPolygonF_translated);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_append, "QPolygonF.append(QPointF)");

extern "C" {static PyObject *meth_QPolygonF_append(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->append(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_append, doc_QPolygonF_append);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_at, "QPolygonF.at(int) -> QPointF");

extern "C" {static PyObject *meth_QPolygonF_at(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygonF, &sipCpp, &a0))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->at(a0));

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_at, doc_QPolygonF_at);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_clear, "QPolygonF.clear()");

extern "C" {static PyObject *meth_QPolygonF_clear(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_clear, doc_QPolygonF_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_contains, "QPolygonF.contains(QPointF) -> bool");

extern "C" {static PyObject *meth_QPolygonF_contains(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_contains, doc_QPolygonF_contains);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_count, "QPolygonF.count(QPointF) -> int\n"
    "QPolygonF.count() -> int");

extern "C" {static PyObject *meth_QPolygonF_count(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            int sipRes;

            sipRes = sipCpp->count(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_count, doc_QPolygonF_count);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_data, "QPolygonF.data() -> sip.voidptr");

extern "C" {static PyObject *meth_QPolygonF_data(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            void*sipRes;

            sipRes = sipCpp->data();

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_data, doc_QPolygonF_data);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_fill, "QPolygonF.fill(QPointF, int size=-1)");

extern "C" {static PyObject *meth_QPolygonF_fill(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_fill(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        int a1 = -1;
        QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            sipCpp->fill(*a0,a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_fill, doc_QPolygonF_fill);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_first, "QPolygonF.first() -> QPointF");

extern "C" {static PyObject *meth_QPolygonF_first(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_first(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = &sipCpp->first();

            return sipConvertFromType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_first, doc_QPolygonF_first);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_indexOf, "QPolygonF.indexOf(QPointF, int from=0) -> int");

extern "C" {static PyObject *meth_QPolygonF_indexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_indexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        int a1 = 0;
        const QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipRes;

            sipRes = sipCpp->indexOf(*a0,a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_indexOf, doc_QPolygonF_indexOf);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_insert, "QPolygonF.insert(int, QPointF)");

extern "C" {static PyObject *meth_QPolygonF_insert(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QPointF* a1;
        int a1State = 0;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->insert(a0,*a1);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_insert, doc_QPolygonF_insert);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_isEmpty, "QPolygonF.isEmpty() -> bool");

extern "C" {static PyObject *meth_QPolygonF_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_isEmpty, doc_QPolygonF_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_last, "QPolygonF.last() -> QPointF");

extern "C" {static PyObject *meth_QPolygonF_last(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_last(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = &sipCpp->last();

            return sipConvertFromType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_last, doc_QPolygonF_last);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_lastIndexOf, "QPolygonF.lastIndexOf(QPointF, int from=-1) -> int");

extern "C" {static PyObject *meth_QPolygonF_lastIndexOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        int a1 = -1;
        const QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_from,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State, &a1))
        {
            int sipRes;

            sipRes = sipCpp->lastIndexOf(*a0,a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_lastIndexOf, doc_QPolygonF_lastIndexOf);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_mid, "QPolygonF.mid(int, int length=-1) -> QPolygonF");

extern "C" {static PyObject *meth_QPolygonF_mid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_mid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = -1;
        const QPolygonF *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, &a1))
        {
            QPolygonF*sipRes;

            sipRes = new QPolygonF(sipCpp->mid(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_mid, doc_QPolygonF_mid);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_prepend, "QPolygonF.prepend(QPointF)");

extern "C" {static PyObject *meth_QPolygonF_prepend(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_prepend(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->prepend(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_prepend, doc_QPolygonF_prepend);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_remove, "QPolygonF.remove(int)\n"
    "QPolygonF.remove(int, int)");

extern "C" {static PyObject *meth_QPolygonF_remove(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygonF, &sipCpp, &a0))
        {
            sipCpp->remove(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, &a1))
        {
            sipCpp->remove(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_remove, doc_QPolygonF_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_replace, "QPolygonF.replace(int, QPointF)");

extern "C" {static PyObject *meth_QPolygonF_replace(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_replace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QPointF* a1;
        int a1State = 0;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->replace(a0,*a1);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_replace, doc_QPolygonF_replace);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_size, "QPolygonF.size() -> int");

extern "C" {static PyObject *meth_QPolygonF_size(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPolygonF, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_size, doc_QPolygonF_size);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_value, "QPolygonF.value(int) -> QPointF\n"
    "QPolygonF.value(int, QPointF) -> QPointF");

extern "C" {static PyObject *meth_QPolygonF_value(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPolygonF, &sipCpp, &a0))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->value(a0));

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    {
        int a0;
        const QPointF* a1;
        int a1State = 0;
        const QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QPolygonF, &sipCpp, &a0, sipType_QPointF, &a1, &a1State))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->value(a0,*a1));
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_value, doc_QPolygonF_value);

    return NULL;
}


PyDoc_STRVAR(doc_QPolygonF_swap, "QPolygonF.swap(QPolygonF)");

extern "C" {static PyObject *meth_QPolygonF_swap(PyObject *, PyObject *);}
static PyObject *meth_QPolygonF_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF* a0;
        QPolygonF *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPolygonF, &sipCpp, sipType_QPolygonF, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName_swap, doc_QPolygonF_swap);

    return NULL;
}


extern "C" {static PyObject *slot_QPolygonF___mul__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF* a0;
        const QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPolygonF, &a0, sipType_QTransform, &a1))
        {
            QPolygonF*sipRes;

            sipRes = new QPolygonF((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static int slot_QPolygonF___contains__(PyObject *,PyObject *);}
static int slot_QPolygonF___contains__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPointF, &a0, &a0State))
        {
            int sipRes = 0;

#line 515 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
// It looks like you can't assign QBool to int.
sipRes = bool(sipCpp->contains(*a0));
#line 1023 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName___contains__, NULL);

    return -1;
}


extern "C" {static int slot_QPolygonF___delitem__(PyObject *,PyObject *);}
static int slot_QPolygonF___delitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            int sipIsErr = 0;

#line 459 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
int len;

len = sipCpp->count();

if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
    sipIsErr = 1;
else
    sipCpp->remove(a0);
#line 1063 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            int sipIsErr = 0;

#line 471 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
SIP_SSIZE_T len, start, stop, step, slicelength, i;

len = sipCpp->count();

#if PY_VERSION_HEX >= 0x03020000
if (PySlice_GetIndicesEx(a0, len, &start, &stop, &step, &slicelength) < 0)
#else
if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
#endif
    sipIsErr = 1;
else
    for (i = 0; i < slicelength; ++i)
    {
        sipCpp->remove(start);
        start += step - 1;
    }
#line 1096 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName___delitem__, NULL);

    return -1;
}


extern "C" {static int slot_QPolygonF___setitem__(PyObject *,PyObject *);}
static int slot_QPolygonF___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QPointF* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "iJ1", &a0, sipType_QPointF, &a1, &a1State))
        {
            int sipIsErr = 0;

#line 412 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
int len;

len = sipCpp->count();

if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
    sipIsErr = 1;
else
    (*sipCpp)[a0] = *a1;
#line 1140 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;
        const QPolygonF* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "TJ9", &PySlice_Type, &a0, sipType_QPolygonF, &a1))
        {
            int sipIsErr = 0;

#line 424 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
SIP_SSIZE_T len, start, stop, step, slicelength, i;

len = sipCpp->count();

#if PY_VERSION_HEX >= 0x03020000
if (PySlice_GetIndicesEx(a0, len, &start, &stop, &step, &slicelength) < 0)
#else
if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
#endif
    sipIsErr = 1;
else
{
    int vlen = a1->count();

    if (vlen != slicelength)
    {
        sipBadLengthForSlice(vlen, slicelength);
        sipIsErr = 1;
    }
    else
    {
        QVector<QPointF>::const_iterator it = a1->begin();

        for (i = 0; i < slicelength; ++i)
        {
            (*sipCpp)[start] = *it;
            start += step;
            ++it;
        }
    }
}
#line 1190 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_QPolygonF___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            QPointF*sipRes = 0;
            int sipIsErr = 0;

#line 400 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
SIP_SSIZE_T idx = sipConvertFromSequenceIndex(a0, sipCpp->count());

if (idx < 0)
    sipIsErr = 1;
else
    sipRes = new QPointF(sipCpp->operator[]((int)idx));
#line 1231 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QPointF,NULL);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1T", &PySlice_Type, &a0))
        {
            QPolygonF*sipRes = 0;
            int sipIsErr = 0;

#line 491 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
SIP_SSIZE_T len, start, stop, step, slicelength, i;

len = sipCpp->count();

#if PY_VERSION_HEX >= 0x03020000
if (PySlice_GetIndicesEx(a0, len, &start, &stop, &step, &slicelength) < 0)
#else
if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
#endif
    sipIsErr = 1;
else
{
    sipRes = new QPolygonF();

    for (i = 0; i < slicelength; ++i)
    {
        (*sipRes) += (*sipCpp)[start];
        start += step;
    }
}
#line 1269 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPolygonF, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static PyObject *slot_QPolygonF___lshift__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QPolygonF* a0;
        const QPointF* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J1", sipType_QPolygonF, &a0, sipType_QPointF, &a1, &a1State))
        {
            PyObject * sipRes = 0;

#line 392 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
    *a0 << *a1;

    sipRes = sipArg0;
    Py_INCREF(sipRes);
#line 1304 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            return sipRes;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,lshift_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QPolygonF___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPolygonF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygonF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPolygonF::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QPolygonF,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPolygonF___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPolygonF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygonF, &a0))
        {
            sipCpp->QPolygonF::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPointF, &a0, &a0State))
        {
            sipCpp->QPolygonF::operator+=(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return NULL;
}


extern "C" {static PyObject *slot_QPolygonF___add__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___add__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPolygonF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygonF, &a0))
        {
            QPolygonF*sipRes;

            sipRes = new QPolygonF(sipCpp->QPolygonF::operator+(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,concat_slot);

    return NULL;
}


extern "C" {static PyObject *slot_QPolygonF___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPolygonF___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPolygonF* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPolygonF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPolygonF::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QPolygonF,sipSelf,sipArg);
}


extern "C" {static SIP_SSIZE_T slot_QPolygonF___len__(PyObject *);}
static SIP_SSIZE_T slot_QPolygonF___len__(PyObject *sipSelf)
{
    QPolygonF *sipCpp = reinterpret_cast<QPolygonF *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPolygonF));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 1472 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPolygonF.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPolygonF(void *, const sipTypeDef *);}
static void *cast_QPolygonF(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QPolygonF)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPolygonF(void *, int);}
static void release_QPolygonF(void *sipCppV,int)
{
    delete reinterpret_cast<QPolygonF *>(sipCppV);
}


extern "C" {static void assign_QPolygonF(void *, SIP_SSIZE_T, const void *);}
static void assign_QPolygonF(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPolygonF *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPolygonF *>(sipSrc);
}


extern "C" {static void *array_QPolygonF(SIP_SSIZE_T);}
static void *array_QPolygonF(SIP_SSIZE_T sipNrElem)
{
    return new QPolygonF[sipNrElem];
}


extern "C" {static void *copy_QPolygonF(const void *, SIP_SSIZE_T);}
static void *copy_QPolygonF(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPolygonF(reinterpret_cast<const QPolygonF *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPolygonF(sipSimpleWrapper *);}
static void dealloc_QPolygonF(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPolygonF(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPolygonF(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPolygonF(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPolygonF *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QPolygonF();

            return sipCpp;
        }
    }

    {
        const QPolygonF* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPolygonF, &a0))
        {
            sipCpp = new QPolygonF(*a0);

            return sipCpp;
        }
    }

    {
        const QVector<QPointF>* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QVector_0100QPointF,&a0, &a0State))
        {
            sipCpp = new QPolygonF(*a0);
            sipReleaseType(const_cast<QVector<QPointF> *>(a0),sipType_QVector_0100QPointF,a0State);

            return sipCpp;
        }
    }

    {
        const QRectF* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QRectF, &a0))
        {
            sipCpp = new QPolygonF(*a0);

            return sipCpp;
        }
    }

    {
        const QPolygon* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPolygon, &a0))
        {
            sipCpp = new QPolygonF(*a0);

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "i", &a0))
        {
            sipCpp = new QPolygonF(a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPolygonF[] = {
    {(void *)slot_QPolygonF___mul__, mul_slot},
    {(void *)slot_QPolygonF___contains__, contains_slot},
    {(void *)slot_QPolygonF___delitem__, delitem_slot},
    {(void *)slot_QPolygonF___setitem__, setitem_slot},
    {(void *)slot_QPolygonF___getitem__, getitem_slot},
    {(void *)slot_QPolygonF___lshift__, lshift_slot},
    {(void *)slot_QPolygonF___eq__, eq_slot},
    {(void *)slot_QPolygonF___iadd__, iconcat_slot},
    {(void *)slot_QPolygonF___add__, concat_slot},
    {(void *)slot_QPolygonF___ne__, ne_slot},
    {(void *)slot_QPolygonF___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPolygonF[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QPolygonF_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_append)},
    {SIP_MLNAME_CAST(sipName_at), meth_QPolygonF_at, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_at)},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QPolygonF_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_boundingRect)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QPolygonF_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_clear)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QPolygonF_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_contains)},
    {SIP_MLNAME_CAST(sipName_containsPoint), meth_QPolygonF_containsPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_containsPoint)},
    {SIP_MLNAME_CAST(sipName_count), meth_QPolygonF_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_count)},
    {SIP_MLNAME_CAST(sipName_data), meth_QPolygonF_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_data)},
    {SIP_MLNAME_CAST(sipName_fill), (PyCFunction)meth_QPolygonF_fill, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygonF_fill)},
    {SIP_MLNAME_CAST(sipName_first), meth_QPolygonF_first, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_first)},
    {SIP_MLNAME_CAST(sipName_indexOf), (PyCFunction)meth_QPolygonF_indexOf, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygonF_indexOf)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QPolygonF_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_insert)},
    {SIP_MLNAME_CAST(sipName_intersected), meth_QPolygonF_intersected, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_intersected)},
    {SIP_MLNAME_CAST(sipName_isClosed), meth_QPolygonF_isClosed, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_isClosed)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QPolygonF_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_isEmpty)},
    {SIP_MLNAME_CAST(sipName_last), meth_QPolygonF_last, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_last)},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), (PyCFunction)meth_QPolygonF_lastIndexOf, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygonF_lastIndexOf)},
    {SIP_MLNAME_CAST(sipName_mid), (PyCFunction)meth_QPolygonF_mid, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPolygonF_mid)},
    {SIP_MLNAME_CAST(sipName_prepend), meth_QPolygonF_prepend, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_prepend)},
    {SIP_MLNAME_CAST(sipName_remove), meth_QPolygonF_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_remove)},
    {SIP_MLNAME_CAST(sipName_replace), meth_QPolygonF_replace, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_replace)},
    {SIP_MLNAME_CAST(sipName_size), meth_QPolygonF_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_size)},
    {SIP_MLNAME_CAST(sipName_subtracted), meth_QPolygonF_subtracted, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_subtracted)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPolygonF_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_swap)},
    {SIP_MLNAME_CAST(sipName_toPolygon), meth_QPolygonF_toPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_toPolygon)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QPolygonF_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_translate)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QPolygonF_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_translated)},
    {SIP_MLNAME_CAST(sipName_united), meth_QPolygonF_united, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_united)},
    {SIP_MLNAME_CAST(sipName_value), meth_QPolygonF_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QPolygonF_value)}
};

PyDoc_STRVAR(doc_QPolygonF, "\1QPolygonF()\n"
    "QPolygonF(QPolygonF)\n"
    "QPolygonF(list-of-QPointF)\n"
    "QPolygonF(QRectF)\n"
    "QPolygonF(QPolygon)\n"
    "QPolygonF(int)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QPolygonF = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPolygonF,
        {0}
    },
    {
        sipNameNr_QPolygonF,
        {0, 0, 1},
        29, methods_QPolygonF,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPolygonF,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPolygonF,
    init_type_QPolygonF,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPolygonF,
    assign_QPolygonF,
    array_QPolygonF,
    copy_QPolygonF,
    release_QPolygonF,
    cast_QPolygonF,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
