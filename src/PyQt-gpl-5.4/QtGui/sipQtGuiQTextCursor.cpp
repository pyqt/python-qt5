/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"

#line 40 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"
#line 65 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"
#line 427 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"
#line 444 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qimage.sip"
#include <qimage.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextdocumentfragment.sip"
#include <qtextdocumentfragment.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"
#line 50 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtexttable.sip"
#include <qtexttable.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"
#line 507 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextlist.sip"
#include <qtextlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"
#line 395 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"
#line 350 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"
#line 247 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextCursor.cpp"


PyDoc_STRVAR(doc_QTextCursor_isNull, "QTextCursor.isNull() -> bool");

extern "C" {static PyObject *meth_QTextCursor_isNull(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_isNull, doc_QTextCursor_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_setPosition, "QTextCursor.setPosition(int, QTextCursor.MoveMode mode=QTextCursor.MoveAnchor)");

extern "C" {static PyObject *meth_QTextCursor_setPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextCursor::MoveMode a1 = QTextCursor::MoveAnchor;
        QTextCursor *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QTextCursor, &sipCpp, &a0, sipType_QTextCursor_MoveMode, &a1))
        {
            sipCpp->setPosition(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setPosition, doc_QTextCursor_setPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_position, "QTextCursor.position() -> int");

extern "C" {static PyObject *meth_QTextCursor_position(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->position();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_position, doc_QTextCursor_position);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_anchor, "QTextCursor.anchor() -> int");

extern "C" {static PyObject *meth_QTextCursor_anchor(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_anchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->anchor();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_anchor, doc_QTextCursor_anchor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_insertText, "QTextCursor.insertText(str)\n"
    "QTextCursor.insertText(str, QTextCharFormat)");

extern "C" {static PyObject *meth_QTextCursor_insertText(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insertText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QTextCharFormat* a1;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QString,&a0, &a0State, sipType_QTextCharFormat, &a1))
        {
            sipCpp->insertText(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertText, doc_QTextCursor_insertText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_movePosition, "QTextCursor.movePosition(QTextCursor.MoveOperation, QTextCursor.MoveMode mode=QTextCursor.MoveAnchor, int n=1) -> bool");

extern "C" {static PyObject *meth_QTextCursor_movePosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_movePosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCursor::MoveOperation a0;
        QTextCursor::MoveMode a1 = QTextCursor::MoveAnchor;
        int a2 = 1;
        QTextCursor *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|Ei", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCursor_MoveOperation, &a0, sipType_QTextCursor_MoveMode, &a1, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->movePosition(a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_movePosition, doc_QTextCursor_movePosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_deleteChar, "QTextCursor.deleteChar()");

extern "C" {static PyObject *meth_QTextCursor_deleteChar(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_deleteChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->deleteChar();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_deleteChar, doc_QTextCursor_deleteChar);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_deletePreviousChar, "QTextCursor.deletePreviousChar()");

extern "C" {static PyObject *meth_QTextCursor_deletePreviousChar(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_deletePreviousChar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->deletePreviousChar();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_deletePreviousChar, doc_QTextCursor_deletePreviousChar);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_select, "QTextCursor.select(QTextCursor.SelectionType)");

extern "C" {static PyObject *meth_QTextCursor_select(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_select(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCursor::SelectionType a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCursor_SelectionType, &a0))
        {
            sipCpp->select(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_select, doc_QTextCursor_select);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_hasSelection, "QTextCursor.hasSelection() -> bool");

extern "C" {static PyObject *meth_QTextCursor_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasSelection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_hasSelection, doc_QTextCursor_hasSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_hasComplexSelection, "QTextCursor.hasComplexSelection() -> bool");

extern "C" {static PyObject *meth_QTextCursor_hasComplexSelection(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_hasComplexSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasComplexSelection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_hasComplexSelection, doc_QTextCursor_hasComplexSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_removeSelectedText, "QTextCursor.removeSelectedText()");

extern "C" {static PyObject *meth_QTextCursor_removeSelectedText(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_removeSelectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->removeSelectedText();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_removeSelectedText, doc_QTextCursor_removeSelectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_clearSelection, "QTextCursor.clearSelection()");

extern "C" {static PyObject *meth_QTextCursor_clearSelection(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_clearSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->clearSelection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_clearSelection, doc_QTextCursor_clearSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_selectionStart, "QTextCursor.selectionStart() -> int");

extern "C" {static PyObject *meth_QTextCursor_selectionStart(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selectionStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->selectionStart();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_selectionStart, doc_QTextCursor_selectionStart);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_selectionEnd, "QTextCursor.selectionEnd() -> int");

extern "C" {static PyObject *meth_QTextCursor_selectionEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selectionEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->selectionEnd();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_selectionEnd, doc_QTextCursor_selectionEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_selectedText, "QTextCursor.selectedText() -> str");

extern "C" {static PyObject *meth_QTextCursor_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->selectedText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_selectedText, doc_QTextCursor_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_selection, "QTextCursor.selection() -> QTextDocumentFragment");

extern "C" {static PyObject *meth_QTextCursor_selection(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            QTextDocumentFragment*sipRes;

            sipRes = new QTextDocumentFragment(sipCpp->selection());

            return sipConvertFromNewType(sipRes,sipType_QTextDocumentFragment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_selection, doc_QTextCursor_selection);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_selectedTableCells, "QTextCursor.selectedTableCells() -> (int, int, int, int)");

extern "C" {static PyObject *meth_QTextCursor_selectedTableCells(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selectedTableCells(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->selectedTableCells(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_selectedTableCells, doc_QTextCursor_selectedTableCells);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_block, "QTextCursor.block() -> QTextBlock");

extern "C" {static PyObject *meth_QTextCursor_block(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_block(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            QTextBlock*sipRes;

            sipRes = new QTextBlock(sipCpp->block());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_block, doc_QTextCursor_block);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_charFormat, "QTextCursor.charFormat() -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextCursor_charFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_charFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            QTextCharFormat*sipRes;

            sipRes = new QTextCharFormat(sipCpp->charFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_charFormat, doc_QTextCursor_charFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_setCharFormat, "QTextCursor.setCharFormat(QTextCharFormat)");

extern "C" {static PyObject *meth_QTextCursor_setCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat* a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->setCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setCharFormat, doc_QTextCursor_setCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_mergeCharFormat, "QTextCursor.mergeCharFormat(QTextCharFormat)");

extern "C" {static PyObject *meth_QTextCursor_mergeCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_mergeCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat* a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->mergeCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_mergeCharFormat, doc_QTextCursor_mergeCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_blockFormat, "QTextCursor.blockFormat() -> QTextBlockFormat");

extern "C" {static PyObject *meth_QTextCursor_blockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_blockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            QTextBlockFormat*sipRes;

            sipRes = new QTextBlockFormat(sipCpp->blockFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextBlockFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_blockFormat, doc_QTextCursor_blockFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_setBlockFormat, "QTextCursor.setBlockFormat(QTextBlockFormat)");

extern "C" {static PyObject *meth_QTextCursor_setBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat* a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextBlockFormat, &a0))
        {
            sipCpp->setBlockFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setBlockFormat, doc_QTextCursor_setBlockFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_mergeBlockFormat, "QTextCursor.mergeBlockFormat(QTextBlockFormat)");

extern "C" {static PyObject *meth_QTextCursor_mergeBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_mergeBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlockFormat* a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextBlockFormat, &a0))
        {
            sipCpp->mergeBlockFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_mergeBlockFormat, doc_QTextCursor_mergeBlockFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_blockCharFormat, "QTextCursor.blockCharFormat() -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextCursor_blockCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_blockCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            QTextCharFormat*sipRes;

            sipRes = new QTextCharFormat(sipCpp->blockCharFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_blockCharFormat, doc_QTextCursor_blockCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_setBlockCharFormat, "QTextCursor.setBlockCharFormat(QTextCharFormat)");

extern "C" {static PyObject *meth_QTextCursor_setBlockCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setBlockCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat* a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->setBlockCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setBlockCharFormat, doc_QTextCursor_setBlockCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_mergeBlockCharFormat, "QTextCursor.mergeBlockCharFormat(QTextCharFormat)");

extern "C" {static PyObject *meth_QTextCursor_mergeBlockCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_mergeBlockCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat* a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->mergeBlockCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_mergeBlockCharFormat, doc_QTextCursor_mergeBlockCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_atBlockStart, "QTextCursor.atBlockStart() -> bool");

extern "C" {static PyObject *meth_QTextCursor_atBlockStart(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_atBlockStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atBlockStart();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_atBlockStart, doc_QTextCursor_atBlockStart);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_atBlockEnd, "QTextCursor.atBlockEnd() -> bool");

extern "C" {static PyObject *meth_QTextCursor_atBlockEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_atBlockEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atBlockEnd();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_atBlockEnd, doc_QTextCursor_atBlockEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_atStart, "QTextCursor.atStart() -> bool");

extern "C" {static PyObject *meth_QTextCursor_atStart(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_atStart(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atStart();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_atStart, doc_QTextCursor_atStart);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_atEnd, "QTextCursor.atEnd() -> bool");

extern "C" {static PyObject *meth_QTextCursor_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->atEnd();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_atEnd, doc_QTextCursor_atEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_insertBlock, "QTextCursor.insertBlock()\n"
    "QTextCursor.insertBlock(QTextBlockFormat)\n"
    "QTextCursor.insertBlock(QTextBlockFormat, QTextCharFormat)");

extern "C" {static PyObject *meth_QTextCursor_insertBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->insertBlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QTextBlockFormat* a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextBlockFormat, &a0))
        {
            sipCpp->insertBlock(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QTextBlockFormat* a0;
        const QTextCharFormat* a1;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextBlockFormat, &a0, sipType_QTextCharFormat, &a1))
        {
            sipCpp->insertBlock(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertBlock, doc_QTextCursor_insertBlock);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_insertList, "QTextCursor.insertList(QTextListFormat) -> QTextList\n"
    "QTextCursor.insertList(QTextListFormat.Style) -> QTextList");

extern "C" {static PyObject *meth_QTextCursor_insertList(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextListFormat* a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextListFormat, &a0))
        {
            QTextList*sipRes;

            sipRes = sipCpp->insertList(*a0);

            return sipConvertFromType(sipRes,sipType_QTextList,NULL);
        }
    }

    {
        QTextListFormat::Style a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextListFormat_Style, &a0))
        {
            QTextList*sipRes;

            sipRes = sipCpp->insertList(a0);

            return sipConvertFromType(sipRes,sipType_QTextList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertList, doc_QTextCursor_insertList);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_createList, "QTextCursor.createList(QTextListFormat) -> QTextList\n"
    "QTextCursor.createList(QTextListFormat.Style) -> QTextList");

extern "C" {static PyObject *meth_QTextCursor_createList(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_createList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextListFormat* a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextListFormat, &a0))
        {
            QTextList*sipRes;

            sipRes = sipCpp->createList(*a0);

            return sipConvertFromType(sipRes,sipType_QTextList,NULL);
        }
    }

    {
        QTextListFormat::Style a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextListFormat_Style, &a0))
        {
            QTextList*sipRes;

            sipRes = sipCpp->createList(a0);

            return sipConvertFromType(sipRes,sipType_QTextList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_createList, doc_QTextCursor_createList);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_currentList, "QTextCursor.currentList() -> QTextList");

extern "C" {static PyObject *meth_QTextCursor_currentList(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_currentList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            QTextList*sipRes;

            sipRes = sipCpp->currentList();

            return sipConvertFromType(sipRes,sipType_QTextList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_currentList, doc_QTextCursor_currentList);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_insertTable, "QTextCursor.insertTable(int, int, QTextTableFormat) -> QTextTable\n"
    "QTextCursor.insertTable(int, int) -> QTextTable");

extern "C" {static PyObject *meth_QTextCursor_insertTable(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QTextTableFormat* a2;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QTextCursor, &sipCpp, &a0, &a1, sipType_QTextTableFormat, &a2))
        {
            QTextTable*sipRes;

            sipRes = sipCpp->insertTable(a0,a1,*a2);

            return sipConvertFromType(sipRes,sipType_QTextTable,NULL);
        }
    }

    {
        int a0;
        int a1;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextCursor, &sipCpp, &a0, &a1))
        {
            QTextTable*sipRes;

            sipRes = sipCpp->insertTable(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTextTable,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertTable, doc_QTextCursor_insertTable);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_currentTable, "QTextCursor.currentTable() -> QTextTable");

extern "C" {static PyObject *meth_QTextCursor_currentTable(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_currentTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            QTextTable*sipRes;

            sipRes = sipCpp->currentTable();

            return sipConvertFromType(sipRes,sipType_QTextTable,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_currentTable, doc_QTextCursor_currentTable);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_insertFrame, "QTextCursor.insertFrame(QTextFrameFormat) -> QTextFrame");

extern "C" {static PyObject *meth_QTextCursor_insertFrame(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFrameFormat* a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextFrameFormat, &a0))
        {
            QTextFrame*sipRes;

            sipRes = sipCpp->insertFrame(*a0);

            return sipConvertFromType(sipRes,sipType_QTextFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertFrame, doc_QTextCursor_insertFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_currentFrame, "QTextCursor.currentFrame() -> QTextFrame");

extern "C" {static PyObject *meth_QTextCursor_currentFrame(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_currentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            QTextFrame*sipRes;

            sipRes = sipCpp->currentFrame();

            return sipConvertFromType(sipRes,sipType_QTextFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_currentFrame, doc_QTextCursor_currentFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_insertFragment, "QTextCursor.insertFragment(QTextDocumentFragment)");

extern "C" {static PyObject *meth_QTextCursor_insertFragment(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocumentFragment* a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextDocumentFragment, &a0))
        {
            sipCpp->insertFragment(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertFragment, doc_QTextCursor_insertFragment);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_insertHtml, "QTextCursor.insertHtml(str)");

extern "C" {static PyObject *meth_QTextCursor_insertHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insertHtml(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertHtml, doc_QTextCursor_insertHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_insertImage, "QTextCursor.insertImage(QTextImageFormat)\n"
    "QTextCursor.insertImage(QTextImageFormat, QTextFrameFormat.Position)\n"
    "QTextCursor.insertImage(str)\n"
    "QTextCursor.insertImage(QImage, str name='')");

extern "C" {static PyObject *meth_QTextCursor_insertImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextImageFormat* a0;
        QTextCursor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextImageFormat, &a0))
        {
            sipCpp->insertImage(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QTextImageFormat* a0;
        QTextFrameFormat::Position a1;
        QTextCursor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9E", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextImageFormat, &a0, sipType_QTextFrameFormat_Position, &a1))
        {
            sipCpp->insertImage(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QTextCursor *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insertImage(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QImage* a0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        QTextCursor *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QImage, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->insertImage(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_insertImage, doc_QTextCursor_insertImage);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_beginEditBlock, "QTextCursor.beginEditBlock()");

extern "C" {static PyObject *meth_QTextCursor_beginEditBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_beginEditBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->beginEditBlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_beginEditBlock, doc_QTextCursor_beginEditBlock);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_joinPreviousEditBlock, "QTextCursor.joinPreviousEditBlock()");

extern "C" {static PyObject *meth_QTextCursor_joinPreviousEditBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_joinPreviousEditBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->joinPreviousEditBlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_joinPreviousEditBlock, doc_QTextCursor_joinPreviousEditBlock);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_endEditBlock, "QTextCursor.endEditBlock()");

extern "C" {static PyObject *meth_QTextCursor_endEditBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_endEditBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            sipCpp->endEditBlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_endEditBlock, doc_QTextCursor_endEditBlock);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_blockNumber, "QTextCursor.blockNumber() -> int");

extern "C" {static PyObject *meth_QTextCursor_blockNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_blockNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blockNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_blockNumber, doc_QTextCursor_blockNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_columnNumber, "QTextCursor.columnNumber() -> int");

extern "C" {static PyObject *meth_QTextCursor_columnNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_columnNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnNumber();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_columnNumber, doc_QTextCursor_columnNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_isCopyOf, "QTextCursor.isCopyOf(QTextCursor) -> bool");

extern "C" {static PyObject *meth_QTextCursor_isCopyOf(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_isCopyOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor* a0;
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isCopyOf(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_isCopyOf, doc_QTextCursor_isCopyOf);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_visualNavigation, "QTextCursor.visualNavigation() -> bool");

extern "C" {static PyObject *meth_QTextCursor_visualNavigation(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_visualNavigation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->visualNavigation();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_visualNavigation, doc_QTextCursor_visualNavigation);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_setVisualNavigation, "QTextCursor.setVisualNavigation(bool)");

extern "C" {static PyObject *meth_QTextCursor_setVisualNavigation(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setVisualNavigation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCursor, &sipCpp, &a0))
        {
            sipCpp->setVisualNavigation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setVisualNavigation, doc_QTextCursor_setVisualNavigation);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_document, "QTextCursor.document() -> QTextDocument");

extern "C" {static PyObject *meth_QTextCursor_document(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            QTextDocument*sipRes;

            sipRes = sipCpp->document();

            return sipConvertFromType(sipRes,sipType_QTextDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_document, doc_QTextCursor_document);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_positionInBlock, "QTextCursor.positionInBlock() -> int");

extern "C" {static PyObject *meth_QTextCursor_positionInBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_positionInBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->positionInBlock();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_positionInBlock, doc_QTextCursor_positionInBlock);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_setVerticalMovementX, "QTextCursor.setVerticalMovementX(int)");

extern "C" {static PyObject *meth_QTextCursor_setVerticalMovementX(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setVerticalMovementX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextCursor, &sipCpp, &a0))
        {
            sipCpp->setVerticalMovementX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setVerticalMovementX, doc_QTextCursor_setVerticalMovementX);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_verticalMovementX, "QTextCursor.verticalMovementX() -> int");

extern "C" {static PyObject *meth_QTextCursor_verticalMovementX(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_verticalMovementX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->verticalMovementX();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_verticalMovementX, doc_QTextCursor_verticalMovementX);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_setKeepPositionOnInsert, "QTextCursor.setKeepPositionOnInsert(bool)");

extern "C" {static PyObject *meth_QTextCursor_setKeepPositionOnInsert(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setKeepPositionOnInsert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextCursor, &sipCpp, &a0))
        {
            sipCpp->setKeepPositionOnInsert(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_setKeepPositionOnInsert, doc_QTextCursor_setKeepPositionOnInsert);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_keepPositionOnInsert, "QTextCursor.keepPositionOnInsert() -> bool");

extern "C" {static PyObject *meth_QTextCursor_keepPositionOnInsert(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_keepPositionOnInsert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextCursor, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->keepPositionOnInsert();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_keepPositionOnInsert, doc_QTextCursor_keepPositionOnInsert);

    return NULL;
}


PyDoc_STRVAR(doc_QTextCursor_swap, "QTextCursor.swap(QTextCursor)");

extern "C" {static PyObject *meth_QTextCursor_swap(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCursor* a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextCursor, &sipCpp, sipType_QTextCursor, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextCursor, sipName_swap, doc_QTextCursor_swap);

    return NULL;
}


extern "C" {static PyObject *slot_QTextCursor___gt__(PyObject *,PyObject *);}
static PyObject *slot_QTextCursor___gt__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextCursor *sipCpp = reinterpret_cast<QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTextCursor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QTextCursor::operator>(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,gt_slot,sipType_QTextCursor,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___ge__(PyObject *,PyObject *);}
static PyObject *slot_QTextCursor___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextCursor *sipCpp = reinterpret_cast<QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTextCursor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QTextCursor::operator>=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ge_slot,sipType_QTextCursor,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___eq__(PyObject *,PyObject *);}
static PyObject *slot_QTextCursor___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextCursor *sipCpp = reinterpret_cast<QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTextCursor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QTextCursor::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QTextCursor,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___le__(PyObject *,PyObject *);}
static PyObject *slot_QTextCursor___le__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextCursor *sipCpp = reinterpret_cast<QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTextCursor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QTextCursor::operator<=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,le_slot,sipType_QTextCursor,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___lt__(PyObject *,PyObject *);}
static PyObject *slot_QTextCursor___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextCursor *sipCpp = reinterpret_cast<QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTextCursor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QTextCursor::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,lt_slot,sipType_QTextCursor,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___ne__(PyObject *,PyObject *);}
static PyObject *slot_QTextCursor___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextCursor *sipCpp = reinterpret_cast<QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTextCursor* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTextCursor, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QTextCursor::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QTextCursor,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextCursor(void *, const sipTypeDef *);}
static void *cast_QTextCursor(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTextCursor)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextCursor(void *, int);}
static void release_QTextCursor(void *sipCppV,int)
{
    delete reinterpret_cast<QTextCursor *>(sipCppV);
}


extern "C" {static void assign_QTextCursor(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextCursor(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextCursor *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextCursor *>(sipSrc);
}


extern "C" {static void *array_QTextCursor(SIP_SSIZE_T);}
static void *array_QTextCursor(SIP_SSIZE_T sipNrElem)
{
    return new QTextCursor[sipNrElem];
}


extern "C" {static void *copy_QTextCursor(const void *, SIP_SSIZE_T);}
static void *copy_QTextCursor(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextCursor(reinterpret_cast<const QTextCursor *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextCursor(sipSimpleWrapper *);}
static void dealloc_QTextCursor(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextCursor(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTextCursor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextCursor(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextCursor *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QTextCursor();

            return sipCpp;
        }
    }

    {
        QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            sipCpp = new QTextCursor(a0);

            return sipCpp;
        }
    }

    {
        QTextFrame* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QTextFrame, &a0))
        {
            sipCpp = new QTextCursor(a0);

            return sipCpp;
        }
    }

    {
        const QTextBlock* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextBlock, &a0))
        {
            sipCpp = new QTextCursor(*a0);

            return sipCpp;
        }
    }

    {
        const QTextCursor* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextCursor, &a0))
        {
            sipCpp = new QTextCursor(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextCursor[] = {
    {(void *)slot_QTextCursor___gt__, gt_slot},
    {(void *)slot_QTextCursor___ge__, ge_slot},
    {(void *)slot_QTextCursor___eq__, eq_slot},
    {(void *)slot_QTextCursor___le__, le_slot},
    {(void *)slot_QTextCursor___lt__, lt_slot},
    {(void *)slot_QTextCursor___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextCursor[] = {
    {SIP_MLNAME_CAST(sipName_anchor), meth_QTextCursor_anchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_anchor)},
    {SIP_MLNAME_CAST(sipName_atBlockEnd), meth_QTextCursor_atBlockEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_atBlockEnd)},
    {SIP_MLNAME_CAST(sipName_atBlockStart), meth_QTextCursor_atBlockStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_atBlockStart)},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QTextCursor_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_atEnd)},
    {SIP_MLNAME_CAST(sipName_atStart), meth_QTextCursor_atStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_atStart)},
    {SIP_MLNAME_CAST(sipName_beginEditBlock), meth_QTextCursor_beginEditBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_beginEditBlock)},
    {SIP_MLNAME_CAST(sipName_block), meth_QTextCursor_block, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_block)},
    {SIP_MLNAME_CAST(sipName_blockCharFormat), meth_QTextCursor_blockCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_blockCharFormat)},
    {SIP_MLNAME_CAST(sipName_blockFormat), meth_QTextCursor_blockFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_blockFormat)},
    {SIP_MLNAME_CAST(sipName_blockNumber), meth_QTextCursor_blockNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_blockNumber)},
    {SIP_MLNAME_CAST(sipName_charFormat), meth_QTextCursor_charFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_charFormat)},
    {SIP_MLNAME_CAST(sipName_clearSelection), meth_QTextCursor_clearSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_clearSelection)},
    {SIP_MLNAME_CAST(sipName_columnNumber), meth_QTextCursor_columnNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_columnNumber)},
    {SIP_MLNAME_CAST(sipName_createList), meth_QTextCursor_createList, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_createList)},
    {SIP_MLNAME_CAST(sipName_currentFrame), meth_QTextCursor_currentFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_currentFrame)},
    {SIP_MLNAME_CAST(sipName_currentList), meth_QTextCursor_currentList, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_currentList)},
    {SIP_MLNAME_CAST(sipName_currentTable), meth_QTextCursor_currentTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_currentTable)},
    {SIP_MLNAME_CAST(sipName_deleteChar), meth_QTextCursor_deleteChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_deleteChar)},
    {SIP_MLNAME_CAST(sipName_deletePreviousChar), meth_QTextCursor_deletePreviousChar, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_deletePreviousChar)},
    {SIP_MLNAME_CAST(sipName_document), meth_QTextCursor_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_document)},
    {SIP_MLNAME_CAST(sipName_endEditBlock), meth_QTextCursor_endEditBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_endEditBlock)},
    {SIP_MLNAME_CAST(sipName_hasComplexSelection), meth_QTextCursor_hasComplexSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_hasComplexSelection)},
    {SIP_MLNAME_CAST(sipName_hasSelection), meth_QTextCursor_hasSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_hasSelection)},
    {SIP_MLNAME_CAST(sipName_insertBlock), meth_QTextCursor_insertBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertBlock)},
    {SIP_MLNAME_CAST(sipName_insertFragment), meth_QTextCursor_insertFragment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertFragment)},
    {SIP_MLNAME_CAST(sipName_insertFrame), meth_QTextCursor_insertFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertFrame)},
    {SIP_MLNAME_CAST(sipName_insertHtml), meth_QTextCursor_insertHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertHtml)},
    {SIP_MLNAME_CAST(sipName_insertImage), (PyCFunction)meth_QTextCursor_insertImage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextCursor_insertImage)},
    {SIP_MLNAME_CAST(sipName_insertList), meth_QTextCursor_insertList, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertList)},
    {SIP_MLNAME_CAST(sipName_insertTable), meth_QTextCursor_insertTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertTable)},
    {SIP_MLNAME_CAST(sipName_insertText), meth_QTextCursor_insertText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_insertText)},
    {SIP_MLNAME_CAST(sipName_isCopyOf), meth_QTextCursor_isCopyOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_isCopyOf)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QTextCursor_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_isNull)},
    {SIP_MLNAME_CAST(sipName_joinPreviousEditBlock), meth_QTextCursor_joinPreviousEditBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_joinPreviousEditBlock)},
    {SIP_MLNAME_CAST(sipName_keepPositionOnInsert), meth_QTextCursor_keepPositionOnInsert, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_keepPositionOnInsert)},
    {SIP_MLNAME_CAST(sipName_mergeBlockCharFormat), meth_QTextCursor_mergeBlockCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_mergeBlockCharFormat)},
    {SIP_MLNAME_CAST(sipName_mergeBlockFormat), meth_QTextCursor_mergeBlockFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_mergeBlockFormat)},
    {SIP_MLNAME_CAST(sipName_mergeCharFormat), meth_QTextCursor_mergeCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_mergeCharFormat)},
    {SIP_MLNAME_CAST(sipName_movePosition), (PyCFunction)meth_QTextCursor_movePosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextCursor_movePosition)},
    {SIP_MLNAME_CAST(sipName_position), meth_QTextCursor_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_position)},
    {SIP_MLNAME_CAST(sipName_positionInBlock), meth_QTextCursor_positionInBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_positionInBlock)},
    {SIP_MLNAME_CAST(sipName_removeSelectedText), meth_QTextCursor_removeSelectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_removeSelectedText)},
    {SIP_MLNAME_CAST(sipName_select), meth_QTextCursor_select, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_select)},
    {SIP_MLNAME_CAST(sipName_selectedTableCells), meth_QTextCursor_selectedTableCells, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_selectedTableCells)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QTextCursor_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_selectedText)},
    {SIP_MLNAME_CAST(sipName_selection), meth_QTextCursor_selection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_selection)},
    {SIP_MLNAME_CAST(sipName_selectionEnd), meth_QTextCursor_selectionEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_selectionEnd)},
    {SIP_MLNAME_CAST(sipName_selectionStart), meth_QTextCursor_selectionStart, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_selectionStart)},
    {SIP_MLNAME_CAST(sipName_setBlockCharFormat), meth_QTextCursor_setBlockCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_setBlockCharFormat)},
    {SIP_MLNAME_CAST(sipName_setBlockFormat), meth_QTextCursor_setBlockFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_setBlockFormat)},
    {SIP_MLNAME_CAST(sipName_setCharFormat), meth_QTextCursor_setCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_setCharFormat)},
    {SIP_MLNAME_CAST(sipName_setKeepPositionOnInsert), meth_QTextCursor_setKeepPositionOnInsert, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_setKeepPositionOnInsert)},
    {SIP_MLNAME_CAST(sipName_setPosition), (PyCFunction)meth_QTextCursor_setPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextCursor_setPosition)},
    {SIP_MLNAME_CAST(sipName_setVerticalMovementX), meth_QTextCursor_setVerticalMovementX, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_setVerticalMovementX)},
    {SIP_MLNAME_CAST(sipName_setVisualNavigation), meth_QTextCursor_setVisualNavigation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_setVisualNavigation)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QTextCursor_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_swap)},
    {SIP_MLNAME_CAST(sipName_verticalMovementX), meth_QTextCursor_verticalMovementX, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_verticalMovementX)},
    {SIP_MLNAME_CAST(sipName_visualNavigation), meth_QTextCursor_visualNavigation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextCursor_visualNavigation)}
};

static sipEnumMemberDef enummembers_QTextCursor[] = {
    {sipName_BlockUnderCursor, static_cast<int>(QTextCursor::BlockUnderCursor), 282},
    {sipName_Document, static_cast<int>(QTextCursor::Document), 282},
    {sipName_Down, static_cast<int>(QTextCursor::Down), 281},
    {sipName_End, static_cast<int>(QTextCursor::End), 281},
    {sipName_EndOfBlock, static_cast<int>(QTextCursor::EndOfBlock), 281},
    {sipName_EndOfLine, static_cast<int>(QTextCursor::EndOfLine), 281},
    {sipName_EndOfWord, static_cast<int>(QTextCursor::EndOfWord), 281},
    {sipName_KeepAnchor, static_cast<int>(QTextCursor::KeepAnchor), 280},
    {sipName_Left, static_cast<int>(QTextCursor::Left), 281},
    {sipName_LineUnderCursor, static_cast<int>(QTextCursor::LineUnderCursor), 282},
    {sipName_MoveAnchor, static_cast<int>(QTextCursor::MoveAnchor), 280},
    {sipName_NextBlock, static_cast<int>(QTextCursor::NextBlock), 281},
    {sipName_NextCell, static_cast<int>(QTextCursor::NextCell), 281},
    {sipName_NextCharacter, static_cast<int>(QTextCursor::NextCharacter), 281},
    {sipName_NextRow, static_cast<int>(QTextCursor::NextRow), 281},
    {sipName_NextWord, static_cast<int>(QTextCursor::NextWord), 281},
    {sipName_NoMove, static_cast<int>(QTextCursor::NoMove), 281},
    {sipName_PreviousBlock, static_cast<int>(QTextCursor::PreviousBlock), 281},
    {sipName_PreviousCell, static_cast<int>(QTextCursor::PreviousCell), 281},
    {sipName_PreviousCharacter, static_cast<int>(QTextCursor::PreviousCharacter), 281},
    {sipName_PreviousRow, static_cast<int>(QTextCursor::PreviousRow), 281},
    {sipName_PreviousWord, static_cast<int>(QTextCursor::PreviousWord), 281},
    {sipName_Right, static_cast<int>(QTextCursor::Right), 281},
    {sipName_Start, static_cast<int>(QTextCursor::Start), 281},
    {sipName_StartOfBlock, static_cast<int>(QTextCursor::StartOfBlock), 281},
    {sipName_StartOfLine, static_cast<int>(QTextCursor::StartOfLine), 281},
    {sipName_StartOfWord, static_cast<int>(QTextCursor::StartOfWord), 281},
    {sipName_Up, static_cast<int>(QTextCursor::Up), 281},
    {sipName_WordLeft, static_cast<int>(QTextCursor::WordLeft), 281},
    {sipName_WordRight, static_cast<int>(QTextCursor::WordRight), 281},
    {sipName_WordUnderCursor, static_cast<int>(QTextCursor::WordUnderCursor), 282},
};

PyDoc_STRVAR(doc_QTextCursor, "\1QTextCursor()\n"
    "QTextCursor(QTextDocument)\n"
    "QTextCursor(QTextFrame)\n"
    "QTextCursor(QTextBlock)\n"
    "QTextCursor(QTextCursor)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QTextCursor = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTextCursor,
        {0}
    },
    {
        sipNameNr_QTextCursor,
        {0, 0, 1},
        58, methods_QTextCursor,
        31, enummembers_QTextCursor,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextCursor,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QTextCursor,
    init_type_QTextCursor,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextCursor,
    assign_QTextCursor,
    array_QTextCursor,
    copy_QTextCursor,
    release_QTextCursor,
    cast_QTextCursor,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
