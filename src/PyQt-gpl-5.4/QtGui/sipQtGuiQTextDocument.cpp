/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 40 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 27 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 101 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 26 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qfont.sip"
#include <qfont.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 65 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 40 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"


class sipQTextDocument : public QTextDocument
{
public:
    sipQTextDocument(QObject*);
    sipQTextDocument(const QString&,QObject*);
    virtual ~sipQTextDocument();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    QTextObject* sipProtectVirt_createObject(bool,const QTextFormat&);
    QVariant sipProtectVirt_loadResource(bool,int,const QUrl&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QVariant loadResource(int,const QUrl&);
    QTextObject* createObject(const QTextFormat&);
    void clear();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextDocument(const sipQTextDocument &);
    sipQTextDocument &operator = (const sipQTextDocument &);

    char sipPyMethods[10];
};

sipQTextDocument::sipQTextDocument(QObject*a0): QTextDocument(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextDocument::sipQTextDocument(const QString& a0,QObject*a1): QTextDocument(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextDocument::~sipQTextDocument()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTextDocument::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QTextDocument);
}

int sipQTextDocument::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTextDocument::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTextDocument,_c,_id,_a);

    return _id;
}

void *sipQTextDocument::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QTextDocument, _clname, &sipCpp) ? sipCpp : QTextDocument::qt_metacast(_clname));
}

void sipQTextDocument::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTextDocument::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextDocument::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTextDocument::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextDocument::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTextDocument::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextDocument::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTextDocument::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtGui_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextDocument::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTextDocument::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTextDocument::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTextDocument::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtGui_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQTextDocument::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTextDocument::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQTextDocument::loadResource(int a0,const QUrl& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_loadResource);

    if (!sipMeth)
        return QTextDocument::loadResource(a0,a1);

    extern QVariant sipVH_QtGui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const QUrl&);

    return sipVH_QtGui_20(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QTextObject* sipQTextDocument::createObject(const QTextFormat& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_createObject);

    if (!sipMeth)
        return QTextDocument::createObject(a0);

    extern QTextObject* sipVH_QtGui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QTextFormat&);

    return sipVH_QtGui_21(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextDocument::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_clear);

    if (!sipMeth)
    {
        QTextDocument::clear();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQTextDocument::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQTextDocument::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQTextDocument::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQTextDocument::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQTextDocument::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQTextDocument::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQTextDocument::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQTextDocument::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQTextDocument::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

QTextObject* sipQTextDocument::sipProtectVirt_createObject(bool sipSelfWasArg,const QTextFormat& a0)
{
    return (sipSelfWasArg ? QTextDocument::createObject(a0) : createObject(a0));
}

QVariant sipQTextDocument::sipProtectVirt_loadResource(bool sipSelfWasArg,int a0,const QUrl& a1)
{
    return (sipSelfWasArg ? QTextDocument::loadResource(a0,a1) : loadResource(a0,a1));
}


PyDoc_STRVAR(doc_QTextDocument_sender, "QTextDocument.sender() -> QObject");

extern "C" {static PyObject *meth_QTextDocument_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTextDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 483 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_sender, doc_QTextDocument_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_receivers, "QTextDocument.receivers(signal) -> int");

extern "C" {static PyObject *meth_QTextDocument_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQTextDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 542 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextDocument.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_receivers, doc_QTextDocument_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_timerEvent, "QTextDocument.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QTextDocument_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQTextDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_timerEvent, doc_QTextDocument_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_childEvent, "QTextDocument.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QTextDocument_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQTextDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_childEvent, doc_QTextDocument_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_customEvent, "QTextDocument.customEvent(QEvent)");

extern "C" {static PyObject *meth_QTextDocument_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTextDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_customEvent, doc_QTextDocument_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_connectNotify, "QTextDocument.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTextDocument_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTextDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_connectNotify, doc_QTextDocument_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_disconnectNotify, "QTextDocument.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTextDocument_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTextDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_disconnectNotify, doc_QTextDocument_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_senderSignalIndex, "QTextDocument.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QTextDocument_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTextDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_senderSignalIndex, doc_QTextDocument_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_isSignalConnected, "QTextDocument.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QTextDocument_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQTextDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_isSignalConnected, doc_QTextDocument_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_clone, "QTextDocument.clone(QObject parent=None) -> QTextDocument");

extern "C" {static PyObject *meth_QTextDocument_clone(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_clone(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0 = 0;
        sipWrapper *sipOwner = 0;
        const QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|JH", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QObject, &a0, &sipOwner))
        {
            QTextDocument*sipRes;

            sipRes = sipCpp->clone(a0);

            return sipConvertFromNewType(sipRes,sipType_QTextDocument,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_clone, doc_QTextDocument_clone);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_isEmpty, "QTextDocument.isEmpty() -> bool");

extern "C" {static PyObject *meth_QTextDocument_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_isEmpty, doc_QTextDocument_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_clear, "QTextDocument.clear()");

extern "C" {static PyObject *meth_QTextDocument_clear(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QTextDocument::clear() : sipCpp->clear());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_clear, doc_QTextDocument_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setUndoRedoEnabled, "QTextDocument.setUndoRedoEnabled(bool)");

extern "C" {static PyObject *meth_QTextDocument_setUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setUndoRedoEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setUndoRedoEnabled, doc_QTextDocument_setUndoRedoEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_isUndoRedoEnabled, "QTextDocument.isUndoRedoEnabled() -> bool");

extern "C" {static PyObject *meth_QTextDocument_isUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_isUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndoRedoEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_isUndoRedoEnabled, doc_QTextDocument_isUndoRedoEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_isUndoAvailable, "QTextDocument.isUndoAvailable() -> bool");

extern "C" {static PyObject *meth_QTextDocument_isUndoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_isUndoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndoAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_isUndoAvailable, doc_QTextDocument_isUndoAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_isRedoAvailable, "QTextDocument.isRedoAvailable() -> bool");

extern "C" {static PyObject *meth_QTextDocument_isRedoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_isRedoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRedoAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_isRedoAvailable, doc_QTextDocument_isRedoAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setDocumentLayout, "QTextDocument.setDocumentLayout(QAbstractTextDocumentLayout)");

extern "C" {static PyObject *meth_QTextDocument_setDocumentLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setDocumentLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractTextDocumentLayout* a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QAbstractTextDocumentLayout, &a0))
        {
            sipCpp->setDocumentLayout(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setDocumentLayout, doc_QTextDocument_setDocumentLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_documentLayout, "QTextDocument.documentLayout() -> QAbstractTextDocumentLayout");

extern "C" {static PyObject *meth_QTextDocument_documentLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_documentLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QAbstractTextDocumentLayout*sipRes;

            sipRes = sipCpp->documentLayout();

            return sipConvertFromType(sipRes,sipType_QAbstractTextDocumentLayout,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_documentLayout, doc_QTextDocument_documentLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setMetaInformation, "QTextDocument.setMetaInformation(QTextDocument.MetaInformation, str)");

extern "C" {static PyObject *meth_QTextDocument_setMetaInformation(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setMetaInformation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextDocument::MetaInformation a0;
        const QString* a1;
        int a1State = 0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextDocument_MetaInformation, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setMetaInformation(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setMetaInformation, doc_QTextDocument_setMetaInformation);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_metaInformation, "QTextDocument.metaInformation(QTextDocument.MetaInformation) -> str");

extern "C" {static PyObject *meth_QTextDocument_metaInformation(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_metaInformation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextDocument::MetaInformation a0;
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextDocument_MetaInformation, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->metaInformation(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_metaInformation, doc_QTextDocument_metaInformation);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_toHtml, "QTextDocument.toHtml(QByteArray encoding=QByteArray()) -> str");

extern "C" {static PyObject *meth_QTextDocument_toHtml(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_toHtml(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray& a0def = QByteArray();
        const QByteArray* a0 = &a0def;
        int a0State = 0;
        const QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            sipName_encoding,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toHtml(*a0));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_toHtml, doc_QTextDocument_toHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setHtml, "QTextDocument.setHtml(str)");

extern "C" {static PyObject *meth_QTextDocument_setHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHtml(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setHtml, doc_QTextDocument_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_toPlainText, "QTextDocument.toPlainText() -> str");

extern "C" {static PyObject *meth_QTextDocument_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toPlainText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_toPlainText, doc_QTextDocument_toPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setPlainText, "QTextDocument.setPlainText(str)");

extern "C" {static PyObject *meth_QTextDocument_setPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlainText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setPlainText, doc_QTextDocument_setPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_find, "QTextDocument.find(str, int position=0, QTextDocument.FindFlags options=0) -> QTextCursor\n"
    "QTextDocument.find(QRegExp, int position=0, QTextDocument.FindFlags options=0) -> QTextCursor\n"
    "QTextDocument.find(str, QTextCursor, QTextDocument.FindFlags options=0) -> QTextCursor\n"
    "QTextDocument.find(QRegExp, QTextCursor, QTextDocument.FindFlags options=0) -> QTextCursor");

extern "C" {static PyObject *meth_QTextDocument_find(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_find(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        int a1 = 0;
        QTextDocument::FindFlags a2def = 0;
        QTextDocument::FindFlags* a2 = &a2def;
        int a2State = 0;
        const QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_position,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|iJ1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QTextDocument_FindFlags, &a2, &a2State))
        {
            QTextCursor*sipRes;

            sipRes = new QTextCursor(sipCpp->find(*a0,a1,*a2));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QTextDocument_FindFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    {
        const QRegExp* a0;
        int a1 = 0;
        QTextDocument::FindFlags a2def = 0;
        QTextDocument::FindFlags* a2 = &a2def;
        int a2State = 0;
        const QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_position,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|iJ1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QRegExp, &a0, &a1, sipType_QTextDocument_FindFlags, &a2, &a2State))
        {
            QTextCursor*sipRes;

            sipRes = new QTextCursor(sipCpp->find(*a0,a1,*a2));
            sipReleaseType(a2,sipType_QTextDocument_FindFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QTextCursor* a1;
        QTextDocument::FindFlags a2def = 0;
        QTextDocument::FindFlags* a2 = &a2def;
        int a2State = 0;
        const QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J9|J1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QTextCursor, &a1, sipType_QTextDocument_FindFlags, &a2, &a2State))
        {
            QTextCursor*sipRes;

            sipRes = new QTextCursor(sipCpp->find(*a0,*a1,*a2));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QTextDocument_FindFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    {
        const QRegExp* a0;
        const QTextCursor* a1;
        QTextDocument::FindFlags a2def = 0;
        QTextDocument::FindFlags* a2 = &a2def;
        int a2State = 0;
        const QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|J1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QRegExp, &a0, sipType_QTextCursor, &a1, sipType_QTextDocument_FindFlags, &a2, &a2State))
        {
            QTextCursor*sipRes;

            sipRes = new QTextCursor(sipCpp->find(*a0,*a1,*a2));
            sipReleaseType(a2,sipType_QTextDocument_FindFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_find, doc_QTextDocument_find);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_rootFrame, "QTextDocument.rootFrame() -> QTextFrame");

extern "C" {static PyObject *meth_QTextDocument_rootFrame(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_rootFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QTextFrame*sipRes;

            sipRes = sipCpp->rootFrame();

            return sipConvertFromType(sipRes,sipType_QTextFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_rootFrame, doc_QTextDocument_rootFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_object, "QTextDocument.object(int) -> QTextObject");

extern "C" {static PyObject *meth_QTextDocument_object(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_object(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            QTextObject*sipRes;

            sipRes = sipCpp->object(a0);

            return sipConvertFromType(sipRes,sipType_QTextObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_object, doc_QTextDocument_object);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_objectForFormat, "QTextDocument.objectForFormat(QTextFormat) -> QTextObject");

extern "C" {static PyObject *meth_QTextDocument_objectForFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_objectForFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextFormat* a0;
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextFormat, &a0))
        {
            QTextObject*sipRes;

            sipRes = sipCpp->objectForFormat(*a0);

            return sipConvertFromType(sipRes,sipType_QTextObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_objectForFormat, doc_QTextDocument_objectForFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_findBlock, "QTextDocument.findBlock(int) -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_findBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_findBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            QTextBlock*sipRes;

            sipRes = new QTextBlock(sipCpp->findBlock(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_findBlock, doc_QTextDocument_findBlock);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_begin, "QTextDocument.begin() -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_begin(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QTextBlock*sipRes;

            sipRes = new QTextBlock(sipCpp->begin());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_begin, doc_QTextDocument_begin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_end, "QTextDocument.end() -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_end(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QTextBlock*sipRes;

            sipRes = new QTextBlock(sipCpp->end());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_end, doc_QTextDocument_end);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setPageSize, "QTextDocument.setPageSize(QSizeF)");

extern "C" {static PyObject *meth_QTextDocument_setPageSize(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setPageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSizeF* a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QSizeF, &a0))
        {
            sipCpp->setPageSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setPageSize, doc_QTextDocument_setPageSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_pageSize, "QTextDocument.pageSize() -> QSizeF");

extern "C" {static PyObject *meth_QTextDocument_pageSize(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_pageSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QSizeF*sipRes;

            sipRes = new QSizeF(sipCpp->pageSize());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_pageSize, doc_QTextDocument_pageSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setDefaultFont, "QTextDocument.setDefaultFont(QFont)");

extern "C" {static PyObject *meth_QTextDocument_setDefaultFont(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setDefaultFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setDefaultFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setDefaultFont, doc_QTextDocument_setDefaultFont);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_defaultFont, "QTextDocument.defaultFont() -> QFont");

extern "C" {static PyObject *meth_QTextDocument_defaultFont(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_defaultFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QFont*sipRes;

            sipRes = new QFont(sipCpp->defaultFont());

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_defaultFont, doc_QTextDocument_defaultFont);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_pageCount, "QTextDocument.pageCount() -> int");

extern "C" {static PyObject *meth_QTextDocument_pageCount(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_pageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->pageCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_pageCount, doc_QTextDocument_pageCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_isModified, "QTextDocument.isModified() -> bool");

extern "C" {static PyObject *meth_QTextDocument_isModified(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isModified();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_isModified, doc_QTextDocument_isModified);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_print_, "QTextDocument.print_(QPagedPaintDevice)");

extern "C" {static PyObject *meth_QTextDocument_print_(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPagedPaintDevice* a0;
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QPagedPaintDevice, &a0))
        {
            sipCpp->print(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_print_, doc_QTextDocument_print_);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_resource, "QTextDocument.resource(int, QUrl) -> QVariant");

extern "C" {static PyObject *meth_QTextDocument_resource(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_resource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QUrl* a1;
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTextDocument, &sipCpp, &a0, sipType_QUrl, &a1))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->resource(a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_resource, doc_QTextDocument_resource);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_addResource, "QTextDocument.addResource(int, QUrl, QVariant)");

extern "C" {static PyObject *meth_QTextDocument_addResource(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_addResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QUrl* a1;
        const QVariant* a2;
        int a2State = 0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9J1", &sipSelf, sipType_QTextDocument, &sipCpp, &a0, sipType_QUrl, &a1, sipType_QVariant, &a2, &a2State))
        {
            sipCpp->addResource(a0,*a1,*a2);
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_addResource, doc_QTextDocument_addResource);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_allFormats, "QTextDocument.allFormats() -> list-of-QTextFormat");

extern "C" {static PyObject *meth_QTextDocument_allFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_allFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QVector<QTextFormat>*sipRes;

            sipRes = new QVector<QTextFormat>(sipCpp->allFormats());

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QTextFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_allFormats, doc_QTextDocument_allFormats);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_markContentsDirty, "QTextDocument.markContentsDirty(int, int)");

extern "C" {static PyObject *meth_QTextDocument_markContentsDirty(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_markContentsDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTextDocument, &sipCpp, &a0, &a1))
        {
            sipCpp->markContentsDirty(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_markContentsDirty, doc_QTextDocument_markContentsDirty);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setUseDesignMetrics, "QTextDocument.setUseDesignMetrics(bool)");

extern "C" {static PyObject *meth_QTextDocument_setUseDesignMetrics(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setUseDesignMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setUseDesignMetrics(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setUseDesignMetrics, doc_QTextDocument_setUseDesignMetrics);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_useDesignMetrics, "QTextDocument.useDesignMetrics() -> bool");

extern "C" {static PyObject *meth_QTextDocument_useDesignMetrics(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_useDesignMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->useDesignMetrics();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_useDesignMetrics, doc_QTextDocument_useDesignMetrics);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_undo, "QTextDocument.undo()\n"
    "QTextDocument.undo(QTextCursor)");

extern "C" {static PyObject *meth_QTextDocument_undo(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            sipCpp->undo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QTextCursor* a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextCursor, &a0))
        {
            sipCpp->undo(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_undo, doc_QTextDocument_undo);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_redo, "QTextDocument.redo()\n"
    "QTextDocument.redo(QTextCursor)");

extern "C" {static PyObject *meth_QTextDocument_redo(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            sipCpp->redo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QTextCursor* a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextCursor, &a0))
        {
            sipCpp->redo(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_redo, doc_QTextDocument_redo);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setModified, "QTextDocument.setModified(bool on=True)");

extern "C" {static PyObject *meth_QTextDocument_setModified(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setModified(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setModified(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setModified, doc_QTextDocument_setModified);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_createObject, "QTextDocument.createObject(QTextFormat) -> QTextObject");

extern "C" {static PyObject *meth_QTextDocument_createObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_createObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTextFormat* a0;
        sipQTextDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextFormat, &a0))
        {
            QTextObject*sipRes;

            sipRes = sipCpp->sipProtectVirt_createObject(sipSelfWasArg,*a0);

            return sipConvertFromNewType(sipRes,sipType_QTextObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_createObject, doc_QTextDocument_createObject);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_loadResource, "QTextDocument.loadResource(int, QUrl) -> QVariant");

extern "C" {static PyObject *meth_QTextDocument_loadResource(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_loadResource(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QUrl* a1;
        sipQTextDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiJ9", &sipSelf, sipType_QTextDocument, &sipCpp, &a0, sipType_QUrl, &a1))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->sipProtectVirt_loadResource(sipSelfWasArg,a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_loadResource, doc_QTextDocument_loadResource);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_drawContents, "QTextDocument.drawContents(QPainter, QRectF rect=QRectF())");

extern "C" {static PyObject *meth_QTextDocument_drawContents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_drawContents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        const QRectF& a1def = QRectF();
        const QRectF* a1 = &a1def;
        QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1))
        {
            sipCpp->drawContents(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_drawContents, doc_QTextDocument_drawContents);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setTextWidth, "QTextDocument.setTextWidth(float)");

extern "C" {static PyObject *meth_QTextDocument_setTextWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setTextWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setTextWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setTextWidth, doc_QTextDocument_setTextWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_textWidth, "QTextDocument.textWidth() -> float");

extern "C" {static PyObject *meth_QTextDocument_textWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_textWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->textWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_textWidth, doc_QTextDocument_textWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_idealWidth, "QTextDocument.idealWidth() -> float");

extern "C" {static PyObject *meth_QTextDocument_idealWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_idealWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->idealWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_idealWidth, doc_QTextDocument_idealWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_adjustSize, "QTextDocument.adjustSize()");

extern "C" {static PyObject *meth_QTextDocument_adjustSize(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_adjustSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            sipCpp->adjustSize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_adjustSize, doc_QTextDocument_adjustSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_size, "QTextDocument.size() -> QSizeF");

extern "C" {static PyObject *meth_QTextDocument_size(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QSizeF*sipRes;

            sipRes = new QSizeF(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_size, doc_QTextDocument_size);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_blockCount, "QTextDocument.blockCount() -> int");

extern "C" {static PyObject *meth_QTextDocument_blockCount(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_blockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blockCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_blockCount, doc_QTextDocument_blockCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setDefaultStyleSheet, "QTextDocument.setDefaultStyleSheet(str)");

extern "C" {static PyObject *meth_QTextDocument_setDefaultStyleSheet(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setDefaultStyleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDefaultStyleSheet(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setDefaultStyleSheet, doc_QTextDocument_setDefaultStyleSheet);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_defaultStyleSheet, "QTextDocument.defaultStyleSheet() -> str");

extern "C" {static PyObject *meth_QTextDocument_defaultStyleSheet(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_defaultStyleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->defaultStyleSheet());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_defaultStyleSheet, doc_QTextDocument_defaultStyleSheet);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_maximumBlockCount, "QTextDocument.maximumBlockCount() -> int");

extern "C" {static PyObject *meth_QTextDocument_maximumBlockCount(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_maximumBlockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumBlockCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_maximumBlockCount, doc_QTextDocument_maximumBlockCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setMaximumBlockCount, "QTextDocument.setMaximumBlockCount(int)");

extern "C" {static PyObject *meth_QTextDocument_setMaximumBlockCount(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setMaximumBlockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setMaximumBlockCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setMaximumBlockCount, doc_QTextDocument_setMaximumBlockCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_defaultTextOption, "QTextDocument.defaultTextOption() -> QTextOption");

extern "C" {static PyObject *meth_QTextDocument_defaultTextOption(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_defaultTextOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QTextOption*sipRes;

            sipRes = new QTextOption(sipCpp->defaultTextOption());

            return sipConvertFromNewType(sipRes,sipType_QTextOption,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_defaultTextOption, doc_QTextDocument_defaultTextOption);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setDefaultTextOption, "QTextDocument.setDefaultTextOption(QTextOption)");

extern "C" {static PyObject *meth_QTextDocument_setDefaultTextOption(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setDefaultTextOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextOption* a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextOption, &a0))
        {
            sipCpp->setDefaultTextOption(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setDefaultTextOption, doc_QTextDocument_setDefaultTextOption);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_revision, "QTextDocument.revision() -> int");

extern "C" {static PyObject *meth_QTextDocument_revision(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_revision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->revision();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_revision, doc_QTextDocument_revision);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_findBlockByNumber, "QTextDocument.findBlockByNumber(int) -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_findBlockByNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_findBlockByNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            QTextBlock*sipRes;

            sipRes = new QTextBlock(sipCpp->findBlockByNumber(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_findBlockByNumber, doc_QTextDocument_findBlockByNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_findBlockByLineNumber, "QTextDocument.findBlockByLineNumber(int) -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_findBlockByLineNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_findBlockByLineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            QTextBlock*sipRes;

            sipRes = new QTextBlock(sipCpp->findBlockByLineNumber(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_findBlockByLineNumber, doc_QTextDocument_findBlockByLineNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_firstBlock, "QTextDocument.firstBlock() -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_firstBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_firstBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QTextBlock*sipRes;

            sipRes = new QTextBlock(sipCpp->firstBlock());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_firstBlock, doc_QTextDocument_firstBlock);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_lastBlock, "QTextDocument.lastBlock() -> QTextBlock");

extern "C" {static PyObject *meth_QTextDocument_lastBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_lastBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QTextBlock*sipRes;

            sipRes = new QTextBlock(sipCpp->lastBlock());

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_lastBlock, doc_QTextDocument_lastBlock);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_indentWidth, "QTextDocument.indentWidth() -> float");

extern "C" {static PyObject *meth_QTextDocument_indentWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_indentWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->indentWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_indentWidth, doc_QTextDocument_indentWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setIndentWidth, "QTextDocument.setIndentWidth(float)");

extern "C" {static PyObject *meth_QTextDocument_setIndentWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setIndentWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setIndentWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setIndentWidth, doc_QTextDocument_setIndentWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_characterAt, "QTextDocument.characterAt(int) -> str");

extern "C" {static PyObject *meth_QTextDocument_characterAt(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_characterAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            QChar*sipRes;

            sipRes = new QChar(sipCpp->characterAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_characterAt, doc_QTextDocument_characterAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_documentMargin, "QTextDocument.documentMargin() -> float");

extern "C" {static PyObject *meth_QTextDocument_documentMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_documentMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->documentMargin();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_documentMargin, doc_QTextDocument_documentMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setDocumentMargin, "QTextDocument.setDocumentMargin(float)");

extern "C" {static PyObject *meth_QTextDocument_setDocumentMargin(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setDocumentMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextDocument, &sipCpp, &a0))
        {
            sipCpp->setDocumentMargin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setDocumentMargin, doc_QTextDocument_setDocumentMargin);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_lineCount, "QTextDocument.lineCount() -> int");

extern "C" {static PyObject *meth_QTextDocument_lineCount(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_lineCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_lineCount, doc_QTextDocument_lineCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_characterCount, "QTextDocument.characterCount() -> int");

extern "C" {static PyObject *meth_QTextDocument_characterCount(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_characterCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->characterCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_characterCount, doc_QTextDocument_characterCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_availableUndoSteps, "QTextDocument.availableUndoSteps() -> int");

extern "C" {static PyObject *meth_QTextDocument_availableUndoSteps(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_availableUndoSteps(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->availableUndoSteps();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_availableUndoSteps, doc_QTextDocument_availableUndoSteps);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_availableRedoSteps, "QTextDocument.availableRedoSteps() -> int");

extern "C" {static PyObject *meth_QTextDocument_availableRedoSteps(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_availableRedoSteps(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->availableRedoSteps();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_availableRedoSteps, doc_QTextDocument_availableRedoSteps);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_clearUndoRedoStacks, "QTextDocument.clearUndoRedoStacks(QTextDocument.Stacks stacks=QTextDocument.UndoAndRedoStacks)");

extern "C" {static PyObject *meth_QTextDocument_clearUndoRedoStacks(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_clearUndoRedoStacks(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTextDocument::Stacks a0 = QTextDocument::UndoAndRedoStacks;
        QTextDocument *sipCpp;

        static const char *sipKwdList[] = {
            sipName_stacks,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QTextDocument_Stacks, &a0))
        {
            sipCpp->clearUndoRedoStacks(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_clearUndoRedoStacks, doc_QTextDocument_clearUndoRedoStacks);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_defaultCursorMoveStyle, "QTextDocument.defaultCursorMoveStyle() -> Qt.CursorMoveStyle");

extern "C" {static PyObject *meth_QTextDocument_defaultCursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_defaultCursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            Qt::CursorMoveStyle sipRes;

            sipRes = sipCpp->defaultCursorMoveStyle();

            return sipConvertFromEnum(sipRes,sipType_Qt_CursorMoveStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_defaultCursorMoveStyle, doc_QTextDocument_defaultCursorMoveStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setDefaultCursorMoveStyle, "QTextDocument.setDefaultCursorMoveStyle(Qt.CursorMoveStyle)");

extern "C" {static PyObject *meth_QTextDocument_setDefaultCursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setDefaultCursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::CursorMoveStyle a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_Qt_CursorMoveStyle, &a0))
        {
            sipCpp->setDefaultCursorMoveStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setDefaultCursorMoveStyle, doc_QTextDocument_setDefaultCursorMoveStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_baseUrl, "QTextDocument.baseUrl() -> QUrl");

extern "C" {static PyObject *meth_QTextDocument_baseUrl(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_baseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextDocument, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->baseUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_baseUrl, doc_QTextDocument_baseUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QTextDocument_setBaseUrl, "QTextDocument.setBaseUrl(QUrl)");

extern "C" {static PyObject *meth_QTextDocument_setBaseUrl(PyObject *, PyObject *);}
static PyObject *meth_QTextDocument_setBaseUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QTextDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextDocument, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setBaseUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextDocument, sipName_setBaseUrl, doc_QTextDocument_setBaseUrl);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextDocument(void *, const sipTypeDef *);}
static void *cast_QTextDocument(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextDocument)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QTextDocument *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextDocument(void *, int);}
static void release_QTextDocument(void *sipCppV,int)
{
    QTextDocument *sipCpp = reinterpret_cast<QTextDocument *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTextDocument(sipSimpleWrapper *);}
static void dealloc_QTextDocument(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTextDocument *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTextDocument(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTextDocument(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextDocument(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTextDocument *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQTextDocument(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQTextDocument(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextDocument[] = {{162, 0, 1}};


static PyMethodDef methods_QTextDocument[] = {
    {SIP_MLNAME_CAST(sipName_addResource), meth_QTextDocument_addResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_addResource)},
    {SIP_MLNAME_CAST(sipName_adjustSize), meth_QTextDocument_adjustSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_adjustSize)},
    {SIP_MLNAME_CAST(sipName_allFormats), meth_QTextDocument_allFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_allFormats)},
    {SIP_MLNAME_CAST(sipName_availableRedoSteps), meth_QTextDocument_availableRedoSteps, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_availableRedoSteps)},
    {SIP_MLNAME_CAST(sipName_availableUndoSteps), meth_QTextDocument_availableUndoSteps, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_availableUndoSteps)},
    {SIP_MLNAME_CAST(sipName_baseUrl), meth_QTextDocument_baseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_baseUrl)},
    {SIP_MLNAME_CAST(sipName_begin), meth_QTextDocument_begin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_begin)},
    {SIP_MLNAME_CAST(sipName_blockCount), meth_QTextDocument_blockCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_blockCount)},
    {SIP_MLNAME_CAST(sipName_characterAt), meth_QTextDocument_characterAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_characterAt)},
    {SIP_MLNAME_CAST(sipName_characterCount), meth_QTextDocument_characterCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_characterCount)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QTextDocument_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QTextDocument_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_clear)},
    {SIP_MLNAME_CAST(sipName_clearUndoRedoStacks), (PyCFunction)meth_QTextDocument_clearUndoRedoStacks, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_clearUndoRedoStacks)},
    {SIP_MLNAME_CAST(sipName_clone), (PyCFunction)meth_QTextDocument_clone, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_clone)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QTextDocument_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createObject), (PyCFunction)meth_QTextDocument_createObject, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_createObject)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QTextDocument_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultCursorMoveStyle), meth_QTextDocument_defaultCursorMoveStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_defaultCursorMoveStyle)},
    {SIP_MLNAME_CAST(sipName_defaultFont), meth_QTextDocument_defaultFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_defaultFont)},
    {SIP_MLNAME_CAST(sipName_defaultStyleSheet), meth_QTextDocument_defaultStyleSheet, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_defaultStyleSheet)},
    {SIP_MLNAME_CAST(sipName_defaultTextOption), meth_QTextDocument_defaultTextOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_defaultTextOption)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QTextDocument_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_documentLayout), meth_QTextDocument_documentLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_documentLayout)},
    {SIP_MLNAME_CAST(sipName_documentMargin), meth_QTextDocument_documentMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_documentMargin)},
    {SIP_MLNAME_CAST(sipName_drawContents), (PyCFunction)meth_QTextDocument_drawContents, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_drawContents)},
    {SIP_MLNAME_CAST(sipName_end), meth_QTextDocument_end, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_end)},
    {SIP_MLNAME_CAST(sipName_find), (PyCFunction)meth_QTextDocument_find, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_find)},
    {SIP_MLNAME_CAST(sipName_findBlock), meth_QTextDocument_findBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_findBlock)},
    {SIP_MLNAME_CAST(sipName_findBlockByLineNumber), meth_QTextDocument_findBlockByLineNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_findBlockByLineNumber)},
    {SIP_MLNAME_CAST(sipName_findBlockByNumber), meth_QTextDocument_findBlockByNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_findBlockByNumber)},
    {SIP_MLNAME_CAST(sipName_firstBlock), meth_QTextDocument_firstBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_firstBlock)},
    {SIP_MLNAME_CAST(sipName_idealWidth), meth_QTextDocument_idealWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_idealWidth)},
    {SIP_MLNAME_CAST(sipName_indentWidth), meth_QTextDocument_indentWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_indentWidth)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QTextDocument_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QTextDocument_isModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_isModified)},
    {SIP_MLNAME_CAST(sipName_isRedoAvailable), meth_QTextDocument_isRedoAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_isRedoAvailable)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QTextDocument_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isUndoAvailable), meth_QTextDocument_isUndoAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_isUndoAvailable)},
    {SIP_MLNAME_CAST(sipName_isUndoRedoEnabled), meth_QTextDocument_isUndoRedoEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_isUndoRedoEnabled)},
    {SIP_MLNAME_CAST(sipName_lastBlock), meth_QTextDocument_lastBlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_lastBlock)},
    {SIP_MLNAME_CAST(sipName_lineCount), meth_QTextDocument_lineCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_lineCount)},
    {SIP_MLNAME_CAST(sipName_loadResource), (PyCFunction)meth_QTextDocument_loadResource, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_loadResource)},
    {SIP_MLNAME_CAST(sipName_markContentsDirty), meth_QTextDocument_markContentsDirty, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_markContentsDirty)},
    {SIP_MLNAME_CAST(sipName_maximumBlockCount), meth_QTextDocument_maximumBlockCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_maximumBlockCount)},
    {SIP_MLNAME_CAST(sipName_metaInformation), meth_QTextDocument_metaInformation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_metaInformation)},
    {SIP_MLNAME_CAST(sipName_object), meth_QTextDocument_object, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_object)},
    {SIP_MLNAME_CAST(sipName_objectForFormat), meth_QTextDocument_objectForFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_objectForFormat)},
    {SIP_MLNAME_CAST(sipName_pageCount), meth_QTextDocument_pageCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_pageCount)},
    {SIP_MLNAME_CAST(sipName_pageSize), meth_QTextDocument_pageSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_pageSize)},
    {SIP_MLNAME_CAST(sipName_print_), meth_QTextDocument_print_, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_print_)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QTextDocument_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_redo), meth_QTextDocument_redo, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_redo)},
    {SIP_MLNAME_CAST(sipName_resource), meth_QTextDocument_resource, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_resource)},
    {SIP_MLNAME_CAST(sipName_revision), meth_QTextDocument_revision, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_revision)},
    {SIP_MLNAME_CAST(sipName_rootFrame), meth_QTextDocument_rootFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_rootFrame)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QTextDocument_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QTextDocument_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setBaseUrl), meth_QTextDocument_setBaseUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setBaseUrl)},
    {SIP_MLNAME_CAST(sipName_setDefaultCursorMoveStyle), meth_QTextDocument_setDefaultCursorMoveStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setDefaultCursorMoveStyle)},
    {SIP_MLNAME_CAST(sipName_setDefaultFont), meth_QTextDocument_setDefaultFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setDefaultFont)},
    {SIP_MLNAME_CAST(sipName_setDefaultStyleSheet), meth_QTextDocument_setDefaultStyleSheet, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setDefaultStyleSheet)},
    {SIP_MLNAME_CAST(sipName_setDefaultTextOption), meth_QTextDocument_setDefaultTextOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setDefaultTextOption)},
    {SIP_MLNAME_CAST(sipName_setDocumentLayout), meth_QTextDocument_setDocumentLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setDocumentLayout)},
    {SIP_MLNAME_CAST(sipName_setDocumentMargin), meth_QTextDocument_setDocumentMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setDocumentMargin)},
    {SIP_MLNAME_CAST(sipName_setHtml), meth_QTextDocument_setHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setHtml)},
    {SIP_MLNAME_CAST(sipName_setIndentWidth), meth_QTextDocument_setIndentWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setIndentWidth)},
    {SIP_MLNAME_CAST(sipName_setMaximumBlockCount), meth_QTextDocument_setMaximumBlockCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setMaximumBlockCount)},
    {SIP_MLNAME_CAST(sipName_setMetaInformation), meth_QTextDocument_setMetaInformation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setMetaInformation)},
    {SIP_MLNAME_CAST(sipName_setModified), (PyCFunction)meth_QTextDocument_setModified, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_setModified)},
    {SIP_MLNAME_CAST(sipName_setPageSize), meth_QTextDocument_setPageSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setPageSize)},
    {SIP_MLNAME_CAST(sipName_setPlainText), meth_QTextDocument_setPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setPlainText)},
    {SIP_MLNAME_CAST(sipName_setTextWidth), meth_QTextDocument_setTextWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setTextWidth)},
    {SIP_MLNAME_CAST(sipName_setUndoRedoEnabled), meth_QTextDocument_setUndoRedoEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setUndoRedoEnabled)},
    {SIP_MLNAME_CAST(sipName_setUseDesignMetrics), meth_QTextDocument_setUseDesignMetrics, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_setUseDesignMetrics)},
    {SIP_MLNAME_CAST(sipName_size), meth_QTextDocument_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_size)},
    {SIP_MLNAME_CAST(sipName_textWidth), meth_QTextDocument_textWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_textWidth)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QTextDocument_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toHtml), (PyCFunction)meth_QTextDocument_toHtml, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextDocument_toHtml)},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QTextDocument_toPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_toPlainText)},
    {SIP_MLNAME_CAST(sipName_undo), meth_QTextDocument_undo, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_undo)},
    {SIP_MLNAME_CAST(sipName_useDesignMetrics), meth_QTextDocument_useDesignMetrics, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextDocument_useDesignMetrics)}
};

static sipEnumMemberDef enummembers_QTextDocument[] = {
    {sipName_DocumentTitle, static_cast<int>(QTextDocument::DocumentTitle), 286},
    {sipName_DocumentUrl, static_cast<int>(QTextDocument::DocumentUrl), 286},
    {sipName_FindBackward, static_cast<int>(QTextDocument::FindBackward), 284},
    {sipName_FindCaseSensitively, static_cast<int>(QTextDocument::FindCaseSensitively), 284},
    {sipName_FindWholeWords, static_cast<int>(QTextDocument::FindWholeWords), 284},
    {sipName_HtmlResource, static_cast<int>(QTextDocument::HtmlResource), 287},
    {sipName_ImageResource, static_cast<int>(QTextDocument::ImageResource), 287},
    {sipName_RedoStack, static_cast<int>(QTextDocument::RedoStack), 288},
    {sipName_StyleSheetResource, static_cast<int>(QTextDocument::StyleSheetResource), 287},
    {sipName_UndoAndRedoStacks, static_cast<int>(QTextDocument::UndoAndRedoStacks), 288},
    {sipName_UndoStack, static_cast<int>(QTextDocument::UndoStack), 288},
    {sipName_UserResource, static_cast<int>(QTextDocument::UserResource), 287},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTextDocument[] = {
    {"baseUrlChanged(QUrl)", "\1QTextDocument.baseUrlChanged[QUrl]", 0, 0},
    {"documentLayoutChanged()", "\1QTextDocument.documentLayoutChanged", 0, 0},
    {"undoCommandAdded()", "\1QTextDocument.undoCommandAdded", 0, 0},
    {"undoAvailable(bool)", "\1QTextDocument.undoAvailable[bool]", 0, 0},
    {"redoAvailable(bool)", "\1QTextDocument.redoAvailable[bool]", 0, 0},
    {"modificationChanged(bool)", "\1QTextDocument.modificationChanged[bool]", 0, 0},
    {"cursorPositionChanged(QTextCursor)", "\1QTextDocument.cursorPositionChanged[QTextCursor]", 0, 0},
    {"contentsChanged()", "\1QTextDocument.contentsChanged", 0, 0},
    {"contentsChange(int,int,int)", "\1QTextDocument.contentsChange[int, int, int]", 0, 0},
    {"blockCountChanged(int)", "\1QTextDocument.blockCountChanged[int]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QTextDocument, "\1QTextDocument(QObject parent=None)\n"
    "QTextDocument(str, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QTextDocument = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTextDocument,
        {0}
    },
    {
        sipNameNr_QTextDocument,
        {0, 0, 1},
        81, methods_QTextDocument,
        12, enummembers_QTextDocument,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextDocument,
    -1,
    -1,
    supers_QTextDocument,
    0,
    init_type_QTextDocument,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextDocument,
    0,
    0,
    0,
    release_QTextDocument,
    cast_QTextDocument,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTextDocument::staticMetaObject,
    0,
    signals_QTextDocument,
    0
};
