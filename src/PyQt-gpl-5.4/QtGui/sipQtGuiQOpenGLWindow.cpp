/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qopenglwindow.sip"
#include <qopenglwindow.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 395 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 368 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qimage.sip"
#include <qimage.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 50 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 743 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qregion.sip"
#include <qregion.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 275 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 686 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 247 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 202 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 333 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 441 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 430 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 354 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 382 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qicon.sip"
#include <qicon.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"
#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"


class sipQOpenGLWindow : public QOpenGLWindow
{
public:
    sipQOpenGLWindow(QOpenGLWindow::UpdateBehavior,QWindow*);
    virtual ~sipQOpenGLWindow();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    void sipProtectVirt_touchEvent(bool,QTouchEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);
    void sipProtectVirt_exposeEvent(bool,QExposeEvent*);
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_initializeGL(bool);
    void sipProtectVirt_resizeGL(bool,int,int);
    void sipProtectVirt_paintGL(bool);
    void sipProtectVirt_paintUnderGL(bool);
    void sipProtectVirt_paintOverGL(bool);
    void sipProtectVirt_paintEvent(bool,QPaintEvent*);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QPaintEngine* paintEngine() const;
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void tabletEvent(QTabletEvent*);
    void touchEvent(QTouchEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void moveEvent(QMoveEvent*);
    QObject* focusObject() const;
    QSize size() const;
    QSurfaceFormat format() const;
    QSurface::SurfaceType surfaceType() const;
    bool event(QEvent*);
    void exposeEvent(QExposeEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void resizeEvent(QResizeEvent*);
    void paintEvent(QPaintEvent*);
    void paintOverGL();
    void paintUnderGL();
    void paintGL();
    void resizeGL(int,int);
    void initializeGL();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQOpenGLWindow(const sipQOpenGLWindow &);
    sipQOpenGLWindow &operator = (const sipQOpenGLWindow &);

    char sipPyMethods[35];
};

sipQOpenGLWindow::sipQOpenGLWindow(QOpenGLWindow::UpdateBehavior a0,QWindow*a1): QOpenGLWindow(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQOpenGLWindow::~sipQOpenGLWindow()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQOpenGLWindow::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtGui_qt_metaobject(sipPySelf,sipType_QOpenGLWindow);
}

int sipQOpenGLWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QOpenGLWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QOpenGLWindow,_c,_id,_a);

    return _id;
}

void *sipQOpenGLWindow::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtGui_qt_metacast(sipPySelf, sipType_QOpenGLWindow, _clname, &sipCpp) ? sipCpp : QOpenGLWindow::qt_metacast(_clname));
}

QPaintEngine* sipQOpenGLWindow::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QOpenGLWindow,sipName_paintEngine);

    if (!sipMeth)
        return 0;

    extern QPaintEngine* sipVH_QtGui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_29(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQOpenGLWindow::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QOpenGLWindow::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QOpenGLWindow::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtGui_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtGui_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQOpenGLWindow::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QOpenGLWindow::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtGui_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLWindow::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    sipVH_QtGui_0(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::touchEvent(QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_touchEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::touchEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTouchEvent*);

    sipVH_QtGui_1(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    sipVH_QtGui_2(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_3(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_3(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_3(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    sipVH_QtGui_3(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_4(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    sipVH_QtGui_4(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    sipVH_QtGui_5(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    sipVH_QtGui_6(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_7(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    sipVH_QtGui_7(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    sipVH_QtGui_8(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQOpenGLWindow::focusObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_focusObject);

    if (!sipMeth)
        return QOpenGLWindow::focusObject();

    extern QObject* sipVH_QtGui_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_11(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQOpenGLWindow::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QOpenGLWindow::size();

    extern QSize sipVH_QtGui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_12(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSurfaceFormat sipQOpenGLWindow::format() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_format);

    if (!sipMeth)
        return QOpenGLWindow::format();

    extern QSurfaceFormat sipVH_QtGui_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_13(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSurface::SurfaceType sipQOpenGLWindow::surfaceType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_surfaceType);

    if (!sipMeth)
        return QOpenGLWindow::surfaceType();

    extern QSurface::SurfaceType sipVH_QtGui_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtGui_14(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQOpenGLWindow::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QOpenGLWindow::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::exposeEvent(QExposeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_exposeEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::exposeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QExposeEvent*);

    sipVH_QtGui_10(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQOpenGLWindow::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QOpenGLWindow::metric(a0);

    extern int sipVH_QtGui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_28(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    sipVH_QtGui_9(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QOpenGLWindow::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    sipVH_QtGui_52(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQOpenGLWindow::paintOverGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_paintOverGL);

    if (!sipMeth)
    {
        QOpenGLWindow::paintOverGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQOpenGLWindow::paintUnderGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_paintUnderGL);

    if (!sipMeth)
    {
        QOpenGLWindow::paintUnderGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQOpenGLWindow::paintGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_paintGL);

    if (!sipMeth)
    {
        QOpenGLWindow::paintGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQOpenGLWindow::resizeGL(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_resizeGL);

    if (!sipMeth)
    {
        QOpenGLWindow::resizeGL(a0,a1);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH_QtGui_17(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQOpenGLWindow::initializeGL()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_initializeGL);

    if (!sipMeth)
    {
        QOpenGLWindow::initializeGL();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtGui_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtGui_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQOpenGLWindow::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQOpenGLWindow::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQOpenGLWindow::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQOpenGLWindow::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQOpenGLWindow::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQOpenGLWindow::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQOpenGLWindow::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWindow::moveEvent(a0) : moveEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QWindow::focusInEvent(a0) : focusInEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QWindow::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QWindow::showEvent(a0) : showEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QWindow::hideEvent(a0) : hideEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QWindow::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QWindow::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWindow::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWindow::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWindow::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWindow::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QWindow::wheelEvent(a0) : wheelEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_touchEvent(bool sipSelfWasArg,QTouchEvent*a0)
{
    (sipSelfWasArg ? QWindow::touchEvent(a0) : touchEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWindow::tabletEvent(a0) : tabletEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_exposeEvent(bool sipSelfWasArg,QExposeEvent*a0)
{
    (sipSelfWasArg ? QPaintDeviceWindow::exposeEvent(a0) : exposeEvent(a0));
}

bool sipQOpenGLWindow::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QPaintDeviceWindow::event(a0) : event(a0));
}

void sipQOpenGLWindow::sipProtectVirt_initializeGL(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QOpenGLWindow::initializeGL() : initializeGL());
}

void sipQOpenGLWindow::sipProtectVirt_resizeGL(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ? QOpenGLWindow::resizeGL(a0,a1) : resizeGL(a0,a1));
}

void sipQOpenGLWindow::sipProtectVirt_paintGL(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QOpenGLWindow::paintGL() : paintGL());
}

void sipQOpenGLWindow::sipProtectVirt_paintUnderGL(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QOpenGLWindow::paintUnderGL() : paintUnderGL());
}

void sipQOpenGLWindow::sipProtectVirt_paintOverGL(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QOpenGLWindow::paintOverGL() : paintOverGL());
}

void sipQOpenGLWindow::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent*a0)
{
    (sipSelfWasArg ? QOpenGLWindow::paintEvent(a0) : paintEvent(a0));
}

void sipQOpenGLWindow::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QOpenGLWindow::resizeEvent(a0) : resizeEvent(a0));
}

int sipQOpenGLWindow::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QOpenGLWindow::metric(a0) : metric(a0));
}


PyDoc_STRVAR(doc_QOpenGLWindow_sender, "QOpenGLWindow.sender() -> QObject");

extern "C" {static PyObject *meth_QOpenGLWindow_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_sender, doc_QOpenGLWindow_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_receivers, "QOpenGLWindow.receivers(signal) -> int");

extern "C" {static PyObject *meth_QOpenGLWindow_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QOpenGLWindow, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1170 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQOpenGLWindow.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_receivers, doc_QOpenGLWindow_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_timerEvent, "QOpenGLWindow.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_timerEvent, doc_QOpenGLWindow_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_childEvent, "QOpenGLWindow.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_childEvent, doc_QOpenGLWindow_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_customEvent, "QOpenGLWindow.customEvent(QEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_customEvent, doc_QOpenGLWindow_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_connectNotify, "QOpenGLWindow.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QOpenGLWindow_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_connectNotify, doc_QOpenGLWindow_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_disconnectNotify, "QOpenGLWindow.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QOpenGLWindow_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_disconnectNotify, doc_QOpenGLWindow_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_senderSignalIndex, "QOpenGLWindow.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QOpenGLWindow_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_senderSignalIndex, doc_QOpenGLWindow_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_isSignalConnected, "QOpenGLWindow.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QOpenGLWindow_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_isSignalConnected, doc_QOpenGLWindow_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_moveEvent, "QOpenGLWindow.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_moveEvent, doc_QOpenGLWindow_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_focusInEvent, "QOpenGLWindow.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_focusInEvent, doc_QOpenGLWindow_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_focusOutEvent, "QOpenGLWindow.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_focusOutEvent, doc_QOpenGLWindow_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_showEvent, "QOpenGLWindow.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_showEvent, doc_QOpenGLWindow_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_hideEvent, "QOpenGLWindow.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_hideEvent, doc_QOpenGLWindow_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_keyPressEvent, "QOpenGLWindow.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_keyPressEvent, doc_QOpenGLWindow_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_keyReleaseEvent, "QOpenGLWindow.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_keyReleaseEvent, doc_QOpenGLWindow_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_mousePressEvent, "QOpenGLWindow.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_mousePressEvent, doc_QOpenGLWindow_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_mouseReleaseEvent, "QOpenGLWindow.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_mouseReleaseEvent, doc_QOpenGLWindow_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_mouseDoubleClickEvent, "QOpenGLWindow.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_mouseDoubleClickEvent, doc_QOpenGLWindow_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_mouseMoveEvent, "QOpenGLWindow.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_mouseMoveEvent, doc_QOpenGLWindow_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_wheelEvent, "QOpenGLWindow.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_wheelEvent, doc_QOpenGLWindow_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_touchEvent, "QOpenGLWindow.touchEvent(QTouchEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_touchEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_touchEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTouchEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QTouchEvent, &a0))
        {
            sipCpp->sipProtectVirt_touchEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_touchEvent, doc_QOpenGLWindow_touchEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_tabletEvent, "QOpenGLWindow.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_tabletEvent, doc_QOpenGLWindow_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_exposeEvent, "QOpenGLWindow.exposeEvent(QExposeEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_exposeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_exposeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QExposeEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QExposeEvent, &a0))
        {
            sipCpp->sipProtectVirt_exposeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_exposeEvent, doc_QOpenGLWindow_exposeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_event, "QOpenGLWindow.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QOpenGLWindow_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_event, doc_QOpenGLWindow_event);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_updateBehavior, "QOpenGLWindow.updateBehavior() -> QOpenGLWindow.UpdateBehavior");

extern "C" {static PyObject *meth_QOpenGLWindow_updateBehavior(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_updateBehavior(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            QOpenGLWindow::UpdateBehavior sipRes;

            sipRes = sipCpp->updateBehavior();

            return sipConvertFromEnum(sipRes,sipType_QOpenGLWindow_UpdateBehavior);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_updateBehavior, doc_QOpenGLWindow_updateBehavior);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_isValid, "QOpenGLWindow.isValid() -> bool");

extern "C" {static PyObject *meth_QOpenGLWindow_isValid(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_isValid, doc_QOpenGLWindow_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_makeCurrent, "QOpenGLWindow.makeCurrent()");

extern "C" {static PyObject *meth_QOpenGLWindow_makeCurrent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_makeCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            sipCpp->makeCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_makeCurrent, doc_QOpenGLWindow_makeCurrent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_doneCurrent, "QOpenGLWindow.doneCurrent()");

extern "C" {static PyObject *meth_QOpenGLWindow_doneCurrent(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_doneCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            sipCpp->doneCurrent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_doneCurrent, doc_QOpenGLWindow_doneCurrent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_context, "QOpenGLWindow.context() -> QOpenGLContext");

extern "C" {static PyObject *meth_QOpenGLWindow_context(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_context(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            QOpenGLContext*sipRes;

            sipRes = sipCpp->context();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_context, doc_QOpenGLWindow_context);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_defaultFramebufferObject, "QOpenGLWindow.defaultFramebufferObject() -> int");

extern "C" {static PyObject *meth_QOpenGLWindow_defaultFramebufferObject(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_defaultFramebufferObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            GLuint sipRes;

            sipRes = sipCpp->defaultFramebufferObject();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_defaultFramebufferObject, doc_QOpenGLWindow_defaultFramebufferObject);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_grabFramebuffer, "QOpenGLWindow.grabFramebuffer() -> QImage");

extern "C" {static PyObject *meth_QOpenGLWindow_grabFramebuffer(PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_grabFramebuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->grabFramebuffer());

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_grabFramebuffer, doc_QOpenGLWindow_grabFramebuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_initializeGL, "QOpenGLWindow.initializeGL()");

extern "C" {static PyObject *meth_QOpenGLWindow_initializeGL(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_initializeGL(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            sipCpp->sipProtectVirt_initializeGL(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_initializeGL, doc_QOpenGLWindow_initializeGL);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_resizeGL, "QOpenGLWindow.resizeGL(int, int)");

extern "C" {static PyObject *meth_QOpenGLWindow_resizeGL(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_resizeGL(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QOpenGLWindow, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtectVirt_resizeGL(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_resizeGL, doc_QOpenGLWindow_resizeGL);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_paintGL, "QOpenGLWindow.paintGL()");

extern "C" {static PyObject *meth_QOpenGLWindow_paintGL(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_paintGL(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            sipCpp->sipProtectVirt_paintGL(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_paintGL, doc_QOpenGLWindow_paintGL);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_paintUnderGL, "QOpenGLWindow.paintUnderGL()");

extern "C" {static PyObject *meth_QOpenGLWindow_paintUnderGL(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_paintUnderGL(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            sipCpp->sipProtectVirt_paintUnderGL(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_paintUnderGL, doc_QOpenGLWindow_paintUnderGL);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_paintOverGL, "QOpenGLWindow.paintOverGL()");

extern "C" {static PyObject *meth_QOpenGLWindow_paintOverGL(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_paintOverGL(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QOpenGLWindow, &sipCpp))
        {
            sipCpp->sipProtectVirt_paintOverGL(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_paintOverGL, doc_QOpenGLWindow_paintOverGL);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_paintEvent, "QOpenGLWindow.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_paintEvent, doc_QOpenGLWindow_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_resizeEvent, "QOpenGLWindow.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QOpenGLWindow_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_resizeEvent, doc_QOpenGLWindow_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QOpenGLWindow_metric, "QOpenGLWindow.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QOpenGLWindow_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QOpenGLWindow_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const sipQOpenGLWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QOpenGLWindow, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QOpenGLWindow, sipName_metric, doc_QOpenGLWindow_metric);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QOpenGLWindow(void *, const sipTypeDef *);}
static void *cast_QOpenGLWindow(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QOpenGLWindow)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QPaintDeviceWindow)->ctd_cast((QPaintDeviceWindow *)(QOpenGLWindow *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QOpenGLWindow(void *, int);}
static void release_QOpenGLWindow(void *sipCppV,int)
{
    QOpenGLWindow *sipCpp = reinterpret_cast<QOpenGLWindow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QOpenGLWindow(sipSimpleWrapper *);}
static void dealloc_QOpenGLWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQOpenGLWindow *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QOpenGLWindow(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QOpenGLWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QOpenGLWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQOpenGLWindow *sipCpp = 0;

    {
        QOpenGLWindow::UpdateBehavior a0 = QOpenGLWindow::NoPartialUpdate;
        QWindow* a1 = 0;

        static const char *sipKwdList[] = {
            sipName_updateBehavior,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|EJH", sipType_QOpenGLWindow_UpdateBehavior, &a0, sipType_QWindow, &a1, sipOwner))
        {
            sipCpp = new sipQOpenGLWindow(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QOpenGLWindow[] = {{185, 255, 1}};


static PyMethodDef methods_QOpenGLWindow[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QOpenGLWindow_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QOpenGLWindow_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_context), meth_QOpenGLWindow_context, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_context)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QOpenGLWindow_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultFramebufferObject), meth_QOpenGLWindow_defaultFramebufferObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_defaultFramebufferObject)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QOpenGLWindow_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_doneCurrent), meth_QOpenGLWindow_doneCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_doneCurrent)},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QOpenGLWindow_event, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_exposeEvent), (PyCFunction)meth_QOpenGLWindow_exposeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QOpenGLWindow_focusInEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QOpenGLWindow_focusOutEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_grabFramebuffer), meth_QOpenGLWindow_grabFramebuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_grabFramebuffer)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QOpenGLWindow_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_initializeGL), (PyCFunction)meth_QOpenGLWindow_initializeGL, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLWindow_initializeGL)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QOpenGLWindow_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QOpenGLWindow_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_isValid)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QOpenGLWindow_keyPressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QOpenGLWindow_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_makeCurrent), meth_QOpenGLWindow_makeCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_makeCurrent)},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QOpenGLWindow_metric, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLWindow_metric)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QOpenGLWindow_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QOpenGLWindow_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QOpenGLWindow_mousePressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QOpenGLWindow_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QOpenGLWindow_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QOpenGLWindow_paintEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLWindow_paintEvent)},
    {SIP_MLNAME_CAST(sipName_paintGL), (PyCFunction)meth_QOpenGLWindow_paintGL, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLWindow_paintGL)},
    {SIP_MLNAME_CAST(sipName_paintOverGL), (PyCFunction)meth_QOpenGLWindow_paintOverGL, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLWindow_paintOverGL)},
    {SIP_MLNAME_CAST(sipName_paintUnderGL), (PyCFunction)meth_QOpenGLWindow_paintUnderGL, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLWindow_paintUnderGL)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QOpenGLWindow_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QOpenGLWindow_resizeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLWindow_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_resizeGL), (PyCFunction)meth_QOpenGLWindow_resizeGL, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QOpenGLWindow_resizeGL)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QOpenGLWindow_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QOpenGLWindow_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QOpenGLWindow_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QOpenGLWindow_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QOpenGLWindow_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_touchEvent), (PyCFunction)meth_QOpenGLWindow_touchEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateBehavior), meth_QOpenGLWindow_updateBehavior, METH_VARARGS, SIP_MLDOC_CAST(doc_QOpenGLWindow_updateBehavior)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QOpenGLWindow_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QOpenGLWindow[] = {
    {sipName_NoPartialUpdate, static_cast<int>(QOpenGLWindow::NoPartialUpdate), 171},
    {sipName_PartialUpdateBlend, static_cast<int>(QOpenGLWindow::PartialUpdateBlend), 171},
    {sipName_PartialUpdateBlit, static_cast<int>(QOpenGLWindow::PartialUpdateBlit), 171},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QOpenGLWindow[] = {
    {"frameSwapped()", "\1QOpenGLWindow.frameSwapped", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QOpenGLWindow, "\1QOpenGLWindow(QOpenGLWindow.UpdateBehavior updateBehavior=QOpenGLWindow.NoPartialUpdate, QWindow parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QOpenGLWindow = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QOpenGLWindow,
        {0}
    },
    {
        sipNameNr_QOpenGLWindow,
        {0, 0, 1},
        40, methods_QOpenGLWindow,
        3, enummembers_QOpenGLWindow,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QOpenGLWindow,
    -1,
    -1,
    supers_QOpenGLWindow,
    0,
    init_type_QOpenGLWindow,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QOpenGLWindow,
    0,
    0,
    0,
    release_QOpenGLWindow,
    cast_QOpenGLWindow,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QOpenGLWindow::staticMetaObject,
    0,
    signals_QOpenGLWindow,
    0
};
