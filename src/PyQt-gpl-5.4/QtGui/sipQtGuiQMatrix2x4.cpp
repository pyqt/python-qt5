/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 781 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQMatrix2x4.cpp"

#line 179 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qgenericmatrix.sip"
#include <qgenericmatrix.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQMatrix2x4.cpp"


PyDoc_STRVAR(doc_QMatrix2x4_data, "QMatrix2x4.data() -> list-of-float");

extern "C" {static PyObject *meth_QMatrix2x4_data(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x4_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMatrix2x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x4, &sipCpp))
        {
            PyObject * sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 853 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qgenericmatrix.sip"
        sipError = qtgui_matrixDataAsList(8, sipCpp->constData(), &sipRes);
#line 53 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQMatrix2x4.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName_data, doc_QMatrix2x4_data);

    return NULL;
}


PyDoc_STRVAR(doc_QMatrix2x4_copyDataTo, "QMatrix2x4.copyDataTo() -> list-of-float");

extern "C" {static PyObject *meth_QMatrix2x4_copyDataTo(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x4_copyDataTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMatrix2x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x4, &sipCpp))
        {
            PyObject * sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 858 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[8];

        sipCpp->copyDataTo(values);
        sipError = qtgui_matrixDataAsList(8, values, &sipRes);
#line 94 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQMatrix2x4.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName_copyDataTo, doc_QMatrix2x4_copyDataTo);

    return NULL;
}


PyDoc_STRVAR(doc_QMatrix2x4_isIdentity, "QMatrix2x4.isIdentity() -> bool");

extern "C" {static PyObject *meth_QMatrix2x4_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x4_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMatrix2x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x4, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName_isIdentity, doc_QMatrix2x4_isIdentity);

    return NULL;
}


PyDoc_STRVAR(doc_QMatrix2x4_setToIdentity, "QMatrix2x4.setToIdentity()");

extern "C" {static PyObject *meth_QMatrix2x4_setToIdentity(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x4_setToIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMatrix2x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x4, &sipCpp))
        {
            sipCpp->setToIdentity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName_setToIdentity, doc_QMatrix2x4_setToIdentity);

    return NULL;
}


PyDoc_STRVAR(doc_QMatrix2x4_fill, "QMatrix2x4.fill(float)");

extern "C" {static PyObject *meth_QMatrix2x4_fill(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x4_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        QMatrix2x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QMatrix2x4, &sipCpp, &a0))
        {
            sipCpp->fill(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName_fill, doc_QMatrix2x4_fill);

    return NULL;
}


PyDoc_STRVAR(doc_QMatrix2x4_transposed, "QMatrix2x4.transposed() -> QMatrix4x2");

extern "C" {static PyObject *meth_QMatrix2x4_transposed(PyObject *, PyObject *);}
static PyObject *meth_QMatrix2x4_transposed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMatrix2x4 *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMatrix2x4, &sipCpp))
        {
            QMatrix4x2*sipRes;

            sipRes = new QMatrix4x2(sipCpp->transposed());

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x2,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName_transposed, doc_QMatrix2x4_transposed);

    return NULL;
}


extern "C" {static PyObject *slot_QMatrix2x4___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QMatrix2x4 *sipCpp = reinterpret_cast<QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMatrix2x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x4, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QMatrix2x4::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QMatrix2x4,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QMatrix2x4___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QMatrix2x4 *sipCpp = reinterpret_cast<QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMatrix2x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x4, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QMatrix2x4::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QMatrix2x4,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QMatrix2x4___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QMatrix2x4 *sipCpp = reinterpret_cast<QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp->QMatrix2x4::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix2x4___imul__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QMatrix2x4 *sipCpp = reinterpret_cast<QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp->QMatrix2x4::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix2x4___isub__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QMatrix2x4 *sipCpp = reinterpret_cast<QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMatrix2x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x4, &a0))
        {
            sipCpp->QMatrix2x4::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QMatrix2x4___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QMatrix2x4)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QMatrix2x4 *sipCpp = reinterpret_cast<QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMatrix2x4* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMatrix2x4, &a0))
        {
            sipCpp->QMatrix2x4::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QMatrix2x4___setitem__(PyObject *,PyObject *);}
static int slot_QMatrix2x4___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    QMatrix2x4 *sipCpp = reinterpret_cast<QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        float a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "P0f", &a0, &a1))
        {
            sipErrorState sipError = sipErrorNone;

#line 880 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 2, 4, &row, &column)) == sipErrorNone)
            sipCpp->operator()(row, column) = a1;
#line 469 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQMatrix2x4.cpp"

            if (sipError == sipErrorFail)
                return -1;

            if (sipError == sipErrorNone)
            {
            return 0;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_QMatrix2x4___getitem__(PyObject *,PyObject *);}
static PyObject *slot_QMatrix2x4___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QMatrix2x4 *sipCpp = reinterpret_cast<QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1P0", &a0))
        {
            PyObject * sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 866 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qgenericmatrix.sip"
        int row, column;

        if ((sipError = qtgui_matrixParseIndex(a0, 2, 4, &row, &column)) == sipErrorNone)
        {
            sipRes = PyFloat_FromDouble(sipCpp->operator()(row, column));

            if (!sipRes)
                sipError = sipErrorFail;
        }
#line 518 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQMatrix2x4.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipRes;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMatrix2x4, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static PyObject *slot_QMatrix2x4___repr__(PyObject *);}
static PyObject *slot_QMatrix2x4___repr__(PyObject *sipSelf)
{
    QMatrix2x4 *sipCpp = reinterpret_cast<QMatrix2x4 *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMatrix2x4));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 808 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qgenericmatrix.sip"
        bool bad = false;
        int i;
        PyObject *m[8];
        PYQT_FLOAT data[8];

        // The raw data is in column-major order but we want row-major order.
        sipCpp->copyDataTo(data);

        for (i = 0; i < 8; ++i)
        {
            m[i] = PyFloat_FromDouble(data[i]);

            if (!m[i])
                bad = true;
        }

        if (!bad)
        {
#if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QMatrix2x4("
                    "%R, %R, %R, %R, "
                    "%R, %R, %R, %R)",
                    m[0], m[1], m[2], m[3],
                    m[4], m[5], m[6], m[7]);
#else
            sipRes = PyString_FromString("PyQt5.QtGui.QMatrix2x4(");

            for (i = 0; i < 8; ++i)
            {
                if (i != 0)
                    PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));

                PyString_ConcatAndDel(&sipRes, PyObject_Repr(m[i]));
            }

            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
#endif
        }

        for (i = 0; i < 8; ++i)
            Py_XDECREF(m[i]);
#line 594 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQMatrix2x4.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMatrix2x4(void *, const sipTypeDef *);}
static void *cast_QMatrix2x4(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QMatrix2x4)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMatrix2x4(void *, int);}
static void release_QMatrix2x4(void *sipCppV,int)
{
    delete reinterpret_cast<QMatrix2x4 *>(sipCppV);
}


extern "C" {static PyObject *pickle_QMatrix2x4(void *);}
static PyObject *pickle_QMatrix2x4(void *sipCppV)
{
    QMatrix2x4 *sipCpp = reinterpret_cast<QMatrix2x4 *>(sipCppV);
    PyObject *sipRes;

#line 785 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT data[8];

        // We want the data in row-major order.
        sipCpp->copyDataTo(data);

        sipRes = Py_BuildValue((char *)"dddddddd",
                (double)data[0], (double)data[1], (double)data[2], (double)data[3],
                (double)data[4], (double)data[5], (double)data[6], (double)data[7]);
#line 638 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQMatrix2x4.cpp"

    return sipRes;
}


extern "C" {static void assign_QMatrix2x4(void *, SIP_SSIZE_T, const void *);}
static void assign_QMatrix2x4(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QMatrix2x4 *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QMatrix2x4 *>(sipSrc);
}


extern "C" {static void *array_QMatrix2x4(SIP_SSIZE_T);}
static void *array_QMatrix2x4(SIP_SSIZE_T sipNrElem)
{
    return new QMatrix2x4[sipNrElem];
}


extern "C" {static void *copy_QMatrix2x4(const void *, SIP_SSIZE_T);}
static void *copy_QMatrix2x4(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QMatrix2x4(reinterpret_cast<const QMatrix2x4 *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMatrix2x4(sipSimpleWrapper *);}
static void dealloc_QMatrix2x4(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QMatrix2x4(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QMatrix2x4(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMatrix2x4(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QMatrix2x4 *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QMatrix2x4();

            return sipCpp;
        }
    }

    {
        const QMatrix2x4* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QMatrix2x4, &a0))
        {
            sipCpp = new QMatrix2x4(*a0);

            return sipCpp;
        }
    }

    {
        PyObject * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "P0", &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 800 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qgenericmatrix.sip"
        PYQT_FLOAT values[8];

        if ((sipError = qtgui_matrixDataFromSequence(a0, 8, values)) == sipErrorNone)
            sipCpp = new QMatrix2x4(values);
#line 712 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQMatrix2x4.cpp"

            if (sipError == sipErrorNone)
                return sipCpp;

            if (sipUnused)
            {
                Py_XDECREF(*sipUnused);
            }

            sipAddException(sipError, sipParseErr);

            if (sipError == sipErrorFail)
                return NULL;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMatrix2x4[] = {
    {(void *)slot_QMatrix2x4___ne__, ne_slot},
    {(void *)slot_QMatrix2x4___eq__, eq_slot},
    {(void *)slot_QMatrix2x4___idiv__, idiv_slot},
    {(void *)slot_QMatrix2x4___imul__, imul_slot},
    {(void *)slot_QMatrix2x4___isub__, isub_slot},
    {(void *)slot_QMatrix2x4___iadd__, iadd_slot},
    {(void *)slot_QMatrix2x4___setitem__, setitem_slot},
    {(void *)slot_QMatrix2x4___getitem__, getitem_slot},
    {(void *)slot_QMatrix2x4___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMatrix2x4[] = {
    {SIP_MLNAME_CAST(sipName_copyDataTo), meth_QMatrix2x4_copyDataTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x4_copyDataTo)},
    {SIP_MLNAME_CAST(sipName_data), meth_QMatrix2x4_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x4_data)},
    {SIP_MLNAME_CAST(sipName_fill), meth_QMatrix2x4_fill, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x4_fill)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QMatrix2x4_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x4_isIdentity)},
    {SIP_MLNAME_CAST(sipName_setToIdentity), meth_QMatrix2x4_setToIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x4_setToIdentity)},
    {SIP_MLNAME_CAST(sipName_transposed), meth_QMatrix2x4_transposed, METH_VARARGS, SIP_MLDOC_CAST(doc_QMatrix2x4_transposed)}
};

PyDoc_STRVAR(doc_QMatrix2x4, "\1QMatrix2x4()\n"
    "QMatrix2x4(QMatrix2x4)\n"
    "QMatrix2x4(sequence-of-float)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QMatrix2x4 = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMatrix2x4,
        {0}
    },
    {
        sipNameNr_QMatrix2x4,
        {0, 0, 1},
        6, methods_QMatrix2x4,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMatrix2x4,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QMatrix2x4,
    init_type_QMatrix2x4,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMatrix2x4,
    assign_QMatrix2x4,
    array_QMatrix2x4,
    copy_QMatrix2x4,
    release_QMatrix2x4,
    cast_QMatrix2x4,
    0,
    0,
    0,
    pickle_QMatrix2x4,
    0,
    0
},
    0,
    0,
    0,
    0
};
