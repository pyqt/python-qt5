/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qdesktopservices.sip"
#include <qdesktopservices.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQDesktopServices.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQDesktopServices.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQDesktopServices.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQDesktopServices.cpp"


PyDoc_STRVAR(doc_QDesktopServices_openUrl, "QDesktopServices.openUrl(QUrl) -> bool");

extern "C" {static PyObject *meth_QDesktopServices_openUrl(PyObject *, PyObject *);}
static PyObject *meth_QDesktopServices_openUrl(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QUrl, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QDesktopServices::openUrl(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesktopServices, sipName_openUrl, doc_QDesktopServices_openUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QDesktopServices_setUrlHandler, "QDesktopServices.setUrlHandler(str, QObject, str)\n"
    "QDesktopServices.setUrlHandler(str, callable)");

extern "C" {static PyObject *meth_QDesktopServices_setUrlHandler(PyObject *, PyObject *);}
static PyObject *meth_QDesktopServices_setUrlHandler(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QObject* a1;
        const char* a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J8s", sipType_QString,&a0, &a0State, sipType_QObject, &a1, &a2))
        {
            QDesktopServices::setUrlHandler(*a0,a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        PyObject * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1F", sipType_QString,&a0, &a0State, &a1))
        {
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qdesktopservices.sip"
        // Allow a callable that must be a slot of a QObject, although we never tell
        // the user if it isn't.
        if (PyMethod_Check(a1))
        {
            PyObject *self = PyMethod_GET_SELF(a1);
            PyObject *func = PyMethod_GET_FUNCTION(a1);
        
            int iserr = 0;
            QObject *receiver = reinterpret_cast<QObject *>(sipForceConvertToType(
                    self, sipType_QObject, NULL, SIP_NOT_NONE, NULL, &iserr));
        
            if (!iserr && PyFunction_Check(func))
            {
                PyObject *ascii_obj = ((PyFunctionObject *)func)->func_name;
                const char *ascii = sipString_AsASCIIString(&ascii_obj);
        
                if (ascii)
                {
                    QDesktopServices::setUrlHandler(*a0, receiver, ascii);
        
                    Py_DECREF(ascii_obj);
                }
            }
        }
#line 127 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQDesktopServices.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesktopServices, sipName_setUrlHandler, doc_QDesktopServices_setUrlHandler);

    return NULL;
}


PyDoc_STRVAR(doc_QDesktopServices_unsetUrlHandler, "QDesktopServices.unsetUrlHandler(str)");

extern "C" {static PyObject *meth_QDesktopServices_unsetUrlHandler(PyObject *, PyObject *);}
static PyObject *meth_QDesktopServices_unsetUrlHandler(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QDesktopServices::unsetUrlHandler(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesktopServices, sipName_unsetUrlHandler, doc_QDesktopServices_unsetUrlHandler);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDesktopServices(void *, const sipTypeDef *);}
static void *cast_QDesktopServices(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDesktopServices)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDesktopServices(void *, int);}
static void release_QDesktopServices(void *sipCppV,int)
{
    delete reinterpret_cast<QDesktopServices *>(sipCppV);
}


extern "C" {static void assign_QDesktopServices(void *, SIP_SSIZE_T, const void *);}
static void assign_QDesktopServices(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDesktopServices *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDesktopServices *>(sipSrc);
}


extern "C" {static void *array_QDesktopServices(SIP_SSIZE_T);}
static void *array_QDesktopServices(SIP_SSIZE_T sipNrElem)
{
    return new QDesktopServices[sipNrElem];
}


extern "C" {static void *copy_QDesktopServices(const void *, SIP_SSIZE_T);}
static void *copy_QDesktopServices(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDesktopServices(reinterpret_cast<const QDesktopServices *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDesktopServices(sipSimpleWrapper *);}
static void dealloc_QDesktopServices(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDesktopServices(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QDesktopServices(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDesktopServices(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QDesktopServices *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QDesktopServices();

            return sipCpp;
        }
    }

    {
        const QDesktopServices* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDesktopServices, &a0))
        {
            sipCpp = new QDesktopServices(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QDesktopServices[] = {
    {SIP_MLNAME_CAST(sipName_openUrl), meth_QDesktopServices_openUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesktopServices_openUrl)},
    {SIP_MLNAME_CAST(sipName_setUrlHandler), meth_QDesktopServices_setUrlHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesktopServices_setUrlHandler)},
    {SIP_MLNAME_CAST(sipName_unsetUrlHandler), meth_QDesktopServices_unsetUrlHandler, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesktopServices_unsetUrlHandler)}
};

PyDoc_STRVAR(doc_QDesktopServices, "\1QDesktopServices()\n"
    "QDesktopServices(QDesktopServices)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QDesktopServices = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QDesktopServices,
        {0}
    },
    {
        sipNameNr_QDesktopServices,
        {0, 0, 1},
        3, methods_QDesktopServices,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDesktopServices,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QDesktopServices,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDesktopServices,
    assign_QDesktopServices,
    array_QDesktopServices,
    copy_QDesktopServices,
    release_QDesktopServices,
    cast_QDesktopServices,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
