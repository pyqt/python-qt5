/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qfont.sip"
#include <qfont.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qglyphrun.sip"
#include <qglyphrun.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 26 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 70 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 68 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 71 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 74 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 77 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQTextLayout.cpp"


PyDoc_STRVAR(doc_QTextLayout_setFont, "QTextLayout.setFont(QFont)");

extern "C" {static PyObject *meth_QTextLayout_setFont(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setFont, doc_QTextLayout_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_font, "QTextLayout.font() -> QFont");

extern "C" {static PyObject *meth_QTextLayout_font(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            QFont*sipRes;

            sipRes = new QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_font, doc_QTextLayout_font);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_setText, "QTextLayout.setText(str)");

extern "C" {static PyObject *meth_QTextLayout_setText(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setText, doc_QTextLayout_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_text, "QTextLayout.text() -> str");

extern "C" {static PyObject *meth_QTextLayout_text(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_text, doc_QTextLayout_text);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_setTextOption, "QTextLayout.setTextOption(QTextOption)");

extern "C" {static PyObject *meth_QTextLayout_setTextOption(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setTextOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextOption* a0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QTextOption, &a0))
        {
            sipCpp->setTextOption(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setTextOption, doc_QTextLayout_setTextOption);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_textOption, "QTextLayout.textOption() -> QTextOption");

extern "C" {static PyObject *meth_QTextLayout_textOption(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_textOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            QTextOption*sipRes;

            sipRes = new QTextOption(sipCpp->textOption());

            return sipConvertFromNewType(sipRes,sipType_QTextOption,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_textOption, doc_QTextLayout_textOption);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_setPreeditArea, "QTextLayout.setPreeditArea(int, str)");

extern "C" {static PyObject *meth_QTextLayout_setPreeditArea(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setPreeditArea(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTextLayout, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setPreeditArea(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setPreeditArea, doc_QTextLayout_setPreeditArea);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_preeditAreaPosition, "QTextLayout.preeditAreaPosition() -> int");

extern "C" {static PyObject *meth_QTextLayout_preeditAreaPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_preeditAreaPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->preeditAreaPosition();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_preeditAreaPosition, doc_QTextLayout_preeditAreaPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_preeditAreaText, "QTextLayout.preeditAreaText() -> str");

extern "C" {static PyObject *meth_QTextLayout_preeditAreaText(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_preeditAreaText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->preeditAreaText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_preeditAreaText, doc_QTextLayout_preeditAreaText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_setAdditionalFormats, "QTextLayout.setAdditionalFormats(list-of-QTextLayout.FormatRange)");

extern "C" {static PyObject *meth_QTextLayout_setAdditionalFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setAdditionalFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QTextLayout::FormatRange>* a0;
        int a0State = 0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QList_0100QTextLayout_FormatRange,&a0, &a0State))
        {
            sipCpp->setAdditionalFormats(*a0);
            sipReleaseType(const_cast<QList<QTextLayout::FormatRange> *>(a0),sipType_QList_0100QTextLayout_FormatRange,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setAdditionalFormats, doc_QTextLayout_setAdditionalFormats);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_additionalFormats, "QTextLayout.additionalFormats() -> list-of-QTextLayout.FormatRange");

extern "C" {static PyObject *meth_QTextLayout_additionalFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_additionalFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            QList<QTextLayout::FormatRange>*sipRes;

            sipRes = new QList<QTextLayout::FormatRange>(sipCpp->additionalFormats());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextLayout_FormatRange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_additionalFormats, doc_QTextLayout_additionalFormats);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_clearAdditionalFormats, "QTextLayout.clearAdditionalFormats()");

extern "C" {static PyObject *meth_QTextLayout_clearAdditionalFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_clearAdditionalFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            sipCpp->clearAdditionalFormats();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_clearAdditionalFormats, doc_QTextLayout_clearAdditionalFormats);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_setCacheEnabled, "QTextLayout.setCacheEnabled(bool)");

extern "C" {static PyObject *meth_QTextLayout_setCacheEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setCacheEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextLayout, &sipCpp, &a0))
        {
            sipCpp->setCacheEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setCacheEnabled, doc_QTextLayout_setCacheEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_cacheEnabled, "QTextLayout.cacheEnabled() -> bool");

extern "C" {static PyObject *meth_QTextLayout_cacheEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_cacheEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->cacheEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_cacheEnabled, doc_QTextLayout_cacheEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_beginLayout, "QTextLayout.beginLayout()");

extern "C" {static PyObject *meth_QTextLayout_beginLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_beginLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            sipCpp->beginLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_beginLayout, doc_QTextLayout_beginLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_endLayout, "QTextLayout.endLayout()");

extern "C" {static PyObject *meth_QTextLayout_endLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_endLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            sipCpp->endLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_endLayout, doc_QTextLayout_endLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_createLine, "QTextLayout.createLine() -> QTextLine");

extern "C" {static PyObject *meth_QTextLayout_createLine(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_createLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            QTextLine*sipRes;

            sipRes = new QTextLine(sipCpp->createLine());

            return sipConvertFromNewType(sipRes,sipType_QTextLine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_createLine, doc_QTextLayout_createLine);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_lineCount, "QTextLayout.lineCount() -> int");

extern "C" {static PyObject *meth_QTextLayout_lineCount(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_lineCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_lineCount, doc_QTextLayout_lineCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_lineAt, "QTextLayout.lineAt(int) -> QTextLine");

extern "C" {static PyObject *meth_QTextLayout_lineAt(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_lineAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextLayout, &sipCpp, &a0))
        {
            QTextLine*sipRes;

            sipRes = new QTextLine(sipCpp->lineAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextLine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_lineAt, doc_QTextLayout_lineAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_lineForTextPosition, "QTextLayout.lineForTextPosition(int) -> QTextLine");

extern "C" {static PyObject *meth_QTextLayout_lineForTextPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_lineForTextPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextLayout, &sipCpp, &a0))
        {
            QTextLine*sipRes;

            sipRes = new QTextLine(sipCpp->lineForTextPosition(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextLine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_lineForTextPosition, doc_QTextLayout_lineForTextPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_isValidCursorPosition, "QTextLayout.isValidCursorPosition(int) -> bool");

extern "C" {static PyObject *meth_QTextLayout_isValidCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_isValidCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextLayout, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isValidCursorPosition(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_isValidCursorPosition, doc_QTextLayout_isValidCursorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_nextCursorPosition, "QTextLayout.nextCursorPosition(int, QTextLayout.CursorMode mode=QTextLayout.SkipCharacters) -> int");

extern "C" {static PyObject *meth_QTextLayout_nextCursorPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_nextCursorPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextLayout::CursorMode a1 = QTextLayout::SkipCharacters;
        const QTextLayout *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QTextLayout, &sipCpp, &a0, sipType_QTextLayout_CursorMode, &a1))
        {
            int sipRes;

            sipRes = sipCpp->nextCursorPosition(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_nextCursorPosition, doc_QTextLayout_nextCursorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_previousCursorPosition, "QTextLayout.previousCursorPosition(int, QTextLayout.CursorMode mode=QTextLayout.SkipCharacters) -> int");

extern "C" {static PyObject *meth_QTextLayout_previousCursorPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_previousCursorPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextLayout::CursorMode a1 = QTextLayout::SkipCharacters;
        const QTextLayout *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QTextLayout, &sipCpp, &a0, sipType_QTextLayout_CursorMode, &a1))
        {
            int sipRes;

            sipRes = sipCpp->previousCursorPosition(a0,a1);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_previousCursorPosition, doc_QTextLayout_previousCursorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_draw, "QTextLayout.draw(QPainter, QPointF, list-of-QTextLayout.FormatRange selections=list-of-QTextLayout.FormatRange, QRectF clip=QRectF())");

extern "C" {static PyObject *meth_QTextLayout_draw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_draw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        const QPointF* a1;
        int a1State = 0;
        const QVector<QTextLayout::FormatRange>& a2def = QVector<QTextLayout::FormatRange>();
        const QVector<QTextLayout::FormatRange>* a2 = &a2def;
        int a2State = 0;
        const QRectF& a3def = QRectF();
        const QRectF* a3 = &a3def;
        const QTextLayout *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_selections,
            sipName_clip,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J1|J1J9", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QPainter, &a0, sipType_QPointF, &a1, &a1State, sipType_QVector_0100QTextLayout_FormatRange,&a2, &a2State, sipType_QRectF, &a3))
        {
            sipCpp->draw(a0,*a1,*a2,*a3);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast<QVector<QTextLayout::FormatRange> *>(a2),sipType_QVector_0100QTextLayout_FormatRange,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_draw, doc_QTextLayout_draw);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_drawCursor, "QTextLayout.drawCursor(QPainter, QPointF, int)\n"
    "QTextLayout.drawCursor(QPainter, QPointF, int, int)");

extern "C" {static PyObject *meth_QTextLayout_drawCursor(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_drawCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        const QPointF* a1;
        int a1State = 0;
        int a2;
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1i", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QPainter, &a0, sipType_QPointF, &a1, &a1State, &a2))
        {
            sipCpp->drawCursor(a0,*a1,a2);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPainter* a0;
        const QPointF* a1;
        int a1State = 0;
        int a2;
        int a3;
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1ii", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QPainter, &a0, sipType_QPointF, &a1, &a1State, &a2, &a3))
        {
            sipCpp->drawCursor(a0,*a1,a2,a3);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_drawCursor, doc_QTextLayout_drawCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_position, "QTextLayout.position() -> QPointF");

extern "C" {static PyObject *meth_QTextLayout_position(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->position());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_position, doc_QTextLayout_position);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_setPosition, "QTextLayout.setPosition(QPointF)");

extern "C" {static PyObject *meth_QTextLayout_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setPosition(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setPosition, doc_QTextLayout_setPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_boundingRect, "QTextLayout.boundingRect() -> QRectF");

extern "C" {static PyObject *meth_QTextLayout_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->boundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_boundingRect, doc_QTextLayout_boundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_minimumWidth, "QTextLayout.minimumWidth() -> float");

extern "C" {static PyObject *meth_QTextLayout_minimumWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_minimumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->minimumWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_minimumWidth, doc_QTextLayout_minimumWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_maximumWidth, "QTextLayout.maximumWidth() -> float");

extern "C" {static PyObject *meth_QTextLayout_maximumWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_maximumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->maximumWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_maximumWidth, doc_QTextLayout_maximumWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_clearLayout, "QTextLayout.clearLayout()");

extern "C" {static PyObject *meth_QTextLayout_clearLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_clearLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            sipCpp->clearLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_clearLayout, doc_QTextLayout_clearLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_setCursorMoveStyle, "QTextLayout.setCursorMoveStyle(Qt.CursorMoveStyle)");

extern "C" {static PyObject *meth_QTextLayout_setCursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setCursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::CursorMoveStyle a0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextLayout, &sipCpp, sipType_Qt_CursorMoveStyle, &a0))
        {
            sipCpp->setCursorMoveStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_setCursorMoveStyle, doc_QTextLayout_setCursorMoveStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_cursorMoveStyle, "QTextLayout.cursorMoveStyle() -> Qt.CursorMoveStyle");

extern "C" {static PyObject *meth_QTextLayout_cursorMoveStyle(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_cursorMoveStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextLayout, &sipCpp))
        {
            Qt::CursorMoveStyle sipRes;

            sipRes = sipCpp->cursorMoveStyle();

            return sipConvertFromEnum(sipRes,sipType_Qt_CursorMoveStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_cursorMoveStyle, doc_QTextLayout_cursorMoveStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_leftCursorPosition, "QTextLayout.leftCursorPosition(int) -> int");

extern "C" {static PyObject *meth_QTextLayout_leftCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_leftCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->leftCursorPosition(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_leftCursorPosition, doc_QTextLayout_leftCursorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_rightCursorPosition, "QTextLayout.rightCursorPosition(int) -> int");

extern "C" {static PyObject *meth_QTextLayout_rightCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_rightCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->rightCursorPosition(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_rightCursorPosition, doc_QTextLayout_rightCursorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextLayout_glyphRuns, "QTextLayout.glyphRuns(int from=-1, int length=-1) -> list-of-QGlyphRun");

extern "C" {static PyObject *meth_QTextLayout_glyphRuns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_glyphRuns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = -1;
        int a1 = -1;
        const QTextLayout *sipCpp;

        static const char *sipKwdList[] = {
            sipName_from,
            sipName_length,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|ii", &sipSelf, sipType_QTextLayout, &sipCpp, &a0, &a1))
        {
            QList<QGlyphRun>*sipRes;

            sipRes = new QList<QGlyphRun>(sipCpp->glyphRuns(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QGlyphRun,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextLayout, sipName_glyphRuns, doc_QTextLayout_glyphRuns);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextLayout(void *, const sipTypeDef *);}
static void *cast_QTextLayout(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTextLayout)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextLayout(void *, int);}
static void release_QTextLayout(void *sipCppV,int)
{
    delete reinterpret_cast<QTextLayout *>(sipCppV);
}


extern "C" {static void dealloc_QTextLayout(sipSimpleWrapper *);}
static void dealloc_QTextLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextLayout(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QTextLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextLayout(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QTextLayout *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QTextLayout();

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QString,&a0, &a0State))
        {
            sipCpp = new QTextLayout(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QFont* a1;
        QPaintDevice* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_paintDevice,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J9|J8", sipType_QString,&a0, &a0State, sipType_QFont, &a1, sipType_QPaintDevice, &a2))
        {
            sipCpp = new QTextLayout(*a0,*a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        const QTextBlock* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTextBlock, &a0))
        {
            sipCpp = new QTextLayout(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QTextLayout[] = {
    {SIP_MLNAME_CAST(sipName_additionalFormats), meth_QTextLayout_additionalFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_additionalFormats)},
    {SIP_MLNAME_CAST(sipName_beginLayout), meth_QTextLayout_beginLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_beginLayout)},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QTextLayout_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_boundingRect)},
    {SIP_MLNAME_CAST(sipName_cacheEnabled), meth_QTextLayout_cacheEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_cacheEnabled)},
    {SIP_MLNAME_CAST(sipName_clearAdditionalFormats), meth_QTextLayout_clearAdditionalFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_clearAdditionalFormats)},
    {SIP_MLNAME_CAST(sipName_clearLayout), meth_QTextLayout_clearLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_clearLayout)},
    {SIP_MLNAME_CAST(sipName_createLine), meth_QTextLayout_createLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_createLine)},
    {SIP_MLNAME_CAST(sipName_cursorMoveStyle), meth_QTextLayout_cursorMoveStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_cursorMoveStyle)},
    {SIP_MLNAME_CAST(sipName_draw), (PyCFunction)meth_QTextLayout_draw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextLayout_draw)},
    {SIP_MLNAME_CAST(sipName_drawCursor), meth_QTextLayout_drawCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_drawCursor)},
    {SIP_MLNAME_CAST(sipName_endLayout), meth_QTextLayout_endLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_endLayout)},
    {SIP_MLNAME_CAST(sipName_font), meth_QTextLayout_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_font)},
    {SIP_MLNAME_CAST(sipName_glyphRuns), (PyCFunction)meth_QTextLayout_glyphRuns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextLayout_glyphRuns)},
    {SIP_MLNAME_CAST(sipName_isValidCursorPosition), meth_QTextLayout_isValidCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_isValidCursorPosition)},
    {SIP_MLNAME_CAST(sipName_leftCursorPosition), meth_QTextLayout_leftCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_leftCursorPosition)},
    {SIP_MLNAME_CAST(sipName_lineAt), meth_QTextLayout_lineAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_lineAt)},
    {SIP_MLNAME_CAST(sipName_lineCount), meth_QTextLayout_lineCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_lineCount)},
    {SIP_MLNAME_CAST(sipName_lineForTextPosition), meth_QTextLayout_lineForTextPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_lineForTextPosition)},
    {SIP_MLNAME_CAST(sipName_maximumWidth), meth_QTextLayout_maximumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_maximumWidth)},
    {SIP_MLNAME_CAST(sipName_minimumWidth), meth_QTextLayout_minimumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_minimumWidth)},
    {SIP_MLNAME_CAST(sipName_nextCursorPosition), (PyCFunction)meth_QTextLayout_nextCursorPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextLayout_nextCursorPosition)},
    {SIP_MLNAME_CAST(sipName_position), meth_QTextLayout_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_position)},
    {SIP_MLNAME_CAST(sipName_preeditAreaPosition), meth_QTextLayout_preeditAreaPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_preeditAreaPosition)},
    {SIP_MLNAME_CAST(sipName_preeditAreaText), meth_QTextLayout_preeditAreaText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_preeditAreaText)},
    {SIP_MLNAME_CAST(sipName_previousCursorPosition), (PyCFunction)meth_QTextLayout_previousCursorPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextLayout_previousCursorPosition)},
    {SIP_MLNAME_CAST(sipName_rightCursorPosition), meth_QTextLayout_rightCursorPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_rightCursorPosition)},
    {SIP_MLNAME_CAST(sipName_setAdditionalFormats), meth_QTextLayout_setAdditionalFormats, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setAdditionalFormats)},
    {SIP_MLNAME_CAST(sipName_setCacheEnabled), meth_QTextLayout_setCacheEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setCacheEnabled)},
    {SIP_MLNAME_CAST(sipName_setCursorMoveStyle), meth_QTextLayout_setCursorMoveStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setCursorMoveStyle)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QTextLayout_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setFont)},
    {SIP_MLNAME_CAST(sipName_setPosition), meth_QTextLayout_setPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setPosition)},
    {SIP_MLNAME_CAST(sipName_setPreeditArea), meth_QTextLayout_setPreeditArea, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setPreeditArea)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QTextLayout_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setText)},
    {SIP_MLNAME_CAST(sipName_setTextOption), meth_QTextLayout_setTextOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_setTextOption)},
    {SIP_MLNAME_CAST(sipName_text), meth_QTextLayout_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_text)},
    {SIP_MLNAME_CAST(sipName_textOption), meth_QTextLayout_textOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextLayout_textOption)}
};

static sipEnumMemberDef enummembers_QTextLayout[] = {
    {sipName_SkipCharacters, static_cast<int>(QTextLayout::SkipCharacters), 309},
    {sipName_SkipWords, static_cast<int>(QTextLayout::SkipWords), 309},
};

PyDoc_STRVAR(doc_QTextLayout, "\1QTextLayout()\n"
    "QTextLayout(str)\n"
    "QTextLayout(str, QFont, QPaintDevice paintDevice=None)\n"
    "QTextLayout(QTextBlock)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QTextLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTextLayout,
        {0}
    },
    {
        sipNameNr_QTextLayout,
        {0, 0, 1},
        36, methods_QTextLayout,
        2, enummembers_QTextLayout,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextLayout,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QTextLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextLayout,
    0,
    0,
    0,
    release_QTextLayout,
    cast_QTextLayout,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
