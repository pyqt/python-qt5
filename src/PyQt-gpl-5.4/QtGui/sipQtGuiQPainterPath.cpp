/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPath.cpp"

#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPath.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPath.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPath.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPath.cpp"
#line 327 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPath.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPath.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 53 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPath.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qregion.sip"
#include <qregion.h>
#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPath.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qfont.sip"
#include <qfont.h>
#line 59 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPath.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 62 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPainterPath.cpp"


PyDoc_STRVAR(doc_QPainterPath_closeSubpath, "QPainterPath.closeSubpath()");

extern "C" {static PyObject *meth_QPainterPath_closeSubpath(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_closeSubpath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            sipCpp->closeSubpath();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_closeSubpath, doc_QPainterPath_closeSubpath);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_moveTo, "QPainterPath.moveTo(QPointF)\n"
    "QPainterPath.moveTo(float, float)");

extern "C" {static PyObject *meth_QPainterPath_moveTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_moveTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->moveTo(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1))
        {
            sipCpp->moveTo(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_moveTo, doc_QPainterPath_moveTo);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_lineTo, "QPainterPath.lineTo(QPointF)\n"
    "QPainterPath.lineTo(float, float)");

extern "C" {static PyObject *meth_QPainterPath_lineTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_lineTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->lineTo(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1))
        {
            sipCpp->lineTo(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_lineTo, doc_QPainterPath_lineTo);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_arcTo, "QPainterPath.arcTo(QRectF, float, float)\n"
    "QPainterPath.arcTo(float, float, float, float, float, float)");

extern "C" {static PyObject *meth_QPainterPath_arcTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_arcTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        qreal a1;
        qreal a2;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9dd", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            sipCpp->arcTo(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        qreal a5;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddddd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->arcTo(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_arcTo, doc_QPainterPath_arcTo);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_cubicTo, "QPainterPath.cubicTo(QPointF, QPointF, QPointF)\n"
    "QPainterPath.cubicTo(float, float, float, float, float, float)");

extern "C" {static PyObject *meth_QPainterPath_cubicTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_cubicTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QPointF* a1;
        int a1State = 0;
        const QPointF* a2;
        int a2State = 0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPointF, &a2, &a2State))
        {
            sipCpp->cubicTo(*a0,*a1,*a2);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(const_cast<QPointF *>(a2),sipType_QPointF,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        qreal a5;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddddd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->cubicTo(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_cubicTo, doc_QPainterPath_cubicTo);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_quadTo, "QPainterPath.quadTo(QPointF, QPointF)\n"
    "QPainterPath.quadTo(float, float, float, float)");

extern "C" {static PyObject *meth_QPainterPath_quadTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_quadTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QPointF* a1;
        int a1State = 0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State))
        {
            sipCpp->quadTo(*a0,*a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->quadTo(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_quadTo, doc_QPainterPath_quadTo);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_currentPosition, "QPainterPath.currentPosition() -> QPointF");

extern "C" {static PyObject *meth_QPainterPath_currentPosition(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_currentPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->currentPosition());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_currentPosition, doc_QPainterPath_currentPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_addRect, "QPainterPath.addRect(QRectF)\n"
    "QPainterPath.addRect(float, float, float, float)");

extern "C" {static PyObject *meth_QPainterPath_addRect(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->addRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->addRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addRect, doc_QPainterPath_addRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_addEllipse, "QPainterPath.addEllipse(QRectF)\n"
    "QPainterPath.addEllipse(float, float, float, float)\n"
    "QPainterPath.addEllipse(QPointF, float, float)");

extern "C" {static PyObject *meth_QPainterPath_addEllipse(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addEllipse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->addEllipse(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->addEllipse(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        qreal a1;
        qreal a2;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1dd", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State, &a1, &a2))
        {
            sipCpp->addEllipse(*a0,a1,a2);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addEllipse, doc_QPainterPath_addEllipse);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_addPolygon, "QPainterPath.addPolygon(QPolygonF)");

extern "C" {static PyObject *meth_QPainterPath_addPolygon(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF* a0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPolygonF, &a0))
        {
            sipCpp->addPolygon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addPolygon, doc_QPainterPath_addPolygon);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_addText, "QPainterPath.addText(QPointF, QFont, str)\n"
    "QPainterPath.addText(float, float, QFont, str)");

extern "C" {static PyObject *meth_QPainterPath_addText(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QFont* a1;
        const QString* a2;
        int a2State = 0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9J1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QFont, &a1, sipType_QString,&a2, &a2State))
        {
            sipCpp->addText(*a0,*a1,*a2);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        const QFont* a2;
        const QString* a3;
        int a3State = 0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BddJ9J1", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, sipType_QFont, &a2, sipType_QString,&a3, &a3State))
        {
            sipCpp->addText(a0,a1,*a2,*a3);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addText, doc_QPainterPath_addText);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_addPath, "QPainterPath.addPath(QPainterPath)");

extern "C" {static PyObject *meth_QPainterPath_addPath(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
            sipCpp->addPath(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addPath, doc_QPainterPath_addPath);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_addRegion, "QPainterPath.addRegion(QRegion)");

extern "C" {static PyObject *meth_QPainterPath_addRegion(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRegion* a0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->addRegion(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addRegion, doc_QPainterPath_addRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_connectPath, "QPainterPath.connectPath(QPainterPath)");

extern "C" {static PyObject *meth_QPainterPath_connectPath(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_connectPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
            sipCpp->connectPath(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_connectPath, doc_QPainterPath_connectPath);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_contains, "QPainterPath.contains(QPointF) -> bool\n"
    "QPainterPath.contains(QRectF) -> bool\n"
    "QPainterPath.contains(QPainterPath) -> bool");

extern "C" {static PyObject *meth_QPainterPath_contains(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QRectF* a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QPainterPath* a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_contains, doc_QPainterPath_contains);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_intersects, "QPainterPath.intersects(QRectF) -> bool\n"
    "QPainterPath.intersects(QPainterPath) -> bool");

extern "C" {static PyObject *meth_QPainterPath_intersects(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_intersects(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->intersects(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QPainterPath* a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->intersects(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_intersects, doc_QPainterPath_intersects);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_boundingRect, "QPainterPath.boundingRect() -> QRectF");

extern "C" {static PyObject *meth_QPainterPath_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->boundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_boundingRect, doc_QPainterPath_boundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_controlPointRect, "QPainterPath.controlPointRect() -> QRectF");

extern "C" {static PyObject *meth_QPainterPath_controlPointRect(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_controlPointRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->controlPointRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_controlPointRect, doc_QPainterPath_controlPointRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_fillRule, "QPainterPath.fillRule() -> Qt.FillRule");

extern "C" {static PyObject *meth_QPainterPath_fillRule(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_fillRule(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            Qt::FillRule sipRes;

            sipRes = sipCpp->fillRule();

            return sipConvertFromEnum(sipRes,sipType_Qt_FillRule);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_fillRule, doc_QPainterPath_fillRule);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_setFillRule, "QPainterPath.setFillRule(Qt.FillRule)");

extern "C" {static PyObject *meth_QPainterPath_setFillRule(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_setFillRule(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::FillRule a0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_Qt_FillRule, &a0))
        {
            sipCpp->setFillRule(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_setFillRule, doc_QPainterPath_setFillRule);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_toReversed, "QPainterPath.toReversed() -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPath_toReversed(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_toReversed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath(sipCpp->toReversed());

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_toReversed, doc_QPainterPath_toReversed);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_arcMoveTo, "QPainterPath.arcMoveTo(QRectF, float)\n"
    "QPainterPath.arcMoveTo(float, float, float, float, float)");

extern "C" {static PyObject *meth_QPainterPath_arcMoveTo(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_arcMoveTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        qreal a1;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9d", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0, &a1))
        {
            sipCpp->arcMoveTo(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bddddd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            sipCpp->arcMoveTo(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_arcMoveTo, doc_QPainterPath_arcMoveTo);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_isEmpty, "QPainterPath.isEmpty() -> bool");

extern "C" {static PyObject *meth_QPainterPath_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_isEmpty, doc_QPainterPath_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_elementCount, "QPainterPath.elementCount() -> int");

extern "C" {static PyObject *meth_QPainterPath_elementCount(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_elementCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->elementCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_elementCount, doc_QPainterPath_elementCount);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_elementAt, "QPainterPath.elementAt(int) -> QPainterPath.Element");

extern "C" {static PyObject *meth_QPainterPath_elementAt(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_elementAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPainterPath, &sipCpp, &a0))
        {
            QPainterPath::Element*sipRes;

            sipRes = new QPainterPath::Element(sipCpp->elementAt(a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath_Element,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_elementAt, doc_QPainterPath_elementAt);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_setElementPositionAt, "QPainterPath.setElementPositionAt(int, float, float)");

extern "C" {static PyObject *meth_QPainterPath_setElementPositionAt(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_setElementPositionAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        qreal a1;
        qreal a2;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bidd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setElementPositionAt(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_setElementPositionAt, doc_QPainterPath_setElementPositionAt);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_toSubpathPolygons, "QPainterPath.toSubpathPolygons(QTransform) -> list-of-QPolygonF");

extern "C" {static PyObject *meth_QPainterPath_toSubpathPolygons(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_toSubpathPolygons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QTransform, &a0))
        {
            QList<QPolygonF>*sipRes;

            sipRes = new QList<QPolygonF>(sipCpp->toSubpathPolygons(*a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_toSubpathPolygons, doc_QPainterPath_toSubpathPolygons);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_toFillPolygons, "QPainterPath.toFillPolygons(QTransform) -> list-of-QPolygonF");

extern "C" {static PyObject *meth_QPainterPath_toFillPolygons(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_toFillPolygons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QTransform, &a0))
        {
            QList<QPolygonF>*sipRes;

            sipRes = new QList<QPolygonF>(sipCpp->toFillPolygons(*a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_toFillPolygons, doc_QPainterPath_toFillPolygons);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_toFillPolygon, "QPainterPath.toFillPolygon(QTransform) -> QPolygonF");

extern "C" {static PyObject *meth_QPainterPath_toFillPolygon(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_toFillPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QTransform, &a0))
        {
            QPolygonF*sipRes;

            sipRes = new QPolygonF(sipCpp->toFillPolygon(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_toFillPolygon, doc_QPainterPath_toFillPolygon);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_length, "QPainterPath.length() -> float");

extern "C" {static PyObject *meth_QPainterPath_length(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->length();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_length, doc_QPainterPath_length);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_percentAtLength, "QPainterPath.percentAtLength(float) -> float");

extern "C" {static PyObject *meth_QPainterPath_percentAtLength(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_percentAtLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0))
        {
            qreal sipRes;

            sipRes = sipCpp->percentAtLength(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_percentAtLength, doc_QPainterPath_percentAtLength);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_pointAtPercent, "QPainterPath.pointAtPercent(float) -> QPointF");

extern "C" {static PyObject *meth_QPainterPath_pointAtPercent(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_pointAtPercent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->pointAtPercent(a0));

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_pointAtPercent, doc_QPainterPath_pointAtPercent);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_angleAtPercent, "QPainterPath.angleAtPercent(float) -> float");

extern "C" {static PyObject *meth_QPainterPath_angleAtPercent(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_angleAtPercent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0))
        {
            qreal sipRes;

            sipRes = sipCpp->angleAtPercent(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_angleAtPercent, doc_QPainterPath_angleAtPercent);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_slopeAtPercent, "QPainterPath.slopeAtPercent(float) -> float");

extern "C" {static PyObject *meth_QPainterPath_slopeAtPercent(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_slopeAtPercent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0))
        {
            qreal sipRes;

            sipRes = sipCpp->slopeAtPercent(a0);

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_slopeAtPercent, doc_QPainterPath_slopeAtPercent);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_united, "QPainterPath.united(QPainterPath) -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPath_united(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_united(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath(sipCpp->united(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_united, doc_QPainterPath_united);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_intersected, "QPainterPath.intersected(QPainterPath) -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPath_intersected(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath(sipCpp->intersected(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_intersected, doc_QPainterPath_intersected);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_subtracted, "QPainterPath.subtracted(QPainterPath) -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPath_subtracted(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_subtracted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath(sipCpp->subtracted(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_subtracted, doc_QPainterPath_subtracted);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_addRoundedRect, "QPainterPath.addRoundedRect(QRectF, float, float, Qt.SizeMode mode=Qt.AbsoluteSize)\n"
    "QPainterPath.addRoundedRect(float, float, float, float, float, float, Qt.SizeMode mode=Qt.AbsoluteSize)");

extern "C" {static PyObject *meth_QPainterPath_addRoundedRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_addRoundedRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        qreal a1;
        qreal a2;
        Qt::SizeMode a3 = Qt::AbsoluteSize;
        QPainterPath *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9dd|E", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QRectF, &a0, &a1, &a2, sipType_Qt_SizeMode, &a3))
        {
            sipCpp->addRoundedRect(*a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        qreal a5;
        Qt::SizeMode a6 = Qt::AbsoluteSize;
        QPainterPath *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdddddd|E", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5, sipType_Qt_SizeMode, &a6))
        {
            sipCpp->addRoundedRect(a0,a1,a2,a3,a4,a5,a6);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_addRoundedRect, doc_QPainterPath_addRoundedRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_simplified, "QPainterPath.simplified() -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPath_simplified(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_simplified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPainterPath, &sipCpp))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath(sipCpp->simplified());

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_simplified, doc_QPainterPath_simplified);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_translate, "QPainterPath.translate(float, float)\n"
    "QPainterPath.translate(QPointF)");

extern "C" {static PyObject *meth_QPainterPath_translate(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->translate(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_translate, doc_QPainterPath_translate);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_translated, "QPainterPath.translated(float, float) -> QPainterPath\n"
    "QPainterPath.translated(QPointF) -> QPainterPath");

extern "C" {static PyObject *meth_QPainterPath_translated(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QPainterPath, &sipCpp, &a0, &a1))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath(sipCpp->translated(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        const QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath(sipCpp->translated(*a0));
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_translated, doc_QPainterPath_translated);

    return NULL;
}


PyDoc_STRVAR(doc_QPainterPath_swap, "QPainterPath.swap(QPainterPath)");

extern "C" {static PyObject *meth_QPainterPath_swap(PyObject *, PyObject *);}
static PyObject *meth_QPainterPath_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainterPath* a0;
        QPainterPath *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPainterPath, &sipCpp, sipType_QPainterPath, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPainterPath, sipName_swap, doc_QPainterPath_swap);

    return NULL;
}


extern "C" {static PyObject *slot_QPainterPath___mul__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        const QTransform* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPainterPath, &a0, sipType_QTransform, &a1))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QPainterPath___isub__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainterPath)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QPainterPath *sipCpp = reinterpret_cast<QPainterPath *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath, &a0))
        {
            sipCpp->QPainterPath::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainterPath___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainterPath)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QPainterPath *sipCpp = reinterpret_cast<QPainterPath *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath, &a0))
        {
            sipCpp->QPainterPath::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainterPath___ior__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainterPath)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QPainterPath *sipCpp = reinterpret_cast<QPainterPath *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath, &a0))
        {
            sipCpp->QPainterPath::operator|=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainterPath___iand__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QPainterPath)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QPainterPath *sipCpp = reinterpret_cast<QPainterPath *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath, &a0))
        {
            sipCpp->QPainterPath::operator&=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QPainterPath___sub__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QPainterPath* a0;
        const QPainterPath* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPainterPath, &a0, sipType_QPainterPath, &a1))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QPainterPath___add__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QPainterPath* a0;
        const QPainterPath* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPainterPath, &a0, sipType_QPainterPath, &a1))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QPainterPath___or__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QPainterPath* a0;
        const QPainterPath* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPainterPath, &a0, sipType_QPainterPath, &a1))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath((*a0 | *a1));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,or_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QPainterPath___and__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QPainterPath* a0;
        const QPainterPath* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QPainterPath, &a0, sipType_QPainterPath, &a1))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath((*a0 & *a1));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,and_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QPainterPath___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPainterPath *sipCpp = reinterpret_cast<QPainterPath *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPainterPath::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QPainterPath,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPainterPath___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPainterPath___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPainterPath *sipCpp = reinterpret_cast<QPainterPath *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPainterPath));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QPainterPath, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QPainterPath::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QPainterPath,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPainterPath(void *, const sipTypeDef *);}
static void *cast_QPainterPath(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QPainterPath)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPainterPath(void *, int);}
static void release_QPainterPath(void *sipCppV,int)
{
    delete reinterpret_cast<QPainterPath *>(sipCppV);
}


extern "C" {static void assign_QPainterPath(void *, SIP_SSIZE_T, const void *);}
static void assign_QPainterPath(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPainterPath *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPainterPath *>(sipSrc);
}


extern "C" {static void *array_QPainterPath(SIP_SSIZE_T);}
static void *array_QPainterPath(SIP_SSIZE_T sipNrElem)
{
    return new QPainterPath[sipNrElem];
}


extern "C" {static void *copy_QPainterPath(const void *, SIP_SSIZE_T);}
static void *copy_QPainterPath(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPainterPath(reinterpret_cast<const QPainterPath *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPainterPath(sipSimpleWrapper *);}
static void dealloc_QPainterPath(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPainterPath(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPainterPath(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPainterPath(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPainterPath *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QPainterPath();

            return sipCpp;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QPointF, &a0, &a0State))
        {
            sipCpp = new QPainterPath(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return sipCpp;
        }
    }

    {
        const QPainterPath* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QPainterPath, &a0))
        {
            sipCpp = new QPainterPath(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPainterPath[] = {
    {(void *)slot_QPainterPath___mul__, mul_slot},
    {(void *)slot_QPainterPath___isub__, isub_slot},
    {(void *)slot_QPainterPath___iadd__, iadd_slot},
    {(void *)slot_QPainterPath___ior__, ior_slot},
    {(void *)slot_QPainterPath___iand__, iand_slot},
    {(void *)slot_QPainterPath___sub__, sub_slot},
    {(void *)slot_QPainterPath___add__, add_slot},
    {(void *)slot_QPainterPath___or__, or_slot},
    {(void *)slot_QPainterPath___and__, and_slot},
    {(void *)slot_QPainterPath___ne__, ne_slot},
    {(void *)slot_QPainterPath___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPainterPath[] = {
    {SIP_MLNAME_CAST(sipName_addEllipse), meth_QPainterPath_addEllipse, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_addEllipse)},
    {SIP_MLNAME_CAST(sipName_addPath), meth_QPainterPath_addPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_addPath)},
    {SIP_MLNAME_CAST(sipName_addPolygon), meth_QPainterPath_addPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_addPolygon)},
    {SIP_MLNAME_CAST(sipName_addRect), meth_QPainterPath_addRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_addRect)},
    {SIP_MLNAME_CAST(sipName_addRegion), meth_QPainterPath_addRegion, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_addRegion)},
    {SIP_MLNAME_CAST(sipName_addRoundedRect), (PyCFunction)meth_QPainterPath_addRoundedRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPainterPath_addRoundedRect)},
    {SIP_MLNAME_CAST(sipName_addText), meth_QPainterPath_addText, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_addText)},
    {SIP_MLNAME_CAST(sipName_angleAtPercent), meth_QPainterPath_angleAtPercent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_angleAtPercent)},
    {SIP_MLNAME_CAST(sipName_arcMoveTo), meth_QPainterPath_arcMoveTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_arcMoveTo)},
    {SIP_MLNAME_CAST(sipName_arcTo), meth_QPainterPath_arcTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_arcTo)},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QPainterPath_boundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_boundingRect)},
    {SIP_MLNAME_CAST(sipName_closeSubpath), meth_QPainterPath_closeSubpath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_closeSubpath)},
    {SIP_MLNAME_CAST(sipName_connectPath), meth_QPainterPath_connectPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_connectPath)},
    {SIP_MLNAME_CAST(sipName_contains), meth_QPainterPath_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_contains)},
    {SIP_MLNAME_CAST(sipName_controlPointRect), meth_QPainterPath_controlPointRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_controlPointRect)},
    {SIP_MLNAME_CAST(sipName_cubicTo), meth_QPainterPath_cubicTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_cubicTo)},
    {SIP_MLNAME_CAST(sipName_currentPosition), meth_QPainterPath_currentPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_currentPosition)},
    {SIP_MLNAME_CAST(sipName_elementAt), meth_QPainterPath_elementAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_elementAt)},
    {SIP_MLNAME_CAST(sipName_elementCount), meth_QPainterPath_elementCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_elementCount)},
    {SIP_MLNAME_CAST(sipName_fillRule), meth_QPainterPath_fillRule, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_fillRule)},
    {SIP_MLNAME_CAST(sipName_intersected), meth_QPainterPath_intersected, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_intersected)},
    {SIP_MLNAME_CAST(sipName_intersects), meth_QPainterPath_intersects, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_intersects)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QPainterPath_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_isEmpty)},
    {SIP_MLNAME_CAST(sipName_length), meth_QPainterPath_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_length)},
    {SIP_MLNAME_CAST(sipName_lineTo), meth_QPainterPath_lineTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_lineTo)},
    {SIP_MLNAME_CAST(sipName_moveTo), meth_QPainterPath_moveTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_moveTo)},
    {SIP_MLNAME_CAST(sipName_percentAtLength), meth_QPainterPath_percentAtLength, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_percentAtLength)},
    {SIP_MLNAME_CAST(sipName_pointAtPercent), meth_QPainterPath_pointAtPercent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_pointAtPercent)},
    {SIP_MLNAME_CAST(sipName_quadTo), meth_QPainterPath_quadTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_quadTo)},
    {SIP_MLNAME_CAST(sipName_setElementPositionAt), meth_QPainterPath_setElementPositionAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_setElementPositionAt)},
    {SIP_MLNAME_CAST(sipName_setFillRule), meth_QPainterPath_setFillRule, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_setFillRule)},
    {SIP_MLNAME_CAST(sipName_simplified), meth_QPainterPath_simplified, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_simplified)},
    {SIP_MLNAME_CAST(sipName_slopeAtPercent), meth_QPainterPath_slopeAtPercent, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_slopeAtPercent)},
    {SIP_MLNAME_CAST(sipName_subtracted), meth_QPainterPath_subtracted, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_subtracted)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPainterPath_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_swap)},
    {SIP_MLNAME_CAST(sipName_toFillPolygon), meth_QPainterPath_toFillPolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_toFillPolygon)},
    {SIP_MLNAME_CAST(sipName_toFillPolygons), meth_QPainterPath_toFillPolygons, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_toFillPolygons)},
    {SIP_MLNAME_CAST(sipName_toReversed), meth_QPainterPath_toReversed, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_toReversed)},
    {SIP_MLNAME_CAST(sipName_toSubpathPolygons), meth_QPainterPath_toSubpathPolygons, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_toSubpathPolygons)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QPainterPath_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_translate)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QPainterPath_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_translated)},
    {SIP_MLNAME_CAST(sipName_united), meth_QPainterPath_united, METH_VARARGS, SIP_MLDOC_CAST(doc_QPainterPath_united)}
};

static sipEnumMemberDef enummembers_QPainterPath[] = {
    {sipName_CurveToDataElement, static_cast<int>(QPainterPath::CurveToDataElement), 204},
    {sipName_CurveToElement, static_cast<int>(QPainterPath::CurveToElement), 204},
    {sipName_LineToElement, static_cast<int>(QPainterPath::LineToElement), 204},
    {sipName_MoveToElement, static_cast<int>(QPainterPath::MoveToElement), 204},
};

PyDoc_STRVAR(doc_QPainterPath, "\1QPainterPath()\n"
    "QPainterPath(QPointF)\n"
    "QPainterPath(QPainterPath)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QPainterPath = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPainterPath,
        {0}
    },
    {
        sipNameNr_QPainterPath,
        {0, 0, 1},
        42, methods_QPainterPath,
        4, enummembers_QPainterPath,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPainterPath,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPainterPath,
    init_type_QPainterPath,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPainterPath,
    assign_QPainterPath,
    array_QPainterPath,
    copy_QPainterPath,
    release_QPainterPath,
    cast_QPainterPath,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
