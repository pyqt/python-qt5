/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpen.sip"
#include <qpen.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPen.cpp"

#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPen.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPen.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPen.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPen.cpp"
#line 233 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpygui_qvector.sip"
#include <qvector.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPen.cpp"


PyDoc_STRVAR(doc_QPen_style, "QPen.style() -> Qt.PenStyle");

extern "C" {static PyObject *meth_QPen_style(PyObject *, PyObject *);}
static PyObject *meth_QPen_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            Qt::PenStyle sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromEnum(sipRes,sipType_Qt_PenStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_style, doc_QPen_style);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_setStyle, "QPen.setStyle(Qt.PenStyle)");

extern "C" {static PyObject *meth_QPen_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QPen_setStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::PenStyle a0;
        QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPen, &sipCpp, sipType_Qt_PenStyle, &a0))
        {
            sipCpp->setStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setStyle, doc_QPen_setStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_widthF, "QPen.widthF() -> float");

extern "C" {static PyObject *meth_QPen_widthF(PyObject *, PyObject *);}
static PyObject *meth_QPen_widthF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->widthF();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_widthF, doc_QPen_widthF);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_setWidthF, "QPen.setWidthF(float)");

extern "C" {static PyObject *meth_QPen_setWidthF(PyObject *, PyObject *);}
static PyObject *meth_QPen_setWidthF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPen, &sipCpp, &a0))
        {
            sipCpp->setWidthF(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setWidthF, doc_QPen_setWidthF);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_width, "QPen.width() -> int");

extern "C" {static PyObject *meth_QPen_width(PyObject *, PyObject *);}
static PyObject *meth_QPen_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_width, doc_QPen_width);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_setWidth, "QPen.setWidth(int)");

extern "C" {static PyObject *meth_QPen_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QPen_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPen, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setWidth, doc_QPen_setWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_color, "QPen.color() -> QColor");

extern "C" {static PyObject *meth_QPen_color(PyObject *, PyObject *);}
static PyObject *meth_QPen_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->color());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_color, doc_QPen_color);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_setColor, "QPen.setColor(QColor)");

extern "C" {static PyObject *meth_QPen_setColor(PyObject *, PyObject *);}
static PyObject *meth_QPen_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPen, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setColor, doc_QPen_setColor);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_brush, "QPen.brush() -> QBrush");

extern "C" {static PyObject *meth_QPen_brush(PyObject *, PyObject *);}
static PyObject *meth_QPen_brush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->brush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_brush, doc_QPen_brush);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_setBrush, "QPen.setBrush(QBrush)");

extern "C" {static PyObject *meth_QPen_setBrush(PyObject *, PyObject *);}
static PyObject *meth_QPen_setBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPen, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBrush(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setBrush, doc_QPen_setBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_isSolid, "QPen.isSolid() -> bool");

extern "C" {static PyObject *meth_QPen_isSolid(PyObject *, PyObject *);}
static PyObject *meth_QPen_isSolid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSolid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_isSolid, doc_QPen_isSolid);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_capStyle, "QPen.capStyle() -> Qt.PenCapStyle");

extern "C" {static PyObject *meth_QPen_capStyle(PyObject *, PyObject *);}
static PyObject *meth_QPen_capStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            Qt::PenCapStyle sipRes;

            sipRes = sipCpp->capStyle();

            return sipConvertFromEnum(sipRes,sipType_Qt_PenCapStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_capStyle, doc_QPen_capStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_setCapStyle, "QPen.setCapStyle(Qt.PenCapStyle)");

extern "C" {static PyObject *meth_QPen_setCapStyle(PyObject *, PyObject *);}
static PyObject *meth_QPen_setCapStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::PenCapStyle a0;
        QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPen, &sipCpp, sipType_Qt_PenCapStyle, &a0))
        {
            sipCpp->setCapStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setCapStyle, doc_QPen_setCapStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_joinStyle, "QPen.joinStyle() -> Qt.PenJoinStyle");

extern "C" {static PyObject *meth_QPen_joinStyle(PyObject *, PyObject *);}
static PyObject *meth_QPen_joinStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            Qt::PenJoinStyle sipRes;

            sipRes = sipCpp->joinStyle();

            return sipConvertFromEnum(sipRes,sipType_Qt_PenJoinStyle);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_joinStyle, doc_QPen_joinStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_setJoinStyle, "QPen.setJoinStyle(Qt.PenJoinStyle)");

extern "C" {static PyObject *meth_QPen_setJoinStyle(PyObject *, PyObject *);}
static PyObject *meth_QPen_setJoinStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::PenJoinStyle a0;
        QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPen, &sipCpp, sipType_Qt_PenJoinStyle, &a0))
        {
            sipCpp->setJoinStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setJoinStyle, doc_QPen_setJoinStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_dashPattern, "QPen.dashPattern() -> list-of-float");

extern "C" {static PyObject *meth_QPen_dashPattern(PyObject *, PyObject *);}
static PyObject *meth_QPen_dashPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            QVector<qreal>*sipRes;

            sipRes = new QVector<qreal>(sipCpp->dashPattern());

            return sipConvertFromNewType(sipRes,sipType_QVector_2400,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_dashPattern, doc_QPen_dashPattern);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_setDashPattern, "QPen.setDashPattern(list-of-float)");

extern "C" {static PyObject *meth_QPen_setDashPattern(PyObject *, PyObject *);}
static PyObject *meth_QPen_setDashPattern(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVector<qreal>* a0;
        int a0State = 0;
        QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPen, &sipCpp, sipType_QVector_2400,&a0, &a0State))
        {
            sipCpp->setDashPattern(*a0);
            sipReleaseType(const_cast<QVector<qreal> *>(a0),sipType_QVector_2400,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setDashPattern, doc_QPen_setDashPattern);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_miterLimit, "QPen.miterLimit() -> float");

extern "C" {static PyObject *meth_QPen_miterLimit(PyObject *, PyObject *);}
static PyObject *meth_QPen_miterLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->miterLimit();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_miterLimit, doc_QPen_miterLimit);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_setMiterLimit, "QPen.setMiterLimit(float)");

extern "C" {static PyObject *meth_QPen_setMiterLimit(PyObject *, PyObject *);}
static PyObject *meth_QPen_setMiterLimit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPen, &sipCpp, &a0))
        {
            sipCpp->setMiterLimit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setMiterLimit, doc_QPen_setMiterLimit);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_dashOffset, "QPen.dashOffset() -> float");

extern "C" {static PyObject *meth_QPen_dashOffset(PyObject *, PyObject *);}
static PyObject *meth_QPen_dashOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->dashOffset();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_dashOffset, doc_QPen_dashOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_setDashOffset, "QPen.setDashOffset(float)");

extern "C" {static PyObject *meth_QPen_setDashOffset(PyObject *, PyObject *);}
static PyObject *meth_QPen_setDashOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QPen, &sipCpp, &a0))
        {
            sipCpp->setDashOffset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setDashOffset, doc_QPen_setDashOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_isCosmetic, "QPen.isCosmetic() -> bool");

extern "C" {static PyObject *meth_QPen_isCosmetic(PyObject *, PyObject *);}
static PyObject *meth_QPen_isCosmetic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPen, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCosmetic();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_isCosmetic, doc_QPen_isCosmetic);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_setCosmetic, "QPen.setCosmetic(bool)");

extern "C" {static PyObject *meth_QPen_setCosmetic(PyObject *, PyObject *);}
static PyObject *meth_QPen_setCosmetic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPen, &sipCpp, &a0))
        {
            sipCpp->setCosmetic(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_setCosmetic, doc_QPen_setCosmetic);

    return NULL;
}


PyDoc_STRVAR(doc_QPen_swap, "QPen.swap(QPen)");

extern "C" {static PyObject *meth_QPen_swap(PyObject *, PyObject *);}
static PyObject *meth_QPen_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPen* a0;
        int a0State = 0;
        QPen *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPen, &sipCpp, sipType_QPen, &a0, &a0State))
        {
            sipCpp->swap(*a0);
            sipReleaseType(a0,sipType_QPen,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPen, sipName_swap, doc_QPen_swap);

    return NULL;
}


extern "C" {static PyObject *slot_QPen___ne__(PyObject *,PyObject *);}
static PyObject *slot_QPen___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPen *sipCpp = reinterpret_cast<QPen *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPen));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPen* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPen, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->QPen::operator!=(*a0);
            sipReleaseType(const_cast<QPen *>(a0),sipType_QPen,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QPen,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPen___eq__(PyObject *,PyObject *);}
static PyObject *slot_QPen___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPen *sipCpp = reinterpret_cast<QPen *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPen));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QPen* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J1", sipType_QPen, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->QPen::operator==(*a0);
            sipReleaseType(const_cast<QPen *>(a0),sipType_QPen,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QPen,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPen(void *, const sipTypeDef *);}
static void *cast_QPen(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QPen)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPen(void *, int);}
static void release_QPen(void *sipCppV,int)
{
    delete reinterpret_cast<QPen *>(sipCppV);
}


extern "C" {static void assign_QPen(void *, SIP_SSIZE_T, const void *);}
static void assign_QPen(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPen *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPen *>(sipSrc);
}


extern "C" {static void *array_QPen(SIP_SSIZE_T);}
static void *array_QPen(SIP_SSIZE_T sipNrElem)
{
    return new QPen[sipNrElem];
}


extern "C" {static void *copy_QPen(const void *, SIP_SSIZE_T);}
static void *copy_QPen(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPen(reinterpret_cast<const QPen *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPen(sipSimpleWrapper *);}
static void dealloc_QPen(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPen(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QPen(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPen(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QPen *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QPen();

            return sipCpp;
        }
    }

    {
        Qt::PenStyle a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "E", sipType_Qt_PenStyle, &a0))
        {
            sipCpp = new QPen(a0);

            return sipCpp;
        }
    }

    {
        const QColor* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QColor, &a0, &a0State))
        {
            sipCpp = new QPen(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            return sipCpp;
        }
    }

    {
        const QBrush* a0;
        int a0State = 0;
        qreal a1;
        Qt::PenStyle a2 = Qt::SolidLine;
        Qt::PenCapStyle a3 = Qt::SquareCap;
        Qt::PenJoinStyle a4 = Qt::BevelJoin;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_style,
            sipName_cap,
            sipName_join,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1d|EEE", sipType_QBrush, &a0, &a0State, &a1, sipType_Qt_PenStyle, &a2, sipType_Qt_PenCapStyle, &a3, sipType_Qt_PenJoinStyle, &a4))
        {
            sipCpp = new QPen(*a0,a1,a2,a3,a4);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            return sipCpp;
        }
    }

    {
        const QPen* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QPen, &a0, &a0State))
        {
            sipCpp = new QPen(*a0);
            sipReleaseType(const_cast<QPen *>(a0),sipType_QPen,a0State);

            return sipCpp;
        }
    }

    {
        const QVariant* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QVariant, &a0, &a0State))
        {
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpen.sip"
        sipCpp = new QPen(a0->value<QPen>());
#line 906 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPen.cpp"
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static int convertTo_QPen(PyObject *, void **, int *, PyObject *);}
static int convertTo_QPen(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QPen **sipCppPtr = reinterpret_cast<QPen **>(sipCppPtrV);

#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qpen.sip"
// SIP doesn't support automatic type convertors so we explicitly allow a
// QColor to be used whenever a QPen is expected.

if (sipIsErr == NULL)
    return (sipCanConvertToType(sipPy, sipType_QPen, SIP_NO_CONVERTORS) ||
            sipCanConvertToType(sipPy, sipType_QColor, 0));

if (sipCanConvertToType(sipPy, sipType_QPen, SIP_NO_CONVERTORS))
{
    *sipCppPtr = reinterpret_cast<QPen *>(sipConvertToType(sipPy, sipType_QPen, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

    return 0;
}

int state;
QColor *c = reinterpret_cast<QColor *>(sipConvertToType(sipPy, sipType_QColor, 0, 0, &state, sipIsErr));

if (*sipIsErr)
{
    sipReleaseType(c, sipType_QColor, state);
    return 0;
}

*sipCppPtr = new QPen(*c);

sipReleaseType(c, sipType_QColor, state);

return sipGetState(sipTransferObj);
#line 951 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQPen.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPen[] = {
    {(void *)slot_QPen___ne__, ne_slot},
    {(void *)slot_QPen___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPen[] = {
    {SIP_MLNAME_CAST(sipName_brush), meth_QPen_brush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_brush)},
    {SIP_MLNAME_CAST(sipName_capStyle), meth_QPen_capStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_capStyle)},
    {SIP_MLNAME_CAST(sipName_color), meth_QPen_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_color)},
    {SIP_MLNAME_CAST(sipName_dashOffset), meth_QPen_dashOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_dashOffset)},
    {SIP_MLNAME_CAST(sipName_dashPattern), meth_QPen_dashPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_dashPattern)},
    {SIP_MLNAME_CAST(sipName_isCosmetic), meth_QPen_isCosmetic, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_isCosmetic)},
    {SIP_MLNAME_CAST(sipName_isSolid), meth_QPen_isSolid, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_isSolid)},
    {SIP_MLNAME_CAST(sipName_joinStyle), meth_QPen_joinStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_joinStyle)},
    {SIP_MLNAME_CAST(sipName_miterLimit), meth_QPen_miterLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_miterLimit)},
    {SIP_MLNAME_CAST(sipName_setBrush), meth_QPen_setBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setBrush)},
    {SIP_MLNAME_CAST(sipName_setCapStyle), meth_QPen_setCapStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setCapStyle)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QPen_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setColor)},
    {SIP_MLNAME_CAST(sipName_setCosmetic), meth_QPen_setCosmetic, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setCosmetic)},
    {SIP_MLNAME_CAST(sipName_setDashOffset), meth_QPen_setDashOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setDashOffset)},
    {SIP_MLNAME_CAST(sipName_setDashPattern), meth_QPen_setDashPattern, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setDashPattern)},
    {SIP_MLNAME_CAST(sipName_setJoinStyle), meth_QPen_setJoinStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setJoinStyle)},
    {SIP_MLNAME_CAST(sipName_setMiterLimit), meth_QPen_setMiterLimit, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setMiterLimit)},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QPen_setStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setStyle)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QPen_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setWidth)},
    {SIP_MLNAME_CAST(sipName_setWidthF), meth_QPen_setWidthF, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_setWidthF)},
    {SIP_MLNAME_CAST(sipName_style), meth_QPen_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_style)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QPen_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_swap)},
    {SIP_MLNAME_CAST(sipName_width), meth_QPen_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_width)},
    {SIP_MLNAME_CAST(sipName_widthF), meth_QPen_widthF, METH_VARARGS, SIP_MLDOC_CAST(doc_QPen_widthF)}
};

PyDoc_STRVAR(doc_QPen, "\1QPen()\n"
    "QPen(Qt.PenStyle)\n"
    "QPen(QColor)\n"
    "QPen(QBrush, float, Qt.PenStyle style=Qt.SolidLine, Qt.PenCapStyle cap=Qt.SquareCap, Qt.PenJoinStyle join=Qt.BevelJoin)\n"
    "QPen(QPen)\n"
    "QPen(QVariant)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QPen = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPen,
        {0}
    },
    {
        sipNameNr_QPen,
        {0, 0, 1},
        24, methods_QPen,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPen,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPen,
    init_type_QPen,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPen,
    assign_QPen,
    array_QPen,
    copy_QPen,
    release_QPen,
    cast_QPen,
    convertTo_QPen,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
