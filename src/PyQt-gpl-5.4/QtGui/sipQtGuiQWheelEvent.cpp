/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 247 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWheelEvent.cpp"

#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWheelEvent.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWheelEvent.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWheelEvent.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWheelEvent.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWheelEvent.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWheelEvent.cpp"


class sipQWheelEvent : public QWheelEvent
{
public:
    sipQWheelEvent(const QPointF&,const QPointF&,QPoint,QPoint,int,Qt::Orientation,Qt::MouseButtons,Qt::KeyboardModifiers);
    sipQWheelEvent(const QPointF&,const QPointF&,QPoint,QPoint,int,Qt::Orientation,Qt::MouseButtons,Qt::KeyboardModifiers,Qt::ScrollPhase);
    sipQWheelEvent(const QWheelEvent&);
    ~sipQWheelEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWheelEvent(const sipQWheelEvent &);
    sipQWheelEvent &operator = (const sipQWheelEvent &);
};

sipQWheelEvent::sipQWheelEvent(const QPointF& a0,const QPointF& a1,QPoint a2,QPoint a3,int a4,Qt::Orientation a5,Qt::MouseButtons a6,Qt::KeyboardModifiers a7): QWheelEvent(a0,a1,a2,a3,a4,a5,a6,a7), sipPySelf(0)
{
}

sipQWheelEvent::sipQWheelEvent(const QPointF& a0,const QPointF& a1,QPoint a2,QPoint a3,int a4,Qt::Orientation a5,Qt::MouseButtons a6,Qt::KeyboardModifiers a7,Qt::ScrollPhase a8): QWheelEvent(a0,a1,a2,a3,a4,a5,a6,a7,a8), sipPySelf(0)
{
}

sipQWheelEvent::sipQWheelEvent(const QWheelEvent& a0): QWheelEvent(a0), sipPySelf(0)
{
}

sipQWheelEvent::~sipQWheelEvent()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_QWheelEvent_pos, "QWheelEvent.pos() -> QPoint");

extern "C" {static PyObject *meth_QWheelEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_pos, doc_QWheelEvent_pos);

    return NULL;
}


PyDoc_STRVAR(doc_QWheelEvent_globalPos, "QWheelEvent.globalPos() -> QPoint");

extern "C" {static PyObject *meth_QWheelEvent_globalPos(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_globalPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->globalPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_globalPos, doc_QWheelEvent_globalPos);

    return NULL;
}


PyDoc_STRVAR(doc_QWheelEvent_x, "QWheelEvent.x() -> int");

extern "C" {static PyObject *meth_QWheelEvent_x(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_x, doc_QWheelEvent_x);

    return NULL;
}


PyDoc_STRVAR(doc_QWheelEvent_y, "QWheelEvent.y() -> int");

extern "C" {static PyObject *meth_QWheelEvent_y(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_y, doc_QWheelEvent_y);

    return NULL;
}


PyDoc_STRVAR(doc_QWheelEvent_globalX, "QWheelEvent.globalX() -> int");

extern "C" {static PyObject *meth_QWheelEvent_globalX(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_globalX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalX();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_globalX, doc_QWheelEvent_globalX);

    return NULL;
}


PyDoc_STRVAR(doc_QWheelEvent_globalY, "QWheelEvent.globalY() -> int");

extern "C" {static PyObject *meth_QWheelEvent_globalY(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_globalY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->globalY();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_globalY, doc_QWheelEvent_globalY);

    return NULL;
}


PyDoc_STRVAR(doc_QWheelEvent_buttons, "QWheelEvent.buttons() -> Qt.MouseButtons");

extern "C" {static PyObject *meth_QWheelEvent_buttons(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_buttons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            Qt::MouseButtons*sipRes;

            sipRes = new Qt::MouseButtons(sipCpp->buttons());

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_buttons, doc_QWheelEvent_buttons);

    return NULL;
}


PyDoc_STRVAR(doc_QWheelEvent_pixelDelta, "QWheelEvent.pixelDelta() -> QPoint");

extern "C" {static PyObject *meth_QWheelEvent_pixelDelta(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_pixelDelta(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->pixelDelta());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_pixelDelta, doc_QWheelEvent_pixelDelta);

    return NULL;
}


PyDoc_STRVAR(doc_QWheelEvent_angleDelta, "QWheelEvent.angleDelta() -> QPoint");

extern "C" {static PyObject *meth_QWheelEvent_angleDelta(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_angleDelta(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->angleDelta());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_angleDelta, doc_QWheelEvent_angleDelta);

    return NULL;
}


PyDoc_STRVAR(doc_QWheelEvent_posF, "QWheelEvent.posF() -> QPointF");

extern "C" {static PyObject *meth_QWheelEvent_posF(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_posF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->posF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_posF, doc_QWheelEvent_posF);

    return NULL;
}


PyDoc_STRVAR(doc_QWheelEvent_globalPosF, "QWheelEvent.globalPosF() -> QPointF");

extern "C" {static PyObject *meth_QWheelEvent_globalPosF(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_globalPosF(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->globalPosF());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_globalPosF, doc_QWheelEvent_globalPosF);

    return NULL;
}


PyDoc_STRVAR(doc_QWheelEvent_phase, "QWheelEvent.phase() -> Qt.ScrollPhase");

extern "C" {static PyObject *meth_QWheelEvent_phase(PyObject *, PyObject *);}
static PyObject *meth_QWheelEvent_phase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWheelEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWheelEvent, &sipCpp))
        {
            Qt::ScrollPhase sipRes;

            sipRes = sipCpp->phase();

            return sipConvertFromEnum(sipRes,sipType_Qt_ScrollPhase);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWheelEvent, sipName_phase, doc_QWheelEvent_phase);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWheelEvent(void *, const sipTypeDef *);}
static void *cast_QWheelEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWheelEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QInputEvent)->ctd_cast((QInputEvent *)(QWheelEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWheelEvent(void *, int);}
static void release_QWheelEvent(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQWheelEvent *>(sipCppV);
    else
        delete reinterpret_cast<QWheelEvent *>(sipCppV);
}


extern "C" {static void dealloc_QWheelEvent(sipSimpleWrapper *);}
static void dealloc_QWheelEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWheelEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWheelEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWheelEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWheelEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQWheelEvent *sipCpp = 0;

    {
        const QPointF* a0;
        int a0State = 0;
        const QPointF* a1;
        int a1State = 0;
        QPoint* a2;
        QPoint* a3;
        int a4;
        Qt::Orientation a5;
        Qt::MouseButtons* a6;
        int a6State = 0;
        Qt::KeyboardModifiers* a7;
        int a7State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J1J9J9iEJ1J1", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPoint, &a2, sipType_QPoint, &a3, &a4, sipType_Qt_Orientation, &a5, sipType_Qt_MouseButtons, &a6, &a6State, sipType_Qt_KeyboardModifiers, &a7, &a7State))
        {
            sipCpp = new sipQWheelEvent(*a0,*a1,*a2,*a3,a4,a5,*a6,*a7);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(a6,sipType_Qt_MouseButtons,a6State);
            sipReleaseType(a7,sipType_Qt_KeyboardModifiers,a7State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        const QPointF* a1;
        int a1State = 0;
        QPoint* a2;
        QPoint* a3;
        int a4;
        Qt::Orientation a5;
        Qt::MouseButtons* a6;
        int a6State = 0;
        Qt::KeyboardModifiers* a7;
        int a7State = 0;
        Qt::ScrollPhase a8;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J1J9J9iEJ1J1E", sipType_QPointF, &a0, &a0State, sipType_QPointF, &a1, &a1State, sipType_QPoint, &a2, sipType_QPoint, &a3, &a4, sipType_Qt_Orientation, &a5, sipType_Qt_MouseButtons, &a6, &a6State, sipType_Qt_KeyboardModifiers, &a7, &a7State, sipType_Qt_ScrollPhase, &a8))
        {
            sipCpp = new sipQWheelEvent(*a0,*a1,*a2,*a3,a4,a5,*a6,*a7,a8);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);
            sipReleaseType(a6,sipType_Qt_MouseButtons,a6State);
            sipReleaseType(a7,sipType_Qt_KeyboardModifiers,a7State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QWheelEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QWheelEvent, &a0))
        {
            sipCpp = new sipQWheelEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWheelEvent[] = {{73, 255, 1}};


static PyMethodDef methods_QWheelEvent[] = {
    {SIP_MLNAME_CAST(sipName_angleDelta), meth_QWheelEvent_angleDelta, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_angleDelta)},
    {SIP_MLNAME_CAST(sipName_buttons), meth_QWheelEvent_buttons, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_buttons)},
    {SIP_MLNAME_CAST(sipName_globalPos), meth_QWheelEvent_globalPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_globalPos)},
    {SIP_MLNAME_CAST(sipName_globalPosF), meth_QWheelEvent_globalPosF, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_globalPosF)},
    {SIP_MLNAME_CAST(sipName_globalX), meth_QWheelEvent_globalX, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_globalX)},
    {SIP_MLNAME_CAST(sipName_globalY), meth_QWheelEvent_globalY, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_globalY)},
    {SIP_MLNAME_CAST(sipName_phase), meth_QWheelEvent_phase, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_phase)},
    {SIP_MLNAME_CAST(sipName_pixelDelta), meth_QWheelEvent_pixelDelta, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_pixelDelta)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QWheelEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_pos)},
    {SIP_MLNAME_CAST(sipName_posF), meth_QWheelEvent_posF, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_posF)},
    {SIP_MLNAME_CAST(sipName_x), meth_QWheelEvent_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QWheelEvent_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QWheelEvent_y)}
};

PyDoc_STRVAR(doc_QWheelEvent, "\1QWheelEvent(QPointF, QPointF, QPoint, QPoint, int, Qt.Orientation, Qt.MouseButtons, Qt.KeyboardModifiers)\n"
    "QWheelEvent(QPointF, QPointF, QPoint, QPoint, int, Qt.Orientation, Qt.MouseButtons, Qt.KeyboardModifiers, Qt.ScrollPhase)\n"
    "QWheelEvent(QWheelEvent)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QWheelEvent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWheelEvent,
        {0}
    },
    {
        sipNameNr_QWheelEvent,
        {0, 0, 1},
        12, methods_QWheelEvent,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWheelEvent,
    -1,
    -1,
    supers_QWheelEvent,
    0,
    init_type_QWheelEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWheelEvent,
    0,
    0,
    0,
    release_QWheelEvent,
    cast_QWheelEvent,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
