/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:24 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qquaternion.sip"
#include <qquaternion.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQQuaternion.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qvector3d.sip"
#include <qvector3d.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQQuaternion.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qvector4d.sip"
#include <qvector4d.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQQuaternion.cpp"


PyDoc_STRVAR(doc_QQuaternion_length, "QQuaternion.length() -> float");

extern "C" {static PyObject *meth_QQuaternion_length(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->length();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_length, doc_QQuaternion_length);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_lengthSquared, "QQuaternion.lengthSquared() -> float");

extern "C" {static PyObject *meth_QQuaternion_lengthSquared(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_lengthSquared(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->lengthSquared();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_lengthSquared, doc_QQuaternion_lengthSquared);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_normalized, "QQuaternion.normalized() -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_normalized(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            QQuaternion*sipRes;

            sipRes = new QQuaternion(sipCpp->normalized());

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_normalized, doc_QQuaternion_normalized);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_normalize, "QQuaternion.normalize()");

extern "C" {static PyObject *meth_QQuaternion_normalize(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_normalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            sipCpp->normalize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_normalize, doc_QQuaternion_normalize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_rotatedVector, "QQuaternion.rotatedVector(QVector3D) -> QVector3D");

extern "C" {static PyObject *meth_QQuaternion_rotatedVector(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_rotatedVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVector3D* a0;
        const QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuaternion, &sipCpp, sipType_QVector3D, &a0))
        {
            QVector3D*sipRes;

            sipRes = new QVector3D(sipCpp->rotatedVector(*a0));

            return sipConvertFromNewType(sipRes,sipType_QVector3D,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_rotatedVector, doc_QQuaternion_rotatedVector);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_fromAxisAndAngle, "QQuaternion.fromAxisAndAngle(QVector3D, float) -> QQuaternion\n"
    "QQuaternion.fromAxisAndAngle(float, float, float, float) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_fromAxisAndAngle(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_fromAxisAndAngle(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVector3D* a0;
        float a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9f", sipType_QVector3D, &a0, &a1))
        {
            QQuaternion*sipRes;

            sipRes = new QQuaternion(QQuaternion::fromAxisAndAngle(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,NULL);
        }
    }

    {
        float a0;
        float a1;
        float a2;
        float a3;

        if (sipParseArgs(&sipParseErr, sipArgs, "ffff", &a0, &a1, &a2, &a3))
        {
            QQuaternion*sipRes;

            sipRes = new QQuaternion(QQuaternion::fromAxisAndAngle(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_fromAxisAndAngle, doc_QQuaternion_fromAxisAndAngle);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_slerp, "QQuaternion.slerp(QQuaternion, QQuaternion, float) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_slerp(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_slerp(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion* a0;
        const QQuaternion* a1;
        float a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9f", sipType_QQuaternion, &a0, sipType_QQuaternion, &a1, &a2))
        {
            QQuaternion*sipRes;

            sipRes = new QQuaternion(QQuaternion::slerp(*a0,*a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_slerp, doc_QQuaternion_slerp);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_nlerp, "QQuaternion.nlerp(QQuaternion, QQuaternion, float) -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_nlerp(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_nlerp(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion* a0;
        const QQuaternion* a1;
        float a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9f", sipType_QQuaternion, &a0, sipType_QQuaternion, &a1, &a2))
        {
            QQuaternion*sipRes;

            sipRes = new QQuaternion(QQuaternion::nlerp(*a0,*a1,a2));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_nlerp, doc_QQuaternion_nlerp);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_isNull, "QQuaternion.isNull() -> bool");

extern "C" {static PyObject *meth_QQuaternion_isNull(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_isNull, doc_QQuaternion_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_isIdentity, "QQuaternion.isIdentity() -> bool");

extern "C" {static PyObject *meth_QQuaternion_isIdentity(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_isIdentity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isIdentity();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_isIdentity, doc_QQuaternion_isIdentity);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_x, "QQuaternion.x() -> float");

extern "C" {static PyObject *meth_QQuaternion_x(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->x();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_x, doc_QQuaternion_x);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_y, "QQuaternion.y() -> float");

extern "C" {static PyObject *meth_QQuaternion_y(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->y();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_y, doc_QQuaternion_y);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_z, "QQuaternion.z() -> float");

extern "C" {static PyObject *meth_QQuaternion_z(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_z(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->z();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_z, doc_QQuaternion_z);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_scalar, "QQuaternion.scalar() -> float");

extern "C" {static PyObject *meth_QQuaternion_scalar(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_scalar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->scalar();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_scalar, doc_QQuaternion_scalar);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_setX, "QQuaternion.setX(float)");

extern "C" {static PyObject *meth_QQuaternion_setX(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QQuaternion, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_setX, doc_QQuaternion_setX);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_setY, "QQuaternion.setY(float)");

extern "C" {static PyObject *meth_QQuaternion_setY(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QQuaternion, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_setY, doc_QQuaternion_setY);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_setZ, "QQuaternion.setZ(float)");

extern "C" {static PyObject *meth_QQuaternion_setZ(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_setZ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QQuaternion, &sipCpp, &a0))
        {
            sipCpp->setZ(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_setZ, doc_QQuaternion_setZ);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_setScalar, "QQuaternion.setScalar(float)");

extern "C" {static PyObject *meth_QQuaternion_setScalar(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_setScalar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_QQuaternion, &sipCpp, &a0))
        {
            sipCpp->setScalar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_setScalar, doc_QQuaternion_setScalar);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_conjugate, "QQuaternion.conjugate() -> QQuaternion");

extern "C" {static PyObject *meth_QQuaternion_conjugate(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_conjugate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            QQuaternion*sipRes;

            sipRes = new QQuaternion(sipCpp->conjugate());

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_conjugate, doc_QQuaternion_conjugate);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_setVector, "QQuaternion.setVector(QVector3D)\n"
    "QQuaternion.setVector(float, float, float)");

extern "C" {static PyObject *meth_QQuaternion_setVector(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_setVector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVector3D* a0;
        QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuaternion, &sipCpp, sipType_QVector3D, &a0))
        {
            sipCpp->setVector(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        float a0;
        float a1;
        float a2;
        QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bfff", &sipSelf, sipType_QQuaternion, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->setVector(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_setVector, doc_QQuaternion_setVector);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_vector, "QQuaternion.vector() -> QVector3D");

extern "C" {static PyObject *meth_QQuaternion_vector(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_vector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            QVector3D*sipRes;

            sipRes = new QVector3D(sipCpp->vector());

            return sipConvertFromNewType(sipRes,sipType_QVector3D,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_vector, doc_QQuaternion_vector);

    return NULL;
}


PyDoc_STRVAR(doc_QQuaternion_toVector4D, "QQuaternion.toVector4D() -> QVector4D");

extern "C" {static PyObject *meth_QQuaternion_toVector4D(PyObject *, PyObject *);}
static PyObject *meth_QQuaternion_toVector4D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuaternion, &sipCpp))
        {
            QVector4D*sipRes;

            sipRes = new QVector4D(sipCpp->toVector4D());

            return sipConvertFromNewType(sipRes,sipType_QVector4D,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuaternion, sipName_toVector4D, doc_QQuaternion_toVector4D);

    return NULL;
}


extern "C" {static PyObject *slot_QQuaternion___eq__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QQuaternion *sipCpp = reinterpret_cast<QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QQuaternion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQuaternion, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QQuaternion,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QQuaternion___div__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_QQuaternion, &a0, &a1))
        {
            QQuaternion*sipRes;

            sipRes = new QQuaternion((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QQuaternion___add__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion* a0;
        const QQuaternion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QQuaternion, &a0, sipType_QQuaternion, &a1))
        {
            QQuaternion*sipRes;

            sipRes = new QQuaternion((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QQuaternion___sub__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion* a0;
        const QQuaternion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QQuaternion, &a0, sipType_QQuaternion, &a1))
        {
            QQuaternion*sipRes;

            sipRes = new QQuaternion((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QQuaternion___mul__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuaternion* a0;
        const QQuaternion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QQuaternion, &a0, sipType_QQuaternion, &a1))
        {
            QQuaternion*sipRes;

            sipRes = new QQuaternion((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,NULL);
        }
    }

    {
        float a0;
        const QQuaternion* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "fJ9", &a0, sipType_QQuaternion, &a1))
        {
            QQuaternion*sipRes;

            sipRes = new QQuaternion((a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,NULL);
        }
    }

    {
        const QQuaternion* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_QQuaternion, &a0, &a1))
        {
            QQuaternion*sipRes;

            sipRes = new QQuaternion((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QQuaternion___neg__(PyObject *);}
static PyObject *slot_QQuaternion___neg__(PyObject *sipSelf)
{
    QQuaternion *sipCpp = reinterpret_cast<QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return 0;


    {
        {
            QQuaternion*sipRes;

            sipRes = new QQuaternion(-(*sipCpp));

            return sipConvertFromNewType(sipRes,sipType_QQuaternion,NULL);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QQuaternion___ne__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QQuaternion *sipCpp = reinterpret_cast<QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QQuaternion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQuaternion, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QQuaternion,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QQuaternion___idiv__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuaternion)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QQuaternion *sipCpp = reinterpret_cast<QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp->QQuaternion::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuaternion___imul__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuaternion)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QQuaternion *sipCpp = reinterpret_cast<QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp->QQuaternion::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const QQuaternion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQuaternion, &a0))
        {
            sipCpp->QQuaternion::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuaternion___isub__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuaternion)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QQuaternion *sipCpp = reinterpret_cast<QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QQuaternion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQuaternion, &a0))
        {
            sipCpp->QQuaternion::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuaternion___iadd__(PyObject *,PyObject *);}
static PyObject *slot_QQuaternion___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QQuaternion)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QQuaternion *sipCpp = reinterpret_cast<QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QQuaternion* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QQuaternion, &a0))
        {
            sipCpp->QQuaternion::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QQuaternion___repr__(PyObject *);}
static PyObject *slot_QQuaternion___repr__(PyObject *sipSelf)
{
    QQuaternion *sipCpp = reinterpret_cast<QQuaternion *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QQuaternion));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qquaternion.sip"
        PyObject *scalar = PyFloat_FromDouble(sipCpp->scalar());
        PyObject *x = PyFloat_FromDouble(sipCpp->x());
        PyObject *y = PyFloat_FromDouble(sipCpp->y());
        PyObject *z = PyFloat_FromDouble(sipCpp->z());
        
        if (scalar && x && y && z)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt5.QtGui.QQuaternion(%R, %R, %R, %R)",
                    scalar, x, y, z);
        #else
            sipRes = PyString_FromString("PyQt5.QtGui.QQuaternion(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(scalar));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(x));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(y));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(z));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        Py_XDECREF(scalar);
        Py_XDECREF(x);
        Py_XDECREF(y);
        Py_XDECREF(z);
#line 1111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQQuaternion.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QQuaternion(void *, const sipTypeDef *);}
static void *cast_QQuaternion(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QQuaternion)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuaternion(void *, int);}
static void release_QQuaternion(void *sipCppV,int)
{
    delete reinterpret_cast<QQuaternion *>(sipCppV);
}


extern "C" {static PyObject *pickle_QQuaternion(void *);}
static PyObject *pickle_QQuaternion(void *sipCppV)
{
    QQuaternion *sipCpp = reinterpret_cast<QQuaternion *>(sipCppV);
    PyObject *sipRes;

#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qquaternion.sip"
    sipRes = Py_BuildValue((char *)"dddd", (double)sipCpp->scalar(),
            (double)sipCpp->x(), (double)sipCpp->y(), (double)sipCpp->z());
#line 1149 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQQuaternion.cpp"

    return sipRes;
}


extern "C" {static void assign_QQuaternion(void *, SIP_SSIZE_T, const void *);}
static void assign_QQuaternion(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QQuaternion *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QQuaternion *>(sipSrc);
}


extern "C" {static void *array_QQuaternion(SIP_SSIZE_T);}
static void *array_QQuaternion(SIP_SSIZE_T sipNrElem)
{
    return new QQuaternion[sipNrElem];
}


extern "C" {static void *copy_QQuaternion(const void *, SIP_SSIZE_T);}
static void *copy_QQuaternion(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QQuaternion(reinterpret_cast<const QQuaternion *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QQuaternion(sipSimpleWrapper *);}
static void dealloc_QQuaternion(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QQuaternion(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QQuaternion(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuaternion(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QQuaternion *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QQuaternion();

            return sipCpp;
        }
    }

    {
        float a0;
        float a1;
        float a2;
        float a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "ffff", &a0, &a1, &a2, &a3))
        {
            sipCpp = new QQuaternion(a0,a1,a2,a3);

            return sipCpp;
        }
    }

    {
        float a0;
        const QVector3D* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "fJ9", &a0, sipType_QVector3D, &a1))
        {
            sipCpp = new QQuaternion(a0,*a1);

            return sipCpp;
        }
    }

    {
        const QVector4D* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QVector4D, &a0))
        {
            sipCpp = new QQuaternion(*a0);

            return sipCpp;
        }
    }

    {
        const QQuaternion* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QQuaternion, &a0))
        {
            sipCpp = new QQuaternion(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QQuaternion[] = {
    {(void *)slot_QQuaternion___eq__, eq_slot},
    {(void *)slot_QQuaternion___div__, div_slot},
    {(void *)slot_QQuaternion___add__, add_slot},
    {(void *)slot_QQuaternion___sub__, sub_slot},
    {(void *)slot_QQuaternion___mul__, mul_slot},
    {(void *)slot_QQuaternion___neg__, neg_slot},
    {(void *)slot_QQuaternion___ne__, ne_slot},
    {(void *)slot_QQuaternion___idiv__, idiv_slot},
    {(void *)slot_QQuaternion___imul__, imul_slot},
    {(void *)slot_QQuaternion___isub__, isub_slot},
    {(void *)slot_QQuaternion___iadd__, iadd_slot},
    {(void *)slot_QQuaternion___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QQuaternion[] = {
    {SIP_MLNAME_CAST(sipName_conjugate), meth_QQuaternion_conjugate, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_conjugate)},
    {SIP_MLNAME_CAST(sipName_fromAxisAndAngle), meth_QQuaternion_fromAxisAndAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_fromAxisAndAngle)},
    {SIP_MLNAME_CAST(sipName_isIdentity), meth_QQuaternion_isIdentity, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_isIdentity)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QQuaternion_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_isNull)},
    {SIP_MLNAME_CAST(sipName_length), meth_QQuaternion_length, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_length)},
    {SIP_MLNAME_CAST(sipName_lengthSquared), meth_QQuaternion_lengthSquared, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_lengthSquared)},
    {SIP_MLNAME_CAST(sipName_nlerp), meth_QQuaternion_nlerp, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_nlerp)},
    {SIP_MLNAME_CAST(sipName_normalize), meth_QQuaternion_normalize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_normalize)},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QQuaternion_normalized, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_normalized)},
    {SIP_MLNAME_CAST(sipName_rotatedVector), meth_QQuaternion_rotatedVector, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_rotatedVector)},
    {SIP_MLNAME_CAST(sipName_scalar), meth_QQuaternion_scalar, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_scalar)},
    {SIP_MLNAME_CAST(sipName_setScalar), meth_QQuaternion_setScalar, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_setScalar)},
    {SIP_MLNAME_CAST(sipName_setVector), meth_QQuaternion_setVector, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_setVector)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QQuaternion_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QQuaternion_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_setY)},
    {SIP_MLNAME_CAST(sipName_setZ), meth_QQuaternion_setZ, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_setZ)},
    {SIP_MLNAME_CAST(sipName_slerp), meth_QQuaternion_slerp, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_slerp)},
    {SIP_MLNAME_CAST(sipName_toVector4D), meth_QQuaternion_toVector4D, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_toVector4D)},
    {SIP_MLNAME_CAST(sipName_vector), meth_QQuaternion_vector, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_vector)},
    {SIP_MLNAME_CAST(sipName_x), meth_QQuaternion_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QQuaternion_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_y)},
    {SIP_MLNAME_CAST(sipName_z), meth_QQuaternion_z, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuaternion_z)}
};

PyDoc_STRVAR(doc_QQuaternion, "\1QQuaternion()\n"
    "QQuaternion(float, float, float, float)\n"
    "QQuaternion(float, QVector3D)\n"
    "QQuaternion(QVector4D)\n"
    "QQuaternion(QQuaternion)");


pyqt5ClassTypeDef sipTypeDef_QtGui_QQuaternion = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QQuaternion,
        {0}
    },
    {
        sipNameNr_QQuaternion,
        {0, 0, 1},
        22, methods_QQuaternion,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQuaternion,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QQuaternion,
    init_type_QQuaternion,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQuaternion,
    assign_QQuaternion,
    array_QQuaternion,
    copy_QQuaternion,
    release_QQuaternion,
    cast_QQuaternion,
    0,
    0,
    0,
    pickle_QQuaternion,
    0,
    0
},
    0,
    0,
    0,
    0
};
