/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:25 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 675 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtGui/qevent.sip"
#include <qevent.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindowStateChangeEvent.cpp"

#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindowStateChangeEvent.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtGui/sipQtGuiQWindowStateChangeEvent.cpp"


PyDoc_STRVAR(doc_QWindowStateChangeEvent_oldState, "QWindowStateChangeEvent.oldState() -> Qt.WindowStates");

extern "C" {static PyObject *meth_QWindowStateChangeEvent_oldState(PyObject *, PyObject *);}
static PyObject *meth_QWindowStateChangeEvent_oldState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWindowStateChangeEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWindowStateChangeEvent, &sipCpp))
        {
            Qt::WindowStates*sipRes;

            sipRes = new Qt::WindowStates(sipCpp->oldState());

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWindowStateChangeEvent, sipName_oldState, doc_QWindowStateChangeEvent_oldState);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWindowStateChangeEvent(void *, const sipTypeDef *);}
static void *cast_QWindowStateChangeEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWindowStateChangeEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QEvent)->ctd_cast((QEvent *)(QWindowStateChangeEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWindowStateChangeEvent(void *, int);}
static void release_QWindowStateChangeEvent(void *sipCppV,int)
{
    delete reinterpret_cast<QWindowStateChangeEvent *>(sipCppV);
}


extern "C" {static void dealloc_QWindowStateChangeEvent(sipSimpleWrapper *);}
static void dealloc_QWindowStateChangeEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWindowStateChangeEvent(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWindowStateChangeEvent[] = {{53, 0, 1}};


static PyMethodDef methods_QWindowStateChangeEvent[] = {
    {SIP_MLNAME_CAST(sipName_oldState), meth_QWindowStateChangeEvent_oldState, METH_VARARGS, SIP_MLDOC_CAST(doc_QWindowStateChangeEvent_oldState)}
};


pyqt5ClassTypeDef sipTypeDef_QtGui_QWindowStateChangeEvent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWindowStateChangeEvent,
        {0}
    },
    {
        sipNameNr_QWindowStateChangeEvent,
        {0, 0, 1},
        1, methods_QWindowStateChangeEvent,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QWindowStateChangeEvent,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWindowStateChangeEvent,
    0,
    0,
    0,
    release_QWindowStateChangeEvent,
    cast_QWindowStateChangeEvent,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
