/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:29 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtHelp.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtHelp/qhelpenginecore.sip"
#include <qhelpenginecore.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 26 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"


class sipQHelpEngineCore : public QHelpEngineCore
{
public:
    sipQHelpEngineCore(const QString&,QObject*);
    virtual ~sipQHelpEngineCore();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHelpEngineCore(const sipQHelpEngineCore &);
    sipQHelpEngineCore &operator = (const sipQHelpEngineCore &);

    char sipPyMethods[7];
};

sipQHelpEngineCore::sipQHelpEngineCore(const QString& a0,QObject*a1): QHelpEngineCore(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHelpEngineCore::~sipQHelpEngineCore()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQHelpEngineCore::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtHelp_qt_metaobject(sipPySelf,sipType_QHelpEngineCore);
}

int sipQHelpEngineCore::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QHelpEngineCore::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtHelp_qt_metacall(sipPySelf,sipType_QHelpEngineCore,_c,_id,_a);

    return _id;
}

void *sipQHelpEngineCore::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtHelp_qt_metacast(sipPySelf, sipType_QHelpEngineCore, _clname, &sipCpp) ? sipCpp : QHelpEngineCore::qt_metacast(_clname));
}

void sipQHelpEngineCore::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QHelpEngineCore::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtHelp_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHelpEngineCore::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QHelpEngineCore::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtHelp_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHelpEngineCore::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QHelpEngineCore::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtHelp_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHelpEngineCore::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QHelpEngineCore::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtHelp_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQHelpEngineCore::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QHelpEngineCore::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtHelp_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQHelpEngineCore::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QHelpEngineCore::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtHelp_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQHelpEngineCore::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QHelpEngineCore::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtHelp_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQHelpEngineCore::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQHelpEngineCore::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQHelpEngineCore::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQHelpEngineCore::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQHelpEngineCore::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQHelpEngineCore::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQHelpEngineCore::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQHelpEngineCore::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQHelpEngineCore::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QHelpEngineCore_sender, "QHelpEngineCore.sender() -> QObject");

extern "C" {static PyObject *meth_QHelpEngineCore_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQHelpEngineCore *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHelpEngineCore, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 381 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_sender, doc_QHelpEngineCore_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_receivers, "QHelpEngineCore.receivers(signal) -> int");

extern "C" {static PyObject *meth_QHelpEngineCore_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQHelpEngineCore *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QHelpEngineCore, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 440 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtHelp/sipQtHelpQHelpEngineCore.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_receivers, doc_QHelpEngineCore_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_timerEvent, "QHelpEngineCore.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QHelpEngineCore_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQHelpEngineCore *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_timerEvent, doc_QHelpEngineCore_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_childEvent, "QHelpEngineCore.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QHelpEngineCore_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQHelpEngineCore *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_childEvent, doc_QHelpEngineCore_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_customEvent, "QHelpEngineCore.customEvent(QEvent)");

extern "C" {static PyObject *meth_QHelpEngineCore_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQHelpEngineCore *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_customEvent, doc_QHelpEngineCore_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_connectNotify, "QHelpEngineCore.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QHelpEngineCore_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQHelpEngineCore *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_connectNotify, doc_QHelpEngineCore_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_disconnectNotify, "QHelpEngineCore.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QHelpEngineCore_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQHelpEngineCore *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_disconnectNotify, doc_QHelpEngineCore_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_senderSignalIndex, "QHelpEngineCore.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QHelpEngineCore_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQHelpEngineCore *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QHelpEngineCore, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_senderSignalIndex, doc_QHelpEngineCore_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_isSignalConnected, "QHelpEngineCore.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QHelpEngineCore_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQHelpEngineCore *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_isSignalConnected, doc_QHelpEngineCore_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_setupData, "QHelpEngineCore.setupData() -> bool");

extern "C" {static PyObject *meth_QHelpEngineCore_setupData(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_setupData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEngineCore, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->setupData();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_setupData, doc_QHelpEngineCore_setupData);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_collectionFile, "QHelpEngineCore.collectionFile() -> str");

extern "C" {static PyObject *meth_QHelpEngineCore_collectionFile(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_collectionFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEngineCore, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->collectionFile());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_collectionFile, doc_QHelpEngineCore_collectionFile);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_setCollectionFile, "QHelpEngineCore.setCollectionFile(str)");

extern "C" {static PyObject *meth_QHelpEngineCore_setCollectionFile(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_setCollectionFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCollectionFile(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_setCollectionFile, doc_QHelpEngineCore_setCollectionFile);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_copyCollectionFile, "QHelpEngineCore.copyCollectionFile(str) -> bool");

extern "C" {static PyObject *meth_QHelpEngineCore_copyCollectionFile(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_copyCollectionFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->copyCollectionFile(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_copyCollectionFile, doc_QHelpEngineCore_copyCollectionFile);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_namespaceName, "QHelpEngineCore.namespaceName(str) -> str");

extern "C" {static PyObject *meth_QHelpEngineCore_namespaceName(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_namespaceName(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(QHelpEngineCore::namespaceName(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_namespaceName, doc_QHelpEngineCore_namespaceName);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_registerDocumentation, "QHelpEngineCore.registerDocumentation(str) -> bool");

extern "C" {static PyObject *meth_QHelpEngineCore_registerDocumentation(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_registerDocumentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->registerDocumentation(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_registerDocumentation, doc_QHelpEngineCore_registerDocumentation);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_unregisterDocumentation, "QHelpEngineCore.unregisterDocumentation(str) -> bool");

extern "C" {static PyObject *meth_QHelpEngineCore_unregisterDocumentation(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_unregisterDocumentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->unregisterDocumentation(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_unregisterDocumentation, doc_QHelpEngineCore_unregisterDocumentation);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_documentationFileName, "QHelpEngineCore.documentationFileName(str) -> str");

extern "C" {static PyObject *meth_QHelpEngineCore_documentationFileName(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_documentationFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->documentationFileName(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_documentationFileName, doc_QHelpEngineCore_documentationFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_customFilters, "QHelpEngineCore.customFilters() -> list-of-str");

extern "C" {static PyObject *meth_QHelpEngineCore_customFilters(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_customFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEngineCore, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->customFilters());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_customFilters, doc_QHelpEngineCore_customFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_removeCustomFilter, "QHelpEngineCore.removeCustomFilter(str) -> bool");

extern "C" {static PyObject *meth_QHelpEngineCore_removeCustomFilter(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_removeCustomFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->removeCustomFilter(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_removeCustomFilter, doc_QHelpEngineCore_removeCustomFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_addCustomFilter, "QHelpEngineCore.addCustomFilter(str, list-of-str) -> bool");

extern "C" {static PyObject *meth_QHelpEngineCore_addCustomFilter(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_addCustomFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QStringList* a1;
        int a1State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->addCustomFilter(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_addCustomFilter, doc_QHelpEngineCore_addCustomFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_filterAttributes, "QHelpEngineCore.filterAttributes() -> list-of-str\n"
    "QHelpEngineCore.filterAttributes(str) -> list-of-str");

extern "C" {static PyObject *meth_QHelpEngineCore_filterAttributes(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_filterAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEngineCore, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->filterAttributes());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->filterAttributes(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_filterAttributes, doc_QHelpEngineCore_filterAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_currentFilter, "QHelpEngineCore.currentFilter() -> str");

extern "C" {static PyObject *meth_QHelpEngineCore_currentFilter(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_currentFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEngineCore, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->currentFilter());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_currentFilter, doc_QHelpEngineCore_currentFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_setCurrentFilter, "QHelpEngineCore.setCurrentFilter(str)");

extern "C" {static PyObject *meth_QHelpEngineCore_setCurrentFilter(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_setCurrentFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCurrentFilter(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_setCurrentFilter, doc_QHelpEngineCore_setCurrentFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_registeredDocumentations, "QHelpEngineCore.registeredDocumentations() -> list-of-str");

extern "C" {static PyObject *meth_QHelpEngineCore_registeredDocumentations(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_registeredDocumentations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEngineCore, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->registeredDocumentations());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_registeredDocumentations, doc_QHelpEngineCore_registeredDocumentations);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_filterAttributeSets, "QHelpEngineCore.filterAttributeSets(str) -> list-of-QStringList");

extern "C" {static PyObject *meth_QHelpEngineCore_filterAttributeSets(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_filterAttributeSets(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QList<QStringList>*sipRes;

            sipRes = new QList<QStringList>(sipCpp->filterAttributeSets(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_filterAttributeSets, doc_QHelpEngineCore_filterAttributeSets);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_files, "QHelpEngineCore.files(str, list-of-str, str extensionFilter='') -> list-of-QUrl");

extern "C" {static PyObject *meth_QHelpEngineCore_files(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_files(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QStringList* a1;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        QHelpEngineCore *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_extensionFilter,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|J1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            QList<QUrl>*sipRes;

            sipRes = new QList<QUrl>(sipCpp->files(*a0,*a1,*a2));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_files, doc_QHelpEngineCore_files);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_findFile, "QHelpEngineCore.findFile(QUrl) -> QUrl");

extern "C" {static PyObject *meth_QHelpEngineCore_findFile(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_findFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        const QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QUrl, &a0))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->findFile(*a0));

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_findFile, doc_QHelpEngineCore_findFile);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_fileData, "QHelpEngineCore.fileData(QUrl) -> QByteArray");

extern "C" {static PyObject *meth_QHelpEngineCore_fileData(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_fileData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        const QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QUrl, &a0))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->fileData(*a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_fileData, doc_QHelpEngineCore_fileData);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_linksForIdentifier, "QHelpEngineCore.linksForIdentifier(str) -> dict-of-QString-QUrl");

extern "C" {static PyObject *meth_QHelpEngineCore_linksForIdentifier(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_linksForIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QMap<QString,QUrl>*sipRes;

            sipRes = new QMap<QString,QUrl>(sipCpp->linksForIdentifier(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_linksForIdentifier, doc_QHelpEngineCore_linksForIdentifier);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_removeCustomValue, "QHelpEngineCore.removeCustomValue(str) -> bool");

extern "C" {static PyObject *meth_QHelpEngineCore_removeCustomValue(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_removeCustomValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->removeCustomValue(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_removeCustomValue, doc_QHelpEngineCore_removeCustomValue);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_customValue, "QHelpEngineCore.customValue(str, QVariant defaultValue=None) -> QVariant");

extern "C" {static PyObject *meth_QHelpEngineCore_customValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_customValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QVariant& a1def = QVariant();
        const QVariant* a1 = &a1def;
        int a1State = 0;
        const QHelpEngineCore *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->customValue(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_customValue, doc_QHelpEngineCore_customValue);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_setCustomValue, "QHelpEngineCore.setCustomValue(str, QVariant) -> bool");

extern "C" {static PyObject *meth_QHelpEngineCore_setCustomValue(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_setCustomValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QVariant* a1;
        int a1State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QHelpEngineCore, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->setCustomValue(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_setCustomValue, doc_QHelpEngineCore_setCustomValue);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_metaData, "QHelpEngineCore.metaData(str, str) -> QVariant");

extern "C" {static PyObject *meth_QHelpEngineCore_metaData(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_metaData(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1J1", sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QVariant*sipRes;

            sipRes = new QVariant(QHelpEngineCore::metaData(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_metaData, doc_QHelpEngineCore_metaData);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_error, "QHelpEngineCore.error() -> str");

extern "C" {static PyObject *meth_QHelpEngineCore_error(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEngineCore, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->error());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_error, doc_QHelpEngineCore_error);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_autoSaveFilter, "QHelpEngineCore.autoSaveFilter() -> bool");

extern "C" {static PyObject *meth_QHelpEngineCore_autoSaveFilter(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_autoSaveFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QHelpEngineCore, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoSaveFilter();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_autoSaveFilter, doc_QHelpEngineCore_autoSaveFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QHelpEngineCore_setAutoSaveFilter, "QHelpEngineCore.setAutoSaveFilter(bool)");

extern "C" {static PyObject *meth_QHelpEngineCore_setAutoSaveFilter(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_setAutoSaveFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QHelpEngineCore, &sipCpp, &a0))
        {
            sipCpp->setAutoSaveFilter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QHelpEngineCore, sipName_setAutoSaveFilter, doc_QHelpEngineCore_setAutoSaveFilter);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QHelpEngineCore(void *, const sipTypeDef *);}
static void *cast_QHelpEngineCore(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QHelpEngineCore)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QHelpEngineCore *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHelpEngineCore(void *, int);}
static void release_QHelpEngineCore(void *sipCppV,int)
{
    QHelpEngineCore *sipCpp = reinterpret_cast<QHelpEngineCore *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QHelpEngineCore(sipSimpleWrapper *);}
static void dealloc_QHelpEngineCore(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQHelpEngineCore *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QHelpEngineCore(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QHelpEngineCore(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QHelpEngineCore(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQHelpEngineCore *sipCpp = 0;

    {
        const QString* a0;
        int a0State = 0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQHelpEngineCore(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHelpEngineCore[] = {{162, 0, 1}};


static PyMethodDef methods_QHelpEngineCore[] = {
    {SIP_MLNAME_CAST(sipName_addCustomFilter), meth_QHelpEngineCore_addCustomFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_addCustomFilter)},
    {SIP_MLNAME_CAST(sipName_autoSaveFilter), meth_QHelpEngineCore_autoSaveFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_autoSaveFilter)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QHelpEngineCore_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_collectionFile), meth_QHelpEngineCore_collectionFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_collectionFile)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QHelpEngineCore_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_copyCollectionFile), meth_QHelpEngineCore_copyCollectionFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_copyCollectionFile)},
    {SIP_MLNAME_CAST(sipName_currentFilter), meth_QHelpEngineCore_currentFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_currentFilter)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QHelpEngineCore_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customFilters), meth_QHelpEngineCore_customFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_customFilters)},
    {SIP_MLNAME_CAST(sipName_customValue), (PyCFunction)meth_QHelpEngineCore_customValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHelpEngineCore_customValue)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QHelpEngineCore_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_documentationFileName), meth_QHelpEngineCore_documentationFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_documentationFileName)},
    {SIP_MLNAME_CAST(sipName_error), meth_QHelpEngineCore_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_error)},
    {SIP_MLNAME_CAST(sipName_fileData), meth_QHelpEngineCore_fileData, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_fileData)},
    {SIP_MLNAME_CAST(sipName_files), (PyCFunction)meth_QHelpEngineCore_files, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QHelpEngineCore_files)},
    {SIP_MLNAME_CAST(sipName_filterAttributeSets), meth_QHelpEngineCore_filterAttributeSets, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_filterAttributeSets)},
    {SIP_MLNAME_CAST(sipName_filterAttributes), meth_QHelpEngineCore_filterAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_filterAttributes)},
    {SIP_MLNAME_CAST(sipName_findFile), meth_QHelpEngineCore_findFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_findFile)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QHelpEngineCore_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_linksForIdentifier), meth_QHelpEngineCore_linksForIdentifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_linksForIdentifier)},
    {SIP_MLNAME_CAST(sipName_metaData), meth_QHelpEngineCore_metaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_metaData)},
    {SIP_MLNAME_CAST(sipName_namespaceName), meth_QHelpEngineCore_namespaceName, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_namespaceName)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QHelpEngineCore_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_registerDocumentation), meth_QHelpEngineCore_registerDocumentation, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_registerDocumentation)},
    {SIP_MLNAME_CAST(sipName_registeredDocumentations), meth_QHelpEngineCore_registeredDocumentations, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_registeredDocumentations)},
    {SIP_MLNAME_CAST(sipName_removeCustomFilter), meth_QHelpEngineCore_removeCustomFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_removeCustomFilter)},
    {SIP_MLNAME_CAST(sipName_removeCustomValue), meth_QHelpEngineCore_removeCustomValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_removeCustomValue)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QHelpEngineCore_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QHelpEngineCore_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAutoSaveFilter), meth_QHelpEngineCore_setAutoSaveFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_setAutoSaveFilter)},
    {SIP_MLNAME_CAST(sipName_setCollectionFile), meth_QHelpEngineCore_setCollectionFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_setCollectionFile)},
    {SIP_MLNAME_CAST(sipName_setCurrentFilter), meth_QHelpEngineCore_setCurrentFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_setCurrentFilter)},
    {SIP_MLNAME_CAST(sipName_setCustomValue), meth_QHelpEngineCore_setCustomValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_setCustomValue)},
    {SIP_MLNAME_CAST(sipName_setupData), meth_QHelpEngineCore_setupData, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_setupData)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QHelpEngineCore_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_unregisterDocumentation), meth_QHelpEngineCore_unregisterDocumentation, METH_VARARGS, SIP_MLDOC_CAST(doc_QHelpEngineCore_unregisterDocumentation)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QHelpEngineCore[] = {
    {"readersAboutToBeInvalidated()", "\1QHelpEngineCore.readersAboutToBeInvalidated", 0, 0},
    {"warning(QString)", "\1QHelpEngineCore.warning[str]", 0, 0},
    {"currentFilterChanged(QString)", "\1QHelpEngineCore.currentFilterChanged[str]", 0, 0},
    {"setupFinished()", "\1QHelpEngineCore.setupFinished", 0, 0},
    {"setupStarted()", "\1QHelpEngineCore.setupStarted", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QHelpEngineCore, "\1QHelpEngineCore(str, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtHelp_QHelpEngineCore = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QHelpEngineCore,
        {0}
    },
    {
        sipNameNr_QHelpEngineCore,
        {0, 0, 1},
        36, methods_QHelpEngineCore,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QHelpEngineCore,
    -1,
    -1,
    supers_QHelpEngineCore,
    0,
    init_type_QHelpEngineCore,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHelpEngineCore,
    0,
    0,
    0,
    release_QHelpEngineCore,
    cast_QHelpEngineCore,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QHelpEngineCore::staticMetaObject,
    0,
    signals_QHelpEngineCore,
    0
};
