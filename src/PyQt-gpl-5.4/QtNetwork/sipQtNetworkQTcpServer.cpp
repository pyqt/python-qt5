/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:36 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qtcpserver.sip"
#include <qtcpserver.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qtcpsocket.sip"
#include <qtcpsocket.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 163 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"


class sipQTcpServer : public QTcpServer
{
public:
    sipQTcpServer(QObject*);
    virtual ~sipQTcpServer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_incomingConnection(bool,qintptr);
    void sipProtect_addPendingConnection(QTcpSocket*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void incomingConnection(qintptr);
    QTcpSocket* nextPendingConnection();
    bool hasPendingConnections() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTcpServer(const sipQTcpServer &);
    sipQTcpServer &operator = (const sipQTcpServer &);

    char sipPyMethods[10];
};

sipQTcpServer::sipQTcpServer(QObject*a0): QTcpServer(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTcpServer::~sipQTcpServer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTcpServer::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QTcpServer);
}

int sipQTcpServer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTcpServer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QTcpServer,_c,_id,_a);

    return _id;
}

void *sipQTcpServer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QTcpServer, _clname, &sipCpp) ? sipCpp : QTcpServer::qt_metacast(_clname));
}

void sipQTcpServer::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTcpServer::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTcpServer::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTcpServer::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTcpServer::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTcpServer::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTcpServer::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTcpServer::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTcpServer::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTcpServer::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTcpServer::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTcpServer::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQTcpServer::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTcpServer::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTcpServer::incomingConnection(qintptr a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_incomingConnection);

    if (!sipMeth)
    {
        QTcpServer::incomingConnection(a0);
        return;
    }

    extern void sipVH_QtNetwork_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, qintptr);

    sipVH_QtNetwork_0(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QTcpSocket* sipQTcpServer::nextPendingConnection()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_nextPendingConnection);

    if (!sipMeth)
        return QTcpServer::nextPendingConnection();

    extern QTcpSocket* sipVH_QtNetwork_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_1(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQTcpServer::hasPendingConnections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_hasPendingConnections);

    if (!sipMeth)
        return QTcpServer::hasPendingConnections();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQTcpServer::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQTcpServer::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQTcpServer::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQTcpServer::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQTcpServer::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQTcpServer::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQTcpServer::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQTcpServer::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQTcpServer::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQTcpServer::sipProtectVirt_incomingConnection(bool sipSelfWasArg,qintptr a0)
{
    (sipSelfWasArg ? QTcpServer::incomingConnection(a0) : incomingConnection(a0));
}

void sipQTcpServer::sipProtect_addPendingConnection(QTcpSocket*a0)
{
    QTcpServer::addPendingConnection(a0);
}


PyDoc_STRVAR(doc_QTcpServer_sender, "QTcpServer.sender() -> QObject");

extern "C" {static PyObject *meth_QTcpServer_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTcpServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 444 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_sender, doc_QTcpServer_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_receivers, "QTcpServer.receivers(signal) -> int");

extern "C" {static PyObject *meth_QTcpServer_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQTcpServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QTcpServer, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 503 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQTcpServer.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_receivers, doc_QTcpServer_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_timerEvent, "QTcpServer.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QTcpServer_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQTcpServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_timerEvent, doc_QTcpServer_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_childEvent, "QTcpServer.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QTcpServer_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQTcpServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_childEvent, doc_QTcpServer_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_customEvent, "QTcpServer.customEvent(QEvent)");

extern "C" {static PyObject *meth_QTcpServer_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTcpServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_customEvent, doc_QTcpServer_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_connectNotify, "QTcpServer.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTcpServer_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTcpServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_connectNotify, doc_QTcpServer_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_disconnectNotify, "QTcpServer.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTcpServer_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTcpServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_disconnectNotify, doc_QTcpServer_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_senderSignalIndex, "QTcpServer.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QTcpServer_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTcpServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_senderSignalIndex, doc_QTcpServer_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_isSignalConnected, "QTcpServer.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QTcpServer_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQTcpServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_isSignalConnected, doc_QTcpServer_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_listen, "QTcpServer.listen(QHostAddress address=QHostAddress.Any, int port=0) -> bool");

extern "C" {static PyObject *meth_QTcpServer_listen(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_listen(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress& a0def = QHostAddress::Any;
        const QHostAddress* a0 = &a0def;
        int a0State = 0;
        quint16 a1 = 0;
        QTcpServer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_address,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1t", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QHostAddress, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->listen(*a0,a1);
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_listen, doc_QTcpServer_listen);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_close, "QTcpServer.close()");

extern "C" {static PyObject *meth_QTcpServer_close(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            sipCpp->close();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_close, doc_QTcpServer_close);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_isListening, "QTcpServer.isListening() -> bool");

extern "C" {static PyObject *meth_QTcpServer_isListening(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_isListening(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isListening();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_isListening, doc_QTcpServer_isListening);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_setMaxPendingConnections, "QTcpServer.setMaxPendingConnections(int)");

extern "C" {static PyObject *meth_QTcpServer_setMaxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_setMaxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTcpServer, &sipCpp, &a0))
        {
            sipCpp->setMaxPendingConnections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_setMaxPendingConnections, doc_QTcpServer_setMaxPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_maxPendingConnections, "QTcpServer.maxPendingConnections() -> int");

extern "C" {static PyObject *meth_QTcpServer_maxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_maxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxPendingConnections();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_maxPendingConnections, doc_QTcpServer_maxPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_serverPort, "QTcpServer.serverPort() -> int");

extern "C" {static PyObject *meth_QTcpServer_serverPort(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_serverPort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            quint16 sipRes;

            sipRes = sipCpp->serverPort();

#if PY_MAJOR_VERSION >= 3
            return PyLong_FromUnsignedLong(sipRes);
#else
            return PyInt_FromLong(sipRes);
#endif
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_serverPort, doc_QTcpServer_serverPort);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_serverAddress, "QTcpServer.serverAddress() -> QHostAddress");

extern "C" {static PyObject *meth_QTcpServer_serverAddress(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_serverAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            QHostAddress*sipRes;

            sipRes = new QHostAddress(sipCpp->serverAddress());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_serverAddress, doc_QTcpServer_serverAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_socketDescriptor, "QTcpServer.socketDescriptor() -> sip.voidptr");

extern "C" {static PyObject *meth_QTcpServer_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            qintptr*sipRes;

            sipRes = new qintptr(sipCpp->socketDescriptor());

            return sipConvertFromNewType(sipRes,sipType_qintptr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_socketDescriptor, doc_QTcpServer_socketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_setSocketDescriptor, "QTcpServer.setSocketDescriptor(sip.voidptr) -> bool");

extern "C" {static PyObject *meth_QTcpServer_setSocketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qintptr* a0;
        int a0State = 0;
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_qintptr,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->setSocketDescriptor(*a0);
            sipReleaseType(a0,sipType_qintptr,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_setSocketDescriptor, doc_QTcpServer_setSocketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_waitForNewConnection, "QTcpServer.waitForNewConnection(int msecs=0) -> (bool, bool)");

extern "C" {static PyObject *meth_QTcpServer_waitForNewConnection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_waitForNewConnection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        bool a1;
        QTcpServer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QTcpServer, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForNewConnection(a0,&a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_waitForNewConnection, doc_QTcpServer_waitForNewConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_hasPendingConnections, "QTcpServer.hasPendingConnections() -> bool");

extern "C" {static PyObject *meth_QTcpServer_hasPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_hasPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTcpServer::hasPendingConnections() : sipCpp->hasPendingConnections());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_hasPendingConnections, doc_QTcpServer_hasPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_nextPendingConnection, "QTcpServer.nextPendingConnection() -> QTcpSocket");

extern "C" {static PyObject *meth_QTcpServer_nextPendingConnection(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_nextPendingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            QTcpSocket*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTcpServer::nextPendingConnection() : sipCpp->nextPendingConnection());

            return sipConvertFromType(sipRes,sipType_QTcpSocket,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_nextPendingConnection, doc_QTcpServer_nextPendingConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_serverError, "QTcpServer.serverError() -> QAbstractSocket.SocketError");

extern "C" {static PyObject *meth_QTcpServer_serverError(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_serverError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            QAbstractSocket::SocketError sipRes;

            sipRes = sipCpp->serverError();

            return sipConvertFromEnum(sipRes,sipType_QAbstractSocket_SocketError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_serverError, doc_QTcpServer_serverError);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_errorString, "QTcpServer.errorString() -> str");

extern "C" {static PyObject *meth_QTcpServer_errorString(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_errorString, doc_QTcpServer_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_setProxy, "QTcpServer.setProxy(QNetworkProxy)");

extern "C" {static PyObject *meth_QTcpServer_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkProxy* a0;
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            sipCpp->setProxy(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_setProxy, doc_QTcpServer_setProxy);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_proxy, "QTcpServer.proxy() -> QNetworkProxy");

extern "C" {static PyObject *meth_QTcpServer_proxy(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            QNetworkProxy*sipRes;

            sipRes = new QNetworkProxy(sipCpp->proxy());

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_proxy, doc_QTcpServer_proxy);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_pauseAccepting, "QTcpServer.pauseAccepting()");

extern "C" {static PyObject *meth_QTcpServer_pauseAccepting(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_pauseAccepting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            sipCpp->pauseAccepting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_pauseAccepting, doc_QTcpServer_pauseAccepting);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_resumeAccepting, "QTcpServer.resumeAccepting()");

extern "C" {static PyObject *meth_QTcpServer_resumeAccepting(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_resumeAccepting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTcpServer, &sipCpp))
        {
            sipCpp->resumeAccepting();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_resumeAccepting, doc_QTcpServer_resumeAccepting);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_incomingConnection, "QTcpServer.incomingConnection(sip.voidptr)");

extern "C" {static PyObject *meth_QTcpServer_incomingConnection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_incomingConnection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qintptr* a0;
        int a0State = 0;
        sipQTcpServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_qintptr,&a0, &a0State))
        {
            sipCpp->sipProtectVirt_incomingConnection(sipSelfWasArg,*a0);
            sipReleaseType(a0,sipType_qintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_incomingConnection, doc_QTcpServer_incomingConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QTcpServer_addPendingConnection, "QTcpServer.addPendingConnection(QTcpSocket)");

extern "C" {static PyObject *meth_QTcpServer_addPendingConnection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_addPendingConnection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTcpSocket* a0;
        sipQTcpServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTcpServer, &sipCpp, sipType_QTcpSocket, &a0))
        {
            sipCpp->sipProtect_addPendingConnection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTcpServer, sipName_addPendingConnection, doc_QTcpServer_addPendingConnection);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTcpServer(void *, const sipTypeDef *);}
static void *cast_QTcpServer(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTcpServer)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QTcpServer *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTcpServer(void *, int);}
static void release_QTcpServer(void *sipCppV,int)
{
    QTcpServer *sipCpp = reinterpret_cast<QTcpServer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTcpServer(sipSimpleWrapper *);}
static void dealloc_QTcpServer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTcpServer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTcpServer(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTcpServer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTcpServer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTcpServer *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQTcpServer(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTcpServer[] = {{162, 0, 1}};


static PyMethodDef methods_QTcpServer[] = {
    {SIP_MLNAME_CAST(sipName_addPendingConnection), (PyCFunction)meth_QTcpServer_addPendingConnection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTcpServer_addPendingConnection)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QTcpServer_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QTcpServer_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_close)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QTcpServer_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QTcpServer_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QTcpServer_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QTcpServer_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_errorString)},
    {SIP_MLNAME_CAST(sipName_hasPendingConnections), meth_QTcpServer_hasPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_hasPendingConnections)},
    {SIP_MLNAME_CAST(sipName_incomingConnection), (PyCFunction)meth_QTcpServer_incomingConnection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTcpServer_incomingConnection)},
    {SIP_MLNAME_CAST(sipName_isListening), meth_QTcpServer_isListening, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_isListening)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QTcpServer_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_listen), (PyCFunction)meth_QTcpServer_listen, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTcpServer_listen)},
    {SIP_MLNAME_CAST(sipName_maxPendingConnections), meth_QTcpServer_maxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_maxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_nextPendingConnection), meth_QTcpServer_nextPendingConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_nextPendingConnection)},
    {SIP_MLNAME_CAST(sipName_pauseAccepting), meth_QTcpServer_pauseAccepting, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_pauseAccepting)},
    {SIP_MLNAME_CAST(sipName_proxy), meth_QTcpServer_proxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_proxy)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QTcpServer_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_resumeAccepting), meth_QTcpServer_resumeAccepting, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_resumeAccepting)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QTcpServer_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QTcpServer_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_serverAddress), meth_QTcpServer_serverAddress, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_serverAddress)},
    {SIP_MLNAME_CAST(sipName_serverError), meth_QTcpServer_serverError, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_serverError)},
    {SIP_MLNAME_CAST(sipName_serverPort), meth_QTcpServer_serverPort, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_serverPort)},
    {SIP_MLNAME_CAST(sipName_setMaxPendingConnections), meth_QTcpServer_setMaxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_setMaxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QTcpServer_setProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_setProxy)},
    {SIP_MLNAME_CAST(sipName_setSocketDescriptor), meth_QTcpServer_setSocketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_setSocketDescriptor)},
    {SIP_MLNAME_CAST(sipName_socketDescriptor), meth_QTcpServer_socketDescriptor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTcpServer_socketDescriptor)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QTcpServer_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_waitForNewConnection), (PyCFunction)meth_QTcpServer_waitForNewConnection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTcpServer_waitForNewConnection)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTcpServer[] = {
    {"acceptError(QAbstractSocket::SocketError)", "\1QTcpServer.acceptError[QAbstractSocket.SocketError]", 0, 0},
    {"newConnection()", "\1QTcpServer.newConnection", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QTcpServer, "\1QTcpServer(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QTcpServer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTcpServer,
        {0}
    },
    {
        sipNameNr_QTcpServer,
        {0, 0, 1},
        29, methods_QTcpServer,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTcpServer,
    -1,
    -1,
    supers_QTcpServer,
    0,
    init_type_QTcpServer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTcpServer,
    0,
    0,
    0,
    release_QTcpServer,
    cast_QTcpServer,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTcpServer::staticMetaObject,
    0,
    signals_QTcpServer,
    0
};
