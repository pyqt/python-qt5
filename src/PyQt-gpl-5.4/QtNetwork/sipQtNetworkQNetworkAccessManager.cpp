/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:36 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 30 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 64 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 128 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qhttpmultipart.sip"
#include <qhttpmultipart.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkcookiejar.sip"
#include <qnetworkcookiejar.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"


class sipQNetworkAccessManager : public QNetworkAccessManager
{
public:
    sipQNetworkAccessManager(QObject*);
    virtual ~sipQNetworkAccessManager();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    QNetworkReply* sipProtectVirt_createRequest(bool,QNetworkAccessManager::Operation,const QNetworkRequest&,QIODevice*);
    QStringList sipProtect_supportedSchemesImplementation() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QNetworkReply* createRequest(QNetworkAccessManager::Operation,const QNetworkRequest&,QIODevice*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkAccessManager(const sipQNetworkAccessManager &);
    sipQNetworkAccessManager &operator = (const sipQNetworkAccessManager &);

    char sipPyMethods[8];
};

sipQNetworkAccessManager::sipQNetworkAccessManager(QObject*a0): QNetworkAccessManager(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkAccessManager::~sipQNetworkAccessManager()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQNetworkAccessManager::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkAccessManager);
}

int sipQNetworkAccessManager::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QNetworkAccessManager::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkAccessManager,_c,_id,_a);

    return _id;
}

void *sipQNetworkAccessManager::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkAccessManager, _clname, &sipCpp) ? sipCpp : QNetworkAccessManager::qt_metacast(_clname));
}

void sipQNetworkAccessManager::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QNetworkAccessManager::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QNetworkAccessManager::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QNetworkAccessManager::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QNetworkAccessManager::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNetworkAccessManager::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QNetworkAccessManager::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQNetworkAccessManager::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QNetworkAccessManager::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQNetworkAccessManager::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QNetworkAccessManager::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QNetworkReply* sipQNetworkAccessManager::createRequest(QNetworkAccessManager::Operation a0,const QNetworkRequest& a1,QIODevice*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_createRequest);

    if (!sipMeth)
        return QNetworkAccessManager::createRequest(a0,a1,a2);

    extern QNetworkReply* sipVH_QtNetwork_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QNetworkAccessManager::Operation,const QNetworkRequest&,QIODevice*);

    return sipVH_QtNetwork_21(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QObject* sipQNetworkAccessManager::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQNetworkAccessManager::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQNetworkAccessManager::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQNetworkAccessManager::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQNetworkAccessManager::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQNetworkAccessManager::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQNetworkAccessManager::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQNetworkAccessManager::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQNetworkAccessManager::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

QNetworkReply* sipQNetworkAccessManager::sipProtectVirt_createRequest(bool sipSelfWasArg,QNetworkAccessManager::Operation a0,const QNetworkRequest& a1,QIODevice*a2)
{
    return (sipSelfWasArg ? QNetworkAccessManager::createRequest(a0,a1,a2) : createRequest(a0,a1,a2));
}

QStringList sipQNetworkAccessManager::sipProtect_supportedSchemesImplementation() const
{
    return QNetworkAccessManager::supportedSchemesImplementation();
}


PyDoc_STRVAR(doc_QNetworkAccessManager_sender, "QNetworkAccessManager.sender() -> QObject");

extern "C" {static PyObject *meth_QNetworkAccessManager_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 436 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_sender, doc_QNetworkAccessManager_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_receivers, "QNetworkAccessManager.receivers(signal) -> int");

extern "C" {static PyObject *meth_QNetworkAccessManager_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 495 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkAccessManager.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_receivers, doc_QNetworkAccessManager_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_timerEvent, "QNetworkAccessManager.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QNetworkAccessManager_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_timerEvent, doc_QNetworkAccessManager_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_childEvent, "QNetworkAccessManager.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QNetworkAccessManager_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_childEvent, doc_QNetworkAccessManager_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_customEvent, "QNetworkAccessManager.customEvent(QEvent)");

extern "C" {static PyObject *meth_QNetworkAccessManager_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_customEvent, doc_QNetworkAccessManager_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_connectNotify, "QNetworkAccessManager.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QNetworkAccessManager_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_connectNotify, doc_QNetworkAccessManager_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_disconnectNotify, "QNetworkAccessManager.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QNetworkAccessManager_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_disconnectNotify, doc_QNetworkAccessManager_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_senderSignalIndex, "QNetworkAccessManager.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QNetworkAccessManager_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_senderSignalIndex, doc_QNetworkAccessManager_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_isSignalConnected, "QNetworkAccessManager.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QNetworkAccessManager_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_isSignalConnected, doc_QNetworkAccessManager_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_proxy, "QNetworkAccessManager.proxy() -> QNetworkProxy");

extern "C" {static PyObject *meth_QNetworkAccessManager_proxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkProxy*sipRes;

            sipRes = new QNetworkProxy(sipCpp->proxy());

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_proxy, doc_QNetworkAccessManager_proxy);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setProxy, "QNetworkAccessManager.setProxy(QNetworkProxy)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkProxy* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkProxy, &a0))
        {
            sipCpp->setProxy(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setProxy, doc_QNetworkAccessManager_setProxy);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_cookieJar, "QNetworkAccessManager.cookieJar() -> QNetworkCookieJar");

extern "C" {static PyObject *meth_QNetworkAccessManager_cookieJar(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_cookieJar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkCookieJar*sipRes;

            sipRes = sipCpp->cookieJar();

            return sipConvertFromType(sipRes,sipType_QNetworkCookieJar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_cookieJar, doc_QNetworkAccessManager_cookieJar);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setCookieJar, "QNetworkAccessManager.setCookieJar(QNetworkCookieJar)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setCookieJar(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setCookieJar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkCookieJar* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkCookieJar, &a0))
        {
            sipCpp->setCookieJar(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setCookieJar, doc_QNetworkAccessManager_setCookieJar);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_head, "QNetworkAccessManager.head(QNetworkRequest) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_head(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_head(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            QNetworkReply*sipRes;

            sipRes = sipCpp->head(*a0);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_head, doc_QNetworkAccessManager_head);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_get, "QNetworkAccessManager.get(QNetworkRequest) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_get(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            QNetworkReply*sipRes;

            sipRes = sipCpp->get(*a0);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_get, doc_QNetworkAccessManager_get);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_post, "QNetworkAccessManager.post(QNetworkRequest, QIODevice) -> QNetworkReply\n"
    "QNetworkAccessManager.post(QNetworkRequest, QByteArray) -> QNetworkReply\n"
    "QNetworkAccessManager.post(QNetworkRequest, QHttpMultiPart) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_post(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_post(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        QIODevice* a1;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QIODevice, &a1))
        {
            QNetworkReply*sipRes;

            sipRes = sipCpp->post(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const QNetworkRequest* a0;
        const QByteArray* a1;
        int a1State = 0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State))
        {
            QNetworkReply*sipRes;

            sipRes = sipCpp->post(*a0,*a1);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const QNetworkRequest* a0;
        QHttpMultiPart* a1;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QHttpMultiPart, &a1))
        {
            QNetworkReply*sipRes;

            sipRes = sipCpp->post(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_post, doc_QNetworkAccessManager_post);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_put, "QNetworkAccessManager.put(QNetworkRequest, QIODevice) -> QNetworkReply\n"
    "QNetworkAccessManager.put(QNetworkRequest, QByteArray) -> QNetworkReply\n"
    "QNetworkAccessManager.put(QNetworkRequest, QHttpMultiPart) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_put(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_put(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        QIODevice* a1;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QIODevice, &a1))
        {
            QNetworkReply*sipRes;

            sipRes = sipCpp->put(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const QNetworkRequest* a0;
        const QByteArray* a1;
        int a1State = 0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State))
        {
            QNetworkReply*sipRes;

            sipRes = sipCpp->put(*a0,*a1);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    {
        const QNetworkRequest* a0;
        QHttpMultiPart* a1;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QHttpMultiPart, &a1))
        {
            QNetworkReply*sipRes;

            sipRes = sipCpp->put(*a0,a1);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_put, doc_QNetworkAccessManager_put);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_createRequest, "QNetworkAccessManager.createRequest(QNetworkAccessManager.Operation, QNetworkRequest, QIODevice device=None) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_createRequest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_createRequest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkAccessManager::Operation a0;
        const QNetworkRequest* a1;
        QIODevice* a2 = 0;
        sipQNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_device,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ9|J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkAccessManager_Operation, &a0, sipType_QNetworkRequest, &a1, sipType_QIODevice, &a2))
        {
            QNetworkReply*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_createRequest(sipSelfWasArg,a0,*a1,a2);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_createRequest, doc_QNetworkAccessManager_createRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_proxyFactory, "QNetworkAccessManager.proxyFactory() -> QNetworkProxyFactory");

extern "C" {static PyObject *meth_QNetworkAccessManager_proxyFactory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_proxyFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkProxyFactory*sipRes;

            sipRes = sipCpp->proxyFactory();

            return sipConvertFromType(sipRes,sipType_QNetworkProxyFactory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_proxyFactory, doc_QNetworkAccessManager_proxyFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setProxyFactory, "QNetworkAccessManager.setProxyFactory(QNetworkProxyFactory)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setProxyFactory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setProxyFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkProxyFactory* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkProxyFactory, &a0))
        {
            sipCpp->setProxyFactory(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setProxyFactory, doc_QNetworkAccessManager_setProxyFactory);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_cache, "QNetworkAccessManager.cache() -> QAbstractNetworkCache");

extern "C" {static PyObject *meth_QNetworkAccessManager_cache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_cache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QAbstractNetworkCache*sipRes;

            sipRes = sipCpp->cache();

            return sipConvertFromType(sipRes,sipType_QAbstractNetworkCache,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_cache, doc_QNetworkAccessManager_cache);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setCache, "QNetworkAccessManager.setCache(QAbstractNetworkCache)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setCache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractNetworkCache* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QAbstractNetworkCache, &a0))
        {
            sipCpp->setCache(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setCache, doc_QNetworkAccessManager_setCache);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_deleteResource, "QNetworkAccessManager.deleteResource(QNetworkRequest) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_deleteResource(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_deleteResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            QNetworkReply*sipRes;

            sipRes = sipCpp->deleteResource(*a0);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_deleteResource, doc_QNetworkAccessManager_deleteResource);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_sendCustomRequest, "QNetworkAccessManager.sendCustomRequest(QNetworkRequest, QByteArray, QIODevice data=None) -> QNetworkReply");

extern "C" {static PyObject *meth_QNetworkAccessManager_sendCustomRequest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_sendCustomRequest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;
        const QByteArray* a1;
        int a1State = 0;
        QIODevice* a2 = 0;
        QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|J8", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkRequest, &a0, sipType_QByteArray, &a1, &a1State, sipType_QIODevice, &a2))
        {
            QNetworkReply*sipRes;

            sipRes = sipCpp->sendCustomRequest(*a0,*a1,a2);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromType(sipRes,sipType_QNetworkReply,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_sendCustomRequest, doc_QNetworkAccessManager_sendCustomRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setConfiguration, "QNetworkAccessManager.setConfiguration(QNetworkConfiguration)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkConfiguration* a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkConfiguration, &a0))
        {
            sipCpp->setConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setConfiguration, doc_QNetworkAccessManager_setConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_configuration, "QNetworkAccessManager.configuration() -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkAccessManager_configuration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_configuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkConfiguration*sipRes;

            sipRes = new QNetworkConfiguration(sipCpp->configuration());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_configuration, doc_QNetworkAccessManager_configuration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_activeConfiguration, "QNetworkAccessManager.activeConfiguration() -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkAccessManager_activeConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_activeConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkConfiguration*sipRes;

            sipRes = new QNetworkConfiguration(sipCpp->activeConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_activeConfiguration, doc_QNetworkAccessManager_activeConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_setNetworkAccessible, "QNetworkAccessManager.setNetworkAccessible(QNetworkAccessManager.NetworkAccessibility)");

extern "C" {static PyObject *meth_QNetworkAccessManager_setNetworkAccessible(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_setNetworkAccessible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager::NetworkAccessibility a0;
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QNetworkAccessManager_NetworkAccessibility, &a0))
        {
            sipCpp->setNetworkAccessible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_setNetworkAccessible, doc_QNetworkAccessManager_setNetworkAccessible);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_networkAccessible, "QNetworkAccessManager.networkAccessible() -> QNetworkAccessManager.NetworkAccessibility");

extern "C" {static PyObject *meth_QNetworkAccessManager_networkAccessible(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_networkAccessible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QNetworkAccessManager::NetworkAccessibility sipRes;

            sipRes = sipCpp->networkAccessible();

            return sipConvertFromEnum(sipRes,sipType_QNetworkAccessManager_NetworkAccessibility);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_networkAccessible, doc_QNetworkAccessManager_networkAccessible);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_clearAccessCache, "QNetworkAccessManager.clearAccessCache()");

extern "C" {static PyObject *meth_QNetworkAccessManager_clearAccessCache(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_clearAccessCache(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            sipCpp->clearAccessCache();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_clearAccessCache, doc_QNetworkAccessManager_clearAccessCache);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_supportedSchemes, "QNetworkAccessManager.supportedSchemes() -> list-of-str");

extern "C" {static PyObject *meth_QNetworkAccessManager_supportedSchemes(PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_supportedSchemes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkAccessManager *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->supportedSchemes());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_supportedSchemes, doc_QNetworkAccessManager_supportedSchemes);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_connectToHostEncrypted, "QNetworkAccessManager.connectToHostEncrypted(str, int port=443, QSslConfiguration sslConfiguration=QSslConfiguration.defaultConfiguration())");

extern "C" {static PyObject *meth_QNetworkAccessManager_connectToHostEncrypted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_connectToHostEncrypted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        quint16 a1 = 443;
        const QSslConfiguration& a2def = QSslConfiguration::defaultConfiguration();
        const QSslConfiguration* a2 = &a2def;
        QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_port,
            sipName_sslConfiguration,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|tJ9", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QSslConfiguration, &a2))
        {
            sipCpp->connectToHostEncrypted(*a0,a1,*a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_connectToHostEncrypted, doc_QNetworkAccessManager_connectToHostEncrypted);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_connectToHost, "QNetworkAccessManager.connectToHost(str, int port=80)");

extern "C" {static PyObject *meth_QNetworkAccessManager_connectToHost(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_connectToHost(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        quint16 a1 = 80;
        QNetworkAccessManager *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_port,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|t", &sipSelf, sipType_QNetworkAccessManager, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp->connectToHost(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_connectToHost, doc_QNetworkAccessManager_connectToHost);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkAccessManager_supportedSchemesImplementation, "QNetworkAccessManager.supportedSchemesImplementation() -> list-of-str");

extern "C" {static PyObject *meth_QNetworkAccessManager_supportedSchemesImplementation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkAccessManager_supportedSchemesImplementation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQNetworkAccessManager *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QNetworkAccessManager, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->sipProtect_supportedSchemesImplementation());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkAccessManager, sipName_supportedSchemesImplementation, doc_QNetworkAccessManager_supportedSchemesImplementation);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QNetworkAccessManager(void *, const sipTypeDef *);}
static void *cast_QNetworkAccessManager(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QNetworkAccessManager)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QNetworkAccessManager *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkAccessManager(void *, int);}
static void release_QNetworkAccessManager(void *sipCppV,int)
{
    QNetworkAccessManager *sipCpp = reinterpret_cast<QNetworkAccessManager *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QNetworkAccessManager(sipSimpleWrapper *);}
static void dealloc_QNetworkAccessManager(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQNetworkAccessManager *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QNetworkAccessManager(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QNetworkAccessManager(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkAccessManager(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkAccessManager *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNetworkAccessManager(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkAccessManager[] = {{162, 0, 1}};


static PyMethodDef methods_QNetworkAccessManager[] = {
    {SIP_MLNAME_CAST(sipName_activeConfiguration), meth_QNetworkAccessManager_activeConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_activeConfiguration)},
    {SIP_MLNAME_CAST(sipName_cache), meth_QNetworkAccessManager_cache, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_cache)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QNetworkAccessManager_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clearAccessCache), meth_QNetworkAccessManager_clearAccessCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_clearAccessCache)},
    {SIP_MLNAME_CAST(sipName_configuration), meth_QNetworkAccessManager_configuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_configuration)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QNetworkAccessManager_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectToHost), (PyCFunction)meth_QNetworkAccessManager_connectToHost, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_connectToHost)},
    {SIP_MLNAME_CAST(sipName_connectToHostEncrypted), (PyCFunction)meth_QNetworkAccessManager_connectToHostEncrypted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_connectToHostEncrypted)},
    {SIP_MLNAME_CAST(sipName_cookieJar), meth_QNetworkAccessManager_cookieJar, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_cookieJar)},
    {SIP_MLNAME_CAST(sipName_createRequest), (PyCFunction)meth_QNetworkAccessManager_createRequest, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_createRequest)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QNetworkAccessManager_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_deleteResource), meth_QNetworkAccessManager_deleteResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_deleteResource)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QNetworkAccessManager_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_get), meth_QNetworkAccessManager_get, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_get)},
    {SIP_MLNAME_CAST(sipName_head), meth_QNetworkAccessManager_head, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_head)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QNetworkAccessManager_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_networkAccessible), meth_QNetworkAccessManager_networkAccessible, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_networkAccessible)},
    {SIP_MLNAME_CAST(sipName_post), meth_QNetworkAccessManager_post, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_post)},
    {SIP_MLNAME_CAST(sipName_proxy), meth_QNetworkAccessManager_proxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_proxy)},
    {SIP_MLNAME_CAST(sipName_proxyFactory), meth_QNetworkAccessManager_proxyFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_proxyFactory)},
    {SIP_MLNAME_CAST(sipName_put), meth_QNetworkAccessManager_put, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_put)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QNetworkAccessManager_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sendCustomRequest), (PyCFunction)meth_QNetworkAccessManager_sendCustomRequest, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_sendCustomRequest)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QNetworkAccessManager_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QNetworkAccessManager_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setCache), meth_QNetworkAccessManager_setCache, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setCache)},
    {SIP_MLNAME_CAST(sipName_setConfiguration), meth_QNetworkAccessManager_setConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setConfiguration)},
    {SIP_MLNAME_CAST(sipName_setCookieJar), meth_QNetworkAccessManager_setCookieJar, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setCookieJar)},
    {SIP_MLNAME_CAST(sipName_setNetworkAccessible), meth_QNetworkAccessManager_setNetworkAccessible, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setNetworkAccessible)},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QNetworkAccessManager_setProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setProxy)},
    {SIP_MLNAME_CAST(sipName_setProxyFactory), meth_QNetworkAccessManager_setProxyFactory, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_setProxyFactory)},
    {SIP_MLNAME_CAST(sipName_supportedSchemes), meth_QNetworkAccessManager_supportedSchemes, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_supportedSchemes)},
    {SIP_MLNAME_CAST(sipName_supportedSchemesImplementation), (PyCFunction)meth_QNetworkAccessManager_supportedSchemesImplementation, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkAccessManager_supportedSchemesImplementation)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QNetworkAccessManager_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QNetworkAccessManager[] = {
    {sipName_Accessible, static_cast<int>(QNetworkAccessManager::Accessible), 52},
    {sipName_CustomOperation, static_cast<int>(QNetworkAccessManager::CustomOperation), 53},
    {sipName_DeleteOperation, static_cast<int>(QNetworkAccessManager::DeleteOperation), 53},
    {sipName_GetOperation, static_cast<int>(QNetworkAccessManager::GetOperation), 53},
    {sipName_HeadOperation, static_cast<int>(QNetworkAccessManager::HeadOperation), 53},
    {sipName_NotAccessible, static_cast<int>(QNetworkAccessManager::NotAccessible), 52},
    {sipName_PostOperation, static_cast<int>(QNetworkAccessManager::PostOperation), 53},
    {sipName_PutOperation, static_cast<int>(QNetworkAccessManager::PutOperation), 53},
    {sipName_UnknownAccessibility, static_cast<int>(QNetworkAccessManager::UnknownAccessibility), 52},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QNetworkAccessManager[] = {
    {"networkAccessibleChanged(QNetworkAccessManager::NetworkAccessibility)", "\1QNetworkAccessManager.networkAccessibleChanged[QNetworkAccessManager.NetworkAccessibility]", 0, 0},
    {"sslErrors(QNetworkReply*,QList<QSslError>)", "\1QNetworkAccessManager.sslErrors[QNetworkReply, list-of-QSslError]", 0, 0},
    {"encrypted(QNetworkReply*)", "\1QNetworkAccessManager.encrypted[QNetworkReply]", 0, 0},
    {"finished(QNetworkReply*)", "\1QNetworkAccessManager.finished[QNetworkReply]", 0, 0},
    {"authenticationRequired(QNetworkReply*,QAuthenticator*)", "\1QNetworkAccessManager.authenticationRequired[QNetworkReply, QAuthenticator]", 0, 0},
    {"proxyAuthenticationRequired(QNetworkProxy,QAuthenticator*)", "\1QNetworkAccessManager.proxyAuthenticationRequired[QNetworkProxy, QAuthenticator]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QNetworkAccessManager, "\1QNetworkAccessManager(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QNetworkAccessManager = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QNetworkAccessManager,
        {0}
    },
    {
        sipNameNr_QNetworkAccessManager,
        {0, 0, 1},
        34, methods_QNetworkAccessManager,
        9, enummembers_QNetworkAccessManager,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNetworkAccessManager,
    -1,
    -1,
    supers_QNetworkAccessManager,
    0,
    init_type_QNetworkAccessManager,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNetworkAccessManager,
    0,
    0,
    0,
    release_QNetworkAccessManager,
    cast_QNetworkAccessManager,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QNetworkAccessManager::staticMetaObject,
    0,
    signals_QNetworkAccessManager,
    0
};
