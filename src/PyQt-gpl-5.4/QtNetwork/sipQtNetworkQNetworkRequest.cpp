/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:36 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkRequest.cpp"

#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkRequest.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkRequest.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkRequest.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkRequest.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkRequest.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkRequest.cpp"


PyDoc_STRVAR(doc_QNetworkRequest_url, "QNetworkRequest.url() -> QUrl");

extern "C" {static PyObject *meth_QNetworkRequest_url(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_url, doc_QNetworkRequest_url);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_setUrl, "QNetworkRequest.setUrl(QUrl)");

extern "C" {static PyObject *meth_QNetworkRequest_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setUrl, doc_QNetworkRequest_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_header, "QNetworkRequest.header(QNetworkRequest.KnownHeaders) -> QVariant");

extern "C" {static PyObject *meth_QNetworkRequest_header(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_header(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::KnownHeaders a0;
        const QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->header(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_header, doc_QNetworkRequest_header);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_setHeader, "QNetworkRequest.setHeader(QNetworkRequest.KnownHeaders, QVariant)");

extern "C" {static PyObject *meth_QNetworkRequest_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::KnownHeaders a0;
        const QVariant* a1;
        int a1State = 0;
        QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_KnownHeaders, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setHeader(a0,*a1);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setHeader, doc_QNetworkRequest_setHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_hasRawHeader, "QNetworkRequest.hasRawHeader(QByteArray) -> bool");

extern "C" {static PyObject *meth_QNetworkRequest_hasRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_hasRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasRawHeader(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_hasRawHeader, doc_QNetworkRequest_hasRawHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_rawHeaderList, "QNetworkRequest.rawHeaderList() -> list-of-QByteArray");

extern "C" {static PyObject *meth_QNetworkRequest_rawHeaderList(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_rawHeaderList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
            QList<QByteArray>*sipRes;

            sipRes = new QList<QByteArray>(sipCpp->rawHeaderList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_rawHeaderList, doc_QNetworkRequest_rawHeaderList);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_rawHeader, "QNetworkRequest.rawHeader(QByteArray) -> QByteArray");

extern "C" {static PyObject *meth_QNetworkRequest_rawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_rawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->rawHeader(*a0));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_rawHeader, doc_QNetworkRequest_rawHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_setRawHeader, "QNetworkRequest.setRawHeader(QByteArray, QByteArray)");

extern "C" {static PyObject *meth_QNetworkRequest_setRawHeader(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setRawHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QByteArray* a1;
        int a1State = 0;
        QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QByteArray, &a1, &a1State))
        {
            sipCpp->setRawHeader(*a0,*a1);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setRawHeader, doc_QNetworkRequest_setRawHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_attribute, "QNetworkRequest.attribute(QNetworkRequest.Attribute, QVariant defaultValue=None) -> QVariant");

extern "C" {static PyObject *meth_QNetworkRequest_attribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_attribute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::Attribute a0;
        const QVariant& a1def = QVariant();
        const QVariant* a1 = &a1def;
        int a1State = 0;
        const QNetworkRequest *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_Attribute, &a0, sipType_QVariant, &a1, &a1State))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->attribute(a0,*a1));
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_attribute, doc_QNetworkRequest_attribute);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_setAttribute, "QNetworkRequest.setAttribute(QNetworkRequest.Attribute, QVariant)");

extern "C" {static PyObject *meth_QNetworkRequest_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::Attribute a0;
        const QVariant* a1;
        int a1State = 0;
        QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_Attribute, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setAttribute(a0,*a1);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setAttribute, doc_QNetworkRequest_setAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_sslConfiguration, "QNetworkRequest.sslConfiguration() -> QSslConfiguration");

extern "C" {static PyObject *meth_QNetworkRequest_sslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_sslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
            QSslConfiguration*sipRes;

            sipRes = new QSslConfiguration(sipCpp->sslConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_sslConfiguration, doc_QNetworkRequest_sslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_setSslConfiguration, "QNetworkRequest.setSslConfiguration(QSslConfiguration)");

extern "C" {static PyObject *meth_QNetworkRequest_setSslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setSslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration* a0;
        QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            sipCpp->setSslConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setSslConfiguration, doc_QNetworkRequest_setSslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_setOriginatingObject, "QNetworkRequest.setOriginatingObject(QObject)");

extern "C" {static PyObject *meth_QNetworkRequest_setOriginatingObject(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setOriginatingObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        PyObject *a0Keep;
        QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QNetworkRequest, &sipCpp, &a0Keep, sipType_QObject, &a0))
        {
            sipCpp->setOriginatingObject(a0);

            sipKeepReference(sipSelf, -2, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setOriginatingObject, doc_QNetworkRequest_setOriginatingObject);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_originatingObject, "QNetworkRequest.originatingObject() -> QObject");

extern "C" {static PyObject *meth_QNetworkRequest_originatingObject(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_originatingObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
            QObject*sipRes;

            sipRes = sipCpp->originatingObject();

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_originatingObject, doc_QNetworkRequest_originatingObject);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_priority, "QNetworkRequest.priority() -> QNetworkRequest.Priority");

extern "C" {static PyObject *meth_QNetworkRequest_priority(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_priority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkRequest, &sipCpp))
        {
            QNetworkRequest::Priority sipRes;

            sipRes = sipCpp->priority();

            return sipConvertFromEnum(sipRes,sipType_QNetworkRequest_Priority);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_priority, doc_QNetworkRequest_priority);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_setPriority, "QNetworkRequest.setPriority(QNetworkRequest.Priority)");

extern "C" {static PyObject *meth_QNetworkRequest_setPriority(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_setPriority(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest::Priority a0;
        QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest_Priority, &a0))
        {
            sipCpp->setPriority(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_setPriority, doc_QNetworkRequest_setPriority);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkRequest_swap, "QNetworkRequest.swap(QNetworkRequest)");

extern "C" {static PyObject *meth_QNetworkRequest_swap(PyObject *, PyObject *);}
static PyObject *meth_QNetworkRequest_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkRequest* a0;
        QNetworkRequest *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkRequest, &sipCpp, sipType_QNetworkRequest, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkRequest, sipName_swap, doc_QNetworkRequest_swap);

    return NULL;
}


extern "C" {static PyObject *slot_QNetworkRequest___ne__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkRequest___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QNetworkRequest *sipCpp = reinterpret_cast<QNetworkRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkRequest));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QNetworkRequest::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,ne_slot,sipType_QNetworkRequest,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QNetworkRequest___eq__(PyObject *,PyObject *);}
static PyObject *slot_QNetworkRequest___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QNetworkRequest *sipCpp = reinterpret_cast<QNetworkRequest *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QNetworkRequest));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QNetworkRequest* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QNetworkRequest, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QNetworkRequest::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,eq_slot,sipType_QNetworkRequest,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QNetworkRequest(void *, const sipTypeDef *);}
static void *cast_QNetworkRequest(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QNetworkRequest)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkRequest(void *, int);}
static void release_QNetworkRequest(void *sipCppV,int)
{
    delete reinterpret_cast<QNetworkRequest *>(sipCppV);
}


extern "C" {static void assign_QNetworkRequest(void *, SIP_SSIZE_T, const void *);}
static void assign_QNetworkRequest(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QNetworkRequest *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QNetworkRequest *>(sipSrc);
}


extern "C" {static void *array_QNetworkRequest(SIP_SSIZE_T);}
static void *array_QNetworkRequest(SIP_SSIZE_T sipNrElem)
{
    return new QNetworkRequest[sipNrElem];
}


extern "C" {static void *copy_QNetworkRequest(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkRequest(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QNetworkRequest(reinterpret_cast<const QNetworkRequest *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkRequest(sipSimpleWrapper *);}
static void dealloc_QNetworkRequest(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QNetworkRequest(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QNetworkRequest(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkRequest(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QNetworkRequest *sipCpp = 0;

    {
        const QUrl& a0def = QUrl();
        const QUrl* a0 = &a0def;

        static const char *sipKwdList[] = {
            sipName_url,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J9", sipType_QUrl, &a0))
        {
            sipCpp = new QNetworkRequest(*a0);

            return sipCpp;
        }
    }

    {
        const QNetworkRequest* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QNetworkRequest, &a0))
        {
            sipCpp = new QNetworkRequest(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QNetworkRequest[] = {
    {(void *)slot_QNetworkRequest___ne__, ne_slot},
    {(void *)slot_QNetworkRequest___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QNetworkRequest[] = {
    {SIP_MLNAME_CAST(sipName_attribute), (PyCFunction)meth_QNetworkRequest_attribute, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkRequest_attribute)},
    {SIP_MLNAME_CAST(sipName_hasRawHeader), meth_QNetworkRequest_hasRawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_hasRawHeader)},
    {SIP_MLNAME_CAST(sipName_header), meth_QNetworkRequest_header, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_header)},
    {SIP_MLNAME_CAST(sipName_originatingObject), meth_QNetworkRequest_originatingObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_originatingObject)},
    {SIP_MLNAME_CAST(sipName_priority), meth_QNetworkRequest_priority, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_priority)},
    {SIP_MLNAME_CAST(sipName_rawHeader), meth_QNetworkRequest_rawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_rawHeader)},
    {SIP_MLNAME_CAST(sipName_rawHeaderList), meth_QNetworkRequest_rawHeaderList, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_rawHeaderList)},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QNetworkRequest_setAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setAttribute)},
    {SIP_MLNAME_CAST(sipName_setHeader), meth_QNetworkRequest_setHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setHeader)},
    {SIP_MLNAME_CAST(sipName_setOriginatingObject), meth_QNetworkRequest_setOriginatingObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setOriginatingObject)},
    {SIP_MLNAME_CAST(sipName_setPriority), meth_QNetworkRequest_setPriority, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setPriority)},
    {SIP_MLNAME_CAST(sipName_setRawHeader), meth_QNetworkRequest_setRawHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setRawHeader)},
    {SIP_MLNAME_CAST(sipName_setSslConfiguration), meth_QNetworkRequest_setSslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setSslConfiguration)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QNetworkRequest_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_setUrl)},
    {SIP_MLNAME_CAST(sipName_sslConfiguration), meth_QNetworkRequest_sslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_sslConfiguration)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QNetworkRequest_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_swap)},
    {SIP_MLNAME_CAST(sipName_url), meth_QNetworkRequest_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkRequest_url)}
};

static sipEnumMemberDef enummembers_QNetworkRequest[] = {
    {sipName_AlwaysCache, static_cast<int>(QNetworkRequest::AlwaysCache), 83},
    {sipName_AlwaysNetwork, static_cast<int>(QNetworkRequest::AlwaysNetwork), 83},
    {sipName_AuthenticationReuseAttribute, static_cast<int>(QNetworkRequest::AuthenticationReuseAttribute), 82},
    {sipName_Automatic, static_cast<int>(QNetworkRequest::Automatic), 85},
    {sipName_BackgroundRequestAttribute, static_cast<int>(QNetworkRequest::BackgroundRequestAttribute), 82},
    {sipName_CacheLoadControlAttribute, static_cast<int>(QNetworkRequest::CacheLoadControlAttribute), 82},
    {sipName_CacheSaveControlAttribute, static_cast<int>(QNetworkRequest::CacheSaveControlAttribute), 82},
    {sipName_ConnectionEncryptedAttribute, static_cast<int>(QNetworkRequest::ConnectionEncryptedAttribute), 82},
    {sipName_ContentDispositionHeader, static_cast<int>(QNetworkRequest::ContentDispositionHeader), 84},
    {sipName_ContentLengthHeader, static_cast<int>(QNetworkRequest::ContentLengthHeader), 84},
    {sipName_ContentTypeHeader, static_cast<int>(QNetworkRequest::ContentTypeHeader), 84},
    {sipName_CookieHeader, static_cast<int>(QNetworkRequest::CookieHeader), 84},
    {sipName_CookieLoadControlAttribute, static_cast<int>(QNetworkRequest::CookieLoadControlAttribute), 82},
    {sipName_CookieSaveControlAttribute, static_cast<int>(QNetworkRequest::CookieSaveControlAttribute), 82},
    {sipName_CustomVerbAttribute, static_cast<int>(QNetworkRequest::CustomVerbAttribute), 82},
    {sipName_DoNotBufferUploadDataAttribute, static_cast<int>(QNetworkRequest::DoNotBufferUploadDataAttribute), 82},
    {sipName_HighPriority, static_cast<int>(QNetworkRequest::HighPriority), 86},
    {sipName_HttpPipeliningAllowedAttribute, static_cast<int>(QNetworkRequest::HttpPipeliningAllowedAttribute), 82},
    {sipName_HttpPipeliningWasUsedAttribute, static_cast<int>(QNetworkRequest::HttpPipeliningWasUsedAttribute), 82},
    {sipName_HttpReasonPhraseAttribute, static_cast<int>(QNetworkRequest::HttpReasonPhraseAttribute), 82},
    {sipName_HttpStatusCodeAttribute, static_cast<int>(QNetworkRequest::HttpStatusCodeAttribute), 82},
    {sipName_LastModifiedHeader, static_cast<int>(QNetworkRequest::LastModifiedHeader), 84},
    {sipName_LocationHeader, static_cast<int>(QNetworkRequest::LocationHeader), 84},
    {sipName_LowPriority, static_cast<int>(QNetworkRequest::LowPriority), 86},
    {sipName_Manual, static_cast<int>(QNetworkRequest::Manual), 85},
    {sipName_NormalPriority, static_cast<int>(QNetworkRequest::NormalPriority), 86},
    {sipName_PreferCache, static_cast<int>(QNetworkRequest::PreferCache), 83},
    {sipName_PreferNetwork, static_cast<int>(QNetworkRequest::PreferNetwork), 83},
    {sipName_RedirectionTargetAttribute, static_cast<int>(QNetworkRequest::RedirectionTargetAttribute), 82},
    {sipName_ServerHeader, static_cast<int>(QNetworkRequest::ServerHeader), 84},
    {sipName_SetCookieHeader, static_cast<int>(QNetworkRequest::SetCookieHeader), 84},
    {sipName_SourceIsFromCacheAttribute, static_cast<int>(QNetworkRequest::SourceIsFromCacheAttribute), 82},
    {sipName_SpdyAllowedAttribute, static_cast<int>(QNetworkRequest::SpdyAllowedAttribute), 82},
    {sipName_SpdyWasUsedAttribute, static_cast<int>(QNetworkRequest::SpdyWasUsedAttribute), 82},
    {sipName_User, static_cast<int>(QNetworkRequest::User), 82},
    {sipName_UserAgentHeader, static_cast<int>(QNetworkRequest::UserAgentHeader), 84},
    {sipName_UserMax, static_cast<int>(QNetworkRequest::UserMax), 82},
};

PyDoc_STRVAR(doc_QNetworkRequest, "\1QNetworkRequest(QUrl url=QUrl())\n"
    "QNetworkRequest(QNetworkRequest)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QNetworkRequest = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QNetworkRequest,
        {0}
    },
    {
        sipNameNr_QNetworkRequest,
        {0, 0, 1},
        17, methods_QNetworkRequest,
        37, enummembers_QNetworkRequest,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNetworkRequest,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QNetworkRequest,
    init_type_QNetworkRequest,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNetworkRequest,
    assign_QNetworkRequest,
    array_QNetworkRequest,
    copy_QNetworkRequest,
    release_QNetworkRequest,
    cast_QNetworkRequest,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
