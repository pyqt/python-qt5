/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:36 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslcertificate.sip"
#include <qsslcertificate.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"

#line 30 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qssl.sip"
#include <qssl.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslkey.sip"
#include <qsslkey.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslcertificateextension.sip"
#include <qsslcertificateextension.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 299 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qpynetwork_qmap.sip"
#include <qmap.h>
#include <qssl.h>
#line 73 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 76 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"
#line 26 "sip/QtCore/qcryptographichash.sip"
#include <qcryptographichash.h>
#line 79 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"


PyDoc_STRVAR(doc_QSslCertificate_isNull, "QSslCertificate.isNull() -> bool");

extern "C" {static PyObject *meth_QSslCertificate_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_isNull, doc_QSslCertificate_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_clear, "QSslCertificate.clear()");

extern "C" {static PyObject *meth_QSslCertificate_clear(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_clear, doc_QSslCertificate_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_version, "QSslCertificate.version() -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_version(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_version(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->version());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_version, doc_QSslCertificate_version);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_serialNumber, "QSslCertificate.serialNumber() -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_serialNumber(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_serialNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->serialNumber());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_serialNumber, doc_QSslCertificate_serialNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_digest, "QSslCertificate.digest(QCryptographicHash.Algorithm algorithm=QCryptographicHash.Md5) -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_digest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_digest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QCryptographicHash::Algorithm a0 = QCryptographicHash::Md5;
        const QSslCertificate *sipCpp;

        static const char *sipKwdList[] = {
            sipName_algorithm,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QCryptographicHash_Algorithm, &a0))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->digest(a0));

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_digest, doc_QSslCertificate_digest);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_issuerInfo, "QSslCertificate.issuerInfo(QSslCertificate.SubjectInfo) -> list-of-str\n"
    "QSslCertificate.issuerInfo(QByteArray) -> list-of-str");

extern "C" {static PyObject *meth_QSslCertificate_issuerInfo(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_issuerInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslCertificate::SubjectInfo a0;
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QSslCertificate_SubjectInfo, &a0))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->issuerInfo(a0));

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->issuerInfo(*a0));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_issuerInfo, doc_QSslCertificate_issuerInfo);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_subjectInfo, "QSslCertificate.subjectInfo(QSslCertificate.SubjectInfo) -> list-of-str\n"
    "QSslCertificate.subjectInfo(QByteArray) -> list-of-str");

extern "C" {static PyObject *meth_QSslCertificate_subjectInfo(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_subjectInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslCertificate::SubjectInfo a0;
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QSslCertificate_SubjectInfo, &a0))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->subjectInfo(a0));

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->subjectInfo(*a0));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_subjectInfo, doc_QSslCertificate_subjectInfo);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_subjectAlternativeNames, "QSslCertificate.subjectAlternativeNames() -> dict-of-QSsl.AlternativeNameEntryType-list-of-str");

extern "C" {static PyObject *meth_QSslCertificate_subjectAlternativeNames(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_subjectAlternativeNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QMultiMap<QSsl::AlternativeNameEntryType,QString>*sipRes;

            sipRes = new QMultiMap<QSsl::AlternativeNameEntryType,QString>(sipCpp->subjectAlternativeNames());

            return sipConvertFromNewType(sipRes,sipType_QMultiMap_0100QSsl_AlternativeNameEntryType_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_subjectAlternativeNames, doc_QSslCertificate_subjectAlternativeNames);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_effectiveDate, "QSslCertificate.effectiveDate() -> QDateTime");

extern "C" {static PyObject *meth_QSslCertificate_effectiveDate(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_effectiveDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QDateTime*sipRes;

            sipRes = new QDateTime(sipCpp->effectiveDate());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_effectiveDate, doc_QSslCertificate_effectiveDate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_expiryDate, "QSslCertificate.expiryDate() -> QDateTime");

extern "C" {static PyObject *meth_QSslCertificate_expiryDate(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_expiryDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QDateTime*sipRes;

            sipRes = new QDateTime(sipCpp->expiryDate());

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_expiryDate, doc_QSslCertificate_expiryDate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_publicKey, "QSslCertificate.publicKey() -> QSslKey");

extern "C" {static PyObject *meth_QSslCertificate_publicKey(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_publicKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QSslKey*sipRes;

            sipRes = new QSslKey(sipCpp->publicKey());

            return sipConvertFromNewType(sipRes,sipType_QSslKey,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_publicKey, doc_QSslCertificate_publicKey);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_toPem, "QSslCertificate.toPem() -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_toPem(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_toPem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->toPem());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_toPem, doc_QSslCertificate_toPem);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_toDer, "QSslCertificate.toDer() -> QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_toDer(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_toDer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->toDer());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_toDer, doc_QSslCertificate_toDer);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_fromPath, "QSslCertificate.fromPath(str, QSsl.EncodingFormat format=QSsl.Pem, QRegExp.PatternSyntax syntax=QRegExp.FixedString) -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslCertificate_fromPath(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_fromPath(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSsl::EncodingFormat a1 = QSsl::Pem;
        QRegExp::PatternSyntax a2 = QRegExp::FixedString;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_syntax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|EE", sipType_QString,&a0, &a0State, sipType_QSsl_EncodingFormat, &a1, sipType_QRegExp_PatternSyntax, &a2))
        {
            QList<QSslCertificate>*sipRes;

            sipRes = new QList<QSslCertificate>(QSslCertificate::fromPath(*a0,a1,a2));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_fromPath, doc_QSslCertificate_fromPath);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_fromDevice, "QSslCertificate.fromDevice(QIODevice, QSsl.EncodingFormat format=QSsl.Pem) -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslCertificate_fromDevice(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_fromDevice(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice* a0;
        QSsl::EncodingFormat a1 = QSsl::Pem;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8|E", sipType_QIODevice, &a0, sipType_QSsl_EncodingFormat, &a1))
        {
            QList<QSslCertificate>*sipRes;

            sipRes = new QList<QSslCertificate>(QSslCertificate::fromDevice(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_fromDevice, doc_QSslCertificate_fromDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_fromData, "QSslCertificate.fromData(QByteArray, QSsl.EncodingFormat format=QSsl.Pem) -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslCertificate_fromData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_fromData(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QSsl::EncodingFormat a1 = QSsl::Pem;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|E", sipType_QByteArray, &a0, &a0State, sipType_QSsl_EncodingFormat, &a1))
        {
            QList<QSslCertificate>*sipRes;

            sipRes = new QList<QSslCertificate>(QSslCertificate::fromData(*a0,a1));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_fromData, doc_QSslCertificate_fromData);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_handle, "QSslCertificate.handle() -> sip.voidptr");

extern "C" {static PyObject *meth_QSslCertificate_handle(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            Qt::HANDLE sipRes;

            sipRes = sipCpp->handle();

            return sipConvertFromVoidPtr((void *)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_handle, doc_QSslCertificate_handle);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_swap, "QSslCertificate.swap(QSslCertificate)");

extern "C" {static PyObject *meth_QSslCertificate_swap(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslCertificate* a0;
        QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslCertificate, &sipCpp, sipType_QSslCertificate, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_swap, doc_QSslCertificate_swap);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_isBlacklisted, "QSslCertificate.isBlacklisted() -> bool");

extern "C" {static PyObject *meth_QSslCertificate_isBlacklisted(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_isBlacklisted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBlacklisted();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_isBlacklisted, doc_QSslCertificate_isBlacklisted);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_subjectInfoAttributes, "QSslCertificate.subjectInfoAttributes() -> list-of-QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_subjectInfoAttributes(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_subjectInfoAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QList<QByteArray>*sipRes;

            sipRes = new QList<QByteArray>(sipCpp->subjectInfoAttributes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_subjectInfoAttributes, doc_QSslCertificate_subjectInfoAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_issuerInfoAttributes, "QSslCertificate.issuerInfoAttributes() -> list-of-QByteArray");

extern "C" {static PyObject *meth_QSslCertificate_issuerInfoAttributes(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_issuerInfoAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QList<QByteArray>*sipRes;

            sipRes = new QList<QByteArray>(sipCpp->issuerInfoAttributes());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_issuerInfoAttributes, doc_QSslCertificate_issuerInfoAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_extensions, "QSslCertificate.extensions() -> list-of-QSslCertificateExtension");

extern "C" {static PyObject *meth_QSslCertificate_extensions(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_extensions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QList<QSslCertificateExtension>*sipRes;

            sipRes = new QList<QSslCertificateExtension>(sipCpp->extensions());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificateExtension,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_extensions, doc_QSslCertificate_extensions);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_toText, "QSslCertificate.toText() -> str");

extern "C" {static PyObject *meth_QSslCertificate_toText(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_toText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_toText, doc_QSslCertificate_toText);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_verify, "QSslCertificate.verify(list-of-QSslCertificate, str hostName=QString()) -> list-of-QSslError");

extern "C" {static PyObject *meth_QSslCertificate_verify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_verify(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QList<QSslCertificate>* a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hostName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|J1", sipType_QList_0100QSslCertificate,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QList<QSslError>*sipRes;

            sipRes = new QList<QSslError>(QSslCertificate::verify(*a0,*a1));
            sipReleaseType(a0,sipType_QList_0100QSslCertificate,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_verify, doc_QSslCertificate_verify);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_isSelfSigned, "QSslCertificate.isSelfSigned() -> bool");

extern "C" {static PyObject *meth_QSslCertificate_isSelfSigned(PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_isSelfSigned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslCertificate, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSelfSigned();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_isSelfSigned, doc_QSslCertificate_isSelfSigned);

    return NULL;
}


PyDoc_STRVAR(doc_QSslCertificate_importPkcs12, "QSslCertificate.importPkcs12(QIODevice, QSslKey, QSslCertificate, list-of-QSslCertificate caCertificates=None, QByteArray passPhrase=QByteArray()) -> bool");

extern "C" {static PyObject *meth_QSslCertificate_importPkcs12(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslCertificate_importPkcs12(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice* a0;
        QSslKey* a1;
        QSslCertificate* a2;
        QList<QSslCertificate>* a3 = 0;
        int a3State = 0;
        const QByteArray& a4def = QByteArray();
        const QByteArray* a4 = &a4def;
        int a4State = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_caCertificates,
            sipName_passPhrase,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J8J8|J0J1", sipType_QIODevice, &a0, sipType_QSslKey, &a1, sipType_QSslCertificate, &a2, sipType_QList_0100QSslCertificate,&a3, &a3State, sipType_QByteArray, &a4, &a4State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QSslCertificate::importPkcs12(a0,a1,a2,a3,*a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(a3,sipType_QList_0100QSslCertificate,a3State);
            sipReleaseType(const_cast<QByteArray *>(a4),sipType_QByteArray,a4State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslCertificate, sipName_importPkcs12, doc_QSslCertificate_importPkcs12);

    return NULL;
}


extern "C" {static long slot_QSslCertificate___hash__(PyObject *);}
static long slot_QSslCertificate___hash__(PyObject *sipSelf)
{
    QSslCertificate *sipCpp = reinterpret_cast<QSslCertificate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslCertificate));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 83 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslcertificate.sip"
        sipRes = qHash(*sipCpp);
#line 893 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslCertificate.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_QSslCertificate___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSslCertificate___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QSslCertificate *sipCpp = reinterpret_cast<QSslCertificate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslCertificate));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslCertificate, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QSslCertificate::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,ne_slot,sipType_QSslCertificate,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QSslCertificate___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSslCertificate___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QSslCertificate *sipCpp = reinterpret_cast<QSslCertificate *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslCertificate));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslCertificate, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QSslCertificate::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,eq_slot,sipType_QSslCertificate,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSslCertificate(void *, const sipTypeDef *);}
static void *cast_QSslCertificate(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QSslCertificate)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSslCertificate(void *, int);}
static void release_QSslCertificate(void *sipCppV,int)
{
    delete reinterpret_cast<QSslCertificate *>(sipCppV);
}


extern "C" {static void assign_QSslCertificate(void *, SIP_SSIZE_T, const void *);}
static void assign_QSslCertificate(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QSslCertificate *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QSslCertificate *>(sipSrc);
}


extern "C" {static void *array_QSslCertificate(SIP_SSIZE_T);}
static void *array_QSslCertificate(SIP_SSIZE_T sipNrElem)
{
    return new QSslCertificate[sipNrElem];
}


extern "C" {static void *copy_QSslCertificate(const void *, SIP_SSIZE_T);}
static void *copy_QSslCertificate(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSslCertificate(reinterpret_cast<const QSslCertificate *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSslCertificate(sipSimpleWrapper *);}
static void dealloc_QSslCertificate(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QSslCertificate(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QSslCertificate(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSslCertificate(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QSslCertificate *sipCpp = 0;

    {
        QIODevice* a0;
        QSsl::EncodingFormat a1 = QSsl::Pem;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|E", sipType_QIODevice, &a0, sipType_QSsl_EncodingFormat, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QSslCertificate(a0,a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const QByteArray& a0def = QByteArray();
        const QByteArray* a0 = &a0def;
        int a0State = 0;
        QSsl::EncodingFormat a1 = QSsl::Pem;

        static const char *sipKwdList[] = {
            sipName_data,
            sipName_format,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1E", sipType_QByteArray, &a0, &a0State, sipType_QSsl_EncodingFormat, &a1))
        {
            sipCpp = new QSslCertificate(*a0,a1);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipCpp;
        }
    }

    {
        const QSslCertificate* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSslCertificate, &a0))
        {
            sipCpp = new QSslCertificate(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSslCertificate[] = {
    {(void *)slot_QSslCertificate___hash__, hash_slot},
    {(void *)slot_QSslCertificate___ne__, ne_slot},
    {(void *)slot_QSslCertificate___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSslCertificate[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QSslCertificate_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_clear)},
    {SIP_MLNAME_CAST(sipName_digest), (PyCFunction)meth_QSslCertificate_digest, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslCertificate_digest)},
    {SIP_MLNAME_CAST(sipName_effectiveDate), meth_QSslCertificate_effectiveDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_effectiveDate)},
    {SIP_MLNAME_CAST(sipName_expiryDate), meth_QSslCertificate_expiryDate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_expiryDate)},
    {SIP_MLNAME_CAST(sipName_extensions), meth_QSslCertificate_extensions, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_extensions)},
    {SIP_MLNAME_CAST(sipName_fromData), (PyCFunction)meth_QSslCertificate_fromData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslCertificate_fromData)},
    {SIP_MLNAME_CAST(sipName_fromDevice), (PyCFunction)meth_QSslCertificate_fromDevice, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslCertificate_fromDevice)},
    {SIP_MLNAME_CAST(sipName_fromPath), (PyCFunction)meth_QSslCertificate_fromPath, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslCertificate_fromPath)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QSslCertificate_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_handle)},
    {SIP_MLNAME_CAST(sipName_importPkcs12), (PyCFunction)meth_QSslCertificate_importPkcs12, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslCertificate_importPkcs12)},
    {SIP_MLNAME_CAST(sipName_isBlacklisted), meth_QSslCertificate_isBlacklisted, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_isBlacklisted)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QSslCertificate_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_isNull)},
    {SIP_MLNAME_CAST(sipName_isSelfSigned), meth_QSslCertificate_isSelfSigned, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_isSelfSigned)},
    {SIP_MLNAME_CAST(sipName_issuerInfo), meth_QSslCertificate_issuerInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_issuerInfo)},
    {SIP_MLNAME_CAST(sipName_issuerInfoAttributes), meth_QSslCertificate_issuerInfoAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_issuerInfoAttributes)},
    {SIP_MLNAME_CAST(sipName_publicKey), meth_QSslCertificate_publicKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_publicKey)},
    {SIP_MLNAME_CAST(sipName_serialNumber), meth_QSslCertificate_serialNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_serialNumber)},
    {SIP_MLNAME_CAST(sipName_subjectAlternativeNames), meth_QSslCertificate_subjectAlternativeNames, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_subjectAlternativeNames)},
    {SIP_MLNAME_CAST(sipName_subjectInfo), meth_QSslCertificate_subjectInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_subjectInfo)},
    {SIP_MLNAME_CAST(sipName_subjectInfoAttributes), meth_QSslCertificate_subjectInfoAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_subjectInfoAttributes)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QSslCertificate_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_swap)},
    {SIP_MLNAME_CAST(sipName_toDer), meth_QSslCertificate_toDer, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_toDer)},
    {SIP_MLNAME_CAST(sipName_toPem), meth_QSslCertificate_toPem, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_toPem)},
    {SIP_MLNAME_CAST(sipName_toText), meth_QSslCertificate_toText, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_toText)},
    {SIP_MLNAME_CAST(sipName_verify), (PyCFunction)meth_QSslCertificate_verify, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslCertificate_verify)},
    {SIP_MLNAME_CAST(sipName_version), meth_QSslCertificate_version, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslCertificate_version)}
};

static sipEnumMemberDef enummembers_QSslCertificate[] = {
    {sipName_CommonName, static_cast<int>(QSslCertificate::CommonName), 102},
    {sipName_CountryName, static_cast<int>(QSslCertificate::CountryName), 102},
    {sipName_DistinguishedNameQualifier, static_cast<int>(QSslCertificate::DistinguishedNameQualifier), 102},
    {sipName_EmailAddress, static_cast<int>(QSslCertificate::EmailAddress), 102},
    {sipName_LocalityName, static_cast<int>(QSslCertificate::LocalityName), 102},
    {sipName_Organization, static_cast<int>(QSslCertificate::Organization), 102},
    {sipName_OrganizationalUnitName, static_cast<int>(QSslCertificate::OrganizationalUnitName), 102},
    {sipName_SerialNumber, static_cast<int>(QSslCertificate::SerialNumber), 102},
    {sipName_StateOrProvinceName, static_cast<int>(QSslCertificate::StateOrProvinceName), 102},
};

PyDoc_STRVAR(doc_QSslCertificate, "\1QSslCertificate(QIODevice, QSsl.EncodingFormat format=QSsl.Pem)\n"
    "QSslCertificate(QByteArray data=QByteArray(), QSsl.EncodingFormat format=QSsl.Pem)\n"
    "QSslCertificate(QSslCertificate)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QSslCertificate = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSslCertificate,
        {0}
    },
    {
        sipNameNr_QSslCertificate,
        {0, 0, 1},
        26, methods_QSslCertificate,
        9, enummembers_QSslCertificate,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSslCertificate,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QSslCertificate,
    init_type_QSslCertificate,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSslCertificate,
    assign_QSslCertificate,
    array_QSslCertificate,
    copy_QSslCertificate,
    release_QSslCertificate,
    cast_QSslCertificate,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
