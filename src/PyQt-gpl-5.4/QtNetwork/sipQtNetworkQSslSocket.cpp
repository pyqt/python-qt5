/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:36 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslsocket.sip"
#include <qsslsocket.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qssl.sip"
#include <qssl.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslcertificate.sip"
#include <qsslcertificate.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 30 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslcipher.sip"
#include <qsslcipher.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslkey.sip"
#include <qsslkey.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 163 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"


class sipQSslSocket : public QSslSocket
{
public:
    sipQSslSocket(QObject*);
    virtual ~sipQSslSocket();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtect_setOpenMode(QIODevice::OpenMode);
    void sipProtect_setErrorString(const QString&);
    qint64 sipProtectVirt_readLineData(bool,char*,qint64);
    void sipProtect_setSocketState(QAbstractSocket::SocketState);
    void sipProtect_setSocketError(QAbstractSocket::SocketError);
    void sipProtect_setLocalPort(quint16);
    void sipProtect_setLocalAddress(const QHostAddress&);
    void sipProtect_setPeerPort(quint16);
    void sipProtect_setPeerAddress(const QHostAddress&);
    void sipProtect_setPeerName(const QString&);
    qint64 sipProtectVirt_readData(bool,char*,qint64);
    qint64 sipProtectVirt_writeData(bool,const char*,PY_LONG_LONG);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool reset();
    bool seek(qint64);
    qint64 size() const;
    qint64 pos() const;
    bool open(QIODevice::OpenMode);
    qint64 readLineData(char*,qint64);
    bool isSequential() const;
    qintptr socketDescriptor() const;
    void disconnectFromHost();
    void connectToHost(const QString&,quint16,QIODevice::OpenMode,QAbstractSocket::NetworkLayerProtocol);
    void resume();
    QVariant socketOption(QAbstractSocket::SocketOption);
    void setSocketOption(QAbstractSocket::SocketOption,const QVariant&);
    void setReadBufferSize(qint64);
    qint64 writeData(const char*,PY_LONG_LONG);
    qint64 readData(char*,qint64);
    bool waitForDisconnected(int);
    bool waitForBytesWritten(int);
    bool waitForReadyRead(int);
    bool waitForConnected(int);
    bool atEnd() const;
    void close();
    bool canReadLine() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;
    bool setSocketDescriptor(qintptr,QAbstractSocket::SocketState,QIODevice::OpenMode);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSslSocket(const sipQSslSocket &);
    sipQSslSocket &operator = (const sipQSslSocket &);

    char sipPyMethods[33];
};

sipQSslSocket::sipQSslSocket(QObject*a0): QSslSocket(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSslSocket::~sipQSslSocket()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSslSocket::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QSslSocket);
}

int sipQSslSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSslSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QSslSocket,_c,_id,_a);

    return _id;
}

void *sipQSslSocket::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QSslSocket, _clname, &sipCpp) ? sipCpp : QSslSocket::qt_metacast(_clname));
}

void sipQSslSocket::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSslSocket::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSslSocket::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSslSocket::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSslSocket::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSslSocket::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSslSocket::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSslSocket::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSslSocket::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSslSocket::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSslSocket::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSslSocket::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQSslSocket::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSslSocket::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSslSocket::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QSslSocket::reset();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSslSocket::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QSslSocket::seek(a0);

    typedef bool (*sipVH_QtCore_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[53]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

qint64 sipQSslSocket::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QSslSocket::size();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQSslSocket::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QSslSocket::pos();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSslSocket::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QSslSocket::open(a0);

    typedef bool (*sipVH_QtCore_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);

    return ((sipVH_QtCore_15)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[15]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

qint64 sipQSslSocket::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QSslSocket::readLineData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[43]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQSslSocket::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QSslSocket::isSequential();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qintptr sipQSslSocket::socketDescriptor() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_socketDescriptor);

    if (!sipMeth)
        return QSslSocket::socketDescriptor();

    extern qintptr sipVH_QtNetwork_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_24(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQSslSocket::disconnectFromHost()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_disconnectFromHost);

    if (!sipMeth)
    {
        QSslSocket::disconnectFromHost();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQSslSocket::connectToHost(const QString& a0,quint16 a1,QIODevice::OpenMode a2,QAbstractSocket::NetworkLayerProtocol a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_connectToHost);

    if (!sipMeth)
    {
        QSslSocket::connectToHost(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,unsigned short,QIODevice::OpenMode,QAbstractSocket::NetworkLayerProtocol);

    sipVH_QtNetwork_2(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQSslSocket::resume()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_resume);

    if (!sipMeth)
    {
        QSslSocket::resume();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QVariant sipQSslSocket::socketOption(QAbstractSocket::SocketOption a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_socketOption);

    if (!sipMeth)
        return QSslSocket::socketOption(a0);

    extern QVariant sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractSocket::SocketOption);

    return sipVH_QtNetwork_3(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSslSocket::setSocketOption(QAbstractSocket::SocketOption a0,const QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_setSocketOption);

    if (!sipMeth)
    {
        QSslSocket::setSocketOption(a0,a1);
        return;
    }

    extern void sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractSocket::SocketOption,const QVariant&);

    sipVH_QtNetwork_4(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQSslSocket::setReadBufferSize(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_setReadBufferSize);

    if (!sipMeth)
    {
        QSslSocket::setReadBufferSize(a0);
        return;
    }

    extern void sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    sipVH_QtNetwork_5(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

qint64 sipQSslSocket::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_writeData);

    if (!sipMeth)
        return QSslSocket::writeData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[42]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

qint64 sipQSslSocket::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_readData);

    if (!sipMeth)
        return QSslSocket::readData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[43]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQSslSocket::waitForDisconnected(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_waitForDisconnected);

    if (!sipMeth)
        return QSslSocket::waitForDisconnected(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSslSocket::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QSslSocket::waitForBytesWritten(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSslSocket::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QSslSocket::waitForReadyRead(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSslSocket::waitForConnected(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_waitForConnected);

    if (!sipMeth)
        return QSslSocket::waitForConnected(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSslSocket::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QSslSocket::atEnd();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQSslSocket::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QSslSocket::close();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSslSocket::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QSslSocket::canReadLine();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQSslSocket::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QSslSocket::bytesToWrite();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQSslSocket::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QSslSocket::bytesAvailable();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSslSocket::setSocketDescriptor(qintptr a0,QAbstractSocket::SocketState a1,QIODevice::OpenMode a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_setSocketDescriptor);

    if (!sipMeth)
        return QSslSocket::setSocketDescriptor(a0,a1,a2);

    extern bool sipVH_QtNetwork_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, qintptr,QAbstractSocket::SocketState,QIODevice::OpenMode);

    return sipVH_QtNetwork_6(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QObject* sipQSslSocket::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQSslSocket::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQSslSocket::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQSslSocket::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQSslSocket::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQSslSocket::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQSslSocket::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQSslSocket::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQSslSocket::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQSslSocket::sipProtect_setOpenMode(QIODevice::OpenMode a0)
{
    QIODevice::setOpenMode(a0);
}

void sipQSslSocket::sipProtect_setErrorString(const QString& a0)
{
    QIODevice::setErrorString(a0);
}

qint64 sipQSslSocket::sipProtectVirt_readLineData(bool sipSelfWasArg,char*a0,qint64 a1)
{
    return (sipSelfWasArg ? QAbstractSocket::readLineData(a0,a1) : readLineData(a0,a1));
}

void sipQSslSocket::sipProtect_setSocketState(QAbstractSocket::SocketState a0)
{
    QAbstractSocket::setSocketState(a0);
}

void sipQSslSocket::sipProtect_setSocketError(QAbstractSocket::SocketError a0)
{
    QAbstractSocket::setSocketError(a0);
}

void sipQSslSocket::sipProtect_setLocalPort(quint16 a0)
{
    QAbstractSocket::setLocalPort(a0);
}

void sipQSslSocket::sipProtect_setLocalAddress(const QHostAddress& a0)
{
    QAbstractSocket::setLocalAddress(a0);
}

void sipQSslSocket::sipProtect_setPeerPort(quint16 a0)
{
    QAbstractSocket::setPeerPort(a0);
}

void sipQSslSocket::sipProtect_setPeerAddress(const QHostAddress& a0)
{
    QAbstractSocket::setPeerAddress(a0);
}

void sipQSslSocket::sipProtect_setPeerName(const QString& a0)
{
    QAbstractSocket::setPeerName(a0);
}

qint64 sipQSslSocket::sipProtectVirt_readData(bool sipSelfWasArg,char*a0,qint64 a1)
{
    return (sipSelfWasArg ? QSslSocket::readData(a0,a1) : readData(a0,a1));
}

qint64 sipQSslSocket::sipProtectVirt_writeData(bool sipSelfWasArg,const char*a0,PY_LONG_LONG a1)
{
    return (sipSelfWasArg ? QSslSocket::writeData(a0,a1) : writeData(a0,a1));
}


PyDoc_STRVAR(doc_QSslSocket_sender, "QSslSocket.sender() -> QObject");

extern "C" {static PyObject *meth_QSslSocket_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 923 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_sender, doc_QSslSocket_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_receivers, "QSslSocket.receivers(signal) -> int");

extern "C" {static PyObject *meth_QSslSocket_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 982 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_receivers, doc_QSslSocket_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_timerEvent, "QSslSocket.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QSslSocket_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_timerEvent, doc_QSslSocket_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_childEvent, "QSslSocket.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QSslSocket_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_childEvent, doc_QSslSocket_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_customEvent, "QSslSocket.customEvent(QEvent)");

extern "C" {static PyObject *meth_QSslSocket_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_customEvent, doc_QSslSocket_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_connectNotify, "QSslSocket.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QSslSocket_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_connectNotify, doc_QSslSocket_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_disconnectNotify, "QSslSocket.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QSslSocket_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_disconnectNotify, doc_QSslSocket_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_senderSignalIndex, "QSslSocket.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QSslSocket_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_senderSignalIndex, doc_QSslSocket_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_isSignalConnected, "QSslSocket.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QSslSocket_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_isSignalConnected, doc_QSslSocket_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setOpenMode, "QSslSocket.setOpenMode(QIODevice.OpenMode)");

extern "C" {static PyObject *meth_QSslSocket_setOpenMode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setOpenMode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice::OpenMode* a0;
        int a0State = 0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            sipCpp->sipProtect_setOpenMode(*a0);
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setOpenMode, doc_QSslSocket_setOpenMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setErrorString, "QSslSocket.setErrorString(str)");

extern "C" {static PyObject *meth_QSslSocket_setErrorString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setErrorString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->sipProtect_setErrorString(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setErrorString, doc_QSslSocket_setErrorString);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_readLineData, "QSslSocket.readLineData(int) -> str");

extern "C" {static PyObject *meth_QSslSocket_readLineData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_readLineData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bn", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 217 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qabstractsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QAbstractSocket::readLineData(s, a0) : sipCpp->readLineData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1308 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_readLineData, doc_QSslSocket_readLineData);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setSocketState, "QSslSocket.setSocketState(QAbstractSocket.SocketState)");

extern "C" {static PyObject *meth_QSslSocket_setSocketState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setSocketState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket::SocketState a0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QAbstractSocket_SocketState, &a0))
        {
            sipCpp->sipProtect_setSocketState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setSocketState, doc_QSslSocket_setSocketState);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setSocketError, "QSslSocket.setSocketError(QAbstractSocket.SocketError)");

extern "C" {static PyObject *meth_QSslSocket_setSocketError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setSocketError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket::SocketError a0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QAbstractSocket_SocketError, &a0))
        {
            sipCpp->sipProtect_setSocketError(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setSocketError, doc_QSslSocket_setSocketError);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setLocalPort, "QSslSocket.setLocalPort(int)");

extern "C" {static PyObject *meth_QSslSocket_setLocalPort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setLocalPort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        quint16 a0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bt", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            sipCpp->sipProtect_setLocalPort(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setLocalPort, doc_QSslSocket_setLocalPort);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setLocalAddress, "QSslSocket.setLocalAddress(QHostAddress)");

extern "C" {static PyObject *meth_QSslSocket_setLocalAddress(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setLocalAddress(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress* a0;
        int a0State = 0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            sipCpp->sipProtect_setLocalAddress(*a0);
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setLocalAddress, doc_QSslSocket_setLocalAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setPeerPort, "QSslSocket.setPeerPort(int)");

extern "C" {static PyObject *meth_QSslSocket_setPeerPort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setPeerPort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        quint16 a0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bt", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            sipCpp->sipProtect_setPeerPort(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setPeerPort, doc_QSslSocket_setPeerPort);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setPeerAddress, "QSslSocket.setPeerAddress(QHostAddress)");

extern "C" {static PyObject *meth_QSslSocket_setPeerAddress(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setPeerAddress(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress* a0;
        int a0State = 0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            sipCpp->sipProtect_setPeerAddress(*a0);
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setPeerAddress, doc_QSslSocket_setPeerAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setPeerName, "QSslSocket.setPeerName(str)");

extern "C" {static PyObject *meth_QSslSocket_setPeerName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setPeerName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->sipProtect_setPeerName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setPeerName, doc_QSslSocket_setPeerName);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_connectToHostEncrypted, "QSslSocket.connectToHostEncrypted(str, int, QIODevice.OpenMode mode=QIODevice.ReadWrite, QAbstractSocket.NetworkLayerProtocol protocol=QAbstractSocket.AnyIPProtocol)\n"
    "QSslSocket.connectToHostEncrypted(str, int, str, QIODevice.OpenMode mode=QIODevice.ReadWrite, QAbstractSocket.NetworkLayerProtocol protocol=QAbstractSocket.AnyIPProtocol)");

extern "C" {static PyObject *meth_QSslSocket_connectToHostEncrypted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_connectToHostEncrypted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        quint16 a1;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
        QAbstractSocket::NetworkLayerProtocol a3 = QAbstractSocket::AnyIPProtocol;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_mode,
            sipName_protocol,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1t|J1E", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QIODevice_OpenMode, &a2, &a2State, sipType_QAbstractSocket_NetworkLayerProtocol, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToHostEncrypted(*a0,a1,*a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        quint16 a1;
        const QString* a2;
        int a2State = 0;
        QIODevice::OpenMode a3def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a3 = &a3def;
        int a3State = 0;
        QAbstractSocket::NetworkLayerProtocol a4 = QAbstractSocket::AnyIPProtocol;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_mode,
            sipName_protocol,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1tJ1|J1E", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QString,&a2, &a2State, sipType_QIODevice_OpenMode, &a3, &a3State, sipType_QAbstractSocket_NetworkLayerProtocol, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToHostEncrypted(*a0,a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QIODevice_OpenMode,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_connectToHostEncrypted, doc_QSslSocket_connectToHostEncrypted);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setSocketDescriptor, "QSslSocket.setSocketDescriptor(sip.voidptr, QAbstractSocket.SocketState state=QAbstractSocket.ConnectedState, QIODevice.OpenMode mode=QIODevice.ReadWrite) -> bool");

extern "C" {static PyObject *meth_QSslSocket_setSocketDescriptor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qintptr* a0;
        int a0State = 0;
        QAbstractSocket::SocketState a1 = QAbstractSocket::ConnectedState;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_state,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_qintptr,&a0, &a0State, sipType_QAbstractSocket_SocketState, &a1, sipType_QIODevice_OpenMode, &a2, &a2State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::setSocketDescriptor(*a0,a1,*a2) : sipCpp->setSocketDescriptor(*a0,a1,*a2));
            sipReleaseType(a0,sipType_qintptr,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setSocketDescriptor, doc_QSslSocket_setSocketDescriptor);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_mode, "QSslSocket.mode() -> QSslSocket.SslMode");

extern "C" {static PyObject *meth_QSslSocket_mode(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_mode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslSocket::SslMode sipRes;

            sipRes = sipCpp->mode();

            return sipConvertFromEnum(sipRes,sipType_QSslSocket_SslMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_mode, doc_QSslSocket_mode);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_isEncrypted, "QSslSocket.isEncrypted() -> bool");

extern "C" {static PyObject *meth_QSslSocket_isEncrypted(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_isEncrypted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEncrypted();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_isEncrypted, doc_QSslSocket_isEncrypted);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_protocol, "QSslSocket.protocol() -> QSsl.SslProtocol");

extern "C" {static PyObject *meth_QSslSocket_protocol(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_protocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSsl::SslProtocol sipRes;

            sipRes = sipCpp->protocol();

            return sipConvertFromEnum(sipRes,sipType_QSsl_SslProtocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_protocol, doc_QSslSocket_protocol);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setProtocol, "QSslSocket.setProtocol(QSsl.SslProtocol)");

extern "C" {static PyObject *meth_QSslSocket_setProtocol(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setProtocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSsl::SslProtocol a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QSsl_SslProtocol, &a0))
        {
            sipCpp->setProtocol(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setProtocol, doc_QSslSocket_setProtocol);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_bytesAvailable, "QSslSocket.bytesAvailable() -> int");

extern "C" {static PyObject *meth_QSslSocket_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::bytesAvailable() : sipCpp->bytesAvailable());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_bytesAvailable, doc_QSslSocket_bytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_bytesToWrite, "QSslSocket.bytesToWrite() -> int");

extern "C" {static PyObject *meth_QSslSocket_bytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_bytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::bytesToWrite() : sipCpp->bytesToWrite());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_bytesToWrite, doc_QSslSocket_bytesToWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_canReadLine, "QSslSocket.canReadLine() -> bool");

extern "C" {static PyObject *meth_QSslSocket_canReadLine(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_canReadLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::canReadLine() : sipCpp->canReadLine());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_canReadLine, doc_QSslSocket_canReadLine);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_close, "QSslSocket.close()");

extern "C" {static PyObject *meth_QSslSocket_close(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QSslSocket::close() : sipCpp->close());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_close, doc_QSslSocket_close);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_atEnd, "QSslSocket.atEnd() -> bool");

extern "C" {static PyObject *meth_QSslSocket_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::atEnd() : sipCpp->atEnd());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_atEnd, doc_QSslSocket_atEnd);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_flush, "QSslSocket.flush() -> bool");

extern "C" {static PyObject *meth_QSslSocket_flush(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->flush();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_flush, doc_QSslSocket_flush);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_abort, "QSslSocket.abort()");

extern "C" {static PyObject *meth_QSslSocket_abort(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            sipCpp->abort();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_abort, doc_QSslSocket_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setLocalCertificate, "QSslSocket.setLocalCertificate(QSslCertificate)\n"
    "QSslSocket.setLocalCertificate(str, QSsl.EncodingFormat format=QSsl.Pem)");

extern "C" {static PyObject *meth_QSslSocket_setLocalCertificate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setLocalCertificate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate* a0;
        QSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QSslCertificate, &a0))
        {
            sipCpp->setLocalCertificate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QSsl::EncodingFormat a1 = QSsl::Pem;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSsl_EncodingFormat, &a1))
        {
            sipCpp->setLocalCertificate(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setLocalCertificate, doc_QSslSocket_setLocalCertificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_localCertificate, "QSslSocket.localCertificate() -> QSslCertificate");

extern "C" {static PyObject *meth_QSslSocket_localCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_localCertificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslCertificate*sipRes;

            sipRes = new QSslCertificate(sipCpp->localCertificate());

            return sipConvertFromNewType(sipRes,sipType_QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_localCertificate, doc_QSslSocket_localCertificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_peerCertificate, "QSslSocket.peerCertificate() -> QSslCertificate");

extern "C" {static PyObject *meth_QSslSocket_peerCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_peerCertificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslCertificate*sipRes;

            sipRes = new QSslCertificate(sipCpp->peerCertificate());

            return sipConvertFromNewType(sipRes,sipType_QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_peerCertificate, doc_QSslSocket_peerCertificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_peerCertificateChain, "QSslSocket.peerCertificateChain() -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslSocket_peerCertificateChain(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_peerCertificateChain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QList<QSslCertificate>*sipRes;

            sipRes = new QList<QSslCertificate>(sipCpp->peerCertificateChain());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_peerCertificateChain, doc_QSslSocket_peerCertificateChain);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_sessionCipher, "QSslSocket.sessionCipher() -> QSslCipher");

extern "C" {static PyObject *meth_QSslSocket_sessionCipher(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_sessionCipher(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslCipher*sipRes;

            sipRes = new QSslCipher(sipCpp->sessionCipher());

            return sipConvertFromNewType(sipRes,sipType_QSslCipher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_sessionCipher, doc_QSslSocket_sessionCipher);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setPrivateKey, "QSslSocket.setPrivateKey(QSslKey)\n"
    "QSslSocket.setPrivateKey(str, QSsl.KeyAlgorithm algorithm=QSsl.Rsa, QSsl.EncodingFormat format=QSsl.Pem, QByteArray passPhrase=QByteArray())");

extern "C" {static PyObject *meth_QSslSocket_setPrivateKey(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setPrivateKey(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslKey* a0;
        QSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QSslKey, &a0))
        {
            sipCpp->setPrivateKey(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QSsl::KeyAlgorithm a1 = QSsl::Rsa;
        QSsl::EncodingFormat a2 = QSsl::Pem;
        const QByteArray& a3def = QByteArray();
        const QByteArray* a3 = &a3def;
        int a3State = 0;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_algorithm,
            sipName_format,
            sipName_passPhrase,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EEJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSsl_KeyAlgorithm, &a1, sipType_QSsl_EncodingFormat, &a2, sipType_QByteArray, &a3, &a3State))
        {
            sipCpp->setPrivateKey(*a0,a1,a2,*a3);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a3),sipType_QByteArray,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setPrivateKey, doc_QSslSocket_setPrivateKey);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_privateKey, "QSslSocket.privateKey() -> QSslKey");

extern "C" {static PyObject *meth_QSslSocket_privateKey(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_privateKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslKey*sipRes;

            sipRes = new QSslKey(sipCpp->privateKey());

            return sipConvertFromNewType(sipRes,sipType_QSslKey,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_privateKey, doc_QSslSocket_privateKey);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_ciphers, "QSslSocket.ciphers() -> list-of-QSslCipher");

extern "C" {static PyObject *meth_QSslSocket_ciphers(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_ciphers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QList<QSslCipher>*sipRes;

            sipRes = new QList<QSslCipher>(sipCpp->ciphers());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCipher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_ciphers, doc_QSslSocket_ciphers);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setCiphers, "QSslSocket.setCiphers(list-of-QSslCipher)\n"
    "QSslSocket.setCiphers(str)");

extern "C" {static PyObject *meth_QSslSocket_setCiphers(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setCiphers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslCipher>* a0;
        int a0State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QList_0100QSslCipher,&a0, &a0State))
        {
            sipCpp->setCiphers(*a0);
            sipReleaseType(const_cast<QList<QSslCipher> *>(a0),sipType_QList_0100QSslCipher,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCiphers(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setCiphers, doc_QSslSocket_setCiphers);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setDefaultCiphers, "QSslSocket.setDefaultCiphers(list-of-QSslCipher)");

extern "C" {static PyObject *meth_QSslSocket_setDefaultCiphers(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setDefaultCiphers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslCipher>* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QList_0100QSslCipher,&a0, &a0State))
        {
            QSslSocket::setDefaultCiphers(*a0);
            sipReleaseType(const_cast<QList<QSslCipher> *>(a0),sipType_QList_0100QSslCipher,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setDefaultCiphers, doc_QSslSocket_setDefaultCiphers);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_defaultCiphers, "QSslSocket.defaultCiphers() -> list-of-QSslCipher");

extern "C" {static PyObject *meth_QSslSocket_defaultCiphers(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_defaultCiphers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QSslCipher>*sipRes;

            sipRes = new QList<QSslCipher>(QSslSocket::defaultCiphers());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCipher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_defaultCiphers, doc_QSslSocket_defaultCiphers);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_supportedCiphers, "QSslSocket.supportedCiphers() -> list-of-QSslCipher");

extern "C" {static PyObject *meth_QSslSocket_supportedCiphers(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_supportedCiphers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QSslCipher>*sipRes;

            sipRes = new QList<QSslCipher>(QSslSocket::supportedCiphers());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCipher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_supportedCiphers, doc_QSslSocket_supportedCiphers);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_addCaCertificates, "QSslSocket.addCaCertificates(str, QSsl.EncodingFormat format=QSsl.Pem, QRegExp.PatternSyntax syntax=QRegExp.FixedString) -> bool\n"
    "QSslSocket.addCaCertificates(list-of-QSslCertificate)");

extern "C" {static PyObject *meth_QSslSocket_addCaCertificates(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_addCaCertificates(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSsl::EncodingFormat a1 = QSsl::Pem;
        QRegExp::PatternSyntax a2 = QRegExp::FixedString;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_syntax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EE", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSsl_EncodingFormat, &a1, sipType_QRegExp_PatternSyntax, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->addCaCertificates(*a0,a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QList<QSslCertificate>* a0;
        int a0State = 0;
        QSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QList_0100QSslCertificate,&a0, &a0State))
        {
            sipCpp->addCaCertificates(*a0);
            sipReleaseType(const_cast<QList<QSslCertificate> *>(a0),sipType_QList_0100QSslCertificate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_addCaCertificates, doc_QSslSocket_addCaCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_addCaCertificate, "QSslSocket.addCaCertificate(QSslCertificate)");

extern "C" {static PyObject *meth_QSslSocket_addCaCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_addCaCertificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate* a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QSslCertificate, &a0))
        {
            sipCpp->addCaCertificate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_addCaCertificate, doc_QSslSocket_addCaCertificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setCaCertificates, "QSslSocket.setCaCertificates(list-of-QSslCertificate)");

extern "C" {static PyObject *meth_QSslSocket_setCaCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setCaCertificates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslCertificate>* a0;
        int a0State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QList_0100QSslCertificate,&a0, &a0State))
        {
            sipCpp->setCaCertificates(*a0);
            sipReleaseType(const_cast<QList<QSslCertificate> *>(a0),sipType_QList_0100QSslCertificate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setCaCertificates, doc_QSslSocket_setCaCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_caCertificates, "QSslSocket.caCertificates() -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslSocket_caCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_caCertificates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QList<QSslCertificate>*sipRes;

            sipRes = new QList<QSslCertificate>(sipCpp->caCertificates());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_caCertificates, doc_QSslSocket_caCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_addDefaultCaCertificates, "QSslSocket.addDefaultCaCertificates(str, QSsl.EncodingFormat format=QSsl.Pem, QRegExp.PatternSyntax syntax=QRegExp.FixedString) -> bool\n"
    "QSslSocket.addDefaultCaCertificates(list-of-QSslCertificate)");

extern "C" {static PyObject *meth_QSslSocket_addDefaultCaCertificates(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_addDefaultCaCertificates(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSsl::EncodingFormat a1 = QSsl::Pem;
        QRegExp::PatternSyntax a2 = QRegExp::FixedString;

        static const char *sipKwdList[] = {
            NULL,
            sipName_format,
            sipName_syntax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|EE", sipType_QString,&a0, &a0State, sipType_QSsl_EncodingFormat, &a1, sipType_QRegExp_PatternSyntax, &a2))
        {
            bool sipRes;

            sipRes = QSslSocket::addDefaultCaCertificates(*a0,a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QList<QSslCertificate>* a0;
        int a0State = 0;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "J1", sipType_QList_0100QSslCertificate,&a0, &a0State))
        {
            QSslSocket::addDefaultCaCertificates(*a0);
            sipReleaseType(const_cast<QList<QSslCertificate> *>(a0),sipType_QList_0100QSslCertificate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_addDefaultCaCertificates, doc_QSslSocket_addDefaultCaCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_addDefaultCaCertificate, "QSslSocket.addDefaultCaCertificate(QSslCertificate)");

extern "C" {static PyObject *meth_QSslSocket_addDefaultCaCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_addDefaultCaCertificate(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QSslCertificate, &a0))
        {
            QSslSocket::addDefaultCaCertificate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_addDefaultCaCertificate, doc_QSslSocket_addDefaultCaCertificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setDefaultCaCertificates, "QSslSocket.setDefaultCaCertificates(list-of-QSslCertificate)");

extern "C" {static PyObject *meth_QSslSocket_setDefaultCaCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setDefaultCaCertificates(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslCertificate>* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QList_0100QSslCertificate,&a0, &a0State))
        {
            QSslSocket::setDefaultCaCertificates(*a0);
            sipReleaseType(const_cast<QList<QSslCertificate> *>(a0),sipType_QList_0100QSslCertificate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setDefaultCaCertificates, doc_QSslSocket_setDefaultCaCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_defaultCaCertificates, "QSslSocket.defaultCaCertificates() -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslSocket_defaultCaCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_defaultCaCertificates(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QSslCertificate>*sipRes;

            sipRes = new QList<QSslCertificate>(QSslSocket::defaultCaCertificates());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_defaultCaCertificates, doc_QSslSocket_defaultCaCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_systemCaCertificates, "QSslSocket.systemCaCertificates() -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslSocket_systemCaCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_systemCaCertificates(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QSslCertificate>*sipRes;

            sipRes = new QList<QSslCertificate>(QSslSocket::systemCaCertificates());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_systemCaCertificates, doc_QSslSocket_systemCaCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_waitForConnected, "QSslSocket.waitForConnected(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QSslSocket_waitForConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_waitForConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::waitForConnected(a0) : sipCpp->waitForConnected(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_waitForConnected, doc_QSslSocket_waitForConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_waitForEncrypted, "QSslSocket.waitForEncrypted(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QSslSocket_waitForEncrypted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_waitForEncrypted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForEncrypted(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_waitForEncrypted, doc_QSslSocket_waitForEncrypted);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_waitForReadyRead, "QSslSocket.waitForReadyRead(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QSslSocket_waitForReadyRead(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_waitForReadyRead(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::waitForReadyRead(a0) : sipCpp->waitForReadyRead(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_waitForReadyRead, doc_QSslSocket_waitForReadyRead);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_waitForBytesWritten, "QSslSocket.waitForBytesWritten(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QSslSocket_waitForBytesWritten(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_waitForBytesWritten(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::waitForBytesWritten(a0) : sipCpp->waitForBytesWritten(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_waitForBytesWritten, doc_QSslSocket_waitForBytesWritten);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_waitForDisconnected, "QSslSocket.waitForDisconnected(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QSslSocket_waitForDisconnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_waitForDisconnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 30000;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSslSocket::waitForDisconnected(a0) : sipCpp->waitForDisconnected(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_waitForDisconnected, doc_QSslSocket_waitForDisconnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_sslErrors, "QSslSocket.sslErrors() -> list-of-QSslError");

extern "C" {static PyObject *meth_QSslSocket_sslErrors(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_sslErrors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QList<QSslError>*sipRes;

            sipRes = new QList<QSslError>(sipCpp->sslErrors());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_sslErrors, doc_QSslSocket_sslErrors);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_supportsSsl, "QSslSocket.supportsSsl() -> bool");

extern "C" {static PyObject *meth_QSslSocket_supportsSsl(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_supportsSsl(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QSslSocket::supportsSsl();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_supportsSsl, doc_QSslSocket_supportsSsl);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_startClientEncryption, "QSslSocket.startClientEncryption()");

extern "C" {static PyObject *meth_QSslSocket_startClientEncryption(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_startClientEncryption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            sipCpp->startClientEncryption();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_startClientEncryption, doc_QSslSocket_startClientEncryption);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_startServerEncryption, "QSslSocket.startServerEncryption()");

extern "C" {static PyObject *meth_QSslSocket_startServerEncryption(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_startServerEncryption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            sipCpp->startServerEncryption();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_startServerEncryption, doc_QSslSocket_startServerEncryption);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_ignoreSslErrors, "QSslSocket.ignoreSslErrors()\n"
    "QSslSocket.ignoreSslErrors(list-of-QSslError)");

extern "C" {static PyObject *meth_QSslSocket_ignoreSslErrors(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_ignoreSslErrors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            sipCpp->ignoreSslErrors();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QList<QSslError>* a0;
        int a0State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QList_0100QSslError,&a0, &a0State))
        {
            sipCpp->ignoreSslErrors(*a0);
            sipReleaseType(const_cast<QList<QSslError> *>(a0),sipType_QList_0100QSslError,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_ignoreSslErrors, doc_QSslSocket_ignoreSslErrors);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_readData, "QSslSocket.readData(int) -> str");

extern "C" {static PyObject *meth_QSslSocket_readData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_readData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bn", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QSslSocket::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 2995 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslSocket.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_readData, doc_QSslSocket_readData);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_writeData, "QSslSocket.writeData(str) -> int");

extern "C" {static PyObject *meth_QSslSocket_writeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_writeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
        sipQSslSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bk", &sipSelf, sipType_QSslSocket, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_writeData(sipSelfWasArg,a0,(PY_LONG_LONG)a1);
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_writeData, doc_QSslSocket_writeData);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_peerVerifyMode, "QSslSocket.peerVerifyMode() -> QSslSocket.PeerVerifyMode");

extern "C" {static PyObject *meth_QSslSocket_peerVerifyMode(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_peerVerifyMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslSocket::PeerVerifyMode sipRes;

            sipRes = sipCpp->peerVerifyMode();

            return sipConvertFromEnum(sipRes,sipType_QSslSocket_PeerVerifyMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_peerVerifyMode, doc_QSslSocket_peerVerifyMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setPeerVerifyMode, "QSslSocket.setPeerVerifyMode(QSslSocket.PeerVerifyMode)");

extern "C" {static PyObject *meth_QSslSocket_setPeerVerifyMode(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setPeerVerifyMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket::PeerVerifyMode a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QSslSocket_PeerVerifyMode, &a0))
        {
            sipCpp->setPeerVerifyMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setPeerVerifyMode, doc_QSslSocket_setPeerVerifyMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_peerVerifyDepth, "QSslSocket.peerVerifyDepth() -> int");

extern "C" {static PyObject *meth_QSslSocket_peerVerifyDepth(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_peerVerifyDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->peerVerifyDepth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_peerVerifyDepth, doc_QSslSocket_peerVerifyDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setPeerVerifyDepth, "QSslSocket.setPeerVerifyDepth(int)");

extern "C" {static PyObject *meth_QSslSocket_setPeerVerifyDepth(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setPeerVerifyDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            sipCpp->setPeerVerifyDepth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setPeerVerifyDepth, doc_QSslSocket_setPeerVerifyDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setReadBufferSize, "QSslSocket.setReadBufferSize(int)");

extern "C" {static PyObject *meth_QSslSocket_setReadBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setReadBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QSslSocket, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QSslSocket::setReadBufferSize(a0) : sipCpp->setReadBufferSize(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setReadBufferSize, doc_QSslSocket_setReadBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_encryptedBytesAvailable, "QSslSocket.encryptedBytesAvailable() -> int");

extern "C" {static PyObject *meth_QSslSocket_encryptedBytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_encryptedBytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->encryptedBytesAvailable();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_encryptedBytesAvailable, doc_QSslSocket_encryptedBytesAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_encryptedBytesToWrite, "QSslSocket.encryptedBytesToWrite() -> int");

extern "C" {static PyObject *meth_QSslSocket_encryptedBytesToWrite(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_encryptedBytesToWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->encryptedBytesToWrite();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_encryptedBytesToWrite, doc_QSslSocket_encryptedBytesToWrite);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_sslConfiguration, "QSslSocket.sslConfiguration() -> QSslConfiguration");

extern "C" {static PyObject *meth_QSslSocket_sslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_sslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSslConfiguration*sipRes;

            sipRes = new QSslConfiguration(sipCpp->sslConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_sslConfiguration, doc_QSslSocket_sslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setSslConfiguration, "QSslSocket.setSslConfiguration(QSslConfiguration)");

extern "C" {static PyObject *meth_QSslSocket_setSslConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setSslConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration* a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            sipCpp->setSslConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setSslConfiguration, doc_QSslSocket_setSslConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setSocketOption, "QSslSocket.setSocketOption(QAbstractSocket.SocketOption, QVariant)");

extern "C" {static PyObject *meth_QSslSocket_setSocketOption(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setSocketOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractSocket::SocketOption a0;
        const QVariant* a1;
        int a1State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QAbstractSocket_SocketOption, &a0, sipType_QVariant, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp->QSslSocket::setSocketOption(a0,*a1) : sipCpp->setSocketOption(a0,*a1));
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setSocketOption, doc_QSslSocket_setSocketOption);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_socketOption, "QSslSocket.socketOption(QAbstractSocket.SocketOption) -> QVariant");

extern "C" {static PyObject *meth_QSslSocket_socketOption(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_socketOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractSocket::SocketOption a0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QAbstractSocket_SocketOption, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QSslSocket::socketOption(a0) : sipCpp->socketOption(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_socketOption, doc_QSslSocket_socketOption);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_peerVerifyName, "QSslSocket.peerVerifyName() -> str");

extern "C" {static PyObject *meth_QSslSocket_peerVerifyName(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_peerVerifyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->peerVerifyName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_peerVerifyName, doc_QSslSocket_peerVerifyName);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setPeerVerifyName, "QSslSocket.setPeerVerifyName(str)");

extern "C" {static PyObject *meth_QSslSocket_setPeerVerifyName(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setPeerVerifyName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPeerVerifyName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setPeerVerifyName, doc_QSslSocket_setPeerVerifyName);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_resume, "QSslSocket.resume()");

extern "C" {static PyObject *meth_QSslSocket_resume(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_resume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSslSocket::resume() : sipCpp->resume());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_resume, doc_QSslSocket_resume);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_connectToHost, "QSslSocket.connectToHost(str, int, QIODevice.OpenMode mode=QIODevice.ReadWrite, QAbstractSocket.NetworkLayerProtocol protocol=QAbstractSocket.AnyIPProtocol)");

extern "C" {static PyObject *meth_QSslSocket_connectToHost(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_connectToHost(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        quint16 a1;
        QIODevice::OpenMode a2def = QIODevice::ReadWrite;
        QIODevice::OpenMode* a2 = &a2def;
        int a2State = 0;
        QAbstractSocket::NetworkLayerProtocol a3 = QAbstractSocket::AnyIPProtocol;
        QSslSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_mode,
            sipName_protocol,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1t|J1E", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QString,&a0, &a0State, &a1, sipType_QIODevice_OpenMode, &a2, &a2State, sipType_QAbstractSocket_NetworkLayerProtocol, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSslSocket::connectToHost(*a0,a1,*a2,a3) : sipCpp->connectToHost(*a0,a1,*a2,a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QIODevice_OpenMode,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_connectToHost, doc_QSslSocket_connectToHost);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_disconnectFromHost, "QSslSocket.disconnectFromHost()");

extern "C" {static PyObject *meth_QSslSocket_disconnectFromHost(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_disconnectFromHost(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QSslSocket::disconnectFromHost() : sipCpp->disconnectFromHost());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_disconnectFromHost, doc_QSslSocket_disconnectFromHost);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_sslLibraryVersionNumber, "QSslSocket.sslLibraryVersionNumber() -> int");

extern "C" {static PyObject *meth_QSslSocket_sslLibraryVersionNumber(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_sslLibraryVersionNumber(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            long sipRes;

            sipRes = QSslSocket::sslLibraryVersionNumber();

            return PyLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_sslLibraryVersionNumber, doc_QSslSocket_sslLibraryVersionNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_sslLibraryVersionString, "QSslSocket.sslLibraryVersionString() -> str");

extern "C" {static PyObject *meth_QSslSocket_sslLibraryVersionString(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_sslLibraryVersionString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            sipRes = new QString(QSslSocket::sslLibraryVersionString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_sslLibraryVersionString, doc_QSslSocket_sslLibraryVersionString);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_setLocalCertificateChain, "QSslSocket.setLocalCertificateChain(list-of-QSslCertificate)");

extern "C" {static PyObject *meth_QSslSocket_setLocalCertificateChain(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_setLocalCertificateChain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslCertificate>* a0;
        int a0State = 0;
        QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslSocket, &sipCpp, sipType_QList_0100QSslCertificate,&a0, &a0State))
        {
            sipCpp->setLocalCertificateChain(*a0);
            sipReleaseType(const_cast<QList<QSslCertificate> *>(a0),sipType_QList_0100QSslCertificate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_setLocalCertificateChain, doc_QSslSocket_setLocalCertificateChain);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_localCertificateChain, "QSslSocket.localCertificateChain() -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslSocket_localCertificateChain(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_localCertificateChain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QList<QSslCertificate>*sipRes;

            sipRes = new QList<QSslCertificate>(sipCpp->localCertificateChain());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_localCertificateChain, doc_QSslSocket_localCertificateChain);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_sessionProtocol, "QSslSocket.sessionProtocol() -> QSsl.SslProtocol");

extern "C" {static PyObject *meth_QSslSocket_sessionProtocol(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_sessionProtocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslSocket, &sipCpp))
        {
            QSsl::SslProtocol sipRes;

            sipRes = sipCpp->sessionProtocol();

            return sipConvertFromEnum(sipRes,sipType_QSsl_SslProtocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_sessionProtocol, doc_QSslSocket_sessionProtocol);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_sslLibraryBuildVersionNumber, "QSslSocket.sslLibraryBuildVersionNumber() -> int");

extern "C" {static PyObject *meth_QSslSocket_sslLibraryBuildVersionNumber(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_sslLibraryBuildVersionNumber(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            long sipRes;

            sipRes = QSslSocket::sslLibraryBuildVersionNumber();

            return PyLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_sslLibraryBuildVersionNumber, doc_QSslSocket_sslLibraryBuildVersionNumber);

    return NULL;
}


PyDoc_STRVAR(doc_QSslSocket_sslLibraryBuildVersionString, "QSslSocket.sslLibraryBuildVersionString() -> str");

extern "C" {static PyObject *meth_QSslSocket_sslLibraryBuildVersionString(PyObject *, PyObject *);}
static PyObject *meth_QSslSocket_sslLibraryBuildVersionString(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QString*sipRes;

            sipRes = new QString(QSslSocket::sslLibraryBuildVersionString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslSocket, sipName_sslLibraryBuildVersionString, doc_QSslSocket_sslLibraryBuildVersionString);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSslSocket(void *, const sipTypeDef *);}
static void *cast_QSslSocket(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSslSocket)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTcpSocket)->ctd_cast((QTcpSocket *)(QSslSocket *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSslSocket(void *, int);}
static void release_QSslSocket(void *sipCppV,int)
{
    QSslSocket *sipCpp = reinterpret_cast<QSslSocket *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSslSocket(sipSimpleWrapper *);}
static void dealloc_QSslSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSslSocket *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSslSocket(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSslSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSslSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSslSocket *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSslSocket(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSslSocket[] = {{114, 255, 1}};


static PyMethodDef methods_QSslSocket[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QSslSocket_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_abort)},
    {SIP_MLNAME_CAST(sipName_addCaCertificate), meth_QSslSocket_addCaCertificate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_addCaCertificate)},
    {SIP_MLNAME_CAST(sipName_addCaCertificates), (PyCFunction)meth_QSslSocket_addCaCertificates, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_addCaCertificates)},
    {SIP_MLNAME_CAST(sipName_addDefaultCaCertificate), meth_QSslSocket_addDefaultCaCertificate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_addDefaultCaCertificate)},
    {SIP_MLNAME_CAST(sipName_addDefaultCaCertificates), (PyCFunction)meth_QSslSocket_addDefaultCaCertificates, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_addDefaultCaCertificates)},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QSslSocket_atEnd, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_atEnd)},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QSslSocket_bytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_bytesAvailable)},
    {SIP_MLNAME_CAST(sipName_bytesToWrite), meth_QSslSocket_bytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_bytesToWrite)},
    {SIP_MLNAME_CAST(sipName_caCertificates), meth_QSslSocket_caCertificates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_caCertificates)},
    {SIP_MLNAME_CAST(sipName_canReadLine), meth_QSslSocket_canReadLine, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_canReadLine)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QSslSocket_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_ciphers), meth_QSslSocket_ciphers, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_ciphers)},
    {SIP_MLNAME_CAST(sipName_close), meth_QSslSocket_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_close)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QSslSocket_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectToHost), (PyCFunction)meth_QSslSocket_connectToHost, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_connectToHost)},
    {SIP_MLNAME_CAST(sipName_connectToHostEncrypted), (PyCFunction)meth_QSslSocket_connectToHostEncrypted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_connectToHostEncrypted)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QSslSocket_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultCaCertificates), meth_QSslSocket_defaultCaCertificates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_defaultCaCertificates)},
    {SIP_MLNAME_CAST(sipName_defaultCiphers), meth_QSslSocket_defaultCiphers, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_defaultCiphers)},
    {SIP_MLNAME_CAST(sipName_disconnectFromHost), meth_QSslSocket_disconnectFromHost, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_disconnectFromHost)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QSslSocket_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_encryptedBytesAvailable), meth_QSslSocket_encryptedBytesAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_encryptedBytesAvailable)},
    {SIP_MLNAME_CAST(sipName_encryptedBytesToWrite), meth_QSslSocket_encryptedBytesToWrite, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_encryptedBytesToWrite)},
    {SIP_MLNAME_CAST(sipName_flush), meth_QSslSocket_flush, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_flush)},
    {SIP_MLNAME_CAST(sipName_ignoreSslErrors), meth_QSslSocket_ignoreSslErrors, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_ignoreSslErrors)},
    {SIP_MLNAME_CAST(sipName_isEncrypted), meth_QSslSocket_isEncrypted, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_isEncrypted)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QSslSocket_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_localCertificate), meth_QSslSocket_localCertificate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_localCertificate)},
    {SIP_MLNAME_CAST(sipName_localCertificateChain), meth_QSslSocket_localCertificateChain, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_localCertificateChain)},
    {SIP_MLNAME_CAST(sipName_mode), meth_QSslSocket_mode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_mode)},
    {SIP_MLNAME_CAST(sipName_peerCertificate), meth_QSslSocket_peerCertificate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_peerCertificate)},
    {SIP_MLNAME_CAST(sipName_peerCertificateChain), meth_QSslSocket_peerCertificateChain, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_peerCertificateChain)},
    {SIP_MLNAME_CAST(sipName_peerVerifyDepth), meth_QSslSocket_peerVerifyDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_peerVerifyDepth)},
    {SIP_MLNAME_CAST(sipName_peerVerifyMode), meth_QSslSocket_peerVerifyMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_peerVerifyMode)},
    {SIP_MLNAME_CAST(sipName_peerVerifyName), meth_QSslSocket_peerVerifyName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_peerVerifyName)},
    {SIP_MLNAME_CAST(sipName_privateKey), meth_QSslSocket_privateKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_privateKey)},
    {SIP_MLNAME_CAST(sipName_protocol), meth_QSslSocket_protocol, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_protocol)},
    {SIP_MLNAME_CAST(sipName_readData), (PyCFunction)meth_QSslSocket_readData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_readData)},
    {SIP_MLNAME_CAST(sipName_readLineData), (PyCFunction)meth_QSslSocket_readLineData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QSslSocket_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_resume), meth_QSslSocket_resume, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_resume)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QSslSocket_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QSslSocket_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sessionCipher), meth_QSslSocket_sessionCipher, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_sessionCipher)},
    {SIP_MLNAME_CAST(sipName_sessionProtocol), meth_QSslSocket_sessionProtocol, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_sessionProtocol)},
    {SIP_MLNAME_CAST(sipName_setCaCertificates), meth_QSslSocket_setCaCertificates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setCaCertificates)},
    {SIP_MLNAME_CAST(sipName_setCiphers), meth_QSslSocket_setCiphers, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setCiphers)},
    {SIP_MLNAME_CAST(sipName_setDefaultCaCertificates), meth_QSslSocket_setDefaultCaCertificates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setDefaultCaCertificates)},
    {SIP_MLNAME_CAST(sipName_setDefaultCiphers), meth_QSslSocket_setDefaultCiphers, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setDefaultCiphers)},
    {SIP_MLNAME_CAST(sipName_setErrorString), (PyCFunction)meth_QSslSocket_setErrorString, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setLocalAddress), (PyCFunction)meth_QSslSocket_setLocalAddress, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setLocalCertificate), (PyCFunction)meth_QSslSocket_setLocalCertificate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_setLocalCertificate)},
    {SIP_MLNAME_CAST(sipName_setLocalCertificateChain), meth_QSslSocket_setLocalCertificateChain, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setLocalCertificateChain)},
    {SIP_MLNAME_CAST(sipName_setLocalPort), (PyCFunction)meth_QSslSocket_setLocalPort, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setOpenMode), (PyCFunction)meth_QSslSocket_setOpenMode, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setPeerAddress), (PyCFunction)meth_QSslSocket_setPeerAddress, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setPeerName), (PyCFunction)meth_QSslSocket_setPeerName, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setPeerPort), (PyCFunction)meth_QSslSocket_setPeerPort, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setPeerVerifyDepth), meth_QSslSocket_setPeerVerifyDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setPeerVerifyDepth)},
    {SIP_MLNAME_CAST(sipName_setPeerVerifyMode), meth_QSslSocket_setPeerVerifyMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setPeerVerifyMode)},
    {SIP_MLNAME_CAST(sipName_setPeerVerifyName), meth_QSslSocket_setPeerVerifyName, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setPeerVerifyName)},
    {SIP_MLNAME_CAST(sipName_setPrivateKey), (PyCFunction)meth_QSslSocket_setPrivateKey, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_setPrivateKey)},
    {SIP_MLNAME_CAST(sipName_setProtocol), meth_QSslSocket_setProtocol, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setProtocol)},
    {SIP_MLNAME_CAST(sipName_setReadBufferSize), meth_QSslSocket_setReadBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setReadBufferSize)},
    {SIP_MLNAME_CAST(sipName_setSocketDescriptor), (PyCFunction)meth_QSslSocket_setSocketDescriptor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_setSocketDescriptor)},
    {SIP_MLNAME_CAST(sipName_setSocketError), (PyCFunction)meth_QSslSocket_setSocketError, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setSocketOption), meth_QSslSocket_setSocketOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setSocketOption)},
    {SIP_MLNAME_CAST(sipName_setSocketState), (PyCFunction)meth_QSslSocket_setSocketState, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setSslConfiguration), meth_QSslSocket_setSslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_setSslConfiguration)},
    {SIP_MLNAME_CAST(sipName_socketOption), meth_QSslSocket_socketOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_socketOption)},
    {SIP_MLNAME_CAST(sipName_sslConfiguration), meth_QSslSocket_sslConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_sslConfiguration)},
    {SIP_MLNAME_CAST(sipName_sslErrors), meth_QSslSocket_sslErrors, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_sslErrors)},
    {SIP_MLNAME_CAST(sipName_sslLibraryBuildVersionNumber), meth_QSslSocket_sslLibraryBuildVersionNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_sslLibraryBuildVersionNumber)},
    {SIP_MLNAME_CAST(sipName_sslLibraryBuildVersionString), meth_QSslSocket_sslLibraryBuildVersionString, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_sslLibraryBuildVersionString)},
    {SIP_MLNAME_CAST(sipName_sslLibraryVersionNumber), meth_QSslSocket_sslLibraryVersionNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_sslLibraryVersionNumber)},
    {SIP_MLNAME_CAST(sipName_sslLibraryVersionString), meth_QSslSocket_sslLibraryVersionString, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_sslLibraryVersionString)},
    {SIP_MLNAME_CAST(sipName_startClientEncryption), meth_QSslSocket_startClientEncryption, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_startClientEncryption)},
    {SIP_MLNAME_CAST(sipName_startServerEncryption), meth_QSslSocket_startServerEncryption, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_startServerEncryption)},
    {SIP_MLNAME_CAST(sipName_supportedCiphers), meth_QSslSocket_supportedCiphers, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_supportedCiphers)},
    {SIP_MLNAME_CAST(sipName_supportsSsl), meth_QSslSocket_supportsSsl, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_supportsSsl)},
    {SIP_MLNAME_CAST(sipName_systemCaCertificates), meth_QSslSocket_systemCaCertificates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslSocket_systemCaCertificates)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QSslSocket_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_waitForBytesWritten), (PyCFunction)meth_QSslSocket_waitForBytesWritten, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_waitForBytesWritten)},
    {SIP_MLNAME_CAST(sipName_waitForConnected), (PyCFunction)meth_QSslSocket_waitForConnected, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_waitForConnected)},
    {SIP_MLNAME_CAST(sipName_waitForDisconnected), (PyCFunction)meth_QSslSocket_waitForDisconnected, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_waitForDisconnected)},
    {SIP_MLNAME_CAST(sipName_waitForEncrypted), (PyCFunction)meth_QSslSocket_waitForEncrypted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_waitForEncrypted)},
    {SIP_MLNAME_CAST(sipName_waitForReadyRead), (PyCFunction)meth_QSslSocket_waitForReadyRead, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_waitForReadyRead)},
    {SIP_MLNAME_CAST(sipName_writeData), (PyCFunction)meth_QSslSocket_writeData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSslSocket_writeData)}
};

static sipEnumMemberDef enummembers_QSslSocket[] = {
    {sipName_AutoVerifyPeer, static_cast<int>(QSslSocket::AutoVerifyPeer), 111},
    {sipName_QueryPeer, static_cast<int>(QSslSocket::QueryPeer), 111},
    {sipName_SslClientMode, static_cast<int>(QSslSocket::SslClientMode), 112},
    {sipName_SslServerMode, static_cast<int>(QSslSocket::SslServerMode), 112},
    {sipName_UnencryptedMode, static_cast<int>(QSslSocket::UnencryptedMode), 112},
    {sipName_VerifyNone, static_cast<int>(QSslSocket::VerifyNone), 111},
    {sipName_VerifyPeer, static_cast<int>(QSslSocket::VerifyPeer), 111},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSslSocket[] = {
    {"encryptedBytesWritten(qint64)", "\1QSslSocket.encryptedBytesWritten[int]", 0, 0},
    {"peerVerifyError(QSslError)", "\1QSslSocket.peerVerifyError[QSslError]", 0, 0},
    {"modeChanged(QSslSocket::SslMode)", "\1QSslSocket.modeChanged[QSslSocket.SslMode]", 0, 0},
    {"encrypted()", "\1QSslSocket.encrypted", 0, 0},
    {"sslErrors(QList<QSslError>)", "\1QSslSocket.sslErrors[list-of-QSslError]", &methods_QSslSocket[71], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QSslSocket, "\1QSslSocket(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QSslSocket = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSslSocket,
        {0}
    },
    {
        sipNameNr_QSslSocket,
        {0, 0, 1},
        88, methods_QSslSocket,
        7, enummembers_QSslSocket,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSslSocket,
    -1,
    -1,
    supers_QSslSocket,
    0,
    init_type_QSslSocket,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSslSocket,
    0,
    0,
    0,
    release_QSslSocket,
    cast_QSslSocket,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSslSocket::staticMetaObject,
    0,
    signals_QSslSocket,
    0
};
