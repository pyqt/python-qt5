/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:36 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslconfiguration.sip"
#include <qsslconfiguration.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslConfiguration.cpp"

#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qssl.sip"
#include <qssl.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslcertificate.sip"
#include <qsslcertificate.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslcipher.sip"
#include <qsslcipher.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslkey.sip"
#include <qsslkey.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslConfiguration.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslsocket.sip"
#include <qsslsocket.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslConfiguration.cpp"


PyDoc_STRVAR(doc_QSslConfiguration_isNull, "QSslConfiguration.isNull() -> bool");

extern "C" {static PyObject *meth_QSslConfiguration_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_isNull, doc_QSslConfiguration_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_protocol, "QSslConfiguration.protocol() -> QSsl.SslProtocol");

extern "C" {static PyObject *meth_QSslConfiguration_protocol(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_protocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QSsl::SslProtocol sipRes;

            sipRes = sipCpp->protocol();

            return sipConvertFromEnum(sipRes,sipType_QSsl_SslProtocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_protocol, doc_QSslConfiguration_protocol);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_setProtocol, "QSslConfiguration.setProtocol(QSsl.SslProtocol)");

extern "C" {static PyObject *meth_QSslConfiguration_setProtocol(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setProtocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSsl::SslProtocol a0;
        QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSsl_SslProtocol, &a0))
        {
            sipCpp->setProtocol(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setProtocol, doc_QSslConfiguration_setProtocol);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_peerVerifyMode, "QSslConfiguration.peerVerifyMode() -> QSslSocket.PeerVerifyMode");

extern "C" {static PyObject *meth_QSslConfiguration_peerVerifyMode(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_peerVerifyMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QSslSocket::PeerVerifyMode sipRes;

            sipRes = sipCpp->peerVerifyMode();

            return sipConvertFromEnum(sipRes,sipType_QSslSocket_PeerVerifyMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_peerVerifyMode, doc_QSslConfiguration_peerVerifyMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_setPeerVerifyMode, "QSslConfiguration.setPeerVerifyMode(QSslSocket.PeerVerifyMode)");

extern "C" {static PyObject *meth_QSslConfiguration_setPeerVerifyMode(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setPeerVerifyMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslSocket::PeerVerifyMode a0;
        QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSslSocket_PeerVerifyMode, &a0))
        {
            sipCpp->setPeerVerifyMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setPeerVerifyMode, doc_QSslConfiguration_setPeerVerifyMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_peerVerifyDepth, "QSslConfiguration.peerVerifyDepth() -> int");

extern "C" {static PyObject *meth_QSslConfiguration_peerVerifyDepth(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_peerVerifyDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->peerVerifyDepth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_peerVerifyDepth, doc_QSslConfiguration_peerVerifyDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_setPeerVerifyDepth, "QSslConfiguration.setPeerVerifyDepth(int)");

extern "C" {static PyObject *meth_QSslConfiguration_setPeerVerifyDepth(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setPeerVerifyDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSslConfiguration, &sipCpp, &a0))
        {
            sipCpp->setPeerVerifyDepth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setPeerVerifyDepth, doc_QSslConfiguration_setPeerVerifyDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_localCertificate, "QSslConfiguration.localCertificate() -> QSslCertificate");

extern "C" {static PyObject *meth_QSslConfiguration_localCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_localCertificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QSslCertificate*sipRes;

            sipRes = new QSslCertificate(sipCpp->localCertificate());

            return sipConvertFromNewType(sipRes,sipType_QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_localCertificate, doc_QSslConfiguration_localCertificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_setLocalCertificate, "QSslConfiguration.setLocalCertificate(QSslCertificate)");

extern "C" {static PyObject *meth_QSslConfiguration_setLocalCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setLocalCertificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslCertificate* a0;
        QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSslCertificate, &a0))
        {
            sipCpp->setLocalCertificate(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setLocalCertificate, doc_QSslConfiguration_setLocalCertificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_peerCertificate, "QSslConfiguration.peerCertificate() -> QSslCertificate");

extern "C" {static PyObject *meth_QSslConfiguration_peerCertificate(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_peerCertificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QSslCertificate*sipRes;

            sipRes = new QSslCertificate(sipCpp->peerCertificate());

            return sipConvertFromNewType(sipRes,sipType_QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_peerCertificate, doc_QSslConfiguration_peerCertificate);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_peerCertificateChain, "QSslConfiguration.peerCertificateChain() -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslConfiguration_peerCertificateChain(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_peerCertificateChain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QList<QSslCertificate>*sipRes;

            sipRes = new QList<QSslCertificate>(sipCpp->peerCertificateChain());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_peerCertificateChain, doc_QSslConfiguration_peerCertificateChain);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_sessionCipher, "QSslConfiguration.sessionCipher() -> QSslCipher");

extern "C" {static PyObject *meth_QSslConfiguration_sessionCipher(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_sessionCipher(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QSslCipher*sipRes;

            sipRes = new QSslCipher(sipCpp->sessionCipher());

            return sipConvertFromNewType(sipRes,sipType_QSslCipher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_sessionCipher, doc_QSslConfiguration_sessionCipher);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_privateKey, "QSslConfiguration.privateKey() -> QSslKey");

extern "C" {static PyObject *meth_QSslConfiguration_privateKey(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_privateKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QSslKey*sipRes;

            sipRes = new QSslKey(sipCpp->privateKey());

            return sipConvertFromNewType(sipRes,sipType_QSslKey,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_privateKey, doc_QSslConfiguration_privateKey);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_setPrivateKey, "QSslConfiguration.setPrivateKey(QSslKey)");

extern "C" {static PyObject *meth_QSslConfiguration_setPrivateKey(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setPrivateKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslKey* a0;
        QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSslKey, &a0))
        {
            sipCpp->setPrivateKey(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setPrivateKey, doc_QSslConfiguration_setPrivateKey);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_ciphers, "QSslConfiguration.ciphers() -> list-of-QSslCipher");

extern "C" {static PyObject *meth_QSslConfiguration_ciphers(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_ciphers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QList<QSslCipher>*sipRes;

            sipRes = new QList<QSslCipher>(sipCpp->ciphers());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCipher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_ciphers, doc_QSslConfiguration_ciphers);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_setCiphers, "QSslConfiguration.setCiphers(list-of-QSslCipher)");

extern "C" {static PyObject *meth_QSslConfiguration_setCiphers(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setCiphers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslCipher>* a0;
        int a0State = 0;
        QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QList_0100QSslCipher,&a0, &a0State))
        {
            sipCpp->setCiphers(*a0);
            sipReleaseType(const_cast<QList<QSslCipher> *>(a0),sipType_QList_0100QSslCipher,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setCiphers, doc_QSslConfiguration_setCiphers);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_caCertificates, "QSslConfiguration.caCertificates() -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslConfiguration_caCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_caCertificates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QList<QSslCertificate>*sipRes;

            sipRes = new QList<QSslCertificate>(sipCpp->caCertificates());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_caCertificates, doc_QSslConfiguration_caCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_setCaCertificates, "QSslConfiguration.setCaCertificates(list-of-QSslCertificate)");

extern "C" {static PyObject *meth_QSslConfiguration_setCaCertificates(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setCaCertificates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslCertificate>* a0;
        int a0State = 0;
        QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QList_0100QSslCertificate,&a0, &a0State))
        {
            sipCpp->setCaCertificates(*a0);
            sipReleaseType(const_cast<QList<QSslCertificate> *>(a0),sipType_QList_0100QSslCertificate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setCaCertificates, doc_QSslConfiguration_setCaCertificates);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_defaultConfiguration, "QSslConfiguration.defaultConfiguration() -> QSslConfiguration");

extern "C" {static PyObject *meth_QSslConfiguration_defaultConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_defaultConfiguration(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QSslConfiguration*sipRes;

            sipRes = new QSslConfiguration(QSslConfiguration::defaultConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QSslConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_defaultConfiguration, doc_QSslConfiguration_defaultConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_setDefaultConfiguration, "QSslConfiguration.setDefaultConfiguration(QSslConfiguration)");

extern "C" {static PyObject *meth_QSslConfiguration_setDefaultConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setDefaultConfiguration(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QSslConfiguration, &a0))
        {
            QSslConfiguration::setDefaultConfiguration(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setDefaultConfiguration, doc_QSslConfiguration_setDefaultConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_setSslOption, "QSslConfiguration.setSslOption(QSsl.SslOption, bool)");

extern "C" {static PyObject *meth_QSslConfiguration_setSslOption(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setSslOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSsl::SslOption a0;
        bool a1;
        QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEb", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSsl_SslOption, &a0, &a1))
        {
            sipCpp->setSslOption(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setSslOption, doc_QSslConfiguration_setSslOption);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_testSslOption, "QSslConfiguration.testSslOption(QSsl.SslOption) -> bool");

extern "C" {static PyObject *meth_QSslConfiguration_testSslOption(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_testSslOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSsl::SslOption a0;
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSsl_SslOption, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->testSslOption(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_testSslOption, doc_QSslConfiguration_testSslOption);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_swap, "QSslConfiguration.swap(QSslConfiguration)");

extern "C" {static PyObject *meth_QSslConfiguration_swap(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSslConfiguration* a0;
        QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QSslConfiguration, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_swap, doc_QSslConfiguration_swap);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_localCertificateChain, "QSslConfiguration.localCertificateChain() -> list-of-QSslCertificate");

extern "C" {static PyObject *meth_QSslConfiguration_localCertificateChain(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_localCertificateChain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QList<QSslCertificate>*sipRes;

            sipRes = new QList<QSslCertificate>(sipCpp->localCertificateChain());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSslCertificate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_localCertificateChain, doc_QSslConfiguration_localCertificateChain);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_setLocalCertificateChain, "QSslConfiguration.setLocalCertificateChain(list-of-QSslCertificate)");

extern "C" {static PyObject *meth_QSslConfiguration_setLocalCertificateChain(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setLocalCertificateChain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QSslCertificate>* a0;
        int a0State = 0;
        QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QList_0100QSslCertificate,&a0, &a0State))
        {
            sipCpp->setLocalCertificateChain(*a0);
            sipReleaseType(const_cast<QList<QSslCertificate> *>(a0),sipType_QList_0100QSslCertificate,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setLocalCertificateChain, doc_QSslConfiguration_setLocalCertificateChain);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_sessionTicket, "QSslConfiguration.sessionTicket() -> QByteArray");

extern "C" {static PyObject *meth_QSslConfiguration_sessionTicket(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_sessionTicket(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->sessionTicket());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_sessionTicket, doc_QSslConfiguration_sessionTicket);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_setSessionTicket, "QSslConfiguration.setSessionTicket(QByteArray)");

extern "C" {static PyObject *meth_QSslConfiguration_setSessionTicket(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setSessionTicket(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->setSessionTicket(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setSessionTicket, doc_QSslConfiguration_setSessionTicket);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_sessionTicketLifeTimeHint, "QSslConfiguration.sessionTicketLifeTimeHint() -> int");

extern "C" {static PyObject *meth_QSslConfiguration_sessionTicketLifeTimeHint(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_sessionTicketLifeTimeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sessionTicketLifeTimeHint();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_sessionTicketLifeTimeHint, doc_QSslConfiguration_sessionTicketLifeTimeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_setAllowedNextProtocols, "QSslConfiguration.setAllowedNextProtocols(list-of-QByteArray)");

extern "C" {static PyObject *meth_QSslConfiguration_setAllowedNextProtocols(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_setAllowedNextProtocols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QList<QByteArray>* a0;
        int a0State = 0;
        QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSslConfiguration, &sipCpp, sipType_QList_0100QByteArray,&a0, &a0State))
        {
            sipCpp->setAllowedNextProtocols(*a0);
            sipReleaseType(a0,sipType_QList_0100QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_setAllowedNextProtocols, doc_QSslConfiguration_setAllowedNextProtocols);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_allowedNextProtocols, "QSslConfiguration.allowedNextProtocols() -> list-of-QByteArray");

extern "C" {static PyObject *meth_QSslConfiguration_allowedNextProtocols(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_allowedNextProtocols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QList<QByteArray>*sipRes;

            sipRes = new QList<QByteArray>(sipCpp->allowedNextProtocols());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_allowedNextProtocols, doc_QSslConfiguration_allowedNextProtocols);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_nextNegotiatedProtocol, "QSslConfiguration.nextNegotiatedProtocol() -> QByteArray");

extern "C" {static PyObject *meth_QSslConfiguration_nextNegotiatedProtocol(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_nextNegotiatedProtocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->nextNegotiatedProtocol());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_nextNegotiatedProtocol, doc_QSslConfiguration_nextNegotiatedProtocol);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_nextProtocolNegotiationStatus, "QSslConfiguration.nextProtocolNegotiationStatus() -> QSslConfiguration.NextProtocolNegotiationStatus");

extern "C" {static PyObject *meth_QSslConfiguration_nextProtocolNegotiationStatus(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_nextProtocolNegotiationStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QSslConfiguration::NextProtocolNegotiationStatus sipRes;

            sipRes = sipCpp->nextProtocolNegotiationStatus();

            return sipConvertFromEnum(sipRes,sipType_QSslConfiguration_NextProtocolNegotiationStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_nextProtocolNegotiationStatus, doc_QSslConfiguration_nextProtocolNegotiationStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QSslConfiguration_sessionProtocol, "QSslConfiguration.sessionProtocol() -> QSsl.SslProtocol");

extern "C" {static PyObject *meth_QSslConfiguration_sessionProtocol(PyObject *, PyObject *);}
static PyObject *meth_QSslConfiguration_sessionProtocol(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSslConfiguration, &sipCpp))
        {
            QSsl::SslProtocol sipRes;

            sipRes = sipCpp->sessionProtocol();

            return sipConvertFromEnum(sipRes,sipType_QSsl_SslProtocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSslConfiguration, sipName_sessionProtocol, doc_QSslConfiguration_sessionProtocol);

    return NULL;
}


extern "C" {static PyObject *slot_QSslConfiguration___ne__(PyObject *,PyObject *);}
static PyObject *slot_QSslConfiguration___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QSslConfiguration *sipCpp = reinterpret_cast<QSslConfiguration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslConfiguration));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslConfiguration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QSslConfiguration::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,ne_slot,sipType_QSslConfiguration,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QSslConfiguration___eq__(PyObject *,PyObject *);}
static PyObject *slot_QSslConfiguration___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QSslConfiguration *sipCpp = reinterpret_cast<QSslConfiguration *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QSslConfiguration));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QSslConfiguration* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QSslConfiguration, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QSslConfiguration::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,eq_slot,sipType_QSslConfiguration,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSslConfiguration(void *, const sipTypeDef *);}
static void *cast_QSslConfiguration(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QSslConfiguration)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSslConfiguration(void *, int);}
static void release_QSslConfiguration(void *sipCppV,int)
{
    delete reinterpret_cast<QSslConfiguration *>(sipCppV);
}


extern "C" {static void assign_QSslConfiguration(void *, SIP_SSIZE_T, const void *);}
static void assign_QSslConfiguration(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QSslConfiguration *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QSslConfiguration *>(sipSrc);
}


extern "C" {static void *array_QSslConfiguration(SIP_SSIZE_T);}
static void *array_QSslConfiguration(SIP_SSIZE_T sipNrElem)
{
    return new QSslConfiguration[sipNrElem];
}


extern "C" {static void *copy_QSslConfiguration(const void *, SIP_SSIZE_T);}
static void *copy_QSslConfiguration(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSslConfiguration(reinterpret_cast<const QSslConfiguration *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSslConfiguration(sipSimpleWrapper *);}
static void dealloc_QSslConfiguration(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QSslConfiguration(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QSslConfiguration(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSslConfiguration(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QSslConfiguration *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QSslConfiguration();

            return sipCpp;
        }
    }

    {
        const QSslConfiguration* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSslConfiguration, &a0))
        {
            sipCpp = new QSslConfiguration(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QSslConfiguration[] = {
    {(void *)slot_QSslConfiguration___ne__, ne_slot},
    {(void *)slot_QSslConfiguration___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QSslConfiguration[] = {
    {SIP_MLNAME_CAST(sipName_allowedNextProtocols), meth_QSslConfiguration_allowedNextProtocols, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_allowedNextProtocols)},
    {SIP_MLNAME_CAST(sipName_caCertificates), meth_QSslConfiguration_caCertificates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_caCertificates)},
    {SIP_MLNAME_CAST(sipName_ciphers), meth_QSslConfiguration_ciphers, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_ciphers)},
    {SIP_MLNAME_CAST(sipName_defaultConfiguration), meth_QSslConfiguration_defaultConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_defaultConfiguration)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QSslConfiguration_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_isNull)},
    {SIP_MLNAME_CAST(sipName_localCertificate), meth_QSslConfiguration_localCertificate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_localCertificate)},
    {SIP_MLNAME_CAST(sipName_localCertificateChain), meth_QSslConfiguration_localCertificateChain, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_localCertificateChain)},
    {SIP_MLNAME_CAST(sipName_nextNegotiatedProtocol), meth_QSslConfiguration_nextNegotiatedProtocol, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_nextNegotiatedProtocol)},
    {SIP_MLNAME_CAST(sipName_nextProtocolNegotiationStatus), meth_QSslConfiguration_nextProtocolNegotiationStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_nextProtocolNegotiationStatus)},
    {SIP_MLNAME_CAST(sipName_peerCertificate), meth_QSslConfiguration_peerCertificate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_peerCertificate)},
    {SIP_MLNAME_CAST(sipName_peerCertificateChain), meth_QSslConfiguration_peerCertificateChain, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_peerCertificateChain)},
    {SIP_MLNAME_CAST(sipName_peerVerifyDepth), meth_QSslConfiguration_peerVerifyDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_peerVerifyDepth)},
    {SIP_MLNAME_CAST(sipName_peerVerifyMode), meth_QSslConfiguration_peerVerifyMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_peerVerifyMode)},
    {SIP_MLNAME_CAST(sipName_privateKey), meth_QSslConfiguration_privateKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_privateKey)},
    {SIP_MLNAME_CAST(sipName_protocol), meth_QSslConfiguration_protocol, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_protocol)},
    {SIP_MLNAME_CAST(sipName_sessionCipher), meth_QSslConfiguration_sessionCipher, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_sessionCipher)},
    {SIP_MLNAME_CAST(sipName_sessionProtocol), meth_QSslConfiguration_sessionProtocol, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_sessionProtocol)},
    {SIP_MLNAME_CAST(sipName_sessionTicket), meth_QSslConfiguration_sessionTicket, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_sessionTicket)},
    {SIP_MLNAME_CAST(sipName_sessionTicketLifeTimeHint), meth_QSslConfiguration_sessionTicketLifeTimeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_sessionTicketLifeTimeHint)},
    {SIP_MLNAME_CAST(sipName_setAllowedNextProtocols), meth_QSslConfiguration_setAllowedNextProtocols, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_setAllowedNextProtocols)},
    {SIP_MLNAME_CAST(sipName_setCaCertificates), meth_QSslConfiguration_setCaCertificates, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_setCaCertificates)},
    {SIP_MLNAME_CAST(sipName_setCiphers), meth_QSslConfiguration_setCiphers, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_setCiphers)},
    {SIP_MLNAME_CAST(sipName_setDefaultConfiguration), meth_QSslConfiguration_setDefaultConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_setDefaultConfiguration)},
    {SIP_MLNAME_CAST(sipName_setLocalCertificate), meth_QSslConfiguration_setLocalCertificate, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_setLocalCertificate)},
    {SIP_MLNAME_CAST(sipName_setLocalCertificateChain), meth_QSslConfiguration_setLocalCertificateChain, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_setLocalCertificateChain)},
    {SIP_MLNAME_CAST(sipName_setPeerVerifyDepth), meth_QSslConfiguration_setPeerVerifyDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_setPeerVerifyDepth)},
    {SIP_MLNAME_CAST(sipName_setPeerVerifyMode), meth_QSslConfiguration_setPeerVerifyMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_setPeerVerifyMode)},
    {SIP_MLNAME_CAST(sipName_setPrivateKey), meth_QSslConfiguration_setPrivateKey, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_setPrivateKey)},
    {SIP_MLNAME_CAST(sipName_setProtocol), meth_QSslConfiguration_setProtocol, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_setProtocol)},
    {SIP_MLNAME_CAST(sipName_setSessionTicket), meth_QSslConfiguration_setSessionTicket, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_setSessionTicket)},
    {SIP_MLNAME_CAST(sipName_setSslOption), meth_QSslConfiguration_setSslOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_setSslOption)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QSslConfiguration_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_swap)},
    {SIP_MLNAME_CAST(sipName_testSslOption), meth_QSslConfiguration_testSslOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QSslConfiguration_testSslOption)}
};

static sipEnumMemberDef enummembers_QSslConfiguration[] = {
    {sipName_NextProtocolNegotiationNegotiated, static_cast<int>(QSslConfiguration::NextProtocolNegotiationNegotiated), 106},
    {sipName_NextProtocolNegotiationNone, static_cast<int>(QSslConfiguration::NextProtocolNegotiationNone), 106},
    {sipName_NextProtocolNegotiationUnsupported, static_cast<int>(QSslConfiguration::NextProtocolNegotiationUnsupported), 106},
};


extern "C" {static PyObject *varget_QSslConfiguration_NextProtocolHttp1_1(void *, PyObject *, PyObject *);}
static PyObject *varget_QSslConfiguration_NextProtocolHttp1_1(void *, PyObject *, PyObject *)
{
    PyObject *sipPy;
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslconfiguration.sip"
        sipPy = SIPBytes_FromString(QSslConfiguration::NextProtocolHttp1_1);
#line 1160 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslConfiguration.cpp"

    return sipPy;
}


extern "C" {static PyObject *varget_QSslConfiguration_NextProtocolSpdy3_0(void *, PyObject *, PyObject *);}
static PyObject *varget_QSslConfiguration_NextProtocolSpdy3_0(void *, PyObject *, PyObject *)
{
    PyObject *sipPy;
#line 100 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qsslconfiguration.sip"
        sipPy = SIPBytes_FromString(QSslConfiguration::NextProtocolSpdy3_0);
#line 1172 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQSslConfiguration.cpp"

    return sipPy;
}

sipVariableDef variables_QSslConfiguration[] = {
    {ClassVariable, sipName_NextProtocolHttp1_1, (PyMethodDef *)varget_QSslConfiguration_NextProtocolHttp1_1, NULL, NULL, NULL},
    {ClassVariable, sipName_NextProtocolSpdy3_0, (PyMethodDef *)varget_QSslConfiguration_NextProtocolSpdy3_0, NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_QSslConfiguration, "\1QSslConfiguration()\n"
    "QSslConfiguration(QSslConfiguration)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QSslConfiguration = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSslConfiguration,
        {0}
    },
    {
        sipNameNr_QSslConfiguration,
        {0, 0, 1},
        33, methods_QSslConfiguration,
        3, enummembers_QSslConfiguration,
        2, variables_QSslConfiguration,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSslConfiguration,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QSslConfiguration,
    init_type_QSslConfiguration,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSslConfiguration,
    assign_QSslConfiguration,
    array_QSslConfiguration,
    copy_QSslConfiguration,
    release_QSslConfiguration,
    cast_QSslConfiguration,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
