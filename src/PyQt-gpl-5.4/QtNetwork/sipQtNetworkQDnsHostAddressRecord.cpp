/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:36 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qdnslookup.sip"
#include <qdnslookup.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQDnsHostAddressRecord.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQDnsHostAddressRecord.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQDnsHostAddressRecord.cpp"


PyDoc_STRVAR(doc_QDnsHostAddressRecord_swap, "QDnsHostAddressRecord.swap(QDnsHostAddressRecord)");

extern "C" {static PyObject *meth_QDnsHostAddressRecord_swap(PyObject *, PyObject *);}
static PyObject *meth_QDnsHostAddressRecord_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDnsHostAddressRecord* a0;
        QDnsHostAddressRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDnsHostAddressRecord, &sipCpp, sipType_QDnsHostAddressRecord, &a0))
        {
            sipCpp->swap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsHostAddressRecord, sipName_swap, doc_QDnsHostAddressRecord_swap);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsHostAddressRecord_name, "QDnsHostAddressRecord.name() -> str");

extern "C" {static PyObject *meth_QDnsHostAddressRecord_name(PyObject *, PyObject *);}
static PyObject *meth_QDnsHostAddressRecord_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsHostAddressRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsHostAddressRecord, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->name());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsHostAddressRecord, sipName_name, doc_QDnsHostAddressRecord_name);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsHostAddressRecord_timeToLive, "QDnsHostAddressRecord.timeToLive() -> int");

extern "C" {static PyObject *meth_QDnsHostAddressRecord_timeToLive(PyObject *, PyObject *);}
static PyObject *meth_QDnsHostAddressRecord_timeToLive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsHostAddressRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsHostAddressRecord, &sipCpp))
        {
            quint32 sipRes;

            sipRes = sipCpp->timeToLive();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsHostAddressRecord, sipName_timeToLive, doc_QDnsHostAddressRecord_timeToLive);

    return NULL;
}


PyDoc_STRVAR(doc_QDnsHostAddressRecord_value, "QDnsHostAddressRecord.value() -> QHostAddress");

extern "C" {static PyObject *meth_QDnsHostAddressRecord_value(PyObject *, PyObject *);}
static PyObject *meth_QDnsHostAddressRecord_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDnsHostAddressRecord *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDnsHostAddressRecord, &sipCpp))
        {
            QHostAddress*sipRes;

            sipRes = new QHostAddress(sipCpp->value());

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDnsHostAddressRecord, sipName_value, doc_QDnsHostAddressRecord_value);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDnsHostAddressRecord(void *, const sipTypeDef *);}
static void *cast_QDnsHostAddressRecord(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDnsHostAddressRecord)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDnsHostAddressRecord(void *, int);}
static void release_QDnsHostAddressRecord(void *sipCppV,int)
{
    delete reinterpret_cast<QDnsHostAddressRecord *>(sipCppV);
}


extern "C" {static void assign_QDnsHostAddressRecord(void *, SIP_SSIZE_T, const void *);}
static void assign_QDnsHostAddressRecord(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDnsHostAddressRecord *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDnsHostAddressRecord *>(sipSrc);
}


extern "C" {static void *array_QDnsHostAddressRecord(SIP_SSIZE_T);}
static void *array_QDnsHostAddressRecord(SIP_SSIZE_T sipNrElem)
{
    return new QDnsHostAddressRecord[sipNrElem];
}


extern "C" {static void *copy_QDnsHostAddressRecord(const void *, SIP_SSIZE_T);}
static void *copy_QDnsHostAddressRecord(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDnsHostAddressRecord(reinterpret_cast<const QDnsHostAddressRecord *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDnsHostAddressRecord(sipSimpleWrapper *);}
static void dealloc_QDnsHostAddressRecord(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDnsHostAddressRecord(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QDnsHostAddressRecord(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QDnsHostAddressRecord(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QDnsHostAddressRecord *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QDnsHostAddressRecord();

            return sipCpp;
        }
    }

    {
        const QDnsHostAddressRecord* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QDnsHostAddressRecord, &a0))
        {
            sipCpp = new QDnsHostAddressRecord(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QDnsHostAddressRecord[] = {
    {SIP_MLNAME_CAST(sipName_name), meth_QDnsHostAddressRecord_name, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsHostAddressRecord_name)},
    {SIP_MLNAME_CAST(sipName_swap), meth_QDnsHostAddressRecord_swap, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsHostAddressRecord_swap)},
    {SIP_MLNAME_CAST(sipName_timeToLive), meth_QDnsHostAddressRecord_timeToLive, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsHostAddressRecord_timeToLive)},
    {SIP_MLNAME_CAST(sipName_value), meth_QDnsHostAddressRecord_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QDnsHostAddressRecord_value)}
};

PyDoc_STRVAR(doc_QDnsHostAddressRecord, "\1QDnsHostAddressRecord()\n"
    "QDnsHostAddressRecord(QDnsHostAddressRecord)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QDnsHostAddressRecord = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QDnsHostAddressRecord,
        {0}
    },
    {
        sipNameNr_QDnsHostAddressRecord,
        {0, 0, 1},
        4, methods_QDnsHostAddressRecord,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QDnsHostAddressRecord,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QDnsHostAddressRecord,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDnsHostAddressRecord,
    assign_QDnsHostAddressRecord,
    array_QDnsHostAddressRecord,
    copy_QDnsHostAddressRecord,
    release_QDnsHostAddressRecord,
    cast_QDnsHostAddressRecord,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
