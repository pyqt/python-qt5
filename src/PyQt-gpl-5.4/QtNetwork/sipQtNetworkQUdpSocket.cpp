/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:36 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qudpsocket.sip"
#include <qudpsocket.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 53 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkinterface.sip"
#include <qnetworkinterface.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 163 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 30 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"


class sipQUdpSocket : public QUdpSocket
{
public:
    sipQUdpSocket(QObject*);
    virtual ~sipQUdpSocket();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtect_setOpenMode(QIODevice::OpenMode);
    void sipProtect_setErrorString(const QString&);
    qint64 sipProtectVirt_readData(bool,char*,qint64);
    qint64 sipProtectVirt_readLineData(bool,char*,qint64);
    qint64 sipProtectVirt_writeData(bool,const char*,PY_LONG_LONG);
    void sipProtect_setSocketState(QAbstractSocket::SocketState);
    void sipProtect_setSocketError(QAbstractSocket::SocketError);
    void sipProtect_setLocalPort(quint16);
    void sipProtect_setLocalAddress(const QHostAddress&);
    void sipProtect_setPeerPort(quint16);
    void sipProtect_setPeerAddress(const QHostAddress&);
    void sipProtect_setPeerName(const QString&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool reset();
    bool seek(qint64);
    qint64 size() const;
    qint64 pos() const;
    bool open(QIODevice::OpenMode);
    void resume();
    QVariant socketOption(QAbstractSocket::SocketOption);
    void setSocketOption(QAbstractSocket::SocketOption,const QVariant&);
    qint64 writeData(const char*,PY_LONG_LONG);
    qint64 readLineData(char*,qint64);
    qint64 readData(char*,qint64);
    bool waitForDisconnected(int);
    bool waitForBytesWritten(int);
    bool waitForReadyRead(int);
    bool waitForConnected(int);
    bool atEnd() const;
    bool isSequential() const;
    void close();
    qintptr socketDescriptor() const;
    bool setSocketDescriptor(qintptr,QAbstractSocket::SocketState,QIODevice::OpenMode);
    void setReadBufferSize(qint64);
    bool canReadLine() const;
    qint64 bytesToWrite() const;
    qint64 bytesAvailable() const;
    void disconnectFromHost();
    void connectToHost(const QHostAddress&,quint16,QIODevice::OpenMode);
    void connectToHost(const QString&,quint16,QIODevice::OpenMode,QAbstractSocket::NetworkLayerProtocol);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQUdpSocket(const sipQUdpSocket &);
    sipQUdpSocket &operator = (const sipQUdpSocket &);

    char sipPyMethods[34];
};

sipQUdpSocket::sipQUdpSocket(QObject*a0): QUdpSocket(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQUdpSocket::~sipQUdpSocket()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQUdpSocket::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QUdpSocket);
}

int sipQUdpSocket::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QUdpSocket::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QUdpSocket,_c,_id,_a);

    return _id;
}

void *sipQUdpSocket::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QUdpSocket, _clname, &sipCpp) ? sipCpp : QUdpSocket::qt_metacast(_clname));
}

void sipQUdpSocket::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QUdpSocket::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQUdpSocket::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QUdpSocket::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQUdpSocket::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QUdpSocket::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQUdpSocket::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QUdpSocket::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQUdpSocket::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QUdpSocket::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQUdpSocket::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QUdpSocket::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQUdpSocket::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QUdpSocket::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQUdpSocket::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
        return QUdpSocket::reset();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQUdpSocket::seek(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_seek);

    if (!sipMeth)
        return QUdpSocket::seek(a0);

    typedef bool (*sipVH_QtCore_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    return ((sipVH_QtCore_53)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[53]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

qint64 sipQUdpSocket::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QUdpSocket::size();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQUdpSocket::pos() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_pos);

    if (!sipMeth)
        return QUdpSocket::pos();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQUdpSocket::open(QIODevice::OpenMode a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
        return QUdpSocket::open(a0);

    typedef bool (*sipVH_QtCore_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice::OpenMode);

    return ((sipVH_QtCore_15)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[15]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQUdpSocket::resume()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_resume);

    if (!sipMeth)
    {
        QUdpSocket::resume();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QVariant sipQUdpSocket::socketOption(QAbstractSocket::SocketOption a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_socketOption);

    if (!sipMeth)
        return QUdpSocket::socketOption(a0);

    extern QVariant sipVH_QtNetwork_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractSocket::SocketOption);

    return sipVH_QtNetwork_3(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQUdpSocket::setSocketOption(QAbstractSocket::SocketOption a0,const QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_setSocketOption);

    if (!sipMeth)
    {
        QUdpSocket::setSocketOption(a0,a1);
        return;
    }

    extern void sipVH_QtNetwork_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractSocket::SocketOption,const QVariant&);

    sipVH_QtNetwork_4(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

qint64 sipQUdpSocket::writeData(const char*a0,PY_LONG_LONG a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_writeData);

    if (!sipMeth)
        return QUdpSocket::writeData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_42)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,PY_LONG_LONG);

    return ((sipVH_QtCore_42)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[42]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

qint64 sipQUdpSocket::readLineData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_readLineData);

    if (!sipMeth)
        return QUdpSocket::readLineData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[43]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

qint64 sipQUdpSocket::readData(char*a0,qint64 a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_readData);

    if (!sipMeth)
        return QUdpSocket::readData(a0,a1);

    typedef PY_LONG_LONG (*sipVH_QtCore_43)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, char*,PY_LONG_LONG);

    return ((sipVH_QtCore_43)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[43]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQUdpSocket::waitForDisconnected(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_waitForDisconnected);

    if (!sipMeth)
        return QUdpSocket::waitForDisconnected(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQUdpSocket::waitForBytesWritten(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_waitForBytesWritten);

    if (!sipMeth)
        return QUdpSocket::waitForBytesWritten(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQUdpSocket::waitForReadyRead(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_waitForReadyRead);

    if (!sipMeth)
        return QUdpSocket::waitForReadyRead(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQUdpSocket::waitForConnected(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_waitForConnected);

    if (!sipMeth)
        return QUdpSocket::waitForConnected(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQUdpSocket::atEnd() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_atEnd);

    if (!sipMeth)
        return QUdpSocket::atEnd();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQUdpSocket::isSequential() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_isSequential);

    if (!sipMeth)
        return QUdpSocket::isSequential();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQUdpSocket::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_close);

    if (!sipMeth)
    {
        QUdpSocket::close();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qintptr sipQUdpSocket::socketDescriptor() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_socketDescriptor);

    if (!sipMeth)
        return QUdpSocket::socketDescriptor();

    extern qintptr sipVH_QtNetwork_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_24(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQUdpSocket::setSocketDescriptor(qintptr a0,QAbstractSocket::SocketState a1,QIODevice::OpenMode a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_setSocketDescriptor);

    if (!sipMeth)
        return QUdpSocket::setSocketDescriptor(a0,a1,a2);

    extern bool sipVH_QtNetwork_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, qintptr,QAbstractSocket::SocketState,QIODevice::OpenMode);

    return sipVH_QtNetwork_6(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQUdpSocket::setReadBufferSize(qint64 a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_setReadBufferSize);

    if (!sipMeth)
    {
        QUdpSocket::setReadBufferSize(a0);
        return;
    }

    extern void sipVH_QtNetwork_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, PY_LONG_LONG);

    sipVH_QtNetwork_5(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQUdpSocket::canReadLine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_canReadLine);

    if (!sipMeth)
        return QUdpSocket::canReadLine();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQUdpSocket::bytesToWrite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_bytesToWrite);

    if (!sipMeth)
        return QUdpSocket::bytesToWrite();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

qint64 sipQUdpSocket::bytesAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_bytesAvailable);

    if (!sipMeth)
        return QUdpSocket::bytesAvailable();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQUdpSocket::disconnectFromHost()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_disconnectFromHost);

    if (!sipMeth)
    {
        QUdpSocket::disconnectFromHost();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQUdpSocket::connectToHost(const QHostAddress& a0,quint16 a1,QIODevice::OpenMode a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_connectToHost);

    if (!sipMeth)
    {
        QUdpSocket::connectToHost(a0,a1,a2);
        return;
    }

    extern void sipVH_QtNetwork_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QHostAddress&,unsigned short,QIODevice::OpenMode);

    sipVH_QtNetwork_25(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQUdpSocket::connectToHost(const QString& a0,quint16 a1,QIODevice::OpenMode a2,QAbstractSocket::NetworkLayerProtocol a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_connectToHost);

    if (!sipMeth)
    {
        QUdpSocket::connectToHost(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtNetwork_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,unsigned short,QIODevice::OpenMode,QAbstractSocket::NetworkLayerProtocol);

    sipVH_QtNetwork_2(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

QObject* sipQUdpSocket::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQUdpSocket::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQUdpSocket::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQUdpSocket::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQUdpSocket::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQUdpSocket::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQUdpSocket::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQUdpSocket::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQUdpSocket::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQUdpSocket::sipProtect_setOpenMode(QIODevice::OpenMode a0)
{
    QIODevice::setOpenMode(a0);
}

void sipQUdpSocket::sipProtect_setErrorString(const QString& a0)
{
    QIODevice::setErrorString(a0);
}

qint64 sipQUdpSocket::sipProtectVirt_readData(bool sipSelfWasArg,char*a0,qint64 a1)
{
    return (sipSelfWasArg ? QAbstractSocket::readData(a0,a1) : readData(a0,a1));
}

qint64 sipQUdpSocket::sipProtectVirt_readLineData(bool sipSelfWasArg,char*a0,qint64 a1)
{
    return (sipSelfWasArg ? QAbstractSocket::readLineData(a0,a1) : readLineData(a0,a1));
}

qint64 sipQUdpSocket::sipProtectVirt_writeData(bool sipSelfWasArg,const char*a0,PY_LONG_LONG a1)
{
    return (sipSelfWasArg ? QAbstractSocket::writeData(a0,a1) : writeData(a0,a1));
}

void sipQUdpSocket::sipProtect_setSocketState(QAbstractSocket::SocketState a0)
{
    QAbstractSocket::setSocketState(a0);
}

void sipQUdpSocket::sipProtect_setSocketError(QAbstractSocket::SocketError a0)
{
    QAbstractSocket::setSocketError(a0);
}

void sipQUdpSocket::sipProtect_setLocalPort(quint16 a0)
{
    QAbstractSocket::setLocalPort(a0);
}

void sipQUdpSocket::sipProtect_setLocalAddress(const QHostAddress& a0)
{
    QAbstractSocket::setLocalAddress(a0);
}

void sipQUdpSocket::sipProtect_setPeerPort(quint16 a0)
{
    QAbstractSocket::setPeerPort(a0);
}

void sipQUdpSocket::sipProtect_setPeerAddress(const QHostAddress& a0)
{
    QAbstractSocket::setPeerAddress(a0);
}

void sipQUdpSocket::sipProtect_setPeerName(const QString& a0)
{
    QAbstractSocket::setPeerName(a0);
}


PyDoc_STRVAR(doc_QUdpSocket_sender, "QUdpSocket.sender() -> QObject");

extern "C" {static PyObject *meth_QUdpSocket_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QUdpSocket, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 918 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_sender, doc_QUdpSocket_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_receivers, "QUdpSocket.receivers(signal) -> int");

extern "C" {static PyObject *meth_QUdpSocket_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QUdpSocket, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 977 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_receivers, doc_QUdpSocket_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_timerEvent, "QUdpSocket.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QUdpSocket_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_timerEvent, doc_QUdpSocket_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_childEvent, "QUdpSocket.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QUdpSocket_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_childEvent, doc_QUdpSocket_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_customEvent, "QUdpSocket.customEvent(QEvent)");

extern "C" {static PyObject *meth_QUdpSocket_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_customEvent, doc_QUdpSocket_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_connectNotify, "QUdpSocket.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QUdpSocket_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_connectNotify, doc_QUdpSocket_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_disconnectNotify, "QUdpSocket.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QUdpSocket_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_disconnectNotify, doc_QUdpSocket_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_senderSignalIndex, "QUdpSocket.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QUdpSocket_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QUdpSocket, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_senderSignalIndex, doc_QUdpSocket_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_isSignalConnected, "QUdpSocket.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QUdpSocket_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_isSignalConnected, doc_QUdpSocket_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_setOpenMode, "QUdpSocket.setOpenMode(QIODevice.OpenMode)");

extern "C" {static PyObject *meth_QUdpSocket_setOpenMode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_setOpenMode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice::OpenMode* a0;
        int a0State = 0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QIODevice_OpenMode, &a0, &a0State))
        {
            sipCpp->sipProtect_setOpenMode(*a0);
            sipReleaseType(a0,sipType_QIODevice_OpenMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_setOpenMode, doc_QUdpSocket_setOpenMode);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_setErrorString, "QUdpSocket.setErrorString(str)");

extern "C" {static PyObject *meth_QUdpSocket_setErrorString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_setErrorString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->sipProtect_setErrorString(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_setErrorString, doc_QUdpSocket_setErrorString);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_readData, "QUdpSocket.readData(int) -> str");

extern "C" {static PyObject *meth_QUdpSocket_readData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_readData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bn", &sipSelf, sipType_QUdpSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 179 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qabstractsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QAbstractSocket::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1303 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_readData, doc_QUdpSocket_readData);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_readLineData, "QUdpSocket.readLineData(int) -> str");

extern "C" {static PyObject *meth_QUdpSocket_readLineData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_readLineData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qint64 a0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bn", &sipSelf, sipType_QUdpSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 217 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qabstractsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QAbstractSocket::readLineData(s, a0) : sipCpp->readLineData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1371 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_readLineData, doc_QUdpSocket_readLineData);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_writeData, "QUdpSocket.writeData(str) -> int");

extern "C" {static PyObject *meth_QUdpSocket_writeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_writeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        SIP_SSIZE_T a1;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bk", &sipSelf, sipType_QUdpSocket, &sipCpp, &a0, &a1))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_writeData(sipSelfWasArg,a0,(PY_LONG_LONG)a1);
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_writeData, doc_QUdpSocket_writeData);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_setSocketState, "QUdpSocket.setSocketState(QAbstractSocket.SocketState)");

extern "C" {static PyObject *meth_QUdpSocket_setSocketState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_setSocketState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket::SocketState a0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QAbstractSocket_SocketState, &a0))
        {
            sipCpp->sipProtect_setSocketState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_setSocketState, doc_QUdpSocket_setSocketState);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_setSocketError, "QUdpSocket.setSocketError(QAbstractSocket.SocketError)");

extern "C" {static PyObject *meth_QUdpSocket_setSocketError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_setSocketError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSocket::SocketError a0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QAbstractSocket_SocketError, &a0))
        {
            sipCpp->sipProtect_setSocketError(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_setSocketError, doc_QUdpSocket_setSocketError);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_setLocalPort, "QUdpSocket.setLocalPort(int)");

extern "C" {static PyObject *meth_QUdpSocket_setLocalPort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_setLocalPort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        quint16 a0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bt", &sipSelf, sipType_QUdpSocket, &sipCpp, &a0))
        {
            sipCpp->sipProtect_setLocalPort(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_setLocalPort, doc_QUdpSocket_setLocalPort);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_setLocalAddress, "QUdpSocket.setLocalAddress(QHostAddress)");

extern "C" {static PyObject *meth_QUdpSocket_setLocalAddress(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_setLocalAddress(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress* a0;
        int a0State = 0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            sipCpp->sipProtect_setLocalAddress(*a0);
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_setLocalAddress, doc_QUdpSocket_setLocalAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_setPeerPort, "QUdpSocket.setPeerPort(int)");

extern "C" {static PyObject *meth_QUdpSocket_setPeerPort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_setPeerPort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        quint16 a0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bt", &sipSelf, sipType_QUdpSocket, &sipCpp, &a0))
        {
            sipCpp->sipProtect_setPeerPort(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_setPeerPort, doc_QUdpSocket_setPeerPort);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_setPeerAddress, "QUdpSocket.setPeerAddress(QHostAddress)");

extern "C" {static PyObject *meth_QUdpSocket_setPeerAddress(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_setPeerAddress(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress* a0;
        int a0State = 0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            sipCpp->sipProtect_setPeerAddress(*a0);
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_setPeerAddress, doc_QUdpSocket_setPeerAddress);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_setPeerName, "QUdpSocket.setPeerName(str)");

extern "C" {static PyObject *meth_QUdpSocket_setPeerName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_setPeerName(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        sipQUdpSocket *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->sipProtect_setPeerName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_setPeerName, doc_QUdpSocket_setPeerName);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_hasPendingDatagrams, "QUdpSocket.hasPendingDatagrams() -> bool");

extern "C" {static PyObject *meth_QUdpSocket_hasPendingDatagrams(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_hasPendingDatagrams(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUdpSocket, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasPendingDatagrams();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_hasPendingDatagrams, doc_QUdpSocket_hasPendingDatagrams);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_pendingDatagramSize, "QUdpSocket.pendingDatagramSize() -> int");

extern "C" {static PyObject *meth_QUdpSocket_pendingDatagramSize(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_pendingDatagramSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUdpSocket, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->pendingDatagramSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_pendingDatagramSize, doc_QUdpSocket_pendingDatagramSize);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_readDatagram, "QUdpSocket.readDatagram(int) -> (str, QHostAddress, int)");

extern "C" {static PyObject *meth_QUdpSocket_readDatagram(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_readDatagram(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QHostAddress* a1;
        quint16 a2;
        QUdpSocket *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bn", &sipSelf, sipType_QUdpSocket, &sipCpp, &a0))
        {
            PyObject * sipRes = 0;
            a1 = new QHostAddress();
            int sipIsErr = 0;

#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qudpsocket.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->readDatagram(s, a0, a1, &a2);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1722 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQUdpSocket.cpp"

            if (sipIsErr)
                return 0;

            return sipBuildResult(0,"(RNt)",sipRes,a1,sipType_QHostAddress,NULL,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_readDatagram, doc_QUdpSocket_readDatagram);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_writeDatagram, "QUdpSocket.writeDatagram(str, QHostAddress, int) -> int\n"
    "QUdpSocket.writeDatagram(QByteArray, QHostAddress, int) -> int");

extern "C" {static PyObject *meth_QUdpSocket_writeDatagram(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_writeDatagram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        SIP_SSIZE_T a1;
        const QHostAddress* a2;
        int a2State = 0;
        quint16 a3;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BkJ1t", &sipSelf, sipType_QUdpSocket, &sipCpp, &a0, &a1, sipType_QHostAddress, &a2, &a2State, &a3))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->writeDatagram(a0,(PY_LONG_LONG)a1,*a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QHostAddress *>(a2),sipType_QHostAddress,a2State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        const QHostAddress* a1;
        int a1State = 0;
        quint16 a2;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1t", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QHostAddress, &a1, &a1State, &a2))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->writeDatagram(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QHostAddress *>(a1),sipType_QHostAddress,a1State);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_writeDatagram, doc_QUdpSocket_writeDatagram);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_joinMulticastGroup, "QUdpSocket.joinMulticastGroup(QHostAddress) -> bool\n"
    "QUdpSocket.joinMulticastGroup(QHostAddress, QNetworkInterface) -> bool");

extern "C" {static PyObject *meth_QUdpSocket_joinMulticastGroup(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_joinMulticastGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress* a0;
        int a0State = 0;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->joinMulticastGroup(*a0);
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QHostAddress* a0;
        int a0State = 0;
        const QNetworkInterface* a1;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State, sipType_QNetworkInterface, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->joinMulticastGroup(*a0,*a1);
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_joinMulticastGroup, doc_QUdpSocket_joinMulticastGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_leaveMulticastGroup, "QUdpSocket.leaveMulticastGroup(QHostAddress) -> bool\n"
    "QUdpSocket.leaveMulticastGroup(QHostAddress, QNetworkInterface) -> bool");

extern "C" {static PyObject *meth_QUdpSocket_leaveMulticastGroup(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_leaveMulticastGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QHostAddress* a0;
        int a0State = 0;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->leaveMulticastGroup(*a0);
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QHostAddress* a0;
        int a0State = 0;
        const QNetworkInterface* a1;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QHostAddress, &a0, &a0State, sipType_QNetworkInterface, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->leaveMulticastGroup(*a0,*a1);
            sipReleaseType(const_cast<QHostAddress *>(a0),sipType_QHostAddress,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_leaveMulticastGroup, doc_QUdpSocket_leaveMulticastGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_multicastInterface, "QUdpSocket.multicastInterface() -> QNetworkInterface");

extern "C" {static PyObject *meth_QUdpSocket_multicastInterface(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_multicastInterface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QUdpSocket, &sipCpp))
        {
            QNetworkInterface*sipRes;

            sipRes = new QNetworkInterface(sipCpp->multicastInterface());

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_multicastInterface, doc_QUdpSocket_multicastInterface);

    return NULL;
}


PyDoc_STRVAR(doc_QUdpSocket_setMulticastInterface, "QUdpSocket.setMulticastInterface(QNetworkInterface)");

extern "C" {static PyObject *meth_QUdpSocket_setMulticastInterface(PyObject *, PyObject *);}
static PyObject *meth_QUdpSocket_setMulticastInterface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkInterface* a0;
        QUdpSocket *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QUdpSocket, &sipCpp, sipType_QNetworkInterface, &a0))
        {
            sipCpp->setMulticastInterface(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QUdpSocket, sipName_setMulticastInterface, doc_QUdpSocket_setMulticastInterface);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QUdpSocket(void *, const sipTypeDef *);}
static void *cast_QUdpSocket(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QUdpSocket)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractSocket)->ctd_cast((QAbstractSocket *)(QUdpSocket *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QUdpSocket(void *, int);}
static void release_QUdpSocket(void *sipCppV,int)
{
    QUdpSocket *sipCpp = reinterpret_cast<QUdpSocket *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QUdpSocket(sipSimpleWrapper *);}
static void dealloc_QUdpSocket(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQUdpSocket *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QUdpSocket(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QUdpSocket(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QUdpSocket(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQUdpSocket *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQUdpSocket(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QUdpSocket[] = {{1, 255, 1}};


static PyMethodDef methods_QUdpSocket[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QUdpSocket_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QUdpSocket_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QUdpSocket_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QUdpSocket_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hasPendingDatagrams), meth_QUdpSocket_hasPendingDatagrams, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_hasPendingDatagrams)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QUdpSocket_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_joinMulticastGroup), meth_QUdpSocket_joinMulticastGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_joinMulticastGroup)},
    {SIP_MLNAME_CAST(sipName_leaveMulticastGroup), meth_QUdpSocket_leaveMulticastGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_leaveMulticastGroup)},
    {SIP_MLNAME_CAST(sipName_multicastInterface), meth_QUdpSocket_multicastInterface, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_multicastInterface)},
    {SIP_MLNAME_CAST(sipName_pendingDatagramSize), meth_QUdpSocket_pendingDatagramSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_pendingDatagramSize)},
    {SIP_MLNAME_CAST(sipName_readData), (PyCFunction)meth_QUdpSocket_readData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_readDatagram), (PyCFunction)meth_QUdpSocket_readDatagram, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QUdpSocket_readDatagram)},
    {SIP_MLNAME_CAST(sipName_readLineData), (PyCFunction)meth_QUdpSocket_readLineData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QUdpSocket_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QUdpSocket_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QUdpSocket_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setErrorString), (PyCFunction)meth_QUdpSocket_setErrorString, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setLocalAddress), (PyCFunction)meth_QUdpSocket_setLocalAddress, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setLocalPort), (PyCFunction)meth_QUdpSocket_setLocalPort, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setMulticastInterface), meth_QUdpSocket_setMulticastInterface, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_setMulticastInterface)},
    {SIP_MLNAME_CAST(sipName_setOpenMode), (PyCFunction)meth_QUdpSocket_setOpenMode, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setPeerAddress), (PyCFunction)meth_QUdpSocket_setPeerAddress, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setPeerName), (PyCFunction)meth_QUdpSocket_setPeerName, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setPeerPort), (PyCFunction)meth_QUdpSocket_setPeerPort, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setSocketError), (PyCFunction)meth_QUdpSocket_setSocketError, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setSocketState), (PyCFunction)meth_QUdpSocket_setSocketState, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QUdpSocket_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeData), (PyCFunction)meth_QUdpSocket_writeData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_writeDatagram), meth_QUdpSocket_writeDatagram, METH_VARARGS, SIP_MLDOC_CAST(doc_QUdpSocket_writeDatagram)}
};

PyDoc_STRVAR(doc_QUdpSocket, "\1QUdpSocket(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QUdpSocket = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QUdpSocket,
        {0}
    },
    {
        sipNameNr_QUdpSocket,
        {0, 0, 1},
        29, methods_QUdpSocket,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QUdpSocket,
    -1,
    -1,
    supers_QUdpSocket,
    0,
    init_type_QUdpSocket,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QUdpSocket,
    0,
    0,
    0,
    release_QUdpSocket,
    cast_QUdpSocket,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QUdpSocket::staticMetaObject,
    0,
    0,
    0
};
