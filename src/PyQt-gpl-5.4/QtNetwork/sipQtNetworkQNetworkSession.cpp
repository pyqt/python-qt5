/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:36 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworksession.sip"
#include <qnetworksession.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworksession.sip"
#include <qnetworksession.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 53 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkinterface.sip"
#include <qnetworkinterface.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"


class sipQNetworkSession : public QNetworkSession
{
public:
    sipQNetworkSession(const QNetworkConfiguration&,QObject*);
    virtual ~sipQNetworkSession();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkSession(const sipQNetworkSession &);
    sipQNetworkSession &operator = (const sipQNetworkSession &);

    char sipPyMethods[7];
};

sipQNetworkSession::sipQNetworkSession(const QNetworkConfiguration& a0,QObject*a1): QNetworkSession(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkSession::~sipQNetworkSession()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQNetworkSession::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkSession);
}

int sipQNetworkSession::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QNetworkSession::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkSession,_c,_id,_a);

    return _id;
}

void *sipQNetworkSession::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkSession, _clname, &sipCpp) ? sipCpp : QNetworkSession::qt_metacast(_clname));
}

void sipQNetworkSession::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QNetworkSession::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNetworkSession::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QNetworkSession::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNetworkSession::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QNetworkSession::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQNetworkSession::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QNetworkSession::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQNetworkSession::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QNetworkSession::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNetworkSession::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QNetworkSession::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNetworkSession::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QNetworkSession::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQNetworkSession::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQNetworkSession::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQNetworkSession::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQNetworkSession::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQNetworkSession::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

int sipQNetworkSession::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQNetworkSession::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQNetworkSession::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QNetworkSession::connectNotify(a0) : connectNotify(a0));
}

void sipQNetworkSession::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QNetworkSession::disconnectNotify(a0) : disconnectNotify(a0));
}


PyDoc_STRVAR(doc_QNetworkSession_sender, "QNetworkSession.sender() -> QObject");

extern "C" {static PyObject *meth_QNetworkSession_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQNetworkSession *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 375 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_sender, doc_QNetworkSession_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_receivers, "QNetworkSession.receivers(signal) -> int");

extern "C" {static PyObject *meth_QNetworkSession_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQNetworkSession *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QNetworkSession, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 434 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkSession.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_receivers, doc_QNetworkSession_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_timerEvent, "QNetworkSession.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QNetworkSession_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQNetworkSession *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QNetworkSession, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_timerEvent, doc_QNetworkSession_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_childEvent, "QNetworkSession.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QNetworkSession_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQNetworkSession *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QNetworkSession, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_childEvent, doc_QNetworkSession_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_customEvent, "QNetworkSession.customEvent(QEvent)");

extern "C" {static PyObject *meth_QNetworkSession_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQNetworkSession *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QNetworkSession, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_customEvent, doc_QNetworkSession_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_senderSignalIndex, "QNetworkSession.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QNetworkSession_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQNetworkSession *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_senderSignalIndex, doc_QNetworkSession_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_isSignalConnected, "QNetworkSession.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QNetworkSession_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQNetworkSession *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QNetworkSession, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_isSignalConnected, doc_QNetworkSession_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_isOpen, "QNetworkSession.isOpen() -> bool");

extern "C" {static PyObject *meth_QNetworkSession_isOpen(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_isOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOpen();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_isOpen, doc_QNetworkSession_isOpen);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_configuration, "QNetworkSession.configuration() -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QNetworkSession_configuration(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_configuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            QNetworkConfiguration*sipRes;

            sipRes = new QNetworkConfiguration(sipCpp->configuration());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_configuration, doc_QNetworkSession_configuration);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_interface, "QNetworkSession.interface() -> QNetworkInterface");

extern "C" {static PyObject *meth_QNetworkSession_interface(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_interface(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            QNetworkInterface*sipRes;

            sipRes = new QNetworkInterface(sipCpp->interface());

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_interface, doc_QNetworkSession_interface);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_state, "QNetworkSession.state() -> QNetworkSession.State");

extern "C" {static PyObject *meth_QNetworkSession_state(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            QNetworkSession::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QNetworkSession_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_state, doc_QNetworkSession_state);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_error, "QNetworkSession.error() -> QNetworkSession.SessionError");

extern "C" {static PyObject *meth_QNetworkSession_error(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            QNetworkSession::SessionError sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QNetworkSession_SessionError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_error, doc_QNetworkSession_error);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_errorString, "QNetworkSession.errorString() -> str");

extern "C" {static PyObject *meth_QNetworkSession_errorString(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_errorString, doc_QNetworkSession_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_sessionProperty, "QNetworkSession.sessionProperty(str) -> QVariant");

extern "C" {static PyObject *meth_QNetworkSession_sessionProperty(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_sessionProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkSession, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->sessionProperty(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_sessionProperty, doc_QNetworkSession_sessionProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_setSessionProperty, "QNetworkSession.setSessionProperty(str, QVariant)");

extern "C" {static PyObject *meth_QNetworkSession_setSessionProperty(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_setSessionProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QVariant* a1;
        int a1State = 0;
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QNetworkSession, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setSessionProperty(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_setSessionProperty, doc_QNetworkSession_setSessionProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_bytesWritten, "QNetworkSession.bytesWritten() -> int");

extern "C" {static PyObject *meth_QNetworkSession_bytesWritten(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_bytesWritten(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            quint64 sipRes;

            sipRes = sipCpp->bytesWritten();

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_bytesWritten, doc_QNetworkSession_bytesWritten);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_bytesReceived, "QNetworkSession.bytesReceived() -> int");

extern "C" {static PyObject *meth_QNetworkSession_bytesReceived(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_bytesReceived(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            quint64 sipRes;

            sipRes = sipCpp->bytesReceived();

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_bytesReceived, doc_QNetworkSession_bytesReceived);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_activeTime, "QNetworkSession.activeTime() -> int");

extern "C" {static PyObject *meth_QNetworkSession_activeTime(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_activeTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            quint64 sipRes;

            sipRes = sipCpp->activeTime();

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_activeTime, doc_QNetworkSession_activeTime);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_waitForOpened, "QNetworkSession.waitForOpened(int msecs=30000) -> bool");

extern "C" {static PyObject *meth_QNetworkSession_waitForOpened(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_waitForOpened(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 30000;
        QNetworkSession *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QNetworkSession, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForOpened(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_waitForOpened, doc_QNetworkSession_waitForOpened);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_open, "QNetworkSession.open()");

extern "C" {static PyObject *meth_QNetworkSession_open(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            sipCpp->open();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_open, doc_QNetworkSession_open);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_close, "QNetworkSession.close()");

extern "C" {static PyObject *meth_QNetworkSession_close(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            sipCpp->close();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_close, doc_QNetworkSession_close);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_stop, "QNetworkSession.stop()");

extern "C" {static PyObject *meth_QNetworkSession_stop(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_stop, doc_QNetworkSession_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_migrate, "QNetworkSession.migrate()");

extern "C" {static PyObject *meth_QNetworkSession_migrate(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_migrate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            sipCpp->migrate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_migrate, doc_QNetworkSession_migrate);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_ignore, "QNetworkSession.ignore()");

extern "C" {static PyObject *meth_QNetworkSession_ignore(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_ignore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            sipCpp->ignore();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_ignore, doc_QNetworkSession_ignore);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_accept, "QNetworkSession.accept()");

extern "C" {static PyObject *meth_QNetworkSession_accept(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_accept(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            sipCpp->accept();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_accept, doc_QNetworkSession_accept);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_reject, "QNetworkSession.reject()");

extern "C" {static PyObject *meth_QNetworkSession_reject(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_reject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            sipCpp->reject();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_reject, doc_QNetworkSession_reject);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_connectNotify, "QNetworkSession.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QNetworkSession_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQNetworkSession *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QNetworkSession, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_connectNotify, doc_QNetworkSession_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_disconnectNotify, "QNetworkSession.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QNetworkSession_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQNetworkSession *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QNetworkSession, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_disconnectNotify, doc_QNetworkSession_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkSession_usagePolicies, "QNetworkSession.usagePolicies() -> QNetworkSession.UsagePolicies");

extern "C" {static PyObject *meth_QNetworkSession_usagePolicies(PyObject *, PyObject *);}
static PyObject *meth_QNetworkSession_usagePolicies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkSession *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkSession, &sipCpp))
        {
            QNetworkSession::UsagePolicies*sipRes;

            sipRes = new QNetworkSession::UsagePolicies(sipCpp->usagePolicies());

            return sipConvertFromNewType(sipRes,sipType_QNetworkSession_UsagePolicies,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkSession, sipName_usagePolicies, doc_QNetworkSession_usagePolicies);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QNetworkSession(void *, const sipTypeDef *);}
static void *cast_QNetworkSession(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QNetworkSession)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QNetworkSession *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkSession(void *, int);}
static void release_QNetworkSession(void *sipCppV,int)
{
    QNetworkSession *sipCpp = reinterpret_cast<QNetworkSession *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QNetworkSession(sipSimpleWrapper *);}
static void dealloc_QNetworkSession(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQNetworkSession *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QNetworkSession(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QNetworkSession(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkSession(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkSession *sipCpp = 0;

    {
        const QNetworkConfiguration* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QNetworkConfiguration, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQNetworkSession(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkSession[] = {{162, 0, 1}};


static PyMethodDef methods_QNetworkSession[] = {
    {SIP_MLNAME_CAST(sipName_accept), meth_QNetworkSession_accept, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_accept)},
    {SIP_MLNAME_CAST(sipName_activeTime), meth_QNetworkSession_activeTime, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_activeTime)},
    {SIP_MLNAME_CAST(sipName_bytesReceived), meth_QNetworkSession_bytesReceived, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_bytesReceived)},
    {SIP_MLNAME_CAST(sipName_bytesWritten), meth_QNetworkSession_bytesWritten, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_bytesWritten)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QNetworkSession_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QNetworkSession_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_close)},
    {SIP_MLNAME_CAST(sipName_configuration), meth_QNetworkSession_configuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_configuration)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QNetworkSession_connectNotify, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkSession_connectNotify)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QNetworkSession_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QNetworkSession_disconnectNotify, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkSession_disconnectNotify)},
    {SIP_MLNAME_CAST(sipName_error), meth_QNetworkSession_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QNetworkSession_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_errorString)},
    {SIP_MLNAME_CAST(sipName_ignore), meth_QNetworkSession_ignore, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_ignore)},
    {SIP_MLNAME_CAST(sipName_interface), meth_QNetworkSession_interface, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_interface)},
    {SIP_MLNAME_CAST(sipName_isOpen), meth_QNetworkSession_isOpen, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_isOpen)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QNetworkSession_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_migrate), meth_QNetworkSession_migrate, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_migrate)},
    {SIP_MLNAME_CAST(sipName_open), meth_QNetworkSession_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_open)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QNetworkSession_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_reject), meth_QNetworkSession_reject, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_reject)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QNetworkSession_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QNetworkSession_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sessionProperty), meth_QNetworkSession_sessionProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_sessionProperty)},
    {SIP_MLNAME_CAST(sipName_setSessionProperty), meth_QNetworkSession_setSessionProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_setSessionProperty)},
    {SIP_MLNAME_CAST(sipName_state), meth_QNetworkSession_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_state)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QNetworkSession_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_stop)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QNetworkSession_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_usagePolicies), meth_QNetworkSession_usagePolicies, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkSession_usagePolicies)},
    {SIP_MLNAME_CAST(sipName_waitForOpened), (PyCFunction)meth_QNetworkSession_waitForOpened, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkSession_waitForOpened)}
};

static sipEnumMemberDef enummembers_QNetworkSession[] = {
    {sipName_Closing, static_cast<int>(QNetworkSession::Closing), 89},
    {sipName_Connected, static_cast<int>(QNetworkSession::Connected), 89},
    {sipName_Connecting, static_cast<int>(QNetworkSession::Connecting), 89},
    {sipName_Disconnected, static_cast<int>(QNetworkSession::Disconnected), 89},
    {sipName_Invalid, static_cast<int>(QNetworkSession::Invalid), 89},
    {sipName_InvalidConfigurationError, static_cast<int>(QNetworkSession::InvalidConfigurationError), 88},
    {sipName_NoBackgroundTrafficPolicy, static_cast<int>(QNetworkSession::NoBackgroundTrafficPolicy), 91},
    {sipName_NoPolicy, static_cast<int>(QNetworkSession::NoPolicy), 91},
    {sipName_NotAvailable, static_cast<int>(QNetworkSession::NotAvailable), 89},
    {sipName_OperationNotSupportedError, static_cast<int>(QNetworkSession::OperationNotSupportedError), 88},
    {sipName_Roaming, static_cast<int>(QNetworkSession::Roaming), 89},
    {sipName_RoamingError, static_cast<int>(QNetworkSession::RoamingError), 88},
    {sipName_SessionAbortedError, static_cast<int>(QNetworkSession::SessionAbortedError), 88},
    {sipName_UnknownSessionError, static_cast<int>(QNetworkSession::UnknownSessionError), 88},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QNetworkSession[] = {
    {"usagePoliciesChanged(QNetworkSession::UsagePolicies)", "\1QNetworkSession.usagePoliciesChanged[QNetworkSession.UsagePolicies]", 0, 0},
    {"newConfigurationActivated()", "\1QNetworkSession.newConfigurationActivated", 0, 0},
    {"preferredConfigurationChanged(QNetworkConfiguration,bool)", "\1QNetworkSession.preferredConfigurationChanged[QNetworkConfiguration, bool]", 0, 0},
    {"closed()", "\1QNetworkSession.closed", 0, 0},
    {"opened()", "\1QNetworkSession.opened", 0, 0},
    {"stateChanged(QNetworkSession::State)", "\1QNetworkSession.stateChanged[QNetworkSession.State]", 0, 0},
    {"error(QNetworkSession::SessionError)", "\1QNetworkSession.error[QNetworkSession.SessionError]", &methods_QNetworkSession[10], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QNetworkSession, "\1QNetworkSession(QNetworkConfiguration, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QNetworkSession = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QNetworkSession,
        {0}
    },
    {
        sipNameNr_QNetworkSession,
        {0, 0, 1},
        29, methods_QNetworkSession,
        14, enummembers_QNetworkSession,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNetworkSession,
    -1,
    -1,
    supers_QNetworkSession,
    0,
    init_type_QNetworkSession,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNetworkSession,
    0,
    0,
    0,
    release_QNetworkSession,
    cast_QNetworkSession,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QNetworkSession::staticMetaObject,
    0,
    signals_QNetworkSession,
    0
};
