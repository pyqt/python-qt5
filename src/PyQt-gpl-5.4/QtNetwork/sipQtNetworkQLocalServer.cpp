/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:36 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qlocalserver.sip"
#include <qlocalserver.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qlocalserver.sip"
#include <qlocalserver.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qlocalsocket.sip"
#include <qlocalsocket.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 163 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"


class sipQLocalServer : public QLocalServer
{
public:
    sipQLocalServer(QObject*);
    virtual ~sipQLocalServer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_incomingConnection(bool,quintptr);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void incomingConnection(quintptr);
    QLocalSocket* nextPendingConnection();
    bool hasPendingConnections() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLocalServer(const sipQLocalServer &);
    sipQLocalServer &operator = (const sipQLocalServer &);

    char sipPyMethods[10];
};

sipQLocalServer::sipQLocalServer(QObject*a0): QLocalServer(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLocalServer::~sipQLocalServer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQLocalServer::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QLocalServer);
}

int sipQLocalServer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QLocalServer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QLocalServer,_c,_id,_a);

    return _id;
}

void *sipQLocalServer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QLocalServer, _clname, &sipCpp) ? sipCpp : QLocalServer::qt_metacast(_clname));
}

void sipQLocalServer::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QLocalServer::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLocalServer::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QLocalServer::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLocalServer::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QLocalServer::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLocalServer::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QLocalServer::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLocalServer::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QLocalServer::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQLocalServer::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QLocalServer::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQLocalServer::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QLocalServer::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLocalServer::incomingConnection(quintptr a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_incomingConnection);

    if (!sipMeth)
    {
        QLocalServer::incomingConnection(a0);
        return;
    }

    extern void sipVH_QtNetwork_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, quintptr);

    sipVH_QtNetwork_22(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QLocalSocket* sipQLocalServer::nextPendingConnection()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_nextPendingConnection);

    if (!sipMeth)
        return QLocalServer::nextPendingConnection();

    extern QLocalSocket* sipVH_QtNetwork_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtNetwork_23(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQLocalServer::hasPendingConnections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_hasPendingConnections);

    if (!sipMeth)
        return QLocalServer::hasPendingConnections();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQLocalServer::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQLocalServer::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQLocalServer::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQLocalServer::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQLocalServer::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQLocalServer::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQLocalServer::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQLocalServer::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQLocalServer::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQLocalServer::sipProtectVirt_incomingConnection(bool sipSelfWasArg,quintptr a0)
{
    (sipSelfWasArg ? QLocalServer::incomingConnection(a0) : incomingConnection(a0));
}


PyDoc_STRVAR(doc_QLocalServer_sender, "QLocalServer.sender() -> QObject");

extern "C" {static PyObject *meth_QLocalServer_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQLocalServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 438 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_sender, doc_QLocalServer_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_receivers, "QLocalServer.receivers(signal) -> int");

extern "C" {static PyObject *meth_QLocalServer_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQLocalServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QLocalServer, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 497 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQLocalServer.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_receivers, doc_QLocalServer_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_timerEvent, "QLocalServer.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QLocalServer_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQLocalServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_timerEvent, doc_QLocalServer_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_childEvent, "QLocalServer.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QLocalServer_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQLocalServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_childEvent, doc_QLocalServer_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_customEvent, "QLocalServer.customEvent(QEvent)");

extern "C" {static PyObject *meth_QLocalServer_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQLocalServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_customEvent, doc_QLocalServer_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_connectNotify, "QLocalServer.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QLocalServer_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQLocalServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_connectNotify, doc_QLocalServer_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_disconnectNotify, "QLocalServer.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QLocalServer_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQLocalServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_disconnectNotify, doc_QLocalServer_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_senderSignalIndex, "QLocalServer.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QLocalServer_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQLocalServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_senderSignalIndex, doc_QLocalServer_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_isSignalConnected, "QLocalServer.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QLocalServer_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQLocalServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_isSignalConnected, doc_QLocalServer_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_close, "QLocalServer.close()");

extern "C" {static PyObject *meth_QLocalServer_close(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            sipCpp->close();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_close, doc_QLocalServer_close);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_errorString, "QLocalServer.errorString() -> str");

extern "C" {static PyObject *meth_QLocalServer_errorString(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_errorString, doc_QLocalServer_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_hasPendingConnections, "QLocalServer.hasPendingConnections() -> bool");

extern "C" {static PyObject *meth_QLocalServer_hasPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_hasPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QLocalServer::hasPendingConnections() : sipCpp->hasPendingConnections());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_hasPendingConnections, doc_QLocalServer_hasPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_isListening, "QLocalServer.isListening() -> bool");

extern "C" {static PyObject *meth_QLocalServer_isListening(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_isListening(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isListening();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_isListening, doc_QLocalServer_isListening);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_listen, "QLocalServer.listen(str) -> bool\n"
    "QLocalServer.listen(sip.voidptr) -> bool");

extern "C" {static PyObject *meth_QLocalServer_listen(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_listen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->listen(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        qintptr* a0;
        int a0State = 0;
        QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_qintptr,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->listen(*a0);
            sipReleaseType(a0,sipType_qintptr,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_listen, doc_QLocalServer_listen);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_maxPendingConnections, "QLocalServer.maxPendingConnections() -> int");

extern "C" {static PyObject *meth_QLocalServer_maxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_maxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maxPendingConnections();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_maxPendingConnections, doc_QLocalServer_maxPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_nextPendingConnection, "QLocalServer.nextPendingConnection() -> QLocalSocket");

extern "C" {static PyObject *meth_QLocalServer_nextPendingConnection(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_nextPendingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            QLocalSocket*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QLocalServer::nextPendingConnection() : sipCpp->nextPendingConnection());

            return sipConvertFromType(sipRes,sipType_QLocalSocket,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_nextPendingConnection, doc_QLocalServer_nextPendingConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_serverName, "QLocalServer.serverName() -> str");

extern "C" {static PyObject *meth_QLocalServer_serverName(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_serverName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->serverName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_serverName, doc_QLocalServer_serverName);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_fullServerName, "QLocalServer.fullServerName() -> str");

extern "C" {static PyObject *meth_QLocalServer_fullServerName(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_fullServerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->fullServerName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_fullServerName, doc_QLocalServer_fullServerName);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_serverError, "QLocalServer.serverError() -> QAbstractSocket.SocketError");

extern "C" {static PyObject *meth_QLocalServer_serverError(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_serverError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            QAbstractSocket::SocketError sipRes;

            sipRes = sipCpp->serverError();

            return sipConvertFromEnum(sipRes,sipType_QAbstractSocket_SocketError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_serverError, doc_QLocalServer_serverError);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_setMaxPendingConnections, "QLocalServer.setMaxPendingConnections(int)");

extern "C" {static PyObject *meth_QLocalServer_setMaxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_setMaxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLocalServer, &sipCpp, &a0))
        {
            sipCpp->setMaxPendingConnections(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_setMaxPendingConnections, doc_QLocalServer_setMaxPendingConnections);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_waitForNewConnection, "QLocalServer.waitForNewConnection(int msecs=0) -> (bool, bool)");

extern "C" {static PyObject *meth_QLocalServer_waitForNewConnection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_waitForNewConnection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        bool a1;
        QLocalServer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QLocalServer, &sipCpp, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForNewConnection(a0,&a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_waitForNewConnection, doc_QLocalServer_waitForNewConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_removeServer, "QLocalServer.removeServer(str) -> bool");

extern "C" {static PyObject *meth_QLocalServer_removeServer(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_removeServer(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = QLocalServer::removeServer(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_removeServer, doc_QLocalServer_removeServer);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_incomingConnection, "QLocalServer.incomingConnection(sip.voidptr)");

extern "C" {static PyObject *meth_QLocalServer_incomingConnection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_incomingConnection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        quintptr* a0;
        int a0State = 0;
        sipQLocalServer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_quintptr,&a0, &a0State))
        {
            sipCpp->sipProtectVirt_incomingConnection(sipSelfWasArg,*a0);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_incomingConnection, doc_QLocalServer_incomingConnection);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_setSocketOptions, "QLocalServer.setSocketOptions(QLocalServer.SocketOptions)");

extern "C" {static PyObject *meth_QLocalServer_setSocketOptions(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_setSocketOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLocalServer::SocketOptions* a0;
        int a0State = 0;
        QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLocalServer, &sipCpp, sipType_QLocalServer_SocketOptions, &a0, &a0State))
        {
            sipCpp->setSocketOptions(*a0);
            sipReleaseType(a0,sipType_QLocalServer_SocketOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_setSocketOptions, doc_QLocalServer_setSocketOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QLocalServer_socketOptions, "QLocalServer.socketOptions() -> QLocalServer.SocketOptions");

extern "C" {static PyObject *meth_QLocalServer_socketOptions(PyObject *, PyObject *);}
static PyObject *meth_QLocalServer_socketOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocalServer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLocalServer, &sipCpp))
        {
            QLocalServer::SocketOptions*sipRes;

            sipRes = new QLocalServer::SocketOptions(sipCpp->socketOptions());

            return sipConvertFromNewType(sipRes,sipType_QLocalServer_SocketOptions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLocalServer, sipName_socketOptions, doc_QLocalServer_socketOptions);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QLocalServer(void *, const sipTypeDef *);}
static void *cast_QLocalServer(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QLocalServer)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QLocalServer *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLocalServer(void *, int);}
static void release_QLocalServer(void *sipCppV,int)
{
    QLocalServer *sipCpp = reinterpret_cast<QLocalServer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QLocalServer(sipSimpleWrapper *);}
static void dealloc_QLocalServer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQLocalServer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QLocalServer(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QLocalServer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLocalServer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLocalServer *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQLocalServer(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLocalServer[] = {{162, 0, 1}};


static PyMethodDef methods_QLocalServer[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QLocalServer_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QLocalServer_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_close)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QLocalServer_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QLocalServer_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QLocalServer_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QLocalServer_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_errorString)},
    {SIP_MLNAME_CAST(sipName_fullServerName), meth_QLocalServer_fullServerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_fullServerName)},
    {SIP_MLNAME_CAST(sipName_hasPendingConnections), meth_QLocalServer_hasPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_hasPendingConnections)},
    {SIP_MLNAME_CAST(sipName_incomingConnection), (PyCFunction)meth_QLocalServer_incomingConnection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalServer_incomingConnection)},
    {SIP_MLNAME_CAST(sipName_isListening), meth_QLocalServer_isListening, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_isListening)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QLocalServer_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_listen), meth_QLocalServer_listen, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_listen)},
    {SIP_MLNAME_CAST(sipName_maxPendingConnections), meth_QLocalServer_maxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_maxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_nextPendingConnection), meth_QLocalServer_nextPendingConnection, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_nextPendingConnection)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QLocalServer_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removeServer), meth_QLocalServer_removeServer, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_removeServer)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QLocalServer_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QLocalServer_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_serverError), meth_QLocalServer_serverError, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_serverError)},
    {SIP_MLNAME_CAST(sipName_serverName), meth_QLocalServer_serverName, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_serverName)},
    {SIP_MLNAME_CAST(sipName_setMaxPendingConnections), meth_QLocalServer_setMaxPendingConnections, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_setMaxPendingConnections)},
    {SIP_MLNAME_CAST(sipName_setSocketOptions), meth_QLocalServer_setSocketOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_setSocketOptions)},
    {SIP_MLNAME_CAST(sipName_socketOptions), meth_QLocalServer_socketOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QLocalServer_socketOptions)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QLocalServer_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_waitForNewConnection), (PyCFunction)meth_QLocalServer_waitForNewConnection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLocalServer_waitForNewConnection)}
};

static sipEnumMemberDef enummembers_QLocalServer[] = {
    {sipName_GroupAccessOption, static_cast<int>(QLocalServer::GroupAccessOption), 45},
    {sipName_OtherAccessOption, static_cast<int>(QLocalServer::OtherAccessOption), 45},
    {sipName_UserAccessOption, static_cast<int>(QLocalServer::UserAccessOption), 45},
    {sipName_WorldAccessOption, static_cast<int>(QLocalServer::WorldAccessOption), 45},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QLocalServer[] = {
    {"newConnection()", "\1QLocalServer.newConnection", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QLocalServer, "\1QLocalServer(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QLocalServer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QLocalServer,
        {0}
    },
    {
        sipNameNr_QLocalServer,
        {0, 0, 1},
        25, methods_QLocalServer,
        4, enummembers_QLocalServer,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLocalServer,
    -1,
    -1,
    supers_QLocalServer,
    0,
    init_type_QLocalServer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLocalServer,
    0,
    0,
    0,
    release_QLocalServer,
    cast_QLocalServer,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QLocalServer::staticMetaObject,
    0,
    signals_QLocalServer,
    0
};
