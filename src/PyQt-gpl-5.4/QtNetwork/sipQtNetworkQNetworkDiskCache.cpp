/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:36 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qnetworkdiskcache.sip"
#include <qnetworkdiskcache.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtNetwork/qabstractnetworkcache.sip"
#include <qabstractnetworkcache.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 30 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"


class sipQNetworkDiskCache : public QNetworkDiskCache
{
public:
    sipQNetworkDiskCache(QObject*);
    virtual ~sipQNetworkDiskCache();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    qint64 sipProtectVirt_expire(bool);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    qint64 expire();
    void clear();
    void insert(QIODevice*);
    QIODevice* prepare(const QNetworkCacheMetaData&);
    bool remove(const QUrl&);
    QIODevice* data(const QUrl&);
    void updateMetaData(const QNetworkCacheMetaData&);
    QNetworkCacheMetaData metaData(const QUrl&);
    qint64 cacheSize() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNetworkDiskCache(const sipQNetworkDiskCache &);
    sipQNetworkDiskCache &operator = (const sipQNetworkDiskCache &);

    char sipPyMethods[16];
};

sipQNetworkDiskCache::sipQNetworkDiskCache(QObject*a0): QNetworkDiskCache(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNetworkDiskCache::~sipQNetworkDiskCache()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQNetworkDiskCache::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QNetworkDiskCache);
}

int sipQNetworkDiskCache::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QNetworkDiskCache::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QNetworkDiskCache,_c,_id,_a);

    return _id;
}

void *sipQNetworkDiskCache::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtNetwork_qt_metacast(sipPySelf, sipType_QNetworkDiskCache, _clname, &sipCpp) ? sipCpp : QNetworkDiskCache::qt_metacast(_clname));
}

void sipQNetworkDiskCache::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QNetworkDiskCache::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QNetworkDiskCache::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QNetworkDiskCache::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QNetworkDiskCache::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QNetworkDiskCache::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQNetworkDiskCache::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QNetworkDiskCache::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQNetworkDiskCache::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QNetworkDiskCache::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

qint64 sipQNetworkDiskCache::expire()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_expire);

    if (!sipMeth)
        return QNetworkDiskCache::expire();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQNetworkDiskCache::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_clear);

    if (!sipMeth)
    {
        QNetworkDiskCache::clear();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQNetworkDiskCache::insert(QIODevice*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_insert);

    if (!sipMeth)
    {
        QNetworkDiskCache::insert(a0);
        return;
    }

    extern void sipVH_QtNetwork_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIODevice*);

    sipVH_QtNetwork_11(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QIODevice* sipQNetworkDiskCache::prepare(const QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_prepare);

    if (!sipMeth)
        return QNetworkDiskCache::prepare(a0);

    extern QIODevice* sipVH_QtNetwork_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QNetworkCacheMetaData&);

    return sipVH_QtNetwork_12(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQNetworkDiskCache::remove(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_remove);

    if (!sipMeth)
        return QNetworkDiskCache::remove(a0);

    extern bool sipVH_QtNetwork_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&);

    return sipVH_QtNetwork_13(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QIODevice* sipQNetworkDiskCache::data(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return QNetworkDiskCache::data(a0);

    extern QIODevice* sipVH_QtNetwork_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&);

    return sipVH_QtNetwork_14(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNetworkDiskCache::updateMetaData(const QNetworkCacheMetaData& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_updateMetaData);

    if (!sipMeth)
    {
        QNetworkDiskCache::updateMetaData(a0);
        return;
    }

    extern void sipVH_QtNetwork_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QNetworkCacheMetaData&);

    sipVH_QtNetwork_15(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QNetworkCacheMetaData sipQNetworkDiskCache::metaData(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_metaData);

    if (!sipMeth)
        return QNetworkDiskCache::metaData(a0);

    extern QNetworkCacheMetaData sipVH_QtNetwork_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&);

    return sipVH_QtNetwork_16(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

qint64 sipQNetworkDiskCache::cacheSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_cacheSize);

    if (!sipMeth)
        return QNetworkDiskCache::cacheSize();

    typedef PY_LONG_LONG (*sipVH_QtCore_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_44)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtNetwork_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQNetworkDiskCache::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQNetworkDiskCache::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQNetworkDiskCache::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQNetworkDiskCache::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQNetworkDiskCache::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQNetworkDiskCache::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQNetworkDiskCache::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQNetworkDiskCache::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQNetworkDiskCache::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

qint64 sipQNetworkDiskCache::sipProtectVirt_expire(bool sipSelfWasArg)
{
    return (sipSelfWasArg ? QNetworkDiskCache::expire() : expire());
}


PyDoc_STRVAR(doc_QNetworkDiskCache_sender, "QNetworkDiskCache.sender() -> QObject");

extern "C" {static PyObject *meth_QNetworkDiskCache_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQNetworkDiskCache *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 534 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_sender, doc_QNetworkDiskCache_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_receivers, "QNetworkDiskCache.receivers(signal) -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQNetworkDiskCache *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 593 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtNetwork/sipQtNetworkQNetworkDiskCache.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_receivers, doc_QNetworkDiskCache_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_timerEvent, "QNetworkDiskCache.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QNetworkDiskCache_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQNetworkDiskCache *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_timerEvent, doc_QNetworkDiskCache_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_childEvent, "QNetworkDiskCache.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QNetworkDiskCache_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQNetworkDiskCache *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_childEvent, doc_QNetworkDiskCache_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_customEvent, "QNetworkDiskCache.customEvent(QEvent)");

extern "C" {static PyObject *meth_QNetworkDiskCache_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQNetworkDiskCache *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_customEvent, doc_QNetworkDiskCache_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_connectNotify, "QNetworkDiskCache.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QNetworkDiskCache_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQNetworkDiskCache *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_connectNotify, doc_QNetworkDiskCache_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_disconnectNotify, "QNetworkDiskCache.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QNetworkDiskCache_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQNetworkDiskCache *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_disconnectNotify, doc_QNetworkDiskCache_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_senderSignalIndex, "QNetworkDiskCache.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQNetworkDiskCache *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_senderSignalIndex, doc_QNetworkDiskCache_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_isSignalConnected, "QNetworkDiskCache.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QNetworkDiskCache_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQNetworkDiskCache *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_isSignalConnected, doc_QNetworkDiskCache_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_cacheDirectory, "QNetworkDiskCache.cacheDirectory() -> str");

extern "C" {static PyObject *meth_QNetworkDiskCache_cacheDirectory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_cacheDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->cacheDirectory());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_cacheDirectory, doc_QNetworkDiskCache_cacheDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_setCacheDirectory, "QNetworkDiskCache.setCacheDirectory(str)");

extern "C" {static PyObject *meth_QNetworkDiskCache_setCacheDirectory(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_setCacheDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCacheDirectory(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_setCacheDirectory, doc_QNetworkDiskCache_setCacheDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_maximumCacheSize, "QNetworkDiskCache.maximumCacheSize() -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_maximumCacheSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_maximumCacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->maximumCacheSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_maximumCacheSize, doc_QNetworkDiskCache_maximumCacheSize);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_setMaximumCacheSize, "QNetworkDiskCache.setMaximumCacheSize(int)");

extern "C" {static PyObject *meth_QNetworkDiskCache_setMaximumCacheSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_setMaximumCacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, &a0))
        {
            sipCpp->setMaximumCacheSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_setMaximumCacheSize, doc_QNetworkDiskCache_setMaximumCacheSize);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_cacheSize, "QNetworkDiskCache.cacheSize() -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_cacheSize(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_cacheSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            qint64 sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QNetworkDiskCache::cacheSize() : sipCpp->cacheSize());

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_cacheSize, doc_QNetworkDiskCache_cacheSize);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_metaData, "QNetworkDiskCache.metaData(QUrl) -> QNetworkCacheMetaData");

extern "C" {static PyObject *meth_QNetworkDiskCache_metaData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QUrl* a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QUrl, &a0))
        {
            QNetworkCacheMetaData*sipRes;

            sipRes = new QNetworkCacheMetaData((sipSelfWasArg ? sipCpp->QNetworkDiskCache::metaData(*a0) : sipCpp->metaData(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QNetworkCacheMetaData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_metaData, doc_QNetworkDiskCache_metaData);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_updateMetaData, "QNetworkDiskCache.updateMetaData(QNetworkCacheMetaData)");

extern "C" {static PyObject *meth_QNetworkDiskCache_updateMetaData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_updateMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QNetworkCacheMetaData* a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            (sipSelfWasArg ? sipCpp->QNetworkDiskCache::updateMetaData(*a0) : sipCpp->updateMetaData(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_updateMetaData, doc_QNetworkDiskCache_updateMetaData);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_data, "QNetworkDiskCache.data(QUrl) -> QIODevice");

extern "C" {static PyObject *meth_QNetworkDiskCache_data(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QUrl* a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QUrl, &a0))
        {
            QIODevice*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QNetworkDiskCache::data(*a0) : sipCpp->data(*a0));

            return sipConvertFromNewType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_data, doc_QNetworkDiskCache_data);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_remove, "QNetworkDiskCache.remove(QUrl) -> bool");

extern "C" {static PyObject *meth_QNetworkDiskCache_remove(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QUrl* a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QNetworkDiskCache::remove(*a0) : sipCpp->remove(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_remove, doc_QNetworkDiskCache_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_prepare, "QNetworkDiskCache.prepare(QNetworkCacheMetaData) -> QIODevice");

extern "C" {static PyObject *meth_QNetworkDiskCache_prepare(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_prepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QNetworkCacheMetaData* a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QNetworkCacheMetaData, &a0))
        {
            QIODevice*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QNetworkDiskCache::prepare(*a0) : sipCpp->prepare(*a0));

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_prepare, doc_QNetworkDiskCache_prepare);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_insert, "QNetworkDiskCache.insert(QIODevice)");

extern "C" {static PyObject *meth_QNetworkDiskCache_insert(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIODevice* a0;
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QIODevice, &a0))
        {
            (sipSelfWasArg ? sipCpp->QNetworkDiskCache::insert(a0) : sipCpp->insert(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_insert, doc_QNetworkDiskCache_insert);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_fileMetaData, "QNetworkDiskCache.fileMetaData(str) -> QNetworkCacheMetaData");

extern "C" {static PyObject *meth_QNetworkDiskCache_fileMetaData(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_fileMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QNetworkDiskCache, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QNetworkCacheMetaData*sipRes;

            sipRes = new QNetworkCacheMetaData(sipCpp->fileMetaData(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkCacheMetaData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_fileMetaData, doc_QNetworkDiskCache_fileMetaData);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_clear, "QNetworkDiskCache.clear()");

extern "C" {static PyObject *meth_QNetworkDiskCache_clear(PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNetworkDiskCache *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QNetworkDiskCache::clear() : sipCpp->clear());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_clear, doc_QNetworkDiskCache_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QNetworkDiskCache_expire, "QNetworkDiskCache.expire() -> int");

extern "C" {static PyObject *meth_QNetworkDiskCache_expire(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNetworkDiskCache_expire(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQNetworkDiskCache *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QNetworkDiskCache, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->sipProtectVirt_expire(sipSelfWasArg);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNetworkDiskCache, sipName_expire, doc_QNetworkDiskCache_expire);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QNetworkDiskCache(void *, const sipTypeDef *);}
static void *cast_QNetworkDiskCache(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QNetworkDiskCache)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractNetworkCache)->ctd_cast((QAbstractNetworkCache *)(QNetworkDiskCache *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkDiskCache(void *, int);}
static void release_QNetworkDiskCache(void *sipCppV,int)
{
    QNetworkDiskCache *sipCpp = reinterpret_cast<QNetworkDiskCache *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QNetworkDiskCache(sipSimpleWrapper *);}
static void dealloc_QNetworkDiskCache(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQNetworkDiskCache *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QNetworkDiskCache(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QNetworkDiskCache(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNetworkDiskCache(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNetworkDiskCache *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQNetworkDiskCache(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNetworkDiskCache[] = {{0, 255, 1}};


static PyMethodDef methods_QNetworkDiskCache[] = {
    {SIP_MLNAME_CAST(sipName_cacheDirectory), meth_QNetworkDiskCache_cacheDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_cacheDirectory)},
    {SIP_MLNAME_CAST(sipName_cacheSize), meth_QNetworkDiskCache_cacheSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_cacheSize)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QNetworkDiskCache_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QNetworkDiskCache_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_clear)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QNetworkDiskCache_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QNetworkDiskCache_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QNetworkDiskCache_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_data)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QNetworkDiskCache_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_expire), (PyCFunction)meth_QNetworkDiskCache_expire, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_expire)},
    {SIP_MLNAME_CAST(sipName_fileMetaData), meth_QNetworkDiskCache_fileMetaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_fileMetaData)},
    {SIP_MLNAME_CAST(sipName_insert), meth_QNetworkDiskCache_insert, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_insert)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QNetworkDiskCache_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_maximumCacheSize), meth_QNetworkDiskCache_maximumCacheSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_maximumCacheSize)},
    {SIP_MLNAME_CAST(sipName_metaData), meth_QNetworkDiskCache_metaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_metaData)},
    {SIP_MLNAME_CAST(sipName_prepare), meth_QNetworkDiskCache_prepare, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_prepare)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QNetworkDiskCache_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_remove), meth_QNetworkDiskCache_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_remove)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QNetworkDiskCache_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QNetworkDiskCache_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setCacheDirectory), meth_QNetworkDiskCache_setCacheDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_setCacheDirectory)},
    {SIP_MLNAME_CAST(sipName_setMaximumCacheSize), meth_QNetworkDiskCache_setMaximumCacheSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_setMaximumCacheSize)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QNetworkDiskCache_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMetaData), meth_QNetworkDiskCache_updateMetaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QNetworkDiskCache_updateMetaData)}
};

PyDoc_STRVAR(doc_QNetworkDiskCache, "\1QNetworkDiskCache(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtNetwork_QNetworkDiskCache = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QNetworkDiskCache,
        {0}
    },
    {
        sipNameNr_QNetworkDiskCache,
        {0, 0, 1},
        23, methods_QNetworkDiskCache,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNetworkDiskCache,
    -1,
    -1,
    supers_QNetworkDiskCache,
    0,
    init_type_QNetworkDiskCache,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNetworkDiskCache,
    0,
    0,
    0,
    release_QNetworkDiskCache,
    cast_QNetworkDiskCache,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QNetworkDiskCache::staticMetaObject,
    0,
    0,
    0
};
