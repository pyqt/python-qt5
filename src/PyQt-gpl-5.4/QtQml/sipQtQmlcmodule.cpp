/*
 * Module code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:44 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQml.h"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlproperty.sip"
#include <qqmlproperty.h>
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 35 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 38 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 26 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 41 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 44 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 47 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 50 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 53 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 59 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlabstracturlinterceptor.sip"
#include <qqmlabstracturlinterceptor.h>
#line 62 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qjsvalue.sip"
#include <qjsvalue.h>
#line 65 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 68 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmllist.sip"
#include <qqmllist.h>
#line 71 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlscriptstring.sip"
#include <qqmlscriptstring.h>
#line 74 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"

/* Define the strings used by this module. */
const char sipStrings_QtQml[] = {
    'Q', 'Q', 'm', 'l', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'U', 'r', 'l', 'I', 'n', 't', 'e', 'r', 'c', 'e', 'p', 't', 'o', 'r', ':', ':', 'D', 'a', 't', 'a', 'T', 'y', 'p', 'e', 0,
    'Q', 'Q', 'm', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', ':', ':', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'T', 'y', 'p', 'e', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    's', 'e', 't', 'O', 'u', 't', 'p', 'u', 't', 'W', 'a', 'r', 'n', 'i', 'n', 'g', 's', 'T', 'o', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'Q', 'm', 'l', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 'B', 'a', 's', 'e', ':', ':', 'I', 'm', 'a', 'g', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'Q', 'm', 'l', 'N', 'e', 't', 'w', 'o', 'r', 'k', 'A', 'c', 'c', 'e', 's', 's', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    's', 'e', 't', 'N', 'e', 't', 'w', 'o', 'r', 'k', 'A', 'c', 'c', 'e', 's', 's', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    'Q', 'Q', 'm', 'l', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', ':', ':', 'C', 'o', 'm', 'p', 'i', 'l', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'Q', 'Q', 'm', 'l', 'I', 'n', 'c', 'u', 'b', 'a', 't', 'o', 'r', ':', ':', 'I', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'o', 'u', 't', 'p', 'u', 't', 'W', 'a', 'r', 'n', 'i', 'n', 'g', 's', 'T', 'o', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'F', 'o', 'r', 'c', 'e', 'A', 's', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'o', 'u', 's', 'I', 'm', 'a', 'g', 'e', 'L', 'o', 'a', 'd', 'i', 'n', 'g', 0,
    'i', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'n', 'g', 'O', 'b', 'j', 'e', 'c', 't', 'C', 'o', 'u', 'n', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'Q', 'm', 'l', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 'B', 'a', 's', 'e', ':', ':', 'F', 'l', 'a', 'g', 's', 0,
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'C', 'o', 'r', 'e', '.', 'p', 'y', 'q', 't', 'W', 'r', 'a', 'p', 'p', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'q', 'm', 'l', 'A', 't', 't', 'a', 'c', 'h', 'e', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'Q', 'm', 'l', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'O', 'b', 'j', 'e', 'c', 't', 'O', 'w', 'n', 'e', 'r', 's', 'h', 'i', 'p', 0,
    'n', 'e', 't', 'w', 'o', 'r', 'k', 'A', 'c', 'c', 'e', 's', 's', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    'Q', 'Q', 'm', 'l', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 'B', 'a', 's', 'e', ':', ':', 'F', 'l', 'a', 'g', 0,
    'q', 'm', 'l', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'U', 'n', 'c', 'r', 'e', 'a', 't', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'Q', 'm', 'l', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'U', 'r', 'l', 'I', 'n', 't', 'e', 'r', 'c', 'e', 'p', 't', 'o', 'r', 0,
    'i', 'n', 's', 't', 'a', 'l', 'l', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'o', 'r', 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'Q', 'm', 'l', 'L', 'i', 's', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', '<', 'Q', 'O', 'b', 'j', 'e', 'c', 't', '>', 0,
    'q', 'm', 'l', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'S', 'i', 'n', 'g', 'l', 'e', 't', 'o', 'n', 'T', 'y', 'p', 'e', 0,
    'Q', 'Q', 'm', 'l', 'I', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', 0,
    'Q', 'Q', 'm', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'V', 'a', 'l', 'u', 'e', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    's', 'e', 't', 'N', 'o', 't', 'i', 'f', 'y', 'O', 'n', 'V', 'a', 'l', 'u', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'I', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', 0,
    'Q', 'J', 'S', 'V', 'a', 'l', 'u', 'e', ':', ':', 'S', 'p', 'e', 'c', 'i', 'a', 'l', 'V', 'a', 'l', 'u', 'e', 0,
    'i', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'n', 'g', 'O', 'b', 'j', 'e', 'c', 't', 'C', 'o', 'u', 'n', 't', 0,
    'Q', 'Q', 'm', 'l', 'I', 'n', 'c', 'u', 'b', 'a', 't', 'o', 'r', ':', ':', 'S', 't', 'a', 't', 'u', 's', 0,
    's', 'e', 't', 'O', 'f', 'f', 'l', 'i', 'n', 'e', 'S', 't', 'o', 'r', 'a', 'g', 'e', 'P', 'a', 't', 'h', 0,
    'Q', 'Q', 'm', 'l', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 'B', 'a', 's', 'e', 0,
    'Q', 'Q', 'm', 'l', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', ':', ':', 'S', 't', 'a', 't', 'u', 's', 0,
    'Q', 'Q', 'm', 'l', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'T', 'y', 'p', 'e', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'A', 's', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'o', 'u', 's', 'I', 'f', 'N', 'e', 's', 't', 'e', 'd', 0,
    'n', 'o', 't', 'i', 'f', 'y', 'O', 'n', 'V', 'a', 'l', 'u', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'i', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', 0,
    'n', 'e', 't', 'w', 'o', 'r', 'k', 'A', 'c', 'c', 'e', 's', 's', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'Q', 'm', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', '>', 0,
    'q', 'm', 'l', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'R', 'e', 'v', 'i', 's', 'i', 'o', 'n', 0,
    'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'Q', 'Q', 'm', 'l', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 'P', 'l', 'u', 'g', 'i', 'n', 0,
    'J', 'a', 'v', 'a', 'S', 'c', 'r', 'i', 'p', 't', 'O', 'w', 'n', 'e', 'r', 's', 'h', 'i', 'p', 0,
    's', 'e', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 'F', 'o', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 0,
    'c', 'l', 'e', 'a', 'r', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 'C', 'a', 'c', 'h', 'e', 0,
    'a', 't', 't', 'a', 'c', 'h', 'e', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 0,
    'i', 's', 'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 'L', 'i', 't', 'e', 'r', 'a', 'l', 0,
    'Q', 'Q', 'm', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', ':', ':', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'O', 'b', 'j', 'e', 'c', 't', 'O', 'w', 'n', 'e', 'r', 's', 'h', 'i', 'p', 0,
    'o', 'f', 'f', 'l', 'i', 'n', 'e', 'S', 't', 'o', 'r', 'a', 'g', 'e', 'P', 'a', 't', 'h', 0,
    't', 'r', 'i', 'm', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 'C', 'a', 'c', 'h', 'e', 0,
    's', 'e', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'n', 'e', 'e', 'd', 's', 'N', 'o', 't', 'i', 'f', 'y', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'c', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 'C', 'o', 'm', 'p', 'l', 'e', 't', 'e', 0,
    'Q', 'Q', 'm', 'l', 'L', 'i', 's', 't', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    's', 'e', 't', 'S', 'o', 'u', 'r', 'c', 'e', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'P', 'l', 'u', 'g', 'i', 'n', 'P', 'a', 't', 'h', 'L', 'i', 's', 't', 0,
    's', 'e', 't', 'I', 'm', 'p', 'o', 'r', 't', 'P', 'a', 't', 'h', 'L', 'i', 's', 't', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'S', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'o', 'u', 's', 0,
    'c', 'a', 'l', 'l', 'A', 's', 'C', 'o', 'n', 's', 't', 'r', 'u', 'c', 't', 'o', 'r', 0,
    'i', 's', 'S', 'i', 'g', 'n', 'a', 'l', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    's', 'e', 'n', 'd', 'e', 'r', 'S', 'i', 'g', 'n', 'a', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    's', 'e', 't', 'E', 'x', 't', 'r', 'a', 'S', 'e', 'l', 'e', 'c', 't', 'o', 'r', 's', 0,
    's', 'i', 'p', '.', 's', 'i', 'm', 'p', 'l', 'e', 'w', 'r', 'a', 'p', 'p', 'e', 'r', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'Q', 'm', 'l', 'E', 'r', 'r', 'o', 'r', '>', 0,
    'Q', 'Q', 'm', 'l', 'S', 'c', 'r', 'i', 'p', 't', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'T', 'y', 'p', 'e', 'N', 'a', 'm', 'e', 0,
    'i', 's', 'S', 'i', 'g', 'n', 'a', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'Q', 'Q', 'm', 'l', 'P', 'a', 'r', 's', 'e', 'r', 'S', 't', 'a', 't', 'u', 's', 0,
    'Q', 'Q', 'm', 'l', 'F', 'i', 'l', 'e', 'S', 'e', 'l', 'e', 'c', 't', 'o', 'r', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'v', 'a', 'l', 'u', 'e', 'I', 's', 'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 'F', 'o', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'a', 'd', 'd', 'I', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 0,
    's', 'e', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'J', 'S', 'V', 'a', 'l', 'u', 'e', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'c', 'a', 'l', 'l', 'W', 'i', 't', 'h', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'J', 'S', 'V', 'a', 'l', 'u', 'e', '>', 0,
    'q', 'm', 'l', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'Q', 'Q', 'm', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'M', 'a', 'p', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'l', 'i', 's', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 'T', 'y', 'p', 'e', 0,
    'f', 'o', 'r', 'c', 'e', 'C', 'o', 'm', 'p', 'l', 'e', 't', 'i', 'o', 'n', 0,
    'o', 'b', 'j', 'e', 'c', 't', 'O', 'w', 'n', 'e', 'r', 's', 'h', 'i', 'p', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'p', 'r', 'o', 'g', 'r', 'e', 's', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'r', 'e', 'a', 't', 'i', 'o', 'n', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    's', 'e', 't', 'I', 'n', 'i', 't', 'i', 'a', 'l', 'S', 't', 'a', 't', 'e', 0,
    'h', 'a', 's', 'N', 'o', 't', 'i', 'f', 'y', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'b', 'o', 'o', 'l', 'e', 'a', 'n', 'L', 'i', 't', 'e', 'r', 'a', 'l', 0,
    'i', 'n', 'c', 'u', 'b', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'Q', 'Q', 'm', 'l', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'a', 'd', 'd', 'N', 'a', 'm', 'e', 'd', 'B', 'u', 'n', 'd', 'l', 'e', 0,
    'p', 'l', 'u', 'g', 'i', 'n', 'P', 'a', 't', 'h', 'L', 'i', 's', 't', 0,
    'i', 'm', 'p', 'o', 'r', 't', 'P', 'a', 't', 'h', 'L', 'i', 's', 't', 0,
    'c', 'o', 'm', 'p', 'l', 'e', 't', 'e', 'C', 'r', 'e', 'a', 't', 'e', 0,
    'J', 'a', 'v', 'a', 'S', 'c', 'r', 'i', 'p', 't', 'F', 'i', 'l', 'e', 0,
    'd', 'e', 'l', 'e', 't', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'h', 'a', 's', 'O', 'w', 'n', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    's', 't', 'r', 'i', 'c', 't', 'l', 'y', 'E', 'q', 'u', 'a', 'l', 's', 0,
    'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 'V', 'a', 'l', 'u', 'e', 0,
    'c', 'o', 'l', 'l', 'e', 'c', 't', 'G', 'a', 'r', 'b', 'a', 'g', 'e', 0,
    's', 'e', 't', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'L', 'i', 't', 'e', 'r', 'a', 'l', 0,
    's', 't', 'r', 'i', 'n', 'g', 'L', 'i', 't', 'e', 'r', 'a', 'l', 0,
    'i', 's', 'N', 'u', 'l', 'l', 'L', 'i', 't', 'e', 'r', 'a', 'l', 0,
    'i', 's', 'M', 'a', 'n', 'i', 'p', 'u', 'l', 'a', 'b', 'l', 'e', 0,
    'Q', 'Q', 'm', 'l', 'I', 'n', 'c', 'u', 'b', 'a', 't', 'o', 'r', 0,
    'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'T', 'y', 'p', 'e', 's', 0,
    's', 'e', 't', 'E', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'i', 'm', 'a', 'g', 'e', 'P', 'r', 'o', 'v', 'i', 'd', 'e', 'r', 0,
    'a', 'd', 'd', 'P', 'l', 'u', 'g', 'i', 'n', 'P', 'a', 't', 'h', 0,
    'a', 'd', 'd', 'I', 'm', 'p', 'o', 'r', 't', 'P', 'a', 't', 'h', 0,
    'n', 'a', 'm', 'e', 'F', 'o', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'p', 'a', 'r', 'e', 'n', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    's', 't', 'a', 't', 'u', 's', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 'Q', 'm', 'l', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 0,
    'o', 'b', 'j', 'e', 'c', 't', 'C', 'r', 'e', 'a', 't', 'e', 'd', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'T', 'y', 'p', 'e', 0,
    'Q', 'Q', 'm', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'C', 'p', 'p', 'O', 'w', 'n', 'e', 'r', 's', 'h', 'i', 'p', 0,
    'i', 'm', 'p', 'o', 'r', 't', 'P', 'l', 'u', 'g', 'i', 'n', 0,
    'A', 's', 'y', 'n', 'c', 'h', 'r', 'o', 'n', 'o', 'u', 's', 0,
    's', 'e', 't', 'P', 'r', 'o', 't', 'o', 't', 'y', 'p', 'e', 0,
    'g', 'l', 'o', 'b', 'a', 'l', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'v', 'a', 'l', 'u', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'i', 's', 'R', 'e', 's', 'e', 't', 't', 'a', 'b', 'l', 'e', 0,
    'i', 's', 'D', 'e', 's', 'i', 'g', 'n', 'a', 'b', 'l', 'e', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'i', 'n', 'c', 'u', 'b', 'a', 't', 'e', 'F', 'o', 'r', 0,
    's', 'e', 't', 'S', 'e', 'l', 'e', 'c', 't', 'o', 'r', 0,
    's', 'c', 'o', 'p', 'e', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'r', 'o', 'o', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'r', 'e', 's', 'o', 'l', 'v', 'e', 'd', 'U', 'r', 'l', 0,
    'Q', 'Q', 'm', 'l', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'b', 'e', 'g', 'i', 'n', 'C', 'r', 'e', 'a', 't', 'e', 0,
    'r', 'o', 'o', 't', 'O', 'b', 'j', 'e', 'c', 't', 's', 0,
    'h', 'a', 's', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'i', 's', 'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 0,
    'd', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    '_', '_', 'g', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'Q', 'm', 'l', 0,
    'i', 's', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'c', 'l', 'a', 's', 's', 'B', 'e', 'g', 'i', 'n', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'F', 'i', 'l', 'e', 0,
    'e', 'x', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'B', 'a', 's', 'e', 'U', 'r', 'l', 0,
    'f', 'o', 'r', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'Q', 'Q', 'm', 'l', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'Q', 'm', 'l', 'd', 'i', 'r', 'F', 'i', 'l', 'e', 0,
    'i', 's', 'C', 'a', 'l', 'l', 'a', 'b', 'l', 'e', 0,
    'n', 'e', 'w', 'Q', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'l', 'i', 'n', 'e', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'c', 'l', 'e', 'a', 'r', 'E', 'r', 'r', 'o', 'r', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    't', 'o', 'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 0,
    'i', 's', 'W', 'r', 'i', 't', 'a', 'b', 'l', 'e', 0,
    'i', 's', 'R', 'e', 'a', 'd', 'a', 'b', 'l', 'e', 0,
    '_', '_', 'i', 'n', 'v', 'e', 'r', 't', '_', '_', 0,
    's', 'e', 't', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'c', 'a', 'n', 'A', 'p', 'p', 'e', 'n', 'd', 0,
    's', 'e', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'Q', 'Q', 'm', 'l', 'E', 'r', 'r', 'o', 'r', 0,
    'i', 'm', 'a', 'g', 'e', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'L', 'o', 'a', 'd', 'i', 'n', 'g', 0,
    'i', 'n', 't', 'e', 'r', 'c', 'e', 'p', 't', 0,
    'U', 'r', 'l', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'p', 'r', 'o', 't', 'o', 't', 'y', 'p', 'e', 0,
    't', 'o', 'Q', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'i', 's', 'Q', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'i', 's', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'N', 'u', 'l', 'l', 'V', 'a', 'l', 'u', 'e', 0,
    'n', 'e', 'w', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'J', 'S', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 0,
    'r', 'e', 'c', 'e', 'i', 'v', 'e', 'r', 's', 0,
    's', 'e', 't', 'O', 'b', 'j', 'e', 'c', 't', 0,
    't', 'o', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'p', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'c', 'a', 'n', 'C', 'o', 'u', 'n', 't', 0,
    'c', 'a', 'n', 'C', 'l', 'e', 'a', 'r', 0,
    'w', 'a', 'r', 'n', 'i', 'n', 'g', 's', 0,
    'l', 'o', 'a', 'd', 'D', 'a', 't', 'a', 0,
    't', 'o', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'i', 's', 'R', 'e', 'g', 'E', 'x', 'p', 0,
    'i', 's', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'Q', 'J', 'S', 'V', 'a', 'l', 'u', 'e', 0,
    'n', 'e', 'w', 'A', 'r', 'r', 'a', 'y', 0,
    'e', 'v', 'a', 'l', 'u', 'a', 't', 'e', 0,
    'p', 'r', 'o', 't', 'o', 'c', 'o', 'l', 0,
    'h', 'a', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'n', 'a', 'm', 'e', 'T', 'y', 'p', 'e', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'i', 's', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'i', 's', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'p', 'r', 'o', 'g', 'r', 'e', 's', 's', 0,
    'f', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    't', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 's', 0,
    '_', '_', 'h', 'a', 's', 'h', '_', '_', 0,
    '_', '_', 'b', 'o', 'o', 'l', '_', '_', 0,
    '_', '_', 'i', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'a', 'n', 'd', '_', '_', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'b', 'a', 's', 'e', 'U', 'r', 'l', 0,
    'l', 'o', 'a', 'd', 'U', 'r', 'l', 0,
    'Q', 'm', 'l', 'F', 'i', 'l', 'e', 0,
    'i', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 0,
    'i', 's', 'R', 'e', 'a', 'd', 'y', 0,
    's', 'e', 't', 'L', 'i', 'n', 'e', 0,
    'i', 's', 'A', 'r', 'r', 'a', 'y', 0,
    'h', 'a', 's', 'N', 'e', 'x', 't', 0,
    'f', 'i', 'l', 't', 'e', 'r', 's', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 0,
    'o', 'p', 't', 'i', 'o', 'n', 's', 0,
    'i', 's', 'E', 'm', 'p', 't', 'y', 0,
    '_', '_', 'l', 'e', 'n', '_', '_', 0,
    's', 'e', 't', 'D', 'a', 't', 'a', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 0,
    '_', '_', 'a', 'n', 'd', '_', '_', 0,
    '_', '_', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'n', 't', '_', '_', 0,
    '_', '_', 'i', 'o', 'r', '_', '_', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 0,
    'e', 'n', 'g', 'i', 'n', 'e', 0,
    'e', 'q', 'u', 'a', 'l', 's', 0,
    'i', 's', 'D', 'a', 't', 'e', 0,
    'e', 'r', 'r', 'o', 'r', 's', 0,
    'P', 'i', 'x', 'm', 'a', 'p', 0,
    's', 'e', 't', 'U', 'r', 'l', 0,
    'c', 'r', 'e', 'a', 't', 'e', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 0,
    's', 'e', 'n', 'd', 'e', 'r', 0,
    'v', 'a', 'l', 'u', 'e', '9', 0,
    'v', 'a', 'l', 'u', 'e', '8', 0,
    'v', 'a', 'l', 'u', 'e', '7', 0,
    'v', 'a', 'l', 'u', 'e', '6', 0,
    'v', 'a', 'l', 'u', 'e', '5', 0,
    'v', 'a', 'l', 'u', 'e', '4', 0,
    'v', 'a', 'l', 'u', 'e', '3', 0,
    'v', 'a', 'l', 'u', 'e', '2', 0,
    'v', 'a', 'l', 'u', 'e', '1', 0,
    'v', 'a', 'l', 'u', 'e', '0', 0,
    's', 'y', 'm', 'b', 'o', 'l', 0,
    't', 'o', 'B', 'o', 'o', 'l', 0,
    'i', 's', 'B', 'o', 'o', 'l', 0,
    's', 'u', 'f', 'f', 'i', 'x', 0,
    'p', 'r', 'e', 'f', 'i', 'x', 0,
    's', 't', 'a', 't', 'u', 's', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 0,
    'm', 'e', 't', 'h', 'o', 'd', 0,
    'l', 'o', 'c', 'a', 'l', 'e', 0,
    'f', 'o', 'r', 'm', 'a', 't', 0,
    't', 'o', 'U', 'I', 'n', 't', 0,
    'i', 'n', 's', 'e', 'r', 't', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 0,
    'l', 'e', 'n', 'g', 't', 'h', 0,
    'i', 's', 'N', 'u', 'l', 'l', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 0,
    'o', 'b', 'j', 'e', 'c', 't', 0,
    'p', 'a', 'r', 'e', 'n', 't', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
    '_', '_', 'o', 'r', '_', '_', 0,
    'c', 'a', 'n', 'A', 't', 0,
    'I', 'm', 'a', 'g', 'e', 0,
    's', 'c', 'o', 'p', 'e', 0,
    'w', 'r', 'i', 't', 'e', 0,
    'e', 'r', 'r', 'o', 'r', 0,
    'r', 'e', 's', 'e', 't', 0,
    't', 'o', 'I', 'n', 't', 0,
    'c', 'l', 'e', 'a', 'r', 0,
    'c', 'o', 'u', 'n', 't', 0,
    'v', 'a', 'l', 'u', 'e', 0,
    'i', 'n', 'd', 'e', 'x', 0,
    'f', 'l', 'a', 'g', 's', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'm', 's', 'e', 'c', 's', 0,
    'c', 'a', 'l', 'l', 0,
    'a', 'r', 'g', 's', 0,
    'p', 'o', 'r', 't', 0,
    'k', 'e', 'y', 's', 0,
    'l', 'i', 'n', 'e', 0,
    'l', 'o', 'a', 'd', 0,
    'r', 'e', 'a', 'd', 0,
    'm', 'o', 'd', 'e', 0,
    'n', 'e', 'x', 't', 0,
    'q', 'u', 'i', 't', 0,
    'n', 'a', 'm', 'e', 0,
    'b', 'a', 's', 'e', 0,
    's', 'i', 'z', 'e', 0,
    'f', 'r', 'o', 'm', 0,
    's', 'o', 'r', 't', 0,
    'u', 'r', 'l', 0,
};
#line 24 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 113 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlproperty.sip"
// Imports from QtCore.
pyqt5_qtqml_get_pyqtslot_parts_t pyqt5_qtqml_get_pyqtslot_parts;
#line 27 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qmlregistertype.sip"
// Imports from QtCore.
pyqt5_qtqml_get_qmetaobject_t pyqt5_qtqml_get_qmetaobject;
#line 391 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"

void sipVH_QtQml_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const QQmlProperty& a0)
{
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N",new QQmlProperty(a0),sipType_QQmlProperty,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "Z");
}

QVariant sipVH_QtQml_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const QString& a0,const QVariant& a1)
{
    QVariant sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "NN",new QString(a0),sipType_QString,NULL,new QVariant(a1),sipType_QVariant,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QVariant, &sipRes);

    return sipRes;
}

QNetworkAccessManager* sipVH_QtQml_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QObject*a0)
{
    QNetworkAccessManager* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QObject,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H2", sipType_QNetworkAccessManager, &sipRes);

    return sipRes;
}

void sipVH_QtQml_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QObject*a0)
{
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QObject,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "Z");
}

void sipVH_QtQml_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QQmlIncubator::Status a0)
{
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "F",a0,sipType_QQmlIncubator_Status);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "Z");
}

void sipVH_QtQml_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QQmlEngine*a0,const char*a1)
{
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "Ds",a0,sipType_QQmlEngine,NULL,a1);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "Z");
}

void sipVH_QtQml_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const char*a0)
{
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "s",a0);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "Z");
}

QQmlImageProviderBase::Flags sipVH_QtQml_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QQmlImageProviderBase::Flags sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QQmlImageProviderBase_Flags, &sipRes);

    return sipRes;
}

QQmlImageProviderBase::ImageType sipVH_QtQml_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QQmlImageProviderBase::ImageType sipRes = (QQmlImageProviderBase::ImageType)0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QQmlImageProviderBase_ImageType, &sipRes);

    return sipRes;
}

QObject* sipVH_QtQml_9(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QQmlContext*a0)
{
    QObject* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QQmlContext,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QObject, &sipRes);

    return sipRes;
}

QUrl sipVH_QtQml_10(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const QUrl& a0,QQmlAbstractUrlInterceptor::DataType a1)
{
    QUrl sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "NF",new QUrl(a0),sipType_QUrl,NULL,a1,sipType_QQmlAbstractUrlInterceptor_DataType);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QUrl, &sipRes);

    return sipRes;
}


PyDoc_STRVAR(doc_qmlRegisterUncreatableType, "qmlRegisterUncreatableType(type, str, int, int, str, str) -> int\n"
    "qmlRegisterUncreatableType(type, int, str, int, int, str, str) -> int");

extern "C" {static PyObject *func_qmlRegisterUncreatableType(PyObject *,PyObject *);}
static PyObject *func_qmlRegisterUncreatableType(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const char* a1;
        int a2;
        int a3;
        const char* a4;
        const QString* a5;
        int a5State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "TsiisJ1", &PyType_Type, &a0, &a1, &a2, &a3, &a4, sipType_QString,&a5, &a5State))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 91 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_uncreatable_type((PyTypeObject *)a0, a1, a2, a3, a4, *a5, -1)) < 0)
        sipError = sipErrorFail;
#line 514 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        PyObject * a0;
        int a1;
        const char* a2;
        int a3;
        int a4;
        const char* a5;
        const QString* a6;
        int a6State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "TisiisJ1", &PyType_Type, &a0, &a1, &a2, &a3, &a4, &a5, sipType_QString,&a6, &a6State))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_uncreatable_type((PyTypeObject *)a0, a2, a3, a4, a5, *a6, a1)) < 0)
        sipError = sipErrorFail;
#line 547 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"
            sipReleaseType(const_cast<QString *>(a6),sipType_QString,a6State);

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qmlRegisterUncreatableType, doc_qmlRegisterUncreatableType);

    return NULL;
}


PyDoc_STRVAR(doc_qmlRegisterType, "qmlRegisterType(QUrl, str, int, int, str) -> int\n"
    "qmlRegisterType(type, type attachedProperties=0) -> int\n"
    "qmlRegisterType(type, str, int, int, str, type attachedProperties=0) -> int\n"
    "qmlRegisterType(type, int, str, int, int, str, type attachedProperties=0) -> int");

extern "C" {static PyObject *func_qmlRegisterType(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qmlRegisterType(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        const char* a1;
        int a2;
        int a3;
        const char* a4;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "J9siis", sipType_QUrl, &a0, &a1, &a2, &a3, &a4))
        {
            int sipRes;

            sipRes = qmlRegisterType(*a0,a1,a2,a3,a4);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        PyObject * a0;
        PyObject * a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_attachedProperties,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "T|T", &PyType_Type, &a0, &PyType_Type, &a1))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 67 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_type((PyTypeObject *)a0, (PyTypeObject *)a1)) < 0)
        sipError = sipErrorFail;
#line 613 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        PyObject * a0;
        const char* a1;
        int a2;
        int a3;
        const char* a4;
        PyObject * a5 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_attachedProperties,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Tsiis|T", &PyType_Type, &a0, &a1, &a2, &a3, &a4, &PyType_Type, &a5))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_library_type((PyTypeObject *)a0, a1, a2, a3, a4, -1, (PyTypeObject *)a5)) < 0)
        sipError = sipErrorFail;
#line 652 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    {
        PyObject * a0;
        int a1;
        const char* a2;
        int a3;
        int a4;
        const char* a5;
        PyObject * a6 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_attachedProperties,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Tisiis|T", &PyType_Type, &a0, &a1, &a2, &a3, &a4, &a5, &PyType_Type, &a6))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 83 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_library_type((PyTypeObject *)a0, a2, a3, a4, a5, a1, (PyTypeObject *)a6)) < 0)
        sipError = sipErrorFail;
#line 693 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qmlRegisterType, doc_qmlRegisterType);

    return NULL;
}


PyDoc_STRVAR(doc_qmlRegisterSingletonType, "qmlRegisterSingletonType(QUrl, str, int, int, str) -> int\n"
    "qmlRegisterSingletonType(type, str, int, int, str, callable) -> int");

extern "C" {static PyObject *func_qmlRegisterSingletonType(PyObject *,PyObject *);}
static PyObject *func_qmlRegisterSingletonType(PyObject *,PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        const char* a1;
        int a2;
        int a3;
        const char* a4;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9siis", sipType_QUrl, &a0, &a1, &a2, &a3, &a4))
        {
            int sipRes;

            sipRes = qmlRegisterSingletonType(*a0,a1,a2,a3,a4);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        PyObject * a0;
        const char* a1;
        int a2;
        int a3;
        const char* a4;
        PyObject * a5;

        if (sipParseArgs(&sipParseErr, sipArgs, "TsiisF", &PyType_Type, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_singleton_type((PyTypeObject *)a0, a1, a2, a3, a4, a5)) < 0)
        sipError = sipErrorFail;
#line 755 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qmlRegisterSingletonType, doc_qmlRegisterSingletonType);

    return NULL;
}


PyDoc_STRVAR(doc_qmlRegisterRevision, "qmlRegisterRevision(type, int, str, int, int, type attachedProperties=0) -> int");

extern "C" {static PyObject *func_qmlRegisterRevision(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qmlRegisterRevision(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        int a1;
        const char* a2;
        int a3;
        int a4;
        PyObject * a5 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_attachedProperties,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Tisii|T", &PyType_Type, &a0, &a1, &a2, &a3, &a4, &PyType_Type, &a5))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qmlregistertype.sip"
    if ((sipRes = qpyqml_register_library_type((PyTypeObject *)a0, a2, a3, a4, 0, a1, (PyTypeObject *)a5)) < 0)
        sipError = sipErrorFail;
#line 808 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qmlRegisterRevision, doc_qmlRegisterRevision);

    return NULL;
}


PyDoc_STRVAR(doc_qmlAttachedPropertiesObject, "qmlAttachedPropertiesObject(type, QObject, bool create=True) -> QObject");

extern "C" {static PyObject *func_qmlAttachedPropertiesObject(PyObject *,PyObject *, PyObject *);}
static PyObject *func_qmlAttachedPropertiesObject(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        QObject* a1;
        bool a2 = 1;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_create,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "TJ8|b", &PyType_Type, &a0, sipType_QObject, &a1, &a2))
        {
            QObject*sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qmlattachedpropertiesobject.sip"
    QObject *proxy = qpyqml_find_proxy_for(a1);

    if (!proxy)
    {
        sipError = sipErrorFail;
    }
    else
    {
        static QHash<PyTypeObject *, int> cache;

        int idx = cache.value((PyTypeObject *)a0, -1);
        const QMetaObject *mo = pyqt5_qtqml_get_qmetaobject((PyTypeObject *)a0);

        sipRes = qmlAttachedPropertiesObject(&idx, proxy, mo, a2);

        cache.insert((PyTypeObject *)a0, idx);
    }
#line 870 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipConvertFromType(sipRes,sipType_QObject,NULL);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipParseErr, sipName_qmlAttachedPropertiesObject, doc_qmlAttachedPropertiesObject);

    return NULL;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QJSEngine(void **);}
static const sipTypeDef *sipSubClass_QJSEngine(void **sipCppRet)
{
    QObject *sipCpp = reinterpret_cast<QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qjsengine.sip"
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QQmlExpression, &sipType_QQmlExpression, -1, 1},
    #if QT_VERSION >= 0x050200
        {sipName_QQmlFileSelector, &sipType_QQmlFileSelector, -1, 2},
    #else
        {0, 0, -1, 2},
    #endif
        {sipName_QQmlContext, &sipType_QQmlContext, -1, 3},
        {sipName_QQmlPropertyMap, &sipType_QQmlPropertyMap, -1, 4},
        {sipName_QQmlComponent, &sipType_QQmlComponent, -1, 5},
        {sipName_QQmlExtensionPlugin, &sipType_QQmlExtensionPlugin, -1, 6},
        {sipName_QJSEngine, &sipType_QJSEngine, 7, -1},
        {sipName_QQmlEngine, &sipType_QQmlEngine, 8, -1},
    #if QT_VERSION >= 0x050100
        {sipName_QQmlApplicationEngine, &sipType_QQmlApplicationEngine, -1, -1},
    #else
        {0, 0, -1, -1},
    #endif
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
#line 940 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"

    return sipType;
}


extern "C" {static PyObject *slot_QQmlImageProviderBase_Flag___or__(PyObject *,PyObject *);}
static PyObject *slot_QQmlImageProviderBase_Flag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QQmlImageProviderBase::Flag a0;
        QQmlImageProviderBase::Flags* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QQmlImageProviderBase_Flag, &a0, sipType_QQmlImageProviderBase_Flags, &a1, &a1State))
        {
            QQmlImageProviderBase::Flags*sipRes;

            sipRes = new QQmlImageProviderBase::Flags((a0 | *a1));
            sipReleaseType(a1,sipType_QQmlImageProviderBase_Flags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QQmlImageProviderBase_Flags,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QQmlImageProviderBase_Flag[] = {
    {(void *)slot_QQmlImageProviderBase_Flag___or__, or_slot},
    {0, (sipPySlotType)0}
};

static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlProperty__Type, {0}}, sipNameNr_Type, 32, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlProperty__PropertyTypeCategory, {0}}, sipNameNr_PropertyTypeCategory, 32, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlIncubator__Status, {0}}, sipNameNr_Status, 25, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlIncubator__IncubationMode, {0}}, sipNameNr_IncubationMode, 25, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlEngine__ObjectOwnership, {0}}, sipNameNr_ObjectOwnership, 14, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlImageProviderBase__Flag, {0}}, sipNameNr_Flag, 20, slots_QQmlImageProviderBase_Flag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlImageProviderBase__ImageType, {0}}, sipNameNr_ImageType, 20, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlComponent__Status, {0}}, sipNameNr_Status, 10, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlComponent__CompilationMode, {0}}, sipNameNr_CompilationMode, 10, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QQmlAbstractUrlInterceptor__DataType, {0}}, sipNameNr_DataType, 7, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QJSValue__SpecialValue, {0}}, sipNameNr_SpecialValue, 1, NULL},
};


/*
 * This defines each type in this module.
 */
static sipTypeDef *typesTable[] = {
    &sipTypeDef_QtQml_QJSEngine.super.ctd_base,
    &sipTypeDef_QtQml_QJSValue.super.ctd_base,
    &enumTypes[10].etd_base,
    &sipTypeDef_QtQml_QJSValueIterator.super.ctd_base,
    &sipTypeDef_QtQml_QList_0100QJSValue.mtd_base,
    &sipTypeDef_QtQml_QList_0100QQmlError.mtd_base,
    &sipTypeDef_QtQml_QList_0100QQmlProperty.mtd_base,
    &sipTypeDef_QtQml_QQmlAbstractUrlInterceptor.super.ctd_base,
    &enumTypes[9].etd_base,
    &sipTypeDef_QtQml_QQmlApplicationEngine.super.ctd_base,
    &sipTypeDef_QtQml_QQmlComponent.super.ctd_base,
    &enumTypes[8].etd_base,
    &enumTypes[7].etd_base,
    &sipTypeDef_QtQml_QQmlContext.super.ctd_base,
    &sipTypeDef_QtQml_QQmlEngine.super.ctd_base,
    &enumTypes[4].etd_base,
    &sipTypeDef_QtQml_QQmlError.super.ctd_base,
    &sipTypeDef_QtQml_QQmlExpression.super.ctd_base,
    &sipTypeDef_QtQml_QQmlExtensionPlugin.super.ctd_base,
    &sipTypeDef_QtQml_QQmlFileSelector.super.ctd_base,
    &sipTypeDef_QtQml_QQmlImageProviderBase.super.ctd_base,
    &enumTypes[5].etd_base,
    &sipTypeDef_QtQml_QQmlImageProviderBase_Flags.super.ctd_base,
    &enumTypes[6].etd_base,
    &sipTypeDef_QtQml_QQmlIncubationController.super.ctd_base,
    &sipTypeDef_QtQml_QQmlIncubator.super.ctd_base,
    &enumTypes[3].etd_base,
    &enumTypes[2].etd_base,
    &sipTypeDef_QtQml_QQmlListProperty_0100QObject.mtd_base,
    &sipTypeDef_QtQml_QQmlListReference.super.ctd_base,
    &sipTypeDef_QtQml_QQmlNetworkAccessManagerFactory.super.ctd_base,
    &sipTypeDef_QtQml_QQmlParserStatus.super.ctd_base,
    &sipTypeDef_QtQml_QQmlProperty.super.ctd_base,
    &enumTypes[1].etd_base,
    &enumTypes[0].etd_base,
    &sipTypeDef_QtQml_QQmlPropertyMap.super.ctd_base,
    &sipTypeDef_QtQml_QQmlPropertyValueSource.super.ctd_base,
    &sipTypeDef_QtQml_QQmlScriptString.super.ctd_base,
};


/*
 * These define each typedef in this module.
 */
static sipTypedefDef typedefsTable[] = {
    {"QJSValueList", "QList<QJSValue>"},
    {"QQmlProperties", "QList<QQmlProperty>"},
};


/*
 * This defines the virtual handlers that this module implements and can be
 * used by other modules.
 */
static sipVirtHandlerFunc virtHandlersTable[] = {
    (sipVirtHandlerFunc)sipVH_QtQml_0,
    (sipVirtHandlerFunc)sipVH_QtQml_1,
    (sipVirtHandlerFunc)sipVH_QtQml_2,
    (sipVirtHandlerFunc)sipVH_QtQml_3,
    (sipVirtHandlerFunc)sipVH_QtQml_4,
    (sipVirtHandlerFunc)sipVH_QtQml_5,
    (sipVirtHandlerFunc)sipVH_QtQml_6,
    (sipVirtHandlerFunc)sipVH_QtQml_7,
    (sipVirtHandlerFunc)sipVH_QtQml_8,
    (sipVirtHandlerFunc)sipVH_QtQml_9,
    (sipVirtHandlerFunc)sipVH_QtQml_10,
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt5.QtCore", 1, NULL},
    {"PyQt5.QtNetwork", -1, NULL},
    {NULL, -1, NULL}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QJSEngine, {162, 0, 0}, NULL},
    {NULL, {0, 0, 0}, NULL}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtQml = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt5_QtQml,
    0,
    -1,
    sipStrings_QtQml,
    importsTable,
    NULL,
    38,
    typesTable,
    NULL,
    0,
    NULL,
    2,
    typedefsTable,
    virtHandlersTable,
    NULL,
    convertorsTable,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtQml;
const sipExportedModuleDef *sipModuleAPI_QtQml_QtCore;
const sipExportedModuleDef *sipModuleAPI_QtQml_QtNetwork;

sip_qt_metaobject_func sip_QtQml_qt_metaobject;
sip_qt_metacall_func sip_QtQml_qt_metacall;
sip_qt_metacast_func sip_QtQml_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtQml
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtQml
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_MLNAME_CAST(sipName_qmlRegisterUncreatableType), func_qmlRegisterUncreatableType, METH_VARARGS, SIP_MLDOC_CAST(doc_qmlRegisterUncreatableType)},
        {SIP_MLNAME_CAST(sipName_qmlRegisterType), (PyCFunction)func_qmlRegisterType, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qmlRegisterType)},
        {SIP_MLNAME_CAST(sipName_qmlRegisterSingletonType), func_qmlRegisterSingletonType, METH_VARARGS, SIP_MLDOC_CAST(doc_qmlRegisterSingletonType)},
        {SIP_MLNAME_CAST(sipName_qmlRegisterRevision), (PyCFunction)func_qmlRegisterRevision, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qmlRegisterRevision)},
        {SIP_MLNAME_CAST(sipName_qmlAttachedPropertiesObject), (PyCFunction)func_qmlAttachedPropertiesObject, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_qmlAttachedPropertiesObject)},
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt5.QtQml",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt5_QtQml, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt5_QtQml), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule(SIP_MODULE_NAME);
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>(SIP_MODULE_NAME));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == NULL || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_QtQml = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, SIP_MODULE_NAME "._C_API"));
#else
    sipAPI_QtQml = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_QtQml == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtQml,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    sip_QtQml_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtQml_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtQml_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    if (!sip_QtQml_qt_metacast)
        Py_FatalError("Unable to import qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtQml,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    /* Get the APIs of the modules that this one is dependent on. */
    sipModuleAPI_QtQml_QtCore = sipModuleAPI_QtQml.em_imports[0].im_module;
    sipModuleAPI_QtQml_QtNetwork = sipModuleAPI_QtQml.em_imports[1].im_module;
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qjsengine.sip"
qpyqml_post_init(sipModuleDict);
#line 118 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlproperty.sip"
// Imports from QtCore.
pyqt5_qtqml_get_pyqtslot_parts = (pyqt5_qtqml_get_pyqtslot_parts_t)sipImportSymbol("pyqt5_get_pyqtslot_parts");
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qmlregistertype.sip"
// Imports from QtCore.
pyqt5_qtqml_get_qmetaobject = (pyqt5_qtqml_get_qmetaobject_t)sipImportSymbol(
        "pyqt5_get_qmetaobject");
#line 1258 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlcmodule.cpp"

    SIP_MODULE_RETURN(sipModule);
}
