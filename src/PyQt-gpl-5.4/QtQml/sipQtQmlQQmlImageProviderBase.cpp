/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:44 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQml.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlImageProviderBase.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlImageProviderBase.cpp"


PyDoc_STRVAR(doc_QQmlImageProviderBase_imageType, "QQmlImageProviderBase.imageType() -> QQmlImageProviderBase.ImageType");

extern "C" {static PyObject *meth_QQmlImageProviderBase_imageType(PyObject *, PyObject *);}
static PyObject *meth_QQmlImageProviderBase_imageType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QQmlImageProviderBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlImageProviderBase, &sipCpp))
        {
            QQmlImageProviderBase::ImageType sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQmlImageProviderBase, sipName_imageType);
                return NULL;
            }

            sipRes = sipCpp->imageType();

            return sipConvertFromEnum(sipRes,sipType_QQmlImageProviderBase_ImageType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlImageProviderBase, sipName_imageType, doc_QQmlImageProviderBase_imageType);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlImageProviderBase_flags, "QQmlImageProviderBase.flags() -> QQmlImageProviderBase.Flags");

extern "C" {static PyObject *meth_QQmlImageProviderBase_flags(PyObject *, PyObject *);}
static PyObject *meth_QQmlImageProviderBase_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QQmlImageProviderBase *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlImageProviderBase, &sipCpp))
        {
            QQmlImageProviderBase::Flags*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQmlImageProviderBase, sipName_flags);
                return NULL;
            }

            sipRes = new QQmlImageProviderBase::Flags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QQmlImageProviderBase_Flags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlImageProviderBase, sipName_flags, doc_QQmlImageProviderBase_flags);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QQmlImageProviderBase(void *, const sipTypeDef *);}
static void *cast_QQmlImageProviderBase(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QQmlImageProviderBase)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlImageProviderBase(void *, int);}
static void release_QQmlImageProviderBase(void *sipCppV,int)
{
    delete reinterpret_cast<QQmlImageProviderBase *>(sipCppV);
}


extern "C" {static void dealloc_QQmlImageProviderBase(sipSimpleWrapper *);}
static void dealloc_QQmlImageProviderBase(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QQmlImageProviderBase(sipGetAddress(sipSelf),0);
    }
}


static PyMethodDef methods_QQmlImageProviderBase[] = {
    {SIP_MLNAME_CAST(sipName_flags), meth_QQmlImageProviderBase_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlImageProviderBase_flags)},
    {SIP_MLNAME_CAST(sipName_imageType), meth_QQmlImageProviderBase_imageType, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlImageProviderBase_imageType)}
};

static sipEnumMemberDef enummembers_QQmlImageProviderBase[] = {
    {sipName_ForceAsynchronousImageLoading, static_cast<int>(QQmlImageProviderBase::ForceAsynchronousImageLoading), 21},
    {sipName_Image, static_cast<int>(QQmlImageProviderBase::Image), 23},
    {sipName_Pixmap, static_cast<int>(QQmlImageProviderBase::Pixmap), 23},
    {sipName_Texture, static_cast<int>(QQmlImageProviderBase::Texture), 23},
};


pyqt5ClassTypeDef sipTypeDef_QtQml_QQmlImageProviderBase = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QQmlImageProviderBase,
        {0}
    },
    {
        sipNameNr_QQmlImageProviderBase,
        {0, 0, 1},
        2, methods_QQmlImageProviderBase,
        4, enummembers_QQmlImageProviderBase,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQmlImageProviderBase,
    0,
    0,
    0,
    release_QQmlImageProviderBase,
    cast_QQmlImageProviderBase,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
