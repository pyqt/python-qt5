/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:44 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQml.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlcomponent.sip"
#include <qqmlcomponent.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"

#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlcontext.sip"
#include <qqmlcontext.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlerror.sip"
#include <qqmlerror.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"


class sipQQmlComponent : public QQmlComponent
{
public:
    sipQQmlComponent(QQmlEngine*,QObject*);
    sipQQmlComponent(QQmlEngine*,const QString&,QObject*);
    sipQQmlComponent(QQmlEngine*,const QString&,QQmlComponent::CompilationMode,QObject*);
    sipQQmlComponent(QQmlEngine*,const QUrl&,QObject*);
    sipQQmlComponent(QQmlEngine*,const QUrl&,QQmlComponent::CompilationMode,QObject*);
    sipQQmlComponent(QObject*);
    virtual ~sipQQmlComponent();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void completeCreate();
    QObject* beginCreate(QQmlContext*);
    QObject* create(QQmlContext*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlComponent(const sipQQmlComponent &);
    sipQQmlComponent &operator = (const sipQQmlComponent &);

    char sipPyMethods[10];
};

sipQQmlComponent::sipQQmlComponent(QQmlEngine*a0,QObject*a1): QQmlComponent(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlComponent::sipQQmlComponent(QQmlEngine*a0,const QString& a1,QObject*a2): QQmlComponent(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlComponent::sipQQmlComponent(QQmlEngine*a0,const QString& a1,QQmlComponent::CompilationMode a2,QObject*a3): QQmlComponent(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlComponent::sipQQmlComponent(QQmlEngine*a0,const QUrl& a1,QObject*a2): QQmlComponent(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlComponent::sipQQmlComponent(QQmlEngine*a0,const QUrl& a1,QQmlComponent::CompilationMode a2,QObject*a3): QQmlComponent(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlComponent::sipQQmlComponent(QObject*a0): QQmlComponent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlComponent::~sipQQmlComponent()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQQmlComponent::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQml_qt_metaobject(sipPySelf,sipType_QQmlComponent);
}

int sipQQmlComponent::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QQmlComponent::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQml_qt_metacall(sipPySelf,sipType_QQmlComponent,_c,_id,_a);

    return _id;
}

void *sipQQmlComponent::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQml_qt_metacast(sipPySelf, sipType_QQmlComponent, _clname, &sipCpp) ? sipCpp : QQmlComponent::qt_metacast(_clname));
}

void sipQQmlComponent::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QQmlComponent::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQml_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQmlComponent::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QQmlComponent::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQml_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQmlComponent::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QQmlComponent::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtQml_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQmlComponent::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QQmlComponent::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtQml_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQmlComponent::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QQmlComponent::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtQml_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQmlComponent::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QQmlComponent::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtQml_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQQmlComponent::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QQmlComponent::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtQml_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQmlComponent::completeCreate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_completeCreate);

    if (!sipMeth)
    {
        QQmlComponent::completeCreate();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQml_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQQmlComponent::beginCreate(QQmlContext*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_beginCreate);

    if (!sipMeth)
        return QQmlComponent::beginCreate(a0);

    extern QObject* sipVH_QtQml_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QQmlContext*);

    return sipVH_QtQml_9(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQQmlComponent::create(QQmlContext*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_create);

    if (!sipMeth)
        return QQmlComponent::create(a0);

    extern QObject* sipVH_QtQml_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QQmlContext*);

    return sipVH_QtQml_9(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQQmlComponent::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQQmlComponent::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQQmlComponent::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQQmlComponent::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQQmlComponent::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQQmlComponent::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQQmlComponent::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQQmlComponent::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQQmlComponent::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QQmlComponent_sender, "QQmlComponent.sender() -> QObject");

extern "C" {static PyObject *meth_QQmlComponent_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQmlComponent *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 465 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_sender, doc_QQmlComponent_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_receivers, "QQmlComponent.receivers(signal) -> int");

extern "C" {static PyObject *meth_QQmlComponent_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQQmlComponent *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QQmlComponent, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 524 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlComponent.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_receivers, doc_QQmlComponent_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_timerEvent, "QQmlComponent.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QQmlComponent_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQQmlComponent *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_timerEvent, doc_QQmlComponent_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_childEvent, "QQmlComponent.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QQmlComponent_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQQmlComponent *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_childEvent, doc_QQmlComponent_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_customEvent, "QQmlComponent.customEvent(QEvent)");

extern "C" {static PyObject *meth_QQmlComponent_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQQmlComponent *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_customEvent, doc_QQmlComponent_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_connectNotify, "QQmlComponent.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QQmlComponent_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQQmlComponent *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_connectNotify, doc_QQmlComponent_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_disconnectNotify, "QQmlComponent.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QQmlComponent_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQQmlComponent *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_disconnectNotify, doc_QQmlComponent_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_senderSignalIndex, "QQmlComponent.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QQmlComponent_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQmlComponent *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_senderSignalIndex, doc_QQmlComponent_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_isSignalConnected, "QQmlComponent.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QQmlComponent_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQQmlComponent *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_isSignalConnected, doc_QQmlComponent_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_status, "QQmlComponent.status() -> QQmlComponent.Status");

extern "C" {static PyObject *meth_QQmlComponent_status(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            QQmlComponent::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(sipRes,sipType_QQmlComponent_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_status, doc_QQmlComponent_status);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_isNull, "QQmlComponent.isNull() -> bool");

extern "C" {static PyObject *meth_QQmlComponent_isNull(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_isNull, doc_QQmlComponent_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_isReady, "QQmlComponent.isReady() -> bool");

extern "C" {static PyObject *meth_QQmlComponent_isReady(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_isReady(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReady();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_isReady, doc_QQmlComponent_isReady);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_isError, "QQmlComponent.isError() -> bool");

extern "C" {static PyObject *meth_QQmlComponent_isError(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_isError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isError();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_isError, doc_QQmlComponent_isError);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_isLoading, "QQmlComponent.isLoading() -> bool");

extern "C" {static PyObject *meth_QQmlComponent_isLoading(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_isLoading(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLoading();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_isLoading, doc_QQmlComponent_isLoading);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_errors, "QQmlComponent.errors() -> list-of-QQmlError");

extern "C" {static PyObject *meth_QQmlComponent_errors(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_errors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            QList<QQmlError>*sipRes;

            sipRes = new QList<QQmlError>(sipCpp->errors());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QQmlError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_errors, doc_QQmlComponent_errors);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_progress, "QQmlComponent.progress() -> float");

extern "C" {static PyObject *meth_QQmlComponent_progress(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_progress(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->progress();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_progress, doc_QQmlComponent_progress);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_url, "QQmlComponent.url() -> QUrl");

extern "C" {static PyObject *meth_QQmlComponent_url(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_url, doc_QQmlComponent_url);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_create, "QQmlComponent.create(QQmlContext context=None) -> QObject\n"
    "QQmlComponent.create(QQmlIncubator, QQmlContext context=None, QQmlContext forContext=None)");

extern "C" {static PyObject *meth_QQmlComponent_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QQmlContext* a0 = 0;
        QQmlComponent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_context,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J8", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QQmlContext, &a0))
        {
            QObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQmlComponent::create(a0) : sipCpp->create(a0));

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    {
        QQmlIncubator* a0;
        QQmlContext* a1 = 0;
        QQmlContext* a2 = 0;
        QQmlComponent *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_context,
            sipName_forContext,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8J8", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QQmlIncubator, &a0, sipType_QQmlContext, &a1, sipType_QQmlContext, &a2))
        {
            sipCpp->create(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_create, doc_QQmlComponent_create);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_beginCreate, "QQmlComponent.beginCreate(QQmlContext) -> QObject");

extern "C" {static PyObject *meth_QQmlComponent_beginCreate(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_beginCreate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QQmlContext* a0;
        QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QQmlContext, &a0))
        {
            QObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQmlComponent::beginCreate(a0) : sipCpp->beginCreate(a0));

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_beginCreate, doc_QQmlComponent_beginCreate);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_completeCreate, "QQmlComponent.completeCreate()");

extern "C" {static PyObject *meth_QQmlComponent_completeCreate(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_completeCreate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QQmlComponent::completeCreate() : sipCpp->completeCreate());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_completeCreate, doc_QQmlComponent_completeCreate);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_creationContext, "QQmlComponent.creationContext() -> QQmlContext");

extern "C" {static PyObject *meth_QQmlComponent_creationContext(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_creationContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlComponent, &sipCpp))
        {
            QQmlContext*sipRes;

            sipRes = sipCpp->creationContext();

            return sipConvertFromType(sipRes,sipType_QQmlContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_creationContext, doc_QQmlComponent_creationContext);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_loadUrl, "QQmlComponent.loadUrl(QUrl)\n"
    "QQmlComponent.loadUrl(QUrl, QQmlComponent.CompilationMode)");

extern "C" {static PyObject *meth_QQmlComponent_loadUrl(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_loadUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->loadUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QUrl* a0;
        QQmlComponent::CompilationMode a1;
        QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QUrl, &a0, sipType_QQmlComponent_CompilationMode, &a1))
        {
            sipCpp->loadUrl(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_loadUrl, doc_QQmlComponent_loadUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlComponent_setData, "QQmlComponent.setData(QByteArray, QUrl)");

extern "C" {static PyObject *meth_QQmlComponent_setData(PyObject *, PyObject *);}
static PyObject *meth_QQmlComponent_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QUrl* a1;
        QQmlComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QQmlComponent, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QUrl, &a1))
        {
            sipCpp->setData(*a0,*a1);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlComponent, sipName_setData, doc_QQmlComponent_setData);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QQmlComponent(void *, const sipTypeDef *);}
static void *cast_QQmlComponent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QQmlComponent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QQmlComponent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlComponent(void *, int);}
static void release_QQmlComponent(void *sipCppV,int)
{
    QQmlComponent *sipCpp = reinterpret_cast<QQmlComponent *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQmlComponent(sipSimpleWrapper *);}
static void dealloc_QQmlComponent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQQmlComponent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QQmlComponent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QQmlComponent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlComponent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQmlComponent *sipCpp = 0;

    {
        QQmlEngine* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QQmlEngine, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQQmlComponent(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QQmlEngine* a0;
        const QString* a1;
        int a1State = 0;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J1|JH", sipType_QQmlEngine, &a0, sipType_QString,&a1, &a1State, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQQmlComponent(a0,*a1,a2);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QQmlEngine* a0;
        const QString* a1;
        int a1State = 0;
        QQmlComponent::CompilationMode a2;
        QObject* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J1E|JH", sipType_QQmlEngine, &a0, sipType_QString,&a1, &a1State, sipType_QQmlComponent_CompilationMode, &a2, sipType_QObject, &a3, sipOwner))
        {
            sipCpp = new sipQQmlComponent(a0,*a1,a2,a3);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QQmlEngine* a0;
        const QUrl* a1;
        QObject* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J9|JH", sipType_QQmlEngine, &a0, sipType_QUrl, &a1, sipType_QObject, &a2, sipOwner))
        {
            sipCpp = new sipQQmlComponent(a0,*a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QQmlEngine* a0;
        const QUrl* a1;
        QQmlComponent::CompilationMode a2;
        QObject* a3 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8J9E|JH", sipType_QQmlEngine, &a0, sipType_QUrl, &a1, sipType_QQmlComponent_CompilationMode, &a2, sipType_QObject, &a3, sipOwner))
        {
            sipCpp = new sipQQmlComponent(a0,*a1,a2,a3);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQQmlComponent(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQmlComponent[] = {{162, 0, 1}};


static PyMethodDef methods_QQmlComponent[] = {
    {SIP_MLNAME_CAST(sipName_beginCreate), meth_QQmlComponent_beginCreate, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_beginCreate)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QQmlComponent_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_completeCreate), meth_QQmlComponent_completeCreate, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_completeCreate)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QQmlComponent_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QQmlComponent_create, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQmlComponent_create)},
    {SIP_MLNAME_CAST(sipName_creationContext), meth_QQmlComponent_creationContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_creationContext)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QQmlComponent_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QQmlComponent_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_errors), meth_QQmlComponent_errors, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_errors)},
    {SIP_MLNAME_CAST(sipName_isError), meth_QQmlComponent_isError, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_isError)},
    {SIP_MLNAME_CAST(sipName_isLoading), meth_QQmlComponent_isLoading, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_isLoading)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QQmlComponent_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_isNull)},
    {SIP_MLNAME_CAST(sipName_isReady), meth_QQmlComponent_isReady, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_isReady)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QQmlComponent_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_loadUrl), meth_QQmlComponent_loadUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_loadUrl)},
    {SIP_MLNAME_CAST(sipName_progress), meth_QQmlComponent_progress, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_progress)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QQmlComponent_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QQmlComponent_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QQmlComponent_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setData), meth_QQmlComponent_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_setData)},
    {SIP_MLNAME_CAST(sipName_status), meth_QQmlComponent_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_status)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QQmlComponent_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_url), meth_QQmlComponent_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlComponent_url)}
};

static sipEnumMemberDef enummembers_QQmlComponent[] = {
    {sipName_Asynchronous, static_cast<int>(QQmlComponent::Asynchronous), 11},
    {sipName_Error, static_cast<int>(QQmlComponent::Error), 12},
    {sipName_Loading, static_cast<int>(QQmlComponent::Loading), 12},
    {sipName_Null, static_cast<int>(QQmlComponent::Null), 12},
    {sipName_PreferSynchronous, static_cast<int>(QQmlComponent::PreferSynchronous), 11},
    {sipName_Ready, static_cast<int>(QQmlComponent::Ready), 12},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQmlComponent[] = {
    {"progressChanged(qreal)", "\1QQmlComponent.progressChanged[float]", 0, 0},
    {"statusChanged(QQmlComponent::Status)", "\1QQmlComponent.statusChanged[QQmlComponent.Status]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QQmlComponent, "\1QQmlComponent(QQmlEngine, QObject parent=None)\n"
    "QQmlComponent(QQmlEngine, str, QObject parent=None)\n"
    "QQmlComponent(QQmlEngine, str, QQmlComponent.CompilationMode, QObject parent=None)\n"
    "QQmlComponent(QQmlEngine, QUrl, QObject parent=None)\n"
    "QQmlComponent(QQmlEngine, QUrl, QQmlComponent.CompilationMode, QObject parent=None)\n"
    "QQmlComponent(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtQml_QQmlComponent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QQmlComponent,
        {0}
    },
    {
        sipNameNr_QQmlComponent,
        {0, 0, 1},
        23, methods_QQmlComponent,
        6, enummembers_QQmlComponent,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQmlComponent,
    -1,
    -1,
    supers_QQmlComponent,
    0,
    init_type_QQmlComponent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQmlComponent,
    0,
    0,
    0,
    release_QQmlComponent,
    cast_QQmlComponent,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QQmlComponent::staticMetaObject,
    0,
    signals_QQmlComponent,
    0
};
