/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:44 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQml.h"

#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlIncubationController.cpp"

#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlengine.sip"
#include <qqmlengine.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlIncubationController.cpp"


class sipQQmlIncubationController : public QQmlIncubationController
{
public:
    sipQQmlIncubationController();
    virtual ~sipQQmlIncubationController();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtectVirt_incubatingObjectCountChanged(bool,int);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void incubatingObjectCountChanged(int);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlIncubationController(const sipQQmlIncubationController &);
    sipQQmlIncubationController &operator = (const sipQQmlIncubationController &);

    char sipPyMethods[1];
};

sipQQmlIncubationController::sipQQmlIncubationController(): QQmlIncubationController(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlIncubationController::~sipQQmlIncubationController()
{
    sipCommonDtor(sipPySelf);
}

void sipQQmlIncubationController::incubatingObjectCountChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_incubatingObjectCountChanged);

    if (!sipMeth)
    {
        QQmlIncubationController::incubatingObjectCountChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtQml_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQmlIncubationController::sipProtectVirt_incubatingObjectCountChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QQmlIncubationController::incubatingObjectCountChanged(a0) : incubatingObjectCountChanged(a0));
}


PyDoc_STRVAR(doc_QQmlIncubationController_engine, "QQmlIncubationController.engine() -> QQmlEngine");

extern "C" {static PyObject *meth_QQmlIncubationController_engine(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubationController_engine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlIncubationController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubationController, &sipCpp))
        {
            QQmlEngine*sipRes;

            sipRes = sipCpp->engine();

            return sipConvertFromType(sipRes,sipType_QQmlEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubationController, sipName_engine, doc_QQmlIncubationController_engine);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlIncubationController_incubatingObjectCount, "QQmlIncubationController.incubatingObjectCount() -> int");

extern "C" {static PyObject *meth_QQmlIncubationController_incubatingObjectCount(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubationController_incubatingObjectCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQmlIncubationController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQmlIncubationController, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->incubatingObjectCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubationController, sipName_incubatingObjectCount, doc_QQmlIncubationController_incubatingObjectCount);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlIncubationController_incubateFor, "QQmlIncubationController.incubateFor(int)");

extern "C" {static PyObject *meth_QQmlIncubationController_incubateFor(PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubationController_incubateFor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QQmlIncubationController *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QQmlIncubationController, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->incubateFor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubationController, sipName_incubateFor, doc_QQmlIncubationController_incubateFor);

    return NULL;
}


PyDoc_STRVAR(doc_QQmlIncubationController_incubatingObjectCountChanged, "QQmlIncubationController.incubatingObjectCountChanged(int)");

extern "C" {static PyObject *meth_QQmlIncubationController_incubatingObjectCountChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQmlIncubationController_incubatingObjectCountChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQQmlIncubationController *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QQmlIncubationController, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_incubatingObjectCountChanged(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlIncubationController, sipName_incubatingObjectCountChanged, doc_QQmlIncubationController_incubatingObjectCountChanged);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QQmlIncubationController(void *, const sipTypeDef *);}
static void *cast_QQmlIncubationController(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QQmlIncubationController)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlIncubationController(void *, int);}
static void release_QQmlIncubationController(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQQmlIncubationController *>(sipCppV);
    else
        delete reinterpret_cast<QQmlIncubationController *>(sipCppV);
}


extern "C" {static void dealloc_QQmlIncubationController(sipSimpleWrapper *);}
static void dealloc_QQmlIncubationController(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQQmlIncubationController *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QQmlIncubationController(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QQmlIncubationController(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlIncubationController(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQQmlIncubationController *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQQmlIncubationController();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QQmlIncubationController[] = {
    {SIP_MLNAME_CAST(sipName_engine), meth_QQmlIncubationController_engine, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubationController_engine)},
    {SIP_MLNAME_CAST(sipName_incubateFor), meth_QQmlIncubationController_incubateFor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubationController_incubateFor)},
    {SIP_MLNAME_CAST(sipName_incubatingObjectCount), meth_QQmlIncubationController_incubatingObjectCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlIncubationController_incubatingObjectCount)},
    {SIP_MLNAME_CAST(sipName_incubatingObjectCountChanged), (PyCFunction)meth_QQmlIncubationController_incubatingObjectCountChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQmlIncubationController_incubatingObjectCountChanged)}
};

PyDoc_STRVAR(doc_QQmlIncubationController, "\1QQmlIncubationController()");


pyqt5ClassTypeDef sipTypeDef_QtQml_QQmlIncubationController = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QQmlIncubationController,
        {0}
    },
    {
        sipNameNr_QQmlIncubationController,
        {0, 0, 1},
        4, methods_QQmlIncubationController,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQmlIncubationController,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QQmlIncubationController,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQmlIncubationController,
    0,
    0,
    0,
    release_QQmlIncubationController,
    cast_QQmlIncubationController,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
