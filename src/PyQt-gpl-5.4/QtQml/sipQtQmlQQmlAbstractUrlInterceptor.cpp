/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:44 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQml.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQml/qqmlabstracturlinterceptor.sip"
#include <qqmlabstracturlinterceptor.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlAbstractUrlInterceptor.cpp"

#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQml/sipQtQmlQQmlAbstractUrlInterceptor.cpp"


class sipQQmlAbstractUrlInterceptor : public QQmlAbstractUrlInterceptor
{
public:
    sipQQmlAbstractUrlInterceptor();
    sipQQmlAbstractUrlInterceptor(const QQmlAbstractUrlInterceptor&);
    virtual ~sipQQmlAbstractUrlInterceptor();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QUrl intercept(const QUrl&,QQmlAbstractUrlInterceptor::DataType);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQmlAbstractUrlInterceptor(const sipQQmlAbstractUrlInterceptor &);
    sipQQmlAbstractUrlInterceptor &operator = (const sipQQmlAbstractUrlInterceptor &);

    char sipPyMethods[1];
};

sipQQmlAbstractUrlInterceptor::sipQQmlAbstractUrlInterceptor(): QQmlAbstractUrlInterceptor(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlAbstractUrlInterceptor::sipQQmlAbstractUrlInterceptor(const QQmlAbstractUrlInterceptor& a0): QQmlAbstractUrlInterceptor(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQmlAbstractUrlInterceptor::~sipQQmlAbstractUrlInterceptor()
{
    sipCommonDtor(sipPySelf);
}

QUrl sipQQmlAbstractUrlInterceptor::intercept(const QUrl& a0,QQmlAbstractUrlInterceptor::DataType a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QQmlAbstractUrlInterceptor,sipName_intercept);

    if (!sipMeth)
        return QUrl();

    extern QUrl sipVH_QtQml_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&,QQmlAbstractUrlInterceptor::DataType);

    return sipVH_QtQml_10(sipGILState, sipModuleAPI_QtQml_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}


PyDoc_STRVAR(doc_QQmlAbstractUrlInterceptor_intercept, "QQmlAbstractUrlInterceptor.intercept(QUrl, QQmlAbstractUrlInterceptor.DataType) -> QUrl");

extern "C" {static PyObject *meth_QQmlAbstractUrlInterceptor_intercept(PyObject *, PyObject *);}
static PyObject *meth_QQmlAbstractUrlInterceptor_intercept(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QUrl* a0;
        QQmlAbstractUrlInterceptor::DataType a1;
        QQmlAbstractUrlInterceptor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QQmlAbstractUrlInterceptor, &sipCpp, sipType_QUrl, &a0, sipType_QQmlAbstractUrlInterceptor_DataType, &a1))
        {
            QUrl*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQmlAbstractUrlInterceptor, sipName_intercept);
                return NULL;
            }

            sipRes = new QUrl(sipCpp->intercept(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQmlAbstractUrlInterceptor, sipName_intercept, doc_QQmlAbstractUrlInterceptor_intercept);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QQmlAbstractUrlInterceptor(void *, const sipTypeDef *);}
static void *cast_QQmlAbstractUrlInterceptor(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QQmlAbstractUrlInterceptor)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQmlAbstractUrlInterceptor(void *, int);}
static void release_QQmlAbstractUrlInterceptor(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQQmlAbstractUrlInterceptor *>(sipCppV);
    else
        delete reinterpret_cast<QQmlAbstractUrlInterceptor *>(sipCppV);
}


extern "C" {static void dealloc_QQmlAbstractUrlInterceptor(sipSimpleWrapper *);}
static void dealloc_QQmlAbstractUrlInterceptor(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQQmlAbstractUrlInterceptor *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QQmlAbstractUrlInterceptor(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QQmlAbstractUrlInterceptor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQmlAbstractUrlInterceptor(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQQmlAbstractUrlInterceptor *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQQmlAbstractUrlInterceptor();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QQmlAbstractUrlInterceptor* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QQmlAbstractUrlInterceptor, &a0))
        {
            sipCpp = new sipQQmlAbstractUrlInterceptor(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QQmlAbstractUrlInterceptor[] = {
    {SIP_MLNAME_CAST(sipName_intercept), meth_QQmlAbstractUrlInterceptor_intercept, METH_VARARGS, SIP_MLDOC_CAST(doc_QQmlAbstractUrlInterceptor_intercept)}
};

static sipEnumMemberDef enummembers_QQmlAbstractUrlInterceptor[] = {
    {sipName_JavaScriptFile, static_cast<int>(QQmlAbstractUrlInterceptor::JavaScriptFile), 8},
    {sipName_QmlFile, static_cast<int>(QQmlAbstractUrlInterceptor::QmlFile), 8},
    {sipName_QmldirFile, static_cast<int>(QQmlAbstractUrlInterceptor::QmldirFile), 8},
    {sipName_UrlString, static_cast<int>(QQmlAbstractUrlInterceptor::UrlString), 8},
};

PyDoc_STRVAR(doc_QQmlAbstractUrlInterceptor, "\1QQmlAbstractUrlInterceptor()\n"
    "QQmlAbstractUrlInterceptor(QQmlAbstractUrlInterceptor)");


pyqt5ClassTypeDef sipTypeDef_QtQml_QQmlAbstractUrlInterceptor = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QQmlAbstractUrlInterceptor,
        {0}
    },
    {
        sipNameNr_QQmlAbstractUrlInterceptor,
        {0, 0, 1},
        1, methods_QQmlAbstractUrlInterceptor,
        4, enummembers_QQmlAbstractUrlInterceptor,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQmlAbstractUrlInterceptor,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QQmlAbstractUrlInterceptor,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQmlAbstractUrlInterceptor,
    0,
    0,
    0,
    release_QQmlAbstractUrlInterceptor,
    cast_QQmlAbstractUrlInterceptor,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
