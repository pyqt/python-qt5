/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:31 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcamera.sip"
#include <qcamera.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcamerainfo.sip"
#include <qcamerainfo.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcamera.sip"
#include <qcamera.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcamera.sip"
#include <qcamera.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qabstractvideosurface.sip"
#include <qabstractvideosurface.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcameraimageprocessing.sip"
#include <qcameraimageprocessing.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcamerafocus.sip"
#include <qcamerafocus.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcameraexposure.sip"
#include <qcameraexposure.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmultimedia.sip"
#include <qmultimedia.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediaservice.sip"
#include <qmediaservice.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"


class sipQCamera : public QCamera
{
public:
    sipQCamera(QObject*);
    sipQCamera(const QByteArray&,QObject*);
    sipQCamera(const QCameraInfo&,QObject*);
    sipQCamera(QCamera::Position,QObject*);
    virtual ~sipQCamera();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtect_addPropertyWatch(const QByteArray&);
    void sipProtect_removePropertyWatch(const QByteArray&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void unbind(QObject*);
    bool bind(QObject*);
    QMediaService* service() const;
    bool isAvailable() const;
    QMultimedia::AvailabilityStatus availability() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCamera(const sipQCamera &);
    sipQCamera &operator = (const sipQCamera &);

    char sipPyMethods[12];
};

sipQCamera::sipQCamera(QObject*a0): QCamera(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCamera::sipQCamera(const QByteArray& a0,QObject*a1): QCamera(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCamera::sipQCamera(const QCameraInfo& a0,QObject*a1): QCamera(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCamera::sipQCamera(QCamera::Position a0,QObject*a1): QCamera(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCamera::~sipQCamera()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQCamera::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QCamera);
}

int sipQCamera::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QCamera::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QCamera,_c,_id,_a);

    return _id;
}

void *sipQCamera::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QCamera, _clname, &sipCpp) ? sipCpp : QCamera::qt_metacast(_clname));
}

void sipQCamera::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QCamera::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCamera::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QCamera::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCamera::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QCamera::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCamera::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QCamera::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCamera::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QCamera::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQCamera::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QCamera::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQCamera::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QCamera::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCamera::unbind(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_unbind);

    if (!sipMeth)
    {
        QCamera::unbind(a0);
        return;
    }

    extern void sipVH_QtMultimedia_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtMultimedia_5(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQCamera::bind(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_bind);

    if (!sipMeth)
        return QCamera::bind(a0);

    typedef bool (*sipVH_QtCore_65)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    return ((sipVH_QtCore_65)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[65]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMediaService* sipQCamera::service() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_service);

    if (!sipMeth)
        return QCamera::service();

    extern QMediaService* sipVH_QtMultimedia_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_6(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQCamera::isAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_isAvailable);

    if (!sipMeth)
        return QCamera::isAvailable();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QMultimedia::AvailabilityStatus sipQCamera::availability() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_availability);

    if (!sipMeth)
        return QCamera::availability();

    extern QMultimedia::AvailabilityStatus sipVH_QtMultimedia_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_0(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQCamera::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQCamera::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQCamera::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQCamera::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQCamera::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQCamera::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQCamera::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQCamera::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQCamera::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQCamera::sipProtect_addPropertyWatch(const QByteArray& a0)
{
    QMediaObject::addPropertyWatch(a0);
}

void sipQCamera::sipProtect_removePropertyWatch(const QByteArray& a0)
{
    QMediaObject::removePropertyWatch(a0);
}


PyDoc_STRVAR(doc_QCamera_sender, "QCamera.sender() -> QObject");

extern "C" {static PyObject *meth_QCamera_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCamera_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQCamera *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 509 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_sender, doc_QCamera_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_receivers, "QCamera.receivers(signal) -> int");

extern "C" {static PyObject *meth_QCamera_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCamera_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQCamera *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QCamera, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 568 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCamera.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_receivers, doc_QCamera_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_timerEvent, "QCamera.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QCamera_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCamera_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQCamera *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCamera, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_timerEvent, doc_QCamera_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_childEvent, "QCamera.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QCamera_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCamera_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQCamera *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCamera, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_childEvent, doc_QCamera_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_customEvent, "QCamera.customEvent(QEvent)");

extern "C" {static PyObject *meth_QCamera_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCamera_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQCamera *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCamera, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_customEvent, doc_QCamera_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_connectNotify, "QCamera.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QCamera_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCamera_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQCamera *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QCamera, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_connectNotify, doc_QCamera_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_disconnectNotify, "QCamera.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QCamera_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCamera_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQCamera *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QCamera, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_disconnectNotify, doc_QCamera_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_senderSignalIndex, "QCamera.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QCamera_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCamera_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQCamera *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_senderSignalIndex, doc_QCamera_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_isSignalConnected, "QCamera.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QCamera_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCamera_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQCamera *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QCamera, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_isSignalConnected, doc_QCamera_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_addPropertyWatch, "QCamera.addPropertyWatch(QByteArray)");

extern "C" {static PyObject *meth_QCamera_addPropertyWatch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCamera_addPropertyWatch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        sipQCamera *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QCamera, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->sipProtect_addPropertyWatch(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_addPropertyWatch, doc_QCamera_addPropertyWatch);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_removePropertyWatch, "QCamera.removePropertyWatch(QByteArray)");

extern "C" {static PyObject *meth_QCamera_removePropertyWatch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCamera_removePropertyWatch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        sipQCamera *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QCamera, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->sipProtect_removePropertyWatch(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_removePropertyWatch, doc_QCamera_removePropertyWatch);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_availableDevices, "QCamera.availableDevices() -> list-of-QByteArray");

extern "C" {static PyObject *meth_QCamera_availableDevices(PyObject *, PyObject *);}
static PyObject *meth_QCamera_availableDevices(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QByteArray>*sipRes;

            sipRes = new QList<QByteArray>(QCamera::availableDevices());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_availableDevices, doc_QCamera_availableDevices);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_deviceDescription, "QCamera.deviceDescription(QByteArray) -> str");

extern "C" {static PyObject *meth_QCamera_deviceDescription(PyObject *, PyObject *);}
static PyObject *meth_QCamera_deviceDescription(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QByteArray, &a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(QCamera::deviceDescription(*a0));
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_deviceDescription, doc_QCamera_deviceDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_availability, "QCamera.availability() -> QMultimedia.AvailabilityStatus");

extern "C" {static PyObject *meth_QCamera_availability(PyObject *, PyObject *);}
static PyObject *meth_QCamera_availability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QMultimedia::AvailabilityStatus sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QCamera::availability() : sipCpp->availability());

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_AvailabilityStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_availability, doc_QCamera_availability);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_state, "QCamera.state() -> QCamera.State");

extern "C" {static PyObject *meth_QCamera_state(PyObject *, PyObject *);}
static PyObject *meth_QCamera_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QCamera_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_state, doc_QCamera_state);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_status, "QCamera.status() -> QCamera.Status");

extern "C" {static PyObject *meth_QCamera_status(PyObject *, PyObject *);}
static PyObject *meth_QCamera_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(sipRes,sipType_QCamera_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_status, doc_QCamera_status);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_captureMode, "QCamera.captureMode() -> QCamera.CaptureModes");

extern "C" {static PyObject *meth_QCamera_captureMode(PyObject *, PyObject *);}
static PyObject *meth_QCamera_captureMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::CaptureModes*sipRes;

            sipRes = new QCamera::CaptureModes(sipCpp->captureMode());

            return sipConvertFromNewType(sipRes,sipType_QCamera_CaptureModes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_captureMode, doc_QCamera_captureMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_isCaptureModeSupported, "QCamera.isCaptureModeSupported(QCamera.CaptureModes) -> bool");

extern "C" {static PyObject *meth_QCamera_isCaptureModeSupported(PyObject *, PyObject *);}
static PyObject *meth_QCamera_isCaptureModeSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera::CaptureModes* a0;
        int a0State = 0;
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCamera, &sipCpp, sipType_QCamera_CaptureModes, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->isCaptureModeSupported(*a0);
            sipReleaseType(a0,sipType_QCamera_CaptureModes,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_isCaptureModeSupported, doc_QCamera_isCaptureModeSupported);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_exposure, "QCamera.exposure() -> QCameraExposure");

extern "C" {static PyObject *meth_QCamera_exposure(PyObject *, PyObject *);}
static PyObject *meth_QCamera_exposure(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCameraExposure*sipRes;

            sipRes = sipCpp->exposure();

            return sipConvertFromType(sipRes,sipType_QCameraExposure,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_exposure, doc_QCamera_exposure);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_focus, "QCamera.focus() -> QCameraFocus");

extern "C" {static PyObject *meth_QCamera_focus(PyObject *, PyObject *);}
static PyObject *meth_QCamera_focus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCameraFocus*sipRes;

            sipRes = sipCpp->focus();

            return sipConvertFromType(sipRes,sipType_QCameraFocus,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_focus, doc_QCamera_focus);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_imageProcessing, "QCamera.imageProcessing() -> QCameraImageProcessing");

extern "C" {static PyObject *meth_QCamera_imageProcessing(PyObject *, PyObject *);}
static PyObject *meth_QCamera_imageProcessing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCameraImageProcessing*sipRes;

            sipRes = sipCpp->imageProcessing();

            return sipConvertFromType(sipRes,sipType_QCameraImageProcessing,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_imageProcessing, doc_QCamera_imageProcessing);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_setViewfinder, "QCamera.setViewfinder(QVideoWidget)\n"
    "QCamera.setViewfinder(QGraphicsVideoItem)\n"
    "QCamera.setViewfinder(QAbstractVideoSurface)");

extern "C" {static PyObject *meth_QCamera_setViewfinder(PyObject *, PyObject *);}
static PyObject *meth_QCamera_setViewfinder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVideoWidget* a0;
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCamera, &sipCpp, sipType_QVideoWidget, &a0))
        {
            sipCpp->setViewfinder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QGraphicsVideoItem* a0;
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCamera, &sipCpp, sipType_QGraphicsVideoItem, &a0))
        {
            sipCpp->setViewfinder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QAbstractVideoSurface* a0;
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCamera, &sipCpp, sipType_QAbstractVideoSurface, &a0))
        {
            sipCpp->setViewfinder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_setViewfinder, doc_QCamera_setViewfinder);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_error, "QCamera.error() -> QCamera.Error");

extern "C" {static PyObject *meth_QCamera_error(PyObject *, PyObject *);}
static PyObject *meth_QCamera_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QCamera_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_error, doc_QCamera_error);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_errorString, "QCamera.errorString() -> str");

extern "C" {static PyObject *meth_QCamera_errorString(PyObject *, PyObject *);}
static PyObject *meth_QCamera_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_errorString, doc_QCamera_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_supportedLocks, "QCamera.supportedLocks() -> QCamera.LockTypes");

extern "C" {static PyObject *meth_QCamera_supportedLocks(PyObject *, PyObject *);}
static PyObject *meth_QCamera_supportedLocks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::LockTypes*sipRes;

            sipRes = new QCamera::LockTypes(sipCpp->supportedLocks());

            return sipConvertFromNewType(sipRes,sipType_QCamera_LockTypes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_supportedLocks, doc_QCamera_supportedLocks);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_requestedLocks, "QCamera.requestedLocks() -> QCamera.LockTypes");

extern "C" {static PyObject *meth_QCamera_requestedLocks(PyObject *, PyObject *);}
static PyObject *meth_QCamera_requestedLocks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::LockTypes*sipRes;

            sipRes = new QCamera::LockTypes(sipCpp->requestedLocks());

            return sipConvertFromNewType(sipRes,sipType_QCamera_LockTypes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_requestedLocks, doc_QCamera_requestedLocks);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_lockStatus, "QCamera.lockStatus() -> QCamera.LockStatus\n"
    "QCamera.lockStatus(QCamera.LockType) -> QCamera.LockStatus");

extern "C" {static PyObject *meth_QCamera_lockStatus(PyObject *, PyObject *);}
static PyObject *meth_QCamera_lockStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            QCamera::LockStatus sipRes;

            sipRes = sipCpp->lockStatus();

            return sipConvertFromEnum(sipRes,sipType_QCamera_LockStatus);
        }
    }

    {
        QCamera::LockType a0;
        const QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCamera, &sipCpp, sipType_QCamera_LockType, &a0))
        {
            QCamera::LockStatus sipRes;

            sipRes = sipCpp->lockStatus(a0);

            return sipConvertFromEnum(sipRes,sipType_QCamera_LockStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_lockStatus, doc_QCamera_lockStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_setCaptureMode, "QCamera.setCaptureMode(QCamera.CaptureModes)");

extern "C" {static PyObject *meth_QCamera_setCaptureMode(PyObject *, PyObject *);}
static PyObject *meth_QCamera_setCaptureMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera::CaptureModes* a0;
        int a0State = 0;
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCamera, &sipCpp, sipType_QCamera_CaptureModes, &a0, &a0State))
        {
            sipCpp->setCaptureMode(*a0);
            sipReleaseType(a0,sipType_QCamera_CaptureModes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_setCaptureMode, doc_QCamera_setCaptureMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_load, "QCamera.load()");

extern "C" {static PyObject *meth_QCamera_load(PyObject *, PyObject *);}
static PyObject *meth_QCamera_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            sipCpp->load();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_load, doc_QCamera_load);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_unload, "QCamera.unload()");

extern "C" {static PyObject *meth_QCamera_unload(PyObject *, PyObject *);}
static PyObject *meth_QCamera_unload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            sipCpp->unload();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_unload, doc_QCamera_unload);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_start, "QCamera.start()");

extern "C" {static PyObject *meth_QCamera_start(PyObject *, PyObject *);}
static PyObject *meth_QCamera_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            sipCpp->start();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_start, doc_QCamera_start);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_stop, "QCamera.stop()");

extern "C" {static PyObject *meth_QCamera_stop(PyObject *, PyObject *);}
static PyObject *meth_QCamera_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_stop, doc_QCamera_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_searchAndLock, "QCamera.searchAndLock()\n"
    "QCamera.searchAndLock(QCamera.LockTypes)");

extern "C" {static PyObject *meth_QCamera_searchAndLock(PyObject *, PyObject *);}
static PyObject *meth_QCamera_searchAndLock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            sipCpp->searchAndLock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QCamera::LockTypes* a0;
        int a0State = 0;
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCamera, &sipCpp, sipType_QCamera_LockTypes, &a0, &a0State))
        {
            sipCpp->searchAndLock(*a0);
            sipReleaseType(a0,sipType_QCamera_LockTypes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_searchAndLock, doc_QCamera_searchAndLock);

    return NULL;
}


PyDoc_STRVAR(doc_QCamera_unlock, "QCamera.unlock()\n"
    "QCamera.unlock(QCamera.LockTypes)");

extern "C" {static PyObject *meth_QCamera_unlock(PyObject *, PyObject *);}
static PyObject *meth_QCamera_unlock(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCamera, &sipCpp))
        {
            sipCpp->unlock();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QCamera::LockTypes* a0;
        int a0State = 0;
        QCamera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCamera, &sipCpp, sipType_QCamera_LockTypes, &a0, &a0State))
        {
            sipCpp->unlock(*a0);
            sipReleaseType(a0,sipType_QCamera_LockTypes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCamera, sipName_unlock, doc_QCamera_unlock);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QCamera(void *, const sipTypeDef *);}
static void *cast_QCamera(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QCamera)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QMediaObject)->ctd_cast((QMediaObject *)(QCamera *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCamera(void *, int);}
static void release_QCamera(void *sipCppV,int)
{
    QCamera *sipCpp = reinterpret_cast<QCamera *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QCamera(sipSimpleWrapper *);}
static void dealloc_QCamera(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQCamera *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QCamera(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QCamera(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCamera(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQCamera *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQCamera(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QByteArray* a0;
        int a0State = 0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QByteArray, &a0, &a0State, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQCamera(*a0,a1);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QCameraInfo* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QCameraInfo, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQCamera(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QCamera::Position a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QCamera_Position, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQCamera(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCamera[] = {{67, 255, 1}};


static PyMethodDef methods_QCamera[] = {
    {SIP_MLNAME_CAST(sipName_addPropertyWatch), (PyCFunction)meth_QCamera_addPropertyWatch, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_availability), meth_QCamera_availability, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_availability)},
    {SIP_MLNAME_CAST(sipName_availableDevices), meth_QCamera_availableDevices, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_availableDevices)},
    {SIP_MLNAME_CAST(sipName_captureMode), meth_QCamera_captureMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_captureMode)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QCamera_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QCamera_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QCamera_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_deviceDescription), meth_QCamera_deviceDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_deviceDescription)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QCamera_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QCamera_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QCamera_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_errorString)},
    {SIP_MLNAME_CAST(sipName_exposure), meth_QCamera_exposure, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_exposure)},
    {SIP_MLNAME_CAST(sipName_focus), meth_QCamera_focus, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_focus)},
    {SIP_MLNAME_CAST(sipName_imageProcessing), meth_QCamera_imageProcessing, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_imageProcessing)},
    {SIP_MLNAME_CAST(sipName_isCaptureModeSupported), meth_QCamera_isCaptureModeSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_isCaptureModeSupported)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QCamera_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_load), meth_QCamera_load, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_load)},
    {SIP_MLNAME_CAST(sipName_lockStatus), meth_QCamera_lockStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_lockStatus)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QCamera_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removePropertyWatch), (PyCFunction)meth_QCamera_removePropertyWatch, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_requestedLocks), meth_QCamera_requestedLocks, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_requestedLocks)},
    {SIP_MLNAME_CAST(sipName_searchAndLock), meth_QCamera_searchAndLock, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_searchAndLock)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QCamera_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QCamera_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setCaptureMode), meth_QCamera_setCaptureMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_setCaptureMode)},
    {SIP_MLNAME_CAST(sipName_setViewfinder), meth_QCamera_setViewfinder, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_setViewfinder)},
    {SIP_MLNAME_CAST(sipName_start), meth_QCamera_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_start)},
    {SIP_MLNAME_CAST(sipName_state), meth_QCamera_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_state)},
    {SIP_MLNAME_CAST(sipName_status), meth_QCamera_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_status)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QCamera_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_stop)},
    {SIP_MLNAME_CAST(sipName_supportedLocks), meth_QCamera_supportedLocks, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_supportedLocks)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QCamera_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_unload), meth_QCamera_unload, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_unload)},
    {SIP_MLNAME_CAST(sipName_unlock), meth_QCamera_unlock, METH_VARARGS, SIP_MLDOC_CAST(doc_QCamera_unlock)}
};

static sipEnumMemberDef enummembers_QCamera[] = {
    {sipName_ActiveState, static_cast<int>(QCamera::ActiveState), 31},
    {sipName_ActiveStatus, static_cast<int>(QCamera::ActiveStatus), 32},
    {sipName_BackFace, static_cast<int>(QCamera::BackFace), 30},
    {sipName_CameraError, static_cast<int>(QCamera::CameraError), 25},
    {sipName_CaptureStillImage, static_cast<int>(QCamera::CaptureStillImage), 23},
    {sipName_CaptureVideo, static_cast<int>(QCamera::CaptureVideo), 23},
    {sipName_CaptureViewfinder, static_cast<int>(QCamera::CaptureViewfinder), 23},
    {sipName_FrontFace, static_cast<int>(QCamera::FrontFace), 30},
    {sipName_InvalidRequestError, static_cast<int>(QCamera::InvalidRequestError), 25},
    {sipName_LoadedState, static_cast<int>(QCamera::LoadedState), 31},
    {sipName_LoadedStatus, static_cast<int>(QCamera::LoadedStatus), 32},
    {sipName_LoadingStatus, static_cast<int>(QCamera::LoadingStatus), 32},
    {sipName_LockAcquired, static_cast<int>(QCamera::LockAcquired), 26},
    {sipName_LockExposure, static_cast<int>(QCamera::LockExposure), 28},
    {sipName_LockFailed, static_cast<int>(QCamera::LockFailed), 26},
    {sipName_LockFocus, static_cast<int>(QCamera::LockFocus), 28},
    {sipName_LockLost, static_cast<int>(QCamera::LockLost), 26},
    {sipName_LockTemporaryLost, static_cast<int>(QCamera::LockTemporaryLost), 26},
    {sipName_LockWhiteBalance, static_cast<int>(QCamera::LockWhiteBalance), 28},
    {sipName_Locked, static_cast<int>(QCamera::Locked), 27},
    {sipName_NoError, static_cast<int>(QCamera::NoError), 25},
    {sipName_NoLock, static_cast<int>(QCamera::NoLock), 28},
    {sipName_NotSupportedFeatureError, static_cast<int>(QCamera::NotSupportedFeatureError), 25},
    {sipName_Searching, static_cast<int>(QCamera::Searching), 27},
    {sipName_ServiceMissingError, static_cast<int>(QCamera::ServiceMissingError), 25},
    {sipName_StandbyStatus, static_cast<int>(QCamera::StandbyStatus), 32},
    {sipName_StartingStatus, static_cast<int>(QCamera::StartingStatus), 32},
    {sipName_StoppingStatus, static_cast<int>(QCamera::StoppingStatus), 32},
    {sipName_UnavailableStatus, static_cast<int>(QCamera::UnavailableStatus), 32},
    {sipName_UnloadedState, static_cast<int>(QCamera::UnloadedState), 31},
    {sipName_UnloadedStatus, static_cast<int>(QCamera::UnloadedStatus), 32},
    {sipName_UnloadingStatus, static_cast<int>(QCamera::UnloadingStatus), 32},
    {sipName_Unlocked, static_cast<int>(QCamera::Unlocked), 27},
    {sipName_UnspecifiedPosition, static_cast<int>(QCamera::UnspecifiedPosition), 30},
    {sipName_UserRequest, static_cast<int>(QCamera::UserRequest), 26},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QCamera[] = {
    {"lockStatusChanged(QCamera::LockStatus,QCamera::LockChangeReason)", "\1QCamera.lockStatusChanged[QCamera.LockStatus, QCamera.LockChangeReason]", 0, 0},
    {"lockStatusChanged(QCamera::LockType,QCamera::LockStatus,QCamera::LockChangeReason)", "\1QCamera.lockStatusChanged[QCamera.LockType, QCamera.LockStatus, QCamera.LockChangeReason]", 0, 0},
    {"lockFailed()", "\1QCamera.lockFailed", 0, 0},
    {"locked()", "\1QCamera.locked", 0, 0},
    {"statusChanged(QCamera::Status)", "\1QCamera.statusChanged[QCamera.Status]", 0, 0},
    {"captureModeChanged(QCamera::CaptureModes)", "\1QCamera.captureModeChanged[QCamera.CaptureModes]", 0, 0},
    {"stateChanged(QCamera::State)", "\1QCamera.stateChanged[QCamera.State]", 0, 0},
    {"error(QCamera::Error)", "\1QCamera.error[QCamera.Error]", &methods_QCamera[9], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QCamera, "\1QCamera(QObject parent=None)\n"
    "QCamera(QByteArray, QObject parent=None)\n"
    "QCamera(QCameraInfo, QObject parent=None)\n"
    "QCamera(QCamera.Position, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QCamera = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QCamera,
        {0}
    },
    {
        sipNameNr_QCamera,
        {0, 0, 1},
        34, methods_QCamera,
        35, enummembers_QCamera,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QCamera,
    -1,
    -1,
    supers_QCamera,
    0,
    init_type_QCamera,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCamera,
    0,
    0,
    0,
    release_QCamera,
    cast_QCamera,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QCamera::staticMetaObject,
    0,
    signals_QCamera,
    0
};
