/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:31 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediaplayer.sip"
#include <qmediaplayer.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediaplayer.sip"
#include <qmediaplayer.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtNetwork/qnetworkconfiguration.sip"
#include <qnetworkconfiguration.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediacontent.sip"
#include <qmediacontent.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediaplaylist.sip"
#include <qmediaplaylist.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 30 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmultimedia.sip"
#include <qmultimedia.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qabstractvideosurface.sip"
#include <qabstractvideosurface.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediaservice.sip"
#include <qmediaservice.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"


class sipQMediaPlayer : public QMediaPlayer
{
public:
    sipQMediaPlayer(QObject*,QMediaPlayer::Flags);
    virtual ~sipQMediaPlayer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtect_addPropertyWatch(const QByteArray&);
    void sipProtect_removePropertyWatch(const QByteArray&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QMediaService* service() const;
    bool isAvailable() const;
    void unbind(QObject*);
    bool bind(QObject*);
    QMultimedia::AvailabilityStatus availability() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMediaPlayer(const sipQMediaPlayer &);
    sipQMediaPlayer &operator = (const sipQMediaPlayer &);

    char sipPyMethods[12];
};

sipQMediaPlayer::sipQMediaPlayer(QObject*a0,QMediaPlayer::Flags a1): QMediaPlayer(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMediaPlayer::~sipQMediaPlayer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMediaPlayer::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QMediaPlayer);
}

int sipQMediaPlayer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMediaPlayer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QMediaPlayer,_c,_id,_a);

    return _id;
}

void *sipQMediaPlayer::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QMediaPlayer, _clname, &sipCpp) ? sipCpp : QMediaPlayer::qt_metacast(_clname));
}

void sipQMediaPlayer::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QMediaPlayer::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaPlayer::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QMediaPlayer::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaPlayer::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QMediaPlayer::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaPlayer::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QMediaPlayer::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaPlayer::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QMediaPlayer::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQMediaPlayer::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QMediaPlayer::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQMediaPlayer::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QMediaPlayer::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMediaService* sipQMediaPlayer::service() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_service);

    if (!sipMeth)
        return QMediaPlayer::service();

    extern QMediaService* sipVH_QtMultimedia_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_6(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQMediaPlayer::isAvailable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_isAvailable);

    if (!sipMeth)
        return QMediaPlayer::isAvailable();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQMediaPlayer::unbind(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_unbind);

    if (!sipMeth)
    {
        QMediaPlayer::unbind(a0);
        return;
    }

    extern void sipVH_QtMultimedia_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtMultimedia_5(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQMediaPlayer::bind(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_bind);

    if (!sipMeth)
        return QMediaPlayer::bind(a0);

    typedef bool (*sipVH_QtCore_65)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    return ((sipVH_QtCore_65)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[65]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMultimedia::AvailabilityStatus sipQMediaPlayer::availability() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_availability);

    if (!sipMeth)
        return QMediaPlayer::availability();

    extern QMultimedia::AvailabilityStatus sipVH_QtMultimedia_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_0(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQMediaPlayer::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQMediaPlayer::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQMediaPlayer::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQMediaPlayer::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQMediaPlayer::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQMediaPlayer::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQMediaPlayer::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQMediaPlayer::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQMediaPlayer::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQMediaPlayer::sipProtect_addPropertyWatch(const QByteArray& a0)
{
    QMediaObject::addPropertyWatch(a0);
}

void sipQMediaPlayer::sipProtect_removePropertyWatch(const QByteArray& a0)
{
    QMediaObject::removePropertyWatch(a0);
}


PyDoc_STRVAR(doc_QMediaPlayer_sender, "QMediaPlayer.sender() -> QObject");

extern "C" {static PyObject *meth_QMediaPlayer_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQMediaPlayer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 491 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_sender, doc_QMediaPlayer_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_receivers, "QMediaPlayer.receivers(signal) -> int");

extern "C" {static PyObject *meth_QMediaPlayer_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQMediaPlayer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QMediaPlayer, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 550 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaPlayer.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_receivers, doc_QMediaPlayer_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_timerEvent, "QMediaPlayer.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QMediaPlayer_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQMediaPlayer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_timerEvent, doc_QMediaPlayer_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_childEvent, "QMediaPlayer.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QMediaPlayer_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQMediaPlayer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_childEvent, doc_QMediaPlayer_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_customEvent, "QMediaPlayer.customEvent(QEvent)");

extern "C" {static PyObject *meth_QMediaPlayer_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQMediaPlayer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_customEvent, doc_QMediaPlayer_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_connectNotify, "QMediaPlayer.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QMediaPlayer_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQMediaPlayer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_connectNotify, doc_QMediaPlayer_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_disconnectNotify, "QMediaPlayer.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QMediaPlayer_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQMediaPlayer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_disconnectNotify, doc_QMediaPlayer_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_senderSignalIndex, "QMediaPlayer.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QMediaPlayer_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQMediaPlayer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_senderSignalIndex, doc_QMediaPlayer_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_isSignalConnected, "QMediaPlayer.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QMediaPlayer_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQMediaPlayer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_isSignalConnected, doc_QMediaPlayer_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_addPropertyWatch, "QMediaPlayer.addPropertyWatch(QByteArray)");

extern "C" {static PyObject *meth_QMediaPlayer_addPropertyWatch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_addPropertyWatch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        sipQMediaPlayer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->sipProtect_addPropertyWatch(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_addPropertyWatch, doc_QMediaPlayer_addPropertyWatch);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_removePropertyWatch, "QMediaPlayer.removePropertyWatch(QByteArray)");

extern "C" {static PyObject *meth_QMediaPlayer_removePropertyWatch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_removePropertyWatch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        sipQMediaPlayer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            sipCpp->sipProtect_removePropertyWatch(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_removePropertyWatch, doc_QMediaPlayer_removePropertyWatch);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_hasSupport, "QMediaPlayer.hasSupport(str, list-of-str codecs=QStringList(), QMediaPlayer.Flags flags=0) -> QMultimedia.SupportEstimate");

extern "C" {static PyObject *meth_QMediaPlayer_hasSupport(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_hasSupport(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QStringList& a1def = QStringList();
        const QStringList* a1 = &a1def;
        int a1State = 0;
        QMediaPlayer::Flags a2def = 0;
        QMediaPlayer::Flags* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_codecs,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1|J1J1", sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State, sipType_QMediaPlayer_Flags, &a2, &a2State))
        {
            QMultimedia::SupportEstimate sipRes;

            sipRes = QMediaPlayer::hasSupport(*a0,*a1,*a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(a2,sipType_QMediaPlayer_Flags,a2State);

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_SupportEstimate);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_hasSupport, doc_QMediaPlayer_hasSupport);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_supportedMimeTypes, "QMediaPlayer.supportedMimeTypes(QMediaPlayer.Flags flags=0) -> list-of-str");

extern "C" {static PyObject *meth_QMediaPlayer_supportedMimeTypes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_supportedMimeTypes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlayer::Flags a0def = 0;
        QMediaPlayer::Flags* a0 = &a0def;
        int a0State = 0;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J1", sipType_QMediaPlayer_Flags, &a0, &a0State))
        {
            QStringList*sipRes;

            sipRes = new QStringList(QMediaPlayer::supportedMimeTypes(*a0));
            sipReleaseType(a0,sipType_QMediaPlayer_Flags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_supportedMimeTypes, doc_QMediaPlayer_supportedMimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setVideoOutput, "QMediaPlayer.setVideoOutput(QVideoWidget)\n"
    "QMediaPlayer.setVideoOutput(QGraphicsVideoItem)\n"
    "QMediaPlayer.setVideoOutput(QAbstractVideoSurface)");

extern "C" {static PyObject *meth_QMediaPlayer_setVideoOutput(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setVideoOutput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QVideoWidget* a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QVideoWidget, &a0))
        {
            sipCpp->setVideoOutput(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QGraphicsVideoItem* a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QGraphicsVideoItem, &a0))
        {
            sipCpp->setVideoOutput(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QAbstractVideoSurface* a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QAbstractVideoSurface, &a0))
        {
            sipCpp->setVideoOutput(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setVideoOutput, doc_QMediaPlayer_setVideoOutput);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_media, "QMediaPlayer.media() -> QMediaContent");

extern "C" {static PyObject *meth_QMediaPlayer_media(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_media(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMediaContent*sipRes;

            sipRes = new QMediaContent(sipCpp->media());

            return sipConvertFromNewType(sipRes,sipType_QMediaContent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_media, doc_QMediaPlayer_media);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_mediaStream, "QMediaPlayer.mediaStream() -> QIODevice");

extern "C" {static PyObject *meth_QMediaPlayer_mediaStream(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_mediaStream(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            const QIODevice*sipRes;

            sipRes = sipCpp->mediaStream();

            return sipConvertFromType(const_cast<QIODevice *>(sipRes),sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_mediaStream, doc_QMediaPlayer_mediaStream);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_playlist, "QMediaPlayer.playlist() -> QMediaPlaylist");

extern "C" {static PyObject *meth_QMediaPlayer_playlist(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_playlist(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMediaPlaylist*sipRes;

            sipRes = sipCpp->playlist();

            return sipConvertFromType(sipRes,sipType_QMediaPlaylist,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_playlist, doc_QMediaPlayer_playlist);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_currentMedia, "QMediaPlayer.currentMedia() -> QMediaContent");

extern "C" {static PyObject *meth_QMediaPlayer_currentMedia(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_currentMedia(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMediaContent*sipRes;

            sipRes = new QMediaContent(sipCpp->currentMedia());

            return sipConvertFromNewType(sipRes,sipType_QMediaContent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_currentMedia, doc_QMediaPlayer_currentMedia);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_state, "QMediaPlayer.state() -> QMediaPlayer.State");

extern "C" {static PyObject *meth_QMediaPlayer_state(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMediaPlayer::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QMediaPlayer_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_state, doc_QMediaPlayer_state);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_mediaStatus, "QMediaPlayer.mediaStatus() -> QMediaPlayer.MediaStatus");

extern "C" {static PyObject *meth_QMediaPlayer_mediaStatus(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_mediaStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMediaPlayer::MediaStatus sipRes;

            sipRes = sipCpp->mediaStatus();

            return sipConvertFromEnum(sipRes,sipType_QMediaPlayer_MediaStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_mediaStatus, doc_QMediaPlayer_mediaStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_duration, "QMediaPlayer.duration() -> int");

extern "C" {static PyObject *meth_QMediaPlayer_duration(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->duration();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_duration, doc_QMediaPlayer_duration);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_position, "QMediaPlayer.position() -> int");

extern "C" {static PyObject *meth_QMediaPlayer_position(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->position();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_position, doc_QMediaPlayer_position);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_volume, "QMediaPlayer.volume() -> int");

extern "C" {static PyObject *meth_QMediaPlayer_volume(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_volume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->volume();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_volume, doc_QMediaPlayer_volume);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_isMuted, "QMediaPlayer.isMuted() -> bool");

extern "C" {static PyObject *meth_QMediaPlayer_isMuted(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_isMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMuted();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_isMuted, doc_QMediaPlayer_isMuted);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_isAudioAvailable, "QMediaPlayer.isAudioAvailable() -> bool");

extern "C" {static PyObject *meth_QMediaPlayer_isAudioAvailable(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_isAudioAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAudioAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_isAudioAvailable, doc_QMediaPlayer_isAudioAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_isVideoAvailable, "QMediaPlayer.isVideoAvailable() -> bool");

extern "C" {static PyObject *meth_QMediaPlayer_isVideoAvailable(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_isVideoAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVideoAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_isVideoAvailable, doc_QMediaPlayer_isVideoAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_bufferStatus, "QMediaPlayer.bufferStatus() -> int");

extern "C" {static PyObject *meth_QMediaPlayer_bufferStatus(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_bufferStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bufferStatus();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_bufferStatus, doc_QMediaPlayer_bufferStatus);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_isSeekable, "QMediaPlayer.isSeekable() -> bool");

extern "C" {static PyObject *meth_QMediaPlayer_isSeekable(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_isSeekable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSeekable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_isSeekable, doc_QMediaPlayer_isSeekable);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_playbackRate, "QMediaPlayer.playbackRate() -> float");

extern "C" {static PyObject *meth_QMediaPlayer_playbackRate(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_playbackRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->playbackRate();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_playbackRate, doc_QMediaPlayer_playbackRate);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_error, "QMediaPlayer.error() -> QMediaPlayer.Error");

extern "C" {static PyObject *meth_QMediaPlayer_error(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMediaPlayer::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QMediaPlayer_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_error, doc_QMediaPlayer_error);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_errorString, "QMediaPlayer.errorString() -> str");

extern "C" {static PyObject *meth_QMediaPlayer_errorString(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_errorString, doc_QMediaPlayer_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_currentNetworkConfiguration, "QMediaPlayer.currentNetworkConfiguration() -> QNetworkConfiguration");

extern "C" {static PyObject *meth_QMediaPlayer_currentNetworkConfiguration(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_currentNetworkConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QNetworkConfiguration*sipRes;

            sipRes = new QNetworkConfiguration(sipCpp->currentNetworkConfiguration());

            return sipConvertFromNewType(sipRes,sipType_QNetworkConfiguration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_currentNetworkConfiguration, doc_QMediaPlayer_currentNetworkConfiguration);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_availability, "QMediaPlayer.availability() -> QMultimedia.AvailabilityStatus");

extern "C" {static PyObject *meth_QMediaPlayer_availability(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_availability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            QMultimedia::AvailabilityStatus sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMediaPlayer::availability() : sipCpp->availability());

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_AvailabilityStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_availability, doc_QMediaPlayer_availability);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_play, "QMediaPlayer.play()");

extern "C" {static PyObject *meth_QMediaPlayer_play(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_play(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            sipCpp->play();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_play, doc_QMediaPlayer_play);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_pause, "QMediaPlayer.pause()");

extern "C" {static PyObject *meth_QMediaPlayer_pause(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_pause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            sipCpp->pause();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_pause, doc_QMediaPlayer_pause);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_stop, "QMediaPlayer.stop()");

extern "C" {static PyObject *meth_QMediaPlayer_stop(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaPlayer, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_stop, doc_QMediaPlayer_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setPosition, "QMediaPlayer.setPosition(int)");

extern "C" {static PyObject *meth_QMediaPlayer_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QMediaPlayer, &sipCpp, &a0))
        {
            sipCpp->setPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setPosition, doc_QMediaPlayer_setPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setVolume, "QMediaPlayer.setVolume(int)");

extern "C" {static PyObject *meth_QMediaPlayer_setVolume(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setVolume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMediaPlayer, &sipCpp, &a0))
        {
            sipCpp->setVolume(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setVolume, doc_QMediaPlayer_setVolume);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setMuted, "QMediaPlayer.setMuted(bool)");

extern "C" {static PyObject *meth_QMediaPlayer_setMuted(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMediaPlayer, &sipCpp, &a0))
        {
            sipCpp->setMuted(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setMuted, doc_QMediaPlayer_setMuted);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setPlaybackRate, "QMediaPlayer.setPlaybackRate(float)");

extern "C" {static PyObject *meth_QMediaPlayer_setPlaybackRate(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setPlaybackRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QMediaPlayer, &sipCpp, &a0))
        {
            sipCpp->setPlaybackRate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setPlaybackRate, doc_QMediaPlayer_setPlaybackRate);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setMedia, "QMediaPlayer.setMedia(QMediaContent, QIODevice stream=None)");

extern "C" {static PyObject *meth_QMediaPlayer_setMedia(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setMedia(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaContent* a0;
        QIODevice* a1 = 0;
        QMediaPlayer *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_stream,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QMediaContent, &a0, sipType_QIODevice, &a1))
        {
            sipCpp->setMedia(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setMedia, doc_QMediaPlayer_setMedia);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setPlaylist, "QMediaPlayer.setPlaylist(QMediaPlaylist)");

extern "C" {static PyObject *meth_QMediaPlayer_setPlaylist(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setPlaylist(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaPlaylist* a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QMediaPlaylist, &a0))
        {
            sipCpp->setPlaylist(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setPlaylist, doc_QMediaPlayer_setPlaylist);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_setNetworkConfigurations, "QMediaPlayer.setNetworkConfigurations(list-of-QNetworkConfiguration)");

extern "C" {static PyObject *meth_QMediaPlayer_setNetworkConfigurations(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_setNetworkConfigurations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QNetworkConfiguration>* a0;
        int a0State = 0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QList_0100QNetworkConfiguration,&a0, &a0State))
        {
            sipCpp->setNetworkConfigurations(*a0);
            sipReleaseType(const_cast<QList<QNetworkConfiguration> *>(a0),sipType_QList_0100QNetworkConfiguration,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_setNetworkConfigurations, doc_QMediaPlayer_setNetworkConfigurations);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_bind, "QMediaPlayer.bind(QObject) -> bool");

extern "C" {static PyObject *meth_QMediaPlayer_bind(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_bind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QObject, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMediaPlayer::bind(a0) : sipCpp->bind(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_bind, doc_QMediaPlayer_bind);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaPlayer_unbind, "QMediaPlayer.unbind(QObject)");

extern "C" {static PyObject *meth_QMediaPlayer_unbind(PyObject *, PyObject *);}
static PyObject *meth_QMediaPlayer_unbind(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QMediaPlayer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMediaPlayer, &sipCpp, sipType_QObject, &a0))
        {
            (sipSelfWasArg ? sipCpp->QMediaPlayer::unbind(a0) : sipCpp->unbind(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaPlayer, sipName_unbind, doc_QMediaPlayer_unbind);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMediaPlayer(void *, const sipTypeDef *);}
static void *cast_QMediaPlayer(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QMediaPlayer)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QMediaObject)->ctd_cast((QMediaObject *)(QMediaPlayer *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMediaPlayer(void *, int);}
static void release_QMediaPlayer(void *sipCppV,int)
{
    QMediaPlayer *sipCpp = reinterpret_cast<QMediaPlayer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMediaPlayer(sipSimpleWrapper *);}
static void dealloc_QMediaPlayer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMediaPlayer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMediaPlayer(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QMediaPlayer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMediaPlayer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMediaPlayer *sipCpp = 0;

    {
        QObject* a0 = 0;
        QMediaPlayer::Flags a1def = 0;
        QMediaPlayer::Flags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QObject, &a0, sipOwner, sipType_QMediaPlayer_Flags, &a1, &a1State))
        {
            sipCpp = new sipQMediaPlayer(a0,*a1);
            sipReleaseType(a1,sipType_QMediaPlayer_Flags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMediaPlayer[] = {{67, 255, 1}};


static PyMethodDef methods_QMediaPlayer[] = {
    {SIP_MLNAME_CAST(sipName_addPropertyWatch), (PyCFunction)meth_QMediaPlayer_addPropertyWatch, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_availability), meth_QMediaPlayer_availability, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_availability)},
    {SIP_MLNAME_CAST(sipName_bind), meth_QMediaPlayer_bind, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_bind)},
    {SIP_MLNAME_CAST(sipName_bufferStatus), meth_QMediaPlayer_bufferStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_bufferStatus)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QMediaPlayer_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QMediaPlayer_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_currentMedia), meth_QMediaPlayer_currentMedia, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_currentMedia)},
    {SIP_MLNAME_CAST(sipName_currentNetworkConfiguration), meth_QMediaPlayer_currentNetworkConfiguration, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_currentNetworkConfiguration)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QMediaPlayer_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QMediaPlayer_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_duration), meth_QMediaPlayer_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_duration)},
    {SIP_MLNAME_CAST(sipName_error), meth_QMediaPlayer_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QMediaPlayer_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_errorString)},
    {SIP_MLNAME_CAST(sipName_hasSupport), (PyCFunction)meth_QMediaPlayer_hasSupport, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaPlayer_hasSupport)},
    {SIP_MLNAME_CAST(sipName_isAudioAvailable), meth_QMediaPlayer_isAudioAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_isAudioAvailable)},
    {SIP_MLNAME_CAST(sipName_isMuted), meth_QMediaPlayer_isMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_isMuted)},
    {SIP_MLNAME_CAST(sipName_isSeekable), meth_QMediaPlayer_isSeekable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_isSeekable)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QMediaPlayer_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isVideoAvailable), meth_QMediaPlayer_isVideoAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_isVideoAvailable)},
    {SIP_MLNAME_CAST(sipName_media), meth_QMediaPlayer_media, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_media)},
    {SIP_MLNAME_CAST(sipName_mediaStatus), meth_QMediaPlayer_mediaStatus, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_mediaStatus)},
    {SIP_MLNAME_CAST(sipName_mediaStream), meth_QMediaPlayer_mediaStream, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_mediaStream)},
    {SIP_MLNAME_CAST(sipName_pause), meth_QMediaPlayer_pause, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_pause)},
    {SIP_MLNAME_CAST(sipName_play), meth_QMediaPlayer_play, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_play)},
    {SIP_MLNAME_CAST(sipName_playbackRate), meth_QMediaPlayer_playbackRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_playbackRate)},
    {SIP_MLNAME_CAST(sipName_playlist), meth_QMediaPlayer_playlist, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_playlist)},
    {SIP_MLNAME_CAST(sipName_position), meth_QMediaPlayer_position, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_position)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QMediaPlayer_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removePropertyWatch), (PyCFunction)meth_QMediaPlayer_removePropertyWatch, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QMediaPlayer_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QMediaPlayer_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setMedia), (PyCFunction)meth_QMediaPlayer_setMedia, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaPlayer_setMedia)},
    {SIP_MLNAME_CAST(sipName_setMuted), meth_QMediaPlayer_setMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setMuted)},
    {SIP_MLNAME_CAST(sipName_setNetworkConfigurations), meth_QMediaPlayer_setNetworkConfigurations, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setNetworkConfigurations)},
    {SIP_MLNAME_CAST(sipName_setPlaybackRate), meth_QMediaPlayer_setPlaybackRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setPlaybackRate)},
    {SIP_MLNAME_CAST(sipName_setPlaylist), meth_QMediaPlayer_setPlaylist, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setPlaylist)},
    {SIP_MLNAME_CAST(sipName_setPosition), meth_QMediaPlayer_setPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setPosition)},
    {SIP_MLNAME_CAST(sipName_setVideoOutput), meth_QMediaPlayer_setVideoOutput, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setVideoOutput)},
    {SIP_MLNAME_CAST(sipName_setVolume), meth_QMediaPlayer_setVolume, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_setVolume)},
    {SIP_MLNAME_CAST(sipName_state), meth_QMediaPlayer_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_state)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QMediaPlayer_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_stop)},
    {SIP_MLNAME_CAST(sipName_supportedMimeTypes), (PyCFunction)meth_QMediaPlayer_supportedMimeTypes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaPlayer_supportedMimeTypes)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QMediaPlayer_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_unbind), meth_QMediaPlayer_unbind, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_unbind)},
    {SIP_MLNAME_CAST(sipName_volume), meth_QMediaPlayer_volume, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaPlayer_volume)}
};

static sipEnumMemberDef enummembers_QMediaPlayer[] = {
    {sipName_AccessDeniedError, static_cast<int>(QMediaPlayer::AccessDeniedError), 69},
    {sipName_BufferedMedia, static_cast<int>(QMediaPlayer::BufferedMedia), 72},
    {sipName_BufferingMedia, static_cast<int>(QMediaPlayer::BufferingMedia), 72},
    {sipName_EndOfMedia, static_cast<int>(QMediaPlayer::EndOfMedia), 72},
    {sipName_FormatError, static_cast<int>(QMediaPlayer::FormatError), 69},
    {sipName_InvalidMedia, static_cast<int>(QMediaPlayer::InvalidMedia), 72},
    {sipName_LoadedMedia, static_cast<int>(QMediaPlayer::LoadedMedia), 72},
    {sipName_LoadingMedia, static_cast<int>(QMediaPlayer::LoadingMedia), 72},
    {sipName_LowLatency, static_cast<int>(QMediaPlayer::LowLatency), 70},
    {sipName_NetworkError, static_cast<int>(QMediaPlayer::NetworkError), 69},
    {sipName_NoError, static_cast<int>(QMediaPlayer::NoError), 69},
    {sipName_NoMedia, static_cast<int>(QMediaPlayer::NoMedia), 72},
    {sipName_PausedState, static_cast<int>(QMediaPlayer::PausedState), 73},
    {sipName_PlayingState, static_cast<int>(QMediaPlayer::PlayingState), 73},
    {sipName_ResourceError, static_cast<int>(QMediaPlayer::ResourceError), 69},
    {sipName_ServiceMissingError, static_cast<int>(QMediaPlayer::ServiceMissingError), 69},
    {sipName_StalledMedia, static_cast<int>(QMediaPlayer::StalledMedia), 72},
    {sipName_StoppedState, static_cast<int>(QMediaPlayer::StoppedState), 73},
    {sipName_StreamPlayback, static_cast<int>(QMediaPlayer::StreamPlayback), 70},
    {sipName_UnknownMediaStatus, static_cast<int>(QMediaPlayer::UnknownMediaStatus), 72},
    {sipName_VideoSurface, static_cast<int>(QMediaPlayer::VideoSurface), 70},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMediaPlayer[] = {
    {"networkConfigurationChanged(QNetworkConfiguration)", "\1QMediaPlayer.networkConfigurationChanged[QNetworkConfiguration]", 0, 0},
    {"playbackRateChanged(qreal)", "\1QMediaPlayer.playbackRateChanged[float]", 0, 0},
    {"seekableChanged(bool)", "\1QMediaPlayer.seekableChanged[bool]", 0, 0},
    {"bufferStatusChanged(int)", "\1QMediaPlayer.bufferStatusChanged[int]", 0, 0},
    {"videoAvailableChanged(bool)", "\1QMediaPlayer.videoAvailableChanged[bool]", 0, 0},
    {"audioAvailableChanged(bool)", "\1QMediaPlayer.audioAvailableChanged[bool]", 0, 0},
    {"mutedChanged(bool)", "\1QMediaPlayer.mutedChanged[bool]", 0, 0},
    {"volumeChanged(int)", "\1QMediaPlayer.volumeChanged[int]", 0, 0},
    {"positionChanged(qint64)", "\1QMediaPlayer.positionChanged[int]", 0, 0},
    {"durationChanged(qint64)", "\1QMediaPlayer.durationChanged[int]", 0, 0},
    {"mediaStatusChanged(QMediaPlayer::MediaStatus)", "\1QMediaPlayer.mediaStatusChanged[QMediaPlayer.MediaStatus]", 0, 0},
    {"stateChanged(QMediaPlayer::State)", "\1QMediaPlayer.stateChanged[QMediaPlayer.State]", 0, 0},
    {"currentMediaChanged(QMediaContent)", "\1QMediaPlayer.currentMediaChanged[QMediaContent]", 0, 0},
    {"mediaChanged(QMediaContent)", "\1QMediaPlayer.mediaChanged[QMediaContent]", 0, 0},
    {"error(QMediaPlayer::Error)", "\1QMediaPlayer.error[QMediaPlayer.Error]", &methods_QMediaPlayer[11], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QMediaPlayer, "\1QMediaPlayer(QObject parent=None, QMediaPlayer.Flags flags=0)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QMediaPlayer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMediaPlayer,
        {0}
    },
    {
        sipNameNr_QMediaPlayer,
        {0, 0, 1},
        45, methods_QMediaPlayer,
        21, enummembers_QMediaPlayer,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMediaPlayer,
    -1,
    -1,
    supers_QMediaPlayer,
    0,
    init_type_QMediaPlayer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMediaPlayer,
    0,
    0,
    0,
    release_QMediaPlayer,
    cast_QMediaPlayer,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QMediaPlayer::staticMetaObject,
    0,
    signals_QMediaPlayer,
    0
};
