/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:31 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediaresource.sip"
#include <qmediaresource.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaResource.cpp"

#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaResource.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaResource.cpp"
#line 26 "sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaResource.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaResource.cpp"


PyDoc_STRVAR(doc_QMediaResource_isNull, "QMediaResource.isNull() -> bool");

extern "C" {static PyObject *meth_QMediaResource_isNull(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaResource, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_isNull, doc_QMediaResource_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_url, "QMediaResource.url() -> QUrl");

extern "C" {static PyObject *meth_QMediaResource_url(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaResource, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_url, doc_QMediaResource_url);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_request, "QMediaResource.request() -> QNetworkRequest");

extern "C" {static PyObject *meth_QMediaResource_request(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_request(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaResource, &sipCpp))
        {
            QNetworkRequest*sipRes;

            sipRes = new QNetworkRequest(sipCpp->request());

            return sipConvertFromNewType(sipRes,sipType_QNetworkRequest,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_request, doc_QMediaResource_request);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_mimeType, "QMediaResource.mimeType() -> str");

extern "C" {static PyObject *meth_QMediaResource_mimeType(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_mimeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaResource, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->mimeType());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_mimeType, doc_QMediaResource_mimeType);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_language, "QMediaResource.language() -> str");

extern "C" {static PyObject *meth_QMediaResource_language(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_language(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaResource, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->language());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_language, doc_QMediaResource_language);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_setLanguage, "QMediaResource.setLanguage(str)");

extern "C" {static PyObject *meth_QMediaResource_setLanguage(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_setLanguage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaResource, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setLanguage(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_setLanguage, doc_QMediaResource_setLanguage);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_audioCodec, "QMediaResource.audioCodec() -> str");

extern "C" {static PyObject *meth_QMediaResource_audioCodec(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_audioCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaResource, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->audioCodec());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_audioCodec, doc_QMediaResource_audioCodec);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_setAudioCodec, "QMediaResource.setAudioCodec(str)");

extern "C" {static PyObject *meth_QMediaResource_setAudioCodec(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_setAudioCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaResource, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setAudioCodec(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_setAudioCodec, doc_QMediaResource_setAudioCodec);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_videoCodec, "QMediaResource.videoCodec() -> str");

extern "C" {static PyObject *meth_QMediaResource_videoCodec(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_videoCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaResource, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->videoCodec());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_videoCodec, doc_QMediaResource_videoCodec);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_setVideoCodec, "QMediaResource.setVideoCodec(str)");

extern "C" {static PyObject *meth_QMediaResource_setVideoCodec(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_setVideoCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaResource, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setVideoCodec(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_setVideoCodec, doc_QMediaResource_setVideoCodec);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_dataSize, "QMediaResource.dataSize() -> int");

extern "C" {static PyObject *meth_QMediaResource_dataSize(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_dataSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaResource, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->dataSize();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_dataSize, doc_QMediaResource_dataSize);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_setDataSize, "QMediaResource.setDataSize(int)");

extern "C" {static PyObject *meth_QMediaResource_setDataSize(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_setDataSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QMediaResource, &sipCpp, &a0))
        {
            sipCpp->setDataSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_setDataSize, doc_QMediaResource_setDataSize);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_audioBitRate, "QMediaResource.audioBitRate() -> int");

extern "C" {static PyObject *meth_QMediaResource_audioBitRate(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_audioBitRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaResource, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->audioBitRate();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_audioBitRate, doc_QMediaResource_audioBitRate);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_setAudioBitRate, "QMediaResource.setAudioBitRate(int)");

extern "C" {static PyObject *meth_QMediaResource_setAudioBitRate(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_setAudioBitRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMediaResource, &sipCpp, &a0))
        {
            sipCpp->setAudioBitRate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_setAudioBitRate, doc_QMediaResource_setAudioBitRate);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_sampleRate, "QMediaResource.sampleRate() -> int");

extern "C" {static PyObject *meth_QMediaResource_sampleRate(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_sampleRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaResource, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sampleRate();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_sampleRate, doc_QMediaResource_sampleRate);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_setSampleRate, "QMediaResource.setSampleRate(int)");

extern "C" {static PyObject *meth_QMediaResource_setSampleRate(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_setSampleRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMediaResource, &sipCpp, &a0))
        {
            sipCpp->setSampleRate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_setSampleRate, doc_QMediaResource_setSampleRate);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_channelCount, "QMediaResource.channelCount() -> int");

extern "C" {static PyObject *meth_QMediaResource_channelCount(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_channelCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaResource, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->channelCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_channelCount, doc_QMediaResource_channelCount);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_setChannelCount, "QMediaResource.setChannelCount(int)");

extern "C" {static PyObject *meth_QMediaResource_setChannelCount(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_setChannelCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMediaResource, &sipCpp, &a0))
        {
            sipCpp->setChannelCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_setChannelCount, doc_QMediaResource_setChannelCount);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_videoBitRate, "QMediaResource.videoBitRate() -> int");

extern "C" {static PyObject *meth_QMediaResource_videoBitRate(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_videoBitRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaResource, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->videoBitRate();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_videoBitRate, doc_QMediaResource_videoBitRate);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_setVideoBitRate, "QMediaResource.setVideoBitRate(int)");

extern "C" {static PyObject *meth_QMediaResource_setVideoBitRate(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_setVideoBitRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QMediaResource, &sipCpp, &a0))
        {
            sipCpp->setVideoBitRate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_setVideoBitRate, doc_QMediaResource_setVideoBitRate);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_resolution, "QMediaResource.resolution() -> QSize");

extern "C" {static PyObject *meth_QMediaResource_resolution(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_resolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaResource, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->resolution());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_resolution, doc_QMediaResource_resolution);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaResource_setResolution, "QMediaResource.setResolution(QSize)\n"
    "QMediaResource.setResolution(int, int)");

extern "C" {static PyObject *meth_QMediaResource_setResolution(PyObject *, PyObject *);}
static PyObject *meth_QMediaResource_setResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMediaResource, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setResolution(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QMediaResource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QMediaResource, &sipCpp, &a0, &a1))
        {
            sipCpp->setResolution(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaResource, sipName_setResolution, doc_QMediaResource_setResolution);

    return NULL;
}


extern "C" {static PyObject *slot_QMediaResource___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMediaResource___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QMediaResource *sipCpp = reinterpret_cast<QMediaResource *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMediaResource));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMediaResource* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMediaResource, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QMediaResource::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtMultimedia,ne_slot,sipType_QMediaResource,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QMediaResource___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMediaResource___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QMediaResource *sipCpp = reinterpret_cast<QMediaResource *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMediaResource));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMediaResource* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMediaResource, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QMediaResource::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtMultimedia,eq_slot,sipType_QMediaResource,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMediaResource(void *, const sipTypeDef *);}
static void *cast_QMediaResource(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QMediaResource)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMediaResource(void *, int);}
static void release_QMediaResource(void *sipCppV,int)
{
    delete reinterpret_cast<QMediaResource *>(sipCppV);
}


extern "C" {static void assign_QMediaResource(void *, SIP_SSIZE_T, const void *);}
static void assign_QMediaResource(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QMediaResource *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QMediaResource *>(sipSrc);
}


extern "C" {static void *array_QMediaResource(SIP_SSIZE_T);}
static void *array_QMediaResource(SIP_SSIZE_T sipNrElem)
{
    return new QMediaResource[sipNrElem];
}


extern "C" {static void *copy_QMediaResource(const void *, SIP_SSIZE_T);}
static void *copy_QMediaResource(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QMediaResource(reinterpret_cast<const QMediaResource *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMediaResource(sipSimpleWrapper *);}
static void dealloc_QMediaResource(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QMediaResource(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QMediaResource(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMediaResource(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QMediaResource *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QMediaResource();

            return sipCpp;
        }
    }

    {
        const QUrl* a0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mimeType,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|J1", sipType_QUrl, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp = new QMediaResource(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const QNetworkRequest* a0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mimeType,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|J1", sipType_QNetworkRequest, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp = new QMediaResource(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipCpp;
        }
    }

    {
        const QMediaResource* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QMediaResource, &a0))
        {
            sipCpp = new QMediaResource(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMediaResource[] = {
    {(void *)slot_QMediaResource___ne__, ne_slot},
    {(void *)slot_QMediaResource___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMediaResource[] = {
    {SIP_MLNAME_CAST(sipName_audioBitRate), meth_QMediaResource_audioBitRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_audioBitRate)},
    {SIP_MLNAME_CAST(sipName_audioCodec), meth_QMediaResource_audioCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_audioCodec)},
    {SIP_MLNAME_CAST(sipName_channelCount), meth_QMediaResource_channelCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_channelCount)},
    {SIP_MLNAME_CAST(sipName_dataSize), meth_QMediaResource_dataSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_dataSize)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QMediaResource_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_isNull)},
    {SIP_MLNAME_CAST(sipName_language), meth_QMediaResource_language, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_language)},
    {SIP_MLNAME_CAST(sipName_mimeType), meth_QMediaResource_mimeType, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_mimeType)},
    {SIP_MLNAME_CAST(sipName_request), meth_QMediaResource_request, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_request)},
    {SIP_MLNAME_CAST(sipName_resolution), meth_QMediaResource_resolution, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_resolution)},
    {SIP_MLNAME_CAST(sipName_sampleRate), meth_QMediaResource_sampleRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_sampleRate)},
    {SIP_MLNAME_CAST(sipName_setAudioBitRate), meth_QMediaResource_setAudioBitRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_setAudioBitRate)},
    {SIP_MLNAME_CAST(sipName_setAudioCodec), meth_QMediaResource_setAudioCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_setAudioCodec)},
    {SIP_MLNAME_CAST(sipName_setChannelCount), meth_QMediaResource_setChannelCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_setChannelCount)},
    {SIP_MLNAME_CAST(sipName_setDataSize), meth_QMediaResource_setDataSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_setDataSize)},
    {SIP_MLNAME_CAST(sipName_setLanguage), meth_QMediaResource_setLanguage, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_setLanguage)},
    {SIP_MLNAME_CAST(sipName_setResolution), meth_QMediaResource_setResolution, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_setResolution)},
    {SIP_MLNAME_CAST(sipName_setSampleRate), meth_QMediaResource_setSampleRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_setSampleRate)},
    {SIP_MLNAME_CAST(sipName_setVideoBitRate), meth_QMediaResource_setVideoBitRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_setVideoBitRate)},
    {SIP_MLNAME_CAST(sipName_setVideoCodec), meth_QMediaResource_setVideoCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_setVideoCodec)},
    {SIP_MLNAME_CAST(sipName_url), meth_QMediaResource_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_url)},
    {SIP_MLNAME_CAST(sipName_videoBitRate), meth_QMediaResource_videoBitRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_videoBitRate)},
    {SIP_MLNAME_CAST(sipName_videoCodec), meth_QMediaResource_videoCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaResource_videoCodec)}
};

PyDoc_STRVAR(doc_QMediaResource, "\1QMediaResource()\n"
    "QMediaResource(QUrl, str mimeType=QString())\n"
    "QMediaResource(QNetworkRequest, str mimeType=QString())\n"
    "QMediaResource(QMediaResource)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QMediaResource = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMediaResource,
        {0}
    },
    {
        sipNameNr_QMediaResource,
        {0, 0, 1},
        22, methods_QMediaResource,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMediaResource,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QMediaResource,
    init_type_QMediaResource,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMediaResource,
    assign_QMediaResource,
    array_QMediaResource,
    copy_QMediaResource,
    release_QMediaResource,
    cast_QMediaResource,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
