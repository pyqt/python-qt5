/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:31 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediarecorder.sip"
#include <qmediarecorder.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediaobject.sip"
#include <qmediaobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmultimedia.sip"
#include <qmultimedia.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediaencodersettings.sip"
#include <qmediaencodersettings.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediaencodersettings.sip"
#include <qmediaencodersettings.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 731 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 629 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"


class sipQMediaRecorder : public QMediaRecorder
{
public:
    sipQMediaRecorder(QMediaObject*,QObject*);
    virtual ~sipQMediaRecorder();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    bool sipProtectVirt_setMediaObject(bool,QMediaObject*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool setMediaObject(QMediaObject*);
    QMediaObject* mediaObject() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMediaRecorder(const sipQMediaRecorder &);
    sipQMediaRecorder &operator = (const sipQMediaRecorder &);

    char sipPyMethods[9];
};

sipQMediaRecorder::sipQMediaRecorder(QMediaObject*a0,QObject*a1): QMediaRecorder(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMediaRecorder::~sipQMediaRecorder()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMediaRecorder::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QMediaRecorder);
}

int sipQMediaRecorder::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMediaRecorder::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QMediaRecorder,_c,_id,_a);

    return _id;
}

void *sipQMediaRecorder::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QMediaRecorder, _clname, &sipCpp) ? sipCpp : QMediaRecorder::qt_metacast(_clname));
}

void sipQMediaRecorder::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QMediaRecorder::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaRecorder::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QMediaRecorder::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaRecorder::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QMediaRecorder::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaRecorder::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QMediaRecorder::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMediaRecorder::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QMediaRecorder::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQMediaRecorder::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QMediaRecorder::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQMediaRecorder::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QMediaRecorder::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQMediaRecorder::setMediaObject(QMediaObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setMediaObject);

    if (!sipMeth)
        return QMediaRecorder::setMediaObject(a0);

    extern bool sipVH_QtMultimedia_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMediaObject*);

    return sipVH_QtMultimedia_1(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMediaObject* sipQMediaRecorder::mediaObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_mediaObject);

    if (!sipMeth)
        return QMediaRecorder::mediaObject();

    extern QMediaObject* sipVH_QtMultimedia_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_2(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQMediaRecorder::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQMediaRecorder::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQMediaRecorder::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQMediaRecorder::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQMediaRecorder::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQMediaRecorder::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQMediaRecorder::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQMediaRecorder::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQMediaRecorder::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

bool sipQMediaRecorder::sipProtectVirt_setMediaObject(bool sipSelfWasArg,QMediaObject*a0)
{
    return (sipSelfWasArg ? QMediaRecorder::setMediaObject(a0) : setMediaObject(a0));
}


PyDoc_STRVAR(doc_QMediaRecorder_sender, "QMediaRecorder.sender() -> QObject");

extern "C" {static PyObject *meth_QMediaRecorder_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQMediaRecorder *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 434 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_sender, doc_QMediaRecorder_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_receivers, "QMediaRecorder.receivers(signal) -> int");

extern "C" {static PyObject *meth_QMediaRecorder_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQMediaRecorder *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QMediaRecorder, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 493 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaRecorder.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_receivers, doc_QMediaRecorder_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_timerEvent, "QMediaRecorder.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QMediaRecorder_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQMediaRecorder *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_timerEvent, doc_QMediaRecorder_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_childEvent, "QMediaRecorder.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QMediaRecorder_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQMediaRecorder *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_childEvent, doc_QMediaRecorder_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_customEvent, "QMediaRecorder.customEvent(QEvent)");

extern "C" {static PyObject *meth_QMediaRecorder_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQMediaRecorder *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_customEvent, doc_QMediaRecorder_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_connectNotify, "QMediaRecorder.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QMediaRecorder_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQMediaRecorder *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_connectNotify, doc_QMediaRecorder_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_disconnectNotify, "QMediaRecorder.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QMediaRecorder_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQMediaRecorder *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_disconnectNotify, doc_QMediaRecorder_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_senderSignalIndex, "QMediaRecorder.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QMediaRecorder_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQMediaRecorder *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_senderSignalIndex, doc_QMediaRecorder_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_isSignalConnected, "QMediaRecorder.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QMediaRecorder_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQMediaRecorder *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_isSignalConnected, doc_QMediaRecorder_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_mediaObject, "QMediaRecorder.mediaObject() -> QMediaObject");

extern "C" {static PyObject *meth_QMediaRecorder_mediaObject(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_mediaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QMediaObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QMediaRecorder::mediaObject() : sipCpp->mediaObject());

            return sipConvertFromType(sipRes,sipType_QMediaObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_mediaObject, doc_QMediaRecorder_mediaObject);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_isAvailable, "QMediaRecorder.isAvailable() -> bool");

extern "C" {static PyObject *meth_QMediaRecorder_isAvailable(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_isAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_isAvailable, doc_QMediaRecorder_isAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_availability, "QMediaRecorder.availability() -> QMultimedia.AvailabilityStatus");

extern "C" {static PyObject *meth_QMediaRecorder_availability(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_availability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QMultimedia::AvailabilityStatus sipRes;

            sipRes = sipCpp->availability();

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_AvailabilityStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_availability, doc_QMediaRecorder_availability);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_outputLocation, "QMediaRecorder.outputLocation() -> QUrl");

extern "C" {static PyObject *meth_QMediaRecorder_outputLocation(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_outputLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->outputLocation());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_outputLocation, doc_QMediaRecorder_outputLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setOutputLocation, "QMediaRecorder.setOutputLocation(QUrl) -> bool");

extern "C" {static PyObject *meth_QMediaRecorder_setOutputLocation(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setOutputLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QUrl, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setOutputLocation(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setOutputLocation, doc_QMediaRecorder_setOutputLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_actualLocation, "QMediaRecorder.actualLocation() -> QUrl");

extern "C" {static PyObject *meth_QMediaRecorder_actualLocation(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_actualLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->actualLocation());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_actualLocation, doc_QMediaRecorder_actualLocation);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_state, "QMediaRecorder.state() -> QMediaRecorder.State");

extern "C" {static PyObject *meth_QMediaRecorder_state(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QMediaRecorder::State sipRes;

            sipRes = sipCpp->state();

            return sipConvertFromEnum(sipRes,sipType_QMediaRecorder_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_state, doc_QMediaRecorder_state);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_status, "QMediaRecorder.status() -> QMediaRecorder.Status");

extern "C" {static PyObject *meth_QMediaRecorder_status(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_status(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QMediaRecorder::Status sipRes;

            sipRes = sipCpp->status();

            return sipConvertFromEnum(sipRes,sipType_QMediaRecorder_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_status, doc_QMediaRecorder_status);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_error, "QMediaRecorder.error() -> QMediaRecorder.Error");

extern "C" {static PyObject *meth_QMediaRecorder_error(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QMediaRecorder::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QMediaRecorder_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_error, doc_QMediaRecorder_error);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_errorString, "QMediaRecorder.errorString() -> str");

extern "C" {static PyObject *meth_QMediaRecorder_errorString(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_errorString, doc_QMediaRecorder_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_duration, "QMediaRecorder.duration() -> int");

extern "C" {static PyObject *meth_QMediaRecorder_duration(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_duration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->duration();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_duration, doc_QMediaRecorder_duration);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_isMuted, "QMediaRecorder.isMuted() -> bool");

extern "C" {static PyObject *meth_QMediaRecorder_isMuted(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_isMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMuted();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_isMuted, doc_QMediaRecorder_isMuted);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_volume, "QMediaRecorder.volume() -> float");

extern "C" {static PyObject *meth_QMediaRecorder_volume(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_volume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->volume();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_volume, doc_QMediaRecorder_volume);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_supportedContainers, "QMediaRecorder.supportedContainers() -> list-of-str");

extern "C" {static PyObject *meth_QMediaRecorder_supportedContainers(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_supportedContainers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->supportedContainers());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_supportedContainers, doc_QMediaRecorder_supportedContainers);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_containerDescription, "QMediaRecorder.containerDescription(str) -> str");

extern "C" {static PyObject *meth_QMediaRecorder_containerDescription(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_containerDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->containerDescription(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_containerDescription, doc_QMediaRecorder_containerDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_supportedAudioCodecs, "QMediaRecorder.supportedAudioCodecs() -> list-of-str");

extern "C" {static PyObject *meth_QMediaRecorder_supportedAudioCodecs(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_supportedAudioCodecs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->supportedAudioCodecs());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_supportedAudioCodecs, doc_QMediaRecorder_supportedAudioCodecs);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_audioCodecDescription, "QMediaRecorder.audioCodecDescription(str) -> str");

extern "C" {static PyObject *meth_QMediaRecorder_audioCodecDescription(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_audioCodecDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->audioCodecDescription(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_audioCodecDescription, doc_QMediaRecorder_audioCodecDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_supportedAudioSampleRates, "QMediaRecorder.supportedAudioSampleRates(QAudioEncoderSettings settings=QAudioEncoderSettings()) -> (list-of-int, bool)");

extern "C" {static PyObject *meth_QMediaRecorder_supportedAudioSampleRates(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_supportedAudioSampleRates(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings& a0def = QAudioEncoderSettings();
        const QAudioEncoderSettings* a0 = &a0def;
        bool a1;
        const QMediaRecorder *sipCpp;

        static const char *sipKwdList[] = {
            sipName_settings,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QAudioEncoderSettings, &a0))
        {
            QList<int>*sipRes;

            sipRes = new QList<int>(sipCpp->supportedAudioSampleRates(*a0,&a1));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QList_1800,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_supportedAudioSampleRates, doc_QMediaRecorder_supportedAudioSampleRates);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_supportedVideoCodecs, "QMediaRecorder.supportedVideoCodecs() -> list-of-str");

extern "C" {static PyObject *meth_QMediaRecorder_supportedVideoCodecs(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_supportedVideoCodecs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->supportedVideoCodecs());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_supportedVideoCodecs, doc_QMediaRecorder_supportedVideoCodecs);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_videoCodecDescription, "QMediaRecorder.videoCodecDescription(str) -> str");

extern "C" {static PyObject *meth_QMediaRecorder_videoCodecDescription(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_videoCodecDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->videoCodecDescription(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_videoCodecDescription, doc_QMediaRecorder_videoCodecDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_supportedResolutions, "QMediaRecorder.supportedResolutions(QVideoEncoderSettings settings=QVideoEncoderSettings()) -> (list-of-QSize, bool)");

extern "C" {static PyObject *meth_QMediaRecorder_supportedResolutions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_supportedResolutions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QVideoEncoderSettings& a0def = QVideoEncoderSettings();
        const QVideoEncoderSettings* a0 = &a0def;
        bool a1;
        const QMediaRecorder *sipCpp;

        static const char *sipKwdList[] = {
            sipName_settings,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QVideoEncoderSettings, &a0))
        {
            QList<QSize>*sipRes;

            sipRes = new QList<QSize>(sipCpp->supportedResolutions(*a0,&a1));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QList_0100QSize,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_supportedResolutions, doc_QMediaRecorder_supportedResolutions);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_supportedFrameRates, "QMediaRecorder.supportedFrameRates(QVideoEncoderSettings settings=QVideoEncoderSettings()) -> (list-of-float, bool)");

extern "C" {static PyObject *meth_QMediaRecorder_supportedFrameRates(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_supportedFrameRates(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QVideoEncoderSettings& a0def = QVideoEncoderSettings();
        const QVideoEncoderSettings* a0 = &a0def;
        bool a1;
        const QMediaRecorder *sipCpp;

        static const char *sipKwdList[] = {
            sipName_settings,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QVideoEncoderSettings, &a0))
        {
            QList<qreal>*sipRes;

            sipRes = new QList<qreal>(sipCpp->supportedFrameRates(*a0,&a1));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QList_2400,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_supportedFrameRates, doc_QMediaRecorder_supportedFrameRates);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_audioSettings, "QMediaRecorder.audioSettings() -> QAudioEncoderSettings");

extern "C" {static PyObject *meth_QMediaRecorder_audioSettings(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_audioSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QAudioEncoderSettings*sipRes;

            sipRes = new QAudioEncoderSettings(sipCpp->audioSettings());

            return sipConvertFromNewType(sipRes,sipType_QAudioEncoderSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_audioSettings, doc_QMediaRecorder_audioSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_videoSettings, "QMediaRecorder.videoSettings() -> QVideoEncoderSettings");

extern "C" {static PyObject *meth_QMediaRecorder_videoSettings(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_videoSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QVideoEncoderSettings*sipRes;

            sipRes = new QVideoEncoderSettings(sipCpp->videoSettings());

            return sipConvertFromNewType(sipRes,sipType_QVideoEncoderSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_videoSettings, doc_QMediaRecorder_videoSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_containerFormat, "QMediaRecorder.containerFormat() -> str");

extern "C" {static PyObject *meth_QMediaRecorder_containerFormat(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_containerFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->containerFormat());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_containerFormat, doc_QMediaRecorder_containerFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setAudioSettings, "QMediaRecorder.setAudioSettings(QAudioEncoderSettings)");

extern "C" {static PyObject *meth_QMediaRecorder_setAudioSettings(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setAudioSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings* a0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QAudioEncoderSettings, &a0))
        {
            sipCpp->setAudioSettings(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setAudioSettings, doc_QMediaRecorder_setAudioSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setVideoSettings, "QMediaRecorder.setVideoSettings(QVideoEncoderSettings)");

extern "C" {static PyObject *meth_QMediaRecorder_setVideoSettings(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setVideoSettings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVideoEncoderSettings* a0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QVideoEncoderSettings, &a0))
        {
            sipCpp->setVideoSettings(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setVideoSettings, doc_QMediaRecorder_setVideoSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setContainerFormat, "QMediaRecorder.setContainerFormat(str)");

extern "C" {static PyObject *meth_QMediaRecorder_setContainerFormat(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setContainerFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setContainerFormat(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setContainerFormat, doc_QMediaRecorder_setContainerFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setEncodingSettings, "QMediaRecorder.setEncodingSettings(QAudioEncoderSettings, QVideoEncoderSettings video=QVideoEncoderSettings(), str container=QString())");

extern "C" {static PyObject *meth_QMediaRecorder_setEncodingSettings(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setEncodingSettings(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings* a0;
        const QVideoEncoderSettings& a1def = QVideoEncoderSettings();
        const QVideoEncoderSettings* a1 = &a1def;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        QMediaRecorder *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_video,
            sipName_container,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J9J1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QAudioEncoderSettings, &a0, sipType_QVideoEncoderSettings, &a1, sipType_QString,&a2, &a2State))
        {
            sipCpp->setEncodingSettings(*a0,*a1,*a2);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setEncodingSettings, doc_QMediaRecorder_setEncodingSettings);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_isMetaDataAvailable, "QMediaRecorder.isMetaDataAvailable() -> bool");

extern "C" {static PyObject *meth_QMediaRecorder_isMetaDataAvailable(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_isMetaDataAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMetaDataAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_isMetaDataAvailable, doc_QMediaRecorder_isMetaDataAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_isMetaDataWritable, "QMediaRecorder.isMetaDataWritable() -> bool");

extern "C" {static PyObject *meth_QMediaRecorder_isMetaDataWritable(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_isMetaDataWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMetaDataWritable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_isMetaDataWritable, doc_QMediaRecorder_isMetaDataWritable);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_metaData, "QMediaRecorder.metaData(str) -> QVariant");

extern "C" {static PyObject *meth_QMediaRecorder_metaData(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->metaData(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_metaData, doc_QMediaRecorder_metaData);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setMetaData, "QMediaRecorder.setMetaData(str, QVariant)");

extern "C" {static PyObject *meth_QMediaRecorder_setMetaData(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QVariant* a1;
        int a1State = 0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setMetaData(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setMetaData, doc_QMediaRecorder_setMetaData);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_availableMetaData, "QMediaRecorder.availableMetaData() -> list-of-str");

extern "C" {static PyObject *meth_QMediaRecorder_availableMetaData(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_availableMetaData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->availableMetaData());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_availableMetaData, doc_QMediaRecorder_availableMetaData);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_record, "QMediaRecorder.record()");

extern "C" {static PyObject *meth_QMediaRecorder_record(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_record(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            sipCpp->record();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_record, doc_QMediaRecorder_record);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_pause, "QMediaRecorder.pause()");

extern "C" {static PyObject *meth_QMediaRecorder_pause(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_pause(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            sipCpp->pause();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_pause, doc_QMediaRecorder_pause);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_stop, "QMediaRecorder.stop()");

extern "C" {static PyObject *meth_QMediaRecorder_stop(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaRecorder, &sipCpp))
        {
            sipCpp->stop();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_stop, doc_QMediaRecorder_stop);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setMuted, "QMediaRecorder.setMuted(bool)");

extern "C" {static PyObject *meth_QMediaRecorder_setMuted(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setMuted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QMediaRecorder, &sipCpp, &a0))
        {
            sipCpp->setMuted(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setMuted, doc_QMediaRecorder_setMuted);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setVolume, "QMediaRecorder.setVolume(float)");

extern "C" {static PyObject *meth_QMediaRecorder_setVolume(PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setVolume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QMediaRecorder *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QMediaRecorder, &sipCpp, &a0))
        {
            sipCpp->setVolume(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setVolume, doc_QMediaRecorder_setVolume);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaRecorder_setMediaObject, "QMediaRecorder.setMediaObject(QMediaObject) -> bool");

extern "C" {static PyObject *meth_QMediaRecorder_setMediaObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMediaRecorder_setMediaObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMediaObject* a0;
        sipQMediaRecorder *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMediaRecorder, &sipCpp, sipType_QMediaObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_setMediaObject(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaRecorder, sipName_setMediaObject, doc_QMediaRecorder_setMediaObject);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMediaRecorder(void *, const sipTypeDef *);}
static void *cast_QMediaRecorder(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QMediaRecorder)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QMediaRecorder *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QMediaBindableInterface)->ctd_cast((QMediaBindableInterface *)(QMediaRecorder *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMediaRecorder(void *, int);}
static void release_QMediaRecorder(void *sipCppV,int)
{
    QMediaRecorder *sipCpp = reinterpret_cast<QMediaRecorder *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMediaRecorder(sipSimpleWrapper *);}
static void dealloc_QMediaRecorder(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMediaRecorder *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMediaRecorder(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QMediaRecorder(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMediaRecorder(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMediaRecorder *sipCpp = 0;

    {
        QMediaObject* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QMediaObject, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQMediaRecorder(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMediaRecorder[] = {{162, 0, 0}, {63, 255, 1}};


static PyMethodDef methods_QMediaRecorder[] = {
    {SIP_MLNAME_CAST(sipName_actualLocation), meth_QMediaRecorder_actualLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_actualLocation)},
    {SIP_MLNAME_CAST(sipName_audioCodecDescription), meth_QMediaRecorder_audioCodecDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_audioCodecDescription)},
    {SIP_MLNAME_CAST(sipName_audioSettings), meth_QMediaRecorder_audioSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_audioSettings)},
    {SIP_MLNAME_CAST(sipName_availability), meth_QMediaRecorder_availability, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_availability)},
    {SIP_MLNAME_CAST(sipName_availableMetaData), meth_QMediaRecorder_availableMetaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_availableMetaData)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QMediaRecorder_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QMediaRecorder_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_containerDescription), meth_QMediaRecorder_containerDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_containerDescription)},
    {SIP_MLNAME_CAST(sipName_containerFormat), meth_QMediaRecorder_containerFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_containerFormat)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QMediaRecorder_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QMediaRecorder_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_duration), meth_QMediaRecorder_duration, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_duration)},
    {SIP_MLNAME_CAST(sipName_error), meth_QMediaRecorder_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QMediaRecorder_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_errorString)},
    {SIP_MLNAME_CAST(sipName_isAvailable), meth_QMediaRecorder_isAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_isAvailable)},
    {SIP_MLNAME_CAST(sipName_isMetaDataAvailable), meth_QMediaRecorder_isMetaDataAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_isMetaDataAvailable)},
    {SIP_MLNAME_CAST(sipName_isMetaDataWritable), meth_QMediaRecorder_isMetaDataWritable, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_isMetaDataWritable)},
    {SIP_MLNAME_CAST(sipName_isMuted), meth_QMediaRecorder_isMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_isMuted)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QMediaRecorder_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mediaObject), meth_QMediaRecorder_mediaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_mediaObject)},
    {SIP_MLNAME_CAST(sipName_metaData), meth_QMediaRecorder_metaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_metaData)},
    {SIP_MLNAME_CAST(sipName_outputLocation), meth_QMediaRecorder_outputLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_outputLocation)},
    {SIP_MLNAME_CAST(sipName_pause), meth_QMediaRecorder_pause, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_pause)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QMediaRecorder_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_record), meth_QMediaRecorder_record, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_record)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QMediaRecorder_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QMediaRecorder_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAudioSettings), meth_QMediaRecorder_setAudioSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setAudioSettings)},
    {SIP_MLNAME_CAST(sipName_setContainerFormat), meth_QMediaRecorder_setContainerFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setContainerFormat)},
    {SIP_MLNAME_CAST(sipName_setEncodingSettings), (PyCFunction)meth_QMediaRecorder_setEncodingSettings, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaRecorder_setEncodingSettings)},
    {SIP_MLNAME_CAST(sipName_setMediaObject), (PyCFunction)meth_QMediaRecorder_setMediaObject, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaRecorder_setMediaObject)},
    {SIP_MLNAME_CAST(sipName_setMetaData), meth_QMediaRecorder_setMetaData, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setMetaData)},
    {SIP_MLNAME_CAST(sipName_setMuted), meth_QMediaRecorder_setMuted, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setMuted)},
    {SIP_MLNAME_CAST(sipName_setOutputLocation), meth_QMediaRecorder_setOutputLocation, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setOutputLocation)},
    {SIP_MLNAME_CAST(sipName_setVideoSettings), meth_QMediaRecorder_setVideoSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setVideoSettings)},
    {SIP_MLNAME_CAST(sipName_setVolume), meth_QMediaRecorder_setVolume, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_setVolume)},
    {SIP_MLNAME_CAST(sipName_state), meth_QMediaRecorder_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_state)},
    {SIP_MLNAME_CAST(sipName_status), meth_QMediaRecorder_status, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_status)},
    {SIP_MLNAME_CAST(sipName_stop), meth_QMediaRecorder_stop, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_stop)},
    {SIP_MLNAME_CAST(sipName_supportedAudioCodecs), meth_QMediaRecorder_supportedAudioCodecs, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_supportedAudioCodecs)},
    {SIP_MLNAME_CAST(sipName_supportedAudioSampleRates), (PyCFunction)meth_QMediaRecorder_supportedAudioSampleRates, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaRecorder_supportedAudioSampleRates)},
    {SIP_MLNAME_CAST(sipName_supportedContainers), meth_QMediaRecorder_supportedContainers, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_supportedContainers)},
    {SIP_MLNAME_CAST(sipName_supportedFrameRates), (PyCFunction)meth_QMediaRecorder_supportedFrameRates, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaRecorder_supportedFrameRates)},
    {SIP_MLNAME_CAST(sipName_supportedResolutions), (PyCFunction)meth_QMediaRecorder_supportedResolutions, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMediaRecorder_supportedResolutions)},
    {SIP_MLNAME_CAST(sipName_supportedVideoCodecs), meth_QMediaRecorder_supportedVideoCodecs, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_supportedVideoCodecs)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QMediaRecorder_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_videoCodecDescription), meth_QMediaRecorder_videoCodecDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_videoCodecDescription)},
    {SIP_MLNAME_CAST(sipName_videoSettings), meth_QMediaRecorder_videoSettings, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_videoSettings)},
    {SIP_MLNAME_CAST(sipName_volume), meth_QMediaRecorder_volume, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaRecorder_volume)}
};

static sipEnumMemberDef enummembers_QMediaRecorder[] = {
    {sipName_FinalizingStatus, static_cast<int>(QMediaRecorder::FinalizingStatus), 80},
    {sipName_FormatError, static_cast<int>(QMediaRecorder::FormatError), 78},
    {sipName_LoadedStatus, static_cast<int>(QMediaRecorder::LoadedStatus), 80},
    {sipName_LoadingStatus, static_cast<int>(QMediaRecorder::LoadingStatus), 80},
    {sipName_NoError, static_cast<int>(QMediaRecorder::NoError), 78},
    {sipName_OutOfSpaceError, static_cast<int>(QMediaRecorder::OutOfSpaceError), 78},
    {sipName_PausedState, static_cast<int>(QMediaRecorder::PausedState), 79},
    {sipName_PausedStatus, static_cast<int>(QMediaRecorder::PausedStatus), 80},
    {sipName_RecordingState, static_cast<int>(QMediaRecorder::RecordingState), 79},
    {sipName_RecordingStatus, static_cast<int>(QMediaRecorder::RecordingStatus), 80},
    {sipName_ResourceError, static_cast<int>(QMediaRecorder::ResourceError), 78},
    {sipName_StartingStatus, static_cast<int>(QMediaRecorder::StartingStatus), 80},
    {sipName_StoppedState, static_cast<int>(QMediaRecorder::StoppedState), 79},
    {sipName_UnavailableStatus, static_cast<int>(QMediaRecorder::UnavailableStatus), 80},
    {sipName_UnloadedStatus, static_cast<int>(QMediaRecorder::UnloadedStatus), 80},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMediaRecorder[] = {
    {"availabilityChanged(QMultimedia::AvailabilityStatus)", "\1QMediaRecorder.availabilityChanged[QMultimedia.AvailabilityStatus]", 0, 0},
    {"metaDataChanged(QString,QVariant)", "\1QMediaRecorder.metaDataChanged[str, QVariant]", 0, 0},
    {"metaDataWritableChanged(bool)", "\1QMediaRecorder.metaDataWritableChanged[bool]", 0, 0},
    {"metaDataAvailableChanged(bool)", "\1QMediaRecorder.metaDataAvailableChanged[bool]", 0, 0},
    {"actualLocationChanged(QUrl)", "\1QMediaRecorder.actualLocationChanged[QUrl]", 0, 0},
    {"volumeChanged(qreal)", "\1QMediaRecorder.volumeChanged[float]", 0, 0},
    {"mutedChanged(bool)", "\1QMediaRecorder.mutedChanged[bool]", 0, 0},
    {"durationChanged(qint64)", "\1QMediaRecorder.durationChanged[int]", 0, 0},
    {"statusChanged(QMediaRecorder::Status)", "\1QMediaRecorder.statusChanged[QMediaRecorder.Status]", 0, 0},
    {"stateChanged(QMediaRecorder::State)", "\1QMediaRecorder.stateChanged[QMediaRecorder.State]", 0, 0},
    {"error(QMediaRecorder::Error)", "\1QMediaRecorder.error[QMediaRecorder.Error]", &methods_QMediaRecorder[12], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QMediaRecorder, "\1QMediaRecorder(QMediaObject, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QMediaRecorder = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMediaRecorder,
        {0}
    },
    {
        sipNameNr_QMediaRecorder,
        {0, 0, 1},
        49, methods_QMediaRecorder,
        15, enummembers_QMediaRecorder,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMediaRecorder,
    -1,
    -1,
    supers_QMediaRecorder,
    0,
    init_type_QMediaRecorder,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMediaRecorder,
    0,
    0,
    0,
    release_QMediaRecorder,
    cast_QMediaRecorder,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QMediaRecorder::staticMetaObject,
    0,
    signals_QMediaRecorder,
    0
};
