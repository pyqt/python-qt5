/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:31 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcamerafocus.sip"
#include <qcamerafocus.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcamera.sip"
#include <qcamera.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcamerafocus.sip"
#include <qcamerafocus.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcamerafocus.sip"
#include <qcamerafocus.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraFocus.cpp"


PyDoc_STRVAR(doc_QCameraFocus_isAvailable, "QCameraFocus.isAvailable() -> bool");

extern "C" {static PyObject *meth_QCameraFocus_isAvailable(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_isAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraFocus, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_isAvailable, doc_QCameraFocus_isAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_focusMode, "QCameraFocus.focusMode() -> QCameraFocus.FocusModes");

extern "C" {static PyObject *meth_QCameraFocus_focusMode(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_focusMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraFocus, &sipCpp))
        {
            QCameraFocus::FocusModes*sipRes;

            sipRes = new QCameraFocus::FocusModes(sipCpp->focusMode());

            return sipConvertFromNewType(sipRes,sipType_QCameraFocus_FocusModes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_focusMode, doc_QCameraFocus_focusMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_setFocusMode, "QCameraFocus.setFocusMode(QCameraFocus.FocusModes)");

extern "C" {static PyObject *meth_QCameraFocus_setFocusMode(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_setFocusMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraFocus::FocusModes* a0;
        int a0State = 0;
        QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCameraFocus, &sipCpp, sipType_QCameraFocus_FocusModes, &a0, &a0State))
        {
            sipCpp->setFocusMode(*a0);
            sipReleaseType(a0,sipType_QCameraFocus_FocusModes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_setFocusMode, doc_QCameraFocus_setFocusMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_isFocusModeSupported, "QCameraFocus.isFocusModeSupported(QCameraFocus.FocusModes) -> bool");

extern "C" {static PyObject *meth_QCameraFocus_isFocusModeSupported(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_isFocusModeSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraFocus::FocusModes* a0;
        int a0State = 0;
        const QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCameraFocus, &sipCpp, sipType_QCameraFocus_FocusModes, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->isFocusModeSupported(*a0);
            sipReleaseType(a0,sipType_QCameraFocus_FocusModes,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_isFocusModeSupported, doc_QCameraFocus_isFocusModeSupported);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_focusPointMode, "QCameraFocus.focusPointMode() -> QCameraFocus.FocusPointMode");

extern "C" {static PyObject *meth_QCameraFocus_focusPointMode(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_focusPointMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraFocus, &sipCpp))
        {
            QCameraFocus::FocusPointMode sipRes;

            sipRes = sipCpp->focusPointMode();

            return sipConvertFromEnum(sipRes,sipType_QCameraFocus_FocusPointMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_focusPointMode, doc_QCameraFocus_focusPointMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_setFocusPointMode, "QCameraFocus.setFocusPointMode(QCameraFocus.FocusPointMode)");

extern "C" {static PyObject *meth_QCameraFocus_setFocusPointMode(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_setFocusPointMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraFocus::FocusPointMode a0;
        QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCameraFocus, &sipCpp, sipType_QCameraFocus_FocusPointMode, &a0))
        {
            sipCpp->setFocusPointMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_setFocusPointMode, doc_QCameraFocus_setFocusPointMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_isFocusPointModeSupported, "QCameraFocus.isFocusPointModeSupported(QCameraFocus.FocusPointMode) -> bool");

extern "C" {static PyObject *meth_QCameraFocus_isFocusPointModeSupported(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_isFocusPointModeSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraFocus::FocusPointMode a0;
        const QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCameraFocus, &sipCpp, sipType_QCameraFocus_FocusPointMode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isFocusPointModeSupported(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_isFocusPointModeSupported, doc_QCameraFocus_isFocusPointModeSupported);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_customFocusPoint, "QCameraFocus.customFocusPoint() -> QPointF");

extern "C" {static PyObject *meth_QCameraFocus_customFocusPoint(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_customFocusPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraFocus, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->customFocusPoint());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_customFocusPoint, doc_QCameraFocus_customFocusPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_setCustomFocusPoint, "QCameraFocus.setCustomFocusPoint(QPointF)");

extern "C" {static PyObject *meth_QCameraFocus_setCustomFocusPoint(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_setCustomFocusPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCameraFocus, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setCustomFocusPoint(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_setCustomFocusPoint, doc_QCameraFocus_setCustomFocusPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_focusZones, "QCameraFocus.focusZones() -> list-of-QCameraFocusZone");

extern "C" {static PyObject *meth_QCameraFocus_focusZones(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_focusZones(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraFocus, &sipCpp))
        {
            QCameraFocusZoneList*sipRes;

            sipRes = new QCameraFocusZoneList(sipCpp->focusZones());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QCameraFocusZone,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_focusZones, doc_QCameraFocus_focusZones);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_maximumOpticalZoom, "QCameraFocus.maximumOpticalZoom() -> float");

extern "C" {static PyObject *meth_QCameraFocus_maximumOpticalZoom(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_maximumOpticalZoom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraFocus, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->maximumOpticalZoom();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_maximumOpticalZoom, doc_QCameraFocus_maximumOpticalZoom);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_maximumDigitalZoom, "QCameraFocus.maximumDigitalZoom() -> float");

extern "C" {static PyObject *meth_QCameraFocus_maximumDigitalZoom(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_maximumDigitalZoom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraFocus, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->maximumDigitalZoom();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_maximumDigitalZoom, doc_QCameraFocus_maximumDigitalZoom);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_opticalZoom, "QCameraFocus.opticalZoom() -> float");

extern "C" {static PyObject *meth_QCameraFocus_opticalZoom(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_opticalZoom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraFocus, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->opticalZoom();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_opticalZoom, doc_QCameraFocus_opticalZoom);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_digitalZoom, "QCameraFocus.digitalZoom() -> float");

extern "C" {static PyObject *meth_QCameraFocus_digitalZoom(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_digitalZoom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraFocus, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->digitalZoom();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_digitalZoom, doc_QCameraFocus_digitalZoom);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraFocus_zoomTo, "QCameraFocus.zoomTo(float, float)");

extern "C" {static PyObject *meth_QCameraFocus_zoomTo(PyObject *, PyObject *);}
static PyObject *meth_QCameraFocus_zoomTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QCameraFocus *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QCameraFocus, &sipCpp, &a0, &a1))
        {
            sipCpp->zoomTo(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraFocus, sipName_zoomTo, doc_QCameraFocus_zoomTo);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QCameraFocus(void *, const sipTypeDef *);}
static void *cast_QCameraFocus(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QCameraFocus)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QCameraFocus *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCameraFocus(void *, int);}
static void release_QCameraFocus(void *,int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCameraFocus[] = {{162, 0, 1}};


static PyMethodDef methods_QCameraFocus[] = {
    {SIP_MLNAME_CAST(sipName_customFocusPoint), meth_QCameraFocus_customFocusPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_customFocusPoint)},
    {SIP_MLNAME_CAST(sipName_digitalZoom), meth_QCameraFocus_digitalZoom, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_digitalZoom)},
    {SIP_MLNAME_CAST(sipName_focusMode), meth_QCameraFocus_focusMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_focusMode)},
    {SIP_MLNAME_CAST(sipName_focusPointMode), meth_QCameraFocus_focusPointMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_focusPointMode)},
    {SIP_MLNAME_CAST(sipName_focusZones), meth_QCameraFocus_focusZones, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_focusZones)},
    {SIP_MLNAME_CAST(sipName_isAvailable), meth_QCameraFocus_isAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_isAvailable)},
    {SIP_MLNAME_CAST(sipName_isFocusModeSupported), meth_QCameraFocus_isFocusModeSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_isFocusModeSupported)},
    {SIP_MLNAME_CAST(sipName_isFocusPointModeSupported), meth_QCameraFocus_isFocusPointModeSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_isFocusPointModeSupported)},
    {SIP_MLNAME_CAST(sipName_maximumDigitalZoom), meth_QCameraFocus_maximumDigitalZoom, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_maximumDigitalZoom)},
    {SIP_MLNAME_CAST(sipName_maximumOpticalZoom), meth_QCameraFocus_maximumOpticalZoom, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_maximumOpticalZoom)},
    {SIP_MLNAME_CAST(sipName_opticalZoom), meth_QCameraFocus_opticalZoom, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_opticalZoom)},
    {SIP_MLNAME_CAST(sipName_setCustomFocusPoint), meth_QCameraFocus_setCustomFocusPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_setCustomFocusPoint)},
    {SIP_MLNAME_CAST(sipName_setFocusMode), meth_QCameraFocus_setFocusMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_setFocusMode)},
    {SIP_MLNAME_CAST(sipName_setFocusPointMode), meth_QCameraFocus_setFocusPointMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_setFocusPointMode)},
    {SIP_MLNAME_CAST(sipName_zoomTo), meth_QCameraFocus_zoomTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraFocus_zoomTo)}
};

static sipEnumMemberDef enummembers_QCameraFocus[] = {
    {sipName_AutoFocus, static_cast<int>(QCameraFocus::AutoFocus), 39},
    {sipName_ContinuousFocus, static_cast<int>(QCameraFocus::ContinuousFocus), 39},
    {sipName_FocusPointAuto, static_cast<int>(QCameraFocus::FocusPointAuto), 41},
    {sipName_FocusPointCenter, static_cast<int>(QCameraFocus::FocusPointCenter), 41},
    {sipName_FocusPointCustom, static_cast<int>(QCameraFocus::FocusPointCustom), 41},
    {sipName_FocusPointFaceDetection, static_cast<int>(QCameraFocus::FocusPointFaceDetection), 41},
    {sipName_HyperfocalFocus, static_cast<int>(QCameraFocus::HyperfocalFocus), 39},
    {sipName_InfinityFocus, static_cast<int>(QCameraFocus::InfinityFocus), 39},
    {sipName_MacroFocus, static_cast<int>(QCameraFocus::MacroFocus), 39},
    {sipName_ManualFocus, static_cast<int>(QCameraFocus::ManualFocus), 39},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QCameraFocus[] = {
    {"maximumDigitalZoomChanged(qreal)", "\1QCameraFocus.maximumDigitalZoomChanged[float]", 0, 0},
    {"maximumOpticalZoomChanged(qreal)", "\1QCameraFocus.maximumOpticalZoomChanged[float]", 0, 0},
    {"focusZonesChanged()", "\1QCameraFocus.focusZonesChanged", 0, 0},
    {"digitalZoomChanged(qreal)", "\1QCameraFocus.digitalZoomChanged[float]", 0, 0},
    {"opticalZoomChanged(qreal)", "\1QCameraFocus.opticalZoomChanged[float]", 0, 0},
    {0, 0, 0, 0}
};


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QCameraFocus = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QCameraFocus,
        {0}
    },
    {
        sipNameNr_QCameraFocus,
        {0, 0, 1},
        15, methods_QCameraFocus,
        10, enummembers_QCameraFocus,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QCameraFocus,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QCameraFocus,
    cast_QCameraFocus,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QCameraFocus::staticMetaObject,
    0,
    signals_QCameraFocus,
    0
};
