/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:31 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcameraexposure.sip"
#include <qcameraexposure.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcamera.sip"
#include <qcamera.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qcameraexposure.sip"
#include <qcameraexposure.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 731 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 629 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQCameraExposure.cpp"


PyDoc_STRVAR(doc_QCameraExposure_isAvailable, "QCameraExposure.isAvailable() -> bool");

extern "C" {static PyObject *meth_QCameraExposure_isAvailable(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_isAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_isAvailable, doc_QCameraExposure_isAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_flashMode, "QCameraExposure.flashMode() -> QCameraExposure.FlashModes");

extern "C" {static PyObject *meth_QCameraExposure_flashMode(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_flashMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            QCameraExposure::FlashModes*sipRes;

            sipRes = new QCameraExposure::FlashModes(sipCpp->flashMode());

            return sipConvertFromNewType(sipRes,sipType_QCameraExposure_FlashModes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_flashMode, doc_QCameraExposure_flashMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_isFlashModeSupported, "QCameraExposure.isFlashModeSupported(QCameraExposure.FlashModes) -> bool");

extern "C" {static PyObject *meth_QCameraExposure_isFlashModeSupported(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_isFlashModeSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraExposure::FlashModes* a0;
        int a0State = 0;
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCameraExposure, &sipCpp, sipType_QCameraExposure_FlashModes, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->isFlashModeSupported(*a0);
            sipReleaseType(a0,sipType_QCameraExposure_FlashModes,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_isFlashModeSupported, doc_QCameraExposure_isFlashModeSupported);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_isFlashReady, "QCameraExposure.isFlashReady() -> bool");

extern "C" {static PyObject *meth_QCameraExposure_isFlashReady(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_isFlashReady(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFlashReady();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_isFlashReady, doc_QCameraExposure_isFlashReady);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_exposureMode, "QCameraExposure.exposureMode() -> QCameraExposure.ExposureMode");

extern "C" {static PyObject *meth_QCameraExposure_exposureMode(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_exposureMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            QCameraExposure::ExposureMode sipRes;

            sipRes = sipCpp->exposureMode();

            return sipConvertFromEnum(sipRes,sipType_QCameraExposure_ExposureMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_exposureMode, doc_QCameraExposure_exposureMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_isExposureModeSupported, "QCameraExposure.isExposureModeSupported(QCameraExposure.ExposureMode) -> bool");

extern "C" {static PyObject *meth_QCameraExposure_isExposureModeSupported(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_isExposureModeSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraExposure::ExposureMode a0;
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCameraExposure, &sipCpp, sipType_QCameraExposure_ExposureMode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isExposureModeSupported(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_isExposureModeSupported, doc_QCameraExposure_isExposureModeSupported);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_exposureCompensation, "QCameraExposure.exposureCompensation() -> float");

extern "C" {static PyObject *meth_QCameraExposure_exposureCompensation(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_exposureCompensation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->exposureCompensation();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_exposureCompensation, doc_QCameraExposure_exposureCompensation);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_meteringMode, "QCameraExposure.meteringMode() -> QCameraExposure.MeteringMode");

extern "C" {static PyObject *meth_QCameraExposure_meteringMode(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_meteringMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            QCameraExposure::MeteringMode sipRes;

            sipRes = sipCpp->meteringMode();

            return sipConvertFromEnum(sipRes,sipType_QCameraExposure_MeteringMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_meteringMode, doc_QCameraExposure_meteringMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_isMeteringModeSupported, "QCameraExposure.isMeteringModeSupported(QCameraExposure.MeteringMode) -> bool");

extern "C" {static PyObject *meth_QCameraExposure_isMeteringModeSupported(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_isMeteringModeSupported(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraExposure::MeteringMode a0;
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCameraExposure, &sipCpp, sipType_QCameraExposure_MeteringMode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isMeteringModeSupported(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_isMeteringModeSupported, doc_QCameraExposure_isMeteringModeSupported);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_spotMeteringPoint, "QCameraExposure.spotMeteringPoint() -> QPointF");

extern "C" {static PyObject *meth_QCameraExposure_spotMeteringPoint(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_spotMeteringPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->spotMeteringPoint());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_spotMeteringPoint, doc_QCameraExposure_spotMeteringPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_setSpotMeteringPoint, "QCameraExposure.setSpotMeteringPoint(QPointF)");

extern "C" {static PyObject *meth_QCameraExposure_setSpotMeteringPoint(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_setSpotMeteringPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCameraExposure, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->setSpotMeteringPoint(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_setSpotMeteringPoint, doc_QCameraExposure_setSpotMeteringPoint);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_isoSensitivity, "QCameraExposure.isoSensitivity() -> int");

extern "C" {static PyObject *meth_QCameraExposure_isoSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_isoSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->isoSensitivity();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_isoSensitivity, doc_QCameraExposure_isoSensitivity);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_aperture, "QCameraExposure.aperture() -> float");

extern "C" {static PyObject *meth_QCameraExposure_aperture(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_aperture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->aperture();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_aperture, doc_QCameraExposure_aperture);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_shutterSpeed, "QCameraExposure.shutterSpeed() -> float");

extern "C" {static PyObject *meth_QCameraExposure_shutterSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_shutterSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->shutterSpeed();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_shutterSpeed, doc_QCameraExposure_shutterSpeed);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_requestedIsoSensitivity, "QCameraExposure.requestedIsoSensitivity() -> int");

extern "C" {static PyObject *meth_QCameraExposure_requestedIsoSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_requestedIsoSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->requestedIsoSensitivity();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_requestedIsoSensitivity, doc_QCameraExposure_requestedIsoSensitivity);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_requestedAperture, "QCameraExposure.requestedAperture() -> float");

extern "C" {static PyObject *meth_QCameraExposure_requestedAperture(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_requestedAperture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->requestedAperture();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_requestedAperture, doc_QCameraExposure_requestedAperture);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_requestedShutterSpeed, "QCameraExposure.requestedShutterSpeed() -> float");

extern "C" {static PyObject *meth_QCameraExposure_requestedShutterSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_requestedShutterSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->requestedShutterSpeed();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_requestedShutterSpeed, doc_QCameraExposure_requestedShutterSpeed);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_supportedIsoSensitivities, "QCameraExposure.supportedIsoSensitivities() -> (list-of-int, bool)");

extern "C" {static PyObject *meth_QCameraExposure_supportedIsoSensitivities(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_supportedIsoSensitivities(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        const QCameraExposure *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            QList<int>*sipRes;

            sipRes = new QList<int>(sipCpp->supportedIsoSensitivities(&a0));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QList_1800,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_supportedIsoSensitivities, doc_QCameraExposure_supportedIsoSensitivities);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_supportedApertures, "QCameraExposure.supportedApertures() -> (list-of-float, bool)");

extern "C" {static PyObject *meth_QCameraExposure_supportedApertures(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_supportedApertures(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        const QCameraExposure *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            QList<qreal>*sipRes;

            sipRes = new QList<qreal>(sipCpp->supportedApertures(&a0));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QList_2400,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_supportedApertures, doc_QCameraExposure_supportedApertures);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_supportedShutterSpeeds, "QCameraExposure.supportedShutterSpeeds() -> (list-of-float, bool)");

extern "C" {static PyObject *meth_QCameraExposure_supportedShutterSpeeds(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_supportedShutterSpeeds(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        const QCameraExposure *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            QList<qreal>*sipRes;

            sipRes = new QList<qreal>(sipCpp->supportedShutterSpeeds(&a0));

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QList_2400,NULL);
            return sipBuildResult(0,"(Rb)",sipResObj,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_supportedShutterSpeeds, doc_QCameraExposure_supportedShutterSpeeds);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_setFlashMode, "QCameraExposure.setFlashMode(QCameraExposure.FlashModes)");

extern "C" {static PyObject *meth_QCameraExposure_setFlashMode(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_setFlashMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraExposure::FlashModes* a0;
        int a0State = 0;
        QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QCameraExposure, &sipCpp, sipType_QCameraExposure_FlashModes, &a0, &a0State))
        {
            sipCpp->setFlashMode(*a0);
            sipReleaseType(a0,sipType_QCameraExposure_FlashModes,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_setFlashMode, doc_QCameraExposure_setFlashMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_setExposureMode, "QCameraExposure.setExposureMode(QCameraExposure.ExposureMode)");

extern "C" {static PyObject *meth_QCameraExposure_setExposureMode(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_setExposureMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraExposure::ExposureMode a0;
        QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCameraExposure, &sipCpp, sipType_QCameraExposure_ExposureMode, &a0))
        {
            sipCpp->setExposureMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_setExposureMode, doc_QCameraExposure_setExposureMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_setMeteringMode, "QCameraExposure.setMeteringMode(QCameraExposure.MeteringMode)");

extern "C" {static PyObject *meth_QCameraExposure_setMeteringMode(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_setMeteringMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraExposure::MeteringMode a0;
        QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QCameraExposure, &sipCpp, sipType_QCameraExposure_MeteringMode, &a0))
        {
            sipCpp->setMeteringMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_setMeteringMode, doc_QCameraExposure_setMeteringMode);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_setExposureCompensation, "QCameraExposure.setExposureCompensation(float)");

extern "C" {static PyObject *meth_QCameraExposure_setExposureCompensation(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_setExposureCompensation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCameraExposure, &sipCpp, &a0))
        {
            sipCpp->setExposureCompensation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_setExposureCompensation, doc_QCameraExposure_setExposureCompensation);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_setManualIsoSensitivity, "QCameraExposure.setManualIsoSensitivity(int)");

extern "C" {static PyObject *meth_QCameraExposure_setManualIsoSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_setManualIsoSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QCameraExposure, &sipCpp, &a0))
        {
            sipCpp->setManualIsoSensitivity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_setManualIsoSensitivity, doc_QCameraExposure_setManualIsoSensitivity);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_setAutoIsoSensitivity, "QCameraExposure.setAutoIsoSensitivity()");

extern "C" {static PyObject *meth_QCameraExposure_setAutoIsoSensitivity(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_setAutoIsoSensitivity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            sipCpp->setAutoIsoSensitivity();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_setAutoIsoSensitivity, doc_QCameraExposure_setAutoIsoSensitivity);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_setManualAperture, "QCameraExposure.setManualAperture(float)");

extern "C" {static PyObject *meth_QCameraExposure_setManualAperture(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_setManualAperture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCameraExposure, &sipCpp, &a0))
        {
            sipCpp->setManualAperture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_setManualAperture, doc_QCameraExposure_setManualAperture);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_setAutoAperture, "QCameraExposure.setAutoAperture()");

extern "C" {static PyObject *meth_QCameraExposure_setAutoAperture(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_setAutoAperture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            sipCpp->setAutoAperture();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_setAutoAperture, doc_QCameraExposure_setAutoAperture);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_setManualShutterSpeed, "QCameraExposure.setManualShutterSpeed(float)");

extern "C" {static PyObject *meth_QCameraExposure_setManualShutterSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_setManualShutterSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QCameraExposure, &sipCpp, &a0))
        {
            sipCpp->setManualShutterSpeed(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_setManualShutterSpeed, doc_QCameraExposure_setManualShutterSpeed);

    return NULL;
}


PyDoc_STRVAR(doc_QCameraExposure_setAutoShutterSpeed, "QCameraExposure.setAutoShutterSpeed()");

extern "C" {static PyObject *meth_QCameraExposure_setAutoShutterSpeed(PyObject *, PyObject *);}
static PyObject *meth_QCameraExposure_setAutoShutterSpeed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCameraExposure *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QCameraExposure, &sipCpp))
        {
            sipCpp->setAutoShutterSpeed();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCameraExposure, sipName_setAutoShutterSpeed, doc_QCameraExposure_setAutoShutterSpeed);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QCameraExposure(void *, const sipTypeDef *);}
static void *cast_QCameraExposure(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QCameraExposure)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QCameraExposure *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCameraExposure(void *, int);}
static void release_QCameraExposure(void *,int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCameraExposure[] = {{162, 0, 1}};


static PyMethodDef methods_QCameraExposure[] = {
    {SIP_MLNAME_CAST(sipName_aperture), meth_QCameraExposure_aperture, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_aperture)},
    {SIP_MLNAME_CAST(sipName_exposureCompensation), meth_QCameraExposure_exposureCompensation, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_exposureCompensation)},
    {SIP_MLNAME_CAST(sipName_exposureMode), meth_QCameraExposure_exposureMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_exposureMode)},
    {SIP_MLNAME_CAST(sipName_flashMode), meth_QCameraExposure_flashMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_flashMode)},
    {SIP_MLNAME_CAST(sipName_isAvailable), meth_QCameraExposure_isAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_isAvailable)},
    {SIP_MLNAME_CAST(sipName_isExposureModeSupported), meth_QCameraExposure_isExposureModeSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_isExposureModeSupported)},
    {SIP_MLNAME_CAST(sipName_isFlashModeSupported), meth_QCameraExposure_isFlashModeSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_isFlashModeSupported)},
    {SIP_MLNAME_CAST(sipName_isFlashReady), meth_QCameraExposure_isFlashReady, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_isFlashReady)},
    {SIP_MLNAME_CAST(sipName_isMeteringModeSupported), meth_QCameraExposure_isMeteringModeSupported, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_isMeteringModeSupported)},
    {SIP_MLNAME_CAST(sipName_isoSensitivity), meth_QCameraExposure_isoSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_isoSensitivity)},
    {SIP_MLNAME_CAST(sipName_meteringMode), meth_QCameraExposure_meteringMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_meteringMode)},
    {SIP_MLNAME_CAST(sipName_requestedAperture), meth_QCameraExposure_requestedAperture, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_requestedAperture)},
    {SIP_MLNAME_CAST(sipName_requestedIsoSensitivity), meth_QCameraExposure_requestedIsoSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_requestedIsoSensitivity)},
    {SIP_MLNAME_CAST(sipName_requestedShutterSpeed), meth_QCameraExposure_requestedShutterSpeed, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_requestedShutterSpeed)},
    {SIP_MLNAME_CAST(sipName_setAutoAperture), meth_QCameraExposure_setAutoAperture, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_setAutoAperture)},
    {SIP_MLNAME_CAST(sipName_setAutoIsoSensitivity), meth_QCameraExposure_setAutoIsoSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_setAutoIsoSensitivity)},
    {SIP_MLNAME_CAST(sipName_setAutoShutterSpeed), meth_QCameraExposure_setAutoShutterSpeed, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_setAutoShutterSpeed)},
    {SIP_MLNAME_CAST(sipName_setExposureCompensation), meth_QCameraExposure_setExposureCompensation, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_setExposureCompensation)},
    {SIP_MLNAME_CAST(sipName_setExposureMode), meth_QCameraExposure_setExposureMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_setExposureMode)},
    {SIP_MLNAME_CAST(sipName_setFlashMode), meth_QCameraExposure_setFlashMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_setFlashMode)},
    {SIP_MLNAME_CAST(sipName_setManualAperture), meth_QCameraExposure_setManualAperture, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_setManualAperture)},
    {SIP_MLNAME_CAST(sipName_setManualIsoSensitivity), meth_QCameraExposure_setManualIsoSensitivity, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_setManualIsoSensitivity)},
    {SIP_MLNAME_CAST(sipName_setManualShutterSpeed), meth_QCameraExposure_setManualShutterSpeed, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_setManualShutterSpeed)},
    {SIP_MLNAME_CAST(sipName_setMeteringMode), meth_QCameraExposure_setMeteringMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_setMeteringMode)},
    {SIP_MLNAME_CAST(sipName_setSpotMeteringPoint), meth_QCameraExposure_setSpotMeteringPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_setSpotMeteringPoint)},
    {SIP_MLNAME_CAST(sipName_shutterSpeed), meth_QCameraExposure_shutterSpeed, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_shutterSpeed)},
    {SIP_MLNAME_CAST(sipName_spotMeteringPoint), meth_QCameraExposure_spotMeteringPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_QCameraExposure_spotMeteringPoint)},
    {SIP_MLNAME_CAST(sipName_supportedApertures), (PyCFunction)meth_QCameraExposure_supportedApertures, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCameraExposure_supportedApertures)},
    {SIP_MLNAME_CAST(sipName_supportedIsoSensitivities), (PyCFunction)meth_QCameraExposure_supportedIsoSensitivities, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCameraExposure_supportedIsoSensitivities)},
    {SIP_MLNAME_CAST(sipName_supportedShutterSpeeds), (PyCFunction)meth_QCameraExposure_supportedShutterSpeeds, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCameraExposure_supportedShutterSpeeds)}
};

static sipEnumMemberDef enummembers_QCameraExposure[] = {
    {sipName_ExposureAuto, static_cast<int>(QCameraExposure::ExposureAuto), 34},
    {sipName_ExposureBacklight, static_cast<int>(QCameraExposure::ExposureBacklight), 34},
    {sipName_ExposureBeach, static_cast<int>(QCameraExposure::ExposureBeach), 34},
    {sipName_ExposureLargeAperture, static_cast<int>(QCameraExposure::ExposureLargeAperture), 34},
    {sipName_ExposureManual, static_cast<int>(QCameraExposure::ExposureManual), 34},
    {sipName_ExposureModeVendor, static_cast<int>(QCameraExposure::ExposureModeVendor), 34},
    {sipName_ExposureNight, static_cast<int>(QCameraExposure::ExposureNight), 34},
    {sipName_ExposurePortrait, static_cast<int>(QCameraExposure::ExposurePortrait), 34},
    {sipName_ExposureSmallAperture, static_cast<int>(QCameraExposure::ExposureSmallAperture), 34},
    {sipName_ExposureSnow, static_cast<int>(QCameraExposure::ExposureSnow), 34},
    {sipName_ExposureSports, static_cast<int>(QCameraExposure::ExposureSports), 34},
    {sipName_ExposureSpotlight, static_cast<int>(QCameraExposure::ExposureSpotlight), 34},
    {sipName_FlashAuto, static_cast<int>(QCameraExposure::FlashAuto), 35},
    {sipName_FlashFill, static_cast<int>(QCameraExposure::FlashFill), 35},
    {sipName_FlashManual, static_cast<int>(QCameraExposure::FlashManual), 35},
    {sipName_FlashOff, static_cast<int>(QCameraExposure::FlashOff), 35},
    {sipName_FlashOn, static_cast<int>(QCameraExposure::FlashOn), 35},
    {sipName_FlashRedEyeReduction, static_cast<int>(QCameraExposure::FlashRedEyeReduction), 35},
    {sipName_FlashSlowSyncFrontCurtain, static_cast<int>(QCameraExposure::FlashSlowSyncFrontCurtain), 35},
    {sipName_FlashSlowSyncRearCurtain, static_cast<int>(QCameraExposure::FlashSlowSyncRearCurtain), 35},
    {sipName_FlashTorch, static_cast<int>(QCameraExposure::FlashTorch), 35},
    {sipName_FlashVideoLight, static_cast<int>(QCameraExposure::FlashVideoLight), 35},
    {sipName_MeteringAverage, static_cast<int>(QCameraExposure::MeteringAverage), 37},
    {sipName_MeteringMatrix, static_cast<int>(QCameraExposure::MeteringMatrix), 37},
    {sipName_MeteringSpot, static_cast<int>(QCameraExposure::MeteringSpot), 37},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QCameraExposure[] = {
    {"exposureCompensationChanged(qreal)", "\1QCameraExposure.exposureCompensationChanged[float]", 0, 0},
    {"isoSensitivityChanged(int)", "\1QCameraExposure.isoSensitivityChanged[int]", 0, 0},
    {"shutterSpeedRangeChanged()", "\1QCameraExposure.shutterSpeedRangeChanged", 0, 0},
    {"shutterSpeedChanged(qreal)", "\1QCameraExposure.shutterSpeedChanged[float]", 0, 0},
    {"apertureRangeChanged()", "\1QCameraExposure.apertureRangeChanged", 0, 0},
    {"apertureChanged(qreal)", "\1QCameraExposure.apertureChanged[float]", 0, 0},
    {"flashReady(bool)", "\1QCameraExposure.flashReady[bool]", 0, 0},
    {0, 0, 0, 0}
};


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QCameraExposure = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QCameraExposure,
        {0}
    },
    {
        sipNameNr_QCameraExposure,
        {0, 0, 1},
        30, methods_QCameraExposure,
        25, enummembers_QCameraExposure,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QCameraExposure,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QCameraExposure,
    cast_QCameraExposure,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QCameraExposure::staticMetaObject,
    0,
    signals_QCameraExposure,
    0
};
