/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:31 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediacontent.sip"
#include <qmediacontent.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaContent.cpp"

#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaContent.cpp"
#line 26 "sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaContent.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediaresource.sip"
#include <qmediaresource.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaContent.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaContent.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediaplaylist.sip"
#include <qmediaplaylist.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaContent.cpp"


PyDoc_STRVAR(doc_QMediaContent_isNull, "QMediaContent.isNull() -> bool");

extern "C" {static PyObject *meth_QMediaContent_isNull(PyObject *, PyObject *);}
static PyObject *meth_QMediaContent_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaContent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaContent, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaContent, sipName_isNull, doc_QMediaContent_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaContent_canonicalUrl, "QMediaContent.canonicalUrl() -> QUrl");

extern "C" {static PyObject *meth_QMediaContent_canonicalUrl(PyObject *, PyObject *);}
static PyObject *meth_QMediaContent_canonicalUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaContent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaContent, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->canonicalUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaContent, sipName_canonicalUrl, doc_QMediaContent_canonicalUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaContent_canonicalRequest, "QMediaContent.canonicalRequest() -> QNetworkRequest");

extern "C" {static PyObject *meth_QMediaContent_canonicalRequest(PyObject *, PyObject *);}
static PyObject *meth_QMediaContent_canonicalRequest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaContent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaContent, &sipCpp))
        {
            QNetworkRequest*sipRes;

            sipRes = new QNetworkRequest(sipCpp->canonicalRequest());

            return sipConvertFromNewType(sipRes,sipType_QNetworkRequest,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaContent, sipName_canonicalRequest, doc_QMediaContent_canonicalRequest);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaContent_canonicalResource, "QMediaContent.canonicalResource() -> QMediaResource");

extern "C" {static PyObject *meth_QMediaContent_canonicalResource(PyObject *, PyObject *);}
static PyObject *meth_QMediaContent_canonicalResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaContent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaContent, &sipCpp))
        {
            QMediaResource*sipRes;

            sipRes = new QMediaResource(sipCpp->canonicalResource());

            return sipConvertFromNewType(sipRes,sipType_QMediaResource,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaContent, sipName_canonicalResource, doc_QMediaContent_canonicalResource);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaContent_resources, "QMediaContent.resources() -> list-of-QMediaResource");

extern "C" {static PyObject *meth_QMediaContent_resources(PyObject *, PyObject *);}
static PyObject *meth_QMediaContent_resources(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaContent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaContent, &sipCpp))
        {
            QMediaResourceList*sipRes;

            sipRes = new QMediaResourceList(sipCpp->resources());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QMediaResource,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaContent, sipName_resources, doc_QMediaContent_resources);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaContent_playlist, "QMediaContent.playlist() -> QMediaPlaylist");

extern "C" {static PyObject *meth_QMediaContent_playlist(PyObject *, PyObject *);}
static PyObject *meth_QMediaContent_playlist(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaContent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaContent, &sipCpp))
        {
            QMediaPlaylist*sipRes;

            sipRes = sipCpp->playlist();

            return sipConvertFromType(sipRes,sipType_QMediaPlaylist,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaContent, sipName_playlist, doc_QMediaContent_playlist);

    return NULL;
}


extern "C" {static PyObject *slot_QMediaContent___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMediaContent___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QMediaContent *sipCpp = reinterpret_cast<QMediaContent *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMediaContent));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMediaContent* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMediaContent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QMediaContent::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtMultimedia,ne_slot,sipType_QMediaContent,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QMediaContent___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMediaContent___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QMediaContent *sipCpp = reinterpret_cast<QMediaContent *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMediaContent));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMediaContent* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMediaContent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QMediaContent::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtMultimedia,eq_slot,sipType_QMediaContent,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMediaContent(void *, const sipTypeDef *);}
static void *cast_QMediaContent(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QMediaContent)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMediaContent(void *, int);}
static void release_QMediaContent(void *sipCppV,int)
{
    delete reinterpret_cast<QMediaContent *>(sipCppV);
}


extern "C" {static void assign_QMediaContent(void *, SIP_SSIZE_T, const void *);}
static void assign_QMediaContent(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QMediaContent *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QMediaContent *>(sipSrc);
}


extern "C" {static void *array_QMediaContent(SIP_SSIZE_T);}
static void *array_QMediaContent(SIP_SSIZE_T sipNrElem)
{
    return new QMediaContent[sipNrElem];
}


extern "C" {static void *copy_QMediaContent(const void *, SIP_SSIZE_T);}
static void *copy_QMediaContent(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QMediaContent(reinterpret_cast<const QMediaContent *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMediaContent(sipSimpleWrapper *);}
static void dealloc_QMediaContent(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QMediaContent(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QMediaContent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMediaContent(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QMediaContent *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QMediaContent();

            return sipCpp;
        }
    }

    {
        const QUrl* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QUrl, &a0))
        {
            sipCpp = new QMediaContent(*a0);

            return sipCpp;
        }
    }

    {
        const QNetworkRequest* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QNetworkRequest, &a0))
        {
            sipCpp = new QMediaContent(*a0);

            return sipCpp;
        }
    }

    {
        const QMediaResource* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QMediaResource, &a0))
        {
            sipCpp = new QMediaContent(*a0);

            return sipCpp;
        }
    }

    {
        const QMediaResourceList* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QList_0100QMediaResource,&a0, &a0State))
        {
            sipCpp = new QMediaContent(*a0);
            sipReleaseType(const_cast<QMediaResourceList *>(a0),sipType_QList_0100QMediaResource,a0State);

            return sipCpp;
        }
    }

    {
        const QMediaContent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QMediaContent, &a0))
        {
            sipCpp = new QMediaContent(*a0);

            return sipCpp;
        }
    }

    {
        QMediaPlaylist* a0;
        const QUrl& a1def = QUrl();
        const QUrl* a1 = &a1def;

        static const char *sipKwdList[] = {
            NULL,
            sipName_contentUrl,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|J9", sipType_QMediaPlaylist, &a0, sipType_QUrl, &a1))
        {
            sipCpp = new QMediaContent(a0,*a1);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMediaContent[] = {
    {(void *)slot_QMediaContent___ne__, ne_slot},
    {(void *)slot_QMediaContent___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMediaContent[] = {
    {SIP_MLNAME_CAST(sipName_canonicalRequest), meth_QMediaContent_canonicalRequest, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaContent_canonicalRequest)},
    {SIP_MLNAME_CAST(sipName_canonicalResource), meth_QMediaContent_canonicalResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaContent_canonicalResource)},
    {SIP_MLNAME_CAST(sipName_canonicalUrl), meth_QMediaContent_canonicalUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaContent_canonicalUrl)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QMediaContent_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaContent_isNull)},
    {SIP_MLNAME_CAST(sipName_playlist), meth_QMediaContent_playlist, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaContent_playlist)},
    {SIP_MLNAME_CAST(sipName_resources), meth_QMediaContent_resources, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaContent_resources)}
};

PyDoc_STRVAR(doc_QMediaContent, "\1QMediaContent()\n"
    "QMediaContent(QUrl)\n"
    "QMediaContent(QNetworkRequest)\n"
    "QMediaContent(QMediaResource)\n"
    "QMediaContent(list-of-QMediaResource)\n"
    "QMediaContent(QMediaContent)\n"
    "QMediaContent(QMediaPlaylist, QUrl contentUrl=QUrl())");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QMediaContent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMediaContent,
        {0}
    },
    {
        sipNameNr_QMediaContent,
        {0, 0, 1},
        6, methods_QMediaContent,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMediaContent,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QMediaContent,
    init_type_QMediaContent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMediaContent,
    assign_QMediaContent,
    array_QMediaContent,
    copy_QMediaContent,
    release_QMediaContent,
    cast_QMediaContent,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
