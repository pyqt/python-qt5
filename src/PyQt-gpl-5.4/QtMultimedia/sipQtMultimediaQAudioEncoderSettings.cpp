/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:31 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediaencodersettings.sip"
#include <qmediaencodersettings.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQAudioEncoderSettings.cpp"

#line 26 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQAudioEncoderSettings.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQAudioEncoderSettings.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQAudioEncoderSettings.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmultimedia.sip"
#include <qmultimedia.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQAudioEncoderSettings.cpp"


PyDoc_STRVAR(doc_QAudioEncoderSettings_isNull, "QAudioEncoderSettings.isNull() -> bool");

extern "C" {static PyObject *meth_QAudioEncoderSettings_isNull(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_isNull, doc_QAudioEncoderSettings_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_encodingMode, "QAudioEncoderSettings.encodingMode() -> QMultimedia.EncodingMode");

extern "C" {static PyObject *meth_QAudioEncoderSettings_encodingMode(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_encodingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp))
        {
            QMultimedia::EncodingMode sipRes;

            sipRes = sipCpp->encodingMode();

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_EncodingMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_encodingMode, doc_QAudioEncoderSettings_encodingMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_setEncodingMode, "QAudioEncoderSettings.setEncodingMode(QMultimedia.EncodingMode)");

extern "C" {static PyObject *meth_QAudioEncoderSettings_setEncodingMode(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_setEncodingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMultimedia::EncodingMode a0;
        QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp, sipType_QMultimedia_EncodingMode, &a0))
        {
            sipCpp->setEncodingMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_setEncodingMode, doc_QAudioEncoderSettings_setEncodingMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_codec, "QAudioEncoderSettings.codec() -> str");

extern "C" {static PyObject *meth_QAudioEncoderSettings_codec(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_codec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->codec());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_codec, doc_QAudioEncoderSettings_codec);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_setCodec, "QAudioEncoderSettings.setCodec(str)");

extern "C" {static PyObject *meth_QAudioEncoderSettings_setCodec(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_setCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCodec(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_setCodec, doc_QAudioEncoderSettings_setCodec);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_bitRate, "QAudioEncoderSettings.bitRate() -> int");

extern "C" {static PyObject *meth_QAudioEncoderSettings_bitRate(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_bitRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bitRate();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_bitRate, doc_QAudioEncoderSettings_bitRate);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_setBitRate, "QAudioEncoderSettings.setBitRate(int)");

extern "C" {static PyObject *meth_QAudioEncoderSettings_setBitRate(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_setBitRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp, &a0))
        {
            sipCpp->setBitRate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_setBitRate, doc_QAudioEncoderSettings_setBitRate);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_channelCount, "QAudioEncoderSettings.channelCount() -> int");

extern "C" {static PyObject *meth_QAudioEncoderSettings_channelCount(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_channelCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->channelCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_channelCount, doc_QAudioEncoderSettings_channelCount);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_setChannelCount, "QAudioEncoderSettings.setChannelCount(int)");

extern "C" {static PyObject *meth_QAudioEncoderSettings_setChannelCount(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_setChannelCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp, &a0))
        {
            sipCpp->setChannelCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_setChannelCount, doc_QAudioEncoderSettings_setChannelCount);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_sampleRate, "QAudioEncoderSettings.sampleRate() -> int");

extern "C" {static PyObject *meth_QAudioEncoderSettings_sampleRate(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_sampleRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sampleRate();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_sampleRate, doc_QAudioEncoderSettings_sampleRate);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_setSampleRate, "QAudioEncoderSettings.setSampleRate(int)");

extern "C" {static PyObject *meth_QAudioEncoderSettings_setSampleRate(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_setSampleRate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp, &a0))
        {
            sipCpp->setSampleRate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_setSampleRate, doc_QAudioEncoderSettings_setSampleRate);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_quality, "QAudioEncoderSettings.quality() -> QMultimedia.EncodingQuality");

extern "C" {static PyObject *meth_QAudioEncoderSettings_quality(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_quality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp))
        {
            QMultimedia::EncodingQuality sipRes;

            sipRes = sipCpp->quality();

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_EncodingQuality);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_quality, doc_QAudioEncoderSettings_quality);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_setQuality, "QAudioEncoderSettings.setQuality(QMultimedia.EncodingQuality)");

extern "C" {static PyObject *meth_QAudioEncoderSettings_setQuality(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_setQuality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMultimedia::EncodingQuality a0;
        QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp, sipType_QMultimedia_EncodingQuality, &a0))
        {
            sipCpp->setQuality(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_setQuality, doc_QAudioEncoderSettings_setQuality);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_encodingOption, "QAudioEncoderSettings.encodingOption(str) -> QVariant");

extern "C" {static PyObject *meth_QAudioEncoderSettings_encodingOption(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_encodingOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->encodingOption(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_encodingOption, doc_QAudioEncoderSettings_encodingOption);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_encodingOptions, "QAudioEncoderSettings.encodingOptions() -> dict-of-str-object");

extern "C" {static PyObject *meth_QAudioEncoderSettings_encodingOptions(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_encodingOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp))
        {
            QVariantMap*sipRes;

            sipRes = new QVariantMap(sipCpp->encodingOptions());

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_encodingOptions, doc_QAudioEncoderSettings_encodingOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_setEncodingOption, "QAudioEncoderSettings.setEncodingOption(str, QVariant)");

extern "C" {static PyObject *meth_QAudioEncoderSettings_setEncodingOption(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_setEncodingOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QVariant* a1;
        int a1State = 0;
        QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setEncodingOption(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_setEncodingOption, doc_QAudioEncoderSettings_setEncodingOption);

    return NULL;
}


PyDoc_STRVAR(doc_QAudioEncoderSettings_setEncodingOptions, "QAudioEncoderSettings.setEncodingOptions(dict-of-str-object)");

extern "C" {static PyObject *meth_QAudioEncoderSettings_setEncodingOptions(PyObject *, PyObject *);}
static PyObject *meth_QAudioEncoderSettings_setEncodingOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariantMap* a0;
        int a0State = 0;
        QAudioEncoderSettings *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAudioEncoderSettings, &sipCpp, sipType_QMap_0100QString_0100QVariant,&a0, &a0State))
        {
            sipCpp->setEncodingOptions(*a0);
            sipReleaseType(const_cast<QVariantMap *>(a0),sipType_QMap_0100QString_0100QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAudioEncoderSettings, sipName_setEncodingOptions, doc_QAudioEncoderSettings_setEncodingOptions);

    return NULL;
}


extern "C" {static PyObject *slot_QAudioEncoderSettings___ne__(PyObject *,PyObject *);}
static PyObject *slot_QAudioEncoderSettings___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QAudioEncoderSettings *sipCpp = reinterpret_cast<QAudioEncoderSettings *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAudioEncoderSettings));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QAudioEncoderSettings, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QAudioEncoderSettings::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtMultimedia,ne_slot,sipType_QAudioEncoderSettings,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QAudioEncoderSettings___eq__(PyObject *,PyObject *);}
static PyObject *slot_QAudioEncoderSettings___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QAudioEncoderSettings *sipCpp = reinterpret_cast<QAudioEncoderSettings *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QAudioEncoderSettings));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QAudioEncoderSettings* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QAudioEncoderSettings, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QAudioEncoderSettings::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtMultimedia,eq_slot,sipType_QAudioEncoderSettings,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAudioEncoderSettings(void *, const sipTypeDef *);}
static void *cast_QAudioEncoderSettings(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QAudioEncoderSettings)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAudioEncoderSettings(void *, int);}
static void release_QAudioEncoderSettings(void *sipCppV,int)
{
    delete reinterpret_cast<QAudioEncoderSettings *>(sipCppV);
}


extern "C" {static void assign_QAudioEncoderSettings(void *, SIP_SSIZE_T, const void *);}
static void assign_QAudioEncoderSettings(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QAudioEncoderSettings *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QAudioEncoderSettings *>(sipSrc);
}


extern "C" {static void *array_QAudioEncoderSettings(SIP_SSIZE_T);}
static void *array_QAudioEncoderSettings(SIP_SSIZE_T sipNrElem)
{
    return new QAudioEncoderSettings[sipNrElem];
}


extern "C" {static void *copy_QAudioEncoderSettings(const void *, SIP_SSIZE_T);}
static void *copy_QAudioEncoderSettings(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QAudioEncoderSettings(reinterpret_cast<const QAudioEncoderSettings *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QAudioEncoderSettings(sipSimpleWrapper *);}
static void dealloc_QAudioEncoderSettings(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QAudioEncoderSettings(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QAudioEncoderSettings(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAudioEncoderSettings(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QAudioEncoderSettings *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QAudioEncoderSettings();

            return sipCpp;
        }
    }

    {
        const QAudioEncoderSettings* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QAudioEncoderSettings, &a0))
        {
            sipCpp = new QAudioEncoderSettings(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QAudioEncoderSettings[] = {
    {(void *)slot_QAudioEncoderSettings___ne__, ne_slot},
    {(void *)slot_QAudioEncoderSettings___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QAudioEncoderSettings[] = {
    {SIP_MLNAME_CAST(sipName_bitRate), meth_QAudioEncoderSettings_bitRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_bitRate)},
    {SIP_MLNAME_CAST(sipName_channelCount), meth_QAudioEncoderSettings_channelCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_channelCount)},
    {SIP_MLNAME_CAST(sipName_codec), meth_QAudioEncoderSettings_codec, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_codec)},
    {SIP_MLNAME_CAST(sipName_encodingMode), meth_QAudioEncoderSettings_encodingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_encodingMode)},
    {SIP_MLNAME_CAST(sipName_encodingOption), meth_QAudioEncoderSettings_encodingOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_encodingOption)},
    {SIP_MLNAME_CAST(sipName_encodingOptions), meth_QAudioEncoderSettings_encodingOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_encodingOptions)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QAudioEncoderSettings_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_isNull)},
    {SIP_MLNAME_CAST(sipName_quality), meth_QAudioEncoderSettings_quality, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_quality)},
    {SIP_MLNAME_CAST(sipName_sampleRate), meth_QAudioEncoderSettings_sampleRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_sampleRate)},
    {SIP_MLNAME_CAST(sipName_setBitRate), meth_QAudioEncoderSettings_setBitRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_setBitRate)},
    {SIP_MLNAME_CAST(sipName_setChannelCount), meth_QAudioEncoderSettings_setChannelCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_setChannelCount)},
    {SIP_MLNAME_CAST(sipName_setCodec), meth_QAudioEncoderSettings_setCodec, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_setCodec)},
    {SIP_MLNAME_CAST(sipName_setEncodingMode), meth_QAudioEncoderSettings_setEncodingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_setEncodingMode)},
    {SIP_MLNAME_CAST(sipName_setEncodingOption), meth_QAudioEncoderSettings_setEncodingOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_setEncodingOption)},
    {SIP_MLNAME_CAST(sipName_setEncodingOptions), meth_QAudioEncoderSettings_setEncodingOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_setEncodingOptions)},
    {SIP_MLNAME_CAST(sipName_setQuality), meth_QAudioEncoderSettings_setQuality, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_setQuality)},
    {SIP_MLNAME_CAST(sipName_setSampleRate), meth_QAudioEncoderSettings_setSampleRate, METH_VARARGS, SIP_MLDOC_CAST(doc_QAudioEncoderSettings_setSampleRate)}
};

PyDoc_STRVAR(doc_QAudioEncoderSettings, "\1QAudioEncoderSettings()\n"
    "QAudioEncoderSettings(QAudioEncoderSettings)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QAudioEncoderSettings = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QAudioEncoderSettings,
        {0}
    },
    {
        sipNameNr_QAudioEncoderSettings,
        {0, 0, 1},
        17, methods_QAudioEncoderSettings,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAudioEncoderSettings,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QAudioEncoderSettings,
    init_type_QAudioEncoderSettings,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAudioEncoderSettings,
    assign_QAudioEncoderSettings,
    array_QAudioEncoderSettings,
    copy_QAudioEncoderSettings,
    release_QAudioEncoderSettings,
    cast_QAudioEncoderSettings,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
