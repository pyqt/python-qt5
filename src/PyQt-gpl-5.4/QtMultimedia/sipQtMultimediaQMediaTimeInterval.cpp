/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:31 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediatimerange.sip"
#include <qmediatimerange.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQMediaTimeInterval.cpp"



PyDoc_STRVAR(doc_QMediaTimeInterval_start, "QMediaTimeInterval.start() -> int");

extern "C" {static PyObject *meth_QMediaTimeInterval_start(PyObject *, PyObject *);}
static PyObject *meth_QMediaTimeInterval_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaTimeInterval *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaTimeInterval, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->start();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaTimeInterval, sipName_start, doc_QMediaTimeInterval_start);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaTimeInterval_end, "QMediaTimeInterval.end() -> int");

extern "C" {static PyObject *meth_QMediaTimeInterval_end(PyObject *, PyObject *);}
static PyObject *meth_QMediaTimeInterval_end(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaTimeInterval *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaTimeInterval, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->end();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaTimeInterval, sipName_end, doc_QMediaTimeInterval_end);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaTimeInterval_contains, "QMediaTimeInterval.contains(int) -> bool");

extern "C" {static PyObject *meth_QMediaTimeInterval_contains(PyObject *, PyObject *);}
static PyObject *meth_QMediaTimeInterval_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        const QMediaTimeInterval *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QMediaTimeInterval, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaTimeInterval, sipName_contains, doc_QMediaTimeInterval_contains);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaTimeInterval_isNormal, "QMediaTimeInterval.isNormal() -> bool");

extern "C" {static PyObject *meth_QMediaTimeInterval_isNormal(PyObject *, PyObject *);}
static PyObject *meth_QMediaTimeInterval_isNormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaTimeInterval *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaTimeInterval, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNormal();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaTimeInterval, sipName_isNormal, doc_QMediaTimeInterval_isNormal);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaTimeInterval_normalized, "QMediaTimeInterval.normalized() -> QMediaTimeInterval");

extern "C" {static PyObject *meth_QMediaTimeInterval_normalized(PyObject *, PyObject *);}
static PyObject *meth_QMediaTimeInterval_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMediaTimeInterval *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMediaTimeInterval, &sipCpp))
        {
            QMediaTimeInterval*sipRes;

            sipRes = new QMediaTimeInterval(sipCpp->normalized());

            return sipConvertFromNewType(sipRes,sipType_QMediaTimeInterval,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaTimeInterval, sipName_normalized, doc_QMediaTimeInterval_normalized);

    return NULL;
}


PyDoc_STRVAR(doc_QMediaTimeInterval_translated, "QMediaTimeInterval.translated(int) -> QMediaTimeInterval");

extern "C" {static PyObject *meth_QMediaTimeInterval_translated(PyObject *, PyObject *);}
static PyObject *meth_QMediaTimeInterval_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        const QMediaTimeInterval *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QMediaTimeInterval, &sipCpp, &a0))
        {
            QMediaTimeInterval*sipRes;

            sipRes = new QMediaTimeInterval(sipCpp->translated(a0));

            return sipConvertFromNewType(sipRes,sipType_QMediaTimeInterval,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMediaTimeInterval, sipName_translated, doc_QMediaTimeInterval_translated);

    return NULL;
}


extern "C" {static PyObject *slot_QMediaTimeInterval___eq__(PyObject *,PyObject *);}
static PyObject *slot_QMediaTimeInterval___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QMediaTimeInterval *sipCpp = reinterpret_cast<QMediaTimeInterval *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMediaTimeInterval));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMediaTimeInterval* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMediaTimeInterval, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtMultimedia,eq_slot,sipType_QMediaTimeInterval,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QMediaTimeInterval___ne__(PyObject *,PyObject *);}
static PyObject *slot_QMediaTimeInterval___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QMediaTimeInterval *sipCpp = reinterpret_cast<QMediaTimeInterval *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QMediaTimeInterval));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QMediaTimeInterval* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QMediaTimeInterval, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtMultimedia,ne_slot,sipType_QMediaTimeInterval,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMediaTimeInterval(void *, const sipTypeDef *);}
static void *cast_QMediaTimeInterval(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QMediaTimeInterval)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMediaTimeInterval(void *, int);}
static void release_QMediaTimeInterval(void *sipCppV,int)
{
    delete reinterpret_cast<QMediaTimeInterval *>(sipCppV);
}


extern "C" {static void assign_QMediaTimeInterval(void *, SIP_SSIZE_T, const void *);}
static void assign_QMediaTimeInterval(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QMediaTimeInterval *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QMediaTimeInterval *>(sipSrc);
}


extern "C" {static void *array_QMediaTimeInterval(SIP_SSIZE_T);}
static void *array_QMediaTimeInterval(SIP_SSIZE_T sipNrElem)
{
    return new QMediaTimeInterval[sipNrElem];
}


extern "C" {static void *copy_QMediaTimeInterval(const void *, SIP_SSIZE_T);}
static void *copy_QMediaTimeInterval(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QMediaTimeInterval(reinterpret_cast<const QMediaTimeInterval *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QMediaTimeInterval(sipSimpleWrapper *);}
static void dealloc_QMediaTimeInterval(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QMediaTimeInterval(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QMediaTimeInterval(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMediaTimeInterval(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QMediaTimeInterval *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QMediaTimeInterval();

            return sipCpp;
        }
    }

    {
        qint64 a0;
        qint64 a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "nn", &a0, &a1))
        {
            sipCpp = new QMediaTimeInterval(a0,a1);

            return sipCpp;
        }
    }

    {
        const QMediaTimeInterval* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QMediaTimeInterval, &a0))
        {
            sipCpp = new QMediaTimeInterval(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QMediaTimeInterval[] = {
    {(void *)slot_QMediaTimeInterval___eq__, eq_slot},
    {(void *)slot_QMediaTimeInterval___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QMediaTimeInterval[] = {
    {SIP_MLNAME_CAST(sipName_contains), meth_QMediaTimeInterval_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaTimeInterval_contains)},
    {SIP_MLNAME_CAST(sipName_end), meth_QMediaTimeInterval_end, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaTimeInterval_end)},
    {SIP_MLNAME_CAST(sipName_isNormal), meth_QMediaTimeInterval_isNormal, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaTimeInterval_isNormal)},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QMediaTimeInterval_normalized, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaTimeInterval_normalized)},
    {SIP_MLNAME_CAST(sipName_start), meth_QMediaTimeInterval_start, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaTimeInterval_start)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QMediaTimeInterval_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QMediaTimeInterval_translated)}
};

PyDoc_STRVAR(doc_QMediaTimeInterval, "\1QMediaTimeInterval()\n"
    "QMediaTimeInterval(int, int)\n"
    "QMediaTimeInterval(QMediaTimeInterval)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QMediaTimeInterval = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMediaTimeInterval,
        {0}
    },
    {
        sipNameNr_QMediaTimeInterval,
        {0, 0, 1},
        6, methods_QMediaTimeInterval,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMediaTimeInterval,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QMediaTimeInterval,
    init_type_QMediaTimeInterval,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMediaTimeInterval,
    assign_QMediaTimeInterval,
    array_QMediaTimeInterval,
    copy_QMediaTimeInterval,
    release_QMediaTimeInterval,
    cast_QMediaTimeInterval,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
