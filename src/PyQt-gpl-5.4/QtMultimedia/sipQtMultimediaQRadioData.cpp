/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:31 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtMultimedia.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qradiodata.sip"
#include <qradiodata.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmediaobject.sip"
#include <qmediaobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtMultimedia/qmultimedia.sip"
#include <qmultimedia.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"


class sipQRadioData : public QRadioData
{
public:
    sipQRadioData(QMediaObject*,QObject*);
    virtual ~sipQRadioData();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    bool sipProtectVirt_setMediaObject(bool,QMediaObject*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool setMediaObject(QMediaObject*);
    QMediaObject* mediaObject() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQRadioData(const sipQRadioData &);
    sipQRadioData &operator = (const sipQRadioData &);

    char sipPyMethods[9];
};

sipQRadioData::sipQRadioData(QMediaObject*a0,QObject*a1): QRadioData(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQRadioData::~sipQRadioData()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQRadioData::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtMultimedia_qt_metaobject(sipPySelf,sipType_QRadioData);
}

int sipQRadioData::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QRadioData::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtMultimedia_qt_metacall(sipPySelf,sipType_QRadioData,_c,_id,_a);

    return _id;
}

void *sipQRadioData::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtMultimedia_qt_metacast(sipPySelf, sipType_QRadioData, _clname, &sipCpp) ? sipCpp : QRadioData::qt_metacast(_clname));
}

void sipQRadioData::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QRadioData::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQRadioData::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QRadioData::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQRadioData::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QRadioData::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQRadioData::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QRadioData::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQRadioData::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QRadioData::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQRadioData::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QRadioData::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQRadioData::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QRadioData::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtMultimedia_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQRadioData::setMediaObject(QMediaObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setMediaObject);

    if (!sipMeth)
        return QRadioData::setMediaObject(a0);

    extern bool sipVH_QtMultimedia_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMediaObject*);

    return sipVH_QtMultimedia_1(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMediaObject* sipQRadioData::mediaObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_mediaObject);

    if (!sipMeth)
        return QRadioData::mediaObject();

    extern QMediaObject* sipVH_QtMultimedia_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtMultimedia_2(sipGILState, sipModuleAPI_QtMultimedia_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQRadioData::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQRadioData::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQRadioData::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQRadioData::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQRadioData::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQRadioData::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQRadioData::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQRadioData::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQRadioData::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

bool sipQRadioData::sipProtectVirt_setMediaObject(bool sipSelfWasArg,QMediaObject*a0)
{
    return (sipSelfWasArg ? QRadioData::setMediaObject(a0) : setMediaObject(a0));
}


PyDoc_STRVAR(doc_QRadioData_sender, "QRadioData.sender() -> QObject");

extern "C" {static PyObject *meth_QRadioData_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRadioData_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQRadioData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 410 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_sender, doc_QRadioData_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_receivers, "QRadioData.receivers(signal) -> int");

extern "C" {static PyObject *meth_QRadioData_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRadioData_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQRadioData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QRadioData, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 469 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtMultimedia/sipQtMultimediaQRadioData.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_receivers, doc_QRadioData_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_timerEvent, "QRadioData.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QRadioData_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRadioData_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQRadioData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QRadioData, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_timerEvent, doc_QRadioData_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_childEvent, "QRadioData.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QRadioData_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRadioData_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQRadioData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QRadioData, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_childEvent, doc_QRadioData_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_customEvent, "QRadioData.customEvent(QEvent)");

extern "C" {static PyObject *meth_QRadioData_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRadioData_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQRadioData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QRadioData, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_customEvent, doc_QRadioData_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_connectNotify, "QRadioData.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QRadioData_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRadioData_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQRadioData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QRadioData, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_connectNotify, doc_QRadioData_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_disconnectNotify, "QRadioData.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QRadioData_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRadioData_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQRadioData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QRadioData, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_disconnectNotify, doc_QRadioData_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_senderSignalIndex, "QRadioData.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QRadioData_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRadioData_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQRadioData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_senderSignalIndex, doc_QRadioData_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_isSignalConnected, "QRadioData.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QRadioData_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRadioData_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQRadioData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QRadioData, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_isSignalConnected, doc_QRadioData_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_mediaObject, "QRadioData.mediaObject() -> QMediaObject");

extern "C" {static PyObject *meth_QRadioData_mediaObject(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_mediaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QMediaObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QRadioData::mediaObject() : sipCpp->mediaObject());

            return sipConvertFromType(sipRes,sipType_QMediaObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_mediaObject, doc_QRadioData_mediaObject);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_availability, "QRadioData.availability() -> QMultimedia.AvailabilityStatus");

extern "C" {static PyObject *meth_QRadioData_availability(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_availability(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QMultimedia::AvailabilityStatus sipRes;

            sipRes = sipCpp->availability();

            return sipConvertFromEnum(sipRes,sipType_QMultimedia_AvailabilityStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_availability, doc_QRadioData_availability);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_stationId, "QRadioData.stationId() -> str");

extern "C" {static PyObject *meth_QRadioData_stationId(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_stationId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->stationId());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_stationId, doc_QRadioData_stationId);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_programType, "QRadioData.programType() -> QRadioData.ProgramType");

extern "C" {static PyObject *meth_QRadioData_programType(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_programType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QRadioData::ProgramType sipRes;

            sipRes = sipCpp->programType();

            return sipConvertFromEnum(sipRes,sipType_QRadioData_ProgramType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_programType, doc_QRadioData_programType);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_programTypeName, "QRadioData.programTypeName() -> str");

extern "C" {static PyObject *meth_QRadioData_programTypeName(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_programTypeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->programTypeName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_programTypeName, doc_QRadioData_programTypeName);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_stationName, "QRadioData.stationName() -> str");

extern "C" {static PyObject *meth_QRadioData_stationName(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_stationName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->stationName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_stationName, doc_QRadioData_stationName);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_radioText, "QRadioData.radioText() -> str");

extern "C" {static PyObject *meth_QRadioData_radioText(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_radioText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->radioText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_radioText, doc_QRadioData_radioText);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_isAlternativeFrequenciesEnabled, "QRadioData.isAlternativeFrequenciesEnabled() -> bool");

extern "C" {static PyObject *meth_QRadioData_isAlternativeFrequenciesEnabled(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_isAlternativeFrequenciesEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAlternativeFrequenciesEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_isAlternativeFrequenciesEnabled, doc_QRadioData_isAlternativeFrequenciesEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_error, "QRadioData.error() -> QRadioData.Error");

extern "C" {static PyObject *meth_QRadioData_error(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QRadioData::Error sipRes;

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QRadioData_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_error, doc_QRadioData_error);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_errorString, "QRadioData.errorString() -> str");

extern "C" {static PyObject *meth_QRadioData_errorString(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QRadioData, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->errorString());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_errorString, doc_QRadioData_errorString);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_setAlternativeFrequenciesEnabled, "QRadioData.setAlternativeFrequenciesEnabled(bool)");

extern "C" {static PyObject *meth_QRadioData_setAlternativeFrequenciesEnabled(PyObject *, PyObject *);}
static PyObject *meth_QRadioData_setAlternativeFrequenciesEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QRadioData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QRadioData, &sipCpp, &a0))
        {
            sipCpp->setAlternativeFrequenciesEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_setAlternativeFrequenciesEnabled, doc_QRadioData_setAlternativeFrequenciesEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QRadioData_setMediaObject, "QRadioData.setMediaObject(QMediaObject) -> bool");

extern "C" {static PyObject *meth_QRadioData_setMediaObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QRadioData_setMediaObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMediaObject* a0;
        sipQRadioData *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QRadioData, &sipCpp, sipType_QMediaObject, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_setMediaObject(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QRadioData, sipName_setMediaObject, doc_QRadioData_setMediaObject);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QRadioData(void *, const sipTypeDef *);}
static void *cast_QRadioData(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QRadioData)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QRadioData *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QMediaBindableInterface)->ctd_cast((QMediaBindableInterface *)(QRadioData *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRadioData(void *, int);}
static void release_QRadioData(void *sipCppV,int)
{
    QRadioData *sipCpp = reinterpret_cast<QRadioData *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QRadioData(sipSimpleWrapper *);}
static void dealloc_QRadioData(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQRadioData *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QRadioData(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QRadioData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QRadioData(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQRadioData *sipCpp = 0;

    {
        QMediaObject* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|JH", sipType_QMediaObject, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQRadioData(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QRadioData[] = {{162, 0, 0}, {63, 255, 1}};


static PyMethodDef methods_QRadioData[] = {
    {SIP_MLNAME_CAST(sipName_availability), meth_QRadioData_availability, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_availability)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QRadioData_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QRadioData_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QRadioData_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QRadioData_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QRadioData_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_error)},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QRadioData_errorString, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_errorString)},
    {SIP_MLNAME_CAST(sipName_isAlternativeFrequenciesEnabled), meth_QRadioData_isAlternativeFrequenciesEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_isAlternativeFrequenciesEnabled)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QRadioData_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mediaObject), meth_QRadioData_mediaObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_mediaObject)},
    {SIP_MLNAME_CAST(sipName_programType), meth_QRadioData_programType, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_programType)},
    {SIP_MLNAME_CAST(sipName_programTypeName), meth_QRadioData_programTypeName, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_programTypeName)},
    {SIP_MLNAME_CAST(sipName_radioText), meth_QRadioData_radioText, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_radioText)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QRadioData_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QRadioData_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QRadioData_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlternativeFrequenciesEnabled), meth_QRadioData_setAlternativeFrequenciesEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_setAlternativeFrequenciesEnabled)},
    {SIP_MLNAME_CAST(sipName_setMediaObject), (PyCFunction)meth_QRadioData_setMediaObject, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QRadioData_setMediaObject)},
    {SIP_MLNAME_CAST(sipName_stationId), meth_QRadioData_stationId, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_stationId)},
    {SIP_MLNAME_CAST(sipName_stationName), meth_QRadioData_stationName, METH_VARARGS, SIP_MLDOC_CAST(doc_QRadioData_stationName)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QRadioData_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QRadioData[] = {
    {sipName_AdultHits, static_cast<int>(QRadioData::AdultHits), 92},
    {sipName_Alarm, static_cast<int>(QRadioData::Alarm), 92},
    {sipName_AlarmTest, static_cast<int>(QRadioData::AlarmTest), 92},
    {sipName_ChildrensProgrammes, static_cast<int>(QRadioData::ChildrensProgrammes), 92},
    {sipName_ClassicRock, static_cast<int>(QRadioData::ClassicRock), 92},
    {sipName_Classical, static_cast<int>(QRadioData::Classical), 92},
    {sipName_College, static_cast<int>(QRadioData::College), 92},
    {sipName_CountryMusic, static_cast<int>(QRadioData::CountryMusic), 92},
    {sipName_Culture, static_cast<int>(QRadioData::Culture), 92},
    {sipName_CurrentAffairs, static_cast<int>(QRadioData::CurrentAffairs), 92},
    {sipName_Documentary, static_cast<int>(QRadioData::Documentary), 92},
    {sipName_Drama, static_cast<int>(QRadioData::Drama), 92},
    {sipName_EasyListening, static_cast<int>(QRadioData::EasyListening), 92},
    {sipName_Education, static_cast<int>(QRadioData::Education), 92},
    {sipName_Finance, static_cast<int>(QRadioData::Finance), 92},
    {sipName_FolkMusic, static_cast<int>(QRadioData::FolkMusic), 92},
    {sipName_Information, static_cast<int>(QRadioData::Information), 92},
    {sipName_JazzMusic, static_cast<int>(QRadioData::JazzMusic), 92},
    {sipName_Language, static_cast<int>(QRadioData::Language), 92},
    {sipName_Leisure, static_cast<int>(QRadioData::Leisure), 92},
    {sipName_LightClassical, static_cast<int>(QRadioData::LightClassical), 92},
    {sipName_NationalMusic, static_cast<int>(QRadioData::NationalMusic), 92},
    {sipName_News, static_cast<int>(QRadioData::News), 92},
    {sipName_NoError, static_cast<int>(QRadioData::NoError), 91},
    {sipName_Nostalgia, static_cast<int>(QRadioData::Nostalgia), 92},
    {sipName_OldiesMusic, static_cast<int>(QRadioData::OldiesMusic), 92},
    {sipName_OpenError, static_cast<int>(QRadioData::OpenError), 91},
    {sipName_OtherMusic, static_cast<int>(QRadioData::OtherMusic), 92},
    {sipName_OutOfRangeError, static_cast<int>(QRadioData::OutOfRangeError), 91},
    {sipName_Personality, static_cast<int>(QRadioData::Personality), 92},
    {sipName_PhoneIn, static_cast<int>(QRadioData::PhoneIn), 92},
    {sipName_PopMusic, static_cast<int>(QRadioData::PopMusic), 92},
    {sipName_Public, static_cast<int>(QRadioData::Public), 92},
    {sipName_Religion, static_cast<int>(QRadioData::Religion), 92},
    {sipName_ReligiousMusic, static_cast<int>(QRadioData::ReligiousMusic), 92},
    {sipName_ReligiousTalk, static_cast<int>(QRadioData::ReligiousTalk), 92},
    {sipName_ResourceError, static_cast<int>(QRadioData::ResourceError), 91},
    {sipName_RhythmAndBlues, static_cast<int>(QRadioData::RhythmAndBlues), 92},
    {sipName_RockMusic, static_cast<int>(QRadioData::RockMusic), 92},
    {sipName_Science, static_cast<int>(QRadioData::Science), 92},
    {sipName_SeriousClassical, static_cast<int>(QRadioData::SeriousClassical), 92},
    {sipName_SocialAffairs, static_cast<int>(QRadioData::SocialAffairs), 92},
    {sipName_Soft, static_cast<int>(QRadioData::Soft), 92},
    {sipName_SoftRhythmAndBlues, static_cast<int>(QRadioData::SoftRhythmAndBlues), 92},
    {sipName_SoftRock, static_cast<int>(QRadioData::SoftRock), 92},
    {sipName_Sport, static_cast<int>(QRadioData::Sport), 92},
    {sipName_Talk, static_cast<int>(QRadioData::Talk), 92},
    {sipName_Top40, static_cast<int>(QRadioData::Top40), 92},
    {sipName_Travel, static_cast<int>(QRadioData::Travel), 92},
    {sipName_Undefined, static_cast<int>(QRadioData::Undefined), 92},
    {sipName_Varied, static_cast<int>(QRadioData::Varied), 92},
    {sipName_Weather, static_cast<int>(QRadioData::Weather), 92},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QRadioData[] = {
    {"alternativeFrequenciesEnabledChanged(bool)", "\1QRadioData.alternativeFrequenciesEnabledChanged[bool]", 0, 0},
    {"radioTextChanged(QString)", "\1QRadioData.radioTextChanged[str]", 0, 0},
    {"stationNameChanged(QString)", "\1QRadioData.stationNameChanged[str]", 0, 0},
    {"programTypeNameChanged(QString)", "\1QRadioData.programTypeNameChanged[str]", 0, 0},
    {"programTypeChanged(QRadioData::ProgramType)", "\1QRadioData.programTypeChanged[QRadioData.ProgramType]", 0, 0},
    {"stationIdChanged(QString)", "\1QRadioData.stationIdChanged[str]", 0, 0},
    {"error(QRadioData::Error)", "\1QRadioData.error[QRadioData.Error]", &methods_QRadioData[5], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QRadioData, "\1QRadioData(QMediaObject, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtMultimedia_QRadioData = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QRadioData,
        {0}
    },
    {
        sipNameNr_QRadioData,
        {0, 0, 1},
        21, methods_QRadioData,
        52, enummembers_QRadioData,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QRadioData,
    -1,
    -1,
    supers_QRadioData,
    0,
    init_type_QRadioData,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QRadioData,
    0,
    0,
    0,
    release_QRadioData,
    cast_QRadioData,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QRadioData::staticMetaObject,
    0,
    signals_QRadioData,
    0
};
