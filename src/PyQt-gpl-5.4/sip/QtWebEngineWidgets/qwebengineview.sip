// qwebengineview.sip generated by MetaSIP on Thu Dec 25 10:18:50 2014
//
// This file is part of the QtWebEngineWidgets Python extension module.
//
// Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_5_4_0 -)

class QWebEngineView : QWidget
{
%TypeHeaderCode
#include <qwebengineview.h>
%End

%ConvertToSubClassCode
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QWebEnginePage, &sipType_QWebEnginePage, -1, 1},
        {sipName_QWebEngineView, &sipType_QWebEngineView, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
%End

public:
    explicit QWebEngineView(QWidget *parent /TransferThis/ = 0);
    virtual ~QWebEngineView();
    QWebEnginePage *page() const;
    void setPage(QWebEnginePage *page);
    void load(const QUrl &url);
    void setHtml(const QString &html, const QUrl &baseUrl = QUrl());
    void setContent(const QByteArray &data, const QString &mimeType = QString(), const QUrl &baseUrl = QUrl());
    QWebEngineHistory *history() const;
    QString title() const;
    void setUrl(const QUrl &url);
    QUrl url() const;
    QUrl iconUrl() const;
    bool hasSelection() const;
    QString selectedText() const;
    QAction *pageAction(QWebEnginePage::WebAction action) const;
    void triggerPageAction(QWebEnginePage::WebAction action, bool checked = false);
    qreal zoomFactor() const;
    void setZoomFactor(qreal factor);
    void findText(const QString &subString, QFlags<QWebEnginePage::FindFlag> options = 0, SIP_PYCALLABLE resultCallback /AllowNone/ = 0);
%MethodCode
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->findText(*a0, *a1, [a2](bool arg) {
            if (a2)
            {
                SIP_BLOCK_THREADS
                
                PyObject *res;
        
                res = sipCallMethod(NULL, a2, "b", (int)arg);
        
                if (!res)
                    pyqt5_qtwebenginewidgets_err_print();
                else
                    Py_DECREF(res);
                
                SIP_UNBLOCK_THREADS
            }
        });
        
        Py_END_ALLOW_THREADS
%End

    virtual QSize sizeHint() const;
    QWebEngineSettings *settings() const;

public slots:
    void stop();
    void back();
    void forward();
    void reload();

signals:
    void loadStarted();
    void loadProgress(int progress);
    void loadFinished(bool);
    void titleChanged(const QString &title);
    void selectionChanged();
    void urlChanged(const QUrl &);
    void iconUrlChanged(const QUrl &);

protected:
    virtual QWebEngineView *createWindow(QWebEnginePage::WebWindowType type);
    virtual void contextMenuEvent(QContextMenuEvent *);
    virtual bool event(QEvent *);
};

%End

%ModuleHeaderCode
// Imports from QtCore.
typedef void (*pyqt5_qtwebenginewidgets_err_print_t)();
extern pyqt5_qtwebenginewidgets_err_print_t pyqt5_qtwebenginewidgets_err_print;
%End

%ModuleCode
// Imports from QtCore.
pyqt5_qtwebenginewidgets_err_print_t pyqt5_qtwebenginewidgets_err_print;
%End

%PostInitialisationCode
// Imports from QtCore.
pyqt5_qtwebenginewidgets_err_print = (pyqt5_qtwebenginewidgets_err_print_t)sipImportSymbol("pyqt5_err_print");
%End
