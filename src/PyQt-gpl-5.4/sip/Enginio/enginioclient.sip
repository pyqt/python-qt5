// enginioclient.sip generated by MetaSIP on Thu Dec 25 10:18:50 2014
//
// This file is part of the Enginio Python extension module.
//
// Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_5_3_0 -)

class EnginioClient : EnginioClientConnection
{
%TypeHeaderCode
#include <enginioclient.h>
%End

%ConvertToSubClassCode
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_EnginioReply, &sipType_EnginioReply, -1, 1},
        {sipName_EnginioModel, &sipType_EnginioModel, -1, 2},
        {sipName_EnginioClientConnection, &sipType_EnginioClientConnection, 4, 3},
        {sipName_EnginioIdentity, &sipType_EnginioIdentity, 5, -1},
        {sipName_EnginioClient, &sipType_EnginioClient, -1, -1},
        {sipName_EnginioOAuth2Authentication, &sipType_EnginioOAuth2Authentication, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
%End

public:
    explicit EnginioClient(QObject *parent /TransferThis/ = 0);
    virtual ~EnginioClient();
    EnginioReply *fullTextSearch(const QJsonObject &query);
    EnginioReply *query(const QJsonObject &query, const Enginio::Operation operation = Enginio::ObjectOperation);
    EnginioReply *create(const QJsonObject &object, const Enginio::Operation operation = Enginio::ObjectOperation);
    EnginioReply *update(const QJsonObject &object, const Enginio::Operation operation = Enginio::ObjectOperation);
    EnginioReply *remove(const QJsonObject &object, const Enginio::Operation operation = Enginio::ObjectOperation);
    EnginioReply *uploadFile(const QJsonObject &associatedObject, const QUrl &file);
    EnginioReply *downloadUrl(const QJsonObject &object);

signals:
    void sessionAuthenticated(EnginioReply *reply) const;
    void sessionAuthenticationError(EnginioReply *reply) const;
    void sessionTerminated() const;
    void finished(EnginioReply *reply);
    void error(EnginioReply *reply);
};

%End
