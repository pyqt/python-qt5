// qcolordialog.sip generated by MetaSIP on Thu Dec 25 10:18:49 2014
//
// This file is part of the QtWidgets Python extension module.
//
// Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qcolordialog.h>
%End

class QColorDialog : QDialog
{
%TypeHeaderCode
#include <qcolordialog.h>
%End

public:
    enum ColorDialogOption
    {
        ShowAlphaChannel,
        NoButtons,
        DontUseNativeDialog,
    };

    typedef QFlags<QColorDialog::ColorDialogOption> ColorDialogOptions;
    explicit QColorDialog(QWidget *parent /TransferThis/ = 0);
    QColorDialog(const QColor &initial, QWidget *parent /TransferThis/ = 0);
    virtual ~QColorDialog();
    static QColor getColor(const QColor &initial = Qt::white, QWidget *parent = 0, const QString &title = QString(), QFlags<QColorDialog::ColorDialogOption> options = 0) /ReleaseGIL/;
    static int customCount();
    static QColor customColor(int index);
    static void setCustomColor(int index, QColor color);
    static QColor standardColor(int index);
    static void setStandardColor(int index, QColor color);

signals:
    void colorSelected(const QColor &color);
    void currentColorChanged(const QColor &color);

protected:
    virtual void changeEvent(QEvent *e);
    virtual void done(int result);

private:
    QColorDialog(const QColorDialog &);

public:
    void setCurrentColor(const QColor &color);
    QColor currentColor() const;
    QColor selectedColor() const;
    void setOption(QColorDialog::ColorDialogOption option, bool on = true);
    bool testOption(QColorDialog::ColorDialogOption option) const;
    void setOptions(QFlags<QColorDialog::ColorDialogOption> options);
    QFlags<QColorDialog::ColorDialogOption> options() const;
    virtual void open();
    void open(SIP_PYOBJECT slot /DocType="slot"/);
%MethodCode
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt5_qtwidgets_get_connection_parts(a0, sipCpp, "()", false, &receiver, slot_signature)) == sipErrorNone)
        {
            sipCpp->open(receiver, slot_signature.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
%End

    virtual void setVisible(bool visible);
};

QFlags<QColorDialog::ColorDialogOption> operator|(QColorDialog::ColorDialogOption f1, QFlags<QColorDialog::ColorDialogOption> f2);
