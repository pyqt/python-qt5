// qsgmaterial.sip generated by MetaSIP on Thu Dec 25 10:18:50 2014
//
// This file is part of the QtQuick Python extension module.
//
// Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qsgmaterial.h>
%End

class QSGMaterialShader
{
%TypeHeaderCode
#include <qsgmaterial.h>
%End

public:
    class RenderState
    {
%TypeHeaderCode
#include <qsgmaterial.h>
%End

    public:
        enum DirtyState
        {
            DirtyMatrix,
            DirtyOpacity,
        };

        typedef QFlags<QSGMaterialShader::RenderState::DirtyState> DirtyStates;
        QFlags<QSGMaterialShader::RenderState::DirtyState> dirtyStates() const;
        bool isMatrixDirty() const;
        bool isOpacityDirty() const;
        float opacity() const;
        QMatrix4x4 combinedMatrix() const;
        QMatrix4x4 modelViewMatrix() const;
        QRect viewportRect() const;
        QRect deviceRect() const;
        float determinant() const;
        QOpenGLContext *context() const;
%If (Qt_5_1_0 -)
        QMatrix4x4 projectionMatrix() const;
%End
%If (Qt_5_1_0 -)
        float devicePixelRatio() const;
%End
    };

    QSGMaterialShader();
    virtual ~QSGMaterialShader();
    virtual void activate();
    virtual void deactivate();
    virtual void updateState(const QSGMaterialShader::RenderState &state, QSGMaterial *newMaterial, QSGMaterial *oldMaterial);
    virtual SIP_PYOBJECT attributeNames() const = 0 /DocType="list-of-str"/ [const char * const * ()];
%MethodCode
        const char * const *names = sipCpp->attributeNames();
        
        SIP_SSIZE_T nr_names = 0;
        
        if (names)
            while (names[nr_names])
                ++nr_names;
            
        sipRes = PyList_New(nr_names);
            
        if (!sipRes)
            sipIsErr = 1;
        else
            for (SIP_SSIZE_T i = 0; i < nr_names; ++i)
            {
                const char *name = names[i];
                PyObject *el;
        
        #if PY_MAJOR_VERSION >= 3
                el = PyUnicode_DecodeASCII(name, strlen(name), 0);
        #else
                el = PyString_FromString(name);
        #endif
                
                if (!el)
                {
                    Py_DECREF(sipRes);
                    sipIsErr = 1;
                    break;
                }
        
                PyList_SET_ITEM(sipRes, i, el);
            }
%End

%VirtualCatcherCode
        char **result = 0;
        PyObject *names = sipCallMethod(&sipIsErr, sipMethod, "");
        
        if (names)
        {
            if (PyList_Check(names))
            {
                // Note that the converted value will leak.  This shouldn't matter
                // because the data should be static anyway.
                result = new char *[PyList_GET_SIZE(names) + 1];
                result[PyList_GET_SIZE(names)] = 0;
        
                for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(names); ++i)
                {
                    char *name;
                    PyObject *el = PyList_GET_ITEM(names, i);
                    
        #if PY_MAJOR_VERSION >= 3
                    PyObject *name_obj = PyUnicode_AsASCIIString(el);
        
                    name = (name_obj ? PyBytes_AS_STRING(name_obj) : 0);
        #else
                    name = PyString_AsString(el);
        #endif
        
                    if (!name)
                    {
                        result[i] = 0;
                        sipBadCatcherResult(sipMethod);
                        sipIsErr = 1;
                        break;
                    }
        
                    char *name_copy = new char[strlen(name) + 1];
                    strcpy(name_copy, name);
                    result[i] = name_copy;
        
        #if PY_MAJOR_VERSION >= 3
                    Py_DECREF(name_obj);
        #endif
                }
            }
            else
            {
                sipBadCatcherResult(sipMethod);
                sipIsErr = 1;
            }
            
            Py_DECREF(names);
        }
%End

    QOpenGLShaderProgram *program();

protected:
    virtual void compile();
    virtual void initialize();
%If (Qt_5_2_0 -)
    virtual const char *vertexShader() const;
%End
%If (- Qt_5_2_0)
    virtual const char *vertexShader() const = 0;
%End
%If (Qt_5_2_0 -)
    virtual const char *fragmentShader() const;
%End
%If (- Qt_5_2_0)
    virtual const char *fragmentShader() const = 0;
%End
%If (Qt_5_2_0 -)
    void setShaderSourceFile(QFlags<QOpenGLShader::ShaderTypeBit> type, const QString &sourceFile);
%End
%If (Qt_5_2_0 -)
    void setShaderSourceFiles(QFlags<QOpenGLShader::ShaderTypeBit> type, const QStringList &sourceFiles);
%End

private:
    QSGMaterialShader(const QSGMaterialShader &);
};

struct QSGMaterialType
{
%TypeHeaderCode
#include <qsgmaterial.h>
%End
};

class QSGMaterial /Supertype=sip.wrapper/
{
%TypeHeaderCode
#include <qsgmaterial.h>
%End

public:
    enum Flag
    {
        Blending,
        RequiresDeterminant,
        RequiresFullMatrixExceptTranslate,
        RequiresFullMatrix,
%If (Qt_5_2_0 -)
        CustomCompileStep,
%End
    };

    typedef QFlags<QSGMaterial::Flag> Flags;
    QSGMaterial();
    virtual ~QSGMaterial();
    virtual QSGMaterialType *type() const = 0;
    virtual QSGMaterialShader *createShader() const = 0 /Factory/;
    virtual int compare(const QSGMaterial *other) const;
    QFlags<QSGMaterial::Flag> flags() const;
    void setFlag(QFlags<QSGMaterial::Flag> flags, bool enabled = true);

private:
    QSGMaterial(const QSGMaterial &);
};

QFlags<QSGMaterial::Flag> operator|(QSGMaterial::Flag f1, QFlags<QSGMaterial::Flag> f2);
QFlags<QSGMaterialShader::RenderState::DirtyState> operator|(QSGMaterialShader::RenderState::DirtyState f1, QFlags<QSGMaterialShader::RenderState::DirtyState> f2);
