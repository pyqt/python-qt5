/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:17 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDesigner.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtDesigner/abstractformwindow.sip"
#include <abstractformwindow.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"

#line 30 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtDesigner/abstractformwindow.sip"
#include <abstractformwindow.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtDesigner/abstractformwindowcursor.sip"
#include <abstractformwindowcursor.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtDesigner/abstractformeditor.sip"
#include <abstractformeditor.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qdir.sip"
#include <qdir.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 635 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 275 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 452 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 408 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 395 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 382 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 368 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 189 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 195 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 198 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 201 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 204 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 207 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 210 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 213 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 216 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 219 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 225 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 228 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 231 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 237 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 240 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 243 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 246 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 249 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtDesigner/sipQtDesignerQDesignerFormWindowInterface.cpp"


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_fileName, "QDesignerFormWindowInterface.fileName() -> str");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_fileName(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_fileName);
                return NULL;
            }

            sipRes = new QString(sipCpp->fileName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_fileName, doc_QDesignerFormWindowInterface_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_absoluteDir, "QDesignerFormWindowInterface.absoluteDir() -> QDir");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_absoluteDir(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_absoluteDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QDir*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_absoluteDir);
                return NULL;
            }

            sipRes = new QDir(sipCpp->absoluteDir());

            return sipConvertFromNewType(sipRes,sipType_QDir,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_absoluteDir, doc_QDesignerFormWindowInterface_absoluteDir);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_contents, "QDesignerFormWindowInterface.contents() -> str");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_contents(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_contents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_contents);
                return NULL;
            }

            sipRes = new QString(sipCpp->contents());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_contents, doc_QDesignerFormWindowInterface_contents);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setContents, "QDesignerFormWindowInterface.setContents(QIODevice, str errorMessage=None) -> bool\n"
    "QDesignerFormWindowInterface.setContents(str) -> bool");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setContents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setContents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QIODevice* a0;
        QString* a1 = 0;
        int a1State = 0;
        QDesignerFormWindowInterface *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_errorMessage,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J0", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QIODevice, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setContents);
                return NULL;
            }

            sipRes = sipCpp->setContents(a0,a1);
            sipReleaseType(a1,sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setContents);
                return NULL;
            }

            sipRes = sipCpp->setContents(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setContents, doc_QDesignerFormWindowInterface_setContents);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_features, "QDesignerFormWindowInterface.features() -> QDesignerFormWindowInterface.Feature");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_features(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_features(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QDesignerFormWindowInterface::Feature*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_features);
                return NULL;
            }

            sipRes = new QDesignerFormWindowInterface::Feature(sipCpp->features());

            return sipConvertFromNewType(sipRes,sipType_QDesignerFormWindowInterface_Feature,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_features, doc_QDesignerFormWindowInterface_features);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_hasFeature, "QDesignerFormWindowInterface.hasFeature(QDesignerFormWindowInterface.Feature) -> bool");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_hasFeature(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_hasFeature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QDesignerFormWindowInterface::Feature* a0;
        int a0State = 0;
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QDesignerFormWindowInterface_Feature, &a0, &a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_hasFeature);
                return NULL;
            }

            sipRes = sipCpp->hasFeature(*a0);
            sipReleaseType(a0,sipType_QDesignerFormWindowInterface_Feature,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_hasFeature, doc_QDesignerFormWindowInterface_hasFeature);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_author, "QDesignerFormWindowInterface.author() -> str");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_author(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_author(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_author);
                return NULL;
            }

            sipRes = new QString(sipCpp->author());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_author, doc_QDesignerFormWindowInterface_author);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setAuthor, "QDesignerFormWindowInterface.setAuthor(str)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setAuthor(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setAuthor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setAuthor);
                return NULL;
            }

            sipCpp->setAuthor(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setAuthor, doc_QDesignerFormWindowInterface_setAuthor);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_comment, "QDesignerFormWindowInterface.comment() -> str");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_comment(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_comment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_comment);
                return NULL;
            }

            sipRes = new QString(sipCpp->comment());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_comment, doc_QDesignerFormWindowInterface_comment);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setComment, "QDesignerFormWindowInterface.setComment(str)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setComment(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setComment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setComment);
                return NULL;
            }

            sipCpp->setComment(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setComment, doc_QDesignerFormWindowInterface_setComment);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_layoutDefault, "QDesignerFormWindowInterface.layoutDefault() -> (int, int)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_layoutDefault(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_layoutDefault(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        int a1;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_layoutDefault);
                return NULL;
            }

            sipCpp->layoutDefault(&a0,&a1);

            return sipBuildResult(0,"(ii)",a0,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_layoutDefault, doc_QDesignerFormWindowInterface_layoutDefault);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setLayoutDefault, "QDesignerFormWindowInterface.setLayoutDefault(int, int)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setLayoutDefault(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setLayoutDefault(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        int a1;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setLayoutDefault);
                return NULL;
            }

            sipCpp->setLayoutDefault(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setLayoutDefault, doc_QDesignerFormWindowInterface_setLayoutDefault);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_layoutFunction, "QDesignerFormWindowInterface.layoutFunction() -> (str, str)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_layoutFunction(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_layoutFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QString* a0;
        QString* a1;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            a0 = new QString();
            a1 = new QString();

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_layoutFunction);
                return NULL;
            }

            sipCpp->layoutFunction(a0,a1);

            return sipBuildResult(0,"(NN)",a0,sipType_QString,NULL,a1,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_layoutFunction, doc_QDesignerFormWindowInterface_layoutFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setLayoutFunction, "QDesignerFormWindowInterface.setLayoutFunction(str, str)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setLayoutFunction(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setLayoutFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setLayoutFunction);
                return NULL;
            }

            sipCpp->setLayoutFunction(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setLayoutFunction, doc_QDesignerFormWindowInterface_setLayoutFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_pixmapFunction, "QDesignerFormWindowInterface.pixmapFunction() -> str");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_pixmapFunction(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_pixmapFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_pixmapFunction);
                return NULL;
            }

            sipRes = new QString(sipCpp->pixmapFunction());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_pixmapFunction, doc_QDesignerFormWindowInterface_pixmapFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setPixmapFunction, "QDesignerFormWindowInterface.setPixmapFunction(str)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setPixmapFunction(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setPixmapFunction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setPixmapFunction);
                return NULL;
            }

            sipCpp->setPixmapFunction(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setPixmapFunction, doc_QDesignerFormWindowInterface_setPixmapFunction);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_exportMacro, "QDesignerFormWindowInterface.exportMacro() -> str");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_exportMacro(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_exportMacro(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_exportMacro);
                return NULL;
            }

            sipRes = new QString(sipCpp->exportMacro());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_exportMacro, doc_QDesignerFormWindowInterface_exportMacro);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setExportMacro, "QDesignerFormWindowInterface.setExportMacro(str)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setExportMacro(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setExportMacro(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setExportMacro);
                return NULL;
            }

            sipCpp->setExportMacro(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setExportMacro, doc_QDesignerFormWindowInterface_setExportMacro);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_includeHints, "QDesignerFormWindowInterface.includeHints() -> list-of-str");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_includeHints(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_includeHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QStringList*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_includeHints);
                return NULL;
            }

            sipRes = new QStringList(sipCpp->includeHints());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_includeHints, doc_QDesignerFormWindowInterface_includeHints);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setIncludeHints, "QDesignerFormWindowInterface.setIncludeHints(list-of-str)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setIncludeHints(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setIncludeHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QStringList* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setIncludeHints);
                return NULL;
            }

            sipCpp->setIncludeHints(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setIncludeHints, doc_QDesignerFormWindowInterface_setIncludeHints);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_core, "QDesignerFormWindowInterface.core() -> QDesignerFormEditorInterface");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_core(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_core(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QDesignerFormEditorInterface*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowInterface::core() : sipCpp->core());

            return sipConvertFromType(sipRes,sipType_QDesignerFormEditorInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_core, doc_QDesignerFormWindowInterface_core);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_cursor, "QDesignerFormWindowInterface.cursor() -> QDesignerFormWindowCursorInterface");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_cursor(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_cursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QDesignerFormWindowCursorInterface*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_cursor);
                return NULL;
            }

            sipRes = sipCpp->cursor();

            return sipConvertFromType(sipRes,sipType_QDesignerFormWindowCursorInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_cursor, doc_QDesignerFormWindowInterface_cursor);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_grid, "QDesignerFormWindowInterface.grid() -> QPoint");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_grid(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_grid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QPoint*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_grid);
                return NULL;
            }

            sipRes = new QPoint(sipCpp->grid());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_grid, doc_QDesignerFormWindowInterface_grid);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_mainContainer, "QDesignerFormWindowInterface.mainContainer() -> QWidget");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_mainContainer(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_mainContainer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QWidget*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_mainContainer);
                return NULL;
            }

            sipRes = sipCpp->mainContainer();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_mainContainer, doc_QDesignerFormWindowInterface_mainContainer);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setMainContainer, "QDesignerFormWindowInterface.setMainContainer(QWidget)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setMainContainer(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setMainContainer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWidget* a0;
        PyObject *a0Keep;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, &a0Keep, sipType_QWidget, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setMainContainer);
                return NULL;
            }

            sipCpp->setMainContainer(a0);

            sipKeepReference(sipSelf, -7, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setMainContainer, doc_QDesignerFormWindowInterface_setMainContainer);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_isManaged, "QDesignerFormWindowInterface.isManaged(QWidget) -> bool");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_isManaged(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_isManaged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWidget* a0;
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QWidget, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_isManaged);
                return NULL;
            }

            sipRes = sipCpp->isManaged(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_isManaged, doc_QDesignerFormWindowInterface_isManaged);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_isDirty, "QDesignerFormWindowInterface.isDirty() -> bool");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_isDirty(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_isDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_isDirty);
                return NULL;
            }

            sipRes = sipCpp->isDirty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_isDirty, doc_QDesignerFormWindowInterface_isDirty);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_findFormWindow, "QDesignerFormWindowInterface.findFormWindow(QWidget) -> QDesignerFormWindowInterface\n"
    "QDesignerFormWindowInterface.findFormWindow(QObject) -> QDesignerFormWindowInterface");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_findFormWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_findFormWindow(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QWidget, &a0))
        {
            QDesignerFormWindowInterface*sipRes;

            sipRes = QDesignerFormWindowInterface::findFormWindow(a0);

            return sipConvertFromType(sipRes,sipType_QDesignerFormWindowInterface,NULL);
        }
    }

    {
        QObject* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_QObject, &a0))
        {
            QDesignerFormWindowInterface*sipRes;

            sipRes = QDesignerFormWindowInterface::findFormWindow(a0);

            return sipConvertFromType(sipRes,sipType_QDesignerFormWindowInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_findFormWindow, doc_QDesignerFormWindowInterface_findFormWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_emitSelectionChanged, "QDesignerFormWindowInterface.emitSelectionChanged()");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_emitSelectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_emitSelectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_emitSelectionChanged);
                return NULL;
            }

            sipCpp->emitSelectionChanged();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_emitSelectionChanged, doc_QDesignerFormWindowInterface_emitSelectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_resourceFiles, "QDesignerFormWindowInterface.resourceFiles() -> list-of-str");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_resourceFiles(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_resourceFiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QStringList*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_resourceFiles);
                return NULL;
            }

            sipRes = new QStringList(sipCpp->resourceFiles());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_resourceFiles, doc_QDesignerFormWindowInterface_resourceFiles);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_addResourceFile, "QDesignerFormWindowInterface.addResourceFile(str)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_addResourceFile(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_addResourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_addResourceFile);
                return NULL;
            }

            sipCpp->addResourceFile(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_addResourceFile, doc_QDesignerFormWindowInterface_addResourceFile);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_removeResourceFile, "QDesignerFormWindowInterface.removeResourceFile(str)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_removeResourceFile(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_removeResourceFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_removeResourceFile);
                return NULL;
            }

            sipCpp->removeResourceFile(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_removeResourceFile, doc_QDesignerFormWindowInterface_removeResourceFile);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_manageWidget, "QDesignerFormWindowInterface.manageWidget(QWidget)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_manageWidget(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_manageWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWidget* a0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QWidget, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_manageWidget);
                return NULL;
            }

            sipCpp->manageWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_manageWidget, doc_QDesignerFormWindowInterface_manageWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_unmanageWidget, "QDesignerFormWindowInterface.unmanageWidget(QWidget)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_unmanageWidget(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_unmanageWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWidget* a0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QWidget, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_unmanageWidget);
                return NULL;
            }

            sipCpp->unmanageWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_unmanageWidget, doc_QDesignerFormWindowInterface_unmanageWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setFeatures, "QDesignerFormWindowInterface.setFeatures(QDesignerFormWindowInterface.Feature)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setFeatures(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setFeatures(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QDesignerFormWindowInterface::Feature* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QDesignerFormWindowInterface_Feature, &a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setFeatures);
                return NULL;
            }

            sipCpp->setFeatures(*a0);
            sipReleaseType(a0,sipType_QDesignerFormWindowInterface_Feature,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setFeatures, doc_QDesignerFormWindowInterface_setFeatures);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setDirty, "QDesignerFormWindowInterface.setDirty(bool)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setDirty(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        bool a0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setDirty);
                return NULL;
            }

            sipCpp->setDirty(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setDirty, doc_QDesignerFormWindowInterface_setDirty);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_clearSelection, "QDesignerFormWindowInterface.clearSelection(bool update=True)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_clearSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_clearSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        bool a0 = 1;
        QDesignerFormWindowInterface *sipCpp;

        static const char *sipKwdList[] = {
            sipName_update,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_clearSelection);
                return NULL;
            }

            sipCpp->clearSelection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_clearSelection, doc_QDesignerFormWindowInterface_clearSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_selectWidget, "QDesignerFormWindowInterface.selectWidget(QWidget, bool select=True)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_selectWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_selectWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWidget* a0;
        bool a1 = 1;
        QDesignerFormWindowInterface *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_select,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|b", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QWidget, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_selectWidget);
                return NULL;
            }

            sipCpp->selectWidget(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_selectWidget, doc_QDesignerFormWindowInterface_selectWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setGrid, "QDesignerFormWindowInterface.setGrid(QPoint)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setGrid(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setGrid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QPoint* a0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QPoint, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setGrid);
                return NULL;
            }

            sipCpp->setGrid(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setGrid, doc_QDesignerFormWindowInterface_setGrid);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_setFileName, "QDesignerFormWindowInterface.setFileName(str)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QString,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_setFileName);
                return NULL;
            }

            sipCpp->setFileName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_setFileName, doc_QDesignerFormWindowInterface_setFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_checkContents, "QDesignerFormWindowInterface.checkContents() -> list-of-str");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_checkContents(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_checkContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QStringList*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_checkContents);
                return NULL;
            }

            sipRes = new QStringList(sipCpp->checkContents());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_checkContents, doc_QDesignerFormWindowInterface_checkContents);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_activeResourceFilePaths, "QDesignerFormWindowInterface.activeResourceFilePaths() -> list-of-str");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_activeResourceFilePaths(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_activeResourceFilePaths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->activeResourceFilePaths());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_activeResourceFilePaths, doc_QDesignerFormWindowInterface_activeResourceFilePaths);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_formContainer, "QDesignerFormWindowInterface.formContainer() -> QWidget");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_formContainer(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_formContainer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QDesignerFormWindowInterface *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp))
        {
            QWidget*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerFormWindowInterface, sipName_formContainer);
                return NULL;
            }

            sipRes = sipCpp->formContainer();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_formContainer, doc_QDesignerFormWindowInterface_formContainer);

    return NULL;
}


PyDoc_STRVAR(doc_QDesignerFormWindowInterface_activateResourceFilePaths, "QDesignerFormWindowInterface.activateResourceFilePaths(list-of-str) -> (int, str)");

extern "C" {static PyObject *meth_QDesignerFormWindowInterface_activateResourceFilePaths(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowInterface_activateResourceFilePaths(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        int a1;
        QString* a2;
        QDesignerFormWindowInterface *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_QDesignerFormWindowInterface, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            a2 = new QString();

            sipCpp->activateResourceFilePaths(*a0,&a1,a2);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            return sipBuildResult(0,"(iN)",a1,a2,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QDesignerFormWindowInterface, sipName_activateResourceFilePaths, doc_QDesignerFormWindowInterface_activateResourceFilePaths);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDesignerFormWindowInterface(void *, const sipTypeDef *);}
static void *cast_QDesignerFormWindowInterface(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDesignerFormWindowInterface)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QDesignerFormWindowInterface *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDesignerFormWindowInterface(void *, int);}
static void release_QDesignerFormWindowInterface(void *sipCppV,int)
{
    QDesignerFormWindowInterface *sipCpp = reinterpret_cast<QDesignerFormWindowInterface *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QDesignerFormWindowInterface(sipSimpleWrapper *);}
static void dealloc_QDesignerFormWindowInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDesignerFormWindowInterface(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDesignerFormWindowInterface[] = {{454, 2, 1}};


static PyMethodDef methods_QDesignerFormWindowInterface[] = {
    {SIP_MLNAME_CAST(sipName_absoluteDir), meth_QDesignerFormWindowInterface_absoluteDir, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_absoluteDir)},
    {SIP_MLNAME_CAST(sipName_activateResourceFilePaths), (PyCFunction)meth_QDesignerFormWindowInterface_activateResourceFilePaths, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_activateResourceFilePaths)},
    {SIP_MLNAME_CAST(sipName_activeResourceFilePaths), meth_QDesignerFormWindowInterface_activeResourceFilePaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_activeResourceFilePaths)},
    {SIP_MLNAME_CAST(sipName_addResourceFile), meth_QDesignerFormWindowInterface_addResourceFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_addResourceFile)},
    {SIP_MLNAME_CAST(sipName_author), meth_QDesignerFormWindowInterface_author, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_author)},
    {SIP_MLNAME_CAST(sipName_checkContents), meth_QDesignerFormWindowInterface_checkContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_checkContents)},
    {SIP_MLNAME_CAST(sipName_clearSelection), (PyCFunction)meth_QDesignerFormWindowInterface_clearSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_clearSelection)},
    {SIP_MLNAME_CAST(sipName_comment), meth_QDesignerFormWindowInterface_comment, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_comment)},
    {SIP_MLNAME_CAST(sipName_contents), meth_QDesignerFormWindowInterface_contents, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_contents)},
    {SIP_MLNAME_CAST(sipName_core), meth_QDesignerFormWindowInterface_core, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_core)},
    {SIP_MLNAME_CAST(sipName_cursor), meth_QDesignerFormWindowInterface_cursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_cursor)},
    {SIP_MLNAME_CAST(sipName_emitSelectionChanged), meth_QDesignerFormWindowInterface_emitSelectionChanged, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_emitSelectionChanged)},
    {SIP_MLNAME_CAST(sipName_exportMacro), meth_QDesignerFormWindowInterface_exportMacro, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_exportMacro)},
    {SIP_MLNAME_CAST(sipName_features), meth_QDesignerFormWindowInterface_features, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_features)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QDesignerFormWindowInterface_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_fileName)},
    {SIP_MLNAME_CAST(sipName_findFormWindow), meth_QDesignerFormWindowInterface_findFormWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_findFormWindow)},
    {SIP_MLNAME_CAST(sipName_formContainer), meth_QDesignerFormWindowInterface_formContainer, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_formContainer)},
    {SIP_MLNAME_CAST(sipName_grid), meth_QDesignerFormWindowInterface_grid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_grid)},
    {SIP_MLNAME_CAST(sipName_hasFeature), meth_QDesignerFormWindowInterface_hasFeature, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_hasFeature)},
    {SIP_MLNAME_CAST(sipName_includeHints), meth_QDesignerFormWindowInterface_includeHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_includeHints)},
    {SIP_MLNAME_CAST(sipName_isDirty), meth_QDesignerFormWindowInterface_isDirty, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_isDirty)},
    {SIP_MLNAME_CAST(sipName_isManaged), meth_QDesignerFormWindowInterface_isManaged, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_isManaged)},
    {SIP_MLNAME_CAST(sipName_layoutDefault), meth_QDesignerFormWindowInterface_layoutDefault, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_layoutDefault)},
    {SIP_MLNAME_CAST(sipName_layoutFunction), meth_QDesignerFormWindowInterface_layoutFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_layoutFunction)},
    {SIP_MLNAME_CAST(sipName_mainContainer), meth_QDesignerFormWindowInterface_mainContainer, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_mainContainer)},
    {SIP_MLNAME_CAST(sipName_manageWidget), meth_QDesignerFormWindowInterface_manageWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_manageWidget)},
    {SIP_MLNAME_CAST(sipName_pixmapFunction), meth_QDesignerFormWindowInterface_pixmapFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_pixmapFunction)},
    {SIP_MLNAME_CAST(sipName_removeResourceFile), meth_QDesignerFormWindowInterface_removeResourceFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_removeResourceFile)},
    {SIP_MLNAME_CAST(sipName_resourceFiles), meth_QDesignerFormWindowInterface_resourceFiles, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_resourceFiles)},
    {SIP_MLNAME_CAST(sipName_selectWidget), (PyCFunction)meth_QDesignerFormWindowInterface_selectWidget, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_selectWidget)},
    {SIP_MLNAME_CAST(sipName_setAuthor), meth_QDesignerFormWindowInterface_setAuthor, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setAuthor)},
    {SIP_MLNAME_CAST(sipName_setComment), meth_QDesignerFormWindowInterface_setComment, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setComment)},
    {SIP_MLNAME_CAST(sipName_setContents), (PyCFunction)meth_QDesignerFormWindowInterface_setContents, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setContents)},
    {SIP_MLNAME_CAST(sipName_setDirty), meth_QDesignerFormWindowInterface_setDirty, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setDirty)},
    {SIP_MLNAME_CAST(sipName_setExportMacro), meth_QDesignerFormWindowInterface_setExportMacro, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setExportMacro)},
    {SIP_MLNAME_CAST(sipName_setFeatures), meth_QDesignerFormWindowInterface_setFeatures, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setFeatures)},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QDesignerFormWindowInterface_setFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setFileName)},
    {SIP_MLNAME_CAST(sipName_setGrid), meth_QDesignerFormWindowInterface_setGrid, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setGrid)},
    {SIP_MLNAME_CAST(sipName_setIncludeHints), meth_QDesignerFormWindowInterface_setIncludeHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setIncludeHints)},
    {SIP_MLNAME_CAST(sipName_setLayoutDefault), meth_QDesignerFormWindowInterface_setLayoutDefault, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setLayoutDefault)},
    {SIP_MLNAME_CAST(sipName_setLayoutFunction), meth_QDesignerFormWindowInterface_setLayoutFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setLayoutFunction)},
    {SIP_MLNAME_CAST(sipName_setMainContainer), meth_QDesignerFormWindowInterface_setMainContainer, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setMainContainer)},
    {SIP_MLNAME_CAST(sipName_setPixmapFunction), meth_QDesignerFormWindowInterface_setPixmapFunction, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_setPixmapFunction)},
    {SIP_MLNAME_CAST(sipName_unmanageWidget), meth_QDesignerFormWindowInterface_unmanageWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QDesignerFormWindowInterface_unmanageWidget)}
};

static sipEnumMemberDef enummembers_QDesignerFormWindowInterface[] = {
    {sipName_DefaultFeature, static_cast<int>(QDesignerFormWindowInterface::DefaultFeature), 13},
    {sipName_EditFeature, static_cast<int>(QDesignerFormWindowInterface::EditFeature), 13},
    {sipName_GridFeature, static_cast<int>(QDesignerFormWindowInterface::GridFeature), 13},
    {sipName_TabOrderFeature, static_cast<int>(QDesignerFormWindowInterface::TabOrderFeature), 13},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QDesignerFormWindowInterface[] = {
    {"objectRemoved(QObject*)", "\1QDesignerFormWindowInterface.objectRemoved[QObject]", 0, 0},
    {"widgetRemoved(QWidget*)", "\1QDesignerFormWindowInterface.widgetRemoved[QWidget]", 0, 0},
    {"changed()", "\1QDesignerFormWindowInterface.changed", 0, 0},
    {"activated(QWidget*)", "\1QDesignerFormWindowInterface.activated[QWidget]", 0, 0},
    {"aboutToUnmanageWidget(QWidget*)", "\1QDesignerFormWindowInterface.aboutToUnmanageWidget[QWidget]", 0, 0},
    {"widgetUnmanaged(QWidget*)", "\1QDesignerFormWindowInterface.widgetUnmanaged[QWidget]", 0, 0},
    {"widgetManaged(QWidget*)", "\1QDesignerFormWindowInterface.widgetManaged[QWidget]", 0, 0},
    {"resourceFilesChanged()", "\1QDesignerFormWindowInterface.resourceFilesChanged", 0, 0},
    {"geometryChanged()", "\1QDesignerFormWindowInterface.geometryChanged", 0, 0},
    {"selectionChanged()", "\1QDesignerFormWindowInterface.selectionChanged", 0, 0},
    {"featureChanged(QDesignerFormWindowInterface::Feature)", "\1QDesignerFormWindowInterface.featureChanged[QDesignerFormWindowInterface.Feature]", 0, 0},
    {"fileNameChanged(QString)", "\1QDesignerFormWindowInterface.fileNameChanged[str]", 0, 0},
    {"mainContainerChanged(QWidget*)", "\1QDesignerFormWindowInterface.mainContainerChanged[QWidget]", 0, 0},
    {0, 0, 0, 0}
};


pyqt5ClassTypeDef sipTypeDef_QtDesigner_QDesignerFormWindowInterface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QDesignerFormWindowInterface,
        {0}
    },
    {
        sipNameNr_QDesignerFormWindowInterface,
        {0, 0, 1},
        44, methods_QDesignerFormWindowInterface,
        4, enummembers_QDesignerFormWindowInterface,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QDesignerFormWindowInterface,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDesignerFormWindowInterface,
    0,
    0,
    0,
    release_QDesignerFormWindowInterface,
    cast_QDesignerFormWindowInterface,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QDesignerFormWindowInterface::staticMetaObject,
    0,
    signals_QDesignerFormWindowInterface,
    0
};
