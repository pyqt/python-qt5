/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:11 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qmessagebox.sip"
#include <qmessagebox.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qmessagebox.sip"
#include <qmessagebox.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qcheckbox.sip"
#include <qcheckbox.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractbutton.sip"
#include <qabstractbutton.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qpushbutton.sip"
#include <qpushbutton.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 408 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 395 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 452 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 635 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 275 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 382 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 368 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 189 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 195 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 198 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 201 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 204 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 207 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 210 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 213 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 216 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 219 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 225 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 228 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 231 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 237 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 240 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 243 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 246 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 249 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"


class sipQMessageBox : public QMessageBox
{
public:
    sipQMessageBox(QWidget*);
    sipQMessageBox(QMessageBox::Icon,const QString&,const QString&,QMessageBox::StandardButtons,QWidget*,Qt::WindowFlags);
    virtual ~sipQMessageBox();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_enterEvent(bool,QEvent*);
    void sipProtectVirt_leaveEvent(bool,QEvent*);
    void sipProtectVirt_paintEvent(bool,QPaintEvent*);
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);
    void sipProtectVirt_actionEvent(bool,QActionEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent*);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool,QDropEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const QByteArray&,void*,long*);
    QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool,QPainter*) const;
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent*);
    bool sipProtectVirt_eventFilter(bool,QObject*,QEvent*);
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_closeEvent(bool,QCloseEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_changeEvent(bool,QEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void moveEvent(QMoveEvent*);
    void paintEvent(QPaintEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    int devType() const;
    bool eventFilter(QObject*,QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void reject();
    void accept();
    void done(int);
    int exec();
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void setVisible(bool);
    void open();
    void changeEvent(QEvent*);
    void keyPressEvent(QKeyEvent*);
    void closeEvent(QCloseEvent*);
    void showEvent(QShowEvent*);
    void resizeEvent(QResizeEvent*);
    bool event(QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMessageBox(const sipQMessageBox &);
    sipQMessageBox &operator = (const sipQMessageBox &);

    char sipPyMethods[51];
};

sipQMessageBox::sipQMessageBox(QWidget*a0): QMessageBox(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMessageBox::sipQMessageBox(QMessageBox::Icon a0,const QString& a1,const QString& a2,QMessageBox::StandardButtons a3,QWidget*a4,Qt::WindowFlags a5): QMessageBox(a0,a1,a2,a3,a4,a5), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMessageBox::~sipQMessageBox()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMessageBox::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QMessageBox);
}

int sipQMessageBox::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMessageBox::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QMessageBox,_c,_id,_a);

    return _id;
}

void *sipQMessageBox::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QMessageBox, _clname, &sipCpp) ? sipCpp : QMessageBox::qt_metacast(_clname));
}

void sipQMessageBox::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QMessageBox::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QMessageBox::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QMessageBox::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QMessageBox::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QMessageBox::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QMessageBox::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQMessageBox::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QMessageBox::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQMessageBox::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QMessageBox::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQMessageBox::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QMessageBox::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQMessageBox::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QMessageBox::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQMessageBox::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QMessageBox::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QMessageBox::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQMessageBox::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QMessageBox::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QMessageBox::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QMessageBox::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QMessageBox::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QMessageBox::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QMessageBox::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QMessageBox::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QMessageBox::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QMessageBox::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QMessageBox::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QMessageBox::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QMessageBox::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QMessageBox::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QMessageBox::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QMessageBox::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QMessageBox::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QMessageBox::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QMessageBox::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QMessageBox::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QMessageBox::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQMessageBox::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QMessageBox::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQMessageBox::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QMessageBox::heightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQMessageBox::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QMessageBox::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQMessageBox::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QMessageBox::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQMessageBox::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QMessageBox::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::reject()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_reject);

    if (!sipMeth)
    {
        QMessageBox::reject();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQMessageBox::accept()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_accept);

    if (!sipMeth)
    {
        QMessageBox::accept();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQMessageBox::done(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_done);

    if (!sipMeth)
    {
        QMessageBox::done(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQMessageBox::exec()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_exec_);

    if (!sipMeth)
        return QMessageBox::exec();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQMessageBox::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QMessageBox::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQMessageBox::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QMessageBox::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQMessageBox::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QMessageBox::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::open()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
    {
        QMessageBox::open();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQMessageBox::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QMessageBox::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QMessageBox::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QMessageBox::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QMessageBox::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQMessageBox::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QMessageBox::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQMessageBox::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QMessageBox::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQMessageBox::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQMessageBox::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQMessageBox::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQMessageBox::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQMessageBox::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQMessageBox::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQMessageBox::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQMessageBox::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQMessageBox::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQMessageBox::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQMessageBox::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQMessageBox::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQMessageBox::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQMessageBox::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QWidget::wheelEvent(a0) : wheelEvent(a0));
}

void sipQMessageBox::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQMessageBox::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QWidget::focusInEvent(a0) : focusInEvent(a0));
}

void sipQMessageBox::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QWidget::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQMessageBox::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQMessageBox::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQMessageBox::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent*a0)
{
    (sipSelfWasArg ? QWidget::paintEvent(a0) : paintEvent(a0));
}

void sipQMessageBox::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQMessageBox::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQMessageBox::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent*a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQMessageBox::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQMessageBox::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQMessageBox::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQMessageBox::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QWidget::dropEvent(a0) : dropEvent(a0));
}

void sipQMessageBox::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQMessageBox::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQMessageBox::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QWidget::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQMessageBox::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQMessageBox::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQMessageBox::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQMessageBox::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QWidget::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipQMessageBox::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQMessageBox::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

bool sipQMessageBox::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ? QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

QPainter* sipQMessageBox::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QWidget::sharedPainter() : sharedPainter());
}

void sipQMessageBox::sipProtectVirt_initPainter(bool sipSelfWasArg,QPainter*a0) const
{
    (sipSelfWasArg ? QWidget::initPainter(a0) : initPainter(a0));
}

void sipQMessageBox::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent*a0)
{
    (sipSelfWasArg ? QDialog::contextMenuEvent(a0) : contextMenuEvent(a0));
}

bool sipQMessageBox::sipProtectVirt_eventFilter(bool sipSelfWasArg,QObject*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QDialog::eventFilter(a0,a1) : eventFilter(a0,a1));
}

bool sipQMessageBox::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QMessageBox::event(a0) : event(a0));
}

void sipQMessageBox::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QMessageBox::resizeEvent(a0) : resizeEvent(a0));
}

void sipQMessageBox::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QMessageBox::showEvent(a0) : showEvent(a0));
}

void sipQMessageBox::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent*a0)
{
    (sipSelfWasArg ? QMessageBox::closeEvent(a0) : closeEvent(a0));
}

void sipQMessageBox::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QMessageBox::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQMessageBox::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QMessageBox::changeEvent(a0) : changeEvent(a0));
}


PyDoc_STRVAR(doc_QMessageBox_sender, "QMessageBox.sender() -> QObject");

extern "C" {static PyObject *meth_QMessageBox_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1571 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_sender, doc_QMessageBox_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_receivers, "QMessageBox.receivers(signal) -> int");

extern "C" {static PyObject *meth_QMessageBox_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QMessageBox, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1630 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_receivers, doc_QMessageBox_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_timerEvent, "QMessageBox.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QMessageBox_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_timerEvent, doc_QMessageBox_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_childEvent, "QMessageBox.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QMessageBox_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_childEvent, doc_QMessageBox_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_customEvent, "QMessageBox.customEvent(QEvent)");

extern "C" {static PyObject *meth_QMessageBox_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_customEvent, doc_QMessageBox_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_connectNotify, "QMessageBox.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QMessageBox_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_connectNotify, doc_QMessageBox_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_disconnectNotify, "QMessageBox.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QMessageBox_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_disconnectNotify, doc_QMessageBox_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_senderSignalIndex, "QMessageBox.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QMessageBox_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_senderSignalIndex, doc_QMessageBox_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_isSignalConnected, "QMessageBox.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QMessageBox_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_isSignalConnected, doc_QMessageBox_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_mousePressEvent, "QMessageBox.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QMessageBox_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_mousePressEvent, doc_QMessageBox_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_mouseReleaseEvent, "QMessageBox.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QMessageBox_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_mouseReleaseEvent, doc_QMessageBox_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_mouseDoubleClickEvent, "QMessageBox.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QMessageBox_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_mouseDoubleClickEvent, doc_QMessageBox_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_mouseMoveEvent, "QMessageBox.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QMessageBox_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_mouseMoveEvent, doc_QMessageBox_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_wheelEvent, "QMessageBox.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QMessageBox_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_wheelEvent, doc_QMessageBox_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_keyReleaseEvent, "QMessageBox.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QMessageBox_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_keyReleaseEvent, doc_QMessageBox_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_focusInEvent, "QMessageBox.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QMessageBox_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_focusInEvent, doc_QMessageBox_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_focusOutEvent, "QMessageBox.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QMessageBox_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_focusOutEvent, doc_QMessageBox_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_enterEvent, "QMessageBox.enterEvent(QEvent)");

extern "C" {static PyObject *meth_QMessageBox_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_enterEvent, doc_QMessageBox_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_leaveEvent, "QMessageBox.leaveEvent(QEvent)");

extern "C" {static PyObject *meth_QMessageBox_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_leaveEvent, doc_QMessageBox_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_paintEvent, "QMessageBox.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QMessageBox_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_paintEvent, doc_QMessageBox_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_moveEvent, "QMessageBox.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QMessageBox_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_moveEvent, doc_QMessageBox_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_tabletEvent, "QMessageBox.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QMessageBox_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_tabletEvent, doc_QMessageBox_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_actionEvent, "QMessageBox.actionEvent(QActionEvent)");

extern "C" {static PyObject *meth_QMessageBox_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_actionEvent, doc_QMessageBox_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_dragEnterEvent, "QMessageBox.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QMessageBox_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_dragEnterEvent, doc_QMessageBox_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_dragMoveEvent, "QMessageBox.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QMessageBox_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_dragMoveEvent, doc_QMessageBox_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_dragLeaveEvent, "QMessageBox.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QMessageBox_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_dragLeaveEvent, doc_QMessageBox_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_dropEvent, "QMessageBox.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QMessageBox_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_dropEvent, doc_QMessageBox_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_hideEvent, "QMessageBox.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QMessageBox_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_hideEvent, doc_QMessageBox_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_metric, "QMessageBox.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QMessageBox_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_metric, doc_QMessageBox_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_inputMethodEvent, "QMessageBox.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QMessageBox_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_inputMethodEvent, doc_QMessageBox_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_updateMicroFocus, "QMessageBox.updateMicroFocus()");

extern "C" {static PyObject *meth_QMessageBox_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_updateMicroFocus, doc_QMessageBox_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_create, "QMessageBox.create(sip.voidptr window=0, bool initializeWindow=True, bool destroyOldWindow=True)");

extern "C" {static PyObject *meth_QMessageBox_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0def = 0;
        WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQMessageBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_create, doc_QMessageBox_create);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_destroy, "QMessageBox.destroy(bool destroyWindow=True, bool destroySubWindows=True)");

extern "C" {static PyObject *meth_QMessageBox_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQMessageBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QMessageBox, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_destroy, doc_QMessageBox_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_focusNextPrevChild, "QMessageBox.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QMessageBox_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QMessageBox, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_focusNextPrevChild, doc_QMessageBox_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_focusNextChild, "QMessageBox.focusNextChild() -> bool");

extern "C" {static PyObject *meth_QMessageBox_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_focusNextChild, doc_QMessageBox_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_focusPreviousChild, "QMessageBox.focusPreviousChild() -> bool");

extern "C" {static PyObject *meth_QMessageBox_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_focusPreviousChild, doc_QMessageBox_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_nativeEvent, "QMessageBox.nativeEvent(QByteArray, sip.voidptr) -> (bool, int)");

extern "C" {static PyObject *meth_QMessageBox_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_nativeEvent, doc_QMessageBox_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_sharedPainter, "QMessageBox.sharedPainter() -> QPainter");

extern "C" {static PyObject *meth_QMessageBox_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_sharedPainter, doc_QMessageBox_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_initPainter, "QMessageBox.initPainter(QPainter)");

extern "C" {static PyObject *meth_QMessageBox_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_initPainter, doc_QMessageBox_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_contextMenuEvent, "QMessageBox.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QMessageBox_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_contextMenuEvent, doc_QMessageBox_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_eventFilter, "QMessageBox.eventFilter(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QMessageBox_eventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_eventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_eventFilter, doc_QMessageBox_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_text, "QMessageBox.text() -> str");

extern "C" {static PyObject *meth_QMessageBox_text(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_text, doc_QMessageBox_text);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setText, "QMessageBox.setText(str)");

extern "C" {static PyObject *meth_QMessageBox_setText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setText, doc_QMessageBox_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_icon, "QMessageBox.icon() -> QMessageBox.Icon");

extern "C" {static PyObject *meth_QMessageBox_icon(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QMessageBox::Icon sipRes;

            sipRes = sipCpp->icon();

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_Icon);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_icon, doc_QMessageBox_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setIcon, "QMessageBox.setIcon(QMessageBox.Icon)");

extern "C" {static PyObject *meth_QMessageBox_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMessageBox::Icon a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_Icon, &a0))
        {
            sipCpp->setIcon(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setIcon, doc_QMessageBox_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_iconPixmap, "QMessageBox.iconPixmap() -> QPixmap");

extern "C" {static PyObject *meth_QMessageBox_iconPixmap(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_iconPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QPixmap*sipRes;

            sipRes = new QPixmap(sipCpp->iconPixmap());

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_iconPixmap, doc_QMessageBox_iconPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setIconPixmap, "QMessageBox.setIconPixmap(QPixmap)");

extern "C" {static PyObject *meth_QMessageBox_setIconPixmap(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setIconPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap* a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QPixmap, &a0))
        {
            sipCpp->setIconPixmap(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setIconPixmap, doc_QMessageBox_setIconPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_textFormat, "QMessageBox.textFormat() -> Qt.TextFormat");

extern "C" {static PyObject *meth_QMessageBox_textFormat(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_textFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            Qt::TextFormat sipRes;

            sipRes = sipCpp->textFormat();

            return sipConvertFromEnum(sipRes,sipType_Qt_TextFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_textFormat, doc_QMessageBox_textFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setTextFormat, "QMessageBox.setTextFormat(Qt.TextFormat)");

extern "C" {static PyObject *meth_QMessageBox_setTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::TextFormat a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_Qt_TextFormat, &a0))
        {
            sipCpp->setTextFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setTextFormat, doc_QMessageBox_setTextFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_information, "QMessageBox.information(QWidget, str, str, QMessageBox.StandardButtons buttons=QMessageBox.Ok, QMessageBox.StandardButton defaultButton=QMessageBox.NoButton) -> QMessageBox.StandardButton");

extern "C" {static PyObject *meth_QMessageBox_information(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_information(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        QMessageBox::StandardButtons a3def = QMessageBox::Ok;
        QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
        QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_buttons,
            sipName_defaultButton,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1|J1E", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QMessageBox_StandardButton, &a4))
        {
            QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::information(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_information, doc_QMessageBox_information);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_question, "QMessageBox.question(QWidget, str, str, QMessageBox.StandardButtons buttons=QFlags&lt;QMessageBox.StandardButton&gt;(QFlag(81920)), QMessageBox.StandardButton defaultButton=QMessageBox.NoButton) -> QMessageBox.StandardButton");

extern "C" {static PyObject *meth_QMessageBox_question(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_question(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        QMessageBox::StandardButtons a3def = QFlags<QMessageBox::StandardButton>(QFlag(81920));
        QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
        QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_buttons,
            sipName_defaultButton,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1|J1E", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QMessageBox_StandardButton, &a4))
        {
            QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::question(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_question, doc_QMessageBox_question);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_warning, "QMessageBox.warning(QWidget, str, str, QMessageBox.StandardButtons buttons=QMessageBox.Ok, QMessageBox.StandardButton defaultButton=QMessageBox.NoButton) -> QMessageBox.StandardButton");

extern "C" {static PyObject *meth_QMessageBox_warning(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_warning(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        QMessageBox::StandardButtons a3def = QMessageBox::Ok;
        QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
        QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_buttons,
            sipName_defaultButton,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1|J1E", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QMessageBox_StandardButton, &a4))
        {
            QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::warning(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_warning, doc_QMessageBox_warning);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_critical, "QMessageBox.critical(QWidget, str, str, QMessageBox.StandardButtons buttons=QMessageBox.Ok, QMessageBox.StandardButton defaultButton=QMessageBox.NoButton) -> QMessageBox.StandardButton");

extern "C" {static PyObject *meth_QMessageBox_critical(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_critical(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        QMessageBox::StandardButtons a3def = QMessageBox::Ok;
        QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
        QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_buttons,
            sipName_defaultButton,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J1J1|J1E", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QMessageBox_StandardButton, &a4))
        {
            QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::critical(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_critical, doc_QMessageBox_critical);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_about, "QMessageBox.about(QWidget, str, str)");

extern "C" {static PyObject *meth_QMessageBox_about(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_about(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            QMessageBox::about(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_about, doc_QMessageBox_about);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_aboutQt, "QMessageBox.aboutQt(QWidget, str title='')");

extern "C" {static PyObject *meth_QMessageBox_aboutQt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_aboutQt(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_title,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8|J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            QMessageBox::aboutQt(a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_aboutQt, doc_QMessageBox_aboutQt);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_standardIcon, "QMessageBox.standardIcon(QMessageBox.Icon) -> QPixmap");

extern "C" {static PyObject *meth_QMessageBox_standardIcon(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_standardIcon(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMessageBox::Icon a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "E", sipType_QMessageBox_Icon, &a0))
        {
            QPixmap*sipRes;

            sipRes = new QPixmap(QMessageBox::standardIcon(a0));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_standardIcon, doc_QMessageBox_standardIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_event, "QMessageBox.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QMessageBox_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_event, doc_QMessageBox_event);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_resizeEvent, "QMessageBox.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QMessageBox_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_resizeEvent, doc_QMessageBox_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_showEvent, "QMessageBox.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QMessageBox_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_showEvent, doc_QMessageBox_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_closeEvent, "QMessageBox.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QMessageBox_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_closeEvent, doc_QMessageBox_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_keyPressEvent, "QMessageBox.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QMessageBox_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_keyPressEvent, doc_QMessageBox_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_changeEvent, "QMessageBox.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QMessageBox_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQMessageBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_changeEvent, doc_QMessageBox_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_addButton, "QMessageBox.addButton(QAbstractButton, QMessageBox.ButtonRole)\n"
    "QMessageBox.addButton(str, QMessageBox.ButtonRole) -> QPushButton\n"
    "QMessageBox.addButton(QMessageBox.StandardButton) -> QPushButton");

extern "C" {static PyObject *meth_QMessageBox_addButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_addButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton* a0;
        QMessageBox::ButtonRole a1;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:E", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QAbstractButton, &a0, sipType_QMessageBox_ButtonRole, &a1))
        {
            sipCpp->addButton(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QMessageBox::ButtonRole a1;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State, sipType_QMessageBox_ButtonRole, &a1))
        {
            QPushButton*sipRes;

            sipRes = sipCpp->addButton(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QPushButton,sipSelf);
        }
    }

    {
        QMessageBox::StandardButton a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButton, &a0))
        {
            QPushButton*sipRes;

            sipRes = sipCpp->addButton(a0);

            return sipConvertFromType(sipRes,sipType_QPushButton,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_addButton, doc_QMessageBox_addButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_removeButton, "QMessageBox.removeButton(QAbstractButton)");

extern "C" {static PyObject *meth_QMessageBox_removeButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_removeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton* a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QAbstractButton, &a0))
        {
            sipCpp->removeButton(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_removeButton, doc_QMessageBox_removeButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setStandardButtons, "QMessageBox.setStandardButtons(QMessageBox.StandardButtons)");

extern "C" {static PyObject *meth_QMessageBox_setStandardButtons(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setStandardButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMessageBox::StandardButtons* a0;
        int a0State = 0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButtons, &a0, &a0State))
        {
            sipCpp->setStandardButtons(*a0);
            sipReleaseType(a0,sipType_QMessageBox_StandardButtons,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setStandardButtons, doc_QMessageBox_setStandardButtons);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_standardButtons, "QMessageBox.standardButtons() -> QMessageBox.StandardButtons");

extern "C" {static PyObject *meth_QMessageBox_standardButtons(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_standardButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QMessageBox::StandardButtons*sipRes;

            sipRes = new QMessageBox::StandardButtons(sipCpp->standardButtons());

            return sipConvertFromNewType(sipRes,sipType_QMessageBox_StandardButtons,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_standardButtons, doc_QMessageBox_standardButtons);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_standardButton, "QMessageBox.standardButton(QAbstractButton) -> QMessageBox.StandardButton");

extern "C" {static PyObject *meth_QMessageBox_standardButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_standardButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton* a0;
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QAbstractButton, &a0))
        {
            QMessageBox::StandardButton sipRes;

            sipRes = sipCpp->standardButton(a0);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_standardButton, doc_QMessageBox_standardButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_button, "QMessageBox.button(QMessageBox.StandardButton) -> QAbstractButton");

extern "C" {static PyObject *meth_QMessageBox_button(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_button(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QMessageBox::StandardButton a0;
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButton, &a0))
        {
            QAbstractButton*sipRes;

            sipRes = sipCpp->button(a0);

            return sipConvertFromType(sipRes,sipType_QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_button, doc_QMessageBox_button);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_defaultButton, "QMessageBox.defaultButton() -> QPushButton");

extern "C" {static PyObject *meth_QMessageBox_defaultButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_defaultButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QPushButton*sipRes;

            sipRes = sipCpp->defaultButton();

            return sipConvertFromType(sipRes,sipType_QPushButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_defaultButton, doc_QMessageBox_defaultButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setDefaultButton, "QMessageBox.setDefaultButton(QPushButton)\n"
    "QMessageBox.setDefaultButton(QMessageBox.StandardButton)");

extern "C" {static PyObject *meth_QMessageBox_setDefaultButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setDefaultButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPushButton* a0;
        PyObject *a0Keep;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QMessageBox, &sipCpp, &a0Keep, sipType_QPushButton, &a0))
        {
            sipCpp->setDefaultButton(a0);

            sipKeepReference(sipSelf, -39, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QMessageBox::StandardButton a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButton, &a0))
        {
            sipCpp->setDefaultButton(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setDefaultButton, doc_QMessageBox_setDefaultButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_escapeButton, "QMessageBox.escapeButton() -> QAbstractButton");

extern "C" {static PyObject *meth_QMessageBox_escapeButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_escapeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QAbstractButton*sipRes;

            sipRes = sipCpp->escapeButton();

            return sipConvertFromType(sipRes,sipType_QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_escapeButton, doc_QMessageBox_escapeButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setEscapeButton, "QMessageBox.setEscapeButton(QAbstractButton)\n"
    "QMessageBox.setEscapeButton(QMessageBox.StandardButton)");

extern "C" {static PyObject *meth_QMessageBox_setEscapeButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setEscapeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton* a0;
        PyObject *a0Keep;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QMessageBox, &sipCpp, &a0Keep, sipType_QAbstractButton, &a0))
        {
            sipCpp->setEscapeButton(a0);

            sipKeepReference(sipSelf, -40, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QMessageBox::StandardButton a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QMessageBox_StandardButton, &a0))
        {
            sipCpp->setEscapeButton(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setEscapeButton, doc_QMessageBox_setEscapeButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_clickedButton, "QMessageBox.clickedButton() -> QAbstractButton");

extern "C" {static PyObject *meth_QMessageBox_clickedButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_clickedButton(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QAbstractButton*sipRes;

            sipRes = sipCpp->clickedButton();

            return sipConvertFromType(sipRes,sipType_QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_clickedButton, doc_QMessageBox_clickedButton);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_informativeText, "QMessageBox.informativeText() -> str");

extern "C" {static PyObject *meth_QMessageBox_informativeText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_informativeText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->informativeText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_informativeText, doc_QMessageBox_informativeText);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setInformativeText, "QMessageBox.setInformativeText(str)");

extern "C" {static PyObject *meth_QMessageBox_setInformativeText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setInformativeText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setInformativeText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setInformativeText, doc_QMessageBox_setInformativeText);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_detailedText, "QMessageBox.detailedText() -> str");

extern "C" {static PyObject *meth_QMessageBox_detailedText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_detailedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->detailedText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_detailedText, doc_QMessageBox_detailedText);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setDetailedText, "QMessageBox.setDetailedText(str)");

extern "C" {static PyObject *meth_QMessageBox_setDetailedText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setDetailedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDetailedText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setDetailedText, doc_QMessageBox_setDetailedText);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setWindowTitle, "QMessageBox.setWindowTitle(str)");

extern "C" {static PyObject *meth_QMessageBox_setWindowTitle(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setWindowTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWindowTitle(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setWindowTitle, doc_QMessageBox_setWindowTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setWindowModality, "QMessageBox.setWindowModality(Qt.WindowModality)");

extern "C" {static PyObject *meth_QMessageBox_setWindowModality(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setWindowModality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::WindowModality a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_Qt_WindowModality, &a0))
        {
            sipCpp->setWindowModality(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setWindowModality, doc_QMessageBox_setWindowModality);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_open, "QMessageBox.open()\n"
    "QMessageBox.open(slot)");

extern "C" {static PyObject *meth_QMessageBox_open(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QMessageBox::open() : sipCpp->open());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        PyObject * a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QMessageBox, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 142 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qmessagebox.sip"
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt5_qtwidgets_get_connection_parts(a0, sipCpp, "()", false, &receiver, slot_signature)) == sipErrorNone)
        {
            sipCpp->open(receiver, slot_signature.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 4017 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQMessageBox.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_open, doc_QMessageBox_open);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_buttons, "QMessageBox.buttons() -> list-of-QAbstractButton");

extern "C" {static PyObject *meth_QMessageBox_buttons(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_buttons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QList<QAbstractButton*>*sipRes;

            sipRes = new QList<QAbstractButton*>(sipCpp->buttons());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_buttons, doc_QMessageBox_buttons);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_buttonRole, "QMessageBox.buttonRole(QAbstractButton) -> QMessageBox.ButtonRole");

extern "C" {static PyObject *meth_QMessageBox_buttonRole(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_buttonRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton* a0;
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QAbstractButton, &a0))
        {
            QMessageBox::ButtonRole sipRes;

            sipRes = sipCpp->buttonRole(a0);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_ButtonRole);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_buttonRole, doc_QMessageBox_buttonRole);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setTextInteractionFlags, "QMessageBox.setTextInteractionFlags(Qt.TextInteractionFlags)");

extern "C" {static PyObject *meth_QMessageBox_setTextInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setTextInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::TextInteractionFlags* a0;
        int a0State = 0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_Qt_TextInteractionFlags, &a0, &a0State))
        {
            sipCpp->setTextInteractionFlags(*a0);
            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setTextInteractionFlags, doc_QMessageBox_setTextInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_textInteractionFlags, "QMessageBox.textInteractionFlags() -> Qt.TextInteractionFlags");

extern "C" {static PyObject *meth_QMessageBox_textInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_textInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            Qt::TextInteractionFlags*sipRes;

            sipRes = new Qt::TextInteractionFlags(sipCpp->textInteractionFlags());

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_textInteractionFlags, doc_QMessageBox_textInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_setCheckBox, "QMessageBox.setCheckBox(QCheckBox)");

extern "C" {static PyObject *meth_QMessageBox_setCheckBox(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setCheckBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QCheckBox* a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QMessageBox, &sipCpp, sipType_QCheckBox, &a0))
        {
            sipCpp->setCheckBox(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_setCheckBox, doc_QMessageBox_setCheckBox);

    return NULL;
}


PyDoc_STRVAR(doc_QMessageBox_checkBox, "QMessageBox.checkBox() -> QCheckBox");

extern "C" {static PyObject *meth_QMessageBox_checkBox(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_checkBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMessageBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QMessageBox, &sipCpp))
        {
            QCheckBox*sipRes;

            sipRes = sipCpp->checkBox();

            return sipConvertFromType(sipRes,sipType_QCheckBox,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QMessageBox, sipName_checkBox, doc_QMessageBox_checkBox);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMessageBox(void *, const sipTypeDef *);}
static void *cast_QMessageBox(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QMessageBox)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QDialog)->ctd_cast((QDialog *)(QMessageBox *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMessageBox(void *, int);}
static void release_QMessageBox(void *sipCppV,int)
{
    QMessageBox *sipCpp = reinterpret_cast<QMessageBox *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QMessageBox(sipSimpleWrapper *);}
static void dealloc_QMessageBox(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMessageBox *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMessageBox(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QMessageBox(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QMessageBox(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQMessageBox *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQMessageBox(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QMessageBox::Icon a0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        QMessageBox::StandardButtons a3def = QMessageBox::NoButton;
        QMessageBox::StandardButtons* a3 = &a3def;
        int a3State = 0;
        QWidget* a4 = 0;
        Qt::WindowFlags a5def = Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint;
        Qt::WindowFlags* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_buttons,
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "EJ1J1|J1JHJ1", sipType_QMessageBox_Icon, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QMessageBox_StandardButtons, &a3, &a3State, sipType_QWidget, &a4, sipOwner, sipType_Qt_WindowFlags, &a5, &a5State))
        {
            sipCpp = new sipQMessageBox(a0,*a1,*a2,*a3,a4,*a5);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);
            sipReleaseType(a5,sipType_Qt_WindowFlags,a5State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMessageBox[] = {{60, 255, 1}};


static PyMethodDef methods_QMessageBox[] = {
    {SIP_MLNAME_CAST(sipName_about), meth_QMessageBox_about, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_about)},
    {SIP_MLNAME_CAST(sipName_aboutQt), (PyCFunction)meth_QMessageBox_aboutQt, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_aboutQt)},
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QMessageBox_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_addButton), meth_QMessageBox_addButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_addButton)},
    {SIP_MLNAME_CAST(sipName_button), meth_QMessageBox_button, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_button)},
    {SIP_MLNAME_CAST(sipName_buttonRole), meth_QMessageBox_buttonRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_buttonRole)},
    {SIP_MLNAME_CAST(sipName_buttons), meth_QMessageBox_buttons, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_buttons)},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QMessageBox_changeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_changeEvent)},
    {SIP_MLNAME_CAST(sipName_checkBox), meth_QMessageBox_checkBox, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_checkBox)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QMessageBox_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clickedButton), meth_QMessageBox_clickedButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_clickedButton)},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QMessageBox_closeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_closeEvent)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QMessageBox_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QMessageBox_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QMessageBox_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_critical), (PyCFunction)meth_QMessageBox_critical, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_critical)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QMessageBox_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultButton), meth_QMessageBox_defaultButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_defaultButton)},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QMessageBox_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_detailedText), meth_QMessageBox_detailedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_detailedText)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QMessageBox_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QMessageBox_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QMessageBox_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QMessageBox_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QMessageBox_dropEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QMessageBox_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_escapeButton), meth_QMessageBox_escapeButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_escapeButton)},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QMessageBox_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), (PyCFunction)meth_QMessageBox_eventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QMessageBox_focusInEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QMessageBox_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QMessageBox_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QMessageBox_focusOutEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QMessageBox_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QMessageBox_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_icon), meth_QMessageBox_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_icon)},
    {SIP_MLNAME_CAST(sipName_iconPixmap), meth_QMessageBox_iconPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_iconPixmap)},
    {SIP_MLNAME_CAST(sipName_information), (PyCFunction)meth_QMessageBox_information, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_information)},
    {SIP_MLNAME_CAST(sipName_informativeText), meth_QMessageBox_informativeText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_informativeText)},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QMessageBox_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QMessageBox_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QMessageBox_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QMessageBox_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QMessageBox_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QMessageBox_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QMessageBox_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QMessageBox_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QMessageBox_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QMessageBox_mousePressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QMessageBox_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QMessageBox_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QMessageBox_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_open), meth_QMessageBox_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_open)},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QMessageBox_paintEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_question), (PyCFunction)meth_QMessageBox_question, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_question)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QMessageBox_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removeButton), meth_QMessageBox_removeButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_removeButton)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QMessageBox_resizeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QMessageBox_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QMessageBox_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setCheckBox), meth_QMessageBox_setCheckBox, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setCheckBox)},
    {SIP_MLNAME_CAST(sipName_setDefaultButton), meth_QMessageBox_setDefaultButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setDefaultButton)},
    {SIP_MLNAME_CAST(sipName_setDetailedText), meth_QMessageBox_setDetailedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setDetailedText)},
    {SIP_MLNAME_CAST(sipName_setEscapeButton), meth_QMessageBox_setEscapeButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setEscapeButton)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QMessageBox_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setIcon)},
    {SIP_MLNAME_CAST(sipName_setIconPixmap), meth_QMessageBox_setIconPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setIconPixmap)},
    {SIP_MLNAME_CAST(sipName_setInformativeText), meth_QMessageBox_setInformativeText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setInformativeText)},
    {SIP_MLNAME_CAST(sipName_setStandardButtons), meth_QMessageBox_setStandardButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setStandardButtons)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QMessageBox_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setText)},
    {SIP_MLNAME_CAST(sipName_setTextFormat), meth_QMessageBox_setTextFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setTextFormat)},
    {SIP_MLNAME_CAST(sipName_setTextInteractionFlags), meth_QMessageBox_setTextInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setTextInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_setWindowModality), meth_QMessageBox_setWindowModality, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setWindowModality)},
    {SIP_MLNAME_CAST(sipName_setWindowTitle), meth_QMessageBox_setWindowTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_setWindowTitle)},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QMessageBox_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QMessageBox_showEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_showEvent)},
    {SIP_MLNAME_CAST(sipName_standardButton), meth_QMessageBox_standardButton, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_standardButton)},
    {SIP_MLNAME_CAST(sipName_standardButtons), meth_QMessageBox_standardButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_standardButtons)},
    {SIP_MLNAME_CAST(sipName_standardIcon), meth_QMessageBox_standardIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_standardIcon)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QMessageBox_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QMessageBox_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_text)},
    {SIP_MLNAME_CAST(sipName_textFormat), meth_QMessageBox_textFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_textFormat)},
    {SIP_MLNAME_CAST(sipName_textInteractionFlags), meth_QMessageBox_textInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QMessageBox_textInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QMessageBox_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QMessageBox_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_warning), (PyCFunction)meth_QMessageBox_warning, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QMessageBox_warning)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QMessageBox_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QMessageBox[] = {
    {sipName_Abort, static_cast<int>(QMessageBox::Abort), 237},
    {sipName_AcceptRole, static_cast<int>(QMessageBox::AcceptRole), 235},
    {sipName_ActionRole, static_cast<int>(QMessageBox::ActionRole), 235},
    {sipName_Apply, static_cast<int>(QMessageBox::Apply), 237},
    {sipName_ApplyRole, static_cast<int>(QMessageBox::ApplyRole), 235},
    {sipName_ButtonMask, static_cast<int>(QMessageBox::ButtonMask), 237},
    {sipName_Cancel, static_cast<int>(QMessageBox::Cancel), 237},
    {sipName_Close, static_cast<int>(QMessageBox::Close), 237},
    {sipName_Critical, static_cast<int>(QMessageBox::Critical), 236},
    {sipName_Default, static_cast<int>(QMessageBox::Default), 237},
    {sipName_DestructiveRole, static_cast<int>(QMessageBox::DestructiveRole), 235},
    {sipName_Discard, static_cast<int>(QMessageBox::Discard), 237},
    {sipName_Escape, static_cast<int>(QMessageBox::Escape), 237},
    {sipName_FirstButton, static_cast<int>(QMessageBox::FirstButton), 237},
    {sipName_FlagMask, static_cast<int>(QMessageBox::FlagMask), 237},
    {sipName_Help, static_cast<int>(QMessageBox::Help), 237},
    {sipName_HelpRole, static_cast<int>(QMessageBox::HelpRole), 235},
    {sipName_Ignore, static_cast<int>(QMessageBox::Ignore), 237},
    {sipName_Information, static_cast<int>(QMessageBox::Information), 236},
    {sipName_InvalidRole, static_cast<int>(QMessageBox::InvalidRole), 235},
    {sipName_LastButton, static_cast<int>(QMessageBox::LastButton), 237},
    {sipName_No, static_cast<int>(QMessageBox::No), 237},
    {sipName_NoAll, static_cast<int>(QMessageBox::NoAll), 237},
    {sipName_NoButton, static_cast<int>(QMessageBox::NoButton), 237},
    {sipName_NoIcon, static_cast<int>(QMessageBox::NoIcon), 236},
    {sipName_NoRole, static_cast<int>(QMessageBox::NoRole), 235},
    {sipName_NoToAll, static_cast<int>(QMessageBox::NoToAll), 237},
    {sipName_Ok, static_cast<int>(QMessageBox::Ok), 237},
    {sipName_Open, static_cast<int>(QMessageBox::Open), 237},
    {sipName_Question, static_cast<int>(QMessageBox::Question), 236},
    {sipName_RejectRole, static_cast<int>(QMessageBox::RejectRole), 235},
    {sipName_Reset, static_cast<int>(QMessageBox::Reset), 237},
    {sipName_ResetRole, static_cast<int>(QMessageBox::ResetRole), 235},
    {sipName_RestoreDefaults, static_cast<int>(QMessageBox::RestoreDefaults), 237},
    {sipName_Retry, static_cast<int>(QMessageBox::Retry), 237},
    {sipName_Save, static_cast<int>(QMessageBox::Save), 237},
    {sipName_SaveAll, static_cast<int>(QMessageBox::SaveAll), 237},
    {sipName_Warning, static_cast<int>(QMessageBox::Warning), 236},
    {sipName_Yes, static_cast<int>(QMessageBox::Yes), 237},
    {sipName_YesAll, static_cast<int>(QMessageBox::YesAll), 237},
    {sipName_YesRole, static_cast<int>(QMessageBox::YesRole), 235},
    {sipName_YesToAll, static_cast<int>(QMessageBox::YesToAll), 237},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QMessageBox[] = {
    {"buttonClicked(QAbstractButton*)", "\1QMessageBox.buttonClicked[QAbstractButton]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QMessageBox, "\1QMessageBox(QWidget parent=None)\n"
    "QMessageBox(QMessageBox.Icon, str, str, QMessageBox.StandardButtons buttons=QMessageBox.NoButton, QWidget parent=None, Qt.WindowFlags flags=Qt.Dialog|Qt.MSWindowsFixedSizeDialogHint)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QMessageBox = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QMessageBox,
        {0}
    },
    {
        sipNameNr_QMessageBox,
        {0, 0, 1},
        86, methods_QMessageBox,
        42, enummembers_QMessageBox,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QMessageBox,
    -1,
    -1,
    supers_QMessageBox,
    0,
    init_type_QMessageBox,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMessageBox,
    0,
    0,
    0,
    release_QMessageBox,
    cast_QMessageBox,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QMessageBox::staticMetaObject,
    0,
    signals_QMessageBox,
    0
};
