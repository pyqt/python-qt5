/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:13 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"

#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 635 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 275 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 452 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 408 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 395 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 382 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 368 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 171 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 174 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 177 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 180 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 183 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 186 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 189 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 195 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 198 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 201 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 204 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 207 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 210 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 213 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 216 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 219 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 225 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 228 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
// Transfer the ownership of a single widget to a parent.
static void qtgui_TransferWidget(QWidget *w, PyObject *py_parent)
{
    PyObject *py_w = sipGetPyObject(w, sipType_QWidget);

    if (py_w)
        sipTransferTo(py_w, py_parent);
}


// Transfer ownership of all widgets in a layout to their new parent.
static void qtwidgets_TransferLayoutWidgets(QLayout *lay, PyObject *pw)
{
    int n = lay->count();

    for (int i = 0; i < n; ++i)
    {
        QLayoutItem *item = lay->itemAt(i);
        QWidget *w = item->widget();

        if (w)
        {
            qtgui_TransferWidget(w, pw);
        }
        else
        {
            QLayout *l = item->layout();

            if (l)
                qtwidgets_TransferLayoutWidgets(l, pw);
        }
    }
    
    QWidget *mb = lay->menuBar();

    if (mb)
        qtgui_TransferWidget(mb, pw);
}
#line 268 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"


class sipQWidget : public QWidget
{
public:
    sipQWidget(QWidget*,Qt::WindowFlags);
    virtual ~sipQWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_enterEvent(bool,QEvent*);
    void sipProtectVirt_leaveEvent(bool,QEvent*);
    void sipProtectVirt_paintEvent(bool,QPaintEvent*);
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    void sipProtectVirt_closeEvent(bool,QCloseEvent*);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);
    void sipProtectVirt_actionEvent(bool,QActionEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent*);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool,QDropEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    void sipProtectVirt_changeEvent(bool,QEvent*);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const QByteArray&,void*,long*);
    QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool,QPainter*) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void changeEvent(QEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void closeEvent(QCloseEvent*);
    void resizeEvent(QResizeEvent*);
    void moveEvent(QMoveEvent*);
    void paintEvent(QPaintEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    bool event(QEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWidget(const sipQWidget &);
    sipQWidget &operator = (const sipQWidget &);

    char sipPyMethods[46];
};

sipQWidget::sipQWidget(QWidget*a0,Qt::WindowFlags a1): QWidget(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWidget::~sipQWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWidget::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QWidget);
}

int sipQWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QWidget,_c,_id,_a);

    return _id;
}

void *sipQWidget::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QWidget, _clname, &sipCpp) ? sipCpp : QWidget::qt_metacast(_clname));
}

void sipQWidget::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWidget::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWidget::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWidget::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWidget::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWidget::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWidget::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWidget::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQWidget::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QWidget::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQWidget::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QWidget::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQWidget::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QWidget::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQWidget::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QWidget::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QWidget::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QWidget::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QWidget::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QWidget::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QWidget::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QWidget::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QWidget::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QWidget::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QWidget::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QWidget::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QWidget::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWidget::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QWidget::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWidget::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QWidget::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QWidget::heightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QWidget::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QWidget::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQWidget::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQWidget::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQWidget::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQWidget::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQWidget::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQWidget::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQWidget::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQWidget::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQWidget::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

bool sipQWidget::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QWidget::event(a0) : event(a0));
}

void sipQWidget::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQWidget::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQWidget::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQWidget::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQWidget::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QWidget::wheelEvent(a0) : wheelEvent(a0));
}

void sipQWidget::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QWidget::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQWidget::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQWidget::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QWidget::focusInEvent(a0) : focusInEvent(a0));
}

void sipQWidget::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QWidget::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQWidget::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQWidget::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQWidget::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent*a0)
{
    (sipSelfWasArg ? QWidget::paintEvent(a0) : paintEvent(a0));
}

void sipQWidget::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQWidget::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QWidget::resizeEvent(a0) : resizeEvent(a0));
}

void sipQWidget::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent*a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQWidget::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent*a0)
{
    (sipSelfWasArg ? QWidget::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQWidget::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQWidget::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent*a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQWidget::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQWidget::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQWidget::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQWidget::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QWidget::dropEvent(a0) : dropEvent(a0));
}

void sipQWidget::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QWidget::showEvent(a0) : showEvent(a0));
}

void sipQWidget::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

void sipQWidget::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::changeEvent(a0) : changeEvent(a0));
}

int sipQWidget::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQWidget::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QWidget::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQWidget::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQWidget::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQWidget::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQWidget::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QWidget::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipQWidget::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQWidget::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

bool sipQWidget::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ? QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

QPainter* sipQWidget::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QWidget::sharedPainter() : sharedPainter());
}

void sipQWidget::sipProtectVirt_initPainter(bool sipSelfWasArg,QPainter*a0) const
{
    (sipSelfWasArg ? QWidget::initPainter(a0) : initPainter(a0));
}


PyDoc_STRVAR(doc_QWidget_sender, "QWidget.sender() -> QObject");

extern "C" {static PyObject *meth_QWidget_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1486 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_sender, doc_QWidget_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_receivers, "QWidget.receivers(signal) -> int");

extern "C" {static PyObject *meth_QWidget_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1545 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_receivers, doc_QWidget_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_timerEvent, "QWidget.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QWidget_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_timerEvent, doc_QWidget_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_childEvent, "QWidget.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QWidget_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_childEvent, doc_QWidget_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_customEvent, "QWidget.customEvent(QEvent)");

extern "C" {static PyObject *meth_QWidget_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_customEvent, doc_QWidget_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_connectNotify, "QWidget.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWidget_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_connectNotify, doc_QWidget_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_disconnectNotify, "QWidget.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWidget_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_disconnectNotify, doc_QWidget_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_senderSignalIndex, "QWidget.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QWidget_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_senderSignalIndex, doc_QWidget_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isSignalConnected, "QWidget.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QWidget_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isSignalConnected, doc_QWidget_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_devType, "QWidget.devType() -> int");

extern "C" {static PyObject *meth_QWidget_devType(PyObject *, PyObject *);}
static PyObject *meth_QWidget_devType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWidget::devType() : sipCpp->devType());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_devType, doc_QWidget_devType);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_style, "QWidget.style() -> QStyle");

extern "C" {static PyObject *meth_QWidget_style(PyObject *, PyObject *);}
static PyObject *meth_QWidget_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QStyle*sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromType(sipRes,sipType_QStyle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_style, doc_QWidget_style);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setStyle, "QWidget.setStyle(QStyle)");

extern "C" {static PyObject *meth_QWidget_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyle* a0;
        PyObject *a0Keep;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWidget, &sipCpp, &a0Keep, sipType_QStyle, &a0))
        {
            sipCpp->setStyle(a0);

            sipKeepReference(sipSelf, -58, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setStyle, doc_QWidget_setStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isEnabledTo, "QWidget.isEnabledTo(QWidget) -> bool");

extern "C" {static PyObject *meth_QWidget_isEnabledTo(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isEnabledTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget* a0;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QWidget, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isEnabledTo(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isEnabledTo, doc_QWidget_isEnabledTo);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setEnabled, "QWidget.setEnabled(bool)");

extern "C" {static PyObject *meth_QWidget_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setEnabled, doc_QWidget_setEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setDisabled, "QWidget.setDisabled(bool)");

extern "C" {static PyObject *meth_QWidget_setDisabled(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setDisabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setDisabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setDisabled, doc_QWidget_setDisabled);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setWindowModified, "QWidget.setWindowModified(bool)");

extern "C" {static PyObject *meth_QWidget_setWindowModified(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setWindowModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setWindowModified(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setWindowModified, doc_QWidget_setWindowModified);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_frameGeometry, "QWidget.frameGeometry() -> QRect");

extern "C" {static PyObject *meth_QWidget_frameGeometry(PyObject *, PyObject *);}
static PyObject *meth_QWidget_frameGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->frameGeometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_frameGeometry, doc_QWidget_frameGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_normalGeometry, "QWidget.normalGeometry() -> QRect");

extern "C" {static PyObject *meth_QWidget_normalGeometry(PyObject *, PyObject *);}
static PyObject *meth_QWidget_normalGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->normalGeometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_normalGeometry, doc_QWidget_normalGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_x, "QWidget.x() -> int");

extern "C" {static PyObject *meth_QWidget_x(PyObject *, PyObject *);}
static PyObject *meth_QWidget_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->x();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_x, doc_QWidget_x);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_y, "QWidget.y() -> int");

extern "C" {static PyObject *meth_QWidget_y(PyObject *, PyObject *);}
static PyObject *meth_QWidget_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->y();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_y, doc_QWidget_y);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_pos, "QWidget.pos() -> QPoint");

extern "C" {static PyObject *meth_QWidget_pos(PyObject *, PyObject *);}
static PyObject *meth_QWidget_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_pos, doc_QWidget_pos);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_frameSize, "QWidget.frameSize() -> QSize");

extern "C" {static PyObject *meth_QWidget_frameSize(PyObject *, PyObject *);}
static PyObject *meth_QWidget_frameSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->frameSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_frameSize, doc_QWidget_frameSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_childrenRect, "QWidget.childrenRect() -> QRect");

extern "C" {static PyObject *meth_QWidget_childrenRect(PyObject *, PyObject *);}
static PyObject *meth_QWidget_childrenRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->childrenRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_childrenRect, doc_QWidget_childrenRect);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_childrenRegion, "QWidget.childrenRegion() -> QRegion");

extern "C" {static PyObject *meth_QWidget_childrenRegion(PyObject *, PyObject *);}
static PyObject *meth_QWidget_childrenRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QRegion*sipRes;

            sipRes = new QRegion(sipCpp->childrenRegion());

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_childrenRegion, doc_QWidget_childrenRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_minimumSize, "QWidget.minimumSize() -> QSize");

extern "C" {static PyObject *meth_QWidget_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QWidget_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->minimumSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_minimumSize, doc_QWidget_minimumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_maximumSize, "QWidget.maximumSize() -> QSize");

extern "C" {static PyObject *meth_QWidget_maximumSize(PyObject *, PyObject *);}
static PyObject *meth_QWidget_maximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->maximumSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_maximumSize, doc_QWidget_maximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setMinimumSize, "QWidget.setMinimumSize(int, int)\n"
    "QWidget.setMinimumSize(QSize)");

extern "C" {static PyObject *meth_QWidget_setMinimumSize(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setMinimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->setMinimumSize(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QSize* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setMinimumSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setMinimumSize, doc_QWidget_setMinimumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setMaximumSize, "QWidget.setMaximumSize(int, int)\n"
    "QWidget.setMaximumSize(QSize)");

extern "C" {static PyObject *meth_QWidget_setMaximumSize(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setMaximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->setMaximumSize(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QSize* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setMaximumSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setMaximumSize, doc_QWidget_setMaximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setMinimumWidth, "QWidget.setMinimumWidth(int)");

extern "C" {static PyObject *meth_QWidget_setMinimumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setMinimumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setMinimumWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setMinimumWidth, doc_QWidget_setMinimumWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setMinimumHeight, "QWidget.setMinimumHeight(int)");

extern "C" {static PyObject *meth_QWidget_setMinimumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setMinimumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setMinimumHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setMinimumHeight, doc_QWidget_setMinimumHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setMaximumWidth, "QWidget.setMaximumWidth(int)");

extern "C" {static PyObject *meth_QWidget_setMaximumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setMaximumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setMaximumWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setMaximumWidth, doc_QWidget_setMaximumWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setMaximumHeight, "QWidget.setMaximumHeight(int)");

extern "C" {static PyObject *meth_QWidget_setMaximumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setMaximumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setMaximumHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setMaximumHeight, doc_QWidget_setMaximumHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_sizeIncrement, "QWidget.sizeIncrement() -> QSize");

extern "C" {static PyObject *meth_QWidget_sizeIncrement(PyObject *, PyObject *);}
static PyObject *meth_QWidget_sizeIncrement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->sizeIncrement());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_sizeIncrement, doc_QWidget_sizeIncrement);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setSizeIncrement, "QWidget.setSizeIncrement(int, int)\n"
    "QWidget.setSizeIncrement(QSize)");

extern "C" {static PyObject *meth_QWidget_setSizeIncrement(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setSizeIncrement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->setSizeIncrement(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QSize* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setSizeIncrement(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setSizeIncrement, doc_QWidget_setSizeIncrement);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_baseSize, "QWidget.baseSize() -> QSize");

extern "C" {static PyObject *meth_QWidget_baseSize(PyObject *, PyObject *);}
static PyObject *meth_QWidget_baseSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->baseSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_baseSize, doc_QWidget_baseSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setBaseSize, "QWidget.setBaseSize(int, int)\n"
    "QWidget.setBaseSize(QSize)");

extern "C" {static PyObject *meth_QWidget_setBaseSize(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setBaseSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->setBaseSize(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QSize* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setBaseSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setBaseSize, doc_QWidget_setBaseSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setFixedSize, "QWidget.setFixedSize(QSize)\n"
    "QWidget.setFixedSize(int, int)");

extern "C" {static PyObject *meth_QWidget_setFixedSize(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setFixedSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setFixedSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->setFixedSize(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setFixedSize, doc_QWidget_setFixedSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setFixedWidth, "QWidget.setFixedWidth(int)");

extern "C" {static PyObject *meth_QWidget_setFixedWidth(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setFixedWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setFixedWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setFixedWidth, doc_QWidget_setFixedWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setFixedHeight, "QWidget.setFixedHeight(int)");

extern "C" {static PyObject *meth_QWidget_setFixedHeight(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setFixedHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setFixedHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setFixedHeight, doc_QWidget_setFixedHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_mapToGlobal, "QWidget.mapToGlobal(QPoint) -> QPoint");

extern "C" {static PyObject *meth_QWidget_mapToGlobal(PyObject *, PyObject *);}
static PyObject *meth_QWidget_mapToGlobal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPoint, &a0))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->mapToGlobal(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_mapToGlobal, doc_QWidget_mapToGlobal);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_mapFromGlobal, "QWidget.mapFromGlobal(QPoint) -> QPoint");

extern "C" {static PyObject *meth_QWidget_mapFromGlobal(PyObject *, PyObject *);}
static PyObject *meth_QWidget_mapFromGlobal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPoint, &a0))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->mapFromGlobal(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_mapFromGlobal, doc_QWidget_mapFromGlobal);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_mapToParent, "QWidget.mapToParent(QPoint) -> QPoint");

extern "C" {static PyObject *meth_QWidget_mapToParent(PyObject *, PyObject *);}
static PyObject *meth_QWidget_mapToParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPoint, &a0))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->mapToParent(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_mapToParent, doc_QWidget_mapToParent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_mapFromParent, "QWidget.mapFromParent(QPoint) -> QPoint");

extern "C" {static PyObject *meth_QWidget_mapFromParent(PyObject *, PyObject *);}
static PyObject *meth_QWidget_mapFromParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPoint, &a0))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->mapFromParent(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_mapFromParent, doc_QWidget_mapFromParent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_mapTo, "QWidget.mapTo(QWidget, QPoint) -> QPoint");

extern "C" {static PyObject *meth_QWidget_mapTo(PyObject *, PyObject *);}
static PyObject *meth_QWidget_mapTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget* a0;
        const QPoint* a1;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QWidget, &a0, sipType_QPoint, &a1))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->mapTo(a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_mapTo, doc_QWidget_mapTo);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_mapFrom, "QWidget.mapFrom(QWidget, QPoint) -> QPoint");

extern "C" {static PyObject *meth_QWidget_mapFrom(PyObject *, PyObject *);}
static PyObject *meth_QWidget_mapFrom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget* a0;
        const QPoint* a1;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QWidget, &a0, sipType_QPoint, &a1))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->mapFrom(a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_mapFrom, doc_QWidget_mapFrom);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_window, "QWidget.window() -> QWidget");

extern "C" {static PyObject *meth_QWidget_window(PyObject *, PyObject *);}
static PyObject *meth_QWidget_window(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->window();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_window, doc_QWidget_window);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_palette, "QWidget.palette() -> QPalette");

extern "C" {static PyObject *meth_QWidget_palette(PyObject *, PyObject *);}
static PyObject *meth_QWidget_palette(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QPalette*sipRes;

            sipRes = new QPalette(sipCpp->palette());

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_palette, doc_QWidget_palette);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setPalette, "QWidget.setPalette(QPalette)");

extern "C" {static PyObject *meth_QWidget_setPalette(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setPalette(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPalette, &a0))
        {
            sipCpp->setPalette(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setPalette, doc_QWidget_setPalette);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setBackgroundRole, "QWidget.setBackgroundRole(QPalette.ColorRole)");

extern "C" {static PyObject *meth_QWidget_setBackgroundRole(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setBackgroundRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPalette::ColorRole a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPalette_ColorRole, &a0))
        {
            sipCpp->setBackgroundRole(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setBackgroundRole, doc_QWidget_setBackgroundRole);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_backgroundRole, "QWidget.backgroundRole() -> QPalette.ColorRole");

extern "C" {static PyObject *meth_QWidget_backgroundRole(PyObject *, PyObject *);}
static PyObject *meth_QWidget_backgroundRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QPalette::ColorRole sipRes;

            sipRes = sipCpp->backgroundRole();

            return sipConvertFromEnum(sipRes,sipType_QPalette_ColorRole);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_backgroundRole, doc_QWidget_backgroundRole);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setForegroundRole, "QWidget.setForegroundRole(QPalette.ColorRole)");

extern "C" {static PyObject *meth_QWidget_setForegroundRole(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setForegroundRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPalette::ColorRole a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPalette_ColorRole, &a0))
        {
            sipCpp->setForegroundRole(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setForegroundRole, doc_QWidget_setForegroundRole);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_foregroundRole, "QWidget.foregroundRole() -> QPalette.ColorRole");

extern "C" {static PyObject *meth_QWidget_foregroundRole(PyObject *, PyObject *);}
static PyObject *meth_QWidget_foregroundRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QPalette::ColorRole sipRes;

            sipRes = sipCpp->foregroundRole();

            return sipConvertFromEnum(sipRes,sipType_QPalette_ColorRole);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_foregroundRole, doc_QWidget_foregroundRole);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setFont, "QWidget.setFont(QFont)");

extern "C" {static PyObject *meth_QWidget_setFont(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setFont, doc_QWidget_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_cursor, "QWidget.cursor() -> QCursor");

extern "C" {static PyObject *meth_QWidget_cursor(PyObject *, PyObject *);}
static PyObject *meth_QWidget_cursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QCursor*sipRes;

            sipRes = new QCursor(sipCpp->cursor());

            return sipConvertFromNewType(sipRes,sipType_QCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_cursor, doc_QWidget_cursor);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setCursor, "QWidget.setCursor(QCursor)");

extern "C" {static PyObject *meth_QWidget_setCursor(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCursor* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QCursor, &a0, &a0State))
        {
            sipCpp->setCursor(*a0);
            sipReleaseType(const_cast<QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setCursor, doc_QWidget_setCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_unsetCursor, "QWidget.unsetCursor()");

extern "C" {static PyObject *meth_QWidget_unsetCursor(PyObject *, PyObject *);}
static PyObject *meth_QWidget_unsetCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->unsetCursor();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_unsetCursor, doc_QWidget_unsetCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setMask, "QWidget.setMask(QBitmap)\n"
    "QWidget.setMask(QRegion)");

extern "C" {static PyObject *meth_QWidget_setMask(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBitmap* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QBitmap, &a0))
        {
            sipCpp->setMask(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRegion* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->setMask(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setMask, doc_QWidget_setMask);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_mask, "QWidget.mask() -> QRegion");

extern "C" {static PyObject *meth_QWidget_mask(PyObject *, PyObject *);}
static PyObject *meth_QWidget_mask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QRegion*sipRes;

            sipRes = new QRegion(sipCpp->mask());

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_mask, doc_QWidget_mask);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_clearMask, "QWidget.clearMask()");

extern "C" {static PyObject *meth_QWidget_clearMask(PyObject *, PyObject *);}
static PyObject *meth_QWidget_clearMask(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->clearMask();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_clearMask, doc_QWidget_clearMask);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setWindowTitle, "QWidget.setWindowTitle(str)");

extern "C" {static PyObject *meth_QWidget_setWindowTitle(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setWindowTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWindowTitle(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setWindowTitle, doc_QWidget_setWindowTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_windowTitle, "QWidget.windowTitle() -> str");

extern "C" {static PyObject *meth_QWidget_windowTitle(PyObject *, PyObject *);}
static PyObject *meth_QWidget_windowTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->windowTitle());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_windowTitle, doc_QWidget_windowTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setWindowIcon, "QWidget.setWindowIcon(QIcon)");

extern "C" {static PyObject *meth_QWidget_setWindowIcon(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setWindowIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setWindowIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setWindowIcon, doc_QWidget_setWindowIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_windowIcon, "QWidget.windowIcon() -> QIcon");

extern "C" {static PyObject *meth_QWidget_windowIcon(PyObject *, PyObject *);}
static PyObject *meth_QWidget_windowIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QIcon*sipRes;

            sipRes = new QIcon(sipCpp->windowIcon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_windowIcon, doc_QWidget_windowIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setWindowIconText, "QWidget.setWindowIconText(str)");

extern "C" {static PyObject *meth_QWidget_setWindowIconText(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setWindowIconText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWindowIconText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setWindowIconText, doc_QWidget_setWindowIconText);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_windowIconText, "QWidget.windowIconText() -> str");

extern "C" {static PyObject *meth_QWidget_windowIconText(PyObject *, PyObject *);}
static PyObject *meth_QWidget_windowIconText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->windowIconText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_windowIconText, doc_QWidget_windowIconText);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setWindowRole, "QWidget.setWindowRole(str)");

extern "C" {static PyObject *meth_QWidget_setWindowRole(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setWindowRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWindowRole(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setWindowRole, doc_QWidget_setWindowRole);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_windowRole, "QWidget.windowRole() -> str");

extern "C" {static PyObject *meth_QWidget_windowRole(PyObject *, PyObject *);}
static PyObject *meth_QWidget_windowRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->windowRole());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_windowRole, doc_QWidget_windowRole);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setWindowOpacity, "QWidget.setWindowOpacity(float)");

extern "C" {static PyObject *meth_QWidget_setWindowOpacity(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setWindowOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setWindowOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setWindowOpacity, doc_QWidget_setWindowOpacity);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_windowOpacity, "QWidget.windowOpacity() -> float");

extern "C" {static PyObject *meth_QWidget_windowOpacity(PyObject *, PyObject *);}
static PyObject *meth_QWidget_windowOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->windowOpacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_windowOpacity, doc_QWidget_windowOpacity);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isWindowModified, "QWidget.isWindowModified() -> bool");

extern "C" {static PyObject *meth_QWidget_isWindowModified(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isWindowModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWindowModified();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isWindowModified, doc_QWidget_isWindowModified);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setToolTip, "QWidget.setToolTip(str)");

extern "C" {static PyObject *meth_QWidget_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setToolTip(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setToolTip, doc_QWidget_setToolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_toolTip, "QWidget.toolTip() -> str");

extern "C" {static PyObject *meth_QWidget_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QWidget_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toolTip());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_toolTip, doc_QWidget_toolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setStatusTip, "QWidget.setStatusTip(str)");

extern "C" {static PyObject *meth_QWidget_setStatusTip(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setStatusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setStatusTip(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setStatusTip, doc_QWidget_setStatusTip);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_statusTip, "QWidget.statusTip() -> str");

extern "C" {static PyObject *meth_QWidget_statusTip(PyObject *, PyObject *);}
static PyObject *meth_QWidget_statusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->statusTip());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_statusTip, doc_QWidget_statusTip);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setWhatsThis, "QWidget.setWhatsThis(str)");

extern "C" {static PyObject *meth_QWidget_setWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWhatsThis(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setWhatsThis, doc_QWidget_setWhatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_whatsThis, "QWidget.whatsThis() -> str");

extern "C" {static PyObject *meth_QWidget_whatsThis(PyObject *, PyObject *);}
static PyObject *meth_QWidget_whatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->whatsThis());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_whatsThis, doc_QWidget_whatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_accessibleName, "QWidget.accessibleName() -> str");

extern "C" {static PyObject *meth_QWidget_accessibleName(PyObject *, PyObject *);}
static PyObject *meth_QWidget_accessibleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->accessibleName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_accessibleName, doc_QWidget_accessibleName);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setAccessibleName, "QWidget.setAccessibleName(str)");

extern "C" {static PyObject *meth_QWidget_setAccessibleName(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setAccessibleName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setAccessibleName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setAccessibleName, doc_QWidget_setAccessibleName);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_accessibleDescription, "QWidget.accessibleDescription() -> str");

extern "C" {static PyObject *meth_QWidget_accessibleDescription(PyObject *, PyObject *);}
static PyObject *meth_QWidget_accessibleDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->accessibleDescription());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_accessibleDescription, doc_QWidget_accessibleDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setAccessibleDescription, "QWidget.setAccessibleDescription(str)");

extern "C" {static PyObject *meth_QWidget_setAccessibleDescription(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setAccessibleDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setAccessibleDescription(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setAccessibleDescription, doc_QWidget_setAccessibleDescription);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setLayoutDirection, "QWidget.setLayoutDirection(Qt.LayoutDirection)");

extern "C" {static PyObject *meth_QWidget_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setLayoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::LayoutDirection a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_LayoutDirection, &a0))
        {
            sipCpp->setLayoutDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setLayoutDirection, doc_QWidget_setLayoutDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_layoutDirection, "QWidget.layoutDirection() -> Qt.LayoutDirection");

extern "C" {static PyObject *meth_QWidget_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QWidget_layoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            Qt::LayoutDirection sipRes;

            sipRes = sipCpp->layoutDirection();

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_layoutDirection, doc_QWidget_layoutDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_unsetLayoutDirection, "QWidget.unsetLayoutDirection()");

extern "C" {static PyObject *meth_QWidget_unsetLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QWidget_unsetLayoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->unsetLayoutDirection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_unsetLayoutDirection, doc_QWidget_unsetLayoutDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isRightToLeft, "QWidget.isRightToLeft() -> bool");

extern "C" {static PyObject *meth_QWidget_isRightToLeft(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isRightToLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRightToLeft();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isRightToLeft, doc_QWidget_isRightToLeft);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isLeftToRight, "QWidget.isLeftToRight() -> bool");

extern "C" {static PyObject *meth_QWidget_isLeftToRight(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isLeftToRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLeftToRight();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isLeftToRight, doc_QWidget_isLeftToRight);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setFocus, "QWidget.setFocus()\n"
    "QWidget.setFocus(Qt.FocusReason)");

extern "C" {static PyObject *meth_QWidget_setFocus(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->setFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        Qt::FocusReason a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_FocusReason, &a0))
        {
            sipCpp->setFocus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setFocus, doc_QWidget_setFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isActiveWindow, "QWidget.isActiveWindow() -> bool");

extern "C" {static PyObject *meth_QWidget_isActiveWindow(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isActiveWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActiveWindow();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isActiveWindow, doc_QWidget_isActiveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_activateWindow, "QWidget.activateWindow()");

extern "C" {static PyObject *meth_QWidget_activateWindow(PyObject *, PyObject *);}
static PyObject *meth_QWidget_activateWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->activateWindow();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_activateWindow, doc_QWidget_activateWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_clearFocus, "QWidget.clearFocus()");

extern "C" {static PyObject *meth_QWidget_clearFocus(PyObject *, PyObject *);}
static PyObject *meth_QWidget_clearFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->clearFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_clearFocus, doc_QWidget_clearFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_focusPolicy, "QWidget.focusPolicy() -> Qt.FocusPolicy");

extern "C" {static PyObject *meth_QWidget_focusPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWidget_focusPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            Qt::FocusPolicy sipRes;

            sipRes = sipCpp->focusPolicy();

            return sipConvertFromEnum(sipRes,sipType_Qt_FocusPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_focusPolicy, doc_QWidget_focusPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setFocusPolicy, "QWidget.setFocusPolicy(Qt.FocusPolicy)");

extern "C" {static PyObject *meth_QWidget_setFocusPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setFocusPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::FocusPolicy a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_FocusPolicy, &a0))
        {
            sipCpp->setFocusPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setFocusPolicy, doc_QWidget_setFocusPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_hasFocus, "QWidget.hasFocus() -> bool");

extern "C" {static PyObject *meth_QWidget_hasFocus(PyObject *, PyObject *);}
static PyObject *meth_QWidget_hasFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_hasFocus, doc_QWidget_hasFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setTabOrder, "QWidget.setTabOrder(QWidget, QWidget)");

extern "C" {static PyObject *meth_QWidget_setTabOrder(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setTabOrder(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QWidget* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J8", sipType_QWidget, &a0, sipType_QWidget, &a1))
        {
            QWidget::setTabOrder(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setTabOrder, doc_QWidget_setTabOrder);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setFocusProxy, "QWidget.setFocusProxy(QWidget)");

extern "C" {static PyObject *meth_QWidget_setFocusProxy(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setFocusProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        PyObject *a0Keep;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QWidget, &sipCpp, &a0Keep, sipType_QWidget, &a0))
        {
            sipCpp->setFocusProxy(a0);

            sipKeepReference(sipSelf, -59, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setFocusProxy, doc_QWidget_setFocusProxy);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_focusProxy, "QWidget.focusProxy() -> QWidget");

extern "C" {static PyObject *meth_QWidget_focusProxy(PyObject *, PyObject *);}
static PyObject *meth_QWidget_focusProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->focusProxy();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_focusProxy, doc_QWidget_focusProxy);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_contextMenuPolicy, "QWidget.contextMenuPolicy() -> Qt.ContextMenuPolicy");

extern "C" {static PyObject *meth_QWidget_contextMenuPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWidget_contextMenuPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            Qt::ContextMenuPolicy sipRes;

            sipRes = sipCpp->contextMenuPolicy();

            return sipConvertFromEnum(sipRes,sipType_Qt_ContextMenuPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_contextMenuPolicy, doc_QWidget_contextMenuPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setContextMenuPolicy, "QWidget.setContextMenuPolicy(Qt.ContextMenuPolicy)");

extern "C" {static PyObject *meth_QWidget_setContextMenuPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setContextMenuPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ContextMenuPolicy a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_ContextMenuPolicy, &a0))
        {
            sipCpp->setContextMenuPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setContextMenuPolicy, doc_QWidget_setContextMenuPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_grabMouse, "QWidget.grabMouse()\n"
    "QWidget.grabMouse(QCursor)");

extern "C" {static PyObject *meth_QWidget_grabMouse(PyObject *, PyObject *);}
static PyObject *meth_QWidget_grabMouse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->grabMouse();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QCursor* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QCursor, &a0, &a0State))
        {
            sipCpp->grabMouse(*a0);
            sipReleaseType(const_cast<QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_grabMouse, doc_QWidget_grabMouse);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_releaseMouse, "QWidget.releaseMouse()");

extern "C" {static PyObject *meth_QWidget_releaseMouse(PyObject *, PyObject *);}
static PyObject *meth_QWidget_releaseMouse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->releaseMouse();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_releaseMouse, doc_QWidget_releaseMouse);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_grabKeyboard, "QWidget.grabKeyboard()");

extern "C" {static PyObject *meth_QWidget_grabKeyboard(PyObject *, PyObject *);}
static PyObject *meth_QWidget_grabKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->grabKeyboard();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_grabKeyboard, doc_QWidget_grabKeyboard);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_releaseKeyboard, "QWidget.releaseKeyboard()");

extern "C" {static PyObject *meth_QWidget_releaseKeyboard(PyObject *, PyObject *);}
static PyObject *meth_QWidget_releaseKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->releaseKeyboard();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_releaseKeyboard, doc_QWidget_releaseKeyboard);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_grabShortcut, "QWidget.grabShortcut(QKeySequence, Qt.ShortcutContext context=Qt.WindowShortcut) -> int");

extern "C" {static PyObject *meth_QWidget_grabShortcut(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_grabShortcut(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QKeySequence* a0;
        int a0State = 0;
        Qt::ShortcutContext a1 = Qt::WindowShortcut;
        QWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_context,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_QWidget, &sipCpp, sipType_QKeySequence, &a0, &a0State, sipType_Qt_ShortcutContext, &a1))
        {
            int sipRes;

            sipRes = sipCpp->grabShortcut(*a0,a1);
            sipReleaseType(const_cast<QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_grabShortcut, doc_QWidget_grabShortcut);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_releaseShortcut, "QWidget.releaseShortcut(int)");

extern "C" {static PyObject *meth_QWidget_releaseShortcut(PyObject *, PyObject *);}
static PyObject *meth_QWidget_releaseShortcut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->releaseShortcut(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_releaseShortcut, doc_QWidget_releaseShortcut);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setShortcutEnabled, "QWidget.setShortcutEnabled(int, bool enabled=True)");

extern "C" {static PyObject *meth_QWidget_setShortcutEnabled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_setShortcutEnabled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1 = 1;
        QWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|b", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->setShortcutEnabled(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setShortcutEnabled, doc_QWidget_setShortcutEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_mouseGrabber, "QWidget.mouseGrabber() -> QWidget");

extern "C" {static PyObject *meth_QWidget_mouseGrabber(PyObject *, PyObject *);}
static PyObject *meth_QWidget_mouseGrabber(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidget*sipRes;

            sipRes = QWidget::mouseGrabber();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_mouseGrabber, doc_QWidget_mouseGrabber);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_keyboardGrabber, "QWidget.keyboardGrabber() -> QWidget");

extern "C" {static PyObject *meth_QWidget_keyboardGrabber(PyObject *, PyObject *);}
static PyObject *meth_QWidget_keyboardGrabber(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QWidget*sipRes;

            sipRes = QWidget::keyboardGrabber();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_keyboardGrabber, doc_QWidget_keyboardGrabber);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setUpdatesEnabled, "QWidget.setUpdatesEnabled(bool)");

extern "C" {static PyObject *meth_QWidget_setUpdatesEnabled(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setUpdatesEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setUpdatesEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setUpdatesEnabled, doc_QWidget_setUpdatesEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_update, "QWidget.update()\n"
    "QWidget.update(QRect)\n"
    "QWidget.update(QRegion)\n"
    "QWidget.update(int, int, int, int)");

extern "C" {static PyObject *meth_QWidget_update(PyObject *, PyObject *);}
static PyObject *meth_QWidget_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->update();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->update(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRegion* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->update(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->update(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_update, doc_QWidget_update);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_repaint, "QWidget.repaint()\n"
    "QWidget.repaint(int, int, int, int)\n"
    "QWidget.repaint(QRect)\n"
    "QWidget.repaint(QRegion)");

extern "C" {static PyObject *meth_QWidget_repaint(PyObject *, PyObject *);}
static PyObject *meth_QWidget_repaint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->repaint();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->repaint(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->repaint(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRegion* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->repaint(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_repaint, doc_QWidget_repaint);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setVisible, "QWidget.setVisible(bool)");

extern "C" {static PyObject *meth_QWidget_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QWidget::setVisible(a0) : sipCpp->setVisible(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setVisible, doc_QWidget_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setHidden, "QWidget.setHidden(bool)");

extern "C" {static PyObject *meth_QWidget_setHidden(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setHidden(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setHidden, doc_QWidget_setHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_show, "QWidget.show()");

extern "C" {static PyObject *meth_QWidget_show(PyObject *, PyObject *);}
static PyObject *meth_QWidget_show(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->show();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_show, doc_QWidget_show);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_hide, "QWidget.hide()");

extern "C" {static PyObject *meth_QWidget_hide(PyObject *, PyObject *);}
static PyObject *meth_QWidget_hide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->hide();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_hide, doc_QWidget_hide);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_showMinimized, "QWidget.showMinimized()");

extern "C" {static PyObject *meth_QWidget_showMinimized(PyObject *, PyObject *);}
static PyObject *meth_QWidget_showMinimized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->showMinimized();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_showMinimized, doc_QWidget_showMinimized);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_showMaximized, "QWidget.showMaximized()");

extern "C" {static PyObject *meth_QWidget_showMaximized(PyObject *, PyObject *);}
static PyObject *meth_QWidget_showMaximized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->showMaximized();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_showMaximized, doc_QWidget_showMaximized);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_showFullScreen, "QWidget.showFullScreen()");

extern "C" {static PyObject *meth_QWidget_showFullScreen(PyObject *, PyObject *);}
static PyObject *meth_QWidget_showFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->showFullScreen();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_showFullScreen, doc_QWidget_showFullScreen);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_showNormal, "QWidget.showNormal()");

extern "C" {static PyObject *meth_QWidget_showNormal(PyObject *, PyObject *);}
static PyObject *meth_QWidget_showNormal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->showNormal();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_showNormal, doc_QWidget_showNormal);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_close, "QWidget.close() -> bool");

extern "C" {static PyObject *meth_QWidget_close(PyObject *, PyObject *);}
static PyObject *meth_QWidget_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->close();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_close, doc_QWidget_close);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_raise_, "QWidget.raise_()");

extern "C" {static PyObject *meth_QWidget_raise_(PyObject *, PyObject *);}
static PyObject *meth_QWidget_raise_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->raise();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_raise_, doc_QWidget_raise_);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_lower, "QWidget.lower()");

extern "C" {static PyObject *meth_QWidget_lower(PyObject *, PyObject *);}
static PyObject *meth_QWidget_lower(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->lower();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_lower, doc_QWidget_lower);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_stackUnder, "QWidget.stackUnder(QWidget)");

extern "C" {static PyObject *meth_QWidget_stackUnder(PyObject *, PyObject *);}
static PyObject *meth_QWidget_stackUnder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->stackUnder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_stackUnder, doc_QWidget_stackUnder);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_move, "QWidget.move(QPoint)\n"
    "QWidget.move(int, int)");

extern "C" {static PyObject *meth_QWidget_move(PyObject *, PyObject *);}
static PyObject *meth_QWidget_move(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPoint, &a0))
        {
            sipCpp->move(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->move(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_move, doc_QWidget_move);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_resize, "QWidget.resize(QSize)\n"
    "QWidget.resize(int, int)");

extern "C" {static PyObject *meth_QWidget_resize(PyObject *, PyObject *);}
static PyObject *meth_QWidget_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->resize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->resize(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_resize, doc_QWidget_resize);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setGeometry, "QWidget.setGeometry(QRect)\n"
    "QWidget.setGeometry(int, int, int, int)");

extern "C" {static PyObject *meth_QWidget_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setGeometry(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setGeometry(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setGeometry, doc_QWidget_setGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_adjustSize, "QWidget.adjustSize()");

extern "C" {static PyObject *meth_QWidget_adjustSize(PyObject *, PyObject *);}
static PyObject *meth_QWidget_adjustSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->adjustSize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_adjustSize, doc_QWidget_adjustSize);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isVisibleTo, "QWidget.isVisibleTo(QWidget) -> bool");

extern "C" {static PyObject *meth_QWidget_isVisibleTo(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isVisibleTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget* a0;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QWidget, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isVisibleTo(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isVisibleTo, doc_QWidget_isVisibleTo);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isMinimized, "QWidget.isMinimized() -> bool");

extern "C" {static PyObject *meth_QWidget_isMinimized(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isMinimized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMinimized();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isMinimized, doc_QWidget_isMinimized);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isMaximized, "QWidget.isMaximized() -> bool");

extern "C" {static PyObject *meth_QWidget_isMaximized(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isMaximized(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isMaximized();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isMaximized, doc_QWidget_isMaximized);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isFullScreen, "QWidget.isFullScreen() -> bool");

extern "C" {static PyObject *meth_QWidget_isFullScreen(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isFullScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFullScreen();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isFullScreen, doc_QWidget_isFullScreen);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_windowState, "QWidget.windowState() -> Qt.WindowStates");

extern "C" {static PyObject *meth_QWidget_windowState(PyObject *, PyObject *);}
static PyObject *meth_QWidget_windowState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            Qt::WindowStates*sipRes;

            sipRes = new Qt::WindowStates(sipCpp->windowState());

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_windowState, doc_QWidget_windowState);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setWindowState, "QWidget.setWindowState(Qt.WindowStates)");

extern "C" {static PyObject *meth_QWidget_setWindowState(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setWindowState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::WindowStates* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_WindowStates, &a0, &a0State))
        {
            sipCpp->setWindowState(*a0);
            sipReleaseType(a0,sipType_Qt_WindowStates,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setWindowState, doc_QWidget_setWindowState);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_overrideWindowState, "QWidget.overrideWindowState(Qt.WindowStates)");

extern "C" {static PyObject *meth_QWidget_overrideWindowState(PyObject *, PyObject *);}
static PyObject *meth_QWidget_overrideWindowState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::WindowStates* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_WindowStates, &a0, &a0State))
        {
            sipCpp->overrideWindowState(*a0);
            sipReleaseType(a0,sipType_Qt_WindowStates,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_overrideWindowState, doc_QWidget_overrideWindowState);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_sizeHint, "QWidget.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QWidget_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QWidget_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QWidget::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_sizeHint, doc_QWidget_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_minimumSizeHint, "QWidget.minimumSizeHint() -> QSize");

extern "C" {static PyObject *meth_QWidget_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QWidget_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QWidget::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_minimumSizeHint, doc_QWidget_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_sizePolicy, "QWidget.sizePolicy() -> QSizePolicy");

extern "C" {static PyObject *meth_QWidget_sizePolicy(PyObject *, PyObject *);}
static PyObject *meth_QWidget_sizePolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QSizePolicy*sipRes;

            sipRes = new QSizePolicy(sipCpp->sizePolicy());

            return sipConvertFromNewType(sipRes,sipType_QSizePolicy,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_sizePolicy, doc_QWidget_sizePolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setSizePolicy, "QWidget.setSizePolicy(QSizePolicy)\n"
    "QWidget.setSizePolicy(QSizePolicy.Policy, QSizePolicy.Policy)");

extern "C" {static PyObject *meth_QWidget_setSizePolicy(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setSizePolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSizePolicy* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QSizePolicy, &a0))
        {
            sipCpp->setSizePolicy(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QSizePolicy::Policy a0;
        QSizePolicy::Policy a1;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEE", &sipSelf, sipType_QWidget, &sipCpp, sipType_QSizePolicy_Policy, &a0, sipType_QSizePolicy_Policy, &a1))
        {
            sipCpp->setSizePolicy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setSizePolicy, doc_QWidget_setSizePolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_heightForWidth, "QWidget.heightForWidth(int) -> int");

extern "C" {static PyObject *meth_QWidget_heightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QWidget_heightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWidget::heightForWidth(a0) : sipCpp->heightForWidth(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_heightForWidth, doc_QWidget_heightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_visibleRegion, "QWidget.visibleRegion() -> QRegion");

extern "C" {static PyObject *meth_QWidget_visibleRegion(PyObject *, PyObject *);}
static PyObject *meth_QWidget_visibleRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QRegion*sipRes;

            sipRes = new QRegion(sipCpp->visibleRegion());

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_visibleRegion, doc_QWidget_visibleRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setContentsMargins, "QWidget.setContentsMargins(int, int, int, int)\n"
    "QWidget.setContentsMargins(QMargins)");

extern "C" {static PyObject *meth_QWidget_setContentsMargins(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setContentsMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setContentsMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QMargins* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QMargins, &a0))
        {
            sipCpp->setContentsMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setContentsMargins, doc_QWidget_setContentsMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_getContentsMargins, "QWidget.getContentsMargins() -> (int, int, int, int)");

extern "C" {static PyObject *meth_QWidget_getContentsMargins(PyObject *, PyObject *);}
static PyObject *meth_QWidget_getContentsMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->getContentsMargins(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_getContentsMargins, doc_QWidget_getContentsMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_contentsRect, "QWidget.contentsRect() -> QRect");

extern "C" {static PyObject *meth_QWidget_contentsRect(PyObject *, PyObject *);}
static PyObject *meth_QWidget_contentsRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->contentsRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_contentsRect, doc_QWidget_contentsRect);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_layout, "QWidget.layout() -> QLayout");

extern "C" {static PyObject *meth_QWidget_layout(PyObject *, PyObject *);}
static PyObject *meth_QWidget_layout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QLayout*sipRes;

            sipRes = sipCpp->layout();

            return sipConvertFromType(sipRes,sipType_QLayout,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_layout, doc_QWidget_layout);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setLayout, "QWidget.setLayout(QLayout)");

extern "C" {static PyObject *meth_QWidget_setLayout(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLayout* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QWidget, &sipCpp, sipType_QLayout, &a0))
        {
#line 245 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setLayout(a0);
        Py_END_ALLOW_THREADS
        
        // Internally Qt has reparented all of the widgets in the layout, so we need
        // to update the ownership hierachy.
        qtwidgets_TransferLayoutWidgets(a0, sipSelf);
#line 5697 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setLayout, doc_QWidget_setLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_updateGeometry, "QWidget.updateGeometry()");

extern "C" {static PyObject *meth_QWidget_updateGeometry(PyObject *, PyObject *);}
static PyObject *meth_QWidget_updateGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->updateGeometry();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_updateGeometry, doc_QWidget_updateGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setParent, "QWidget.setParent(QWidget)\n"
    "QWidget.setParent(QWidget, Qt.WindowFlags)");

extern "C" {static PyObject *meth_QWidget_setParent(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        sipWrapper *sipOwner = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJH", &sipSelf, sipType_QWidget, &sipCpp, sipType_QWidget, &a0, &sipOwner))
        {
            sipCpp->setParent(a0);

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QWidget* a0;
        Qt::WindowFlags* a1;
        int a1State = 0;
        sipWrapper *sipOwner = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJHJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QWidget, &a0, &sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            sipCpp->setParent(a0,*a1);

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setParent, doc_QWidget_setParent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_scroll, "QWidget.scroll(int, int)\n"
    "QWidget.scroll(int, int, QRect)");

extern "C" {static PyObject *meth_QWidget_scroll(PyObject *, PyObject *);}
static PyObject *meth_QWidget_scroll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->scroll(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        const QRect* a2;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ9", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1, sipType_QRect, &a2))
        {
            sipCpp->scroll(a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_scroll, doc_QWidget_scroll);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_focusWidget, "QWidget.focusWidget() -> QWidget");

extern "C" {static PyObject *meth_QWidget_focusWidget(PyObject *, PyObject *);}
static PyObject *meth_QWidget_focusWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->focusWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_focusWidget, doc_QWidget_focusWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_nextInFocusChain, "QWidget.nextInFocusChain() -> QWidget");

extern "C" {static PyObject *meth_QWidget_nextInFocusChain(PyObject *, PyObject *);}
static PyObject *meth_QWidget_nextInFocusChain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->nextInFocusChain();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_nextInFocusChain, doc_QWidget_nextInFocusChain);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_acceptDrops, "QWidget.acceptDrops() -> bool");

extern "C" {static PyObject *meth_QWidget_acceptDrops(PyObject *, PyObject *);}
static PyObject *meth_QWidget_acceptDrops(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->acceptDrops();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_acceptDrops, doc_QWidget_acceptDrops);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setAcceptDrops, "QWidget.setAcceptDrops(bool)");

extern "C" {static PyObject *meth_QWidget_setAcceptDrops(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setAcceptDrops(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setAcceptDrops(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setAcceptDrops, doc_QWidget_setAcceptDrops);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_addAction, "QWidget.addAction(QAction)");

extern "C" {static PyObject *meth_QWidget_addAction(PyObject *, PyObject *);}
static PyObject *meth_QWidget_addAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QAction, &a0))
        {
            sipCpp->addAction(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_addAction, doc_QWidget_addAction);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_addActions, "QWidget.addActions(list-of-QAction)");

extern "C" {static PyObject *meth_QWidget_addActions(PyObject *, PyObject *);}
static PyObject *meth_QWidget_addActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QList<QAction*>* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QList_0101QAction,&a0, &a0State))
        {
            sipCpp->addActions(*a0);
            sipReleaseType(a0,sipType_QList_0101QAction,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_addActions, doc_QWidget_addActions);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_insertAction, "QWidget.insertAction(QAction, QAction)");

extern "C" {static PyObject *meth_QWidget_insertAction(PyObject *, PyObject *);}
static PyObject *meth_QWidget_insertAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        QAction* a1;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QAction, &a0, sipType_QAction, &a1))
        {
            sipCpp->insertAction(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_insertAction, doc_QWidget_insertAction);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_insertActions, "QWidget.insertActions(QAction, list-of-QAction)");

extern "C" {static PyObject *meth_QWidget_insertActions(PyObject *, PyObject *);}
static PyObject *meth_QWidget_insertActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        QList<QAction*>* a1;
        int a1State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QAction, &a0, sipType_QList_0101QAction,&a1, &a1State))
        {
            sipCpp->insertActions(a0,*a1);
            sipReleaseType(a1,sipType_QList_0101QAction,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_insertActions, doc_QWidget_insertActions);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_removeAction, "QWidget.removeAction(QAction)");

extern "C" {static PyObject *meth_QWidget_removeAction(PyObject *, PyObject *);}
static PyObject *meth_QWidget_removeAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAction* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QAction, &a0))
        {
            sipCpp->removeAction(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_removeAction, doc_QWidget_removeAction);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_actions, "QWidget.actions() -> list-of-QAction");

extern "C" {static PyObject *meth_QWidget_actions(PyObject *, PyObject *);}
static PyObject *meth_QWidget_actions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QList<QAction*>*sipRes;

            sipRes = new QList<QAction*>(sipCpp->actions());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_actions, doc_QWidget_actions);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setWindowFlags, "QWidget.setWindowFlags(Qt.WindowFlags)");

extern "C" {static PyObject *meth_QWidget_setWindowFlags(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setWindowFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::WindowFlags* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_WindowFlags, &a0, &a0State))
        {
            sipCpp->setWindowFlags(*a0);
            sipReleaseType(a0,sipType_Qt_WindowFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setWindowFlags, doc_QWidget_setWindowFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_overrideWindowFlags, "QWidget.overrideWindowFlags(Qt.WindowFlags)");

extern "C" {static PyObject *meth_QWidget_overrideWindowFlags(PyObject *, PyObject *);}
static PyObject *meth_QWidget_overrideWindowFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::WindowFlags* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_WindowFlags, &a0, &a0State))
        {
            sipCpp->overrideWindowFlags(*a0);
            sipReleaseType(a0,sipType_Qt_WindowFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_overrideWindowFlags, doc_QWidget_overrideWindowFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_find, "QWidget.find(sip.voidptr) -> QWidget");

extern "C" {static PyObject *meth_QWidget_find(PyObject *, PyObject *);}
static PyObject *meth_QWidget_find(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        WId* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_quintptr,&a0, &a0State))
        {
            QWidget*sipRes;

            sipRes = QWidget::find(*a0);
            sipReleaseType(a0,sipType_quintptr,a0State);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_find, doc_QWidget_find);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_childAt, "QWidget.childAt(QPoint) -> QWidget\n"
    "QWidget.childAt(int, int) -> QWidget");

extern "C" {static PyObject *meth_QWidget_childAt(PyObject *, PyObject *);}
static PyObject *meth_QWidget_childAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPoint, &a0))
        {
            QWidget*sipRes;

            sipRes = sipCpp->childAt(*a0);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    {
        int a0;
        int a1;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1))
        {
            QWidget*sipRes;

            sipRes = sipCpp->childAt(a0,a1);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_childAt, doc_QWidget_childAt);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setAttribute, "QWidget.setAttribute(Qt.WidgetAttribute, bool on=True)");

extern "C" {static PyObject *meth_QWidget_setAttribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_setAttribute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::WidgetAttribute a0;
        bool a1 = 1;
        QWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_WidgetAttribute, &a0, &a1))
        {
            sipCpp->setAttribute(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setAttribute, doc_QWidget_setAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_paintEngine, "QWidget.paintEngine() -> QPaintEngine");

extern "C" {static PyObject *meth_QWidget_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QWidget_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QPaintEngine*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWidget::paintEngine() : sipCpp->paintEngine());

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_paintEngine, doc_QWidget_paintEngine);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_ensurePolished, "QWidget.ensurePolished()");

extern "C" {static PyObject *meth_QWidget_ensurePolished(PyObject *, PyObject *);}
static PyObject *meth_QWidget_ensurePolished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->ensurePolished();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_ensurePolished, doc_QWidget_ensurePolished);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isAncestorOf, "QWidget.isAncestorOf(QWidget) -> bool");

extern "C" {static PyObject *meth_QWidget_isAncestorOf(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isAncestorOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget* a0;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QWidget, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isAncestorOf(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isAncestorOf, doc_QWidget_isAncestorOf);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_event, "QWidget.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QWidget_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_event, doc_QWidget_event);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_mousePressEvent, "QWidget.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QWidget_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_mousePressEvent, doc_QWidget_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_mouseReleaseEvent, "QWidget.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QWidget_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_mouseReleaseEvent, doc_QWidget_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_mouseDoubleClickEvent, "QWidget.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QWidget_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_mouseDoubleClickEvent, doc_QWidget_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_mouseMoveEvent, "QWidget.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QWidget_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_mouseMoveEvent, doc_QWidget_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_wheelEvent, "QWidget.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QWidget_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_wheelEvent, doc_QWidget_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_keyPressEvent, "QWidget.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QWidget_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_keyPressEvent, doc_QWidget_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_keyReleaseEvent, "QWidget.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QWidget_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_keyReleaseEvent, doc_QWidget_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_focusInEvent, "QWidget.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QWidget_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_focusInEvent, doc_QWidget_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_focusOutEvent, "QWidget.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QWidget_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_focusOutEvent, doc_QWidget_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_enterEvent, "QWidget.enterEvent(QEvent)");

extern "C" {static PyObject *meth_QWidget_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_enterEvent, doc_QWidget_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_leaveEvent, "QWidget.leaveEvent(QEvent)");

extern "C" {static PyObject *meth_QWidget_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_leaveEvent, doc_QWidget_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_paintEvent, "QWidget.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QWidget_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_paintEvent, doc_QWidget_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_moveEvent, "QWidget.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QWidget_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_moveEvent, doc_QWidget_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_resizeEvent, "QWidget.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QWidget_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_resizeEvent, doc_QWidget_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_closeEvent, "QWidget.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QWidget_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_closeEvent, doc_QWidget_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_contextMenuEvent, "QWidget.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QWidget_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_contextMenuEvent, doc_QWidget_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_tabletEvent, "QWidget.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QWidget_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_tabletEvent, doc_QWidget_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_actionEvent, "QWidget.actionEvent(QActionEvent)");

extern "C" {static PyObject *meth_QWidget_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_actionEvent, doc_QWidget_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_dragEnterEvent, "QWidget.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QWidget_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_dragEnterEvent, doc_QWidget_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_dragMoveEvent, "QWidget.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QWidget_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_dragMoveEvent, doc_QWidget_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_dragLeaveEvent, "QWidget.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QWidget_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_dragLeaveEvent, doc_QWidget_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_dropEvent, "QWidget.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QWidget_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_dropEvent, doc_QWidget_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_showEvent, "QWidget.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QWidget_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_showEvent, doc_QWidget_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_hideEvent, "QWidget.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QWidget_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_hideEvent, doc_QWidget_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_changeEvent, "QWidget.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QWidget_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_changeEvent, doc_QWidget_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_metric, "QWidget.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QWidget_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_metric, doc_QWidget_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_inputMethodEvent, "QWidget.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QWidget_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_inputMethodEvent, doc_QWidget_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_inputMethodQuery, "QWidget.inputMethodQuery(Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QWidget_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QWidget_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QWidget::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_inputMethodQuery, doc_QWidget_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_updateMicroFocus, "QWidget.updateMicroFocus()");

extern "C" {static PyObject *meth_QWidget_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_updateMicroFocus, doc_QWidget_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_create, "QWidget.create(sip.voidptr window=0, bool initializeWindow=True, bool destroyOldWindow=True)");

extern "C" {static PyObject *meth_QWidget_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0def = 0;
        WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QWidget, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_create, doc_QWidget_create);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_destroy, "QWidget.destroy(bool destroyWindow=True, bool destroySubWindows=True)");

extern "C" {static PyObject *meth_QWidget_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_destroy, doc_QWidget_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_focusNextPrevChild, "QWidget.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QWidget_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_focusNextPrevChild, doc_QWidget_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_focusNextChild, "QWidget.focusNextChild() -> bool");

extern "C" {static PyObject *meth_QWidget_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_focusNextChild, doc_QWidget_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_focusPreviousChild, "QWidget.focusPreviousChild() -> bool");

extern "C" {static PyObject *meth_QWidget_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_focusPreviousChild, doc_QWidget_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_windowType, "QWidget.windowType() -> Qt.WindowType");

extern "C" {static PyObject *meth_QWidget_windowType(PyObject *, PyObject *);}
static PyObject *meth_QWidget_windowType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            Qt::WindowType sipRes;

            sipRes = sipCpp->windowType();

            return sipConvertFromEnum(sipRes,sipType_Qt_WindowType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_windowType, doc_QWidget_windowType);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_windowFlags, "QWidget.windowFlags() -> Qt.WindowFlags");

extern "C" {static PyObject *meth_QWidget_windowFlags(PyObject *, PyObject *);}
static PyObject *meth_QWidget_windowFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            Qt::WindowFlags*sipRes;

            sipRes = new Qt::WindowFlags(sipCpp->windowFlags());

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_windowFlags, doc_QWidget_windowFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_winId, "QWidget.winId() -> sip.voidptr");

extern "C" {static PyObject *meth_QWidget_winId(PyObject *, PyObject *);}
static PyObject *meth_QWidget_winId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            WId*sipRes;

            sipRes = new WId(sipCpp->winId());

            return sipConvertFromNewType(sipRes,sipType_quintptr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_winId, doc_QWidget_winId);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isWindow, "QWidget.isWindow() -> bool");

extern "C" {static PyObject *meth_QWidget_isWindow(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWindow();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isWindow, doc_QWidget_isWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isEnabled, "QWidget.isEnabled() -> bool");

extern "C" {static PyObject *meth_QWidget_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isEnabled, doc_QWidget_isEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isModal, "QWidget.isModal() -> bool");

extern "C" {static PyObject *meth_QWidget_isModal(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isModal(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isModal();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isModal, doc_QWidget_isModal);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_minimumWidth, "QWidget.minimumWidth() -> int");

extern "C" {static PyObject *meth_QWidget_minimumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWidget_minimumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_minimumWidth, doc_QWidget_minimumWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_minimumHeight, "QWidget.minimumHeight() -> int");

extern "C" {static PyObject *meth_QWidget_minimumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWidget_minimumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minimumHeight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_minimumHeight, doc_QWidget_minimumHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_maximumWidth, "QWidget.maximumWidth() -> int");

extern "C" {static PyObject *meth_QWidget_maximumWidth(PyObject *, PyObject *);}
static PyObject *meth_QWidget_maximumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_maximumWidth, doc_QWidget_maximumWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_maximumHeight, "QWidget.maximumHeight() -> int");

extern "C" {static PyObject *meth_QWidget_maximumHeight(PyObject *, PyObject *);}
static PyObject *meth_QWidget_maximumHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->maximumHeight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_maximumHeight, doc_QWidget_maximumHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_font, "QWidget.font() -> QFont");

extern "C" {static PyObject *meth_QWidget_font(PyObject *, PyObject *);}
static PyObject *meth_QWidget_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QFont*sipRes;

            sipRes = new QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_font, doc_QWidget_font);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_fontMetrics, "QWidget.fontMetrics() -> QFontMetrics");

extern "C" {static PyObject *meth_QWidget_fontMetrics(PyObject *, PyObject *);}
static PyObject *meth_QWidget_fontMetrics(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QFontMetrics*sipRes;

            sipRes = new QFontMetrics(sipCpp->fontMetrics());

            return sipConvertFromNewType(sipRes,sipType_QFontMetrics,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_fontMetrics, doc_QWidget_fontMetrics);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_fontInfo, "QWidget.fontInfo() -> QFontInfo");

extern "C" {static PyObject *meth_QWidget_fontInfo(PyObject *, PyObject *);}
static PyObject *meth_QWidget_fontInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QFontInfo*sipRes;

            sipRes = new QFontInfo(sipCpp->fontInfo());

            return sipConvertFromNewType(sipRes,sipType_QFontInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_fontInfo, doc_QWidget_fontInfo);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setMouseTracking, "QWidget.setMouseTracking(bool)");

extern "C" {static PyObject *meth_QWidget_setMouseTracking(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setMouseTracking(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setMouseTracking(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setMouseTracking, doc_QWidget_setMouseTracking);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_hasMouseTracking, "QWidget.hasMouseTracking() -> bool");

extern "C" {static PyObject *meth_QWidget_hasMouseTracking(PyObject *, PyObject *);}
static PyObject *meth_QWidget_hasMouseTracking(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasMouseTracking();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_hasMouseTracking, doc_QWidget_hasMouseTracking);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_underMouse, "QWidget.underMouse() -> bool");

extern "C" {static PyObject *meth_QWidget_underMouse(PyObject *, PyObject *);}
static PyObject *meth_QWidget_underMouse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->underMouse();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_underMouse, doc_QWidget_underMouse);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_updatesEnabled, "QWidget.updatesEnabled() -> bool");

extern "C" {static PyObject *meth_QWidget_updatesEnabled(PyObject *, PyObject *);}
static PyObject *meth_QWidget_updatesEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->updatesEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_updatesEnabled, doc_QWidget_updatesEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isVisible, "QWidget.isVisible() -> bool");

extern "C" {static PyObject *meth_QWidget_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isVisible, doc_QWidget_isVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_isHidden, "QWidget.isHidden() -> bool");

extern "C" {static PyObject *meth_QWidget_isHidden(PyObject *, PyObject *);}
static PyObject *meth_QWidget_isHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isHidden();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_isHidden, doc_QWidget_isHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_rect, "QWidget.rect() -> QRect");

extern "C" {static PyObject *meth_QWidget_rect(PyObject *, PyObject *);}
static PyObject *meth_QWidget_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->rect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_rect, doc_QWidget_rect);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_geometry, "QWidget.geometry() -> QRect");

extern "C" {static PyObject *meth_QWidget_geometry(PyObject *, PyObject *);}
static PyObject *meth_QWidget_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->geometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_geometry, doc_QWidget_geometry);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_size, "QWidget.size() -> QSize");

extern "C" {static PyObject *meth_QWidget_size(PyObject *, PyObject *);}
static PyObject *meth_QWidget_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->size());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_size, doc_QWidget_size);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_width, "QWidget.width() -> int");

extern "C" {static PyObject *meth_QWidget_width(PyObject *, PyObject *);}
static PyObject *meth_QWidget_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->width();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_width, doc_QWidget_width);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_height, "QWidget.height() -> int");

extern "C" {static PyObject *meth_QWidget_height(PyObject *, PyObject *);}
static PyObject *meth_QWidget_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->height();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_height, doc_QWidget_height);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_parentWidget, "QWidget.parentWidget() -> QWidget");

extern "C" {static PyObject *meth_QWidget_parentWidget(PyObject *, PyObject *);}
static PyObject *meth_QWidget_parentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->parentWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_parentWidget, doc_QWidget_parentWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_testAttribute, "QWidget.testAttribute(Qt.WidgetAttribute) -> bool");

extern "C" {static PyObject *meth_QWidget_testAttribute(PyObject *, PyObject *);}
static PyObject *meth_QWidget_testAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::WidgetAttribute a0;
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_WidgetAttribute, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->testAttribute(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_testAttribute, doc_QWidget_testAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_windowModality, "QWidget.windowModality() -> Qt.WindowModality");

extern "C" {static PyObject *meth_QWidget_windowModality(PyObject *, PyObject *);}
static PyObject *meth_QWidget_windowModality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            Qt::WindowModality sipRes;

            sipRes = sipCpp->windowModality();

            return sipConvertFromEnum(sipRes,sipType_Qt_WindowModality);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_windowModality, doc_QWidget_windowModality);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setWindowModality, "QWidget.setWindowModality(Qt.WindowModality)");

extern "C" {static PyObject *meth_QWidget_setWindowModality(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setWindowModality(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::WindowModality a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_WindowModality, &a0))
        {
            sipCpp->setWindowModality(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setWindowModality, doc_QWidget_setWindowModality);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_autoFillBackground, "QWidget.autoFillBackground() -> bool");

extern "C" {static PyObject *meth_QWidget_autoFillBackground(PyObject *, PyObject *);}
static PyObject *meth_QWidget_autoFillBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoFillBackground();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_autoFillBackground, doc_QWidget_autoFillBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setAutoFillBackground, "QWidget.setAutoFillBackground(bool)");

extern "C" {static PyObject *meth_QWidget_setAutoFillBackground(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setAutoFillBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setAutoFillBackground(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setAutoFillBackground, doc_QWidget_setAutoFillBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setStyleSheet, "QWidget.setStyleSheet(str)");

extern "C" {static PyObject *meth_QWidget_setStyleSheet(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setStyleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setStyleSheet(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setStyleSheet, doc_QWidget_setStyleSheet);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_styleSheet, "QWidget.styleSheet() -> str");

extern "C" {static PyObject *meth_QWidget_styleSheet(PyObject *, PyObject *);}
static PyObject *meth_QWidget_styleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->styleSheet());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_styleSheet, doc_QWidget_styleSheet);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setShortcutAutoRepeat, "QWidget.setShortcutAutoRepeat(int, bool enabled=True)");

extern "C" {static PyObject *meth_QWidget_setShortcutAutoRepeat(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_setShortcutAutoRepeat(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1 = 1;
        QWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|b", &sipSelf, sipType_QWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->setShortcutAutoRepeat(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setShortcutAutoRepeat, doc_QWidget_setShortcutAutoRepeat);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_saveGeometry, "QWidget.saveGeometry() -> QByteArray");

extern "C" {static PyObject *meth_QWidget_saveGeometry(PyObject *, PyObject *);}
static PyObject *meth_QWidget_saveGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->saveGeometry());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_saveGeometry, doc_QWidget_saveGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_restoreGeometry, "QWidget.restoreGeometry(QByteArray) -> bool");

extern "C" {static PyObject *meth_QWidget_restoreGeometry(PyObject *, PyObject *);}
static PyObject *meth_QWidget_restoreGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->restoreGeometry(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_restoreGeometry, doc_QWidget_restoreGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_render, "QWidget.render(QPaintDevice, QPoint targetOffset=QPoint(), QRegion sourceRegion=QRegion(), QWidget.RenderFlags flags=QWidget.DrawWindowBackground|QWidget.DrawChildren)\n"
    "QWidget.render(QPainter, QPoint targetOffset=QPoint(), QRegion sourceRegion=QRegion(), QWidget.RenderFlags flags=QWidget.DrawWindowBackground|QWidget.DrawChildren)");

extern "C" {static PyObject *meth_QWidget_render(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_render(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPaintDevice* a0;
        const QPoint& a1def = QPoint();
        const QPoint* a1 = &a1def;
        const QRegion& a2def = QRegion();
        const QRegion* a2 = &a2def;
        QWidget::RenderFlags a3def = QWidget::DrawWindowBackground|QWidget::DrawChildren;
        QWidget::RenderFlags* a3 = &a3def;
        int a3State = 0;
        QWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_targetOffset,
            sipName_sourceRegion,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J9J9J1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPaintDevice, &a0, sipType_QPoint, &a1, sipType_QRegion, &a2, sipType_QWidget_RenderFlags, &a3, &a3State))
        {
            sipCpp->render(a0,*a1,*a2,*a3);
            sipReleaseType(a3,sipType_QWidget_RenderFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPainter* a0;
        const QPoint& a1def = QPoint();
        const QPoint* a1 = &a1def;
        const QRegion& a2def = QRegion();
        const QRegion* a2 = &a2def;
        QWidget::RenderFlags a3def = QWidget::DrawWindowBackground|QWidget::DrawChildren;
        QWidget::RenderFlags* a3 = &a3def;
        int a3State = 0;
        QWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_targetOffset,
            sipName_sourceRegion,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J9J9J1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPainter, &a0, sipType_QPoint, &a1, sipType_QRegion, &a2, sipType_QWidget_RenderFlags, &a3, &a3State))
        {
            sipCpp->render(a0,*a1,*a2,*a3);
            sipReleaseType(a3,sipType_QWidget_RenderFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_render, doc_QWidget_render);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setLocale, "QWidget.setLocale(QLocale)");

extern "C" {static PyObject *meth_QWidget_setLocale(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLocale* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QLocale, &a0))
        {
            sipCpp->setLocale(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setLocale, doc_QWidget_setLocale);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_locale, "QWidget.locale() -> QLocale");

extern "C" {static PyObject *meth_QWidget_locale(PyObject *, PyObject *);}
static PyObject *meth_QWidget_locale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QLocale*sipRes;

            sipRes = new QLocale(sipCpp->locale());

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_locale, doc_QWidget_locale);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_unsetLocale, "QWidget.unsetLocale()");

extern "C" {static PyObject *meth_QWidget_unsetLocale(PyObject *, PyObject *);}
static PyObject *meth_QWidget_unsetLocale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            sipCpp->unsetLocale();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_unsetLocale, doc_QWidget_unsetLocale);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_effectiveWinId, "QWidget.effectiveWinId() -> sip.voidptr");

extern "C" {static PyObject *meth_QWidget_effectiveWinId(PyObject *, PyObject *);}
static PyObject *meth_QWidget_effectiveWinId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            WId*sipRes;

            sipRes = new WId(sipCpp->effectiveWinId());

            return sipConvertFromNewType(sipRes,sipType_quintptr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_effectiveWinId, doc_QWidget_effectiveWinId);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_nativeParentWidget, "QWidget.nativeParentWidget() -> QWidget");

extern "C" {static PyObject *meth_QWidget_nativeParentWidget(PyObject *, PyObject *);}
static PyObject *meth_QWidget_nativeParentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->nativeParentWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_nativeParentWidget, doc_QWidget_nativeParentWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setWindowFilePath, "QWidget.setWindowFilePath(str)");

extern "C" {static PyObject *meth_QWidget_setWindowFilePath(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setWindowFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWindowFilePath(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setWindowFilePath, doc_QWidget_setWindowFilePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_windowFilePath, "QWidget.windowFilePath() -> str");

extern "C" {static PyObject *meth_QWidget_windowFilePath(PyObject *, PyObject *);}
static PyObject *meth_QWidget_windowFilePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->windowFilePath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_windowFilePath, doc_QWidget_windowFilePath);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_graphicsProxyWidget, "QWidget.graphicsProxyWidget() -> QGraphicsProxyWidget");

extern "C" {static PyObject *meth_QWidget_graphicsProxyWidget(PyObject *, PyObject *);}
static PyObject *meth_QWidget_graphicsProxyWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QGraphicsProxyWidget*sipRes;

            sipRes = sipCpp->graphicsProxyWidget();

            return sipConvertFromType(sipRes,sipType_QGraphicsProxyWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_graphicsProxyWidget, doc_QWidget_graphicsProxyWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_graphicsEffect, "QWidget.graphicsEffect() -> QGraphicsEffect");

extern "C" {static PyObject *meth_QWidget_graphicsEffect(PyObject *, PyObject *);}
static PyObject *meth_QWidget_graphicsEffect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QGraphicsEffect*sipRes;

            sipRes = sipCpp->graphicsEffect();

            return sipConvertFromType(sipRes,sipType_QGraphicsEffect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_graphicsEffect, doc_QWidget_graphicsEffect);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setGraphicsEffect, "QWidget.setGraphicsEffect(QGraphicsEffect)");

extern "C" {static PyObject *meth_QWidget_setGraphicsEffect(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setGraphicsEffect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsEffect* a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QWidget, &sipCpp, sipType_QGraphicsEffect, &a0))
        {
            sipCpp->setGraphicsEffect(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setGraphicsEffect, doc_QWidget_setGraphicsEffect);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_grabGesture, "QWidget.grabGesture(Qt.GestureType, Qt.GestureFlags flags=Qt.GestureFlags(0))");

extern "C" {static PyObject *meth_QWidget_grabGesture(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_grabGesture(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::GestureType a0;
        Qt::GestureFlags a1def = Qt::GestureFlags(0);
        Qt::GestureFlags* a1 = &a1def;
        int a1State = 0;
        QWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J1", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_GestureType, &a0, sipType_Qt_GestureFlags, &a1, &a1State))
        {
            sipCpp->grabGesture(a0,*a1);
            sipReleaseType(a1,sipType_Qt_GestureFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_grabGesture, doc_QWidget_grabGesture);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_ungrabGesture, "QWidget.ungrabGesture(Qt.GestureType)");

extern "C" {static PyObject *meth_QWidget_ungrabGesture(PyObject *, PyObject *);}
static PyObject *meth_QWidget_ungrabGesture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::GestureType a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_GestureType, &a0))
        {
            sipCpp->ungrabGesture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_ungrabGesture, doc_QWidget_ungrabGesture);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_contentsMargins, "QWidget.contentsMargins() -> QMargins");

extern "C" {static PyObject *meth_QWidget_contentsMargins(PyObject *, PyObject *);}
static PyObject *meth_QWidget_contentsMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QMargins*sipRes;

            sipRes = new QMargins(sipCpp->contentsMargins());

            return sipConvertFromNewType(sipRes,sipType_QMargins,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_contentsMargins, doc_QWidget_contentsMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_previousInFocusChain, "QWidget.previousInFocusChain() -> QWidget");

extern "C" {static PyObject *meth_QWidget_previousInFocusChain(PyObject *, PyObject *);}
static PyObject *meth_QWidget_previousInFocusChain(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->previousInFocusChain();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_previousInFocusChain, doc_QWidget_previousInFocusChain);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_inputMethodHints, "QWidget.inputMethodHints() -> Qt.InputMethodHints");

extern "C" {static PyObject *meth_QWidget_inputMethodHints(PyObject *, PyObject *);}
static PyObject *meth_QWidget_inputMethodHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            Qt::InputMethodHints*sipRes;

            sipRes = new Qt::InputMethodHints(sipCpp->inputMethodHints());

            return sipConvertFromNewType(sipRes,sipType_Qt_InputMethodHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_inputMethodHints, doc_QWidget_inputMethodHints);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setInputMethodHints, "QWidget.setInputMethodHints(Qt.InputMethodHints)");

extern "C" {static PyObject *meth_QWidget_setInputMethodHints(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setInputMethodHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::InputMethodHints* a0;
        int a0State = 0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWidget, &sipCpp, sipType_Qt_InputMethodHints, &a0, &a0State))
        {
            sipCpp->setInputMethodHints(*a0);
            sipReleaseType(a0,sipType_Qt_InputMethodHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setInputMethodHints, doc_QWidget_setInputMethodHints);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_hasHeightForWidth, "QWidget.hasHeightForWidth() -> bool");

extern "C" {static PyObject *meth_QWidget_hasHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QWidget_hasHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWidget::hasHeightForWidth() : sipCpp->hasHeightForWidth());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_hasHeightForWidth, doc_QWidget_hasHeightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_grab, "QWidget.grab(QRect rectangle=QRect(QPoint(0,0),QSize(-1,-1))) -> QPixmap");

extern "C" {static PyObject *meth_QWidget_grab(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_grab(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect& a0def = QRect(QPoint(0,0),QSize(-1,-1));
        const QRect* a0 = &a0def;
        QWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rectangle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QWidget, &sipCpp, sipType_QRect, &a0))
        {
            QPixmap*sipRes;

            sipRes = new QPixmap(sipCpp->grab(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_grab, doc_QWidget_grab);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_createWindowContainer, "QWidget.createWindowContainer(QWindow, QWidget parent=None, Qt.WindowFlags flags=0) -> QWidget");

extern "C" {static PyObject *meth_QWidget_createWindowContainer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_createWindowContainer(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWindow* a0;
        PyObject *a0Wrapper;
        QWidget* a1 = 0;
        PyObject *a1Wrapper = 0;
        Qt::WindowFlags a2def = 0;
        Qt::WindowFlags* a2 = &a2def;
        int a2State = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "@J8|@J8J1", &a0Wrapper, sipType_QWindow, &a0, &a1Wrapper, sipType_QWidget, &a1, sipType_Qt_WindowFlags, &a2, &a2State))
        {
            PyObject * sipRes = 0;

#line 401 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
        // Ownersip issues are complicated so we handle them explicitly.
        
        QWidget *w = QWidget::createWindowContainer(a0, a1, *a2);
        
        sipRes = sipConvertFromNewType(w, sipType_QWidget, a1Wrapper);
        
        if (sipRes)
            sipTransferTo(a0Wrapper, sipRes);
#line 8922 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQWidget.cpp"
            sipReleaseType(a2,sipType_Qt_WindowFlags,a2State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_createWindowContainer, doc_QWidget_createWindowContainer);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_windowHandle, "QWidget.windowHandle() -> QWindow");

extern "C" {static PyObject *meth_QWidget_windowHandle(PyObject *, PyObject *);}
static PyObject *meth_QWidget_windowHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QWindow*sipRes;

            sipRes = sipCpp->windowHandle();

            return sipConvertFromType(sipRes,sipType_QWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_windowHandle, doc_QWidget_windowHandle);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_nativeEvent, "QWidget.nativeEvent(QByteArray, sip.voidptr) -> (bool, int)");

extern "C" {static PyObject *meth_QWidget_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QWidget, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_nativeEvent, doc_QWidget_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_sharedPainter, "QWidget.sharedPainter() -> QPainter");

extern "C" {static PyObject *meth_QWidget_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_sharedPainter, doc_QWidget_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_initPainter, "QWidget.initPainter(QPainter)");

extern "C" {static PyObject *meth_QWidget_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWidget_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const sipQWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWidget, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_initPainter, doc_QWidget_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_setToolTipDuration, "QWidget.setToolTipDuration(int)");

extern "C" {static PyObject *meth_QWidget_setToolTipDuration(PyObject *, PyObject *);}
static PyObject *meth_QWidget_setToolTipDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QWidget, &sipCpp, &a0))
        {
            sipCpp->setToolTipDuration(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_setToolTipDuration, doc_QWidget_setToolTipDuration);

    return NULL;
}


PyDoc_STRVAR(doc_QWidget_toolTipDuration, "QWidget.toolTipDuration() -> int");

extern "C" {static PyObject *meth_QWidget_toolTipDuration(PyObject *, PyObject *);}
static PyObject *meth_QWidget_toolTipDuration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->toolTipDuration();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWidget, sipName_toolTipDuration, doc_QWidget_toolTipDuration);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWidget(void *, const sipTypeDef *);}
static void *cast_QWidget(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWidget)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QWidget *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QPaintDevice)->ctd_cast((QPaintDevice *)(QWidget *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWidget(void *, int);}
static void release_QWidget(void *sipCppV,int)
{
    QWidget *sipCpp = reinterpret_cast<QWidget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWidget(sipSimpleWrapper *);}
static void dealloc_QWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWidget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWidget(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWidget *sipCpp = 0;

    {
        QWidget* a0 = 0;
        Qt::WindowFlags a1def = 0;
        Qt::WindowFlags* a1 = &a1def;
        int a1State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            sipCpp = new sipQWidget(a0,*a1);
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWidget[] = {{162, 0, 0}, {183, 1, 1}};


static PyMethodDef methods_QWidget[] = {
    {SIP_MLNAME_CAST(sipName_acceptDrops), meth_QWidget_acceptDrops, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_acceptDrops)},
    {SIP_MLNAME_CAST(sipName_accessibleDescription), meth_QWidget_accessibleDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_accessibleDescription)},
    {SIP_MLNAME_CAST(sipName_accessibleName), meth_QWidget_accessibleName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_accessibleName)},
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QWidget_actionEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_actionEvent)},
    {SIP_MLNAME_CAST(sipName_actions), meth_QWidget_actions, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_actions)},
    {SIP_MLNAME_CAST(sipName_activateWindow), meth_QWidget_activateWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_activateWindow)},
    {SIP_MLNAME_CAST(sipName_addAction), meth_QWidget_addAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_addAction)},
    {SIP_MLNAME_CAST(sipName_addActions), meth_QWidget_addActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_addActions)},
    {SIP_MLNAME_CAST(sipName_adjustSize), meth_QWidget_adjustSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_adjustSize)},
    {SIP_MLNAME_CAST(sipName_autoFillBackground), meth_QWidget_autoFillBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_autoFillBackground)},
    {SIP_MLNAME_CAST(sipName_backgroundRole), meth_QWidget_backgroundRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_backgroundRole)},
    {SIP_MLNAME_CAST(sipName_baseSize), meth_QWidget_baseSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_baseSize)},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QWidget_changeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_changeEvent)},
    {SIP_MLNAME_CAST(sipName_childAt), meth_QWidget_childAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_childAt)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QWidget_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childrenRect), meth_QWidget_childrenRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_childrenRect)},
    {SIP_MLNAME_CAST(sipName_childrenRegion), meth_QWidget_childrenRegion, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_childrenRegion)},
    {SIP_MLNAME_CAST(sipName_clearFocus), meth_QWidget_clearFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_clearFocus)},
    {SIP_MLNAME_CAST(sipName_clearMask), meth_QWidget_clearMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_clearMask)},
    {SIP_MLNAME_CAST(sipName_close), meth_QWidget_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_close)},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QWidget_closeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_closeEvent)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QWidget_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contentsMargins), meth_QWidget_contentsMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_contentsMargins)},
    {SIP_MLNAME_CAST(sipName_contentsRect), meth_QWidget_contentsRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_contentsRect)},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QWidget_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_contextMenuPolicy), meth_QWidget_contextMenuPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_contextMenuPolicy)},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QWidget_create, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_create)},
    {SIP_MLNAME_CAST(sipName_createWindowContainer), (PyCFunction)meth_QWidget_createWindowContainer, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_createWindowContainer)},
    {SIP_MLNAME_CAST(sipName_cursor), meth_QWidget_cursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_cursor)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QWidget_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QWidget_destroy, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_destroy)},
    {SIP_MLNAME_CAST(sipName_devType), meth_QWidget_devType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_devType)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QWidget_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QWidget_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QWidget_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QWidget_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QWidget_dropEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_dropEvent)},
    {SIP_MLNAME_CAST(sipName_effectiveWinId), meth_QWidget_effectiveWinId, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_effectiveWinId)},
    {SIP_MLNAME_CAST(sipName_ensurePolished), meth_QWidget_ensurePolished, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_ensurePolished)},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QWidget_enterEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_enterEvent)},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QWidget_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_event)},
    {SIP_MLNAME_CAST(sipName_find), meth_QWidget_find, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_find)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QWidget_focusInEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QWidget_focusNextChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_focusNextChild)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QWidget_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QWidget_focusOutEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_focusPolicy), meth_QWidget_focusPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_focusPolicy)},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QWidget_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_focusPreviousChild)},
    {SIP_MLNAME_CAST(sipName_focusProxy), meth_QWidget_focusProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_focusProxy)},
    {SIP_MLNAME_CAST(sipName_focusWidget), meth_QWidget_focusWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_focusWidget)},
    {SIP_MLNAME_CAST(sipName_font), meth_QWidget_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_font)},
    {SIP_MLNAME_CAST(sipName_fontInfo), meth_QWidget_fontInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_fontInfo)},
    {SIP_MLNAME_CAST(sipName_fontMetrics), meth_QWidget_fontMetrics, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_fontMetrics)},
    {SIP_MLNAME_CAST(sipName_foregroundRole), meth_QWidget_foregroundRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_foregroundRole)},
    {SIP_MLNAME_CAST(sipName_frameGeometry), meth_QWidget_frameGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_frameGeometry)},
    {SIP_MLNAME_CAST(sipName_frameSize), meth_QWidget_frameSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_frameSize)},
    {SIP_MLNAME_CAST(sipName_geometry), meth_QWidget_geometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_geometry)},
    {SIP_MLNAME_CAST(sipName_getContentsMargins), meth_QWidget_getContentsMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_getContentsMargins)},
    {SIP_MLNAME_CAST(sipName_grab), (PyCFunction)meth_QWidget_grab, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_grab)},
    {SIP_MLNAME_CAST(sipName_grabGesture), (PyCFunction)meth_QWidget_grabGesture, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_grabGesture)},
    {SIP_MLNAME_CAST(sipName_grabKeyboard), meth_QWidget_grabKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_grabKeyboard)},
    {SIP_MLNAME_CAST(sipName_grabMouse), meth_QWidget_grabMouse, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_grabMouse)},
    {SIP_MLNAME_CAST(sipName_grabShortcut), (PyCFunction)meth_QWidget_grabShortcut, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_grabShortcut)},
    {SIP_MLNAME_CAST(sipName_graphicsEffect), meth_QWidget_graphicsEffect, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_graphicsEffect)},
    {SIP_MLNAME_CAST(sipName_graphicsProxyWidget), meth_QWidget_graphicsProxyWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_graphicsProxyWidget)},
    {SIP_MLNAME_CAST(sipName_hasFocus), meth_QWidget_hasFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_hasFocus)},
    {SIP_MLNAME_CAST(sipName_hasHeightForWidth), meth_QWidget_hasHeightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_hasHeightForWidth)},
    {SIP_MLNAME_CAST(sipName_hasMouseTracking), meth_QWidget_hasMouseTracking, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_hasMouseTracking)},
    {SIP_MLNAME_CAST(sipName_height), meth_QWidget_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_height)},
    {SIP_MLNAME_CAST(sipName_heightForWidth), meth_QWidget_heightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_heightForWidth)},
    {SIP_MLNAME_CAST(sipName_hide), meth_QWidget_hide, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_hide)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QWidget_hideEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_hideEvent)},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QWidget_initPainter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_initPainter)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QWidget_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodHints), meth_QWidget_inputMethodHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_inputMethodHints)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QWidget_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_insertAction), meth_QWidget_insertAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_insertAction)},
    {SIP_MLNAME_CAST(sipName_insertActions), meth_QWidget_insertActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_insertActions)},
    {SIP_MLNAME_CAST(sipName_isActiveWindow), meth_QWidget_isActiveWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isActiveWindow)},
    {SIP_MLNAME_CAST(sipName_isAncestorOf), meth_QWidget_isAncestorOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isAncestorOf)},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QWidget_isEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isEnabled)},
    {SIP_MLNAME_CAST(sipName_isEnabledTo), meth_QWidget_isEnabledTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isEnabledTo)},
    {SIP_MLNAME_CAST(sipName_isFullScreen), meth_QWidget_isFullScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isFullScreen)},
    {SIP_MLNAME_CAST(sipName_isHidden), meth_QWidget_isHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isHidden)},
    {SIP_MLNAME_CAST(sipName_isLeftToRight), meth_QWidget_isLeftToRight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isLeftToRight)},
    {SIP_MLNAME_CAST(sipName_isMaximized), meth_QWidget_isMaximized, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isMaximized)},
    {SIP_MLNAME_CAST(sipName_isMinimized), meth_QWidget_isMinimized, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isMinimized)},
    {SIP_MLNAME_CAST(sipName_isModal), meth_QWidget_isModal, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isModal)},
    {SIP_MLNAME_CAST(sipName_isRightToLeft), meth_QWidget_isRightToLeft, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isRightToLeft)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QWidget_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isVisible), meth_QWidget_isVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isVisible)},
    {SIP_MLNAME_CAST(sipName_isVisibleTo), meth_QWidget_isVisibleTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isVisibleTo)},
    {SIP_MLNAME_CAST(sipName_isWindow), meth_QWidget_isWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isWindow)},
    {SIP_MLNAME_CAST(sipName_isWindowModified), meth_QWidget_isWindowModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_isWindowModified)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QWidget_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QWidget_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_keyboardGrabber), meth_QWidget_keyboardGrabber, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_keyboardGrabber)},
    {SIP_MLNAME_CAST(sipName_layout), meth_QWidget_layout, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_layout)},
    {SIP_MLNAME_CAST(sipName_layoutDirection), meth_QWidget_layoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_layoutDirection)},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QWidget_leaveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_leaveEvent)},
    {SIP_MLNAME_CAST(sipName_locale), meth_QWidget_locale, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_locale)},
    {SIP_MLNAME_CAST(sipName_lower), meth_QWidget_lower, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_lower)},
    {SIP_MLNAME_CAST(sipName_mapFrom), meth_QWidget_mapFrom, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_mapFrom)},
    {SIP_MLNAME_CAST(sipName_mapFromGlobal), meth_QWidget_mapFromGlobal, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_mapFromGlobal)},
    {SIP_MLNAME_CAST(sipName_mapFromParent), meth_QWidget_mapFromParent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_mapFromParent)},
    {SIP_MLNAME_CAST(sipName_mapTo), meth_QWidget_mapTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_mapTo)},
    {SIP_MLNAME_CAST(sipName_mapToGlobal), meth_QWidget_mapToGlobal, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_mapToGlobal)},
    {SIP_MLNAME_CAST(sipName_mapToParent), meth_QWidget_mapToParent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_mapToParent)},
    {SIP_MLNAME_CAST(sipName_mask), meth_QWidget_mask, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_mask)},
    {SIP_MLNAME_CAST(sipName_maximumHeight), meth_QWidget_maximumHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_maximumHeight)},
    {SIP_MLNAME_CAST(sipName_maximumSize), meth_QWidget_maximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_maximumSize)},
    {SIP_MLNAME_CAST(sipName_maximumWidth), meth_QWidget_maximumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_maximumWidth)},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QWidget_metric, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_metric)},
    {SIP_MLNAME_CAST(sipName_minimumHeight), meth_QWidget_minimumHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_minimumHeight)},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QWidget_minimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_minimumSize)},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QWidget_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_minimumWidth), meth_QWidget_minimumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_minimumWidth)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QWidget_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseGrabber), meth_QWidget_mouseGrabber, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_mouseGrabber)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QWidget_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QWidget_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QWidget_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_move), meth_QWidget_move, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_move)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QWidget_moveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_moveEvent)},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QWidget_nativeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_nativeEvent)},
    {SIP_MLNAME_CAST(sipName_nativeParentWidget), meth_QWidget_nativeParentWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_nativeParentWidget)},
    {SIP_MLNAME_CAST(sipName_nextInFocusChain), meth_QWidget_nextInFocusChain, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_nextInFocusChain)},
    {SIP_MLNAME_CAST(sipName_normalGeometry), meth_QWidget_normalGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_normalGeometry)},
    {SIP_MLNAME_CAST(sipName_overrideWindowFlags), meth_QWidget_overrideWindowFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_overrideWindowFlags)},
    {SIP_MLNAME_CAST(sipName_overrideWindowState), meth_QWidget_overrideWindowState, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_overrideWindowState)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QWidget_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_paintEngine)},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QWidget_paintEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_paintEvent)},
    {SIP_MLNAME_CAST(sipName_palette), meth_QWidget_palette, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_palette)},
    {SIP_MLNAME_CAST(sipName_parentWidget), meth_QWidget_parentWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_parentWidget)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QWidget_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_pos)},
    {SIP_MLNAME_CAST(sipName_previousInFocusChain), meth_QWidget_previousInFocusChain, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_previousInFocusChain)},
    {SIP_MLNAME_CAST(sipName_raise_), meth_QWidget_raise_, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_raise_)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QWidget_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_rect), meth_QWidget_rect, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_rect)},
    {SIP_MLNAME_CAST(sipName_releaseKeyboard), meth_QWidget_releaseKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_releaseKeyboard)},
    {SIP_MLNAME_CAST(sipName_releaseMouse), meth_QWidget_releaseMouse, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_releaseMouse)},
    {SIP_MLNAME_CAST(sipName_releaseShortcut), meth_QWidget_releaseShortcut, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_releaseShortcut)},
    {SIP_MLNAME_CAST(sipName_removeAction), meth_QWidget_removeAction, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_removeAction)},
    {SIP_MLNAME_CAST(sipName_render), (PyCFunction)meth_QWidget_render, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_render)},
    {SIP_MLNAME_CAST(sipName_repaint), meth_QWidget_repaint, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_repaint)},
    {SIP_MLNAME_CAST(sipName_resize), meth_QWidget_resize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_resize)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QWidget_resizeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_restoreGeometry), meth_QWidget_restoreGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_restoreGeometry)},
    {SIP_MLNAME_CAST(sipName_saveGeometry), meth_QWidget_saveGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_saveGeometry)},
    {SIP_MLNAME_CAST(sipName_scroll), meth_QWidget_scroll, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_scroll)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QWidget_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QWidget_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAcceptDrops), meth_QWidget_setAcceptDrops, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setAcceptDrops)},
    {SIP_MLNAME_CAST(sipName_setAccessibleDescription), meth_QWidget_setAccessibleDescription, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setAccessibleDescription)},
    {SIP_MLNAME_CAST(sipName_setAccessibleName), meth_QWidget_setAccessibleName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setAccessibleName)},
    {SIP_MLNAME_CAST(sipName_setAttribute), (PyCFunction)meth_QWidget_setAttribute, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_setAttribute)},
    {SIP_MLNAME_CAST(sipName_setAutoFillBackground), meth_QWidget_setAutoFillBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setAutoFillBackground)},
    {SIP_MLNAME_CAST(sipName_setBackgroundRole), meth_QWidget_setBackgroundRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setBackgroundRole)},
    {SIP_MLNAME_CAST(sipName_setBaseSize), meth_QWidget_setBaseSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setBaseSize)},
    {SIP_MLNAME_CAST(sipName_setContentsMargins), meth_QWidget_setContentsMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setContentsMargins)},
    {SIP_MLNAME_CAST(sipName_setContextMenuPolicy), meth_QWidget_setContextMenuPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setContextMenuPolicy)},
    {SIP_MLNAME_CAST(sipName_setCursor), meth_QWidget_setCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setCursor)},
    {SIP_MLNAME_CAST(sipName_setDisabled), meth_QWidget_setDisabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setDisabled)},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QWidget_setEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setEnabled)},
    {SIP_MLNAME_CAST(sipName_setFixedHeight), meth_QWidget_setFixedHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setFixedHeight)},
    {SIP_MLNAME_CAST(sipName_setFixedSize), meth_QWidget_setFixedSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setFixedSize)},
    {SIP_MLNAME_CAST(sipName_setFixedWidth), meth_QWidget_setFixedWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setFixedWidth)},
    {SIP_MLNAME_CAST(sipName_setFocus), meth_QWidget_setFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setFocus)},
    {SIP_MLNAME_CAST(sipName_setFocusPolicy), meth_QWidget_setFocusPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setFocusPolicy)},
    {SIP_MLNAME_CAST(sipName_setFocusProxy), meth_QWidget_setFocusProxy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setFocusProxy)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QWidget_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setFont)},
    {SIP_MLNAME_CAST(sipName_setForegroundRole), meth_QWidget_setForegroundRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setForegroundRole)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QWidget_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setGeometry)},
    {SIP_MLNAME_CAST(sipName_setGraphicsEffect), meth_QWidget_setGraphicsEffect, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setGraphicsEffect)},
    {SIP_MLNAME_CAST(sipName_setHidden), meth_QWidget_setHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setHidden)},
    {SIP_MLNAME_CAST(sipName_setInputMethodHints), meth_QWidget_setInputMethodHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setInputMethodHints)},
    {SIP_MLNAME_CAST(sipName_setLayout), meth_QWidget_setLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setLayout)},
    {SIP_MLNAME_CAST(sipName_setLayoutDirection), meth_QWidget_setLayoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setLayoutDirection)},
    {SIP_MLNAME_CAST(sipName_setLocale), meth_QWidget_setLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setLocale)},
    {SIP_MLNAME_CAST(sipName_setMask), meth_QWidget_setMask, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setMask)},
    {SIP_MLNAME_CAST(sipName_setMaximumHeight), meth_QWidget_setMaximumHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setMaximumHeight)},
    {SIP_MLNAME_CAST(sipName_setMaximumSize), meth_QWidget_setMaximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setMaximumSize)},
    {SIP_MLNAME_CAST(sipName_setMaximumWidth), meth_QWidget_setMaximumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setMaximumWidth)},
    {SIP_MLNAME_CAST(sipName_setMinimumHeight), meth_QWidget_setMinimumHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setMinimumHeight)},
    {SIP_MLNAME_CAST(sipName_setMinimumSize), meth_QWidget_setMinimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setMinimumSize)},
    {SIP_MLNAME_CAST(sipName_setMinimumWidth), meth_QWidget_setMinimumWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setMinimumWidth)},
    {SIP_MLNAME_CAST(sipName_setMouseTracking), meth_QWidget_setMouseTracking, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setMouseTracking)},
    {SIP_MLNAME_CAST(sipName_setPalette), meth_QWidget_setPalette, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setPalette)},
    {SIP_MLNAME_CAST(sipName_setParent), meth_QWidget_setParent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setParent)},
    {SIP_MLNAME_CAST(sipName_setShortcutAutoRepeat), (PyCFunction)meth_QWidget_setShortcutAutoRepeat, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_setShortcutAutoRepeat)},
    {SIP_MLNAME_CAST(sipName_setShortcutEnabled), (PyCFunction)meth_QWidget_setShortcutEnabled, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_setShortcutEnabled)},
    {SIP_MLNAME_CAST(sipName_setSizeIncrement), meth_QWidget_setSizeIncrement, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setSizeIncrement)},
    {SIP_MLNAME_CAST(sipName_setSizePolicy), meth_QWidget_setSizePolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setSizePolicy)},
    {SIP_MLNAME_CAST(sipName_setStatusTip), meth_QWidget_setStatusTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setStatusTip)},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QWidget_setStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setStyle)},
    {SIP_MLNAME_CAST(sipName_setStyleSheet), meth_QWidget_setStyleSheet, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setStyleSheet)},
    {SIP_MLNAME_CAST(sipName_setTabOrder), meth_QWidget_setTabOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setTabOrder)},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QWidget_setToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setToolTip)},
    {SIP_MLNAME_CAST(sipName_setToolTipDuration), meth_QWidget_setToolTipDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setToolTipDuration)},
    {SIP_MLNAME_CAST(sipName_setUpdatesEnabled), meth_QWidget_setUpdatesEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setUpdatesEnabled)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QWidget_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setVisible)},
    {SIP_MLNAME_CAST(sipName_setWhatsThis), meth_QWidget_setWhatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setWhatsThis)},
    {SIP_MLNAME_CAST(sipName_setWindowFilePath), meth_QWidget_setWindowFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setWindowFilePath)},
    {SIP_MLNAME_CAST(sipName_setWindowFlags), meth_QWidget_setWindowFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setWindowFlags)},
    {SIP_MLNAME_CAST(sipName_setWindowIcon), meth_QWidget_setWindowIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setWindowIcon)},
    {SIP_MLNAME_CAST(sipName_setWindowIconText), meth_QWidget_setWindowIconText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setWindowIconText)},
    {SIP_MLNAME_CAST(sipName_setWindowModality), meth_QWidget_setWindowModality, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setWindowModality)},
    {SIP_MLNAME_CAST(sipName_setWindowModified), meth_QWidget_setWindowModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setWindowModified)},
    {SIP_MLNAME_CAST(sipName_setWindowOpacity), meth_QWidget_setWindowOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setWindowOpacity)},
    {SIP_MLNAME_CAST(sipName_setWindowRole), meth_QWidget_setWindowRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setWindowRole)},
    {SIP_MLNAME_CAST(sipName_setWindowState), meth_QWidget_setWindowState, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setWindowState)},
    {SIP_MLNAME_CAST(sipName_setWindowTitle), meth_QWidget_setWindowTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_setWindowTitle)},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QWidget_sharedPainter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_sharedPainter)},
    {SIP_MLNAME_CAST(sipName_show), meth_QWidget_show, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_show)},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QWidget_showEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_showEvent)},
    {SIP_MLNAME_CAST(sipName_showFullScreen), meth_QWidget_showFullScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_showFullScreen)},
    {SIP_MLNAME_CAST(sipName_showMaximized), meth_QWidget_showMaximized, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_showMaximized)},
    {SIP_MLNAME_CAST(sipName_showMinimized), meth_QWidget_showMinimized, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_showMinimized)},
    {SIP_MLNAME_CAST(sipName_showNormal), meth_QWidget_showNormal, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_showNormal)},
    {SIP_MLNAME_CAST(sipName_size), meth_QWidget_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_size)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QWidget_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_sizeHint)},
    {SIP_MLNAME_CAST(sipName_sizeIncrement), meth_QWidget_sizeIncrement, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_sizeIncrement)},
    {SIP_MLNAME_CAST(sipName_sizePolicy), meth_QWidget_sizePolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_sizePolicy)},
    {SIP_MLNAME_CAST(sipName_stackUnder), meth_QWidget_stackUnder, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_stackUnder)},
    {SIP_MLNAME_CAST(sipName_statusTip), meth_QWidget_statusTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_statusTip)},
    {SIP_MLNAME_CAST(sipName_style), meth_QWidget_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_style)},
    {SIP_MLNAME_CAST(sipName_styleSheet), meth_QWidget_styleSheet, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_styleSheet)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QWidget_tabletEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_tabletEvent)},
    {SIP_MLNAME_CAST(sipName_testAttribute), meth_QWidget_testAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_testAttribute)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QWidget_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QWidget_toolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_toolTip)},
    {SIP_MLNAME_CAST(sipName_toolTipDuration), meth_QWidget_toolTipDuration, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_toolTipDuration)},
    {SIP_MLNAME_CAST(sipName_underMouse), meth_QWidget_underMouse, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_underMouse)},
    {SIP_MLNAME_CAST(sipName_ungrabGesture), meth_QWidget_ungrabGesture, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_ungrabGesture)},
    {SIP_MLNAME_CAST(sipName_unsetCursor), meth_QWidget_unsetCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_unsetCursor)},
    {SIP_MLNAME_CAST(sipName_unsetLayoutDirection), meth_QWidget_unsetLayoutDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_unsetLayoutDirection)},
    {SIP_MLNAME_CAST(sipName_unsetLocale), meth_QWidget_unsetLocale, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_unsetLocale)},
    {SIP_MLNAME_CAST(sipName_update), meth_QWidget_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_update)},
    {SIP_MLNAME_CAST(sipName_updateGeometry), meth_QWidget_updateGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_updateGeometry)},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QWidget_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_updateMicroFocus)},
    {SIP_MLNAME_CAST(sipName_updatesEnabled), meth_QWidget_updatesEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_updatesEnabled)},
    {SIP_MLNAME_CAST(sipName_visibleRegion), meth_QWidget_visibleRegion, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_visibleRegion)},
    {SIP_MLNAME_CAST(sipName_whatsThis), meth_QWidget_whatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_whatsThis)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QWidget_wheelEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWidget_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_width), meth_QWidget_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_width)},
    {SIP_MLNAME_CAST(sipName_winId), meth_QWidget_winId, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_winId)},
    {SIP_MLNAME_CAST(sipName_window), meth_QWidget_window, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_window)},
    {SIP_MLNAME_CAST(sipName_windowFilePath), meth_QWidget_windowFilePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_windowFilePath)},
    {SIP_MLNAME_CAST(sipName_windowFlags), meth_QWidget_windowFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_windowFlags)},
    {SIP_MLNAME_CAST(sipName_windowHandle), meth_QWidget_windowHandle, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_windowHandle)},
    {SIP_MLNAME_CAST(sipName_windowIcon), meth_QWidget_windowIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_windowIcon)},
    {SIP_MLNAME_CAST(sipName_windowIconText), meth_QWidget_windowIconText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_windowIconText)},
    {SIP_MLNAME_CAST(sipName_windowModality), meth_QWidget_windowModality, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_windowModality)},
    {SIP_MLNAME_CAST(sipName_windowOpacity), meth_QWidget_windowOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_windowOpacity)},
    {SIP_MLNAME_CAST(sipName_windowRole), meth_QWidget_windowRole, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_windowRole)},
    {SIP_MLNAME_CAST(sipName_windowState), meth_QWidget_windowState, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_windowState)},
    {SIP_MLNAME_CAST(sipName_windowTitle), meth_QWidget_windowTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_windowTitle)},
    {SIP_MLNAME_CAST(sipName_windowType), meth_QWidget_windowType, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_windowType)},
    {SIP_MLNAME_CAST(sipName_x), meth_QWidget_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QWidget_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QWidget_y)}
};

static sipEnumMemberDef enummembers_QWidget[] = {
    {sipName_DrawChildren, static_cast<int>(QWidget::DrawChildren), 455},
    {sipName_DrawWindowBackground, static_cast<int>(QWidget::DrawWindowBackground), 455},
    {sipName_IgnoreMask, static_cast<int>(QWidget::IgnoreMask), 455},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWidget[] = {
    {"windowIconTextChanged(QString)", "\1QWidget.windowIconTextChanged[str]", 0, 0},
    {"windowIconChanged(QIcon)", "\1QWidget.windowIconChanged[QIcon]", 0, 0},
    {"windowTitleChanged(QString)", "\1QWidget.windowTitleChanged[str]", 0, 0},
    {"customContextMenuRequested(QPoint)", "\1QWidget.customContextMenuRequested[QPoint]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QWidget, "\1QWidget(QWidget parent=None, Qt.WindowFlags flags=0)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWidget,
        {0}
    },
    {
        sipNameNr_QWidget,
        {0, 0, 1},
        260, methods_QWidget,
        3, enummembers_QWidget,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWidget,
    -1,
    -1,
    supers_QWidget,
    0,
    init_type_QWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWidget,
    0,
    0,
    0,
    release_QWidget,
    cast_QWidget,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWidget::staticMetaObject,
    0,
    signals_QWidget,
    0
};
