/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:12 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qboxlayout.sip"
#include <qboxlayout.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 71 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"


class sipQBoxLayout : public QBoxLayout
{
public:
    sipQBoxLayout(QBoxLayout::Direction,QWidget*);
    virtual ~sipQBoxLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtect_widgetEvent(QEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtect_addChildLayout(QLayout*);
    void sipProtect_addChildWidget(QWidget*);
    QRect sipProtect_alignmentRect(const QRect&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QSpacerItem* spacerItem();
    QWidget* widget();
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QSizePolicy::ControlTypes controlTypes() const;
    void childEvent(QChildEvent*);
    QLayout* layout();
    bool isEmpty() const;
    int indexOf(QWidget*) const;
    QRect geometry() const;
    void setGeometry(const QRect&);
    int count() const;
    QLayoutItem* takeAt(int);
    QLayoutItem* itemAt(int) const;
    void invalidate();
    Qt::Orientations expandingDirections() const;
    int minimumHeightForWidth(int) const;
    int heightForWidth(int) const;
    bool hasHeightForWidth() const;
    QSize maximumSize() const;
    QSize minimumSize() const;
    QSize sizeHint() const;
    void addItem(QLayoutItem*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBoxLayout(const sipQBoxLayout &);
    sipQBoxLayout &operator = (const sipQBoxLayout &);

    char sipPyMethods[27];
};

sipQBoxLayout::sipQBoxLayout(QBoxLayout::Direction a0,QWidget*a1): QBoxLayout(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBoxLayout::~sipQBoxLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQBoxLayout::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QBoxLayout);
}

int sipQBoxLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QBoxLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QBoxLayout,_c,_id,_a);

    return _id;
}

void *sipQBoxLayout::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QBoxLayout, _clname, &sipCpp) ? sipCpp : QBoxLayout::qt_metacast(_clname));
}

QSpacerItem* sipQBoxLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_spacerItem);

    if (!sipMeth)
        return QBoxLayout::spacerItem();

    extern QSpacerItem* sipVH_QtWidgets_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_94(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QWidget* sipQBoxLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_widget);

    if (!sipMeth)
        return QBoxLayout::widget();

    extern QWidget* sipVH_QtWidgets_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_79(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQBoxLayout::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QBoxLayout::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBoxLayout::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QBoxLayout::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBoxLayout::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QBoxLayout::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBoxLayout::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QBoxLayout::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQBoxLayout::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QBoxLayout::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQBoxLayout::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QBoxLayout::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSizePolicy::ControlTypes sipQBoxLayout::controlTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_controlTypes);

    if (!sipMeth)
        return QBoxLayout::controlTypes();

    extern QSizePolicy::ControlTypes sipVH_QtWidgets_92(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_92(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQBoxLayout::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QBoxLayout::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QLayout* sipQBoxLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_layout);

    if (!sipMeth)
        return QBoxLayout::layout();

    extern QLayout* sipVH_QtWidgets_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_95(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQBoxLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_isEmpty);

    if (!sipMeth)
        return QBoxLayout::isEmpty();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQBoxLayout::indexOf(QWidget*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_indexOf);

    if (!sipMeth)
        return QBoxLayout::indexOf(a0);

    extern int sipVH_QtWidgets_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    return sipVH_QtWidgets_96(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QRect sipQBoxLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_geometry);

    if (!sipMeth)
        return QBoxLayout::geometry();

    typedef QRect (*sipVH_QtGui_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_53)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[53]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQBoxLayout::setGeometry(const QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_setGeometry);

    if (!sipMeth)
    {
        QBoxLayout::setGeometry(a0);
        return;
    }

    typedef void (*sipVH_QtGui_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&);

    ((sipVH_QtGui_44)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQBoxLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_count);

    if (!sipMeth)
        return QBoxLayout::count();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QLayoutItem* sipQBoxLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_takeAt);

    if (!sipMeth)
        return QBoxLayout::takeAt(a0);

    extern QLayoutItem* sipVH_QtWidgets_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_76(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QLayoutItem* sipQBoxLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_itemAt);

    if (!sipMeth)
        return QBoxLayout::itemAt(a0);

    extern QLayoutItem* sipVH_QtWidgets_77(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_77(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQBoxLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_invalidate);

    if (!sipMeth)
    {
        QBoxLayout::invalidate();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

Qt::Orientations sipQBoxLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_expandingDirections);

    if (!sipMeth)
        return QBoxLayout::expandingDirections();

    extern Qt::Orientations sipVH_QtWidgets_93(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_93(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQBoxLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_minimumHeightForWidth);

    if (!sipMeth)
        return QBoxLayout::minimumHeightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQBoxLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QBoxLayout::heightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQBoxLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QBoxLayout::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQBoxLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_maximumSize);

    if (!sipMeth)
        return QBoxLayout::maximumSize();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQBoxLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_minimumSize);

    if (!sipMeth)
        return QBoxLayout::minimumSize();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQBoxLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QBoxLayout::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQBoxLayout::addItem(QLayoutItem*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_addItem);

    if (!sipMeth)
    {
        QBoxLayout::addItem(a0);
        return;
    }

    extern void sipVH_QtWidgets_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QLayoutItem*);

    sipVH_QtWidgets_78(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQBoxLayout::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQBoxLayout::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQBoxLayout::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQBoxLayout::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQBoxLayout::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQBoxLayout::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQBoxLayout::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQBoxLayout::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQBoxLayout::sipProtect_widgetEvent(QEvent*a0)
{
    QLayout::widgetEvent(a0);
}

void sipQBoxLayout::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QLayout::childEvent(a0) : childEvent(a0));
}

void sipQBoxLayout::sipProtect_addChildLayout(QLayout*a0)
{
    QLayout::addChildLayout(a0);
}

void sipQBoxLayout::sipProtect_addChildWidget(QWidget*a0)
{
    QLayout::addChildWidget(a0);
}

QRect sipQBoxLayout::sipProtect_alignmentRect(const QRect& a0) const
{
    return QLayout::alignmentRect(a0);
}


PyDoc_STRVAR(doc_QBoxLayout_sender, "QBoxLayout.sender() -> QObject");

extern "C" {static PyObject *meth_QBoxLayout_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQBoxLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 749 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_sender, doc_QBoxLayout_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_receivers, "QBoxLayout.receivers(signal) -> int");

extern "C" {static PyObject *meth_QBoxLayout_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQBoxLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 808 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_receivers, doc_QBoxLayout_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_timerEvent, "QBoxLayout.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QBoxLayout_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQBoxLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_timerEvent, doc_QBoxLayout_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_customEvent, "QBoxLayout.customEvent(QEvent)");

extern "C" {static PyObject *meth_QBoxLayout_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQBoxLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_customEvent, doc_QBoxLayout_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_connectNotify, "QBoxLayout.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QBoxLayout_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQBoxLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_connectNotify, doc_QBoxLayout_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_disconnectNotify, "QBoxLayout.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QBoxLayout_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQBoxLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_disconnectNotify, doc_QBoxLayout_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_senderSignalIndex, "QBoxLayout.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QBoxLayout_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQBoxLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_senderSignalIndex, doc_QBoxLayout_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_isSignalConnected, "QBoxLayout.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QBoxLayout_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQBoxLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_isSignalConnected, doc_QBoxLayout_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_widgetEvent, "QBoxLayout.widgetEvent(QEvent)");

extern "C" {static PyObject *meth_QBoxLayout_widgetEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_widgetEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QEvent* a0;
        sipQBoxLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtect_widgetEvent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_widgetEvent, doc_QBoxLayout_widgetEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_childEvent, "QBoxLayout.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QBoxLayout_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQBoxLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_childEvent, doc_QBoxLayout_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_addChildLayout, "QBoxLayout.addChildLayout(QLayout)");

extern "C" {static PyObject *meth_QBoxLayout_addChildLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addChildLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QLayout* a0;
        sipQBoxLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ:", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QLayout, &a0))
        {
            sipCpp->sipProtect_addChildLayout(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addChildLayout, doc_QBoxLayout_addChildLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_addChildWidget, "QBoxLayout.addChildWidget(QWidget)");

extern "C" {static PyObject *meth_QBoxLayout_addChildWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addChildWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        PyObject *a0Wrapper;
        sipQBoxLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B@J8", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0Wrapper, sipType_QWidget, &a0))
        {
#line 131 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipCpp->addChildWidget(a0);
        #else
        sipCpp->sipProtect_addChildWidget(a0);
        #endif
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
        
            if (py_parent)
                sipTransferTo(a0Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows
            // addChildWidget(QWidget()).
            sipTransferTo(a0Wrapper, sipSelf);
        }
#line 1118 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addChildWidget, doc_QBoxLayout_addChildWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_alignmentRect, "QBoxLayout.alignmentRect(QRect) -> QRect");

extern "C" {static PyObject *meth_QBoxLayout_alignmentRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_alignmentRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        const sipQBoxLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QRect, &a0))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->sipProtect_alignmentRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_alignmentRect, doc_QBoxLayout_alignmentRect);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_direction, "QBoxLayout.direction() -> QBoxLayout.Direction");

extern "C" {static PyObject *meth_QBoxLayout_direction(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_direction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            QBoxLayout::Direction sipRes;

            sipRes = sipCpp->direction();

            return sipConvertFromEnum(sipRes,sipType_QBoxLayout_Direction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_direction, doc_QBoxLayout_direction);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_setDirection, "QBoxLayout.setDirection(QBoxLayout.Direction)");

extern "C" {static PyObject *meth_QBoxLayout_setDirection(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QBoxLayout::Direction a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QBoxLayout_Direction, &a0))
        {
            sipCpp->setDirection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_setDirection, doc_QBoxLayout_setDirection);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_addSpacing, "QBoxLayout.addSpacing(int)");

extern "C" {static PyObject *meth_QBoxLayout_addSpacing(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            sipCpp->addSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addSpacing, doc_QBoxLayout_addSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_addStretch, "QBoxLayout.addStretch(int stretch=0)");

extern "C" {static PyObject *meth_QBoxLayout_addStretch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addStretch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        QBoxLayout *sipCpp;

        static const char *sipKwdList[] = {
            sipName_stretch,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            sipCpp->addStretch(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addStretch, doc_QBoxLayout_addStretch);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_addWidget, "QBoxLayout.addWidget(QWidget, int stretch=0, Qt.Alignment alignment=0)");

extern "C" {static PyObject *meth_QBoxLayout_addWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        PyObject *a0Wrapper;
        int a1 = 0;
        Qt::Alignment a2def = 0;
        Qt::Alignment* a2 = &a2def;
        int a2State = 0;
        QBoxLayout *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_stretch,
            sipName_alignment,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B@J8|iJ1", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0Wrapper, sipType_QWidget, &a0, &a1, sipType_Qt_Alignment, &a2, &a2State))
        {
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qboxlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->addWidget(a0, a1, *a2);
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
        
            if (py_parent)
                sipTransferTo(a0Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows addWidget(QWidget()).
            sipTransferTo(a0Wrapper, sipSelf);
        }
#line 1317 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
            sipReleaseType(a2,sipType_Qt_Alignment,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addWidget, doc_QBoxLayout_addWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_addLayout, "QBoxLayout.addLayout(QLayout, int stretch=0)");

extern "C" {static PyObject *meth_QBoxLayout_addLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QLayout* a0;
        int a1 = 0;
        QBoxLayout *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_stretch,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:|i", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QLayout, &a0, &a1))
        {
            sipCpp->addLayout(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addLayout, doc_QBoxLayout_addLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_addStrut, "QBoxLayout.addStrut(int)");

extern "C" {static PyObject *meth_QBoxLayout_addStrut(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addStrut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            sipCpp->addStrut(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addStrut, doc_QBoxLayout_addStrut);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_addItem, "QBoxLayout.addItem(QLayoutItem)");

extern "C" {static PyObject *meth_QBoxLayout_addItem(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayoutItem* a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QLayoutItem, &a0))
        {
            (sipSelfWasArg ? sipCpp->QBoxLayout::addItem(a0) : sipCpp->addItem(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addItem, doc_QBoxLayout_addItem);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_insertSpacing, "QBoxLayout.insertSpacing(int, int)");

extern "C" {static PyObject *meth_QBoxLayout_insertSpacing(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, &a1))
        {
            sipCpp->insertSpacing(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_insertSpacing, doc_QBoxLayout_insertSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_insertStretch, "QBoxLayout.insertStretch(int, int stretch=0)");

extern "C" {static PyObject *meth_QBoxLayout_insertStretch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertStretch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1 = 0;
        QBoxLayout *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_stretch,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, &a1))
        {
            sipCpp->insertStretch(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_insertStretch, doc_QBoxLayout_insertStretch);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_insertWidget, "QBoxLayout.insertWidget(int, QWidget, int stretch=0, Qt.Alignment alignment=0)");

extern "C" {static PyObject *meth_QBoxLayout_insertWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QWidget* a1;
        PyObject *a1Wrapper;
        int a2 = 0;
        Qt::Alignment a3def = 0;
        Qt::Alignment* a3 = &a3def;
        int a3State = 0;
        QBoxLayout *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_stretch,
            sipName_alignment,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi@J8|iJ1", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, &a1Wrapper, sipType_QWidget, &a1, &a2, sipType_Qt_Alignment, &a3, &a3State))
        {
#line 77 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qboxlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->insertWidget(a0, a1, a2, *a3);
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
        
            if (py_parent)
                sipTransferTo(a1Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows insertWidget(QWidget()).
            sipTransferTo(a1Wrapper, sipSelf);
        }
#line 1528 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQBoxLayout.cpp"
            sipReleaseType(a3,sipType_Qt_Alignment,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_insertWidget, doc_QBoxLayout_insertWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_insertLayout, "QBoxLayout.insertLayout(int, QLayout, int stretch=0)");

extern "C" {static PyObject *meth_QBoxLayout_insertLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLayout* a1;
        int a2 = 0;
        QBoxLayout *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_stretch,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ:|i", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, sipType_QLayout, &a1, &a2))
        {
            sipCpp->insertLayout(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_insertLayout, doc_QBoxLayout_insertLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_setStretchFactor, "QBoxLayout.setStretchFactor(QWidget, int) -> bool\n"
    "QBoxLayout.setStretchFactor(QLayout, int) -> bool");

extern "C" {static PyObject *meth_QBoxLayout_setStretchFactor(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setStretchFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        int a1;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QWidget, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->setStretchFactor(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QLayout* a0;
        int a1;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8i", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QLayout, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->setStretchFactor(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_setStretchFactor, doc_QBoxLayout_setStretchFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_sizeHint, "QBoxLayout.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QBoxLayout_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QBoxLayout::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_sizeHint, doc_QBoxLayout_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_minimumSize, "QBoxLayout.minimumSize() -> QSize");

extern "C" {static PyObject *meth_QBoxLayout_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QBoxLayout::minimumSize() : sipCpp->minimumSize()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_minimumSize, doc_QBoxLayout_minimumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_maximumSize, "QBoxLayout.maximumSize() -> QSize");

extern "C" {static PyObject *meth_QBoxLayout_maximumSize(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_maximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QBoxLayout::maximumSize() : sipCpp->maximumSize()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_maximumSize, doc_QBoxLayout_maximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_hasHeightForWidth, "QBoxLayout.hasHeightForWidth() -> bool");

extern "C" {static PyObject *meth_QBoxLayout_hasHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_hasHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QBoxLayout::hasHeightForWidth() : sipCpp->hasHeightForWidth());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_hasHeightForWidth, doc_QBoxLayout_hasHeightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_heightForWidth, "QBoxLayout.heightForWidth(int) -> int");

extern "C" {static PyObject *meth_QBoxLayout_heightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_heightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QBoxLayout::heightForWidth(a0) : sipCpp->heightForWidth(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_heightForWidth, doc_QBoxLayout_heightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_minimumHeightForWidth, "QBoxLayout.minimumHeightForWidth(int) -> int");

extern "C" {static PyObject *meth_QBoxLayout_minimumHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_minimumHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QBoxLayout::minimumHeightForWidth(a0) : sipCpp->minimumHeightForWidth(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_minimumHeightForWidth, doc_QBoxLayout_minimumHeightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_expandingDirections, "QBoxLayout.expandingDirections() -> Qt.Orientations");

extern "C" {static PyObject *meth_QBoxLayout_expandingDirections(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_expandingDirections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            Qt::Orientations*sipRes;

            sipRes = new Qt::Orientations((sipSelfWasArg ? sipCpp->QBoxLayout::expandingDirections() : sipCpp->expandingDirections()));

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_expandingDirections, doc_QBoxLayout_expandingDirections);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_invalidate, "QBoxLayout.invalidate()");

extern "C" {static PyObject *meth_QBoxLayout_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QBoxLayout::invalidate() : sipCpp->invalidate());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_invalidate, doc_QBoxLayout_invalidate);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_itemAt, "QBoxLayout.itemAt(int) -> QLayoutItem");

extern "C" {static PyObject *meth_QBoxLayout_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            QLayoutItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QBoxLayout::itemAt(a0) : sipCpp->itemAt(a0));

            return sipConvertFromType(sipRes,sipType_QLayoutItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_itemAt, doc_QBoxLayout_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_takeAt, "QBoxLayout.takeAt(int) -> QLayoutItem");

extern "C" {static PyObject *meth_QBoxLayout_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            QLayoutItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QBoxLayout::takeAt(a0) : sipCpp->takeAt(a0));

            return sipConvertFromType(sipRes,sipType_QLayoutItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_takeAt, doc_QBoxLayout_takeAt);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_count, "QBoxLayout.count() -> int");

extern "C" {static PyObject *meth_QBoxLayout_count(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QBoxLayout::count() : sipCpp->count());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_count, doc_QBoxLayout_count);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_setGeometry, "QBoxLayout.setGeometry(QRect)");

extern "C" {static PyObject *meth_QBoxLayout_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QRect, &a0))
        {
            (sipSelfWasArg ? sipCpp->QBoxLayout::setGeometry(*a0) : sipCpp->setGeometry(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_setGeometry, doc_QBoxLayout_setGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_spacing, "QBoxLayout.spacing() -> int");

extern "C" {static PyObject *meth_QBoxLayout_spacing(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QBoxLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->spacing();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_spacing, doc_QBoxLayout_spacing);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_setSpacing, "QBoxLayout.setSpacing(int)");

extern "C" {static PyObject *meth_QBoxLayout_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            sipCpp->setSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_setSpacing, doc_QBoxLayout_setSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_addSpacerItem, "QBoxLayout.addSpacerItem(QSpacerItem)");

extern "C" {static PyObject *meth_QBoxLayout_addSpacerItem(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addSpacerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSpacerItem* a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QBoxLayout, &sipCpp, sipType_QSpacerItem, &a0))
        {
            sipCpp->addSpacerItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_addSpacerItem, doc_QBoxLayout_addSpacerItem);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_insertSpacerItem, "QBoxLayout.insertSpacerItem(int, QSpacerItem)");

extern "C" {static PyObject *meth_QBoxLayout_insertSpacerItem(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertSpacerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QSpacerItem* a1;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, sipType_QSpacerItem, &a1))
        {
            sipCpp->insertSpacerItem(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_insertSpacerItem, doc_QBoxLayout_insertSpacerItem);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_setStretch, "QBoxLayout.setStretch(int, int)");

extern "C" {static PyObject *meth_QBoxLayout_setStretch(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, &a1))
        {
            sipCpp->setStretch(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_setStretch, doc_QBoxLayout_setStretch);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_stretch, "QBoxLayout.stretch(int) -> int");

extern "C" {static PyObject *meth_QBoxLayout_stretch(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_stretch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->stretch(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_stretch, doc_QBoxLayout_stretch);

    return NULL;
}


PyDoc_STRVAR(doc_QBoxLayout_insertItem, "QBoxLayout.insertItem(int, QLayoutItem)");

extern "C" {static PyObject *meth_QBoxLayout_insertItem(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLayoutItem* a1;
        sipWrapper *sipOwner = 0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJH", &sipSelf, sipType_QBoxLayout, &sipCpp, &a0, sipType_QLayoutItem, &a1, &sipOwner))
        {
            sipCpp->insertItem(a0,a1);

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QBoxLayout, sipName_insertItem, doc_QBoxLayout_insertItem);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QBoxLayout(void *, const sipTypeDef *);}
static void *cast_QBoxLayout(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QBoxLayout)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QLayout)->ctd_cast((QLayout *)(QBoxLayout *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBoxLayout(void *, int);}
static void release_QBoxLayout(void *sipCppV,int)
{
    QBoxLayout *sipCpp = reinterpret_cast<QBoxLayout *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QBoxLayout(sipSimpleWrapper *);}
static void dealloc_QBoxLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQBoxLayout *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QBoxLayout(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QBoxLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QBoxLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQBoxLayout *sipCpp = 0;

    {
        QBoxLayout::Direction a0;
        QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QBoxLayout_Direction, &a0, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQBoxLayout(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBoxLayout[] = {{186, 255, 1}};


static PyMethodDef methods_QBoxLayout[] = {
    {SIP_MLNAME_CAST(sipName_addChildLayout), (PyCFunction)meth_QBoxLayout_addChildLayout, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_addChildWidget), (PyCFunction)meth_QBoxLayout_addChildWidget, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_addItem), meth_QBoxLayout_addItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_addItem)},
    {SIP_MLNAME_CAST(sipName_addLayout), (PyCFunction)meth_QBoxLayout_addLayout, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBoxLayout_addLayout)},
    {SIP_MLNAME_CAST(sipName_addSpacerItem), meth_QBoxLayout_addSpacerItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_addSpacerItem)},
    {SIP_MLNAME_CAST(sipName_addSpacing), meth_QBoxLayout_addSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_addSpacing)},
    {SIP_MLNAME_CAST(sipName_addStretch), (PyCFunction)meth_QBoxLayout_addStretch, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBoxLayout_addStretch)},
    {SIP_MLNAME_CAST(sipName_addStrut), meth_QBoxLayout_addStrut, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_addStrut)},
    {SIP_MLNAME_CAST(sipName_addWidget), (PyCFunction)meth_QBoxLayout_addWidget, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBoxLayout_addWidget)},
    {SIP_MLNAME_CAST(sipName_alignmentRect), (PyCFunction)meth_QBoxLayout_alignmentRect, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QBoxLayout_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QBoxLayout_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_count), meth_QBoxLayout_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_count)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QBoxLayout_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_direction), meth_QBoxLayout_direction, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_direction)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QBoxLayout_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_expandingDirections), meth_QBoxLayout_expandingDirections, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_expandingDirections)},
    {SIP_MLNAME_CAST(sipName_hasHeightForWidth), meth_QBoxLayout_hasHeightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_hasHeightForWidth)},
    {SIP_MLNAME_CAST(sipName_heightForWidth), meth_QBoxLayout_heightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_heightForWidth)},
    {SIP_MLNAME_CAST(sipName_insertItem), meth_QBoxLayout_insertItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_insertItem)},
    {SIP_MLNAME_CAST(sipName_insertLayout), (PyCFunction)meth_QBoxLayout_insertLayout, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBoxLayout_insertLayout)},
    {SIP_MLNAME_CAST(sipName_insertSpacerItem), meth_QBoxLayout_insertSpacerItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_insertSpacerItem)},
    {SIP_MLNAME_CAST(sipName_insertSpacing), meth_QBoxLayout_insertSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_insertSpacing)},
    {SIP_MLNAME_CAST(sipName_insertStretch), (PyCFunction)meth_QBoxLayout_insertStretch, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBoxLayout_insertStretch)},
    {SIP_MLNAME_CAST(sipName_insertWidget), (PyCFunction)meth_QBoxLayout_insertWidget, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QBoxLayout_insertWidget)},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QBoxLayout_invalidate, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_invalidate)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QBoxLayout_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QBoxLayout_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_itemAt)},
    {SIP_MLNAME_CAST(sipName_maximumSize), meth_QBoxLayout_maximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_maximumSize)},
    {SIP_MLNAME_CAST(sipName_minimumHeightForWidth), meth_QBoxLayout_minimumHeightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_minimumHeightForWidth)},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QBoxLayout_minimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_minimumSize)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QBoxLayout_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QBoxLayout_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QBoxLayout_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setDirection), meth_QBoxLayout_setDirection, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_setDirection)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QBoxLayout_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_setGeometry)},
    {SIP_MLNAME_CAST(sipName_setSpacing), meth_QBoxLayout_setSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_setSpacing)},
    {SIP_MLNAME_CAST(sipName_setStretch), meth_QBoxLayout_setStretch, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_setStretch)},
    {SIP_MLNAME_CAST(sipName_setStretchFactor), meth_QBoxLayout_setStretchFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_setStretchFactor)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QBoxLayout_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_sizeHint)},
    {SIP_MLNAME_CAST(sipName_spacing), meth_QBoxLayout_spacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_spacing)},
    {SIP_MLNAME_CAST(sipName_stretch), meth_QBoxLayout_stretch, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_stretch)},
    {SIP_MLNAME_CAST(sipName_takeAt), meth_QBoxLayout_takeAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QBoxLayout_takeAt)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QBoxLayout_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_widgetEvent), (PyCFunction)meth_QBoxLayout_widgetEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QBoxLayout[] = {
    {sipName_BottomToTop, static_cast<int>(QBoxLayout::BottomToTop), 33},
    {sipName_Down, static_cast<int>(QBoxLayout::Down), 33},
    {sipName_LeftToRight, static_cast<int>(QBoxLayout::LeftToRight), 33},
    {sipName_RightToLeft, static_cast<int>(QBoxLayout::RightToLeft), 33},
    {sipName_TopToBottom, static_cast<int>(QBoxLayout::TopToBottom), 33},
    {sipName_Up, static_cast<int>(QBoxLayout::Up), 33},
};

PyDoc_STRVAR(doc_QBoxLayout, "\1QBoxLayout(QBoxLayout.Direction, QWidget parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QBoxLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QBoxLayout,
        {0}
    },
    {
        sipNameNr_QBoxLayout,
        {0, 0, 1},
        45, methods_QBoxLayout,
        6, enummembers_QBoxLayout,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QBoxLayout,
    -1,
    -1,
    supers_QBoxLayout,
    0,
    init_type_QBoxLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QBoxLayout,
    0,
    0,
    0,
    release_QBoxLayout,
    cast_QBoxLayout,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QBoxLayout::staticMetaObject,
    0,
    0,
    0
};
