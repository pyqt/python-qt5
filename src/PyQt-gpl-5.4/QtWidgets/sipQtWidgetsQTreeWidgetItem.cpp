/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:10 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtreewidget.sip"
#include <qtreewidget.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"

#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtreewidget.sip"
#include <qtreewidget.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 30 "sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeWidgetItem.cpp"


class sipQTreeWidgetItem : public QTreeWidgetItem
{
public:
    sipQTreeWidgetItem(int);
    sipQTreeWidgetItem(const QStringList&,int);
    sipQTreeWidgetItem(QTreeWidget*,int);
    sipQTreeWidgetItem(QTreeWidget*,const QStringList&,int);
    sipQTreeWidgetItem(QTreeWidget*,QTreeWidgetItem*,int);
    sipQTreeWidgetItem(QTreeWidgetItem*,int);
    sipQTreeWidgetItem(QTreeWidgetItem*,const QStringList&,int);
    sipQTreeWidgetItem(QTreeWidgetItem*,QTreeWidgetItem*,int);
    sipQTreeWidgetItem(const QTreeWidgetItem&);
    virtual ~sipQTreeWidgetItem();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_emitDataChanged();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void write(QDataStream&) const;
    void read(QDataStream&);
    bool operator<(const QTreeWidgetItem&) const;
    void setData(int,int,const QVariant&);
    QVariant data(int,int) const;
    QTreeWidgetItem* clone() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTreeWidgetItem(const sipQTreeWidgetItem &);
    sipQTreeWidgetItem &operator = (const sipQTreeWidgetItem &);

    char sipPyMethods[6];
};

sipQTreeWidgetItem::sipQTreeWidgetItem(int a0): QTreeWidgetItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(const QStringList& a0,int a1): QTreeWidgetItem(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(QTreeWidget*a0,int a1): QTreeWidgetItem(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(QTreeWidget*a0,const QStringList& a1,int a2): QTreeWidgetItem(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(QTreeWidget*a0,QTreeWidgetItem*a1,int a2): QTreeWidgetItem(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(QTreeWidgetItem*a0,int a1): QTreeWidgetItem(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(QTreeWidgetItem*a0,const QStringList& a1,int a2): QTreeWidgetItem(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(QTreeWidgetItem*a0,QTreeWidgetItem*a1,int a2): QTreeWidgetItem(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::sipQTreeWidgetItem(const QTreeWidgetItem& a0): QTreeWidgetItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeWidgetItem::~sipQTreeWidgetItem()
{
    sipCommonDtor(sipPySelf);
}

void sipQTreeWidgetItem::write(QDataStream& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_write);

    if (!sipMeth)
    {
        QTreeWidgetItem::write(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDataStream&);

    ((sipVH_QtGui_24)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[24]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeWidgetItem::read(QDataStream& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_read);

    if (!sipMeth)
    {
        QTreeWidgetItem::read(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDataStream&);

    ((sipVH_QtGui_24)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[24]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTreeWidgetItem::operator<(const QTreeWidgetItem& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName___lt__);

    if (!sipMeth)
        return QTreeWidgetItem::operator<(a0);

    extern bool sipVH_QtWidgets_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QTreeWidgetItem&);

    return sipVH_QtWidgets_19(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeWidgetItem::setData(int a0,int a1,const QVariant& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
    {
        QTreeWidgetItem::setData(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QVariant&);

    sipVH_QtWidgets_20(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QVariant sipQTreeWidgetItem::data(int a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return QTreeWidgetItem::data(a0,a1);

    extern QVariant sipVH_QtWidgets_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH_QtWidgets_21(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QTreeWidgetItem* sipQTreeWidgetItem::clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_clone);

    if (!sipMeth)
        return QTreeWidgetItem::clone();

    extern QTreeWidgetItem* sipVH_QtWidgets_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_22(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTreeWidgetItem::sipProtect_emitDataChanged()
{
    QTreeWidgetItem::emitDataChanged();
}


PyDoc_STRVAR(doc_QTreeWidgetItem_clone, "QTreeWidgetItem.clone() -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidgetItem_clone(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            QTreeWidgetItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTreeWidgetItem::clone() : sipCpp->clone());

            return sipConvertFromNewType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_clone, doc_QTreeWidgetItem_clone);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_treeWidget, "QTreeWidgetItem.treeWidget() -> QTreeWidget");

extern "C" {static PyObject *meth_QTreeWidgetItem_treeWidget(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_treeWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            QTreeWidget*sipRes;

            sipRes = sipCpp->treeWidget();

            return sipConvertFromType(sipRes,sipType_QTreeWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_treeWidget, doc_QTreeWidgetItem_treeWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_flags, "QTreeWidgetItem.flags() -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QTreeWidgetItem_flags(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            Qt::ItemFlags*sipRes;

            sipRes = new Qt::ItemFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_flags, doc_QTreeWidgetItem_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_text, "QTreeWidgetItem.text(int) -> str");

extern "C" {static PyObject *meth_QTreeWidgetItem_text(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->text(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_text, doc_QTreeWidgetItem_text);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_icon, "QTreeWidgetItem.icon(int) -> QIcon");

extern "C" {static PyObject *meth_QTreeWidgetItem_icon(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QIcon*sipRes;

            sipRes = new QIcon(sipCpp->icon(a0));

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_icon, doc_QTreeWidgetItem_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_statusTip, "QTreeWidgetItem.statusTip(int) -> str");

extern "C" {static PyObject *meth_QTreeWidgetItem_statusTip(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_statusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->statusTip(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_statusTip, doc_QTreeWidgetItem_statusTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_toolTip, "QTreeWidgetItem.toolTip(int) -> str");

extern "C" {static PyObject *meth_QTreeWidgetItem_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toolTip(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_toolTip, doc_QTreeWidgetItem_toolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_whatsThis, "QTreeWidgetItem.whatsThis(int) -> str");

extern "C" {static PyObject *meth_QTreeWidgetItem_whatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_whatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->whatsThis(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_whatsThis, doc_QTreeWidgetItem_whatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_font, "QTreeWidgetItem.font(int) -> QFont");

extern "C" {static PyObject *meth_QTreeWidgetItem_font(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QFont*sipRes;

            sipRes = new QFont(sipCpp->font(a0));

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_font, doc_QTreeWidgetItem_font);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_textAlignment, "QTreeWidgetItem.textAlignment(int) -> int");

extern "C" {static PyObject *meth_QTreeWidgetItem_textAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_textAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->textAlignment(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_textAlignment, doc_QTreeWidgetItem_textAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setTextAlignment, "QTreeWidgetItem.setTextAlignment(int, int)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setTextAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setTextAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, &a1))
        {
            sipCpp->setTextAlignment(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setTextAlignment, doc_QTreeWidgetItem_setTextAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_checkState, "QTreeWidgetItem.checkState(int) -> Qt.CheckState");

extern "C" {static PyObject *meth_QTreeWidgetItem_checkState(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_checkState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            Qt::CheckState sipRes;

            sipRes = sipCpp->checkState(a0);

            return sipConvertFromEnum(sipRes,sipType_Qt_CheckState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_checkState, doc_QTreeWidgetItem_checkState);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setCheckState, "QTreeWidgetItem.setCheckState(int, Qt.CheckState)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setCheckState(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setCheckState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::CheckState a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_Qt_CheckState, &a1))
        {
            sipCpp->setCheckState(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setCheckState, doc_QTreeWidgetItem_setCheckState);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_data, "QTreeWidgetItem.data(int, int) -> QVariant");

extern "C" {static PyObject *meth_QTreeWidgetItem_data(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, &a1))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QTreeWidgetItem::data(a0,a1) : sipCpp->data(a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_data, doc_QTreeWidgetItem_data);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setData, "QTreeWidgetItem.setData(int, int, QVariant)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setData(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QVariant* a2;
        int a2State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, &a1, sipType_QVariant, &a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp->QTreeWidgetItem::setData(a0,a1,*a2) : sipCpp->setData(a0,a1,*a2));
            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setData, doc_QTreeWidgetItem_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_read, "QTreeWidgetItem.read(QDataStream)");

extern "C" {static PyObject *meth_QTreeWidgetItem_read(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream* a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeWidgetItem::read(*a0) : sipCpp->read(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_read, doc_QTreeWidgetItem_read);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_write, "QTreeWidgetItem.write(QDataStream)");

extern "C" {static PyObject *meth_QTreeWidgetItem_write(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream* a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeWidgetItem::write(*a0) : sipCpp->write(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_write, doc_QTreeWidgetItem_write);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_parent, "QTreeWidgetItem.parent() -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidgetItem_parent(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            QTreeWidgetItem*sipRes;

            sipRes = sipCpp->parent();

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_parent, doc_QTreeWidgetItem_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_child, "QTreeWidgetItem.child(int) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidgetItem_child(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_child(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QTreeWidgetItem*sipRes;

            sipRes = sipCpp->child(a0);

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_child, doc_QTreeWidgetItem_child);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_childCount, "QTreeWidgetItem.childCount() -> int");

extern "C" {static PyObject *meth_QTreeWidgetItem_childCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_childCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->childCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_childCount, doc_QTreeWidgetItem_childCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_columnCount, "QTreeWidgetItem.columnCount() -> int");

extern "C" {static PyObject *meth_QTreeWidgetItem_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_columnCount, doc_QTreeWidgetItem_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_addChild, "QTreeWidgetItem.addChild(QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidgetItem_addChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_addChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            sipCpp->addChild(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_addChild, doc_QTreeWidgetItem_addChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_insertChild, "QTreeWidgetItem.insertChild(int, QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidgetItem_insertChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_insertChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem* a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QTreeWidgetItem, &a1))
        {
            sipCpp->insertChild(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_insertChild, doc_QTreeWidgetItem_insertChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_takeChild, "QTreeWidgetItem.takeChild(int) -> QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidgetItem_takeChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_takeChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QTreeWidgetItem*sipRes;

            sipRes = sipCpp->takeChild(a0);

            return sipConvertFromType(sipRes,sipType_QTreeWidgetItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_takeChild, doc_QTreeWidgetItem_takeChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_type, "QTreeWidgetItem.type() -> int");

extern "C" {static PyObject *meth_QTreeWidgetItem_type(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->type();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_type, doc_QTreeWidgetItem_type);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setFlags, "QTreeWidgetItem.setFlags(Qt.ItemFlags)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ItemFlags* a0;
        int a0State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_Qt_ItemFlags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_Qt_ItemFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setFlags, doc_QTreeWidgetItem_setFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setText, "QTreeWidgetItem.setText(int, str)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setText(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setText(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setText, doc_QTreeWidgetItem_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setIcon, "QTreeWidgetItem.setIcon(int, QIcon)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QIcon* a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QIcon, &a1))
        {
            sipCpp->setIcon(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setIcon, doc_QTreeWidgetItem_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setStatusTip, "QTreeWidgetItem.setStatusTip(int, str)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setStatusTip(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setStatusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setStatusTip(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setStatusTip, doc_QTreeWidgetItem_setStatusTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setToolTip, "QTreeWidgetItem.setToolTip(int, str)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setToolTip(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setToolTip, doc_QTreeWidgetItem_setToolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setWhatsThis, "QTreeWidgetItem.setWhatsThis(int, str)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QString* a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setWhatsThis(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setWhatsThis, doc_QTreeWidgetItem_setWhatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setFont, "QTreeWidgetItem.setFont(int, QFont)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setFont(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QFont* a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QFont, &a1))
        {
            sipCpp->setFont(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setFont, doc_QTreeWidgetItem_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_indexOfChild, "QTreeWidgetItem.indexOfChild(QTreeWidgetItem) -> int");

extern "C" {static PyObject *meth_QTreeWidgetItem_indexOfChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_indexOfChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            int sipRes;

            sipRes = sipCpp->indexOfChild(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_indexOfChild, doc_QTreeWidgetItem_indexOfChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_sizeHint, "QTreeWidgetItem.sizeHint(int) -> QSize");

extern "C" {static PyObject *meth_QTreeWidgetItem_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->sizeHint(a0));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_sizeHint, doc_QTreeWidgetItem_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setSizeHint, "QTreeWidgetItem.setSizeHint(int, QSize)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QSize* a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QSize, &a1))
        {
            sipCpp->setSizeHint(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setSizeHint, doc_QTreeWidgetItem_setSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_addChildren, "QTreeWidgetItem.addChildren(list-of-QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidgetItem_addChildren(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_addChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QTreeWidgetItem*>* a0;
        int a0State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QList_0101QTreeWidgetItem,&a0, &a0State))
        {
            sipCpp->addChildren(*a0);
            sipReleaseType(const_cast<QList<QTreeWidgetItem*> *>(a0),sipType_QList_0101QTreeWidgetItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_addChildren, doc_QTreeWidgetItem_addChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_insertChildren, "QTreeWidgetItem.insertChildren(int, list-of-QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidgetItem_insertChildren(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_insertChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QList<QTreeWidgetItem*>* a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ3", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QList_0101QTreeWidgetItem,&a1, &a1State))
        {
            sipCpp->insertChildren(a0,*a1);
            sipReleaseType(const_cast<QList<QTreeWidgetItem*> *>(a1),sipType_QList_0101QTreeWidgetItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_insertChildren, doc_QTreeWidgetItem_insertChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_takeChildren, "QTreeWidgetItem.takeChildren() -> list-of-QTreeWidgetItem");

extern "C" {static PyObject *meth_QTreeWidgetItem_takeChildren(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_takeChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            QList<QTreeWidgetItem*>*sipRes;

            sipRes = new QList<QTreeWidgetItem*>(sipCpp->takeChildren());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTreeWidgetItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_takeChildren, doc_QTreeWidgetItem_takeChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_background, "QTreeWidgetItem.background(int) -> QBrush");

extern "C" {static PyObject *meth_QTreeWidgetItem_background(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->background(a0));

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_background, doc_QTreeWidgetItem_background);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setBackground, "QTreeWidgetItem.setBackground(int, QBrush)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QBrush* a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QBrush, &a1, &a1State))
        {
            sipCpp->setBackground(a0,*a1);
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setBackground, doc_QTreeWidgetItem_setBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_foreground, "QTreeWidgetItem.foreground(int) -> QBrush");

extern "C" {static PyObject *meth_QTreeWidgetItem_foreground(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->foreground(a0));

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_foreground, doc_QTreeWidgetItem_foreground);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setForeground, "QTreeWidgetItem.setForeground(int, QBrush)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setForeground(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QBrush* a1;
        int a1State = 0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_QBrush, &a1, &a1State))
        {
            sipCpp->setForeground(a0,*a1);
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setForeground, doc_QTreeWidgetItem_setForeground);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_sortChildren, "QTreeWidgetItem.sortChildren(int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QTreeWidgetItem_sortChildren(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_sortChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::SortOrder a1;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            sipCpp->sortChildren(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_sortChildren, doc_QTreeWidgetItem_sortChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setSelected, "QTreeWidgetItem.setSelected(bool)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setSelected(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            sipCpp->setSelected(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setSelected, doc_QTreeWidgetItem_setSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_isSelected, "QTreeWidgetItem.isSelected() -> bool");

extern "C" {static PyObject *meth_QTreeWidgetItem_isSelected(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSelected();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isSelected, doc_QTreeWidgetItem_isSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setHidden, "QTreeWidgetItem.setHidden(bool)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            sipCpp->setHidden(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setHidden, doc_QTreeWidgetItem_setHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_isHidden, "QTreeWidgetItem.isHidden() -> bool");

extern "C" {static PyObject *meth_QTreeWidgetItem_isHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isHidden();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isHidden, doc_QTreeWidgetItem_isHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setExpanded, "QTreeWidgetItem.setExpanded(bool)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            sipCpp->setExpanded(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setExpanded, doc_QTreeWidgetItem_setExpanded);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_isExpanded, "QTreeWidgetItem.isExpanded() -> bool");

extern "C" {static PyObject *meth_QTreeWidgetItem_isExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isExpanded();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isExpanded, doc_QTreeWidgetItem_isExpanded);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setChildIndicatorPolicy, "QTreeWidgetItem.setChildIndicatorPolicy(QTreeWidgetItem.ChildIndicatorPolicy)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setChildIndicatorPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setChildIndicatorPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem::ChildIndicatorPolicy a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QTreeWidgetItem_ChildIndicatorPolicy, &a0))
        {
            sipCpp->setChildIndicatorPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setChildIndicatorPolicy, doc_QTreeWidgetItem_setChildIndicatorPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_childIndicatorPolicy, "QTreeWidgetItem.childIndicatorPolicy() -> QTreeWidgetItem.ChildIndicatorPolicy");

extern "C" {static PyObject *meth_QTreeWidgetItem_childIndicatorPolicy(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_childIndicatorPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            QTreeWidgetItem::ChildIndicatorPolicy sipRes;

            sipRes = sipCpp->childIndicatorPolicy();

            return sipConvertFromEnum(sipRes,sipType_QTreeWidgetItem_ChildIndicatorPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_childIndicatorPolicy, doc_QTreeWidgetItem_childIndicatorPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_removeChild, "QTreeWidgetItem.removeChild(QTreeWidgetItem)");

extern "C" {static PyObject *meth_QTreeWidgetItem_removeChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_removeChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeWidgetItem* a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, sipType_QTreeWidgetItem, &a0))
        {
            sipCpp->removeChild(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_removeChild, doc_QTreeWidgetItem_removeChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setFirstColumnSpanned, "QTreeWidgetItem.setFirstColumnSpanned(bool)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            sipCpp->setFirstColumnSpanned(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setFirstColumnSpanned, doc_QTreeWidgetItem_setFirstColumnSpanned);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_isFirstColumnSpanned, "QTreeWidgetItem.isFirstColumnSpanned() -> bool");

extern "C" {static PyObject *meth_QTreeWidgetItem_isFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFirstColumnSpanned();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isFirstColumnSpanned, doc_QTreeWidgetItem_isFirstColumnSpanned);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_setDisabled, "QTreeWidgetItem.setDisabled(bool)");

extern "C" {static PyObject *meth_QTreeWidgetItem_setDisabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_setDisabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeWidgetItem, &sipCpp, &a0))
        {
            sipCpp->setDisabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_setDisabled, doc_QTreeWidgetItem_setDisabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_isDisabled, "QTreeWidgetItem.isDisabled() -> bool");

extern "C" {static PyObject *meth_QTreeWidgetItem_isDisabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_isDisabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDisabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_isDisabled, doc_QTreeWidgetItem_isDisabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeWidgetItem_emitDataChanged, "QTreeWidgetItem.emitDataChanged()");

extern "C" {static PyObject *meth_QTreeWidgetItem_emitDataChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeWidgetItem_emitDataChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeWidgetItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeWidgetItem, &sipCpp))
        {
            sipCpp->sipProtect_emitDataChanged();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeWidgetItem, sipName_emitDataChanged, doc_QTreeWidgetItem_emitDataChanged);

    return NULL;
}


extern "C" {static PyObject *slot_QTreeWidgetItem___ge__(PyObject *,PyObject *);}
static PyObject *slot_QTreeWidgetItem___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QTreeWidgetItem *sipCpp = reinterpret_cast<QTreeWidgetItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTreeWidgetItem));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp->QTreeWidgetItem::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWidgets,ge_slot,sipType_QTreeWidgetItem,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTreeWidgetItem___lt__(PyObject *,PyObject *);}
static PyObject *slot_QTreeWidgetItem___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QTreeWidgetItem *sipCpp = reinterpret_cast<QTreeWidgetItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTreeWidgetItem));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTreeWidgetItem* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTreeWidgetItem, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QTreeWidgetItem::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWidgets,lt_slot,sipType_QTreeWidgetItem,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTreeWidgetItem(void *, const sipTypeDef *);}
static void *cast_QTreeWidgetItem(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTreeWidgetItem)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTreeWidgetItem(void *, int);}
static void release_QTreeWidgetItem(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTreeWidgetItem *>(sipCppV);
    else
        delete reinterpret_cast<QTreeWidgetItem *>(sipCppV);
}


extern "C" {static void dealloc_QTreeWidgetItem(sipSimpleWrapper *);}
static void dealloc_QTreeWidgetItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTreeWidgetItem *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTreeWidgetItem(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTreeWidgetItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTreeWidgetItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTreeWidgetItem *sipCpp = 0;

    {
        int a0 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &a0))
        {
            sipCpp = new sipQTreeWidgetItem(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QStringList* a0;
        int a0State = 0;
        int a1 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|i", sipType_QStringList,&a0, &a0State, &a1))
        {
            sipCpp = new sipQTreeWidgetItem(*a0,a1);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTreeWidget* a0;
        int a1 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|i", sipType_QTreeWidget, &a0, sipOwner, &a1))
        {
            sipCpp = new sipQTreeWidgetItem(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTreeWidget* a0;
        const QStringList* a1;
        int a1State = 0;
        int a2 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JHJ1|i", sipType_QTreeWidget, &a0, sipOwner, sipType_QStringList,&a1, &a1State, &a2))
        {
            sipCpp = new sipQTreeWidgetItem(a0,*a1,a2);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTreeWidget* a0;
        QTreeWidgetItem* a1;
        int a2 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JHJ8|i", sipType_QTreeWidget, &a0, sipOwner, sipType_QTreeWidgetItem, &a1, &a2))
        {
            sipCpp = new sipQTreeWidgetItem(a0,a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTreeWidgetItem* a0;
        int a1 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|i", sipType_QTreeWidgetItem, &a0, sipOwner, &a1))
        {
            sipCpp = new sipQTreeWidgetItem(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTreeWidgetItem* a0;
        const QStringList* a1;
        int a1State = 0;
        int a2 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JHJ1|i", sipType_QTreeWidgetItem, &a0, sipOwner, sipType_QStringList,&a1, &a1State, &a2))
        {
            sipCpp = new sipQTreeWidgetItem(a0,*a1,a2);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QTreeWidgetItem* a0;
        QTreeWidgetItem* a1;
        int a2 = QTreeWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JHJ8|i", sipType_QTreeWidgetItem, &a0, sipOwner, sipType_QTreeWidgetItem, &a1, &a2))
        {
            sipCpp = new sipQTreeWidgetItem(a0,a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QTreeWidgetItem* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTreeWidgetItem, &a0))
        {
            sipCpp = new sipQTreeWidgetItem(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTreeWidgetItem[] = {
    {(void *)slot_QTreeWidgetItem___ge__, ge_slot},
    {(void *)slot_QTreeWidgetItem___lt__, lt_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTreeWidgetItem[] = {
    {SIP_MLNAME_CAST(sipName_addChild), meth_QTreeWidgetItem_addChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_addChild)},
    {SIP_MLNAME_CAST(sipName_addChildren), meth_QTreeWidgetItem_addChildren, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_addChildren)},
    {SIP_MLNAME_CAST(sipName_background), meth_QTreeWidgetItem_background, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_background)},
    {SIP_MLNAME_CAST(sipName_checkState), meth_QTreeWidgetItem_checkState, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_checkState)},
    {SIP_MLNAME_CAST(sipName_child), meth_QTreeWidgetItem_child, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_child)},
    {SIP_MLNAME_CAST(sipName_childCount), meth_QTreeWidgetItem_childCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_childCount)},
    {SIP_MLNAME_CAST(sipName_childIndicatorPolicy), meth_QTreeWidgetItem_childIndicatorPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_childIndicatorPolicy)},
    {SIP_MLNAME_CAST(sipName_clone), meth_QTreeWidgetItem_clone, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_clone)},
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QTreeWidgetItem_columnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_columnCount)},
    {SIP_MLNAME_CAST(sipName_data), meth_QTreeWidgetItem_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_data)},
    {SIP_MLNAME_CAST(sipName_emitDataChanged), (PyCFunction)meth_QTreeWidgetItem_emitDataChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_emitDataChanged)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QTreeWidgetItem_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_flags)},
    {SIP_MLNAME_CAST(sipName_font), meth_QTreeWidgetItem_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_font)},
    {SIP_MLNAME_CAST(sipName_foreground), meth_QTreeWidgetItem_foreground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_foreground)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QTreeWidgetItem_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_icon)},
    {SIP_MLNAME_CAST(sipName_indexOfChild), meth_QTreeWidgetItem_indexOfChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_indexOfChild)},
    {SIP_MLNAME_CAST(sipName_insertChild), meth_QTreeWidgetItem_insertChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_insertChild)},
    {SIP_MLNAME_CAST(sipName_insertChildren), meth_QTreeWidgetItem_insertChildren, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_insertChildren)},
    {SIP_MLNAME_CAST(sipName_isDisabled), meth_QTreeWidgetItem_isDisabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_isDisabled)},
    {SIP_MLNAME_CAST(sipName_isExpanded), meth_QTreeWidgetItem_isExpanded, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_isExpanded)},
    {SIP_MLNAME_CAST(sipName_isFirstColumnSpanned), meth_QTreeWidgetItem_isFirstColumnSpanned, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_isFirstColumnSpanned)},
    {SIP_MLNAME_CAST(sipName_isHidden), meth_QTreeWidgetItem_isHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_isHidden)},
    {SIP_MLNAME_CAST(sipName_isSelected), meth_QTreeWidgetItem_isSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_isSelected)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QTreeWidgetItem_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_parent)},
    {SIP_MLNAME_CAST(sipName_read), meth_QTreeWidgetItem_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_read)},
    {SIP_MLNAME_CAST(sipName_removeChild), meth_QTreeWidgetItem_removeChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_removeChild)},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QTreeWidgetItem_setBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setBackground)},
    {SIP_MLNAME_CAST(sipName_setCheckState), meth_QTreeWidgetItem_setCheckState, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setCheckState)},
    {SIP_MLNAME_CAST(sipName_setChildIndicatorPolicy), meth_QTreeWidgetItem_setChildIndicatorPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setChildIndicatorPolicy)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QTreeWidgetItem_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setData)},
    {SIP_MLNAME_CAST(sipName_setDisabled), meth_QTreeWidgetItem_setDisabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setDisabled)},
    {SIP_MLNAME_CAST(sipName_setExpanded), meth_QTreeWidgetItem_setExpanded, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setExpanded)},
    {SIP_MLNAME_CAST(sipName_setFirstColumnSpanned), meth_QTreeWidgetItem_setFirstColumnSpanned, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setFirstColumnSpanned)},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QTreeWidgetItem_setFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setFlags)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QTreeWidgetItem_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setFont)},
    {SIP_MLNAME_CAST(sipName_setForeground), meth_QTreeWidgetItem_setForeground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setForeground)},
    {SIP_MLNAME_CAST(sipName_setHidden), meth_QTreeWidgetItem_setHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setHidden)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QTreeWidgetItem_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setIcon)},
    {SIP_MLNAME_CAST(sipName_setSelected), meth_QTreeWidgetItem_setSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setSelected)},
    {SIP_MLNAME_CAST(sipName_setSizeHint), meth_QTreeWidgetItem_setSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setSizeHint)},
    {SIP_MLNAME_CAST(sipName_setStatusTip), meth_QTreeWidgetItem_setStatusTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setStatusTip)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QTreeWidgetItem_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setText)},
    {SIP_MLNAME_CAST(sipName_setTextAlignment), meth_QTreeWidgetItem_setTextAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setTextAlignment)},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QTreeWidgetItem_setToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setToolTip)},
    {SIP_MLNAME_CAST(sipName_setWhatsThis), meth_QTreeWidgetItem_setWhatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_setWhatsThis)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QTreeWidgetItem_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_sizeHint)},
    {SIP_MLNAME_CAST(sipName_sortChildren), meth_QTreeWidgetItem_sortChildren, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_sortChildren)},
    {SIP_MLNAME_CAST(sipName_statusTip), meth_QTreeWidgetItem_statusTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_statusTip)},
    {SIP_MLNAME_CAST(sipName_takeChild), meth_QTreeWidgetItem_takeChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_takeChild)},
    {SIP_MLNAME_CAST(sipName_takeChildren), meth_QTreeWidgetItem_takeChildren, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_takeChildren)},
    {SIP_MLNAME_CAST(sipName_text), meth_QTreeWidgetItem_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_text)},
    {SIP_MLNAME_CAST(sipName_textAlignment), meth_QTreeWidgetItem_textAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_textAlignment)},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QTreeWidgetItem_toolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_toolTip)},
    {SIP_MLNAME_CAST(sipName_treeWidget), meth_QTreeWidgetItem_treeWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_treeWidget)},
    {SIP_MLNAME_CAST(sipName_type), meth_QTreeWidgetItem_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_type)},
    {SIP_MLNAME_CAST(sipName_whatsThis), meth_QTreeWidgetItem_whatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_whatsThis)},
    {SIP_MLNAME_CAST(sipName_write), meth_QTreeWidgetItem_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeWidgetItem_write)}
};

static sipEnumMemberDef enummembers_QTreeWidgetItem[] = {
    {sipName_DontShowIndicator, static_cast<int>(QTreeWidgetItem::DontShowIndicator), 443},
    {sipName_DontShowIndicatorWhenChildless, static_cast<int>(QTreeWidgetItem::DontShowIndicatorWhenChildless), 443},
    {sipName_ShowIndicator, static_cast<int>(QTreeWidgetItem::ShowIndicator), 443},
    {sipName_Type, static_cast<int>(QTreeWidgetItem::Type), 444},
    {sipName_UserType, static_cast<int>(QTreeWidgetItem::UserType), 444},
};

PyDoc_STRVAR(doc_QTreeWidgetItem, "\1QTreeWidgetItem(int type=QTreeWidgetItem.Type)\n"
    "QTreeWidgetItem(list-of-str, int type=QTreeWidgetItem.Type)\n"
    "QTreeWidgetItem(QTreeWidget, int type=QTreeWidgetItem.Type)\n"
    "QTreeWidgetItem(QTreeWidget, list-of-str, int type=QTreeWidgetItem.Type)\n"
    "QTreeWidgetItem(QTreeWidget, QTreeWidgetItem, int type=QTreeWidgetItem.Type)\n"
    "QTreeWidgetItem(QTreeWidgetItem, int type=QTreeWidgetItem.Type)\n"
    "QTreeWidgetItem(QTreeWidgetItem, list-of-str, int type=QTreeWidgetItem.Type)\n"
    "QTreeWidgetItem(QTreeWidgetItem, QTreeWidgetItem, int type=QTreeWidgetItem.Type)\n"
    "QTreeWidgetItem(QTreeWidgetItem)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QTreeWidgetItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTreeWidgetItem,
        {0}
    },
    {
        sipNameNr_QTreeWidgetItem,
        {0, 0, 1},
        57, methods_QTreeWidgetItem,
        5, enummembers_QTreeWidgetItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTreeWidgetItem,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    -1,
    0,
    slots_QTreeWidgetItem,
    init_type_QTreeWidgetItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTreeWidgetItem,
    0,
    0,
    0,
    release_QTreeWidgetItem,
    cast_QTreeWidgetItem,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
