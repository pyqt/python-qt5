/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:11 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicswidget.sip"
#include <qgraphicswidget.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 89 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 185 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 200 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 140 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsview.sip"
#include <qgraphicsview.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 668 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 580 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 432 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtGui/qpen.sip"
#include <qpen.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 488 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 327 "sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 542 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 408 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 514 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 96 "sip/QtCore/qline.sip"
#include <qline.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 458 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 606 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 171 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 174 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 177 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 180 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 183 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 186 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 189 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 195 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 198 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"


class sipQGraphicsScene : public QGraphicsScene
{
public:
    sipQGraphicsScene(QObject*);
    sipQGraphicsScene(const QRectF&,QObject*);
    sipQGraphicsScene(qreal,qreal,qreal,qreal,QObject*);
    virtual ~sipQGraphicsScene();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_contextMenuEvent(bool,QGraphicsSceneContextMenuEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QGraphicsSceneDragDropEvent*);
    void sipProtectVirt_dragMoveEvent(bool,QGraphicsSceneDragDropEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QGraphicsSceneDragDropEvent*);
    void sipProtectVirt_dropEvent(bool,QGraphicsSceneDragDropEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_helpEvent(bool,QGraphicsSceneHelpEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_mousePressEvent(bool,QGraphicsSceneMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QGraphicsSceneMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QGraphicsSceneMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QGraphicsSceneMouseEvent*);
    void sipProtectVirt_wheelEvent(bool,QGraphicsSceneWheelEvent*);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    void sipProtectVirt_drawBackground(bool,QPainter*,const QRectF&);
    void sipProtectVirt_drawForeground(bool,QPainter*,const QRectF&);
    bool sipProtectVirt_eventFilter(bool,QObject*,QEvent*);
    bool sipProtect_focusNextPrevChild(bool);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void drawForeground(QPainter*,const QRectF&);
    void drawBackground(QPainter*,const QRectF&);
    void inputMethodEvent(QInputMethodEvent*);
    void wheelEvent(QGraphicsSceneWheelEvent*);
    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent*);
    void mouseReleaseEvent(QGraphicsSceneMouseEvent*);
    void mouseMoveEvent(QGraphicsSceneMouseEvent*);
    void mousePressEvent(QGraphicsSceneMouseEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void helpEvent(QGraphicsSceneHelpEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dropEvent(QGraphicsSceneDragDropEvent*);
    void dragLeaveEvent(QGraphicsSceneDragDropEvent*);
    void dragMoveEvent(QGraphicsSceneDragDropEvent*);
    void dragEnterEvent(QGraphicsSceneDragDropEvent*);
    void contextMenuEvent(QGraphicsSceneContextMenuEvent*);
    bool event(QEvent*);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsScene(const sipQGraphicsScene &);
    sipQGraphicsScene &operator = (const sipQGraphicsScene &);

    char sipPyMethods[26];
};

sipQGraphicsScene::sipQGraphicsScene(QObject*a0): QGraphicsScene(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsScene::sipQGraphicsScene(const QRectF& a0,QObject*a1): QGraphicsScene(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsScene::sipQGraphicsScene(qreal a0,qreal a1,qreal a2,qreal a3,QObject*a4): QGraphicsScene(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsScene::~sipQGraphicsScene()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGraphicsScene::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QGraphicsScene);
}

int sipQGraphicsScene::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGraphicsScene::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QGraphicsScene,_c,_id,_a);

    return _id;
}

void *sipQGraphicsScene::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QGraphicsScene, _clname, &sipCpp) ? sipCpp : QGraphicsScene::qt_metacast(_clname));
}

void sipQGraphicsScene::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QGraphicsScene::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QGraphicsScene::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QGraphicsScene::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QGraphicsScene::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QGraphicsScene::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGraphicsScene::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QGraphicsScene::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsScene::drawForeground(QPainter*a0,const QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_drawForeground);

    if (!sipMeth)
    {
        QGraphicsScene::drawForeground(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_115(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRectF&);

    sipVH_QtWidgets_115(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsScene::drawBackground(QPainter*a0,const QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_drawBackground);

    if (!sipMeth)
    {
        QGraphicsScene::drawBackground(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_115(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRectF&);

    sipVH_QtWidgets_115(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsScene::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QGraphicsScene::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::wheelEvent(QGraphicsSceneWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QGraphicsScene::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_117(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneWheelEvent*);

    sipVH_QtWidgets_117(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::mouseDoubleClickEvent(QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QGraphicsScene::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_118(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneMouseEvent*);

    sipVH_QtWidgets_118(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::mouseReleaseEvent(QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QGraphicsScene::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_118(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneMouseEvent*);

    sipVH_QtWidgets_118(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::mouseMoveEvent(QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QGraphicsScene::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_118(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneMouseEvent*);

    sipVH_QtWidgets_118(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::mousePressEvent(QGraphicsSceneMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QGraphicsScene::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_118(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneMouseEvent*);

    sipVH_QtWidgets_118(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QGraphicsScene::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QGraphicsScene::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::helpEvent(QGraphicsSceneHelpEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_helpEvent);

    if (!sipMeth)
    {
        QGraphicsScene::helpEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_119(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneHelpEvent*);

    sipVH_QtWidgets_119(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QGraphicsScene::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QGraphicsScene::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::dropEvent(QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QGraphicsScene::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneDragDropEvent*);

    sipVH_QtWidgets_120(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::dragLeaveEvent(QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QGraphicsScene::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneDragDropEvent*);

    sipVH_QtWidgets_120(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::dragMoveEvent(QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QGraphicsScene::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneDragDropEvent*);

    sipVH_QtWidgets_120(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::dragEnterEvent(QGraphicsSceneDragDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QGraphicsScene::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneDragDropEvent*);

    sipVH_QtWidgets_120(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsScene::contextMenuEvent(QGraphicsSceneContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QGraphicsScene::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_121(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGraphicsSceneContextMenuEvent*);

    sipVH_QtWidgets_121(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGraphicsScene::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QGraphicsScene::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQGraphicsScene::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QGraphicsScene::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQGraphicsScene::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQGraphicsScene::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQGraphicsScene::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQGraphicsScene::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQGraphicsScene::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQGraphicsScene::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

bool sipQGraphicsScene::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QGraphicsScene::event(a0) : event(a0));
}

void sipQGraphicsScene::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QGraphicsSceneContextMenuEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_dropEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::dropEvent(a0) : dropEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::focusInEvent(a0) : focusInEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_helpEvent(bool sipSelfWasArg,QGraphicsSceneHelpEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::helpEvent(a0) : helpEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QGraphicsSceneWheelEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::wheelEvent(a0) : wheelEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QGraphicsScene::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQGraphicsScene::sipProtectVirt_drawBackground(bool sipSelfWasArg,QPainter*a0,const QRectF& a1)
{
    (sipSelfWasArg ? QGraphicsScene::drawBackground(a0,a1) : drawBackground(a0,a1));
}

void sipQGraphicsScene::sipProtectVirt_drawForeground(bool sipSelfWasArg,QPainter*a0,const QRectF& a1)
{
    (sipSelfWasArg ? QGraphicsScene::drawForeground(a0,a1) : drawForeground(a0,a1));
}

bool sipQGraphicsScene::sipProtectVirt_eventFilter(bool sipSelfWasArg,QObject*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QGraphicsScene::eventFilter(a0,a1) : eventFilter(a0,a1));
}

bool sipQGraphicsScene::sipProtect_focusNextPrevChild(bool a0)
{
    return QGraphicsScene::focusNextPrevChild(a0);
}


PyDoc_STRVAR(doc_QGraphicsScene_sender, "QGraphicsScene.sender() -> QObject");

extern "C" {static PyObject *meth_QGraphicsScene_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 982 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_sender, doc_QGraphicsScene_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_receivers, "QGraphicsScene.receivers(signal) -> int");

extern "C" {static PyObject *meth_QGraphicsScene_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QGraphicsScene, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1041 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsScene.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_receivers, doc_QGraphicsScene_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_timerEvent, "QGraphicsScene.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_timerEvent, doc_QGraphicsScene_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_childEvent, "QGraphicsScene.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_childEvent, doc_QGraphicsScene_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_customEvent, "QGraphicsScene.customEvent(QEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_customEvent, doc_QGraphicsScene_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_connectNotify, "QGraphicsScene.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QGraphicsScene_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_connectNotify, doc_QGraphicsScene_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_disconnectNotify, "QGraphicsScene.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QGraphicsScene_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_disconnectNotify, doc_QGraphicsScene_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_senderSignalIndex, "QGraphicsScene.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QGraphicsScene_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_senderSignalIndex, doc_QGraphicsScene_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_isSignalConnected, "QGraphicsScene.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QGraphicsScene_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_isSignalConnected, doc_QGraphicsScene_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_sceneRect, "QGraphicsScene.sceneRect() -> QRectF");

extern "C" {static PyObject *meth_QGraphicsScene_sceneRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_sceneRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->sceneRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_sceneRect, doc_QGraphicsScene_sceneRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_width, "QGraphicsScene.width() -> float");

extern "C" {static PyObject *meth_QGraphicsScene_width(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_width, doc_QGraphicsScene_width);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_height, "QGraphicsScene.height() -> float");

extern "C" {static PyObject *meth_QGraphicsScene_height(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->height();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_height, doc_QGraphicsScene_height);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setSceneRect, "QGraphicsScene.setSceneRect(QRectF)\n"
    "QGraphicsScene.setSceneRect(float, float, float, float)");

extern "C" {static PyObject *meth_QGraphicsScene_setSceneRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setSceneRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setSceneRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QGraphicsScene, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setSceneRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setSceneRect, doc_QGraphicsScene_setSceneRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_render, "QGraphicsScene.render(QPainter, QRectF target=QRectF(), QRectF source=QRectF(), Qt.AspectRatioMode mode=Qt.KeepAspectRatio)");

extern "C" {static PyObject *meth_QGraphicsScene_render(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_render(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        const QRectF& a1def = QRectF();
        const QRectF* a1 = &a1def;
        const QRectF& a2def = QRectF();
        const QRectF* a2 = &a2def;
        Qt::AspectRatioMode a3 = Qt::KeepAspectRatio;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_target,
            sipName_source,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J9J9E", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1, sipType_QRectF, &a2, sipType_Qt_AspectRatioMode, &a3))
        {
            sipCpp->render(a0,*a1,*a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_render, doc_QGraphicsScene_render);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_itemIndexMethod, "QGraphicsScene.itemIndexMethod() -> QGraphicsScene.ItemIndexMethod");

extern "C" {static PyObject *meth_QGraphicsScene_itemIndexMethod(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_itemIndexMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QGraphicsScene::ItemIndexMethod sipRes;

            sipRes = sipCpp->itemIndexMethod();

            return sipConvertFromEnum(sipRes,sipType_QGraphicsScene_ItemIndexMethod);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_itemIndexMethod, doc_QGraphicsScene_itemIndexMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setItemIndexMethod, "QGraphicsScene.setItemIndexMethod(QGraphicsScene.ItemIndexMethod)");

extern "C" {static PyObject *meth_QGraphicsScene_setItemIndexMethod(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setItemIndexMethod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsScene::ItemIndexMethod a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsScene_ItemIndexMethod, &a0))
        {
            sipCpp->setItemIndexMethod(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setItemIndexMethod, doc_QGraphicsScene_setItemIndexMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_itemsBoundingRect, "QGraphicsScene.itemsBoundingRect() -> QRectF");

extern "C" {static PyObject *meth_QGraphicsScene_itemsBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_itemsBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->itemsBoundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_itemsBoundingRect, doc_QGraphicsScene_itemsBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_items, "QGraphicsScene.items(Qt.SortOrder order=Qt.DescendingOrder) -> list-of-QGraphicsItem\n"
    "QGraphicsScene.items(QPointF, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape, Qt.SortOrder order=Qt.DescendingOrder, QTransform deviceTransform=QTransform()) -> list-of-QGraphicsItem\n"
    "QGraphicsScene.items(QRectF, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape, Qt.SortOrder order=Qt.DescendingOrder, QTransform deviceTransform=QTransform()) -> list-of-QGraphicsItem\n"
    "QGraphicsScene.items(QPolygonF, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape, Qt.SortOrder order=Qt.DescendingOrder, QTransform deviceTransform=QTransform()) -> list-of-QGraphicsItem\n"
    "QGraphicsScene.items(QPainterPath, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape, Qt.SortOrder order=Qt.DescendingOrder, QTransform deviceTransform=QTransform()) -> list-of-QGraphicsItem\n"
    "QGraphicsScene.items(float, float, float, float, Qt.ItemSelectionMode, Qt.SortOrder, QTransform deviceTransform=QTransform()) -> list-of-QGraphicsItem");

extern "C" {static PyObject *meth_QGraphicsScene_items(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_items(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::SortOrder a0 = Qt::DescendingOrder;
        const QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_Qt_SortOrder, &a0))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->items(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        const QPointF* a0;
        int a0State = 0;
        Qt::ItemSelectionMode a1 = Qt::IntersectsItemShape;
        Qt::SortOrder a2 = Qt::DescendingOrder;
        const QTransform& a3def = QTransform();
        const QTransform* a3 = &a3def;
        const QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
            sipName_order,
            sipName_deviceTransform,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EEJ9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_Qt_ItemSelectionMode, &a1, sipType_Qt_SortOrder, &a2, sipType_QTransform, &a3))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->items(*a0,a1,a2,*a3));
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        const QRectF* a0;
        Qt::ItemSelectionMode a1 = Qt::IntersectsItemShape;
        Qt::SortOrder a2 = Qt::DescendingOrder;
        const QTransform& a3def = QTransform();
        const QTransform* a3 = &a3def;
        const QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
            sipName_order,
            sipName_deviceTransform,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|EEJ9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QRectF, &a0, sipType_Qt_ItemSelectionMode, &a1, sipType_Qt_SortOrder, &a2, sipType_QTransform, &a3))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->items(*a0,a1,a2,*a3));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        const QPolygonF* a0;
        Qt::ItemSelectionMode a1 = Qt::IntersectsItemShape;
        Qt::SortOrder a2 = Qt::DescendingOrder;
        const QTransform& a3def = QTransform();
        const QTransform* a3 = &a3def;
        const QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
            sipName_order,
            sipName_deviceTransform,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|EEJ9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QPolygonF, &a0, sipType_Qt_ItemSelectionMode, &a1, sipType_Qt_SortOrder, &a2, sipType_QTransform, &a3))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->items(*a0,a1,a2,*a3));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        const QPainterPath* a0;
        Qt::ItemSelectionMode a1 = Qt::IntersectsItemShape;
        Qt::SortOrder a2 = Qt::DescendingOrder;
        const QTransform& a3def = QTransform();
        const QTransform* a3 = &a3def;
        const QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
            sipName_order,
            sipName_deviceTransform,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|EEJ9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QPainterPath, &a0, sipType_Qt_ItemSelectionMode, &a1, sipType_Qt_SortOrder, &a2, sipType_QTransform, &a3))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->items(*a0,a1,a2,*a3));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        Qt::ItemSelectionMode a4;
        Qt::SortOrder a5;
        const QTransform& a6def = QTransform();
        const QTransform* a6 = &a6def;
        const QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_deviceTransform,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BddddEE|J9", &sipSelf, sipType_QGraphicsScene, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_ItemSelectionMode, &a4, sipType_Qt_SortOrder, &a5, sipType_QTransform, &a6))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->items(a0,a1,a2,a3,a4,a5,*a6));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_items, doc_QGraphicsScene_items);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_collidingItems, "QGraphicsScene.collidingItems(QGraphicsItem, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape) -> list-of-QGraphicsItem");

extern "C" {static PyObject *meth_QGraphicsScene_collidingItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_collidingItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsItem* a0;
        Qt::ItemSelectionMode a1 = Qt::IntersectsItemShape;
        const QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|E", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsItem, &a0, sipType_Qt_ItemSelectionMode, &a1))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->collidingItems(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_collidingItems, doc_QGraphicsScene_collidingItems);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_selectedItems, "QGraphicsScene.selectedItems() -> list-of-QGraphicsItem");

extern "C" {static PyObject *meth_QGraphicsScene_selectedItems(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_selectedItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->selectedItems());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_selectedItems, doc_QGraphicsScene_selectedItems);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setSelectionArea, "QGraphicsScene.setSelectionArea(QPainterPath, QTransform)\n"
    "QGraphicsScene.setSelectionArea(QPainterPath, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape, QTransform deviceTransform=QTransform())");

extern "C" {static PyObject *meth_QGraphicsScene_setSelectionArea(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setSelectionArea(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        const QTransform* a1;
        QGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QPainterPath, &a0, sipType_QTransform, &a1))
        {
            sipCpp->setSelectionArea(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPainterPath* a0;
        Qt::ItemSelectionMode a1 = Qt::IntersectsItemShape;
        const QTransform& a2def = QTransform();
        const QTransform* a2 = &a2def;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
            sipName_deviceTransform,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|EJ9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QPainterPath, &a0, sipType_Qt_ItemSelectionMode, &a1, sipType_QTransform, &a2))
        {
            sipCpp->setSelectionArea(*a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setSelectionArea, doc_QGraphicsScene_setSelectionArea);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_clearSelection, "QGraphicsScene.clearSelection()");

extern "C" {static PyObject *meth_QGraphicsScene_clearSelection(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_clearSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            sipCpp->clearSelection();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_clearSelection, doc_QGraphicsScene_clearSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_createItemGroup, "QGraphicsScene.createItemGroup(list-of-QGraphicsItem) -> QGraphicsItemGroup");

extern "C" {static PyObject *meth_QGraphicsScene_createItemGroup(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_createItemGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QGraphicsItem*>* a0;
        int a0State = 0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ3", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QList_0101QGraphicsItem,&a0, &a0State))
        {
            QGraphicsItemGroup*sipRes;

            sipRes = sipCpp->createItemGroup(*a0);
            sipReleaseType(const_cast<QList<QGraphicsItem*> *>(a0),sipType_QList_0101QGraphicsItem,a0State);

            return sipConvertFromType(sipRes,sipType_QGraphicsItemGroup,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_createItemGroup, doc_QGraphicsScene_createItemGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_destroyItemGroup, "QGraphicsScene.destroyItemGroup(QGraphicsItemGroup)");

extern "C" {static PyObject *meth_QGraphicsScene_destroyItemGroup(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_destroyItemGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsItemGroup* a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsItemGroup, &a0))
        {
            sipCpp->destroyItemGroup(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_destroyItemGroup, doc_QGraphicsScene_destroyItemGroup);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_addItem, "QGraphicsScene.addItem(QGraphicsItem)");

extern "C" {static PyObject *meth_QGraphicsScene_addItem(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsItem* a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsItem, &a0))
        {
            sipCpp->addItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_addItem, doc_QGraphicsScene_addItem);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_addEllipse, "QGraphicsScene.addEllipse(QRectF, QPen pen=QPen(), QBrush brush=QBrush()) -> QGraphicsEllipseItem\n"
    "QGraphicsScene.addEllipse(float, float, float, float, QPen pen=QPen(), QBrush brush=QBrush()) -> QGraphicsEllipseItem");

extern "C" {static PyObject *meth_QGraphicsScene_addEllipse(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_addEllipse(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        const QPen& a1def = QPen();
        const QPen* a1 = &a1def;
        int a1State = 0;
        const QBrush& a2def = QBrush();
        const QBrush* a2 = &a2def;
        int a2State = 0;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_pen,
            sipName_brush,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1J1", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QRectF, &a0, sipType_QPen, &a1, &a1State, sipType_QBrush, &a2, &a2State))
        {
            QGraphicsEllipseItem*sipRes;

            sipRes = sipCpp->addEllipse(*a0,*a1,*a2);
            sipReleaseType(const_cast<QPen *>(a1),sipType_QPen,a1State);
            sipReleaseType(const_cast<QBrush *>(a2),sipType_QBrush,a2State);

            return sipConvertFromType(sipRes,sipType_QGraphicsEllipseItem,NULL);
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        const QPen& a4def = QPen();
        const QPen* a4 = &a4def;
        int a4State = 0;
        const QBrush& a5def = QBrush();
        const QBrush* a5 = &a5def;
        int a5State = 0;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_pen,
            sipName_brush,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdddd|J1J1", &sipSelf, sipType_QGraphicsScene, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPen, &a4, &a4State, sipType_QBrush, &a5, &a5State))
        {
            QGraphicsEllipseItem*sipRes;

            sipRes = sipCpp->addEllipse(a0,a1,a2,a3,*a4,*a5);
            sipReleaseType(const_cast<QPen *>(a4),sipType_QPen,a4State);
            sipReleaseType(const_cast<QBrush *>(a5),sipType_QBrush,a5State);

            return sipConvertFromType(sipRes,sipType_QGraphicsEllipseItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_addEllipse, doc_QGraphicsScene_addEllipse);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_addLine, "QGraphicsScene.addLine(QLineF, QPen pen=QPen()) -> QGraphicsLineItem\n"
    "QGraphicsScene.addLine(float, float, float, float, QPen pen=QPen()) -> QGraphicsLineItem");

extern "C" {static PyObject *meth_QGraphicsScene_addLine(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_addLine(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QLineF* a0;
        const QPen& a1def = QPen();
        const QPen* a1 = &a1def;
        int a1State = 0;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_pen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QLineF, &a0, sipType_QPen, &a1, &a1State))
        {
            QGraphicsLineItem*sipRes;

            sipRes = sipCpp->addLine(*a0,*a1);
            sipReleaseType(const_cast<QPen *>(a1),sipType_QPen,a1State);

            return sipConvertFromType(sipRes,sipType_QGraphicsLineItem,NULL);
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        const QPen& a4def = QPen();
        const QPen* a4 = &a4def;
        int a4State = 0;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_pen,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdddd|J1", &sipSelf, sipType_QGraphicsScene, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPen, &a4, &a4State))
        {
            QGraphicsLineItem*sipRes;

            sipRes = sipCpp->addLine(a0,a1,a2,a3,*a4);
            sipReleaseType(const_cast<QPen *>(a4),sipType_QPen,a4State);

            return sipConvertFromType(sipRes,sipType_QGraphicsLineItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_addLine, doc_QGraphicsScene_addLine);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_addPath, "QGraphicsScene.addPath(QPainterPath, QPen pen=QPen(), QBrush brush=QBrush()) -> QGraphicsPathItem");

extern "C" {static PyObject *meth_QGraphicsScene_addPath(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_addPath(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPainterPath* a0;
        const QPen& a1def = QPen();
        const QPen* a1 = &a1def;
        int a1State = 0;
        const QBrush& a2def = QBrush();
        const QBrush* a2 = &a2def;
        int a2State = 0;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_pen,
            sipName_brush,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1J1", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QPainterPath, &a0, sipType_QPen, &a1, &a1State, sipType_QBrush, &a2, &a2State))
        {
            QGraphicsPathItem*sipRes;

            sipRes = sipCpp->addPath(*a0,*a1,*a2);
            sipReleaseType(const_cast<QPen *>(a1),sipType_QPen,a1State);
            sipReleaseType(const_cast<QBrush *>(a2),sipType_QBrush,a2State);

            return sipConvertFromType(sipRes,sipType_QGraphicsPathItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_addPath, doc_QGraphicsScene_addPath);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_addPixmap, "QGraphicsScene.addPixmap(QPixmap) -> QGraphicsPixmapItem");

extern "C" {static PyObject *meth_QGraphicsScene_addPixmap(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_addPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPixmap* a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QPixmap, &a0))
        {
            QGraphicsPixmapItem*sipRes;

            sipRes = sipCpp->addPixmap(*a0);

            return sipConvertFromType(sipRes,sipType_QGraphicsPixmapItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_addPixmap, doc_QGraphicsScene_addPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_addPolygon, "QGraphicsScene.addPolygon(QPolygonF, QPen pen=QPen(), QBrush brush=QBrush()) -> QGraphicsPolygonItem");

extern "C" {static PyObject *meth_QGraphicsScene_addPolygon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_addPolygon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPolygonF* a0;
        const QPen& a1def = QPen();
        const QPen* a1 = &a1def;
        int a1State = 0;
        const QBrush& a2def = QBrush();
        const QBrush* a2 = &a2def;
        int a2State = 0;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_pen,
            sipName_brush,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1J1", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QPolygonF, &a0, sipType_QPen, &a1, &a1State, sipType_QBrush, &a2, &a2State))
        {
            QGraphicsPolygonItem*sipRes;

            sipRes = sipCpp->addPolygon(*a0,*a1,*a2);
            sipReleaseType(const_cast<QPen *>(a1),sipType_QPen,a1State);
            sipReleaseType(const_cast<QBrush *>(a2),sipType_QBrush,a2State);

            return sipConvertFromType(sipRes,sipType_QGraphicsPolygonItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_addPolygon, doc_QGraphicsScene_addPolygon);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_addRect, "QGraphicsScene.addRect(QRectF, QPen pen=QPen(), QBrush brush=QBrush()) -> QGraphicsRectItem\n"
    "QGraphicsScene.addRect(float, float, float, float, QPen pen=QPen(), QBrush brush=QBrush()) -> QGraphicsRectItem");

extern "C" {static PyObject *meth_QGraphicsScene_addRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_addRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        const QPen& a1def = QPen();
        const QPen* a1 = &a1def;
        int a1State = 0;
        const QBrush& a2def = QBrush();
        const QBrush* a2 = &a2def;
        int a2State = 0;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_pen,
            sipName_brush,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1J1", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QRectF, &a0, sipType_QPen, &a1, &a1State, sipType_QBrush, &a2, &a2State))
        {
            QGraphicsRectItem*sipRes;

            sipRes = sipCpp->addRect(*a0,*a1,*a2);
            sipReleaseType(const_cast<QPen *>(a1),sipType_QPen,a1State);
            sipReleaseType(const_cast<QBrush *>(a2),sipType_QBrush,a2State);

            return sipConvertFromType(sipRes,sipType_QGraphicsRectItem,NULL);
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        const QPen& a4def = QPen();
        const QPen* a4 = &a4def;
        int a4State = 0;
        const QBrush& a5def = QBrush();
        const QBrush* a5 = &a5def;
        int a5State = 0;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_pen,
            sipName_brush,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdddd|J1J1", &sipSelf, sipType_QGraphicsScene, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPen, &a4, &a4State, sipType_QBrush, &a5, &a5State))
        {
            QGraphicsRectItem*sipRes;

            sipRes = sipCpp->addRect(a0,a1,a2,a3,*a4,*a5);
            sipReleaseType(const_cast<QPen *>(a4),sipType_QPen,a4State);
            sipReleaseType(const_cast<QBrush *>(a5),sipType_QBrush,a5State);

            return sipConvertFromType(sipRes,sipType_QGraphicsRectItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_addRect, doc_QGraphicsScene_addRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_addSimpleText, "QGraphicsScene.addSimpleText(str, QFont font=QFont()) -> QGraphicsSimpleTextItem");

extern "C" {static PyObject *meth_QGraphicsScene_addSimpleText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_addSimpleText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QFont& a1def = QFont();
        const QFont* a1 = &a1def;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QString,&a0, &a0State, sipType_QFont, &a1))
        {
            QGraphicsSimpleTextItem*sipRes;

            sipRes = sipCpp->addSimpleText(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QGraphicsSimpleTextItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_addSimpleText, doc_QGraphicsScene_addSimpleText);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_addText, "QGraphicsScene.addText(str, QFont font=QFont()) -> QGraphicsTextItem");

extern "C" {static PyObject *meth_QGraphicsScene_addText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_addText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QFont& a1def = QFont();
        const QFont* a1 = &a1def;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QString,&a0, &a0State, sipType_QFont, &a1))
        {
            QGraphicsTextItem*sipRes;

            sipRes = sipCpp->addText(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QGraphicsTextItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_addText, doc_QGraphicsScene_addText);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_removeItem, "QGraphicsScene.removeItem(QGraphicsItem)");

extern "C" {static PyObject *meth_QGraphicsScene_removeItem(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_removeItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsItem* a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsItem, &a0))
        {
            sipCpp->removeItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_removeItem, doc_QGraphicsScene_removeItem);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_focusItem, "QGraphicsScene.focusItem() -> QGraphicsItem");

extern "C" {static PyObject *meth_QGraphicsScene_focusItem(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_focusItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QGraphicsItem*sipRes;

            sipRes = sipCpp->focusItem();

            return sipConvertFromType(sipRes,sipType_QGraphicsItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_focusItem, doc_QGraphicsScene_focusItem);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setFocusItem, "QGraphicsScene.setFocusItem(QGraphicsItem, Qt.FocusReason focusReason=Qt.OtherFocusReason)");

extern "C" {static PyObject *meth_QGraphicsScene_setFocusItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setFocusItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsItem* a0;
        Qt::FocusReason a1 = Qt::OtherFocusReason;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_focusReason,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|E", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsItem, &a0, sipType_Qt_FocusReason, &a1))
        {
            sipCpp->setFocusItem(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setFocusItem, doc_QGraphicsScene_setFocusItem);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_hasFocus, "QGraphicsScene.hasFocus() -> bool");

extern "C" {static PyObject *meth_QGraphicsScene_hasFocus(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_hasFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_hasFocus, doc_QGraphicsScene_hasFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setFocus, "QGraphicsScene.setFocus(Qt.FocusReason focusReason=Qt.OtherFocusReason)");

extern "C" {static PyObject *meth_QGraphicsScene_setFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::FocusReason a0 = Qt::OtherFocusReason;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            sipName_focusReason,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_Qt_FocusReason, &a0))
        {
            sipCpp->setFocus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setFocus, doc_QGraphicsScene_setFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_clearFocus, "QGraphicsScene.clearFocus()");

extern "C" {static PyObject *meth_QGraphicsScene_clearFocus(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_clearFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            sipCpp->clearFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_clearFocus, doc_QGraphicsScene_clearFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_mouseGrabberItem, "QGraphicsScene.mouseGrabberItem() -> QGraphicsItem");

extern "C" {static PyObject *meth_QGraphicsScene_mouseGrabberItem(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_mouseGrabberItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QGraphicsItem*sipRes;

            sipRes = sipCpp->mouseGrabberItem();

            return sipConvertFromType(sipRes,sipType_QGraphicsItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_mouseGrabberItem, doc_QGraphicsScene_mouseGrabberItem);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_backgroundBrush, "QGraphicsScene.backgroundBrush() -> QBrush");

extern "C" {static PyObject *meth_QGraphicsScene_backgroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_backgroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->backgroundBrush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_backgroundBrush, doc_QGraphicsScene_backgroundBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setBackgroundBrush, "QGraphicsScene.setBackgroundBrush(QBrush)");

extern "C" {static PyObject *meth_QGraphicsScene_setBackgroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setBackgroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBackgroundBrush(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setBackgroundBrush, doc_QGraphicsScene_setBackgroundBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_foregroundBrush, "QGraphicsScene.foregroundBrush() -> QBrush");

extern "C" {static PyObject *meth_QGraphicsScene_foregroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_foregroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->foregroundBrush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_foregroundBrush, doc_QGraphicsScene_foregroundBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setForegroundBrush, "QGraphicsScene.setForegroundBrush(QBrush)");

extern "C" {static PyObject *meth_QGraphicsScene_setForegroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setForegroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setForegroundBrush(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setForegroundBrush, doc_QGraphicsScene_setForegroundBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_inputMethodQuery, "QGraphicsScene.inputMethodQuery(Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QGraphicsScene_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QGraphicsScene::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_inputMethodQuery, doc_QGraphicsScene_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_views, "QGraphicsScene.views() -> list-of-QGraphicsView");

extern "C" {static PyObject *meth_QGraphicsScene_views(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_views(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QList<QGraphicsView*>*sipRes;

            sipRes = new QList<QGraphicsView*>(sipCpp->views());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_views, doc_QGraphicsScene_views);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_advance, "QGraphicsScene.advance()");

extern "C" {static PyObject *meth_QGraphicsScene_advance(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_advance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            sipCpp->advance();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_advance, doc_QGraphicsScene_advance);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_update, "QGraphicsScene.update(QRectF rect=QRectF())\n"
    "QGraphicsScene.update(float, float, float, float)");

extern "C" {static PyObject *meth_QGraphicsScene_update(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_update(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF& a0def = QRectF();
        const QRectF* a0 = &a0def;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->update(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bdddd", &sipSelf, sipType_QGraphicsScene, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->update(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_update, doc_QGraphicsScene_update);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_invalidate, "QGraphicsScene.invalidate(QRectF rect=QRectF(), QGraphicsScene.SceneLayers layers=QGraphicsScene.AllLayers)\n"
    "QGraphicsScene.invalidate(float, float, float, float, QGraphicsScene.SceneLayers layers=QGraphicsScene.AllLayers)");

extern "C" {static PyObject *meth_QGraphicsScene_invalidate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_invalidate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF& a0def = QRectF();
        const QRectF* a0 = &a0def;
        QGraphicsScene::SceneLayers a1def = QGraphicsScene::AllLayers;
        QGraphicsScene::SceneLayers* a1 = &a1def;
        int a1State = 0;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
            sipName_layers,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9J1", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QRectF, &a0, sipType_QGraphicsScene_SceneLayers, &a1, &a1State))
        {
            sipCpp->invalidate(*a0,*a1);
            sipReleaseType(a1,sipType_QGraphicsScene_SceneLayers,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QGraphicsScene::SceneLayers a4def = QGraphicsScene::AllLayers;
        QGraphicsScene::SceneLayers* a4 = &a4def;
        int a4State = 0;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_layers,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdddd|J1", &sipSelf, sipType_QGraphicsScene, &sipCpp, &a0, &a1, &a2, &a3, sipType_QGraphicsScene_SceneLayers, &a4, &a4State))
        {
            sipCpp->invalidate(a0,a1,a2,a3,*a4);
            sipReleaseType(a4,sipType_QGraphicsScene_SceneLayers,a4State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_invalidate, doc_QGraphicsScene_invalidate);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_clear, "QGraphicsScene.clear()");

extern "C" {static PyObject *meth_QGraphicsScene_clear(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_clear, doc_QGraphicsScene_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_event, "QGraphicsScene.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsScene_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_event, doc_QGraphicsScene_event);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_contextMenuEvent, "QGraphicsScene.contextMenuEvent(QGraphicsSceneContextMenuEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneContextMenuEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsSceneContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_contextMenuEvent, doc_QGraphicsScene_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_dragEnterEvent, "QGraphicsScene.dragEnterEvent(QGraphicsSceneDragDropEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_dragEnterEvent, doc_QGraphicsScene_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_dragMoveEvent, "QGraphicsScene.dragMoveEvent(QGraphicsSceneDragDropEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_dragMoveEvent, doc_QGraphicsScene_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_dragLeaveEvent, "QGraphicsScene.dragLeaveEvent(QGraphicsSceneDragDropEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_dragLeaveEvent, doc_QGraphicsScene_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_dropEvent, "QGraphicsScene.dropEvent(QGraphicsSceneDragDropEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsSceneDragDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_dropEvent, doc_QGraphicsScene_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_focusInEvent, "QGraphicsScene.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_focusInEvent, doc_QGraphicsScene_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_focusOutEvent, "QGraphicsScene.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_focusOutEvent, doc_QGraphicsScene_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_helpEvent, "QGraphicsScene.helpEvent(QGraphicsSceneHelpEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_helpEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_helpEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneHelpEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsSceneHelpEvent, &a0))
        {
            sipCpp->sipProtectVirt_helpEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_helpEvent, doc_QGraphicsScene_helpEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_keyPressEvent, "QGraphicsScene.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_keyPressEvent, doc_QGraphicsScene_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_keyReleaseEvent, "QGraphicsScene.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_keyReleaseEvent, doc_QGraphicsScene_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_mousePressEvent, "QGraphicsScene.mousePressEvent(QGraphicsSceneMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_mousePressEvent, doc_QGraphicsScene_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_mouseMoveEvent, "QGraphicsScene.mouseMoveEvent(QGraphicsSceneMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_mouseMoveEvent, doc_QGraphicsScene_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_mouseReleaseEvent, "QGraphicsScene.mouseReleaseEvent(QGraphicsSceneMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_mouseReleaseEvent, doc_QGraphicsScene_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_mouseDoubleClickEvent, "QGraphicsScene.mouseDoubleClickEvent(QGraphicsSceneMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsSceneMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_mouseDoubleClickEvent, doc_QGraphicsScene_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_wheelEvent, "QGraphicsScene.wheelEvent(QGraphicsSceneWheelEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneWheelEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsSceneWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_wheelEvent, doc_QGraphicsScene_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_inputMethodEvent, "QGraphicsScene.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QGraphicsScene_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_inputMethodEvent, doc_QGraphicsScene_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_drawBackground, "QGraphicsScene.drawBackground(QPainter, QRectF)");

extern "C" {static PyObject *meth_QGraphicsScene_drawBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_drawBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QRectF* a1;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1))
        {
            sipCpp->sipProtectVirt_drawBackground(sipSelfWasArg,a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_drawBackground, doc_QGraphicsScene_drawBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_drawForeground, "QGraphicsScene.drawForeground(QPainter, QRectF)");

extern "C" {static PyObject *meth_QGraphicsScene_drawForeground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_drawForeground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QRectF* a1;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1))
        {
            sipCpp->sipProtectVirt_drawForeground(sipSelfWasArg,a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_drawForeground, doc_QGraphicsScene_drawForeground);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_bspTreeDepth, "QGraphicsScene.bspTreeDepth() -> int");

extern "C" {static PyObject *meth_QGraphicsScene_bspTreeDepth(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_bspTreeDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->bspTreeDepth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_bspTreeDepth, doc_QGraphicsScene_bspTreeDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setBspTreeDepth, "QGraphicsScene.setBspTreeDepth(int)");

extern "C" {static PyObject *meth_QGraphicsScene_setBspTreeDepth(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setBspTreeDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGraphicsScene, &sipCpp, &a0))
        {
            sipCpp->setBspTreeDepth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setBspTreeDepth, doc_QGraphicsScene_setBspTreeDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_selectionArea, "QGraphicsScene.selectionArea() -> QPainterPath");

extern "C" {static PyObject *meth_QGraphicsScene_selectionArea(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_selectionArea(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath(sipCpp->selectionArea());

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_selectionArea, doc_QGraphicsScene_selectionArea);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_addWidget, "QGraphicsScene.addWidget(QWidget, Qt.WindowFlags flags=0) -> QGraphicsProxyWidget");

extern "C" {static PyObject *meth_QGraphicsScene_addWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_addWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        Qt::WindowFlags a1def = 0;
        Qt::WindowFlags* a1 = &a1def;
        int a1State = 0;
        QGraphicsScene *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:|J1", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QWidget, &a0, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            QGraphicsProxyWidget*sipRes;

            sipRes = sipCpp->addWidget(a0,*a1);
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            return sipConvertFromType(sipRes,sipType_QGraphicsProxyWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_addWidget, doc_QGraphicsScene_addWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_style, "QGraphicsScene.style() -> QStyle");

extern "C" {static PyObject *meth_QGraphicsScene_style(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_style(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QStyle*sipRes;

            sipRes = sipCpp->style();

            return sipConvertFromType(sipRes,sipType_QStyle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_style, doc_QGraphicsScene_style);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setStyle, "QGraphicsScene.setStyle(QStyle)");

extern "C" {static PyObject *meth_QGraphicsScene_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QStyle* a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QStyle, &a0))
        {
            sipCpp->setStyle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setStyle, doc_QGraphicsScene_setStyle);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_font, "QGraphicsScene.font() -> QFont");

extern "C" {static PyObject *meth_QGraphicsScene_font(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QFont*sipRes;

            sipRes = new QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_font, doc_QGraphicsScene_font);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setFont, "QGraphicsScene.setFont(QFont)");

extern "C" {static PyObject *meth_QGraphicsScene_setFont(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setFont, doc_QGraphicsScene_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_palette, "QGraphicsScene.palette() -> QPalette");

extern "C" {static PyObject *meth_QGraphicsScene_palette(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_palette(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QPalette*sipRes;

            sipRes = new QPalette(sipCpp->palette());

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_palette, doc_QGraphicsScene_palette);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setPalette, "QGraphicsScene.setPalette(QPalette)");

extern "C" {static PyObject *meth_QGraphicsScene_setPalette(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setPalette(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPalette* a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QPalette, &a0))
        {
            sipCpp->setPalette(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setPalette, doc_QGraphicsScene_setPalette);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_activeWindow, "QGraphicsScene.activeWindow() -> QGraphicsWidget");

extern "C" {static PyObject *meth_QGraphicsScene_activeWindow(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_activeWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QGraphicsWidget*sipRes;

            sipRes = sipCpp->activeWindow();

            return sipConvertFromType(sipRes,sipType_QGraphicsWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_activeWindow, doc_QGraphicsScene_activeWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setActiveWindow, "QGraphicsScene.setActiveWindow(QGraphicsWidget)");

extern "C" {static PyObject *meth_QGraphicsScene_setActiveWindow(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setActiveWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsWidget* a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsWidget, &a0))
        {
            sipCpp->setActiveWindow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setActiveWindow, doc_QGraphicsScene_setActiveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_eventFilter, "QGraphicsScene.eventFilter(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsScene_eventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_eventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_eventFilter, doc_QGraphicsScene_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_focusNextPrevChild, "QGraphicsScene.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QGraphicsScene_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        sipQGraphicsScene *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QGraphicsScene, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextPrevChild(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_focusNextPrevChild, doc_QGraphicsScene_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setStickyFocus, "QGraphicsScene.setStickyFocus(bool)");

extern "C" {static PyObject *meth_QGraphicsScene_setStickyFocus(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setStickyFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGraphicsScene, &sipCpp, &a0))
        {
            sipCpp->setStickyFocus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setStickyFocus, doc_QGraphicsScene_setStickyFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_stickyFocus, "QGraphicsScene.stickyFocus() -> bool");

extern "C" {static PyObject *meth_QGraphicsScene_stickyFocus(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_stickyFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->stickyFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_stickyFocus, doc_QGraphicsScene_stickyFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_itemAt, "QGraphicsScene.itemAt(QPointF, QTransform) -> QGraphicsItem\n"
    "QGraphicsScene.itemAt(float, float, QTransform) -> QGraphicsItem");

extern "C" {static PyObject *meth_QGraphicsScene_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QTransform* a1;
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_QTransform, &a1))
        {
            QGraphicsItem*sipRes;

            sipRes = sipCpp->itemAt(*a0,*a1);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromType(sipRes,sipType_QGraphicsItem,NULL);
        }
    }

    {
        qreal a0;
        qreal a1;
        const QTransform* a2;
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BddJ9", &sipSelf, sipType_QGraphicsScene, &sipCpp, &a0, &a1, sipType_QTransform, &a2))
        {
            QGraphicsItem*sipRes;

            sipRes = sipCpp->itemAt(a0,a1,*a2);

            return sipConvertFromType(sipRes,sipType_QGraphicsItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_itemAt, doc_QGraphicsScene_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_isActive, "QGraphicsScene.isActive() -> bool");

extern "C" {static PyObject *meth_QGraphicsScene_isActive(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_isActive, doc_QGraphicsScene_isActive);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_activePanel, "QGraphicsScene.activePanel() -> QGraphicsItem");

extern "C" {static PyObject *meth_QGraphicsScene_activePanel(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_activePanel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            QGraphicsItem*sipRes;

            sipRes = sipCpp->activePanel();

            return sipConvertFromType(sipRes,sipType_QGraphicsItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_activePanel, doc_QGraphicsScene_activePanel);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setActivePanel, "QGraphicsScene.setActivePanel(QGraphicsItem)");

extern "C" {static PyObject *meth_QGraphicsScene_setActivePanel(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setActivePanel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsItem* a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsItem, &a0))
        {
            sipCpp->setActivePanel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setActivePanel, doc_QGraphicsScene_setActivePanel);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_sendEvent, "QGraphicsScene.sendEvent(QGraphicsItem, QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsScene_sendEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_sendEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsItem* a0;
        QEvent* a1;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QGraphicsScene, &sipCpp, sipType_QGraphicsItem, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sendEvent(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_sendEvent, doc_QGraphicsScene_sendEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_minimumRenderSize, "QGraphicsScene.minimumRenderSize() -> float");

extern "C" {static PyObject *meth_QGraphicsScene_minimumRenderSize(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_minimumRenderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsScene, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->minimumRenderSize();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_minimumRenderSize, doc_QGraphicsScene_minimumRenderSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsScene_setMinimumRenderSize, "QGraphicsScene.setMinimumRenderSize(float)");

extern "C" {static PyObject *meth_QGraphicsScene_setMinimumRenderSize(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsScene_setMinimumRenderSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGraphicsScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsScene, &sipCpp, &a0))
        {
            sipCpp->setMinimumRenderSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsScene, sipName_setMinimumRenderSize, doc_QGraphicsScene_setMinimumRenderSize);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGraphicsScene(void *, const sipTypeDef *);}
static void *cast_QGraphicsScene(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGraphicsScene)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QGraphicsScene *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsScene(void *, int);}
static void release_QGraphicsScene(void *sipCppV,int)
{
    QGraphicsScene *sipCpp = reinterpret_cast<QGraphicsScene *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGraphicsScene(sipSimpleWrapper *);}
static void dealloc_QGraphicsScene(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGraphicsScene *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsScene(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGraphicsScene(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGraphicsScene(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsScene *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQGraphicsScene(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QRectF* a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|JH", sipType_QRectF, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQGraphicsScene(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QObject* a4 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "dddd|JH", &a0, &a1, &a2, &a3, sipType_QObject, &a4, sipOwner))
        {
            sipCpp = new sipQGraphicsScene(a0,a1,a2,a3,a4);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsScene[] = {{162, 0, 1}};


static PyMethodDef methods_QGraphicsScene[] = {
    {SIP_MLNAME_CAST(sipName_activePanel), meth_QGraphicsScene_activePanel, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_activePanel)},
    {SIP_MLNAME_CAST(sipName_activeWindow), meth_QGraphicsScene_activeWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_activeWindow)},
    {SIP_MLNAME_CAST(sipName_addEllipse), (PyCFunction)meth_QGraphicsScene_addEllipse, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_addEllipse)},
    {SIP_MLNAME_CAST(sipName_addItem), meth_QGraphicsScene_addItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_addItem)},
    {SIP_MLNAME_CAST(sipName_addLine), (PyCFunction)meth_QGraphicsScene_addLine, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_addLine)},
    {SIP_MLNAME_CAST(sipName_addPath), (PyCFunction)meth_QGraphicsScene_addPath, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_addPath)},
    {SIP_MLNAME_CAST(sipName_addPixmap), meth_QGraphicsScene_addPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_addPixmap)},
    {SIP_MLNAME_CAST(sipName_addPolygon), (PyCFunction)meth_QGraphicsScene_addPolygon, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_addPolygon)},
    {SIP_MLNAME_CAST(sipName_addRect), (PyCFunction)meth_QGraphicsScene_addRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_addRect)},
    {SIP_MLNAME_CAST(sipName_addSimpleText), (PyCFunction)meth_QGraphicsScene_addSimpleText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_addSimpleText)},
    {SIP_MLNAME_CAST(sipName_addText), (PyCFunction)meth_QGraphicsScene_addText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_addText)},
    {SIP_MLNAME_CAST(sipName_addWidget), (PyCFunction)meth_QGraphicsScene_addWidget, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_addWidget)},
    {SIP_MLNAME_CAST(sipName_advance), meth_QGraphicsScene_advance, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_advance)},
    {SIP_MLNAME_CAST(sipName_backgroundBrush), meth_QGraphicsScene_backgroundBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_backgroundBrush)},
    {SIP_MLNAME_CAST(sipName_bspTreeDepth), meth_QGraphicsScene_bspTreeDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_bspTreeDepth)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QGraphicsScene_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QGraphicsScene_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_clear)},
    {SIP_MLNAME_CAST(sipName_clearFocus), meth_QGraphicsScene_clearFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_clearFocus)},
    {SIP_MLNAME_CAST(sipName_clearSelection), meth_QGraphicsScene_clearSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_clearSelection)},
    {SIP_MLNAME_CAST(sipName_collidingItems), (PyCFunction)meth_QGraphicsScene_collidingItems, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_collidingItems)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QGraphicsScene_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QGraphicsScene_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_createItemGroup), meth_QGraphicsScene_createItemGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_createItemGroup)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QGraphicsScene_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_destroyItemGroup), meth_QGraphicsScene_destroyItemGroup, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_destroyItemGroup)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QGraphicsScene_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QGraphicsScene_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QGraphicsScene_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QGraphicsScene_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_drawBackground), (PyCFunction)meth_QGraphicsScene_drawBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_drawBackground)},
    {SIP_MLNAME_CAST(sipName_drawForeground), (PyCFunction)meth_QGraphicsScene_drawForeground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_drawForeground)},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QGraphicsScene_dropEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_dropEvent)},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QGraphicsScene_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), (PyCFunction)meth_QGraphicsScene_eventFilter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_eventFilter)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QGraphicsScene_focusInEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusItem), meth_QGraphicsScene_focusItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_focusItem)},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QGraphicsScene_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QGraphicsScene_focusOutEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_font), meth_QGraphicsScene_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_font)},
    {SIP_MLNAME_CAST(sipName_foregroundBrush), meth_QGraphicsScene_foregroundBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_foregroundBrush)},
    {SIP_MLNAME_CAST(sipName_hasFocus), meth_QGraphicsScene_hasFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_hasFocus)},
    {SIP_MLNAME_CAST(sipName_height), meth_QGraphicsScene_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_height)},
    {SIP_MLNAME_CAST(sipName_helpEvent), (PyCFunction)meth_QGraphicsScene_helpEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_helpEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QGraphicsScene_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QGraphicsScene_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_invalidate), (PyCFunction)meth_QGraphicsScene_invalidate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_invalidate)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QGraphicsScene_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_isActive)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QGraphicsScene_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QGraphicsScene_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_itemAt)},
    {SIP_MLNAME_CAST(sipName_itemIndexMethod), meth_QGraphicsScene_itemIndexMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_itemIndexMethod)},
    {SIP_MLNAME_CAST(sipName_items), (PyCFunction)meth_QGraphicsScene_items, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_items)},
    {SIP_MLNAME_CAST(sipName_itemsBoundingRect), meth_QGraphicsScene_itemsBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_itemsBoundingRect)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QGraphicsScene_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QGraphicsScene_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_minimumRenderSize), meth_QGraphicsScene_minimumRenderSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_minimumRenderSize)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QGraphicsScene_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseGrabberItem), meth_QGraphicsScene_mouseGrabberItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_mouseGrabberItem)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QGraphicsScene_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QGraphicsScene_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QGraphicsScene_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_palette), meth_QGraphicsScene_palette, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_palette)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QGraphicsScene_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removeItem), meth_QGraphicsScene_removeItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_removeItem)},
    {SIP_MLNAME_CAST(sipName_render), (PyCFunction)meth_QGraphicsScene_render, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_render)},
    {SIP_MLNAME_CAST(sipName_sceneRect), meth_QGraphicsScene_sceneRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_sceneRect)},
    {SIP_MLNAME_CAST(sipName_selectedItems), meth_QGraphicsScene_selectedItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_selectedItems)},
    {SIP_MLNAME_CAST(sipName_selectionArea), meth_QGraphicsScene_selectionArea, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_selectionArea)},
    {SIP_MLNAME_CAST(sipName_sendEvent), meth_QGraphicsScene_sendEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_sendEvent)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QGraphicsScene_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QGraphicsScene_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setActivePanel), meth_QGraphicsScene_setActivePanel, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_setActivePanel)},
    {SIP_MLNAME_CAST(sipName_setActiveWindow), meth_QGraphicsScene_setActiveWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_setActiveWindow)},
    {SIP_MLNAME_CAST(sipName_setBackgroundBrush), meth_QGraphicsScene_setBackgroundBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_setBackgroundBrush)},
    {SIP_MLNAME_CAST(sipName_setBspTreeDepth), meth_QGraphicsScene_setBspTreeDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_setBspTreeDepth)},
    {SIP_MLNAME_CAST(sipName_setFocus), (PyCFunction)meth_QGraphicsScene_setFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_setFocus)},
    {SIP_MLNAME_CAST(sipName_setFocusItem), (PyCFunction)meth_QGraphicsScene_setFocusItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_setFocusItem)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QGraphicsScene_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_setFont)},
    {SIP_MLNAME_CAST(sipName_setForegroundBrush), meth_QGraphicsScene_setForegroundBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_setForegroundBrush)},
    {SIP_MLNAME_CAST(sipName_setItemIndexMethod), meth_QGraphicsScene_setItemIndexMethod, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_setItemIndexMethod)},
    {SIP_MLNAME_CAST(sipName_setMinimumRenderSize), meth_QGraphicsScene_setMinimumRenderSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_setMinimumRenderSize)},
    {SIP_MLNAME_CAST(sipName_setPalette), meth_QGraphicsScene_setPalette, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_setPalette)},
    {SIP_MLNAME_CAST(sipName_setSceneRect), meth_QGraphicsScene_setSceneRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_setSceneRect)},
    {SIP_MLNAME_CAST(sipName_setSelectionArea), (PyCFunction)meth_QGraphicsScene_setSelectionArea, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_setSelectionArea)},
    {SIP_MLNAME_CAST(sipName_setStickyFocus), meth_QGraphicsScene_setStickyFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_setStickyFocus)},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QGraphicsScene_setStyle, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_setStyle)},
    {SIP_MLNAME_CAST(sipName_stickyFocus), meth_QGraphicsScene_stickyFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_stickyFocus)},
    {SIP_MLNAME_CAST(sipName_style), meth_QGraphicsScene_style, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_style)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QGraphicsScene_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_update), (PyCFunction)meth_QGraphicsScene_update, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_update)},
    {SIP_MLNAME_CAST(sipName_views), meth_QGraphicsScene_views, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_views)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QGraphicsScene_wheelEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsScene_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_width), meth_QGraphicsScene_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsScene_width)}
};

static sipEnumMemberDef enummembers_QGraphicsScene[] = {
    {sipName_AllLayers, static_cast<int>(QGraphicsScene::AllLayers), 144},
    {sipName_BackgroundLayer, static_cast<int>(QGraphicsScene::BackgroundLayer), 144},
    {sipName_BspTreeIndex, static_cast<int>(QGraphicsScene::BspTreeIndex), 143},
    {sipName_ForegroundLayer, static_cast<int>(QGraphicsScene::ForegroundLayer), 144},
    {sipName_ItemLayer, static_cast<int>(QGraphicsScene::ItemLayer), 144},
    {sipName_NoIndex, static_cast<int>(QGraphicsScene::NoIndex), 143},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGraphicsScene[] = {
    {"focusItemChanged(QGraphicsItem*,QGraphicsItem*,Qt::FocusReason)", "\1QGraphicsScene.focusItemChanged[QGraphicsItem, QGraphicsItem, Qt.FocusReason]", 0, 0},
    {"selectionChanged()", "\1QGraphicsScene.selectionChanged", 0, 0},
    {"sceneRectChanged(QRectF)", "\1QGraphicsScene.sceneRectChanged[QRectF]", 0, 0},
    {"changed(QList<QRectF>)", "\1QGraphicsScene.changed[list-of-QRectF]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QGraphicsScene, "\1QGraphicsScene(QObject parent=None)\n"
    "QGraphicsScene(QRectF, QObject parent=None)\n"
    "QGraphicsScene(float, float, float, float, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QGraphicsScene = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsScene,
        {0}
    },
    {
        sipNameNr_QGraphicsScene,
        {0, 0, 1},
        92, methods_QGraphicsScene,
        6, enummembers_QGraphicsScene,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGraphicsScene,
    -1,
    -1,
    supers_QGraphicsScene,
    0,
    init_type_QGraphicsScene,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsScene,
    0,
    0,
    0,
    release_QGraphicsScene,
    cast_QGraphicsScene,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGraphicsScene::staticMetaObject,
    0,
    signals_QGraphicsScene,
    0
};
