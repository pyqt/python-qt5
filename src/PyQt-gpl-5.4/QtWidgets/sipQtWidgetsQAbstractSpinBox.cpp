/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:12 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractspinbox.sip"
#include <qabstractspinbox.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 753 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractspinbox.sip"
#include <qabstractspinbox.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlineedit.sip"
#include <qlineedit.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 368 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 408 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 452 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 395 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 26 "sip/QtGui/qvalidator.sip"
#include <qvalidator.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 635 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 275 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 382 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 186 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 189 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 195 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 198 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 201 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 204 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 207 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 210 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 213 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 216 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 219 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 225 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 228 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 231 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 237 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 240 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 243 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 246 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"


class sipQAbstractSpinBox : public QAbstractSpinBox
{
public:
    sipQAbstractSpinBox(QWidget*);
    virtual ~sipQAbstractSpinBox();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_enterEvent(bool,QEvent*);
    void sipProtectVirt_leaveEvent(bool,QEvent*);
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);
    void sipProtectVirt_actionEvent(bool,QActionEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent*);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool,QDropEvent*);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const QByteArray&,void*,long*);
    QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool,QPainter*) const;
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent*);
    void sipProtectVirt_changeEvent(bool,QEvent*);
    void sipProtectVirt_closeEvent(bool,QCloseEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_paintEvent(bool,QPaintEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    QLineEdit* sipProtect_lineEdit() const;
    void sipProtect_setLineEdit(QLineEdit*);
    QAbstractSpinBox::StepEnabled sipProtectVirt_stepEnabled(bool) const;
    void sipProtect_initStyleOption(QStyleOptionSpinBox*) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    bool eventFilter(QObject*,QEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    QAbstractSpinBox::StepEnabled stepEnabled() const;
    void showEvent(QShowEvent*);
    void paintEvent(QPaintEvent*);
    void timerEvent(QTimerEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void hideEvent(QHideEvent*);
    void closeEvent(QCloseEvent*);
    void changeEvent(QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void wheelEvent(QWheelEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void resizeEvent(QResizeEvent*);
    void clear();
    void stepBy(int);
    void fixup(QString&) const;
    QValidator::State validate(QString&,int&) const;
    bool event(QEvent*);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractSpinBox(const sipQAbstractSpinBox &);
    sipQAbstractSpinBox &operator = (const sipQAbstractSpinBox &);

    char sipPyMethods[51];
};

sipQAbstractSpinBox::sipQAbstractSpinBox(QWidget*a0): QAbstractSpinBox(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractSpinBox::~sipQAbstractSpinBox()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractSpinBox::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QAbstractSpinBox);
}

int sipQAbstractSpinBox::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractSpinBox::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QAbstractSpinBox,_c,_id,_a);

    return _id;
}

void *sipQAbstractSpinBox::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QAbstractSpinBox, _clname, &sipCpp) ? sipCpp : QAbstractSpinBox::qt_metacast(_clname));
}

void sipQAbstractSpinBox::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAbstractSpinBox::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAbstractSpinBox::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAbstractSpinBox::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAbstractSpinBox::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractSpinBox::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QAbstractSpinBox::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQAbstractSpinBox::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QAbstractSpinBox::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQAbstractSpinBox::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QAbstractSpinBox::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractSpinBox::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QAbstractSpinBox::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQAbstractSpinBox::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QAbstractSpinBox::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQAbstractSpinBox::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QAbstractSpinBox::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQAbstractSpinBox::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QAbstractSpinBox::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQAbstractSpinBox::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QAbstractSpinBox::heightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QAbstractSpinBox::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQAbstractSpinBox::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QAbstractSpinBox::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QVariant sipQAbstractSpinBox::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QAbstractSpinBox::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QAbstractSpinBox::StepEnabled sipQAbstractSpinBox::stepEnabled() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_stepEnabled);

    if (!sipMeth)
        return QAbstractSpinBox::stepEnabled();

    extern QAbstractSpinBox::StepEnabled sipVH_QtWidgets_137(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_137(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractSpinBox::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QAbstractSpinBox::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_clear);

    if (!sipMeth)
    {
        QAbstractSpinBox::clear();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractSpinBox::stepBy(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_stepBy);

    if (!sipMeth)
    {
        QAbstractSpinBox::stepBy(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractSpinBox::fixup(QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_fixup);

    if (!sipMeth)
    {
        QAbstractSpinBox::fixup(a0);
        return;
    }

    typedef void (*sipVH_QtGui_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QString&);

    ((sipVH_QtGui_18)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[18]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QValidator::State sipQAbstractSpinBox::validate(QString& a0,int& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[47]),sipPySelf,NULL,sipName_validate);

    if (!sipMeth)
        return QAbstractSpinBox::validate(a0,a1);

    typedef QValidator::State (*sipVH_QtGui_15)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QString&,int&);

    return ((sipVH_QtGui_15)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[15]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQAbstractSpinBox::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractSpinBox::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQAbstractSpinBox::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QAbstractSpinBox::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQAbstractSpinBox::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QAbstractSpinBox::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQAbstractSpinBox::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQAbstractSpinBox::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQAbstractSpinBox::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQAbstractSpinBox::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQAbstractSpinBox::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQAbstractSpinBox::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent*a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QWidget::dropEvent(a0) : dropEvent(a0));
}

int sipQAbstractSpinBox::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QWidget::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQAbstractSpinBox::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQAbstractSpinBox::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQAbstractSpinBox::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQAbstractSpinBox::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QWidget::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipQAbstractSpinBox::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQAbstractSpinBox::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

bool sipQAbstractSpinBox::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ? QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

QPainter* sipQAbstractSpinBox::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QWidget::sharedPainter() : sharedPainter());
}

void sipQAbstractSpinBox::sipProtectVirt_initPainter(bool sipSelfWasArg,QPainter*a0) const
{
    (sipSelfWasArg ? QWidget::initPainter(a0) : initPainter(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::resizeEvent(a0) : resizeEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::wheelEvent(a0) : wheelEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::focusInEvent(a0) : focusInEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::changeEvent(a0) : changeEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::closeEvent(a0) : closeEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::hideEvent(a0) : hideEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::timerEvent(a0) : timerEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::paintEvent(a0) : paintEvent(a0));
}

void sipQAbstractSpinBox::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QAbstractSpinBox::showEvent(a0) : showEvent(a0));
}

QLineEdit* sipQAbstractSpinBox::sipProtect_lineEdit() const
{
    return QAbstractSpinBox::lineEdit();
}

void sipQAbstractSpinBox::sipProtect_setLineEdit(QLineEdit*a0)
{
    QAbstractSpinBox::setLineEdit(a0);
}

QAbstractSpinBox::StepEnabled sipQAbstractSpinBox::sipProtectVirt_stepEnabled(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QAbstractSpinBox::stepEnabled() : stepEnabled());
}

void sipQAbstractSpinBox::sipProtect_initStyleOption(QStyleOptionSpinBox*a0) const
{
    QAbstractSpinBox::initStyleOption(a0);
}


PyDoc_STRVAR(doc_QAbstractSpinBox_sender, "QAbstractSpinBox.sender() -> QObject");

extern "C" {static PyObject *meth_QAbstractSpinBox_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1571 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_sender, doc_QAbstractSpinBox_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_receivers, "QAbstractSpinBox.receivers(signal) -> int");

extern "C" {static PyObject *meth_QAbstractSpinBox_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1630 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractSpinBox.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_receivers, doc_QAbstractSpinBox_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_childEvent, "QAbstractSpinBox.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_childEvent, doc_QAbstractSpinBox_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_customEvent, "QAbstractSpinBox.customEvent(QEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_customEvent, doc_QAbstractSpinBox_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_connectNotify, "QAbstractSpinBox.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QAbstractSpinBox_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_connectNotify, doc_QAbstractSpinBox_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_disconnectNotify, "QAbstractSpinBox.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QAbstractSpinBox_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_disconnectNotify, doc_QAbstractSpinBox_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_senderSignalIndex, "QAbstractSpinBox.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QAbstractSpinBox_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_senderSignalIndex, doc_QAbstractSpinBox_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_isSignalConnected, "QAbstractSpinBox.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_isSignalConnected, doc_QAbstractSpinBox_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_mouseDoubleClickEvent, "QAbstractSpinBox.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_mouseDoubleClickEvent, doc_QAbstractSpinBox_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_enterEvent, "QAbstractSpinBox.enterEvent(QEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_enterEvent, doc_QAbstractSpinBox_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_leaveEvent, "QAbstractSpinBox.leaveEvent(QEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_leaveEvent, doc_QAbstractSpinBox_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_moveEvent, "QAbstractSpinBox.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_moveEvent, doc_QAbstractSpinBox_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_tabletEvent, "QAbstractSpinBox.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_tabletEvent, doc_QAbstractSpinBox_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_actionEvent, "QAbstractSpinBox.actionEvent(QActionEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_actionEvent, doc_QAbstractSpinBox_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_dragEnterEvent, "QAbstractSpinBox.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_dragEnterEvent, doc_QAbstractSpinBox_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_dragMoveEvent, "QAbstractSpinBox.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_dragMoveEvent, doc_QAbstractSpinBox_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_dragLeaveEvent, "QAbstractSpinBox.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_dragLeaveEvent, doc_QAbstractSpinBox_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_dropEvent, "QAbstractSpinBox.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_dropEvent, doc_QAbstractSpinBox_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_metric, "QAbstractSpinBox.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QAbstractSpinBox_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_metric, doc_QAbstractSpinBox_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_inputMethodEvent, "QAbstractSpinBox.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_inputMethodEvent, doc_QAbstractSpinBox_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_updateMicroFocus, "QAbstractSpinBox.updateMicroFocus()");

extern "C" {static PyObject *meth_QAbstractSpinBox_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_updateMicroFocus, doc_QAbstractSpinBox_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_create, "QAbstractSpinBox.create(sip.voidptr window=0, bool initializeWindow=True, bool destroyOldWindow=True)");

extern "C" {static PyObject *meth_QAbstractSpinBox_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0def = 0;
        WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQAbstractSpinBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_create, doc_QAbstractSpinBox_create);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_destroy, "QAbstractSpinBox.destroy(bool destroyWindow=True, bool destroySubWindows=True)");

extern "C" {static PyObject *meth_QAbstractSpinBox_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQAbstractSpinBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_destroy, doc_QAbstractSpinBox_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_focusNextPrevChild, "QAbstractSpinBox.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_focusNextPrevChild, doc_QAbstractSpinBox_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_focusNextChild, "QAbstractSpinBox.focusNextChild() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_focusNextChild, doc_QAbstractSpinBox_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_focusPreviousChild, "QAbstractSpinBox.focusPreviousChild() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_focusPreviousChild, doc_QAbstractSpinBox_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_nativeEvent, "QAbstractSpinBox.nativeEvent(QByteArray, sip.voidptr) -> (bool, int)");

extern "C" {static PyObject *meth_QAbstractSpinBox_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_nativeEvent, doc_QAbstractSpinBox_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_sharedPainter, "QAbstractSpinBox.sharedPainter() -> QPainter");

extern "C" {static PyObject *meth_QAbstractSpinBox_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_sharedPainter, doc_QAbstractSpinBox_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_initPainter, "QAbstractSpinBox.initPainter(QPainter)");

extern "C" {static PyObject *meth_QAbstractSpinBox_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_initPainter, doc_QAbstractSpinBox_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_buttonSymbols, "QAbstractSpinBox.buttonSymbols() -> QAbstractSpinBox.ButtonSymbols");

extern "C" {static PyObject *meth_QAbstractSpinBox_buttonSymbols(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_buttonSymbols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QAbstractSpinBox::ButtonSymbols sipRes;

            sipRes = sipCpp->buttonSymbols();

            return sipConvertFromEnum(sipRes,sipType_QAbstractSpinBox_ButtonSymbols);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_buttonSymbols, doc_QAbstractSpinBox_buttonSymbols);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setButtonSymbols, "QAbstractSpinBox.setButtonSymbols(QAbstractSpinBox.ButtonSymbols)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setButtonSymbols(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setButtonSymbols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSpinBox::ButtonSymbols a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QAbstractSpinBox_ButtonSymbols, &a0))
        {
            sipCpp->setButtonSymbols(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setButtonSymbols, doc_QAbstractSpinBox_setButtonSymbols);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_text, "QAbstractSpinBox.text() -> str");

extern "C" {static PyObject *meth_QAbstractSpinBox_text(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_text, doc_QAbstractSpinBox_text);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_specialValueText, "QAbstractSpinBox.specialValueText() -> str");

extern "C" {static PyObject *meth_QAbstractSpinBox_specialValueText(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_specialValueText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->specialValueText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_specialValueText, doc_QAbstractSpinBox_specialValueText);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setSpecialValueText, "QAbstractSpinBox.setSpecialValueText(str)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setSpecialValueText(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setSpecialValueText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setSpecialValueText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setSpecialValueText, doc_QAbstractSpinBox_setSpecialValueText);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_wrapping, "QAbstractSpinBox.wrapping() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_wrapping(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_wrapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->wrapping();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_wrapping, doc_QAbstractSpinBox_wrapping);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setWrapping, "QAbstractSpinBox.setWrapping(bool)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setWrapping(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setWrapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            sipCpp->setWrapping(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setWrapping, doc_QAbstractSpinBox_setWrapping);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setReadOnly, "QAbstractSpinBox.setReadOnly(bool)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            sipCpp->setReadOnly(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setReadOnly, doc_QAbstractSpinBox_setReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_isReadOnly, "QAbstractSpinBox.isReadOnly() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_isReadOnly, doc_QAbstractSpinBox_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setAlignment, "QAbstractSpinBox.setAlignment(Qt.Alignment)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment* a0;
        int a0State = 0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setAlignment, doc_QAbstractSpinBox_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_alignment, "QAbstractSpinBox.alignment() -> Qt.Alignment");

extern "C" {static PyObject *meth_QAbstractSpinBox_alignment(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            Qt::Alignment*sipRes;

            sipRes = new Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_alignment, doc_QAbstractSpinBox_alignment);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setFrame, "QAbstractSpinBox.setFrame(bool)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setFrame(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            sipCpp->setFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setFrame, doc_QAbstractSpinBox_setFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_hasFrame, "QAbstractSpinBox.hasFrame() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_hasFrame(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_hasFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasFrame();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_hasFrame, doc_QAbstractSpinBox_hasFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_sizeHint, "QAbstractSpinBox.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QAbstractSpinBox_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QAbstractSpinBox::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_sizeHint, doc_QAbstractSpinBox_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_minimumSizeHint, "QAbstractSpinBox.minimumSizeHint() -> QSize");

extern "C" {static PyObject *meth_QAbstractSpinBox_minimumSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_minimumSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QAbstractSpinBox::minimumSizeHint() : sipCpp->minimumSizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_minimumSizeHint, doc_QAbstractSpinBox_minimumSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_interpretText, "QAbstractSpinBox.interpretText()");

extern "C" {static PyObject *meth_QAbstractSpinBox_interpretText(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_interpretText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            sipCpp->interpretText();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_interpretText, doc_QAbstractSpinBox_interpretText);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_event, "QAbstractSpinBox.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_event(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSpinBox::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_event, doc_QAbstractSpinBox_event);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_validate, "QAbstractSpinBox.validate(str, int) -> (QValidator.State, str, int)");

extern "C" {static PyObject *meth_QAbstractSpinBox_validate(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QString* a0;
        int a0State = 0;
        int a1;
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            QValidator::State sipRes;
            PyObject *sipResObj;

            sipRes = (sipSelfWasArg ? sipCpp->QAbstractSpinBox::validate(*a0,a1) : sipCpp->validate(*a0,a1));

            sipResObj = sipBuildResult(0,"(FDi)",sipRes,sipType_QValidator_State,a0,sipType_QString,NULL,a1);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_validate, doc_QAbstractSpinBox_validate);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_fixup, "QAbstractSpinBox.fixup(str) -> str");

extern "C" {static PyObject *meth_QAbstractSpinBox_fixup(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_fixup(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QString* a0;
        int a0State = 0;
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QString,&a0, &a0State))
        {
            PyObject *sipResObj;

            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::fixup(*a0) : sipCpp->fixup(*a0));

            sipResObj = sipConvertFromType(a0,sipType_QString,NULL);
            sipReleaseType(a0,sipType_QString,a0State);

            return sipResObj;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_fixup, doc_QAbstractSpinBox_fixup);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_stepBy, "QAbstractSpinBox.stepBy(int)");

extern "C" {static PyObject *meth_QAbstractSpinBox_stepBy(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_stepBy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::stepBy(a0) : sipCpp->stepBy(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_stepBy, doc_QAbstractSpinBox_stepBy);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_stepUp, "QAbstractSpinBox.stepUp()");

extern "C" {static PyObject *meth_QAbstractSpinBox_stepUp(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_stepUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            sipCpp->stepUp();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_stepUp, doc_QAbstractSpinBox_stepUp);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_stepDown, "QAbstractSpinBox.stepDown()");

extern "C" {static PyObject *meth_QAbstractSpinBox_stepDown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_stepDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            sipCpp->stepDown();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_stepDown, doc_QAbstractSpinBox_stepDown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_selectAll, "QAbstractSpinBox.selectAll()");

extern "C" {static PyObject *meth_QAbstractSpinBox_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            sipCpp->selectAll();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_selectAll, doc_QAbstractSpinBox_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_clear, "QAbstractSpinBox.clear()");

extern "C" {static PyObject *meth_QAbstractSpinBox_clear(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QAbstractSpinBox::clear() : sipCpp->clear());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_clear, doc_QAbstractSpinBox_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_resizeEvent, "QAbstractSpinBox.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_resizeEvent, doc_QAbstractSpinBox_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_keyPressEvent, "QAbstractSpinBox.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_keyPressEvent, doc_QAbstractSpinBox_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_keyReleaseEvent, "QAbstractSpinBox.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_keyReleaseEvent, doc_QAbstractSpinBox_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_wheelEvent, "QAbstractSpinBox.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_wheelEvent, doc_QAbstractSpinBox_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_focusInEvent, "QAbstractSpinBox.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_focusInEvent, doc_QAbstractSpinBox_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_focusOutEvent, "QAbstractSpinBox.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_focusOutEvent, doc_QAbstractSpinBox_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_contextMenuEvent, "QAbstractSpinBox.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_contextMenuEvent, doc_QAbstractSpinBox_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_changeEvent, "QAbstractSpinBox.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_changeEvent, doc_QAbstractSpinBox_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_closeEvent, "QAbstractSpinBox.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_closeEvent, doc_QAbstractSpinBox_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_hideEvent, "QAbstractSpinBox.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_hideEvent, doc_QAbstractSpinBox_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_mousePressEvent, "QAbstractSpinBox.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_mousePressEvent, doc_QAbstractSpinBox_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_mouseReleaseEvent, "QAbstractSpinBox.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_mouseReleaseEvent, doc_QAbstractSpinBox_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_mouseMoveEvent, "QAbstractSpinBox.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_mouseMoveEvent, doc_QAbstractSpinBox_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_timerEvent, "QAbstractSpinBox.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_timerEvent, doc_QAbstractSpinBox_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_paintEvent, "QAbstractSpinBox.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_paintEvent, doc_QAbstractSpinBox_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_showEvent, "QAbstractSpinBox.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QAbstractSpinBox_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_showEvent, doc_QAbstractSpinBox_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_lineEdit, "QAbstractSpinBox.lineEdit() -> QLineEdit");

extern "C" {static PyObject *meth_QAbstractSpinBox_lineEdit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_lineEdit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QLineEdit*sipRes;

            sipRes = sipCpp->sipProtect_lineEdit();

            return sipConvertFromType(sipRes,sipType_QLineEdit,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_lineEdit, doc_QAbstractSpinBox_lineEdit);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setLineEdit, "QAbstractSpinBox.setLineEdit(QLineEdit)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setLineEdit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setLineEdit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QLineEdit* a0;
        sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ:", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QLineEdit, &a0))
        {
            sipCpp->sipProtect_setLineEdit(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setLineEdit, doc_QAbstractSpinBox_setLineEdit);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_stepEnabled, "QAbstractSpinBox.stepEnabled() -> QAbstractSpinBox.StepEnabled");

extern "C" {static PyObject *meth_QAbstractSpinBox_stepEnabled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_stepEnabled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QAbstractSpinBox::StepEnabled*sipRes;

            sipRes = new QAbstractSpinBox::StepEnabled(sipCpp->sipProtectVirt_stepEnabled(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QAbstractSpinBox_StepEnabled,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_stepEnabled, doc_QAbstractSpinBox_stepEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_initStyleOption, "QAbstractSpinBox.initStyleOption(QStyleOptionSpinBox)");

extern "C" {static PyObject *meth_QAbstractSpinBox_initStyleOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_initStyleOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QStyleOptionSpinBox* a0;
        const sipQAbstractSpinBox *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QStyleOptionSpinBox, &a0))
        {
            sipCpp->sipProtect_initStyleOption(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_initStyleOption, doc_QAbstractSpinBox_initStyleOption);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setCorrectionMode, "QAbstractSpinBox.setCorrectionMode(QAbstractSpinBox.CorrectionMode)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setCorrectionMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setCorrectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractSpinBox::CorrectionMode a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_QAbstractSpinBox_CorrectionMode, &a0))
        {
            sipCpp->setCorrectionMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setCorrectionMode, doc_QAbstractSpinBox_setCorrectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_correctionMode, "QAbstractSpinBox.correctionMode() -> QAbstractSpinBox.CorrectionMode");

extern "C" {static PyObject *meth_QAbstractSpinBox_correctionMode(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_correctionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            QAbstractSpinBox::CorrectionMode sipRes;

            sipRes = sipCpp->correctionMode();

            return sipConvertFromEnum(sipRes,sipType_QAbstractSpinBox_CorrectionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_correctionMode, doc_QAbstractSpinBox_correctionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_hasAcceptableInput, "QAbstractSpinBox.hasAcceptableInput() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_hasAcceptableInput(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_hasAcceptableInput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAcceptableInput();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_hasAcceptableInput, doc_QAbstractSpinBox_hasAcceptableInput);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setAccelerated, "QAbstractSpinBox.setAccelerated(bool)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setAccelerated(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setAccelerated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            sipCpp->setAccelerated(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setAccelerated, doc_QAbstractSpinBox_setAccelerated);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_isAccelerated, "QAbstractSpinBox.isAccelerated() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_isAccelerated(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_isAccelerated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAccelerated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_isAccelerated, doc_QAbstractSpinBox_isAccelerated);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setKeyboardTracking, "QAbstractSpinBox.setKeyboardTracking(bool)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setKeyboardTracking(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setKeyboardTracking(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            sipCpp->setKeyboardTracking(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setKeyboardTracking, doc_QAbstractSpinBox_setKeyboardTracking);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_keyboardTracking, "QAbstractSpinBox.keyboardTracking() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_keyboardTracking(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_keyboardTracking(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->keyboardTracking();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_keyboardTracking, doc_QAbstractSpinBox_keyboardTracking);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_inputMethodQuery, "QAbstractSpinBox.inputMethodQuery(Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QAbstractSpinBox_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QAbstractSpinBox::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_inputMethodQuery, doc_QAbstractSpinBox_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_setGroupSeparatorShown, "QAbstractSpinBox.setGroupSeparatorShown(bool)");

extern "C" {static PyObject *meth_QAbstractSpinBox_setGroupSeparatorShown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_setGroupSeparatorShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractSpinBox, &sipCpp, &a0))
        {
            sipCpp->setGroupSeparatorShown(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_setGroupSeparatorShown, doc_QAbstractSpinBox_setGroupSeparatorShown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractSpinBox_isGroupSeparatorShown, "QAbstractSpinBox.isGroupSeparatorShown() -> bool");

extern "C" {static PyObject *meth_QAbstractSpinBox_isGroupSeparatorShown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractSpinBox_isGroupSeparatorShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractSpinBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractSpinBox, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isGroupSeparatorShown();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractSpinBox, sipName_isGroupSeparatorShown, doc_QAbstractSpinBox_isGroupSeparatorShown);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractSpinBox(void *, const sipTypeDef *);}
static void *cast_QAbstractSpinBox(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractSpinBox)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QAbstractSpinBox *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractSpinBox(void *, int);}
static void release_QAbstractSpinBox(void *sipCppV,int)
{
    QAbstractSpinBox *sipCpp = reinterpret_cast<QAbstractSpinBox *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractSpinBox(sipSimpleWrapper *);}
static void dealloc_QAbstractSpinBox(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractSpinBox *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractSpinBox(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractSpinBox(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractSpinBox(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractSpinBox *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractSpinBox(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractSpinBox[] = {{454, 255, 1}};


static PyMethodDef methods_QAbstractSpinBox[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QAbstractSpinBox_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_alignment), meth_QAbstractSpinBox_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_alignment)},
    {SIP_MLNAME_CAST(sipName_buttonSymbols), meth_QAbstractSpinBox_buttonSymbols, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_buttonSymbols)},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QAbstractSpinBox_changeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_changeEvent)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QAbstractSpinBox_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QAbstractSpinBox_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_clear)},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QAbstractSpinBox_closeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_closeEvent)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QAbstractSpinBox_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QAbstractSpinBox_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_correctionMode), meth_QAbstractSpinBox_correctionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_correctionMode)},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QAbstractSpinBox_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QAbstractSpinBox_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QAbstractSpinBox_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QAbstractSpinBox_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QAbstractSpinBox_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QAbstractSpinBox_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QAbstractSpinBox_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QAbstractSpinBox_dropEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QAbstractSpinBox_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QAbstractSpinBox_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_event)},
    {SIP_MLNAME_CAST(sipName_fixup), meth_QAbstractSpinBox_fixup, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_fixup)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QAbstractSpinBox_focusInEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QAbstractSpinBox_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QAbstractSpinBox_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QAbstractSpinBox_focusOutEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QAbstractSpinBox_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hasAcceptableInput), meth_QAbstractSpinBox_hasAcceptableInput, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_hasAcceptableInput)},
    {SIP_MLNAME_CAST(sipName_hasFrame), meth_QAbstractSpinBox_hasFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_hasFrame)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QAbstractSpinBox_hideEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_hideEvent)},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QAbstractSpinBox_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_initStyleOption), (PyCFunction)meth_QAbstractSpinBox_initStyleOption, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_initStyleOption)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QAbstractSpinBox_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QAbstractSpinBox_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_interpretText), meth_QAbstractSpinBox_interpretText, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_interpretText)},
    {SIP_MLNAME_CAST(sipName_isAccelerated), meth_QAbstractSpinBox_isAccelerated, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_isAccelerated)},
    {SIP_MLNAME_CAST(sipName_isGroupSeparatorShown), meth_QAbstractSpinBox_isGroupSeparatorShown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_isGroupSeparatorShown)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QAbstractSpinBox_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QAbstractSpinBox_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QAbstractSpinBox_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QAbstractSpinBox_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_keyboardTracking), meth_QAbstractSpinBox_keyboardTracking, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_keyboardTracking)},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QAbstractSpinBox_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_lineEdit), (PyCFunction)meth_QAbstractSpinBox_lineEdit, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_lineEdit)},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QAbstractSpinBox_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_minimumSizeHint), meth_QAbstractSpinBox_minimumSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_minimumSizeHint)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QAbstractSpinBox_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QAbstractSpinBox_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QAbstractSpinBox_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QAbstractSpinBox_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QAbstractSpinBox_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QAbstractSpinBox_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QAbstractSpinBox_paintEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_paintEvent)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QAbstractSpinBox_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QAbstractSpinBox_resizeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QAbstractSpinBox_selectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_selectAll)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QAbstractSpinBox_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QAbstractSpinBox_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAccelerated), meth_QAbstractSpinBox_setAccelerated, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setAccelerated)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QAbstractSpinBox_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setButtonSymbols), meth_QAbstractSpinBox_setButtonSymbols, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setButtonSymbols)},
    {SIP_MLNAME_CAST(sipName_setCorrectionMode), meth_QAbstractSpinBox_setCorrectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setCorrectionMode)},
    {SIP_MLNAME_CAST(sipName_setFrame), meth_QAbstractSpinBox_setFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setFrame)},
    {SIP_MLNAME_CAST(sipName_setGroupSeparatorShown), meth_QAbstractSpinBox_setGroupSeparatorShown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setGroupSeparatorShown)},
    {SIP_MLNAME_CAST(sipName_setKeyboardTracking), meth_QAbstractSpinBox_setKeyboardTracking, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setKeyboardTracking)},
    {SIP_MLNAME_CAST(sipName_setLineEdit), (PyCFunction)meth_QAbstractSpinBox_setLineEdit, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setLineEdit)},
    {SIP_MLNAME_CAST(sipName_setReadOnly), meth_QAbstractSpinBox_setReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setReadOnly)},
    {SIP_MLNAME_CAST(sipName_setSpecialValueText), meth_QAbstractSpinBox_setSpecialValueText, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setSpecialValueText)},
    {SIP_MLNAME_CAST(sipName_setWrapping), meth_QAbstractSpinBox_setWrapping, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_setWrapping)},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QAbstractSpinBox_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QAbstractSpinBox_showEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_showEvent)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QAbstractSpinBox_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_sizeHint)},
    {SIP_MLNAME_CAST(sipName_specialValueText), meth_QAbstractSpinBox_specialValueText, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_specialValueText)},
    {SIP_MLNAME_CAST(sipName_stepBy), meth_QAbstractSpinBox_stepBy, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_stepBy)},
    {SIP_MLNAME_CAST(sipName_stepDown), meth_QAbstractSpinBox_stepDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_stepDown)},
    {SIP_MLNAME_CAST(sipName_stepEnabled), (PyCFunction)meth_QAbstractSpinBox_stepEnabled, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_stepEnabled)},
    {SIP_MLNAME_CAST(sipName_stepUp), meth_QAbstractSpinBox_stepUp, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_stepUp)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QAbstractSpinBox_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QAbstractSpinBox_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_text)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QAbstractSpinBox_timerEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_timerEvent)},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QAbstractSpinBox_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_validate), meth_QAbstractSpinBox_validate, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_validate)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QAbstractSpinBox_wheelEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_wrapping), meth_QAbstractSpinBox_wrapping, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractSpinBox_wrapping)}
};

static sipEnumMemberDef enummembers_QAbstractSpinBox[] = {
    {sipName_CorrectToNearestValue, static_cast<int>(QAbstractSpinBox::CorrectToNearestValue), 22},
    {sipName_CorrectToPreviousValue, static_cast<int>(QAbstractSpinBox::CorrectToPreviousValue), 22},
    {sipName_NoButtons, static_cast<int>(QAbstractSpinBox::NoButtons), 21},
    {sipName_PlusMinus, static_cast<int>(QAbstractSpinBox::PlusMinus), 21},
    {sipName_StepDownEnabled, static_cast<int>(QAbstractSpinBox::StepDownEnabled), 24},
    {sipName_StepNone, static_cast<int>(QAbstractSpinBox::StepNone), 24},
    {sipName_StepUpEnabled, static_cast<int>(QAbstractSpinBox::StepUpEnabled), 24},
    {sipName_UpDownArrows, static_cast<int>(QAbstractSpinBox::UpDownArrows), 21},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractSpinBox[] = {
    {"editingFinished()", "\1QAbstractSpinBox.editingFinished", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractSpinBox, "\1QAbstractSpinBox(QWidget parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QAbstractSpinBox = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QAbstractSpinBox,
        {0}
    },
    {
        sipNameNr_QAbstractSpinBox,
        {0, 0, 1},
        83, methods_QAbstractSpinBox,
        8, enummembers_QAbstractSpinBox,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractSpinBox,
    -1,
    -1,
    supers_QAbstractSpinBox,
    0,
    init_type_QAbstractSpinBox,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractSpinBox,
    0,
    0,
    0,
    release_QAbstractSpinBox,
    cast_QAbstractSpinBox,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAbstractSpinBox::staticMetaObject,
    0,
    signals_QAbstractSpinBox,
    0
};
