/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:10 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtextbrowser.sip"
#include <qtextbrowser.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 368 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 452 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 395 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 247 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 37 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 122 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 125 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 128 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 131 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 134 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 40 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 137 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 140 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 143 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 146 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 149 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 40 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 152 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractscrollarea.sip"
#include <qabstractscrollarea.h>
#line 155 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 158 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 161 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 164 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 167 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 170 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 173 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 176 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 179 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 182 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 185 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 188 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 191 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 194 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 197 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 200 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 203 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 206 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 209 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 212 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 215 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 218 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 221 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 224 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 227 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 635 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 230 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 275 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 233 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 408 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 236 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 382 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 239 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 242 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 245 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 248 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 251 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 254 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 257 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 260 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 263 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 266 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 269 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 272 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 275 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 278 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 281 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 284 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 287 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 290 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 293 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 296 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"


class sipQTextBrowser : public QTextBrowser
{
public:
    sipQTextBrowser(QWidget*);
    virtual ~sipQTextBrowser();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_enterEvent(bool,QEvent*);
    void sipProtectVirt_leaveEvent(bool,QEvent*);
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_closeEvent(bool,QCloseEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);
    void sipProtectVirt_actionEvent(bool,QActionEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const QByteArray&,void*,long*);
    QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool,QPainter*) const;
    void sipProtect_drawFrame(QPainter*);
    void sipProtect_setViewportMargins(int,int,int,int);
    void sipProtect_setViewportMargins(const QMargins&);
    bool sipProtectVirt_viewportEvent(bool,QEvent*);
    bool sipProtectVirt_eventFilter(bool,QObject*,QEvent*);
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent*);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent*);
    void sipProtectVirt_dropEvent(bool,QDropEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_changeEvent(bool,QEvent*);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    QMimeData* sipProtectVirt_createMimeDataFromSelection(bool) const;
    bool sipProtectVirt_canInsertFromMimeData(bool,const QMimeData*) const;
    void sipProtectVirt_insertFromMimeData(bool,const QMimeData*);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    void sipProtectVirt_scrollContentsBy(bool,int,int);
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_paintEvent(bool,QPaintEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void setupViewport(QWidget*);
    bool eventFilter(QObject*,QEvent*);
    bool viewportEvent(QEvent*);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    void scrollContentsBy(int,int);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    void insertFromMimeData(const QMimeData*);
    bool canInsertFromMimeData(const QMimeData*) const;
    QMimeData* createMimeDataFromSelection() const;
    void wheelEvent(QWheelEvent*);
    void changeEvent(QEvent*);
    void showEvent(QShowEvent*);
    void focusInEvent(QFocusEvent*);
    void dropEvent(QDropEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void resizeEvent(QResizeEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void timerEvent(QTimerEvent*);
    void paintEvent(QPaintEvent*);
    bool focusNextPrevChild(bool);
    void focusOutEvent(QFocusEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void keyPressEvent(QKeyEvent*);
    bool event(QEvent*);
    void reload();
    void home();
    void forward();
    void backward();
    void setSource(const QUrl&);
    QVariant loadResource(int,const QUrl&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextBrowser(const sipQTextBrowser &);
    sipQTextBrowser &operator = (const sipQTextBrowser &);

    char sipPyMethods[58];
};

sipQTextBrowser::sipQTextBrowser(QWidget*a0): QTextBrowser(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextBrowser::~sipQTextBrowser()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTextBrowser::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QTextBrowser);
}

int sipQTextBrowser::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTextBrowser::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QTextBrowser,_c,_id,_a);

    return _id;
}

void *sipQTextBrowser::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QTextBrowser, _clname, &sipCpp) ? sipCpp : QTextBrowser::qt_metacast(_clname));
}

void sipQTextBrowser::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTextBrowser::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTextBrowser::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTextBrowser::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTextBrowser::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QTextBrowser::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQTextBrowser::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QTextBrowser::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQTextBrowser::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QTextBrowser::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQTextBrowser::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QTextBrowser::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTextBrowser::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QTextBrowser::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QTextBrowser::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QTextBrowser::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QTextBrowser::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QTextBrowser::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QTextBrowser::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QTextBrowser::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QTextBrowser::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQTextBrowser::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QTextBrowser::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTextBrowser::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QTextBrowser::heightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QTextBrowser::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQTextBrowser::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QTextBrowser::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTextBrowser::setupViewport(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_setupViewport);

    if (!sipMeth)
    {
        QTextBrowser::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTextBrowser::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTextBrowser::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQTextBrowser::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QTextBrowser::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQTextBrowser::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QTextBrowser::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQTextBrowser::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QTextBrowser::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTextBrowser::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QTextBrowser::scrollContentsBy(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    ((sipVH_QtGui_17)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QVariant sipQTextBrowser::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QTextBrowser::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QTextBrowser::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::insertFromMimeData(const QMimeData*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_insertFromMimeData);

    if (!sipMeth)
    {
        QTextBrowser::insertFromMimeData(a0);
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*);

    sipVH_QtWidgets_37(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTextBrowser::canInsertFromMimeData(const QMimeData*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_canInsertFromMimeData);

    if (!sipMeth)
        return QTextBrowser::canInsertFromMimeData(a0);

    extern bool sipVH_QtWidgets_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*);

    return sipVH_QtWidgets_38(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMimeData* sipQTextBrowser::createMimeDataFromSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_createMimeDataFromSelection);

    if (!sipMeth)
        return QTextBrowser::createMimeDataFromSelection();

    extern QMimeData* sipVH_QtWidgets_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_39(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTextBrowser::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QTextBrowser::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QTextBrowser::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QTextBrowser::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QTextBrowser::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QTextBrowser::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QTextBrowser::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QTextBrowser::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QTextBrowser::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QTextBrowser::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QTextBrowser::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QTextBrowser::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QTextBrowser::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTextBrowser::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QTextBrowser::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTextBrowser::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QTextBrowser::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QTextBrowser::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QTextBrowser::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QTextBrowser::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QTextBrowser::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QTextBrowser::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTextBrowser::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTextBrowser::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextBrowser::reload()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_reload);

    if (!sipMeth)
    {
        QTextBrowser::reload();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTextBrowser::home()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_home);

    if (!sipMeth)
    {
        QTextBrowser::home();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTextBrowser::forward()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_forward);

    if (!sipMeth)
    {
        QTextBrowser::forward();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTextBrowser::backward()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_backward);

    if (!sipMeth)
    {
        QTextBrowser::backward();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTextBrowser::setSource(const QUrl& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_setSource);

    if (!sipMeth)
    {
        QTextBrowser::setSource(a0);
        return;
    }

    extern void sipVH_QtWidgets_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&);

    sipVH_QtWidgets_40(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQTextBrowser::loadResource(int a0,const QUrl& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_loadResource);

    if (!sipMeth)
        return QTextBrowser::loadResource(a0,a1);

    typedef QVariant (*sipVH_QtGui_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const QUrl&);

    return ((sipVH_QtGui_20)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[20]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QObject* sipQTextBrowser::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQTextBrowser::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQTextBrowser::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQTextBrowser::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQTextBrowser::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQTextBrowser::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQTextBrowser::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent*a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent*a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQTextBrowser::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQTextBrowser::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQTextBrowser::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQTextBrowser::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQTextBrowser::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQTextBrowser::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

bool sipQTextBrowser::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ? QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

QPainter* sipQTextBrowser::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QWidget::sharedPainter() : sharedPainter());
}

void sipQTextBrowser::sipProtectVirt_initPainter(bool sipSelfWasArg,QPainter*a0) const
{
    (sipSelfWasArg ? QWidget::initPainter(a0) : initPainter(a0));
}

void sipQTextBrowser::sipProtect_drawFrame(QPainter*a0)
{
    QFrame::drawFrame(a0);
}

void sipQTextBrowser::sipProtect_setViewportMargins(int a0,int a1,int a2,int a3)
{
    QAbstractScrollArea::setViewportMargins(a0,a1,a2,a3);
}

void sipQTextBrowser::sipProtect_setViewportMargins(const QMargins& a0)
{
    QAbstractScrollArea::setViewportMargins(a0);
}

bool sipQTextBrowser::sipProtectVirt_viewportEvent(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QAbstractScrollArea::viewportEvent(a0) : viewportEvent(a0));
}

bool sipQTextBrowser::sipProtectVirt_eventFilter(bool sipSelfWasArg,QObject*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QAbstractScrollArea::eventFilter(a0,a1) : eventFilter(a0,a1));
}

void sipQTextBrowser::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::timerEvent(a0) : timerEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::resizeEvent(a0) : resizeEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::dropEvent(a0) : dropEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::focusInEvent(a0) : focusInEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::showEvent(a0) : showEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::changeEvent(a0) : changeEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::wheelEvent(a0) : wheelEvent(a0));
}

QMimeData* sipQTextBrowser::sipProtectVirt_createMimeDataFromSelection(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTextEdit::createMimeDataFromSelection() : createMimeDataFromSelection());
}

bool sipQTextBrowser::sipProtectVirt_canInsertFromMimeData(bool sipSelfWasArg,const QMimeData*a0) const
{
    return (sipSelfWasArg ? QTextEdit::canInsertFromMimeData(a0) : canInsertFromMimeData(a0));
}

void sipQTextBrowser::sipProtectVirt_insertFromMimeData(bool sipSelfWasArg,const QMimeData*a0)
{
    (sipSelfWasArg ? QTextEdit::insertFromMimeData(a0) : insertFromMimeData(a0));
}

void sipQTextBrowser::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_scrollContentsBy(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ? QTextEdit::scrollContentsBy(a0,a1) : scrollContentsBy(a0,a1));
}

bool sipQTextBrowser::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QTextBrowser::event(a0) : event(a0));
}

void sipQTextBrowser::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QTextBrowser::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QTextBrowser::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QTextBrowser::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QTextBrowser::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQTextBrowser::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QTextBrowser::focusOutEvent(a0) : focusOutEvent(a0));
}

bool sipQTextBrowser::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QTextBrowser::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQTextBrowser::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent*a0)
{
    (sipSelfWasArg ? QTextBrowser::paintEvent(a0) : paintEvent(a0));
}


PyDoc_STRVAR(doc_QTextBrowser_sender, "QTextBrowser.sender() -> QObject");

extern "C" {static PyObject *meth_QTextBrowser_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1784 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_sender, doc_QTextBrowser_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_receivers, "QTextBrowser.receivers(signal) -> int");

extern "C" {static PyObject *meth_QTextBrowser_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1843 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextBrowser.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_receivers, doc_QTextBrowser_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_childEvent, "QTextBrowser.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QTextBrowser_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_childEvent, doc_QTextBrowser_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_customEvent, "QTextBrowser.customEvent(QEvent)");

extern "C" {static PyObject *meth_QTextBrowser_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_customEvent, doc_QTextBrowser_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_connectNotify, "QTextBrowser.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTextBrowser_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_connectNotify, doc_QTextBrowser_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_disconnectNotify, "QTextBrowser.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTextBrowser_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_disconnectNotify, doc_QTextBrowser_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_senderSignalIndex, "QTextBrowser.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QTextBrowser_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_senderSignalIndex, doc_QTextBrowser_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_isSignalConnected, "QTextBrowser.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QTextBrowser_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_isSignalConnected, doc_QTextBrowser_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_enterEvent, "QTextBrowser.enterEvent(QEvent)");

extern "C" {static PyObject *meth_QTextBrowser_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_enterEvent, doc_QTextBrowser_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_leaveEvent, "QTextBrowser.leaveEvent(QEvent)");

extern "C" {static PyObject *meth_QTextBrowser_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_leaveEvent, doc_QTextBrowser_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_moveEvent, "QTextBrowser.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QTextBrowser_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_moveEvent, doc_QTextBrowser_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_closeEvent, "QTextBrowser.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QTextBrowser_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_closeEvent, doc_QTextBrowser_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_tabletEvent, "QTextBrowser.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QTextBrowser_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_tabletEvent, doc_QTextBrowser_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_actionEvent, "QTextBrowser.actionEvent(QActionEvent)");

extern "C" {static PyObject *meth_QTextBrowser_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_actionEvent, doc_QTextBrowser_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_hideEvent, "QTextBrowser.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QTextBrowser_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_hideEvent, doc_QTextBrowser_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_metric, "QTextBrowser.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QTextBrowser_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_metric, doc_QTextBrowser_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_updateMicroFocus, "QTextBrowser.updateMicroFocus()");

extern "C" {static PyObject *meth_QTextBrowser_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_updateMicroFocus, doc_QTextBrowser_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_create, "QTextBrowser.create(sip.voidptr window=0, bool initializeWindow=True, bool destroyOldWindow=True)");

extern "C" {static PyObject *meth_QTextBrowser_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0def = 0;
        WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQTextBrowser *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_create, doc_QTextBrowser_create);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_destroy, "QTextBrowser.destroy(bool destroyWindow=True, bool destroySubWindows=True)");

extern "C" {static PyObject *meth_QTextBrowser_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQTextBrowser *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_destroy, doc_QTextBrowser_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_focusNextChild, "QTextBrowser.focusNextChild() -> bool");

extern "C" {static PyObject *meth_QTextBrowser_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_focusNextChild, doc_QTextBrowser_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_focusPreviousChild, "QTextBrowser.focusPreviousChild() -> bool");

extern "C" {static PyObject *meth_QTextBrowser_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_focusPreviousChild, doc_QTextBrowser_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_nativeEvent, "QTextBrowser.nativeEvent(QByteArray, sip.voidptr) -> (bool, int)");

extern "C" {static PyObject *meth_QTextBrowser_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_nativeEvent, doc_QTextBrowser_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_sharedPainter, "QTextBrowser.sharedPainter() -> QPainter");

extern "C" {static PyObject *meth_QTextBrowser_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_sharedPainter, doc_QTextBrowser_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_initPainter, "QTextBrowser.initPainter(QPainter)");

extern "C" {static PyObject *meth_QTextBrowser_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_initPainter, doc_QTextBrowser_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_drawFrame, "QTextBrowser.drawFrame(QPainter)");

extern "C" {static PyObject *meth_QTextBrowser_drawFrame(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_drawFrame(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtect_drawFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_drawFrame, doc_QTextBrowser_drawFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_setViewportMargins, "QTextBrowser.setViewportMargins(int, int, int, int)\n"
    "QTextBrowser.setViewportMargins(QMargins)");

extern "C" {static PyObject *meth_QTextBrowser_setViewportMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_setViewportMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biiii", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->sipProtect_setViewportMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QMargins* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMargins, &a0))
        {
            sipCpp->sipProtect_setViewportMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_setViewportMargins, doc_QTextBrowser_setViewportMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_viewportEvent, "QTextBrowser.viewportEvent(QEvent) -> bool");

extern "C" {static PyObject *meth_QTextBrowser_viewportEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_viewportEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_viewportEvent(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_viewportEvent, doc_QTextBrowser_viewportEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_eventFilter, "QTextBrowser.eventFilter(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QTextBrowser_eventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_eventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_eventFilter, doc_QTextBrowser_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_timerEvent, "QTextBrowser.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QTextBrowser_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_timerEvent, doc_QTextBrowser_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_keyReleaseEvent, "QTextBrowser.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QTextBrowser_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_keyReleaseEvent, doc_QTextBrowser_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_resizeEvent, "QTextBrowser.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QTextBrowser_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_resizeEvent, doc_QTextBrowser_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_mouseDoubleClickEvent, "QTextBrowser.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextBrowser_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_mouseDoubleClickEvent, doc_QTextBrowser_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_contextMenuEvent, "QTextBrowser.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QTextBrowser_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_contextMenuEvent, doc_QTextBrowser_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_dragEnterEvent, "QTextBrowser.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QTextBrowser_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_dragEnterEvent, doc_QTextBrowser_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_dragLeaveEvent, "QTextBrowser.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QTextBrowser_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_dragLeaveEvent, doc_QTextBrowser_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_dragMoveEvent, "QTextBrowser.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QTextBrowser_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_dragMoveEvent, doc_QTextBrowser_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_dropEvent, "QTextBrowser.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QTextBrowser_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_dropEvent, doc_QTextBrowser_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_focusInEvent, "QTextBrowser.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QTextBrowser_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_focusInEvent, doc_QTextBrowser_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_showEvent, "QTextBrowser.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QTextBrowser_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_showEvent, doc_QTextBrowser_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_changeEvent, "QTextBrowser.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QTextBrowser_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_changeEvent, doc_QTextBrowser_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_wheelEvent, "QTextBrowser.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QTextBrowser_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_wheelEvent, doc_QTextBrowser_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_createMimeDataFromSelection, "QTextBrowser.createMimeDataFromSelection() -> QMimeData");

extern "C" {static PyObject *meth_QTextBrowser_createMimeDataFromSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_createMimeDataFromSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            QMimeData*sipRes;

            sipRes = sipCpp->sipProtectVirt_createMimeDataFromSelection(sipSelfWasArg);

            return sipConvertFromNewType(sipRes,sipType_QMimeData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_createMimeDataFromSelection, doc_QTextBrowser_createMimeDataFromSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_canInsertFromMimeData, "QTextBrowser.canInsertFromMimeData(QMimeData) -> bool");

extern "C" {static PyObject *meth_QTextBrowser_canInsertFromMimeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_canInsertFromMimeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData* a0;
        const sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMimeData, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_canInsertFromMimeData(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_canInsertFromMimeData, doc_QTextBrowser_canInsertFromMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_insertFromMimeData, "QTextBrowser.insertFromMimeData(QMimeData)");

extern "C" {static PyObject *meth_QTextBrowser_insertFromMimeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_insertFromMimeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMimeData, &a0))
        {
            sipCpp->sipProtectVirt_insertFromMimeData(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_insertFromMimeData, doc_QTextBrowser_insertFromMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_inputMethodEvent, "QTextBrowser.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QTextBrowser_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_inputMethodEvent, doc_QTextBrowser_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_scrollContentsBy, "QTextBrowser.scrollContentsBy(int, int)");

extern "C" {static PyObject *meth_QTextBrowser_scrollContentsBy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtectVirt_scrollContentsBy(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_scrollContentsBy, doc_QTextBrowser_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_source, "QTextBrowser.source() -> QUrl");

extern "C" {static PyObject *meth_QTextBrowser_source(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_source(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->source());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_source, doc_QTextBrowser_source);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_searchPaths, "QTextBrowser.searchPaths() -> list-of-str");

extern "C" {static PyObject *meth_QTextBrowser_searchPaths(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_searchPaths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->searchPaths());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_searchPaths, doc_QTextBrowser_searchPaths);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_setSearchPaths, "QTextBrowser.setSearchPaths(list-of-str)");

extern "C" {static PyObject *meth_QTextBrowser_setSearchPaths(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_setSearchPaths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setSearchPaths(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_setSearchPaths, doc_QTextBrowser_setSearchPaths);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_loadResource, "QTextBrowser.loadResource(int, QUrl) -> QVariant");

extern "C" {static PyObject *meth_QTextBrowser_loadResource(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_loadResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QUrl* a1;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0, sipType_QUrl, &a1))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QTextBrowser::loadResource(a0,*a1) : sipCpp->loadResource(a0,*a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_loadResource, doc_QTextBrowser_loadResource);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_setSource, "QTextBrowser.setSource(QUrl)");

extern "C" {static PyObject *meth_QTextBrowser_setSource(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_setSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QUrl* a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QUrl, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTextBrowser::setSource(*a0) : sipCpp->setSource(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_setSource, doc_QTextBrowser_setSource);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_backward, "QTextBrowser.backward()");

extern "C" {static PyObject *meth_QTextBrowser_backward(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_backward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QTextBrowser::backward() : sipCpp->backward());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_backward, doc_QTextBrowser_backward);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_forward, "QTextBrowser.forward()");

extern "C" {static PyObject *meth_QTextBrowser_forward(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_forward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QTextBrowser::forward() : sipCpp->forward());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_forward, doc_QTextBrowser_forward);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_home, "QTextBrowser.home()");

extern "C" {static PyObject *meth_QTextBrowser_home(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_home(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QTextBrowser::home() : sipCpp->home());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_home, doc_QTextBrowser_home);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_reload, "QTextBrowser.reload()");

extern "C" {static PyObject *meth_QTextBrowser_reload(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_reload(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QTextBrowser::reload() : sipCpp->reload());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_reload, doc_QTextBrowser_reload);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_event, "QTextBrowser.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QTextBrowser_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_event, doc_QTextBrowser_event);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_keyPressEvent, "QTextBrowser.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QTextBrowser_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_keyPressEvent, doc_QTextBrowser_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_mouseMoveEvent, "QTextBrowser.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextBrowser_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_mouseMoveEvent, doc_QTextBrowser_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_mousePressEvent, "QTextBrowser.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextBrowser_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_mousePressEvent, doc_QTextBrowser_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_mouseReleaseEvent, "QTextBrowser.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextBrowser_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_mouseReleaseEvent, doc_QTextBrowser_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_focusOutEvent, "QTextBrowser.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QTextBrowser_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_focusOutEvent, doc_QTextBrowser_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_focusNextPrevChild, "QTextBrowser.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QTextBrowser_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_focusNextPrevChild, doc_QTextBrowser_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_paintEvent, "QTextBrowser.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QTextBrowser_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        sipQTextBrowser *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextBrowser, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_paintEvent, doc_QTextBrowser_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_isBackwardAvailable, "QTextBrowser.isBackwardAvailable() -> bool");

extern "C" {static PyObject *meth_QTextBrowser_isBackwardAvailable(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_isBackwardAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isBackwardAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_isBackwardAvailable, doc_QTextBrowser_isBackwardAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_isForwardAvailable, "QTextBrowser.isForwardAvailable() -> bool");

extern "C" {static PyObject *meth_QTextBrowser_isForwardAvailable(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_isForwardAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isForwardAvailable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_isForwardAvailable, doc_QTextBrowser_isForwardAvailable);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_clearHistory, "QTextBrowser.clearHistory()");

extern "C" {static PyObject *meth_QTextBrowser_clearHistory(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_clearHistory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            sipCpp->clearHistory();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_clearHistory, doc_QTextBrowser_clearHistory);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_openExternalLinks, "QTextBrowser.openExternalLinks() -> bool");

extern "C" {static PyObject *meth_QTextBrowser_openExternalLinks(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_openExternalLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->openExternalLinks();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_openExternalLinks, doc_QTextBrowser_openExternalLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_setOpenExternalLinks, "QTextBrowser.setOpenExternalLinks(bool)");

extern "C" {static PyObject *meth_QTextBrowser_setOpenExternalLinks(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_setOpenExternalLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0))
        {
            sipCpp->setOpenExternalLinks(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_setOpenExternalLinks, doc_QTextBrowser_setOpenExternalLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_openLinks, "QTextBrowser.openLinks() -> bool");

extern "C" {static PyObject *meth_QTextBrowser_openLinks(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_openLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->openLinks();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_openLinks, doc_QTextBrowser_openLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_setOpenLinks, "QTextBrowser.setOpenLinks(bool)");

extern "C" {static PyObject *meth_QTextBrowser_setOpenLinks(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_setOpenLinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0))
        {
            sipCpp->setOpenLinks(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_setOpenLinks, doc_QTextBrowser_setOpenLinks);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_historyTitle, "QTextBrowser.historyTitle(int) -> str");

extern "C" {static PyObject *meth_QTextBrowser_historyTitle(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_historyTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->historyTitle(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_historyTitle, doc_QTextBrowser_historyTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_historyUrl, "QTextBrowser.historyUrl(int) -> QUrl");

extern "C" {static PyObject *meth_QTextBrowser_historyUrl(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_historyUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextBrowser, &sipCpp, &a0))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->historyUrl(a0));

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_historyUrl, doc_QTextBrowser_historyUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_backwardHistoryCount, "QTextBrowser.backwardHistoryCount() -> int");

extern "C" {static PyObject *meth_QTextBrowser_backwardHistoryCount(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_backwardHistoryCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->backwardHistoryCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_backwardHistoryCount, doc_QTextBrowser_backwardHistoryCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTextBrowser_forwardHistoryCount, "QTextBrowser.forwardHistoryCount() -> int");

extern "C" {static PyObject *meth_QTextBrowser_forwardHistoryCount(PyObject *, PyObject *);}
static PyObject *meth_QTextBrowser_forwardHistoryCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBrowser *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextBrowser, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->forwardHistoryCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextBrowser, sipName_forwardHistoryCount, doc_QTextBrowser_forwardHistoryCount);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextBrowser(void *, const sipTypeDef *);}
static void *cast_QTextBrowser(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextBrowser)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTextEdit)->ctd_cast((QTextEdit *)(QTextBrowser *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextBrowser(void *, int);}
static void release_QTextBrowser(void *sipCppV,int)
{
    QTextBrowser *sipCpp = reinterpret_cast<QTextBrowser *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTextBrowser(sipSimpleWrapper *);}
static void dealloc_QTextBrowser(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTextBrowser *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTextBrowser(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTextBrowser(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextBrowser(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTextBrowser *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQTextBrowser(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextBrowser[] = {{429, 255, 1}};


static PyMethodDef methods_QTextBrowser[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QTextBrowser_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_backward), meth_QTextBrowser_backward, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_backward)},
    {SIP_MLNAME_CAST(sipName_backwardHistoryCount), meth_QTextBrowser_backwardHistoryCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_backwardHistoryCount)},
    {SIP_MLNAME_CAST(sipName_canInsertFromMimeData), (PyCFunction)meth_QTextBrowser_canInsertFromMimeData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QTextBrowser_changeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QTextBrowser_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clearHistory), meth_QTextBrowser_clearHistory, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_clearHistory)},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QTextBrowser_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QTextBrowser_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QTextBrowser_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QTextBrowser_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createMimeDataFromSelection), (PyCFunction)meth_QTextBrowser_createMimeDataFromSelection, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QTextBrowser_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QTextBrowser_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QTextBrowser_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QTextBrowser_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QTextBrowser_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QTextBrowser_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawFrame), (PyCFunction)meth_QTextBrowser_drawFrame, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QTextBrowser_dropEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QTextBrowser_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QTextBrowser_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextBrowser_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), (PyCFunction)meth_QTextBrowser_eventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QTextBrowser_focusInEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QTextBrowser_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QTextBrowser_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextBrowser_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QTextBrowser_focusOutEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextBrowser_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QTextBrowser_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_forward), meth_QTextBrowser_forward, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_forward)},
    {SIP_MLNAME_CAST(sipName_forwardHistoryCount), meth_QTextBrowser_forwardHistoryCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_forwardHistoryCount)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QTextBrowser_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_historyTitle), meth_QTextBrowser_historyTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_historyTitle)},
    {SIP_MLNAME_CAST(sipName_historyUrl), meth_QTextBrowser_historyUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_historyUrl)},
    {SIP_MLNAME_CAST(sipName_home), meth_QTextBrowser_home, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_home)},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QTextBrowser_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QTextBrowser_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_insertFromMimeData), (PyCFunction)meth_QTextBrowser_insertFromMimeData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isBackwardAvailable), meth_QTextBrowser_isBackwardAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_isBackwardAvailable)},
    {SIP_MLNAME_CAST(sipName_isForwardAvailable), meth_QTextBrowser_isForwardAvailable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_isForwardAvailable)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QTextBrowser_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QTextBrowser_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextBrowser_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QTextBrowser_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QTextBrowser_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_loadResource), meth_QTextBrowser_loadResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_loadResource)},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QTextBrowser_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QTextBrowser_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QTextBrowser_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextBrowser_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QTextBrowser_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextBrowser_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QTextBrowser_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextBrowser_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QTextBrowser_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QTextBrowser_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_openExternalLinks), meth_QTextBrowser_openExternalLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_openExternalLinks)},
    {SIP_MLNAME_CAST(sipName_openLinks), meth_QTextBrowser_openLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_openLinks)},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QTextBrowser_paintEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextBrowser_paintEvent)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QTextBrowser_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_reload), meth_QTextBrowser_reload, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_reload)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QTextBrowser_resizeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), (PyCFunction)meth_QTextBrowser_scrollContentsBy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_searchPaths), meth_QTextBrowser_searchPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_searchPaths)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QTextBrowser_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QTextBrowser_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setOpenExternalLinks), meth_QTextBrowser_setOpenExternalLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_setOpenExternalLinks)},
    {SIP_MLNAME_CAST(sipName_setOpenLinks), meth_QTextBrowser_setOpenLinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_setOpenLinks)},
    {SIP_MLNAME_CAST(sipName_setSearchPaths), meth_QTextBrowser_setSearchPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_setSearchPaths)},
    {SIP_MLNAME_CAST(sipName_setSource), meth_QTextBrowser_setSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_setSource)},
    {SIP_MLNAME_CAST(sipName_setViewportMargins), (PyCFunction)meth_QTextBrowser_setViewportMargins, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QTextBrowser_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QTextBrowser_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_source), meth_QTextBrowser_source, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextBrowser_source)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QTextBrowser_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QTextBrowser_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QTextBrowser_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportEvent), (PyCFunction)meth_QTextBrowser_viewportEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QTextBrowser_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTextBrowser[] = {
    {"historyChanged()", "\1QTextBrowser.historyChanged", 0, 0},
    {"anchorClicked(QUrl)", "\1QTextBrowser.anchorClicked[QUrl]", 0, 0},
    {"highlighted(QUrl)", "\1QTextBrowser.highlighted[QUrl]", 0, 0},
    {"highlighted(QString)", "\1QTextBrowser.highlighted[str]", 0, 0},
    {"sourceChanged(QUrl)", "\1QTextBrowser.sourceChanged[QUrl]", 0, 0},
    {"forwardAvailable(bool)", "\1QTextBrowser.forwardAvailable[bool]", 0, 0},
    {"backwardAvailable(bool)", "\1QTextBrowser.backwardAvailable[bool]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QTextBrowser, "\1QTextBrowser(QWidget parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QTextBrowser = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTextBrowser,
        {0}
    },
    {
        sipNameNr_QTextBrowser,
        {0, 0, 1},
        74, methods_QTextBrowser,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextBrowser,
    -1,
    -1,
    supers_QTextBrowser,
    0,
    init_type_QTextBrowser,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextBrowser,
    0,
    0,
    0,
    release_QTextBrowser,
    cast_QTextBrowser,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTextBrowser::staticMetaObject,
    0,
    signals_QTextBrowser,
    0
};
