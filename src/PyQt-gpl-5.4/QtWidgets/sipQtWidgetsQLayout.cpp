/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:12 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"
#line 71 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"


class sipQLayout : public QLayout
{
public:
    sipQLayout(QWidget*);
    sipQLayout();
    virtual ~sipQLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtect_widgetEvent(QEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtect_addChildLayout(QLayout*);
    void sipProtect_addChildWidget(QWidget*);
    QRect sipProtect_alignmentRect(const QRect&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QSpacerItem* spacerItem();
    QWidget* widget();
    int minimumHeightForWidth(int) const;
    int heightForWidth(int) const;
    bool hasHeightForWidth() const;
    QSize sizeHint() const;
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QSizePolicy::ControlTypes controlTypes() const;
    void childEvent(QChildEvent*);
    QLayout* layout();
    bool isEmpty() const;
    int count() const;
    int indexOf(QWidget*) const;
    QLayoutItem* takeAt(int);
    QLayoutItem* itemAt(int) const;
    void setGeometry(const QRect&);
    QSize maximumSize() const;
    QSize minimumSize() const;
    Qt::Orientations expandingDirections() const;
    void addItem(QLayoutItem*);
    QRect geometry() const;
    void invalidate();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLayout(const sipQLayout &);
    sipQLayout &operator = (const sipQLayout &);

    char sipPyMethods[27];
};

sipQLayout::sipQLayout(QWidget*a0): QLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLayout::sipQLayout(): QLayout(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLayout::~sipQLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQLayout::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QLayout);
}

int sipQLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QLayout,_c,_id,_a);

    return _id;
}

void *sipQLayout::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QLayout, _clname, &sipCpp) ? sipCpp : QLayout::qt_metacast(_clname));
}

QSpacerItem* sipQLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_spacerItem);

    if (!sipMeth)
        return QLayout::spacerItem();

    extern QSpacerItem* sipVH_QtWidgets_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_94(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QWidget* sipQLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_widget);

    if (!sipMeth)
        return QLayout::widget();

    extern QWidget* sipVH_QtWidgets_79(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_79(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_minimumHeightForWidth);

    if (!sipMeth)
        return QLayout::minimumHeightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QLayout::heightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QLayout::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,sipName_QLayout,sipName_sizeHint);

    if (!sipMeth)
        return QSize();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQLayout::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QLayout::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLayout::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QLayout::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLayout::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QLayout::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLayout::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QLayout::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQLayout::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QLayout::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQLayout::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QLayout::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSizePolicy::ControlTypes sipQLayout::controlTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_controlTypes);

    if (!sipMeth)
        return QLayout::controlTypes();

    extern QSizePolicy::ControlTypes sipVH_QtWidgets_92(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_92(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQLayout::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QLayout::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QLayout* sipQLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_layout);

    if (!sipMeth)
        return QLayout::layout();

    extern QLayout* sipVH_QtWidgets_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_95(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_isEmpty);

    if (!sipMeth)
        return QLayout::isEmpty();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,sipName_QLayout,sipName_count);

    if (!sipMeth)
        return 0;

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQLayout::indexOf(QWidget*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_indexOf);

    if (!sipMeth)
        return QLayout::indexOf(a0);

    extern int sipVH_QtWidgets_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    return sipVH_QtWidgets_96(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QLayoutItem* sipQLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,sipName_QLayout,sipName_takeAt);

    if (!sipMeth)
        return 0;

    extern QLayoutItem* sipVH_QtWidgets_76(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_76(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QLayoutItem* sipQLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,sipName_QLayout,sipName_itemAt);

    if (!sipMeth)
        return 0;

    extern QLayoutItem* sipVH_QtWidgets_77(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtWidgets_77(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQLayout::setGeometry(const QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_setGeometry);

    if (!sipMeth)
    {
        QLayout::setGeometry(a0);
        return;
    }

    typedef void (*sipVH_QtGui_44)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&);

    ((sipVH_QtGui_44)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[44]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_maximumSize);

    if (!sipMeth)
        return QLayout::maximumSize();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_minimumSize);

    if (!sipMeth)
        return QLayout::minimumSize();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

Qt::Orientations sipQLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_expandingDirections);

    if (!sipMeth)
        return QLayout::expandingDirections();

    extern Qt::Orientations sipVH_QtWidgets_93(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_93(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQLayout::addItem(QLayoutItem*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,sipName_QLayout,sipName_addItem);

    if (!sipMeth)
        return;

    extern void sipVH_QtWidgets_78(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QLayoutItem*);

    sipVH_QtWidgets_78(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QRect sipQLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_geometry);

    if (!sipMeth)
        return QLayout::geometry();

    typedef QRect (*sipVH_QtGui_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_53)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[53]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_invalidate);

    if (!sipMeth)
    {
        QLayout::invalidate();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQLayout::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQLayout::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQLayout::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQLayout::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQLayout::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQLayout::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQLayout::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQLayout::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQLayout::sipProtect_widgetEvent(QEvent*a0)
{
    QLayout::widgetEvent(a0);
}

void sipQLayout::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QLayout::childEvent(a0) : childEvent(a0));
}

void sipQLayout::sipProtect_addChildLayout(QLayout*a0)
{
    QLayout::addChildLayout(a0);
}

void sipQLayout::sipProtect_addChildWidget(QWidget*a0)
{
    QLayout::addChildWidget(a0);
}

QRect sipQLayout::sipProtect_alignmentRect(const QRect& a0) const
{
    return QLayout::alignmentRect(a0);
}


PyDoc_STRVAR(doc_QLayout_sender, "QLayout.sender() -> QObject");

extern "C" {static PyObject *meth_QLayout_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 749 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_sender, doc_QLayout_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_receivers, "QLayout.receivers(signal) -> int");

extern "C" {static PyObject *meth_QLayout_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QLayout, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 808 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_receivers, doc_QLayout_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_timerEvent, "QLayout.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QLayout_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLayout, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_timerEvent, doc_QLayout_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_customEvent, "QLayout.customEvent(QEvent)");

extern "C" {static PyObject *meth_QLayout_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLayout, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_customEvent, doc_QLayout_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_connectNotify, "QLayout.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QLayout_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QLayout, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_connectNotify, doc_QLayout_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_disconnectNotify, "QLayout.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QLayout_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QLayout, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_disconnectNotify, doc_QLayout_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_senderSignalIndex, "QLayout.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QLayout_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_senderSignalIndex, doc_QLayout_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_isSignalConnected, "QLayout.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QLayout_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QLayout, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_isSignalConnected, doc_QLayout_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_spacing, "QLayout.spacing() -> int");

extern "C" {static PyObject *meth_QLayout_spacing(PyObject *, PyObject *);}
static PyObject *meth_QLayout_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->spacing();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_spacing, doc_QLayout_spacing);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setSpacing, "QLayout.setSpacing(int)");

extern "C" {static PyObject *meth_QLayout_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLayout, &sipCpp, &a0))
        {
            sipCpp->setSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setSpacing, doc_QLayout_setSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setAlignment, "QLayout.setAlignment(QWidget, Qt.Alignment) -> bool\n"
    "QLayout.setAlignment(QLayout, Qt.Alignment) -> bool\n"
    "QLayout.setAlignment(Qt.Alignment)");

extern "C" {static PyObject *meth_QLayout_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        Qt::Alignment* a1;
        int a1State = 0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_QLayout, &sipCpp, sipType_QWidget, &a0, sipType_Qt_Alignment, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->setAlignment(a0,*a1);
            sipReleaseType(a1,sipType_Qt_Alignment,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QLayout* a0;
        Qt::Alignment* a1;
        int a1State = 0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_QLayout, &sipCpp, sipType_QLayout, &a0, sipType_Qt_Alignment, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->setAlignment(a0,*a1);
            sipReleaseType(a1,sipType_Qt_Alignment,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        Qt::Alignment* a0;
        int a0State = 0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QLayout, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setAlignment, doc_QLayout_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setSizeConstraint, "QLayout.setSizeConstraint(QLayout.SizeConstraint)");

extern "C" {static PyObject *meth_QLayout_setSizeConstraint(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setSizeConstraint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLayout::SizeConstraint a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QLayout, &sipCpp, sipType_QLayout_SizeConstraint, &a0))
        {
            sipCpp->setSizeConstraint(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setSizeConstraint, doc_QLayout_setSizeConstraint);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_sizeConstraint, "QLayout.sizeConstraint() -> QLayout.SizeConstraint");

extern "C" {static PyObject *meth_QLayout_sizeConstraint(PyObject *, PyObject *);}
static PyObject *meth_QLayout_sizeConstraint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QLayout::SizeConstraint sipRes;

            sipRes = sipCpp->sizeConstraint();

            return sipConvertFromEnum(sipRes,sipType_QLayout_SizeConstraint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_sizeConstraint, doc_QLayout_sizeConstraint);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setMenuBar, "QLayout.setMenuBar(QWidget)");

extern "C" {static PyObject *meth_QLayout_setMenuBar(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setMenuBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        PyObject *a0Wrapper;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLayout, &sipCpp, &a0Wrapper, sipType_QWidget, &a0))
        {
#line 52 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setMenuBar(a0);
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (a0 && parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
        
            if (py_parent)
                sipTransferTo(a0Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows setMenuBar(QWidget()).
            sipTransferTo(a0Wrapper, sipSelf);
        }
#line 1204 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setMenuBar, doc_QLayout_setMenuBar);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_menuBar, "QLayout.menuBar() -> QWidget");

extern "C" {static PyObject *meth_QLayout_menuBar(PyObject *, PyObject *);}
static PyObject *meth_QLayout_menuBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->menuBar();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_menuBar, doc_QLayout_menuBar);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_parentWidget, "QLayout.parentWidget() -> QWidget");

extern "C" {static PyObject *meth_QLayout_parentWidget(PyObject *, PyObject *);}
static PyObject *meth_QLayout_parentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->parentWidget();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_parentWidget, doc_QLayout_parentWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_invalidate, "QLayout.invalidate()");

extern "C" {static PyObject *meth_QLayout_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QLayout_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QLayout::invalidate() : sipCpp->invalidate());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_invalidate, doc_QLayout_invalidate);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_geometry, "QLayout.geometry() -> QRect");

extern "C" {static PyObject *meth_QLayout_geometry(PyObject *, PyObject *);}
static PyObject *meth_QLayout_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect((sipSelfWasArg ? sipCpp->QLayout::geometry() : sipCpp->geometry()));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_geometry, doc_QLayout_geometry);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_activate, "QLayout.activate() -> bool");

extern "C" {static PyObject *meth_QLayout_activate(PyObject *, PyObject *);}
static PyObject *meth_QLayout_activate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->activate();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_activate, doc_QLayout_activate);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_update, "QLayout.update()");

extern "C" {static PyObject *meth_QLayout_update(PyObject *, PyObject *);}
static PyObject *meth_QLayout_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            sipCpp->update();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_update, doc_QLayout_update);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_addWidget, "QLayout.addWidget(QWidget)");

extern "C" {static PyObject *meth_QLayout_addWidget(PyObject *, PyObject *);}
static PyObject *meth_QLayout_addWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        PyObject *a0Wrapper;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QLayout, &sipCpp, &a0Wrapper, sipType_QWidget, &a0))
        {
#line 82 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->addWidget(a0);
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
        
            if (py_parent)
                sipTransferTo(a0Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows addWidget(QWidget()).
            sipTransferTo(a0Wrapper, sipSelf);
        }
#line 1415 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_addWidget, doc_QLayout_addWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_addItem, "QLayout.addItem(QLayoutItem)");

extern "C" {static PyObject *meth_QLayout_addItem(PyObject *, PyObject *);}
static PyObject *meth_QLayout_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QLayoutItem* a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QLayout, &sipCpp, sipType_QLayoutItem, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QLayout, sipName_addItem);
                return NULL;
            }

            sipCpp->addItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_addItem, doc_QLayout_addItem);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_removeWidget, "QLayout.removeWidget(QWidget)");

extern "C" {static PyObject *meth_QLayout_removeWidget(PyObject *, PyObject *);}
static PyObject *meth_QLayout_removeWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QLayout, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->removeWidget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_removeWidget, doc_QLayout_removeWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_removeItem, "QLayout.removeItem(QLayoutItem)");

extern "C" {static PyObject *meth_QLayout_removeItem(PyObject *, PyObject *);}
static PyObject *meth_QLayout_removeItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QLayoutItem* a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ<", &sipSelf, sipType_QLayout, &sipCpp, sipType_QLayoutItem, &a0))
        {
            sipCpp->removeItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_removeItem, doc_QLayout_removeItem);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_expandingDirections, "QLayout.expandingDirections() -> Qt.Orientations");

extern "C" {static PyObject *meth_QLayout_expandingDirections(PyObject *, PyObject *);}
static PyObject *meth_QLayout_expandingDirections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            Qt::Orientations*sipRes;

            sipRes = new Qt::Orientations((sipSelfWasArg ? sipCpp->QLayout::expandingDirections() : sipCpp->expandingDirections()));

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_expandingDirections, doc_QLayout_expandingDirections);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_minimumSize, "QLayout.minimumSize() -> QSize");

extern "C" {static PyObject *meth_QLayout_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QLayout::minimumSize() : sipCpp->minimumSize()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_minimumSize, doc_QLayout_minimumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_maximumSize, "QLayout.maximumSize() -> QSize");

extern "C" {static PyObject *meth_QLayout_maximumSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_maximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QLayout::maximumSize() : sipCpp->maximumSize()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_maximumSize, doc_QLayout_maximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setGeometry, "QLayout.setGeometry(QRect)");

extern "C" {static PyObject *meth_QLayout_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLayout, &sipCpp, sipType_QRect, &a0))
        {
            (sipSelfWasArg ? sipCpp->QLayout::setGeometry(*a0) : sipCpp->setGeometry(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setGeometry, doc_QLayout_setGeometry);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_itemAt, "QLayout.itemAt(int) -> QLayoutItem");

extern "C" {static PyObject *meth_QLayout_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QLayout_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLayout, &sipCpp, &a0))
        {
            QLayoutItem*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QLayout, sipName_itemAt);
                return NULL;
            }

            sipRes = sipCpp->itemAt(a0);

            return sipConvertFromType(sipRes,sipType_QLayoutItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_itemAt, doc_QLayout_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_takeAt, "QLayout.takeAt(int) -> QLayoutItem");

extern "C" {static PyObject *meth_QLayout_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QLayout_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLayout, &sipCpp, &a0))
        {
            QLayoutItem*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QLayout, sipName_takeAt);
                return NULL;
            }

            sipRes = sipCpp->takeAt(a0);

            return sipConvertFromType(sipRes,sipType_QLayoutItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_takeAt, doc_QLayout_takeAt);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_indexOf, "QLayout.indexOf(QWidget) -> int");

extern "C" {static PyObject *meth_QLayout_indexOf(PyObject *, PyObject *);}
static PyObject *meth_QLayout_indexOf(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QLayout, &sipCpp, sipType_QWidget, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QLayout::indexOf(a0) : sipCpp->indexOf(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_indexOf, doc_QLayout_indexOf);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_count, "QLayout.count() -> int");

extern "C" {static PyObject *meth_QLayout_count(PyObject *, PyObject *);}
static PyObject *meth_QLayout_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QLayout, sipName_count);
                return NULL;
            }

            sipRes = sipCpp->count();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_count, doc_QLayout_count);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_isEmpty, "QLayout.isEmpty() -> bool");

extern "C" {static PyObject *meth_QLayout_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QLayout_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QLayout::isEmpty() : sipCpp->isEmpty());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_isEmpty, doc_QLayout_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_totalHeightForWidth, "QLayout.totalHeightForWidth(int) -> int");

extern "C" {static PyObject *meth_QLayout_totalHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QLayout_totalHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QLayout, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->totalHeightForWidth(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_totalHeightForWidth, doc_QLayout_totalHeightForWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_totalMinimumSize, "QLayout.totalMinimumSize() -> QSize");

extern "C" {static PyObject *meth_QLayout_totalMinimumSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_totalMinimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->totalMinimumSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_totalMinimumSize, doc_QLayout_totalMinimumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_totalMaximumSize, "QLayout.totalMaximumSize() -> QSize");

extern "C" {static PyObject *meth_QLayout_totalMaximumSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_totalMaximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->totalMaximumSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_totalMaximumSize, doc_QLayout_totalMaximumSize);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_totalSizeHint, "QLayout.totalSizeHint() -> QSize");

extern "C" {static PyObject *meth_QLayout_totalSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLayout_totalSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->totalSizeHint());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_totalSizeHint, doc_QLayout_totalSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_layout, "QLayout.layout() -> QLayout");

extern "C" {static PyObject *meth_QLayout_layout(PyObject *, PyObject *);}
static PyObject *meth_QLayout_layout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QLayout*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QLayout::layout() : sipCpp->layout());

            return sipConvertFromType(sipRes,sipType_QLayout,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_layout, doc_QLayout_layout);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setEnabled, "QLayout.setEnabled(bool)");

extern "C" {static PyObject *meth_QLayout_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QLayout, &sipCpp, &a0))
        {
            sipCpp->setEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setEnabled, doc_QLayout_setEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_isEnabled, "QLayout.isEnabled() -> bool");

extern "C" {static PyObject *meth_QLayout_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLayout_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_isEnabled, doc_QLayout_isEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_closestAcceptableSize, "QLayout.closestAcceptableSize(QWidget, QSize) -> QSize");

extern "C" {static PyObject *meth_QLayout_closestAcceptableSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_closestAcceptableSize(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWidget* a0;
        const QSize* a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8J9", sipType_QWidget, &a0, sipType_QSize, &a1))
        {
            QSize*sipRes;

            sipRes = new QSize(QLayout::closestAcceptableSize(a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_closestAcceptableSize, doc_QLayout_closestAcceptableSize);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_widgetEvent, "QLayout.widgetEvent(QEvent)");

extern "C" {static PyObject *meth_QLayout_widgetEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_widgetEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QEvent* a0;
        sipQLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLayout, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtect_widgetEvent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_widgetEvent, doc_QLayout_widgetEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_childEvent, "QLayout.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QLayout_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QLayout, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_childEvent, doc_QLayout_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_addChildLayout, "QLayout.addChildLayout(QLayout)");

extern "C" {static PyObject *meth_QLayout_addChildLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_addChildLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QLayout* a0;
        sipQLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ:", &sipSelf, sipType_QLayout, &sipCpp, sipType_QLayout, &a0))
        {
            sipCpp->sipProtect_addChildLayout(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_addChildLayout, doc_QLayout_addChildLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_addChildWidget, "QLayout.addChildWidget(QWidget)");

extern "C" {static PyObject *meth_QLayout_addChildWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_addChildWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        PyObject *a0Wrapper;
        sipQLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B@J8", &sipSelf, sipType_QLayout, &sipCpp, &a0Wrapper, sipType_QWidget, &a0))
        {
#line 131 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
        Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipCpp->addChildWidget(a0);
        #else
        sipCpp->sipProtect_addChildWidget(a0);
        #endif
        Py_END_ALLOW_THREADS
        
        // The layout's parent widget (if there is one) will now have ownership.
        QWidget *parent = sipCpp->parentWidget();
        
        if (parent)
        {
            PyObject *py_parent = sipGetPyObject(parent, sipType_QWidget);
        
            if (py_parent)
                sipTransferTo(a0Wrapper, py_parent);
        }
        else
        {
            // For now give the Python ownership to the layout.  This maintains
            // compatibility with previous versions and allows
            // addChildWidget(QWidget()).
            sipTransferTo(a0Wrapper, sipSelf);
        }
#line 2131 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_addChildWidget, doc_QLayout_addChildWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_alignmentRect, "QLayout.alignmentRect(QRect) -> QRect");

extern "C" {static PyObject *meth_QLayout_alignmentRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_alignmentRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        const sipQLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QLayout, &sipCpp, sipType_QRect, &a0))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->sipProtect_alignmentRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_alignmentRect, doc_QLayout_alignmentRect);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_setContentsMargins, "QLayout.setContentsMargins(int, int, int, int)\n"
    "QLayout.setContentsMargins(QMargins)");

extern "C" {static PyObject *meth_QLayout_setContentsMargins(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setContentsMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QLayout, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setContentsMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QMargins* a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QLayout, &sipCpp, sipType_QMargins, &a0))
        {
            sipCpp->setContentsMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_setContentsMargins, doc_QLayout_setContentsMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_getContentsMargins, "QLayout.getContentsMargins() -> (int, int, int, int)");

extern "C" {static PyObject *meth_QLayout_getContentsMargins(PyObject *, PyObject *);}
static PyObject *meth_QLayout_getContentsMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            sipCpp->getContentsMargins(&a0,&a1,&a2,&a3);

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_getContentsMargins, doc_QLayout_getContentsMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_contentsRect, "QLayout.contentsRect() -> QRect");

extern "C" {static PyObject *meth_QLayout_contentsRect(PyObject *, PyObject *);}
static PyObject *meth_QLayout_contentsRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->contentsRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_contentsRect, doc_QLayout_contentsRect);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_contentsMargins, "QLayout.contentsMargins() -> QMargins");

extern "C" {static PyObject *meth_QLayout_contentsMargins(PyObject *, PyObject *);}
static PyObject *meth_QLayout_contentsMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QMargins*sipRes;

            sipRes = new QMargins(sipCpp->contentsMargins());

            return sipConvertFromNewType(sipRes,sipType_QMargins,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_contentsMargins, doc_QLayout_contentsMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_controlTypes, "QLayout.controlTypes() -> QSizePolicy.ControlTypes");

extern "C" {static PyObject *meth_QLayout_controlTypes(PyObject *, PyObject *);}
static PyObject *meth_QLayout_controlTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QLayout, &sipCpp))
        {
            QSizePolicy::ControlTypes*sipRes;

            sipRes = new QSizePolicy::ControlTypes((sipSelfWasArg ? sipCpp->QLayout::controlTypes() : sipCpp->controlTypes()));

            return sipConvertFromNewType(sipRes,sipType_QSizePolicy_ControlTypes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_controlTypes, doc_QLayout_controlTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QLayout_replaceWidget, "QLayout.replaceWidget(QWidget, QWidget, Qt.FindChildOptions options=Qt.FindChildrenRecursively) -> QLayoutItem");

extern "C" {static PyObject *meth_QLayout_replaceWidget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QLayout_replaceWidget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QWidget* a1;
        Qt::FindChildOptions a2def = Qt::FindChildrenRecursively;
        Qt::FindChildOptions* a2 = &a2def;
        int a2State = 0;
        QLayout *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J:|J1", &sipSelf, sipType_QLayout, &sipCpp, sipType_QWidget, &a0, sipType_QWidget, &a1, sipType_Qt_FindChildOptions, &a2, &a2State))
        {
            QLayoutItem*sipRes;

            sipRes = sipCpp->replaceWidget(a0,a1,*a2);
            sipReleaseType(a2,sipType_Qt_FindChildOptions,a2State);

            return sipConvertFromType(sipRes,sipType_QLayoutItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QLayout, sipName_replaceWidget, doc_QLayout_replaceWidget);

    return NULL;
}


extern "C" {static SIP_SSIZE_T slot_QLayout___len__(PyObject *);}
static SIP_SSIZE_T slot_QLayout___len__(PyObject *sipSelf)
{
    QLayout *sipCpp = reinterpret_cast<QLayout *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLayout));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

#line 1 "Auto-generated"
            sipRes = (SIP_SSIZE_T)sipCpp->count();
#line 2382 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQLayout.cpp"

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QLayout(void *, const sipTypeDef *);}
static void *cast_QLayout(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QLayout)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QLayout *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QLayoutItem)->ctd_cast((QLayoutItem *)(QLayout *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLayout(void *, int);}
static void release_QLayout(void *sipCppV,int)
{
    QLayout *sipCpp = reinterpret_cast<QLayout *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QLayout(sipSimpleWrapper *);}
static void dealloc_QLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQLayout *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QLayout(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQLayout *sipCpp = 0;

    {
        QWidget* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQLayout(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQLayout();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLayout[] = {{162, 0, 0}, {188, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QLayout[] = {
    {(void *)slot_QLayout___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLayout[] = {
    {SIP_MLNAME_CAST(sipName_activate), meth_QLayout_activate, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_activate)},
    {SIP_MLNAME_CAST(sipName_addChildLayout), (PyCFunction)meth_QLayout_addChildLayout, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLayout_addChildLayout)},
    {SIP_MLNAME_CAST(sipName_addChildWidget), (PyCFunction)meth_QLayout_addChildWidget, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLayout_addChildWidget)},
    {SIP_MLNAME_CAST(sipName_addItem), meth_QLayout_addItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_addItem)},
    {SIP_MLNAME_CAST(sipName_addWidget), meth_QLayout_addWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_addWidget)},
    {SIP_MLNAME_CAST(sipName_alignmentRect), (PyCFunction)meth_QLayout_alignmentRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLayout_alignmentRect)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QLayout_childEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLayout_childEvent)},
    {SIP_MLNAME_CAST(sipName_closestAcceptableSize), meth_QLayout_closestAcceptableSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_closestAcceptableSize)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QLayout_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contentsMargins), meth_QLayout_contentsMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_contentsMargins)},
    {SIP_MLNAME_CAST(sipName_contentsRect), meth_QLayout_contentsRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_contentsRect)},
    {SIP_MLNAME_CAST(sipName_controlTypes), meth_QLayout_controlTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_controlTypes)},
    {SIP_MLNAME_CAST(sipName_count), meth_QLayout_count, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_count)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QLayout_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QLayout_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_expandingDirections), meth_QLayout_expandingDirections, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_expandingDirections)},
    {SIP_MLNAME_CAST(sipName_geometry), meth_QLayout_geometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_geometry)},
    {SIP_MLNAME_CAST(sipName_getContentsMargins), meth_QLayout_getContentsMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_getContentsMargins)},
    {SIP_MLNAME_CAST(sipName_indexOf), meth_QLayout_indexOf, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_indexOf)},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QLayout_invalidate, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_invalidate)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QLayout_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QLayout_isEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_isEnabled)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QLayout_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QLayout_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_itemAt)},
    {SIP_MLNAME_CAST(sipName_layout), meth_QLayout_layout, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_layout)},
    {SIP_MLNAME_CAST(sipName_maximumSize), meth_QLayout_maximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_maximumSize)},
    {SIP_MLNAME_CAST(sipName_menuBar), meth_QLayout_menuBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_menuBar)},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QLayout_minimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_minimumSize)},
    {SIP_MLNAME_CAST(sipName_parentWidget), meth_QLayout_parentWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_parentWidget)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QLayout_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removeItem), meth_QLayout_removeItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_removeItem)},
    {SIP_MLNAME_CAST(sipName_removeWidget), meth_QLayout_removeWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_removeWidget)},
    {SIP_MLNAME_CAST(sipName_replaceWidget), (PyCFunction)meth_QLayout_replaceWidget, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLayout_replaceWidget)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QLayout_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QLayout_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QLayout_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setContentsMargins), meth_QLayout_setContentsMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setContentsMargins)},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QLayout_setEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setEnabled)},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QLayout_setGeometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setGeometry)},
    {SIP_MLNAME_CAST(sipName_setMenuBar), meth_QLayout_setMenuBar, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setMenuBar)},
    {SIP_MLNAME_CAST(sipName_setSizeConstraint), meth_QLayout_setSizeConstraint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setSizeConstraint)},
    {SIP_MLNAME_CAST(sipName_setSpacing), meth_QLayout_setSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_setSpacing)},
    {SIP_MLNAME_CAST(sipName_sizeConstraint), meth_QLayout_sizeConstraint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_sizeConstraint)},
    {SIP_MLNAME_CAST(sipName_spacing), meth_QLayout_spacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_spacing)},
    {SIP_MLNAME_CAST(sipName_takeAt), meth_QLayout_takeAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_takeAt)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QLayout_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_totalHeightForWidth), meth_QLayout_totalHeightForWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_totalHeightForWidth)},
    {SIP_MLNAME_CAST(sipName_totalMaximumSize), meth_QLayout_totalMaximumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_totalMaximumSize)},
    {SIP_MLNAME_CAST(sipName_totalMinimumSize), meth_QLayout_totalMinimumSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_totalMinimumSize)},
    {SIP_MLNAME_CAST(sipName_totalSizeHint), meth_QLayout_totalSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_totalSizeHint)},
    {SIP_MLNAME_CAST(sipName_update), meth_QLayout_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QLayout_update)},
    {SIP_MLNAME_CAST(sipName_widgetEvent), (PyCFunction)meth_QLayout_widgetEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QLayout_widgetEvent)}
};

static sipEnumMemberDef enummembers_QLayout[] = {
    {sipName_SetDefaultConstraint, static_cast<int>(QLayout::SetDefaultConstraint), 187},
    {sipName_SetFixedSize, static_cast<int>(QLayout::SetFixedSize), 187},
    {sipName_SetMaximumSize, static_cast<int>(QLayout::SetMaximumSize), 187},
    {sipName_SetMinAndMaxSize, static_cast<int>(QLayout::SetMinAndMaxSize), 187},
    {sipName_SetMinimumSize, static_cast<int>(QLayout::SetMinimumSize), 187},
    {sipName_SetNoConstraint, static_cast<int>(QLayout::SetNoConstraint), 187},
};

PyDoc_STRVAR(doc_QLayout, "\1QLayout(QWidget)\n"
    "QLayout()");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QLayout,
        {0}
    },
    {
        sipNameNr_QLayout,
        {0, 0, 1},
        52, methods_QLayout,
        6, enummembers_QLayout,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QLayout,
    -1,
    -1,
    supers_QLayout,
    slots_QLayout,
    init_type_QLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLayout,
    0,
    0,
    0,
    release_QLayout,
    cast_QLayout,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QLayout::staticMetaObject,
    0,
    0,
    0
};
