/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:11 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 140 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsSceneContextMenuEvent.cpp"

#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsSceneContextMenuEvent.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsSceneContextMenuEvent.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsSceneContextMenuEvent.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsSceneContextMenuEvent.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsSceneContextMenuEvent.cpp"


PyDoc_STRVAR(doc_QGraphicsSceneContextMenuEvent_pos, "QGraphicsSceneContextMenuEvent.pos() -> QPointF");

extern "C" {static PyObject *meth_QGraphicsSceneContextMenuEvent_pos(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsSceneContextMenuEvent_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsSceneContextMenuEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsSceneContextMenuEvent, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->pos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsSceneContextMenuEvent, sipName_pos, doc_QGraphicsSceneContextMenuEvent_pos);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsSceneContextMenuEvent_scenePos, "QGraphicsSceneContextMenuEvent.scenePos() -> QPointF");

extern "C" {static PyObject *meth_QGraphicsSceneContextMenuEvent_scenePos(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsSceneContextMenuEvent_scenePos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsSceneContextMenuEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsSceneContextMenuEvent, &sipCpp))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->scenePos());

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsSceneContextMenuEvent, sipName_scenePos, doc_QGraphicsSceneContextMenuEvent_scenePos);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsSceneContextMenuEvent_screenPos, "QGraphicsSceneContextMenuEvent.screenPos() -> QPoint");

extern "C" {static PyObject *meth_QGraphicsSceneContextMenuEvent_screenPos(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsSceneContextMenuEvent_screenPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsSceneContextMenuEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsSceneContextMenuEvent, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->screenPos());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsSceneContextMenuEvent, sipName_screenPos, doc_QGraphicsSceneContextMenuEvent_screenPos);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsSceneContextMenuEvent_modifiers, "QGraphicsSceneContextMenuEvent.modifiers() -> Qt.KeyboardModifiers");

extern "C" {static PyObject *meth_QGraphicsSceneContextMenuEvent_modifiers(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsSceneContextMenuEvent_modifiers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsSceneContextMenuEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsSceneContextMenuEvent, &sipCpp))
        {
            Qt::KeyboardModifiers*sipRes;

            sipRes = new Qt::KeyboardModifiers(sipCpp->modifiers());

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsSceneContextMenuEvent, sipName_modifiers, doc_QGraphicsSceneContextMenuEvent_modifiers);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsSceneContextMenuEvent_reason, "QGraphicsSceneContextMenuEvent.reason() -> QGraphicsSceneContextMenuEvent.Reason");

extern "C" {static PyObject *meth_QGraphicsSceneContextMenuEvent_reason(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsSceneContextMenuEvent_reason(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsSceneContextMenuEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsSceneContextMenuEvent, &sipCpp))
        {
            QGraphicsSceneContextMenuEvent::Reason sipRes;

            sipRes = sipCpp->reason();

            return sipConvertFromEnum(sipRes,sipType_QGraphicsSceneContextMenuEvent_Reason);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsSceneContextMenuEvent, sipName_reason, doc_QGraphicsSceneContextMenuEvent_reason);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGraphicsSceneContextMenuEvent(void *, const sipTypeDef *);}
static void *cast_QGraphicsSceneContextMenuEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGraphicsSceneContextMenuEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QGraphicsSceneEvent)->ctd_cast((QGraphicsSceneEvent *)(QGraphicsSceneContextMenuEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsSceneContextMenuEvent(void *, int);}
static void release_QGraphicsSceneContextMenuEvent(void *sipCppV,int)
{
    delete reinterpret_cast<QGraphicsSceneContextMenuEvent *>(sipCppV);
}


extern "C" {static void dealloc_QGraphicsSceneContextMenuEvent(sipSimpleWrapper *);}
static void dealloc_QGraphicsSceneContextMenuEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsSceneContextMenuEvent(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsSceneContextMenuEvent[] = {{149, 255, 1}};


static PyMethodDef methods_QGraphicsSceneContextMenuEvent[] = {
    {SIP_MLNAME_CAST(sipName_modifiers), meth_QGraphicsSceneContextMenuEvent_modifiers, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsSceneContextMenuEvent_modifiers)},
    {SIP_MLNAME_CAST(sipName_pos), meth_QGraphicsSceneContextMenuEvent_pos, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsSceneContextMenuEvent_pos)},
    {SIP_MLNAME_CAST(sipName_reason), meth_QGraphicsSceneContextMenuEvent_reason, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsSceneContextMenuEvent_reason)},
    {SIP_MLNAME_CAST(sipName_scenePos), meth_QGraphicsSceneContextMenuEvent_scenePos, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsSceneContextMenuEvent_scenePos)},
    {SIP_MLNAME_CAST(sipName_screenPos), meth_QGraphicsSceneContextMenuEvent_screenPos, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsSceneContextMenuEvent_screenPos)}
};

static sipEnumMemberDef enummembers_QGraphicsSceneContextMenuEvent[] = {
    {sipName_Keyboard, static_cast<int>(QGraphicsSceneContextMenuEvent::Keyboard), 147},
    {sipName_Mouse, static_cast<int>(QGraphicsSceneContextMenuEvent::Mouse), 147},
    {sipName_Other, static_cast<int>(QGraphicsSceneContextMenuEvent::Other), 147},
};


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QGraphicsSceneContextMenuEvent = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsSceneContextMenuEvent,
        {0}
    },
    {
        sipNameNr_QGraphicsSceneContextMenuEvent,
        {0, 0, 1},
        5, methods_QGraphicsSceneContextMenuEvent,
        3, enummembers_QGraphicsSceneContextMenuEvent,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QGraphicsSceneContextMenuEvent,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsSceneContextMenuEvent,
    0,
    0,
    0,
    release_QGraphicsSceneContextMenuEvent,
    cast_QGraphicsSceneContextMenuEvent,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
