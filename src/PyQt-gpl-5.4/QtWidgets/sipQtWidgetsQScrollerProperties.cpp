/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:11 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qscrollerproperties.sip"
#include <qscrollerproperties.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQScrollerProperties.cpp"

#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQScrollerProperties.cpp"


class sipQScrollerProperties : public QScrollerProperties
{
public:
    sipQScrollerProperties();
    sipQScrollerProperties(const QScrollerProperties&);
    ~sipQScrollerProperties();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQScrollerProperties(const sipQScrollerProperties &);
    sipQScrollerProperties &operator = (const sipQScrollerProperties &);
};

sipQScrollerProperties::sipQScrollerProperties(): QScrollerProperties(), sipPySelf(0)
{
}

sipQScrollerProperties::sipQScrollerProperties(const QScrollerProperties& a0): QScrollerProperties(a0), sipPySelf(0)
{
}

sipQScrollerProperties::~sipQScrollerProperties()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_QScrollerProperties_setDefaultScrollerProperties, "QScrollerProperties.setDefaultScrollerProperties(QScrollerProperties)");

extern "C" {static PyObject *meth_QScrollerProperties_setDefaultScrollerProperties(PyObject *, PyObject *);}
static PyObject *meth_QScrollerProperties_setDefaultScrollerProperties(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QScrollerProperties* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QScrollerProperties, &a0))
        {
            QScrollerProperties::setDefaultScrollerProperties(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollerProperties, sipName_setDefaultScrollerProperties, doc_QScrollerProperties_setDefaultScrollerProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QScrollerProperties_unsetDefaultScrollerProperties, "QScrollerProperties.unsetDefaultScrollerProperties()");

extern "C" {static PyObject *meth_QScrollerProperties_unsetDefaultScrollerProperties(PyObject *, PyObject *);}
static PyObject *meth_QScrollerProperties_unsetDefaultScrollerProperties(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QScrollerProperties::unsetDefaultScrollerProperties();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollerProperties, sipName_unsetDefaultScrollerProperties, doc_QScrollerProperties_unsetDefaultScrollerProperties);

    return NULL;
}


PyDoc_STRVAR(doc_QScrollerProperties_scrollMetric, "QScrollerProperties.scrollMetric(QScrollerProperties.ScrollMetric) -> QVariant");

extern "C" {static PyObject *meth_QScrollerProperties_scrollMetric(PyObject *, PyObject *);}
static PyObject *meth_QScrollerProperties_scrollMetric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScrollerProperties::ScrollMetric a0;
        const QScrollerProperties *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QScrollerProperties, &sipCpp, sipType_QScrollerProperties_ScrollMetric, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->scrollMetric(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollerProperties, sipName_scrollMetric, doc_QScrollerProperties_scrollMetric);

    return NULL;
}


PyDoc_STRVAR(doc_QScrollerProperties_setScrollMetric, "QScrollerProperties.setScrollMetric(QScrollerProperties.ScrollMetric, QVariant)");

extern "C" {static PyObject *meth_QScrollerProperties_setScrollMetric(PyObject *, PyObject *);}
static PyObject *meth_QScrollerProperties_setScrollMetric(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QScrollerProperties::ScrollMetric a0;
        const QVariant* a1;
        int a1State = 0;
        QScrollerProperties *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QScrollerProperties, &sipCpp, sipType_QScrollerProperties_ScrollMetric, &a0, sipType_QVariant, &a1, &a1State))
        {
            sipCpp->setScrollMetric(a0,*a1);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QScrollerProperties, sipName_setScrollMetric, doc_QScrollerProperties_setScrollMetric);

    return NULL;
}


extern "C" {static PyObject *slot_QScrollerProperties___ne__(PyObject *,PyObject *);}
static PyObject *slot_QScrollerProperties___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QScrollerProperties *sipCpp = reinterpret_cast<QScrollerProperties *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QScrollerProperties));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QScrollerProperties* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QScrollerProperties, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QScrollerProperties::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWidgets,ne_slot,sipType_QScrollerProperties,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QScrollerProperties___eq__(PyObject *,PyObject *);}
static PyObject *slot_QScrollerProperties___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QScrollerProperties *sipCpp = reinterpret_cast<QScrollerProperties *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QScrollerProperties));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QScrollerProperties* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QScrollerProperties, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QScrollerProperties::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWidgets,eq_slot,sipType_QScrollerProperties,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QScrollerProperties(void *, const sipTypeDef *);}
static void *cast_QScrollerProperties(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QScrollerProperties)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QScrollerProperties(void *, int);}
static void release_QScrollerProperties(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQScrollerProperties *>(sipCppV);
    else
        delete reinterpret_cast<QScrollerProperties *>(sipCppV);
}


extern "C" {static void assign_QScrollerProperties(void *, SIP_SSIZE_T, const void *);}
static void assign_QScrollerProperties(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QScrollerProperties *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QScrollerProperties *>(sipSrc);
}


extern "C" {static void *array_QScrollerProperties(SIP_SSIZE_T);}
static void *array_QScrollerProperties(SIP_SSIZE_T sipNrElem)
{
    return new QScrollerProperties[sipNrElem];
}


extern "C" {static void *copy_QScrollerProperties(const void *, SIP_SSIZE_T);}
static void *copy_QScrollerProperties(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QScrollerProperties(reinterpret_cast<const QScrollerProperties *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QScrollerProperties(sipSimpleWrapper *);}
static void dealloc_QScrollerProperties(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQScrollerProperties *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QScrollerProperties(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QScrollerProperties(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QScrollerProperties(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQScrollerProperties *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQScrollerProperties();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QScrollerProperties* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QScrollerProperties, &a0))
        {
            sipCpp = new sipQScrollerProperties(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QScrollerProperties[] = {
    {(void *)slot_QScrollerProperties___ne__, ne_slot},
    {(void *)slot_QScrollerProperties___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QScrollerProperties[] = {
    {SIP_MLNAME_CAST(sipName_scrollMetric), meth_QScrollerProperties_scrollMetric, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollerProperties_scrollMetric)},
    {SIP_MLNAME_CAST(sipName_setDefaultScrollerProperties), meth_QScrollerProperties_setDefaultScrollerProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollerProperties_setDefaultScrollerProperties)},
    {SIP_MLNAME_CAST(sipName_setScrollMetric), meth_QScrollerProperties_setScrollMetric, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollerProperties_setScrollMetric)},
    {SIP_MLNAME_CAST(sipName_unsetDefaultScrollerProperties), meth_QScrollerProperties_unsetDefaultScrollerProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_QScrollerProperties_unsetDefaultScrollerProperties)}
};

static sipEnumMemberDef enummembers_QScrollerProperties[] = {
    {sipName_AcceleratingFlickMaximumTime, static_cast<int>(QScrollerProperties::AcceleratingFlickMaximumTime), 264},
    {sipName_AcceleratingFlickSpeedupFactor, static_cast<int>(QScrollerProperties::AcceleratingFlickSpeedupFactor), 264},
    {sipName_AxisLockThreshold, static_cast<int>(QScrollerProperties::AxisLockThreshold), 264},
    {sipName_DecelerationFactor, static_cast<int>(QScrollerProperties::DecelerationFactor), 264},
    {sipName_DragStartDistance, static_cast<int>(QScrollerProperties::DragStartDistance), 264},
    {sipName_DragVelocitySmoothingFactor, static_cast<int>(QScrollerProperties::DragVelocitySmoothingFactor), 264},
    {sipName_Fps20, static_cast<int>(QScrollerProperties::Fps20), 262},
    {sipName_Fps30, static_cast<int>(QScrollerProperties::Fps30), 262},
    {sipName_Fps60, static_cast<int>(QScrollerProperties::Fps60), 262},
    {sipName_FrameRate, static_cast<int>(QScrollerProperties::FrameRate), 264},
    {sipName_HorizontalOvershootPolicy, static_cast<int>(QScrollerProperties::HorizontalOvershootPolicy), 264},
    {sipName_MaximumClickThroughVelocity, static_cast<int>(QScrollerProperties::MaximumClickThroughVelocity), 264},
    {sipName_MaximumVelocity, static_cast<int>(QScrollerProperties::MaximumVelocity), 264},
    {sipName_MinimumVelocity, static_cast<int>(QScrollerProperties::MinimumVelocity), 264},
    {sipName_MousePressEventDelay, static_cast<int>(QScrollerProperties::MousePressEventDelay), 264},
    {sipName_OvershootAlwaysOff, static_cast<int>(QScrollerProperties::OvershootAlwaysOff), 263},
    {sipName_OvershootAlwaysOn, static_cast<int>(QScrollerProperties::OvershootAlwaysOn), 263},
    {sipName_OvershootDragDistanceFactor, static_cast<int>(QScrollerProperties::OvershootDragDistanceFactor), 264},
    {sipName_OvershootDragResistanceFactor, static_cast<int>(QScrollerProperties::OvershootDragResistanceFactor), 264},
    {sipName_OvershootScrollDistanceFactor, static_cast<int>(QScrollerProperties::OvershootScrollDistanceFactor), 264},
    {sipName_OvershootScrollTime, static_cast<int>(QScrollerProperties::OvershootScrollTime), 264},
    {sipName_OvershootWhenScrollable, static_cast<int>(QScrollerProperties::OvershootWhenScrollable), 263},
    {sipName_ScrollMetricCount, static_cast<int>(QScrollerProperties::ScrollMetricCount), 264},
    {sipName_ScrollingCurve, static_cast<int>(QScrollerProperties::ScrollingCurve), 264},
    {sipName_SnapPositionRatio, static_cast<int>(QScrollerProperties::SnapPositionRatio), 264},
    {sipName_SnapTime, static_cast<int>(QScrollerProperties::SnapTime), 264},
    {sipName_Standard, static_cast<int>(QScrollerProperties::Standard), 262},
    {sipName_VerticalOvershootPolicy, static_cast<int>(QScrollerProperties::VerticalOvershootPolicy), 264},
};

PyDoc_STRVAR(doc_QScrollerProperties, "\1QScrollerProperties()\n"
    "QScrollerProperties(QScrollerProperties)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QScrollerProperties = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QScrollerProperties,
        {0}
    },
    {
        sipNameNr_QScrollerProperties,
        {0, 0, 1},
        4, methods_QScrollerProperties,
        28, enummembers_QScrollerProperties,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QScrollerProperties,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QScrollerProperties,
    init_type_QScrollerProperties,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QScrollerProperties,
    assign_QScrollerProperties,
    array_QScrollerProperties,
    copy_QScrollerProperties,
    release_QScrollerProperties,
    cast_QScrollerProperties,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
