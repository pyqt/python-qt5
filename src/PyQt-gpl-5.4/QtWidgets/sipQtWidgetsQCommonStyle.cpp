/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:12 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qcommonstyle.sip"
#include <qcommonstyle.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 871 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 697 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qapplication.sip"
#include <qapplication.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"


class sipQCommonStyle : public QCommonStyle
{
public:
    sipQCommonStyle();
    virtual ~sipQCommonStyle();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QPalette standardPalette() const;
    void drawItemPixmap(QPainter*,const QRect&,int,const QPixmap&) const;
    void drawItemText(QPainter*,const QRect&,int,const QPalette&,bool,const QString&,QPalette::ColorRole) const;
    QRect itemPixmapRect(const QRect&,int,const QPixmap&) const;
    QRect itemTextRect(const QFontMetrics&,const QRect&,int,bool,const QString&) const;
    int layoutSpacing(QSizePolicy::ControlType,QSizePolicy::ControlType,Qt::Orientation,const QStyleOption*,const QWidget*) const;
    QIcon standardIcon(QStyle::StandardPixmap,const QStyleOption*,const QWidget*) const;
    QPixmap generatedIconPixmap(QIcon::Mode,const QPixmap&,const QStyleOption*) const;
    QPixmap standardPixmap(QStyle::StandardPixmap,const QStyleOption*,const QWidget*) const;
    int styleHint(QStyle::StyleHint,const QStyleOption*,const QWidget*,QStyleHintReturn*) const;
    int pixelMetric(QStyle::PixelMetric,const QStyleOption*,const QWidget*) const;
    QSize sizeFromContents(QStyle::ContentsType,const QStyleOption*,const QSize&,const QWidget*) const;
    QRect subControlRect(QStyle::ComplexControl,const QStyleOptionComplex*,QStyle::SubControl,const QWidget*) const;
    QStyle::SubControl hitTestComplexControl(QStyle::ComplexControl,const QStyleOptionComplex*,const QPoint&,const QWidget*) const;
    void drawComplexControl(QStyle::ComplexControl,const QStyleOptionComplex*,QPainter*,const QWidget*) const;
    QRect subElementRect(QStyle::SubElement,const QStyleOption*,const QWidget*) const;
    void drawControl(QStyle::ControlElement,const QStyleOption*,QPainter*,const QWidget*) const;
    void drawPrimitive(QStyle::PrimitiveElement,const QStyleOption*,QPainter*,const QWidget*) const;
    void polish(QPalette&);
    void unpolish(QApplication*);
    void polish(QApplication*);
    void unpolish(QWidget*);
    void polish(QWidget*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCommonStyle(const sipQCommonStyle &);
    sipQCommonStyle &operator = (const sipQCommonStyle &);

    char sipPyMethods[30];
};

sipQCommonStyle::sipQCommonStyle(): QCommonStyle(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCommonStyle::~sipQCommonStyle()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQCommonStyle::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QCommonStyle);
}

int sipQCommonStyle::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QCommonStyle::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QCommonStyle,_c,_id,_a);

    return _id;
}

void *sipQCommonStyle::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QCommonStyle, _clname, &sipCpp) ? sipCpp : QCommonStyle::qt_metacast(_clname));
}

void sipQCommonStyle::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QCommonStyle::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QCommonStyle::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QCommonStyle::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QCommonStyle::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QCommonStyle::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQCommonStyle::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QCommonStyle::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQCommonStyle::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QCommonStyle::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPalette sipQCommonStyle::standardPalette() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_standardPalette);

    if (!sipMeth)
        return QCommonStyle::standardPalette();

    extern QPalette sipVH_QtWidgets_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_69(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQCommonStyle::drawItemPixmap(QPainter*a0,const QRect& a1,int a2,const QPixmap& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_drawItemPixmap);

    if (!sipMeth)
    {
        QCommonStyle::drawItemPixmap(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRect&,int,const QPixmap&);

    sipVH_QtWidgets_70(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQCommonStyle::drawItemText(QPainter*a0,const QRect& a1,int a2,const QPalette& a3,bool a4,const QString& a5,QPalette::ColorRole a6) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_drawItemText);

    if (!sipMeth)
    {
        QCommonStyle::drawItemText(a0,a1,a2,a3,a4,a5,a6);
        return;
    }

    extern void sipVH_QtWidgets_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRect&,int,const QPalette&,bool,const QString&,QPalette::ColorRole);

    sipVH_QtWidgets_71(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4, a5, a6);
}

QRect sipQCommonStyle::itemPixmapRect(const QRect& a0,int a1,const QPixmap& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_itemPixmapRect);

    if (!sipMeth)
        return QCommonStyle::itemPixmapRect(a0,a1,a2);

    extern QRect sipVH_QtWidgets_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&,int,const QPixmap&);

    return sipVH_QtWidgets_72(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QRect sipQCommonStyle::itemTextRect(const QFontMetrics& a0,const QRect& a1,int a2,bool a3,const QString& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_itemTextRect);

    if (!sipMeth)
        return QCommonStyle::itemTextRect(a0,a1,a2,a3,a4);

    extern QRect sipVH_QtWidgets_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QFontMetrics&,const QRect&,int,bool,const QString&);

    return sipVH_QtWidgets_73(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

int sipQCommonStyle::layoutSpacing(QSizePolicy::ControlType a0,QSizePolicy::ControlType a1,Qt::Orientation a2,const QStyleOption*a3,const QWidget*a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_layoutSpacing);

    if (!sipMeth)
        return QCommonStyle::layoutSpacing(a0,a1,a2,a3,a4);

    extern int sipVH_QtWidgets_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSizePolicy::ControlType,QSizePolicy::ControlType,Qt::Orientation,const QStyleOption*,const QWidget*);

    return sipVH_QtWidgets_56(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QIcon sipQCommonStyle::standardIcon(QStyle::StandardPixmap a0,const QStyleOption*a1,const QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_standardIcon);

    if (!sipMeth)
        return QCommonStyle::standardIcon(a0,a1,a2);

    extern QIcon sipVH_QtWidgets_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::StandardPixmap,const QStyleOption*,const QWidget*);

    return sipVH_QtWidgets_58(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QPixmap sipQCommonStyle::generatedIconPixmap(QIcon::Mode a0,const QPixmap& a1,const QStyleOption*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_generatedIconPixmap);

    if (!sipMeth)
        return QCommonStyle::generatedIconPixmap(a0,a1,a2);

    extern QPixmap sipVH_QtWidgets_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QIcon::Mode,const QPixmap&,const QStyleOption*);

    return sipVH_QtWidgets_57(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QPixmap sipQCommonStyle::standardPixmap(QStyle::StandardPixmap a0,const QStyleOption*a1,const QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_standardPixmap);

    if (!sipMeth)
        return QCommonStyle::standardPixmap(a0,a1,a2);

    extern QPixmap sipVH_QtWidgets_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::StandardPixmap,const QStyleOption*,const QWidget*);

    return sipVH_QtWidgets_59(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

int sipQCommonStyle::styleHint(QStyle::StyleHint a0,const QStyleOption*a1,const QWidget*a2,QStyleHintReturn*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_styleHint);

    if (!sipMeth)
        return QCommonStyle::styleHint(a0,a1,a2,a3);

    extern int sipVH_QtWidgets_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::StyleHint,const QStyleOption*,const QWidget*,QStyleHintReturn*);

    return sipVH_QtWidgets_60(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

int sipQCommonStyle::pixelMetric(QStyle::PixelMetric a0,const QStyleOption*a1,const QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_pixelMetric);

    if (!sipMeth)
        return QCommonStyle::pixelMetric(a0,a1,a2);

    extern int sipVH_QtWidgets_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::PixelMetric,const QStyleOption*,const QWidget*);

    return sipVH_QtWidgets_62(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QSize sipQCommonStyle::sizeFromContents(QStyle::ContentsType a0,const QStyleOption*a1,const QSize& a2,const QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_sizeFromContents);

    if (!sipMeth)
        return QCommonStyle::sizeFromContents(a0,a1,a2,a3);

    extern QSize sipVH_QtWidgets_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::ContentsType,const QStyleOption*,const QSize&,const QWidget*);

    return sipVH_QtWidgets_61(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

QRect sipQCommonStyle::subControlRect(QStyle::ComplexControl a0,const QStyleOptionComplex*a1,QStyle::SubControl a2,const QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_subControlRect);

    if (!sipMeth)
        return QCommonStyle::subControlRect(a0,a1,a2,a3);

    extern QRect sipVH_QtWidgets_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::ComplexControl,const QStyleOptionComplex*,QStyle::SubControl,const QWidget*);

    return sipVH_QtWidgets_63(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

QStyle::SubControl sipQCommonStyle::hitTestComplexControl(QStyle::ComplexControl a0,const QStyleOptionComplex*a1,const QPoint& a2,const QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_hitTestComplexControl);

    if (!sipMeth)
        return QCommonStyle::hitTestComplexControl(a0,a1,a2,a3);

    extern QStyle::SubControl sipVH_QtWidgets_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::ComplexControl,const QStyleOptionComplex*,const QPoint&,const QWidget*);

    return sipVH_QtWidgets_64(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQCommonStyle::drawComplexControl(QStyle::ComplexControl a0,const QStyleOptionComplex*a1,QPainter*a2,const QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_drawComplexControl);

    if (!sipMeth)
    {
        QCommonStyle::drawComplexControl(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::ComplexControl,const QStyleOptionComplex*,QPainter*,const QWidget*);

    sipVH_QtWidgets_65(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

QRect sipQCommonStyle::subElementRect(QStyle::SubElement a0,const QStyleOption*a1,const QWidget*a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_subElementRect);

    if (!sipMeth)
        return QCommonStyle::subElementRect(a0,a1,a2);

    extern QRect sipVH_QtWidgets_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::SubElement,const QStyleOption*,const QWidget*);

    return sipVH_QtWidgets_66(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQCommonStyle::drawControl(QStyle::ControlElement a0,const QStyleOption*a1,QPainter*a2,const QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_drawControl);

    if (!sipMeth)
    {
        QCommonStyle::drawControl(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::ControlElement,const QStyleOption*,QPainter*,const QWidget*);

    sipVH_QtWidgets_67(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQCommonStyle::drawPrimitive(QStyle::PrimitiveElement a0,const QStyleOption*a1,QPainter*a2,const QWidget*a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_drawPrimitive);

    if (!sipMeth)
    {
        QCommonStyle::drawPrimitive(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWidgets_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QStyle::PrimitiveElement,const QStyleOption*,QPainter*,const QWidget*);

    sipVH_QtWidgets_68(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQCommonStyle::polish(QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_polish);

    if (!sipMeth)
    {
        QCommonStyle::polish(a0);
        return;
    }

    extern void sipVH_QtWidgets_74(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPalette&);

    sipVH_QtWidgets_74(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::unpolish(QApplication*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_unpolish);

    if (!sipMeth)
    {
        QCommonStyle::unpolish(a0);
        return;
    }

    extern void sipVH_QtWidgets_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QApplication*);

    sipVH_QtWidgets_75(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::polish(QApplication*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_polish);

    if (!sipMeth)
    {
        QCommonStyle::polish(a0);
        return;
    }

    extern void sipVH_QtWidgets_75(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QApplication*);

    sipVH_QtWidgets_75(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::unpolish(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_unpolish);

    if (!sipMeth)
    {
        QCommonStyle::unpolish(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQCommonStyle::polish(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_polish);

    if (!sipMeth)
    {
        QCommonStyle::polish(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQCommonStyle::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQCommonStyle::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQCommonStyle::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQCommonStyle::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQCommonStyle::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQCommonStyle::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQCommonStyle::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQCommonStyle::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQCommonStyle::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QCommonStyle_sender, "QCommonStyle.sender() -> QObject");

extern "C" {static PyObject *meth_QCommonStyle_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQCommonStyle *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCommonStyle, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 815 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_sender, doc_QCommonStyle_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_receivers, "QCommonStyle.receivers(signal) -> int");

extern "C" {static PyObject *meth_QCommonStyle_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQCommonStyle *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QCommonStyle, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 874 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQCommonStyle.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_receivers, doc_QCommonStyle_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_timerEvent, "QCommonStyle.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QCommonStyle_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQCommonStyle *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_timerEvent, doc_QCommonStyle_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_childEvent, "QCommonStyle.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QCommonStyle_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQCommonStyle *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_childEvent, doc_QCommonStyle_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_customEvent, "QCommonStyle.customEvent(QEvent)");

extern "C" {static PyObject *meth_QCommonStyle_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQCommonStyle *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_customEvent, doc_QCommonStyle_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_connectNotify, "QCommonStyle.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QCommonStyle_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQCommonStyle *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_connectNotify, doc_QCommonStyle_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_disconnectNotify, "QCommonStyle.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QCommonStyle_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQCommonStyle *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_disconnectNotify, doc_QCommonStyle_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_senderSignalIndex, "QCommonStyle.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QCommonStyle_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQCommonStyle *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QCommonStyle, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_senderSignalIndex, doc_QCommonStyle_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_isSignalConnected, "QCommonStyle.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QCommonStyle_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQCommonStyle *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_isSignalConnected, doc_QCommonStyle_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_polish, "QCommonStyle.polish(QWidget)\n"
    "QCommonStyle.polish(QApplication)\n"
    "QCommonStyle.polish(QPalette) -> QPalette");

extern "C" {static PyObject *meth_QCommonStyle_polish(PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_polish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        QCommonStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QWidget, &a0))
        {
            (sipSelfWasArg ? sipCpp->QCommonStyle::polish(a0) : sipCpp->polish(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QApplication* a0;
        QCommonStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QApplication, &a0))
        {
            (sipSelfWasArg ? sipCpp->QCommonStyle::polish(a0) : sipCpp->polish(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPalette* a0;
        QCommonStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QPalette, &a0))
        {
            (sipSelfWasArg ? sipCpp->QCommonStyle::polish(*a0) : sipCpp->polish(*a0));

            return sipConvertFromType(a0,sipType_QPalette,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_polish, doc_QCommonStyle_polish);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_unpolish, "QCommonStyle.unpolish(QWidget)\n"
    "QCommonStyle.unpolish(QApplication)");

extern "C" {static PyObject *meth_QCommonStyle_unpolish(PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_unpolish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        QCommonStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QWidget, &a0))
        {
            (sipSelfWasArg ? sipCpp->QCommonStyle::unpolish(a0) : sipCpp->unpolish(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QApplication* a0;
        QCommonStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QApplication, &a0))
        {
            (sipSelfWasArg ? sipCpp->QCommonStyle::unpolish(a0) : sipCpp->unpolish(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_unpolish, doc_QCommonStyle_unpolish);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_drawPrimitive, "QCommonStyle.drawPrimitive(QStyle.PrimitiveElement, QStyleOption, QPainter, QWidget widget=None)");

extern "C" {static PyObject *meth_QCommonStyle_drawPrimitive(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_drawPrimitive(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::PrimitiveElement a0;
        const QStyleOption* a1;
        QPainter* a2;
        const QWidget* a3 = 0;
        const QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J8|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_PrimitiveElement, &a0, sipType_QStyleOption, &a1, sipType_QPainter, &a2, sipType_QWidget, &a3))
        {
            (sipSelfWasArg ? sipCpp->QCommonStyle::drawPrimitive(a0,a1,a2,a3) : sipCpp->drawPrimitive(a0,a1,a2,a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_drawPrimitive, doc_QCommonStyle_drawPrimitive);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_drawControl, "QCommonStyle.drawControl(QStyle.ControlElement, QStyleOption, QPainter, QWidget widget=None)");

extern "C" {static PyObject *meth_QCommonStyle_drawControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_drawControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::ControlElement a0;
        const QStyleOption* a1;
        QPainter* a2;
        const QWidget* a3 = 0;
        const QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J8|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_ControlElement, &a0, sipType_QStyleOption, &a1, sipType_QPainter, &a2, sipType_QWidget, &a3))
        {
            (sipSelfWasArg ? sipCpp->QCommonStyle::drawControl(a0,a1,a2,a3) : sipCpp->drawControl(a0,a1,a2,a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_drawControl, doc_QCommonStyle_drawControl);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_subElementRect, "QCommonStyle.subElementRect(QStyle.SubElement, QStyleOption, QWidget widget=None) -> QRect");

extern "C" {static PyObject *meth_QCommonStyle_subElementRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_subElementRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::SubElement a0;
        const QStyleOption* a1;
        const QWidget* a2 = 0;
        const QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_SubElement, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
            QRect*sipRes;

            sipRes = new QRect((sipSelfWasArg ? sipCpp->QCommonStyle::subElementRect(a0,a1,a2) : sipCpp->subElementRect(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_subElementRect, doc_QCommonStyle_subElementRect);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_drawComplexControl, "QCommonStyle.drawComplexControl(QStyle.ComplexControl, QStyleOptionComplex, QPainter, QWidget widget=None)");

extern "C" {static PyObject *meth_QCommonStyle_drawComplexControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_drawComplexControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::ComplexControl a0;
        const QStyleOptionComplex* a1;
        QPainter* a2;
        const QWidget* a3 = 0;
        const QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J8|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1, sipType_QPainter, &a2, sipType_QWidget, &a3))
        {
            (sipSelfWasArg ? sipCpp->QCommonStyle::drawComplexControl(a0,a1,a2,a3) : sipCpp->drawComplexControl(a0,a1,a2,a3));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_drawComplexControl, doc_QCommonStyle_drawComplexControl);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_hitTestComplexControl, "QCommonStyle.hitTestComplexControl(QStyle.ComplexControl, QStyleOptionComplex, QPoint, QWidget widget=None) -> QStyle.SubControl");

extern "C" {static PyObject *meth_QCommonStyle_hitTestComplexControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_hitTestComplexControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::ComplexControl a0;
        const QStyleOptionComplex* a1;
        const QPoint* a2;
        const QWidget* a3 = 0;
        const QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J9|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1, sipType_QPoint, &a2, sipType_QWidget, &a3))
        {
            QStyle::SubControl sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QCommonStyle::hitTestComplexControl(a0,a1,*a2,a3) : sipCpp->hitTestComplexControl(a0,a1,*a2,a3));

            return sipConvertFromEnum(sipRes,sipType_QStyle_SubControl);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_hitTestComplexControl, doc_QCommonStyle_hitTestComplexControl);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_subControlRect, "QCommonStyle.subControlRect(QStyle.ComplexControl, QStyleOptionComplex, QStyle.SubControl, QWidget widget=None) -> QRect");

extern "C" {static PyObject *meth_QCommonStyle_subControlRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_subControlRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::ComplexControl a0;
        const QStyleOptionComplex* a1;
        QStyle::SubControl a2;
        const QWidget* a3 = 0;
        const QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8E|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_ComplexControl, &a0, sipType_QStyleOptionComplex, &a1, sipType_QStyle_SubControl, &a2, sipType_QWidget, &a3))
        {
            QRect*sipRes;

            sipRes = new QRect((sipSelfWasArg ? sipCpp->QCommonStyle::subControlRect(a0,a1,a2,a3) : sipCpp->subControlRect(a0,a1,a2,a3)));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_subControlRect, doc_QCommonStyle_subControlRect);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_sizeFromContents, "QCommonStyle.sizeFromContents(QStyle.ContentsType, QStyleOption, QSize, QWidget widget=None) -> QSize");

extern "C" {static PyObject *meth_QCommonStyle_sizeFromContents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_sizeFromContents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::ContentsType a0;
        const QStyleOption* a1;
        const QSize* a2;
        const QWidget* a3 = 0;
        const QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J9|J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_ContentsType, &a0, sipType_QStyleOption, &a1, sipType_QSize, &a2, sipType_QWidget, &a3))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QCommonStyle::sizeFromContents(a0,a1,*a2,a3) : sipCpp->sizeFromContents(a0,a1,*a2,a3)));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_sizeFromContents, doc_QCommonStyle_sizeFromContents);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_pixelMetric, "QCommonStyle.pixelMetric(QStyle.PixelMetric, QStyleOption option=None, QWidget widget=None) -> int");

extern "C" {static PyObject *meth_QCommonStyle_pixelMetric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_pixelMetric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::PixelMetric a0;
        const QStyleOption* a1 = 0;
        const QWidget* a2 = 0;
        const QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_PixelMetric, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QCommonStyle::pixelMetric(a0,a1,a2) : sipCpp->pixelMetric(a0,a1,a2));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_pixelMetric, doc_QCommonStyle_pixelMetric);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_styleHint, "QCommonStyle.styleHint(QStyle.StyleHint, QStyleOption option=None, QWidget widget=None, QStyleHintReturn returnData=None) -> int");

extern "C" {static PyObject *meth_QCommonStyle_styleHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_styleHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::StyleHint a0;
        const QStyleOption* a1 = 0;
        const QWidget* a2 = 0;
        QStyleHintReturn* a3 = 0;
        const QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_widget,
            sipName_returnData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_StyleHint, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2, sipType_QStyleHintReturn, &a3))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QCommonStyle::styleHint(a0,a1,a2,a3) : sipCpp->styleHint(a0,a1,a2,a3));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_styleHint, doc_QCommonStyle_styleHint);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_standardPixmap, "QCommonStyle.standardPixmap(QStyle.StandardPixmap, QStyleOption option=None, QWidget widget=None) -> QPixmap");

extern "C" {static PyObject *meth_QCommonStyle_standardPixmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_standardPixmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::StandardPixmap a0;
        const QStyleOption* a1 = 0;
        const QWidget* a2 = 0;
        const QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_StandardPixmap, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
            QPixmap*sipRes;

            sipRes = new QPixmap((sipSelfWasArg ? sipCpp->QCommonStyle::standardPixmap(a0,a1,a2) : sipCpp->standardPixmap(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_standardPixmap, doc_QCommonStyle_standardPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_generatedIconPixmap, "QCommonStyle.generatedIconPixmap(QIcon.Mode, QPixmap, QStyleOption) -> QPixmap");

extern "C" {static PyObject *meth_QCommonStyle_generatedIconPixmap(PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_generatedIconPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIcon::Mode a0;
        const QPixmap* a1;
        const QStyleOption* a2;
        const QCommonStyle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ9J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QIcon_Mode, &a0, sipType_QPixmap, &a1, sipType_QStyleOption, &a2))
        {
            QPixmap*sipRes;

            sipRes = new QPixmap((sipSelfWasArg ? sipCpp->QCommonStyle::generatedIconPixmap(a0,*a1,a2) : sipCpp->generatedIconPixmap(a0,*a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_generatedIconPixmap, doc_QCommonStyle_generatedIconPixmap);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_standardIcon, "QCommonStyle.standardIcon(QStyle.StandardPixmap, QStyleOption option=None, QWidget widget=None) -> QIcon");

extern "C" {static PyObject *meth_QCommonStyle_standardIcon(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_standardIcon(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyle::StandardPixmap a0;
        const QStyleOption* a1 = 0;
        const QWidget* a2 = 0;
        const QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QStyle_StandardPixmap, &a0, sipType_QStyleOption, &a1, sipType_QWidget, &a2))
        {
            QIcon*sipRes;

            sipRes = new QIcon((sipSelfWasArg ? sipCpp->QCommonStyle::standardIcon(a0,a1,a2) : sipCpp->standardIcon(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_standardIcon, doc_QCommonStyle_standardIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QCommonStyle_layoutSpacing, "QCommonStyle.layoutSpacing(QSizePolicy.ControlType, QSizePolicy.ControlType, Qt.Orientation, QStyleOption option=None, QWidget widget=None) -> int");

extern "C" {static PyObject *meth_QCommonStyle_layoutSpacing(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QCommonStyle_layoutSpacing(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSizePolicy::ControlType a0;
        QSizePolicy::ControlType a1;
        Qt::Orientation a2;
        const QStyleOption* a3 = 0;
        const QWidget* a4 = 0;
        const QCommonStyle *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            sipName_option,
            sipName_widget,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEEE|J8J8", &sipSelf, sipType_QCommonStyle, &sipCpp, sipType_QSizePolicy_ControlType, &a0, sipType_QSizePolicy_ControlType, &a1, sipType_Qt_Orientation, &a2, sipType_QStyleOption, &a3, sipType_QWidget, &a4))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QCommonStyle::layoutSpacing(a0,a1,a2,a3,a4) : sipCpp->layoutSpacing(a0,a1,a2,a3,a4));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QCommonStyle, sipName_layoutSpacing, doc_QCommonStyle_layoutSpacing);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QCommonStyle(void *, const sipTypeDef *);}
static void *cast_QCommonStyle(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QCommonStyle)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QStyle)->ctd_cast((QStyle *)(QCommonStyle *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCommonStyle(void *, int);}
static void release_QCommonStyle(void *sipCppV,int)
{
    QCommonStyle *sipCpp = reinterpret_cast<QCommonStyle *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QCommonStyle(sipSimpleWrapper *);}
static void dealloc_QCommonStyle(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQCommonStyle *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QCommonStyle(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QCommonStyle(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QCommonStyle(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQCommonStyle *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQCommonStyle();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCommonStyle[] = {{283, 255, 1}};


static PyMethodDef methods_QCommonStyle[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QCommonStyle_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QCommonStyle_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QCommonStyle_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QCommonStyle_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawComplexControl), (PyCFunction)meth_QCommonStyle_drawComplexControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_drawComplexControl)},
    {SIP_MLNAME_CAST(sipName_drawControl), (PyCFunction)meth_QCommonStyle_drawControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_drawControl)},
    {SIP_MLNAME_CAST(sipName_drawPrimitive), (PyCFunction)meth_QCommonStyle_drawPrimitive, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_drawPrimitive)},
    {SIP_MLNAME_CAST(sipName_generatedIconPixmap), meth_QCommonStyle_generatedIconPixmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommonStyle_generatedIconPixmap)},
    {SIP_MLNAME_CAST(sipName_hitTestComplexControl), (PyCFunction)meth_QCommonStyle_hitTestComplexControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_hitTestComplexControl)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QCommonStyle_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_layoutSpacing), (PyCFunction)meth_QCommonStyle_layoutSpacing, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_layoutSpacing)},
    {SIP_MLNAME_CAST(sipName_pixelMetric), (PyCFunction)meth_QCommonStyle_pixelMetric, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_pixelMetric)},
    {SIP_MLNAME_CAST(sipName_polish), meth_QCommonStyle_polish, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommonStyle_polish)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QCommonStyle_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QCommonStyle_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QCommonStyle_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeFromContents), (PyCFunction)meth_QCommonStyle_sizeFromContents, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_sizeFromContents)},
    {SIP_MLNAME_CAST(sipName_standardIcon), (PyCFunction)meth_QCommonStyle_standardIcon, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_standardIcon)},
    {SIP_MLNAME_CAST(sipName_standardPixmap), (PyCFunction)meth_QCommonStyle_standardPixmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_standardPixmap)},
    {SIP_MLNAME_CAST(sipName_styleHint), (PyCFunction)meth_QCommonStyle_styleHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_styleHint)},
    {SIP_MLNAME_CAST(sipName_subControlRect), (PyCFunction)meth_QCommonStyle_subControlRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_subControlRect)},
    {SIP_MLNAME_CAST(sipName_subElementRect), (PyCFunction)meth_QCommonStyle_subElementRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QCommonStyle_subElementRect)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QCommonStyle_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_unpolish), meth_QCommonStyle_unpolish, METH_VARARGS, SIP_MLDOC_CAST(doc_QCommonStyle_unpolish)}
};

PyDoc_STRVAR(doc_QCommonStyle, "\1QCommonStyle()");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QCommonStyle = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QCommonStyle,
        {0}
    },
    {
        sipNameNr_QCommonStyle,
        {0, 0, 1},
        24, methods_QCommonStyle,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QCommonStyle,
    -1,
    -1,
    supers_QCommonStyle,
    0,
    init_type_QCommonStyle,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCommonStyle,
    0,
    0,
    0,
    release_QCommonStyle,
    cast_QCommonStyle,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QCommonStyle::staticMetaObject,
    0,
    0,
    0
};
