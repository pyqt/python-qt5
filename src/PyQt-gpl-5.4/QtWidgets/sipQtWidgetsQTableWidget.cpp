/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:10 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtablewidget.sip"
#include <qtablewidget.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 105 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 49 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtablewidget.sip"
#include <qtablewidget.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtablewidget.sip"
#include <qtablewidget.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 68 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 133 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 368 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 564 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qheaderview.sip"
#include <qheaderview.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 68 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 395 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 321 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractscrollarea.sip"
#include <qabstractscrollarea.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 452 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 177 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 180 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 183 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 186 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 189 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 195 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 198 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 201 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 204 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 207 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 210 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 213 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 216 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 219 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 225 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 228 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 231 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 237 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 635 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 240 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 275 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 243 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 408 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 246 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 382 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 249 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 252 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 255 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 258 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 261 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 264 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 267 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 270 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 273 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 276 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 279 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 282 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 285 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 288 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 291 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 294 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 297 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 300 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 303 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 306 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 309 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"


class sipQTableWidget : public QTableWidget
{
public:
    sipQTableWidget(QWidget*);
    sipQTableWidget(int,int,QWidget*);
    virtual ~sipQTableWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /* Expose this protected enum. */
    enum sipDropIndicatorPosition {
        OnItem = QAbstractItemView::OnItem,
        AboveItem = QAbstractItemView::AboveItem,
        BelowItem = QAbstractItemView::BelowItem,
        OnViewport = QAbstractItemView::OnViewport
    };

    /* Expose this protected enum. */
    enum sipState {
        NoState = QAbstractItemView::NoState,
        DraggingState = QAbstractItemView::DraggingState,
        DragSelectingState = QAbstractItemView::DragSelectingState,
        EditingState = QAbstractItemView::EditingState,
        ExpandingState = QAbstractItemView::ExpandingState,
        CollapsingState = QAbstractItemView::CollapsingState,
        AnimatingState = QAbstractItemView::AnimatingState
    };

    /* Expose this protected enum. */
    enum sipCursorAction {
        MoveUp = QAbstractItemView::MoveUp,
        MoveDown = QAbstractItemView::MoveDown,
        MoveLeft = QAbstractItemView::MoveLeft,
        MoveRight = QAbstractItemView::MoveRight,
        MoveHome = QAbstractItemView::MoveHome,
        MoveEnd = QAbstractItemView::MoveEnd,
        MovePageUp = QAbstractItemView::MovePageUp,
        MovePageDown = QAbstractItemView::MovePageDown,
        MoveNext = QAbstractItemView::MoveNext,
        MovePrevious = QAbstractItemView::MovePrevious
    };

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_enterEvent(bool,QEvent*);
    void sipProtectVirt_leaveEvent(bool,QEvent*);
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_closeEvent(bool,QCloseEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);
    void sipProtectVirt_actionEvent(bool,QActionEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const QByteArray&,void*,long*);
    QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool,QPainter*) const;
    void sipProtectVirt_changeEvent(bool,QEvent*);
    void sipProtect_drawFrame(QPainter*);
    void sipProtect_setViewportMargins(int,int,int,int);
    void sipProtect_setViewportMargins(const QMargins&);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent*);
    bool sipProtectVirt_eventFilter(bool,QObject*,QEvent*);
    bool sipProtectVirt_edit(bool,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);
    void sipProtectVirt_dataChanged(bool,const QModelIndex&,const QModelIndex&,const QVector<int>&);
    void sipProtectVirt_rowsInserted(bool,const QModelIndex&,int,int);
    void sipProtectVirt_rowsAboutToBeRemoved(bool,const QModelIndex&,int,int);
    void sipProtectVirt_updateEditorData(bool);
    void sipProtectVirt_updateEditorGeometries(bool);
    void sipProtectVirt_verticalScrollbarValueChanged(bool,int);
    void sipProtectVirt_horizontalScrollbarValueChanged(bool,int);
    void sipProtectVirt_closeEditor(bool,QWidget*,QAbstractItemDelegate::EndEditHint);
    void sipProtectVirt_commitData(bool,QWidget*);
    void sipProtectVirt_editorDestroyed(bool,QObject*);
    QItemSelectionModel::SelectionFlags sipProtectVirt_selectionCommand(bool,const QModelIndex&,const QEvent*) const;
    void sipProtectVirt_startDrag(bool,Qt::DropActions);
    int sipProtect_state() const;
    void sipProtect_setState(int);
    void sipProtect_scheduleDelayedItemsLayout();
    void sipProtect_executeDelayedItemsLayout();
    void sipProtect_scrollDirtyRegion(int,int);
    void sipProtect_setDirtyRegion(const QRegion&);
    QPoint sipProtect_dirtyRegionOffset() const;
    bool sipProtectVirt_viewportEvent(bool,QEvent*);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent*);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    int sipProtect_dropIndicatorPosition() const;
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    void sipProtect_rowMoved(int,int,int);
    void sipProtect_columnMoved(int,int,int);
    void sipProtect_rowResized(int,int,int);
    void sipProtect_columnResized(int,int,int);
    void sipProtect_rowCountChanged(int,int);
    void sipProtect_columnCountChanged(int,int);
    void sipProtectVirt_scrollContentsBy(bool,int,int);
    QStyleOptionViewItem sipProtectVirt_viewOptions(bool) const;
    void sipProtectVirt_paintEvent(bool,QPaintEvent*);
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    int sipProtectVirt_horizontalOffset(bool) const;
    int sipProtectVirt_verticalOffset(bool) const;
    QModelIndex sipProtectVirt_moveCursor(bool,int,Qt::KeyboardModifiers);
    void sipProtectVirt_setSelection(bool,const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion sipProtectVirt_visualRegionForSelection(bool,const QItemSelection&) const;
    QModelIndexList sipProtectVirt_selectedIndexes(bool) const;
    void sipProtectVirt_updateGeometries(bool);
    int sipProtectVirt_sizeHintForRow(bool,int) const;
    int sipProtectVirt_sizeHintForColumn(bool,int) const;
    void sipProtectVirt_verticalScrollbarAction(bool,int);
    void sipProtectVirt_horizontalScrollbarAction(bool,int);
    bool sipProtectVirt_isIndexHidden(bool,const QModelIndex&) const;
    QSize sipProtectVirt_viewportSizeHint(bool) const;
    void sipProtectVirt_selectionChanged(bool,const QItemSelection&,const QItemSelection&);
    void sipProtectVirt_currentChanged(bool,const QModelIndex&,const QModelIndex&);
    QStringList sipProtectVirt_mimeTypes(bool) const;
    QMimeData* sipProtectVirt_mimeData(bool,const QList<QTableWidgetItem*>) const;
    bool sipProtectVirt_dropMimeData(bool,int,int,const QMimeData*,Qt::DropAction);
    Qt::DropActions sipProtectVirt_supportedDropActions(bool) const;
    QList<QTableWidgetItem*> sipProtect_items(const QMimeData*) const;
    QModelIndex sipProtect_indexFromItem(QTableWidgetItem*) const;
    QTableWidgetItem* sipProtect_itemFromIndex(const QModelIndex&) const;
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_dropEvent(bool,QDropEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void keyReleaseEvent(QKeyEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void changeEvent(QEvent*);
    void setupViewport(QWidget*);
    bool eventFilter(QObject*,QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void wheelEvent(QWheelEvent*);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    void inputMethodEvent(QInputMethodEvent*);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void resizeEvent(QResizeEvent*);
    void keyPressEvent(QKeyEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    bool viewportEvent(QEvent*);
    void startDrag(Qt::DropActions);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent*) const;
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);
    void editorDestroyed(QObject*);
    void commitData(QWidget*);
    void closeEditor(QWidget*,QAbstractItemDelegate::EndEditHint);
    void horizontalScrollbarValueChanged(int);
    void verticalScrollbarValueChanged(int);
    void updateEditorGeometries();
    void updateEditorData();
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void rowsInserted(const QModelIndex&,int,int);
    void dataChanged(const QModelIndex&,const QModelIndex&,const QVector<int>&);
    void selectAll();
    void reset();
    void keyboardSearch(const QString&);
    void currentChanged(const QModelIndex&,const QModelIndex&);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    QSize viewportSizeHint() const;
    bool isIndexHidden(const QModelIndex&) const;
    void horizontalScrollbarAction(int);
    void verticalScrollbarAction(int);
    int sizeHintForColumn(int) const;
    int sizeHintForRow(int) const;
    void updateGeometries();
    QModelIndexList selectedIndexes() const;
    QRegion visualRegionForSelection(const QItemSelection&) const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    int verticalOffset() const;
    int horizontalOffset() const;
    void timerEvent(QTimerEvent*);
    void paintEvent(QPaintEvent*);
    QStyleOptionViewItem viewOptions() const;
    void scrollContentsBy(int,int);
    QModelIndex indexAt(const QPoint&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QRect visualRect(const QModelIndex&) const;
    void setSelectionModel(QItemSelectionModel*);
    void setRootIndex(const QModelIndex&);
    void dropEvent(QDropEvent*);
    bool event(QEvent*);
    Qt::DropActions supportedDropActions() const;
    bool dropMimeData(int,int,const QMimeData*,Qt::DropAction);
    QMimeData* mimeData(const QList<QTableWidgetItem*>) const;
    QStringList mimeTypes() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTableWidget(const sipQTableWidget &);
    sipQTableWidget &operator = (const sipQTableWidget &);

    char sipPyMethods[90];
};

sipQTableWidget::sipQTableWidget(QWidget*a0): QTableWidget(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTableWidget::sipQTableWidget(int a0,int a1,QWidget*a2): QTableWidget(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTableWidget::~sipQTableWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTableWidget::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QTableWidget);
}

int sipQTableWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTableWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QTableWidget,_c,_id,_a);

    return _id;
}

void *sipQTableWidget::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QTableWidget, _clname, &sipCpp) ? sipCpp : QTableWidget::qt_metacast(_clname));
}

void sipQTableWidget::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTableWidget::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTableWidget::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTableWidget::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTableWidget::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QTableWidget::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQTableWidget::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QTableWidget::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQTableWidget::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QTableWidget::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQTableWidget::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QTableWidget::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTableWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QTableWidget::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QTableWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QTableWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QTableWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QTableWidget::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QTableWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QTableWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QTableWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QTableWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QTableWidget::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQTableWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QTableWidget::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTableWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QTableWidget::heightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QTableWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQTableWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QTableWidget::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableWidget::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QTableWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::setupViewport(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_setupViewport);

    if (!sipMeth)
    {
        QTableWidget::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTableWidget::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTableWidget::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQTableWidget::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QTableWidget::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QTableWidget::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQTableWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QTableWidget::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQTableWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QTableWidget::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableWidget::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QTableWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTableWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QTableWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQTableWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QTableWidget::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QTableWidget::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QTableWidget::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QTableWidget::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QTableWidget::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QTableWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QTableWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QTableWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QTableWidget::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QTableWidget::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QTableWidget::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QTableWidget::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTableWidget::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QTableWidget::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_startDrag);

    if (!sipMeth)
    {
        QTableWidget::startDrag(a0);
        return;
    }

    extern void sipVH_QtWidgets_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::DropActions);

    sipVH_QtWidgets_91(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QItemSelectionModel::SelectionFlags sipQTableWidget::selectionCommand(const QModelIndex& a0,const QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_selectionCommand);

    if (!sipMeth)
        return QTableWidget::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtWidgets_144(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QEvent*);

    return sipVH_QtWidgets_144(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQTableWidget::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_edit);

    if (!sipMeth)
        return QTableWidget::edit(a0,a1,a2);

    extern bool sipVH_QtWidgets_145(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);

    return sipVH_QtWidgets_145(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTableWidget::editorDestroyed(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_editorDestroyed);

    if (!sipMeth)
    {
        QTableWidget::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtWidgets_146(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtWidgets_146(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::commitData(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
        QTableWidget::commitData(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::closeEditor(QWidget*a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_closeEditor);

    if (!sipMeth)
    {
        QTableWidget::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_147(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,QAbstractItemDelegate::EndEditHint);

    sipVH_QtWidgets_147(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQTableWidget::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!sipMeth)
    {
        QTableWidget::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!sipMeth)
    {
        QTableWidget::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!sipMeth)
    {
        QTableWidget::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableWidget::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_updateEditorData);

    if (!sipMeth)
    {
        QTableWidget::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableWidget::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!sipMeth)
    {
        QTableWidget::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_31(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTableWidget::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_rowsInserted);

    if (!sipMeth)
    {
        QTableWidget::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_31(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTableWidget::dataChanged(const QModelIndex& a0,const QModelIndex& a1,const QVector<int>& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_dataChanged);

    if (!sipMeth)
    {
        QTableWidget::dataChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&,const QVector<int>&);

    sipVH_QtWidgets_32(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTableWidget::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
        QTableWidget::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableWidget::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
        QTableWidget::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableWidget::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_keyboardSearch);

    if (!sipMeth)
    {
        QTableWidget::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtGui_22)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[22]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_currentChanged);

    if (!sipMeth)
    {
        QTableWidget::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&);

    sipVH_QtWidgets_23(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQTableWidget::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_selectionChanged);

    if (!sipMeth)
    {
        QTableWidget::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&,const QItemSelection&);

    sipVH_QtWidgets_24(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QSize sipQTableWidget::viewportSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[62]),sipPySelf,NULL,sipName_viewportSizeHint);

    if (!sipMeth)
        return QTableWidget::viewportSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQTableWidget::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[63]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!sipMeth)
        return QTableWidget::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_31)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_31)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[31]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!sipMeth)
    {
        QTableWidget::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!sipMeth)
    {
        QTableWidget::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQTableWidget::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[66]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!sipMeth)
        return QTableWidget::sizeHintForColumn(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQTableWidget::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[67]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!sipMeth)
        return QTableWidget::sizeHintForRow(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_updateGeometries);

    if (!sipMeth)
    {
        QTableWidget::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QModelIndexList sipQTableWidget::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[69]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!sipMeth)
        return QTableWidget::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_27(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QRegion sipQTableWidget::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[70]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!sipMeth)
        return QTableWidget::visualRegionForSelection(a0);

    extern QRegion sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtWidgets_28(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_setSelection);

    if (!sipMeth)
    {
        QTableWidget::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtWidgets_29(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QModelIndex sipQTableWidget::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_moveCursor);

    if (!sipMeth)
        return QTableWidget::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::KeyboardModifiers);

    return sipVH_QtWidgets_30(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, (int)a0, a1);
}

int sipQTableWidget::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[73]),sipPySelf,NULL,sipName_verticalOffset);

    if (!sipMeth)
        return QTableWidget::verticalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTableWidget::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[74]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!sipMeth)
        return QTableWidget::horizontalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableWidget::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTableWidget::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QTableWidget::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QStyleOptionViewItem sipQTableWidget::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[77]),sipPySelf,NULL,sipName_viewOptions);

    if (!sipMeth)
        return QTableWidget::viewOptions();

    extern QStyleOptionViewItem sipVH_QtWidgets_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_46(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTableWidget::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QTableWidget::scrollContentsBy(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    ((sipVH_QtGui_17)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QModelIndex sipQTableWidget::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[79]),sipPySelf,NULL,sipName_indexAt);

    if (!sipMeth)
        return QTableWidget::indexAt(a0);

    extern QModelIndex sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPoint&);

    return sipVH_QtWidgets_33(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_scrollTo);

    if (!sipMeth)
    {
        QTableWidget::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtWidgets_34(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QRect sipQTableWidget::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[81]),sipPySelf,NULL,sipName_visualRect);

    if (!sipMeth)
        return QTableWidget::visualRect(a0);

    extern QRect sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtWidgets_35(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::setSelectionModel(QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_setSelectionModel);

    if (!sipMeth)
    {
        QTableWidget::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QItemSelectionModel*);

    sipVH_QtWidgets_16(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[83],sipPySelf,NULL,sipName_setRootIndex);

    if (!sipMeth)
    {
        QTableWidget::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_32)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[32]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidget::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QTableWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTableWidget::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTableWidget::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

Qt::DropActions sipQTableWidget::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[86]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return QTableWidget::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[18]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQTableWidget::dropMimeData(int a0,int a1,const QMimeData*a2,Qt::DropAction a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[87],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return QTableWidget::dropMimeData(a0,a1,a2,a3);

    extern bool sipVH_QtWidgets_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QMimeData*,Qt::DropAction);

    return sipVH_QtWidgets_41(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

QMimeData* sipQTableWidget::mimeData(const QList<QTableWidgetItem*> a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[88]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return QTableWidget::mimeData(a0);

    extern QMimeData* sipVH_QtWidgets_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QTableWidgetItem*>);

    return sipVH_QtWidgets_42(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QStringList sipQTableWidget::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[89]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return QTableWidget::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[27]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQTableWidget::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQTableWidget::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQTableWidget::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQTableWidget::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQTableWidget::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQTableWidget::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQTableWidget::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQTableWidget::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQTableWidget::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQTableWidget::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQTableWidget::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQTableWidget::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQTableWidget::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent*a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQTableWidget::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQTableWidget::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent*a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQTableWidget::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QWidget::showEvent(a0) : showEvent(a0));
}

void sipQTableWidget::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQTableWidget::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQTableWidget::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQTableWidget::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQTableWidget::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQTableWidget::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQTableWidget::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

bool sipQTableWidget::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ? QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

QPainter* sipQTableWidget::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QWidget::sharedPainter() : sharedPainter());
}

void sipQTableWidget::sipProtectVirt_initPainter(bool sipSelfWasArg,QPainter*a0) const
{
    (sipSelfWasArg ? QWidget::initPainter(a0) : initPainter(a0));
}

void sipQTableWidget::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QFrame::changeEvent(a0) : changeEvent(a0));
}

void sipQTableWidget::sipProtect_drawFrame(QPainter*a0)
{
    QFrame::drawFrame(a0);
}

void sipQTableWidget::sipProtect_setViewportMargins(int a0,int a1,int a2,int a3)
{
    QAbstractScrollArea::setViewportMargins(a0,a1,a2,a3);
}

void sipQTableWidget::sipProtect_setViewportMargins(const QMargins& a0)
{
    QAbstractScrollArea::setViewportMargins(a0);
}

void sipQTableWidget::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::wheelEvent(a0) : wheelEvent(a0));
}

void sipQTableWidget::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent*a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::contextMenuEvent(a0) : contextMenuEvent(a0));
}

bool sipQTableWidget::sipProtectVirt_eventFilter(bool sipSelfWasArg,QObject*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QAbstractScrollArea::eventFilter(a0,a1) : eventFilter(a0,a1));
}

bool sipQTableWidget::sipProtectVirt_edit(bool sipSelfWasArg,const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent*a2)
{
    return (sipSelfWasArg ? QAbstractItemView::edit(a0,a1,a2) : edit(a0,a1,a2));
}

void sipQTableWidget::sipProtectVirt_dataChanged(bool sipSelfWasArg,const QModelIndex& a0,const QModelIndex& a1,const QVector<int>& a2)
{
    (sipSelfWasArg ? QAbstractItemView::dataChanged(a0,a1,a2) : dataChanged(a0,a1,a2));
}

void sipQTableWidget::sipProtectVirt_rowsInserted(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QAbstractItemView::rowsInserted(a0,a1,a2) : rowsInserted(a0,a1,a2));
}

void sipQTableWidget::sipProtectVirt_rowsAboutToBeRemoved(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QAbstractItemView::rowsAboutToBeRemoved(a0,a1,a2) : rowsAboutToBeRemoved(a0,a1,a2));
}

void sipQTableWidget::sipProtectVirt_updateEditorData(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorData() : updateEditorData());
}

void sipQTableWidget::sipProtectVirt_updateEditorGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorGeometries() : updateEditorGeometries());
}

void sipQTableWidget::sipProtectVirt_verticalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::verticalScrollbarValueChanged(a0) : verticalScrollbarValueChanged(a0));
}

void sipQTableWidget::sipProtectVirt_horizontalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::horizontalScrollbarValueChanged(a0) : horizontalScrollbarValueChanged(a0));
}

void sipQTableWidget::sipProtectVirt_closeEditor(bool sipSelfWasArg,QWidget*a0,QAbstractItemDelegate::EndEditHint a1)
{
    (sipSelfWasArg ? QAbstractItemView::closeEditor(a0,a1) : closeEditor(a0,a1));
}

void sipQTableWidget::sipProtectVirt_commitData(bool sipSelfWasArg,QWidget*a0)
{
    (sipSelfWasArg ? QAbstractItemView::commitData(a0) : commitData(a0));
}

void sipQTableWidget::sipProtectVirt_editorDestroyed(bool sipSelfWasArg,QObject*a0)
{
    (sipSelfWasArg ? QAbstractItemView::editorDestroyed(a0) : editorDestroyed(a0));
}

QItemSelectionModel::SelectionFlags sipQTableWidget::sipProtectVirt_selectionCommand(bool sipSelfWasArg,const QModelIndex& a0,const QEvent*a1) const
{
    return (sipSelfWasArg ? QAbstractItemView::selectionCommand(a0,a1) : selectionCommand(a0,a1));
}

void sipQTableWidget::sipProtectVirt_startDrag(bool sipSelfWasArg,Qt::DropActions a0)
{
    (sipSelfWasArg ? QAbstractItemView::startDrag(a0) : startDrag(a0));
}

int sipQTableWidget::sipProtect_state() const
{
    return (int)QAbstractItemView::state();
}

void sipQTableWidget::sipProtect_setState(int a0)
{
    QAbstractItemView::setState((QAbstractItemView::State)a0);
}

void sipQTableWidget::sipProtect_scheduleDelayedItemsLayout()
{
    QAbstractItemView::scheduleDelayedItemsLayout();
}

void sipQTableWidget::sipProtect_executeDelayedItemsLayout()
{
    QAbstractItemView::executeDelayedItemsLayout();
}

void sipQTableWidget::sipProtect_scrollDirtyRegion(int a0,int a1)
{
    QAbstractItemView::scrollDirtyRegion(a0,a1);
}

void sipQTableWidget::sipProtect_setDirtyRegion(const QRegion& a0)
{
    QAbstractItemView::setDirtyRegion(a0);
}

QPoint sipQTableWidget::sipProtect_dirtyRegionOffset() const
{
    return QAbstractItemView::dirtyRegionOffset();
}

bool sipQTableWidget::sipProtectVirt_viewportEvent(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QAbstractItemView::viewportEvent(a0) : viewportEvent(a0));
}

void sipQTableWidget::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQTableWidget::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQTableWidget::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQTableWidget::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQTableWidget::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQTableWidget::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQTableWidget::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQTableWidget::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusInEvent(a0) : focusInEvent(a0));
}

void sipQTableWidget::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQTableWidget::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQTableWidget::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::resizeEvent(a0) : resizeEvent(a0));
}

int sipQTableWidget::sipProtect_dropIndicatorPosition() const
{
    return (int)QAbstractItemView::dropIndicatorPosition();
}

bool sipQTableWidget::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QAbstractItemView::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQTableWidget::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQTableWidget::sipProtect_rowMoved(int a0,int a1,int a2)
{
    QTableView::rowMoved(a0,a1,a2);
}

void sipQTableWidget::sipProtect_columnMoved(int a0,int a1,int a2)
{
    QTableView::columnMoved(a0,a1,a2);
}

void sipQTableWidget::sipProtect_rowResized(int a0,int a1,int a2)
{
    QTableView::rowResized(a0,a1,a2);
}

void sipQTableWidget::sipProtect_columnResized(int a0,int a1,int a2)
{
    QTableView::columnResized(a0,a1,a2);
}

void sipQTableWidget::sipProtect_rowCountChanged(int a0,int a1)
{
    QTableView::rowCountChanged(a0,a1);
}

void sipQTableWidget::sipProtect_columnCountChanged(int a0,int a1)
{
    QTableView::columnCountChanged(a0,a1);
}

void sipQTableWidget::sipProtectVirt_scrollContentsBy(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ? QTableView::scrollContentsBy(a0,a1) : scrollContentsBy(a0,a1));
}

QStyleOptionViewItem sipQTableWidget::sipProtectVirt_viewOptions(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTableView::viewOptions() : viewOptions());
}

void sipQTableWidget::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent*a0)
{
    (sipSelfWasArg ? QTableView::paintEvent(a0) : paintEvent(a0));
}

void sipQTableWidget::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QTableView::timerEvent(a0) : timerEvent(a0));
}

int sipQTableWidget::sipProtectVirt_horizontalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTableView::horizontalOffset() : horizontalOffset());
}

int sipQTableWidget::sipProtectVirt_verticalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTableView::verticalOffset() : verticalOffset());
}

QModelIndex sipQTableWidget::sipProtectVirt_moveCursor(bool sipSelfWasArg,int a0,Qt::KeyboardModifiers a1)
{
    return (sipSelfWasArg ? QTableView::moveCursor((QAbstractItemView::CursorAction)a0,a1) : moveCursor((QAbstractItemView::CursorAction)a0,a1));
}

void sipQTableWidget::sipProtectVirt_setSelection(bool sipSelfWasArg,const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    (sipSelfWasArg ? QTableView::setSelection(a0,a1) : setSelection(a0,a1));
}

QRegion sipQTableWidget::sipProtectVirt_visualRegionForSelection(bool sipSelfWasArg,const QItemSelection& a0) const
{
    return (sipSelfWasArg ? QTableView::visualRegionForSelection(a0) : visualRegionForSelection(a0));
}

QModelIndexList sipQTableWidget::sipProtectVirt_selectedIndexes(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTableView::selectedIndexes() : selectedIndexes());
}

void sipQTableWidget::sipProtectVirt_updateGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QTableView::updateGeometries() : updateGeometries());
}

int sipQTableWidget::sipProtectVirt_sizeHintForRow(bool sipSelfWasArg,int a0) const
{
    return (sipSelfWasArg ? QTableView::sizeHintForRow(a0) : sizeHintForRow(a0));
}

int sipQTableWidget::sipProtectVirt_sizeHintForColumn(bool sipSelfWasArg,int a0) const
{
    return (sipSelfWasArg ? QTableView::sizeHintForColumn(a0) : sizeHintForColumn(a0));
}

void sipQTableWidget::sipProtectVirt_verticalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QTableView::verticalScrollbarAction(a0) : verticalScrollbarAction(a0));
}

void sipQTableWidget::sipProtectVirt_horizontalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QTableView::horizontalScrollbarAction(a0) : horizontalScrollbarAction(a0));
}

bool sipQTableWidget::sipProtectVirt_isIndexHidden(bool sipSelfWasArg,const QModelIndex& a0) const
{
    return (sipSelfWasArg ? QTableView::isIndexHidden(a0) : isIndexHidden(a0));
}

QSize sipQTableWidget::sipProtectVirt_viewportSizeHint(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTableView::viewportSizeHint() : viewportSizeHint());
}

void sipQTableWidget::sipProtectVirt_selectionChanged(bool sipSelfWasArg,const QItemSelection& a0,const QItemSelection& a1)
{
    (sipSelfWasArg ? QTableView::selectionChanged(a0,a1) : selectionChanged(a0,a1));
}

void sipQTableWidget::sipProtectVirt_currentChanged(bool sipSelfWasArg,const QModelIndex& a0,const QModelIndex& a1)
{
    (sipSelfWasArg ? QTableView::currentChanged(a0,a1) : currentChanged(a0,a1));
}

QStringList sipQTableWidget::sipProtectVirt_mimeTypes(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTableWidget::mimeTypes() : mimeTypes());
}

QMimeData* sipQTableWidget::sipProtectVirt_mimeData(bool sipSelfWasArg,const QList<QTableWidgetItem*> a0) const
{
    return (sipSelfWasArg ? QTableWidget::mimeData(a0) : mimeData(a0));
}

bool sipQTableWidget::sipProtectVirt_dropMimeData(bool sipSelfWasArg,int a0,int a1,const QMimeData*a2,Qt::DropAction a3)
{
    return (sipSelfWasArg ? QTableWidget::dropMimeData(a0,a1,a2,a3) : dropMimeData(a0,a1,a2,a3));
}

Qt::DropActions sipQTableWidget::sipProtectVirt_supportedDropActions(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTableWidget::supportedDropActions() : supportedDropActions());
}

QList<QTableWidgetItem*> sipQTableWidget::sipProtect_items(const QMimeData*a0) const
{
    return QTableWidget::items(a0);
}

QModelIndex sipQTableWidget::sipProtect_indexFromItem(QTableWidgetItem*a0) const
{
    return QTableWidget::indexFromItem(a0);
}

QTableWidgetItem* sipQTableWidget::sipProtect_itemFromIndex(const QModelIndex& a0) const
{
    return QTableWidget::itemFromIndex(a0);
}

bool sipQTableWidget::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QTableWidget::event(a0) : event(a0));
}

void sipQTableWidget::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QTableWidget::dropEvent(a0) : dropEvent(a0));
}


PyDoc_STRVAR(doc_QTableWidget_sender, "QTableWidget.sender() -> QObject");

extern "C" {static PyObject *meth_QTableWidget_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 2681 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_sender, doc_QTableWidget_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_receivers, "QTableWidget.receivers(signal) -> int");

extern "C" {static PyObject *meth_QTableWidget_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 2740 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_receivers, doc_QTableWidget_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_childEvent, "QTableWidget.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QTableWidget_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_childEvent, doc_QTableWidget_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_customEvent, "QTableWidget.customEvent(QEvent)");

extern "C" {static PyObject *meth_QTableWidget_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_customEvent, doc_QTableWidget_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_connectNotify, "QTableWidget.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTableWidget_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_connectNotify, doc_QTableWidget_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_disconnectNotify, "QTableWidget.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTableWidget_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_disconnectNotify, doc_QTableWidget_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_senderSignalIndex, "QTableWidget.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QTableWidget_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_senderSignalIndex, doc_QTableWidget_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_isSignalConnected, "QTableWidget.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QTableWidget_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_isSignalConnected, doc_QTableWidget_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_keyReleaseEvent, "QTableWidget.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QTableWidget_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_keyReleaseEvent, doc_QTableWidget_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_enterEvent, "QTableWidget.enterEvent(QEvent)");

extern "C" {static PyObject *meth_QTableWidget_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_enterEvent, doc_QTableWidget_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_leaveEvent, "QTableWidget.leaveEvent(QEvent)");

extern "C" {static PyObject *meth_QTableWidget_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_leaveEvent, doc_QTableWidget_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_moveEvent, "QTableWidget.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QTableWidget_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_moveEvent, doc_QTableWidget_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_closeEvent, "QTableWidget.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QTableWidget_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_closeEvent, doc_QTableWidget_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_tabletEvent, "QTableWidget.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QTableWidget_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_tabletEvent, doc_QTableWidget_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_actionEvent, "QTableWidget.actionEvent(QActionEvent)");

extern "C" {static PyObject *meth_QTableWidget_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_actionEvent, doc_QTableWidget_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_showEvent, "QTableWidget.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QTableWidget_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_showEvent, doc_QTableWidget_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_hideEvent, "QTableWidget.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QTableWidget_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_hideEvent, doc_QTableWidget_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_metric, "QTableWidget.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QTableWidget_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_metric, doc_QTableWidget_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_updateMicroFocus, "QTableWidget.updateMicroFocus()");

extern "C" {static PyObject *meth_QTableWidget_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_updateMicroFocus, doc_QTableWidget_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_create, "QTableWidget.create(sip.voidptr window=0, bool initializeWindow=True, bool destroyOldWindow=True)");

extern "C" {static PyObject *meth_QTableWidget_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0def = 0;
        WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQTableWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_create, doc_QTableWidget_create);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_destroy, "QTableWidget.destroy(bool destroyWindow=True, bool destroySubWindows=True)");

extern "C" {static PyObject *meth_QTableWidget_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQTableWidget *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_destroy, doc_QTableWidget_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_focusNextChild, "QTableWidget.focusNextChild() -> bool");

extern "C" {static PyObject *meth_QTableWidget_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_focusNextChild, doc_QTableWidget_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_focusPreviousChild, "QTableWidget.focusPreviousChild() -> bool");

extern "C" {static PyObject *meth_QTableWidget_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_focusPreviousChild, doc_QTableWidget_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_nativeEvent, "QTableWidget.nativeEvent(QByteArray, sip.voidptr) -> (bool, int)");

extern "C" {static PyObject *meth_QTableWidget_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_nativeEvent, doc_QTableWidget_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_sharedPainter, "QTableWidget.sharedPainter() -> QPainter");

extern "C" {static PyObject *meth_QTableWidget_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_sharedPainter, doc_QTableWidget_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_initPainter, "QTableWidget.initPainter(QPainter)");

extern "C" {static PyObject *meth_QTableWidget_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_initPainter, doc_QTableWidget_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_changeEvent, "QTableWidget.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QTableWidget_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_changeEvent, doc_QTableWidget_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_drawFrame, "QTableWidget.drawFrame(QPainter)");

extern "C" {static PyObject *meth_QTableWidget_drawFrame(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_drawFrame(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtect_drawFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_drawFrame, doc_QTableWidget_drawFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setViewportMargins, "QTableWidget.setViewportMargins(int, int, int, int)\n"
    "QTableWidget.setViewportMargins(QMargins)");

extern "C" {static PyObject *meth_QTableWidget_setViewportMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setViewportMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biiii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->sipProtect_setViewportMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QMargins* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QMargins, &a0))
        {
            sipCpp->sipProtect_setViewportMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setViewportMargins, doc_QTableWidget_setViewportMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_wheelEvent, "QTableWidget.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QTableWidget_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_wheelEvent, doc_QTableWidget_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_contextMenuEvent, "QTableWidget.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QTableWidget_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_contextMenuEvent, doc_QTableWidget_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_eventFilter, "QTableWidget.eventFilter(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QTableWidget_eventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_eventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_eventFilter, doc_QTableWidget_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_edit, "QTableWidget.edit(QModelIndex)\n"
    "QTableWidget.edit(QModelIndex, QAbstractItemView.EditTrigger, QEvent) -> bool");

extern "C" {static PyObject *meth_QTableWidget_edit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_edit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->edit(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QModelIndex* a0;
        QAbstractItemView::EditTrigger a1;
        QEvent* a2;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9EJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_EditTrigger, &a1, sipType_QEvent, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_edit(sipSelfWasArg,*a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_edit, doc_QTableWidget_edit);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_dataChanged, "QTableWidget.dataChanged(QModelIndex, QModelIndex, list-of-int roles=[])");

extern "C" {static PyObject *meth_QTableWidget_dataChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_dataChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        const QVector<int>& a2def = QVector<int>();
        const QVector<int>* a2 = &a2def;
        int a2State = 0;
        sipQTableWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_roles,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|J1", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1, sipType_QVector_1800,&a2, &a2State))
        {
            sipCpp->sipProtectVirt_dataChanged(sipSelfWasArg,*a0,*a1,*a2);
            sipReleaseType(const_cast<QVector<int> *>(a2),sipType_QVector_1800,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_dataChanged, doc_QTableWidget_dataChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_rowsInserted, "QTableWidget.rowsInserted(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QTableWidget_rowsInserted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_rowsInserted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtectVirt_rowsInserted(sipSelfWasArg,*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_rowsInserted, doc_QTableWidget_rowsInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_rowsAboutToBeRemoved, "QTableWidget.rowsAboutToBeRemoved(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QTableWidget_rowsAboutToBeRemoved(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtectVirt_rowsAboutToBeRemoved(sipSelfWasArg,*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_rowsAboutToBeRemoved, doc_QTableWidget_rowsAboutToBeRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_updateEditorData, "QTableWidget.updateEditorData()");

extern "C" {static PyObject *meth_QTableWidget_updateEditorData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_updateEditorData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateEditorData(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_updateEditorData, doc_QTableWidget_updateEditorData);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_updateEditorGeometries, "QTableWidget.updateEditorGeometries()");

extern "C" {static PyObject *meth_QTableWidget_updateEditorGeometries(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_updateEditorGeometries(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateEditorGeometries(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_updateEditorGeometries, doc_QTableWidget_updateEditorGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_verticalScrollbarValueChanged, "QTableWidget.verticalScrollbarValueChanged(int)");

extern "C" {static PyObject *meth_QTableWidget_verticalScrollbarValueChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_verticalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_verticalScrollbarValueChanged(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_verticalScrollbarValueChanged, doc_QTableWidget_verticalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_horizontalScrollbarValueChanged, "QTableWidget.horizontalScrollbarValueChanged(int)");

extern "C" {static PyObject *meth_QTableWidget_horizontalScrollbarValueChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_horizontalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_horizontalScrollbarValueChanged(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_horizontalScrollbarValueChanged, doc_QTableWidget_horizontalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_closeEditor, "QTableWidget.closeEditor(QWidget, QAbstractItemDelegate.EndEditHint)");

extern "C" {static PyObject *meth_QTableWidget_closeEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_closeEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        QAbstractItemDelegate::EndEditHint a1;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8E", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QWidget, &a0, sipType_QAbstractItemDelegate_EndEditHint, &a1))
        {
            sipCpp->sipProtectVirt_closeEditor(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_closeEditor, doc_QTableWidget_closeEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_commitData, "QTableWidget.commitData(QWidget)");

extern "C" {static PyObject *meth_QTableWidget_commitData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_commitData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->sipProtectVirt_commitData(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_commitData, doc_QTableWidget_commitData);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_editorDestroyed, "QTableWidget.editorDestroyed(QObject)");

extern "C" {static PyObject *meth_QTableWidget_editorDestroyed(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_editorDestroyed(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QObject, &a0))
        {
            sipCpp->sipProtectVirt_editorDestroyed(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_editorDestroyed, doc_QTableWidget_editorDestroyed);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_selectionCommand, "QTableWidget.selectionCommand(QModelIndex, QEvent event=None) -> QItemSelectionModel.SelectionFlags");

extern "C" {static PyObject *meth_QTableWidget_selectionCommand(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_selectionCommand(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QEvent* a1 = 0;
        const sipQTableWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QModelIndex, &a0, sipType_QEvent, &a1))
        {
            QItemSelectionModel::SelectionFlags*sipRes;

            sipRes = new QItemSelectionModel::SelectionFlags(sipCpp->sipProtectVirt_selectionCommand(sipSelfWasArg,*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_selectionCommand, doc_QTableWidget_selectionCommand);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_startDrag, "QTableWidget.startDrag(Qt.DropActions)");

extern "C" {static PyObject *meth_QTableWidget_startDrag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_startDrag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::DropActions* a0;
        int a0State = 0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_Qt_DropActions, &a0, &a0State))
        {
            sipCpp->sipProtectVirt_startDrag(sipSelfWasArg,*a0);
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_startDrag, doc_QTableWidget_startDrag);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_state, "QTableWidget.state() -> QAbstractItemView.State");

extern "C" {static PyObject *meth_QTableWidget_state(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_state(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_state();

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_state, doc_QTableWidget_state);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setState, "QTableWidget.setState(QAbstractItemView.State)");

extern "C" {static PyObject *meth_QTableWidget_setState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QAbstractItemView_State, &a0))
        {
            sipCpp->sipProtect_setState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setState, doc_QTableWidget_setState);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_scheduleDelayedItemsLayout, "QTableWidget.scheduleDelayedItemsLayout()");

extern "C" {static PyObject *meth_QTableWidget_scheduleDelayedItemsLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_scheduleDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            sipCpp->sipProtect_scheduleDelayedItemsLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_scheduleDelayedItemsLayout, doc_QTableWidget_scheduleDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_executeDelayedItemsLayout, "QTableWidget.executeDelayedItemsLayout()");

extern "C" {static PyObject *meth_QTableWidget_executeDelayedItemsLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_executeDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            sipCpp->sipProtect_executeDelayedItemsLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_executeDelayedItemsLayout, doc_QTableWidget_executeDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_scrollDirtyRegion, "QTableWidget.scrollDirtyRegion(int, int)");

extern "C" {static PyObject *meth_QTableWidget_scrollDirtyRegion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_scrollDirtyRegion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_scrollDirtyRegion(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_scrollDirtyRegion, doc_QTableWidget_scrollDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setDirtyRegion, "QTableWidget.setDirtyRegion(QRegion)");

extern "C" {static PyObject *meth_QTableWidget_setDirtyRegion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setDirtyRegion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRegion* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->sipProtect_setDirtyRegion(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setDirtyRegion, doc_QTableWidget_setDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_dirtyRegionOffset, "QTableWidget.dirtyRegionOffset() -> QPoint");

extern "C" {static PyObject *meth_QTableWidget_dirtyRegionOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_dirtyRegionOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->sipProtect_dirtyRegionOffset());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_dirtyRegionOffset, doc_QTableWidget_dirtyRegionOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_viewportEvent, "QTableWidget.viewportEvent(QEvent) -> bool");

extern "C" {static PyObject *meth_QTableWidget_viewportEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_viewportEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_viewportEvent(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_viewportEvent, doc_QTableWidget_viewportEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_mousePressEvent, "QTableWidget.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTableWidget_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_mousePressEvent, doc_QTableWidget_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_mouseMoveEvent, "QTableWidget.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTableWidget_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_mouseMoveEvent, doc_QTableWidget_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_mouseReleaseEvent, "QTableWidget.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTableWidget_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_mouseReleaseEvent, doc_QTableWidget_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_mouseDoubleClickEvent, "QTableWidget.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTableWidget_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_mouseDoubleClickEvent, doc_QTableWidget_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_dragEnterEvent, "QTableWidget.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QTableWidget_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_dragEnterEvent, doc_QTableWidget_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_dragMoveEvent, "QTableWidget.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QTableWidget_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_dragMoveEvent, doc_QTableWidget_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_dragLeaveEvent, "QTableWidget.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QTableWidget_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_dragLeaveEvent, doc_QTableWidget_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_focusInEvent, "QTableWidget.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QTableWidget_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_focusInEvent, doc_QTableWidget_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_focusOutEvent, "QTableWidget.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QTableWidget_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_focusOutEvent, doc_QTableWidget_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_keyPressEvent, "QTableWidget.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QTableWidget_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_keyPressEvent, doc_QTableWidget_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_resizeEvent, "QTableWidget.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QTableWidget_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_resizeEvent, doc_QTableWidget_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_dropIndicatorPosition, "QTableWidget.dropIndicatorPosition() -> QAbstractItemView.DropIndicatorPosition");

extern "C" {static PyObject *meth_QTableWidget_dropIndicatorPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_dropIndicatorPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_dropIndicatorPosition();

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_DropIndicatorPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_dropIndicatorPosition, doc_QTableWidget_dropIndicatorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_focusNextPrevChild, "QTableWidget.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QTableWidget_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_focusNextPrevChild, doc_QTableWidget_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_inputMethodEvent, "QTableWidget.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QTableWidget_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_inputMethodEvent, doc_QTableWidget_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_rowMoved, "QTableWidget.rowMoved(int, int, int)");

extern "C" {static PyObject *meth_QTableWidget_rowMoved(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_rowMoved(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_rowMoved(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_rowMoved, doc_QTableWidget_rowMoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_columnMoved, "QTableWidget.columnMoved(int, int, int)");

extern "C" {static PyObject *meth_QTableWidget_columnMoved(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_columnMoved(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_columnMoved(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_columnMoved, doc_QTableWidget_columnMoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_rowResized, "QTableWidget.rowResized(int, int, int)");

extern "C" {static PyObject *meth_QTableWidget_rowResized(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_rowResized(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_rowResized(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_rowResized, doc_QTableWidget_rowResized);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_columnResized, "QTableWidget.columnResized(int, int, int)");

extern "C" {static PyObject *meth_QTableWidget_columnResized(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_columnResized(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_columnResized(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_columnResized, doc_QTableWidget_columnResized);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_rowCountChanged, "QTableWidget.rowCountChanged(int, int)");

extern "C" {static PyObject *meth_QTableWidget_rowCountChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_rowCountChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_rowCountChanged(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_rowCountChanged, doc_QTableWidget_rowCountChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_columnCountChanged, "QTableWidget.columnCountChanged(int, int)");

extern "C" {static PyObject *meth_QTableWidget_columnCountChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_columnCountChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_columnCountChanged(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_columnCountChanged, doc_QTableWidget_columnCountChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_scrollContentsBy, "QTableWidget.scrollContentsBy(int, int)");

extern "C" {static PyObject *meth_QTableWidget_scrollContentsBy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtectVirt_scrollContentsBy(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_scrollContentsBy, doc_QTableWidget_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_viewOptions, "QTableWidget.viewOptions() -> QStyleOptionViewItem");

extern "C" {static PyObject *meth_QTableWidget_viewOptions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_viewOptions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            QStyleOptionViewItem*sipRes;

            sipRes = new QStyleOptionViewItem(sipCpp->sipProtectVirt_viewOptions(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_viewOptions, doc_QTableWidget_viewOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_paintEvent, "QTableWidget.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QTableWidget_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_paintEvent, doc_QTableWidget_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_timerEvent, "QTableWidget.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QTableWidget_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_timerEvent, doc_QTableWidget_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_horizontalOffset, "QTableWidget.horizontalOffset() -> int");

extern "C" {static PyObject *meth_QTableWidget_horizontalOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_horizontalOffset(sipSelfWasArg);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_horizontalOffset, doc_QTableWidget_horizontalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_verticalOffset, "QTableWidget.verticalOffset() -> int");

extern "C" {static PyObject *meth_QTableWidget_verticalOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_verticalOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_verticalOffset(sipSelfWasArg);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_verticalOffset, doc_QTableWidget_verticalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_moveCursor, "QTableWidget.moveCursor(QAbstractItemView.CursorAction, Qt.KeyboardModifiers) -> QModelIndex");

extern "C" {static PyObject *meth_QTableWidget_moveCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_moveCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::KeyboardModifiers* a1;
        int a1State = 0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BEJ1", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->sipProtectVirt_moveCursor(sipSelfWasArg,a0,*a1));
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_moveCursor, doc_QTableWidget_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setSelection, "QTableWidget.setSelection(QRect, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QTableWidget_setSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            sipCpp->sipProtectVirt_setSelection(sipSelfWasArg,*a0,*a1);
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setSelection, doc_QTableWidget_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_visualRegionForSelection, "QTableWidget.visualRegionForSelection(QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QTableWidget_visualRegionForSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QItemSelection, &a0))
        {
            QRegion*sipRes;

            sipRes = new QRegion(sipCpp->sipProtectVirt_visualRegionForSelection(sipSelfWasArg,*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_visualRegionForSelection, doc_QTableWidget_visualRegionForSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_selectedIndexes, "QTableWidget.selectedIndexes() -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QTableWidget_selectedIndexes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            QModelIndexList*sipRes;

            sipRes = new QModelIndexList(sipCpp->sipProtectVirt_selectedIndexes(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_selectedIndexes, doc_QTableWidget_selectedIndexes);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_updateGeometries, "QTableWidget.updateGeometries()");

extern "C" {static PyObject *meth_QTableWidget_updateGeometries(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_updateGeometries(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateGeometries(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_updateGeometries, doc_QTableWidget_updateGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_sizeHintForRow, "QTableWidget.sizeHintForRow(int) -> int");

extern "C" {static PyObject *meth_QTableWidget_sizeHintForRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_sizeHintForRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_sizeHintForRow(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_sizeHintForRow, doc_QTableWidget_sizeHintForRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_sizeHintForColumn, "QTableWidget.sizeHintForColumn(int) -> int");

extern "C" {static PyObject *meth_QTableWidget_sizeHintForColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_sizeHintForColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_sizeHintForColumn(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_sizeHintForColumn, doc_QTableWidget_sizeHintForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_verticalScrollbarAction, "QTableWidget.verticalScrollbarAction(int)");

extern "C" {static PyObject *meth_QTableWidget_verticalScrollbarAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_verticalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_verticalScrollbarAction(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_verticalScrollbarAction, doc_QTableWidget_verticalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_horizontalScrollbarAction, "QTableWidget.horizontalScrollbarAction(int)");

extern "C" {static PyObject *meth_QTableWidget_horizontalScrollbarAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_horizontalScrollbarAction(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_horizontalScrollbarAction, doc_QTableWidget_horizontalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_isIndexHidden, "QTableWidget.isIndexHidden(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTableWidget_isIndexHidden(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_isIndexHidden(sipSelfWasArg,*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_isIndexHidden, doc_QTableWidget_isIndexHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_viewportSizeHint, "QTableWidget.viewportSizeHint() -> QSize");

extern "C" {static PyObject *meth_QTableWidget_viewportSizeHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_viewportSizeHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->sipProtectVirt_viewportSizeHint(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_viewportSizeHint, doc_QTableWidget_viewportSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_selectionChanged, "QTableWidget.selectionChanged(QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QTableWidget_selectionChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_selectionChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QItemSelection* a1;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            sipCpp->sipProtectVirt_selectionChanged(sipSelfWasArg,*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_selectionChanged, doc_QTableWidget_selectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_currentChanged, "QTableWidget.currentChanged(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QTableWidget_currentChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_currentChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp->sipProtectVirt_currentChanged(sipSelfWasArg,*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_currentChanged, doc_QTableWidget_currentChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setRowCount, "QTableWidget.setRowCount(int)");

extern "C" {static PyObject *meth_QTableWidget_setRowCount(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setRowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            sipCpp->setRowCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setRowCount, doc_QTableWidget_setRowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_rowCount, "QTableWidget.rowCount() -> int");

extern "C" {static PyObject *meth_QTableWidget_rowCount(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_rowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->rowCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_rowCount, doc_QTableWidget_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setColumnCount, "QTableWidget.setColumnCount(int)");

extern "C" {static PyObject *meth_QTableWidget_setColumnCount(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            sipCpp->setColumnCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setColumnCount, doc_QTableWidget_setColumnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_columnCount, "QTableWidget.columnCount() -> int");

extern "C" {static PyObject *meth_QTableWidget_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->columnCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_columnCount, doc_QTableWidget_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_row, "QTableWidget.row(QTableWidgetItem) -> int");

extern "C" {static PyObject *meth_QTableWidget_row(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_row(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem* a0;
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTableWidgetItem, &a0))
        {
            int sipRes;

            sipRes = sipCpp->row(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_row, doc_QTableWidget_row);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_column, "QTableWidget.column(QTableWidgetItem) -> int");

extern "C" {static PyObject *meth_QTableWidget_column(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_column(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem* a0;
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTableWidgetItem, &a0))
        {
            int sipRes;

            sipRes = sipCpp->column(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_column, doc_QTableWidget_column);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_item, "QTableWidget.item(int, int) -> QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidget_item(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_item(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1))
        {
            QTableWidgetItem*sipRes;

            sipRes = sipCpp->item(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTableWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_item, doc_QTableWidget_item);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setItem, "QTableWidget.setItem(int, int, QTableWidgetItem)");

extern "C" {static PyObject *meth_QTableWidget_setItem(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableWidgetItem* a2;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ:", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1, sipType_QTableWidgetItem, &a2))
        {
            sipCpp->setItem(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setItem, doc_QTableWidget_setItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_takeItem, "QTableWidget.takeItem(int, int) -> QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidget_takeItem(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_takeItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1))
        {
            QTableWidgetItem*sipRes;

            sipRes = sipCpp->takeItem(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTableWidgetItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_takeItem, doc_QTableWidget_takeItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_verticalHeaderItem, "QTableWidget.verticalHeaderItem(int) -> QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidget_verticalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_verticalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            QTableWidgetItem*sipRes;

            sipRes = sipCpp->verticalHeaderItem(a0);

            return sipConvertFromType(sipRes,sipType_QTableWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_verticalHeaderItem, doc_QTableWidget_verticalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setVerticalHeaderItem, "QTableWidget.setVerticalHeaderItem(int, QTableWidgetItem)");

extern "C" {static PyObject *meth_QTableWidget_setVerticalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setVerticalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableWidgetItem* a1;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, sipType_QTableWidgetItem, &a1))
        {
            sipCpp->setVerticalHeaderItem(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setVerticalHeaderItem, doc_QTableWidget_setVerticalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_takeVerticalHeaderItem, "QTableWidget.takeVerticalHeaderItem(int) -> QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidget_takeVerticalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_takeVerticalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            QTableWidgetItem*sipRes;

            sipRes = sipCpp->takeVerticalHeaderItem(a0);

            return sipConvertFromType(sipRes,sipType_QTableWidgetItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_takeVerticalHeaderItem, doc_QTableWidget_takeVerticalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_horizontalHeaderItem, "QTableWidget.horizontalHeaderItem(int) -> QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidget_horizontalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_horizontalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            QTableWidgetItem*sipRes;

            sipRes = sipCpp->horizontalHeaderItem(a0);

            return sipConvertFromType(sipRes,sipType_QTableWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_horizontalHeaderItem, doc_QTableWidget_horizontalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setHorizontalHeaderItem, "QTableWidget.setHorizontalHeaderItem(int, QTableWidgetItem)");

extern "C" {static PyObject *meth_QTableWidget_setHorizontalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setHorizontalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableWidgetItem* a1;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ:", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, sipType_QTableWidgetItem, &a1))
        {
            sipCpp->setHorizontalHeaderItem(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setHorizontalHeaderItem, doc_QTableWidget_setHorizontalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_takeHorizontalHeaderItem, "QTableWidget.takeHorizontalHeaderItem(int) -> QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidget_takeHorizontalHeaderItem(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_takeHorizontalHeaderItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            QTableWidgetItem*sipRes;

            sipRes = sipCpp->takeHorizontalHeaderItem(a0);

            return sipConvertFromType(sipRes,sipType_QTableWidgetItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_takeHorizontalHeaderItem, doc_QTableWidget_takeHorizontalHeaderItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setVerticalHeaderLabels, "QTableWidget.setVerticalHeaderLabels(list-of-str)");

extern "C" {static PyObject *meth_QTableWidget_setVerticalHeaderLabels(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setVerticalHeaderLabels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setVerticalHeaderLabels(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setVerticalHeaderLabels, doc_QTableWidget_setVerticalHeaderLabels);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setHorizontalHeaderLabels, "QTableWidget.setHorizontalHeaderLabels(list-of-str)");

extern "C" {static PyObject *meth_QTableWidget_setHorizontalHeaderLabels(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setHorizontalHeaderLabels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setHorizontalHeaderLabels(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setHorizontalHeaderLabels, doc_QTableWidget_setHorizontalHeaderLabels);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_currentRow, "QTableWidget.currentRow() -> int");

extern "C" {static PyObject *meth_QTableWidget_currentRow(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_currentRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentRow();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_currentRow, doc_QTableWidget_currentRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_currentColumn, "QTableWidget.currentColumn() -> int");

extern "C" {static PyObject *meth_QTableWidget_currentColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_currentColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->currentColumn();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_currentColumn, doc_QTableWidget_currentColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_currentItem, "QTableWidget.currentItem() -> QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidget_currentItem(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_currentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            QTableWidgetItem*sipRes;

            sipRes = sipCpp->currentItem();

            return sipConvertFromType(sipRes,sipType_QTableWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_currentItem, doc_QTableWidget_currentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setCurrentItem, "QTableWidget.setCurrentItem(QTableWidgetItem)\n"
    "QTableWidget.setCurrentItem(QTableWidgetItem, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QTableWidget_setCurrentItem(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setCurrentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem* a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTableWidgetItem, &a0))
        {
            sipCpp->setCurrentItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QTableWidgetItem* a0;
        QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTableWidgetItem, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            sipCpp->setCurrentItem(a0,*a1);
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setCurrentItem, doc_QTableWidget_setCurrentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setCurrentCell, "QTableWidget.setCurrentCell(int, int)\n"
    "QTableWidget.setCurrentCell(int, int, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QTableWidget_setCurrentCell(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setCurrentCell(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1))
        {
            sipCpp->setCurrentCell(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        QItemSelectionModel::SelectionFlags* a2;
        int a2State = 0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1, sipType_QItemSelectionModel_SelectionFlags, &a2, &a2State))
        {
            sipCpp->setCurrentCell(a0,a1,*a2);
            sipReleaseType(a2,sipType_QItemSelectionModel_SelectionFlags,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setCurrentCell, doc_QTableWidget_setCurrentCell);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_sortItems, "QTableWidget.sortItems(int, Qt.SortOrder order=Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QTableWidget_sortItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_sortItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::SortOrder a1 = Qt::AscendingOrder;
        QTableWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            sipCpp->sortItems(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_sortItems, doc_QTableWidget_sortItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setSortingEnabled, "QTableWidget.setSortingEnabled(bool)");

extern "C" {static PyObject *meth_QTableWidget_setSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            sipCpp->setSortingEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setSortingEnabled, doc_QTableWidget_setSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_isSortingEnabled, "QTableWidget.isSortingEnabled() -> bool");

extern "C" {static PyObject *meth_QTableWidget_isSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_isSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSortingEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_isSortingEnabled, doc_QTableWidget_isSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_editItem, "QTableWidget.editItem(QTableWidgetItem)");

extern "C" {static PyObject *meth_QTableWidget_editItem(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_editItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem* a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTableWidgetItem, &a0))
        {
            sipCpp->editItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_editItem, doc_QTableWidget_editItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_openPersistentEditor, "QTableWidget.openPersistentEditor(QTableWidgetItem)");

extern "C" {static PyObject *meth_QTableWidget_openPersistentEditor(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_openPersistentEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem* a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTableWidgetItem, &a0))
        {
            sipCpp->openPersistentEditor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_openPersistentEditor, doc_QTableWidget_openPersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_closePersistentEditor, "QTableWidget.closePersistentEditor(QTableWidgetItem)");

extern "C" {static PyObject *meth_QTableWidget_closePersistentEditor(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_closePersistentEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem* a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTableWidgetItem, &a0))
        {
            sipCpp->closePersistentEditor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_closePersistentEditor, doc_QTableWidget_closePersistentEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_cellWidget, "QTableWidget.cellWidget(int, int) -> QWidget");

extern "C" {static PyObject *meth_QTableWidget_cellWidget(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_cellWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1))
        {
            QWidget*sipRes;

            sipRes = sipCpp->cellWidget(a0,a1);

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_cellWidget, doc_QTableWidget_cellWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setCellWidget, "QTableWidget.setCellWidget(int, int, QWidget)");

extern "C" {static PyObject *meth_QTableWidget_setCellWidget(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setCellWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QWidget* a2;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ:", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1, sipType_QWidget, &a2))
        {
#line 151 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtablewidget.sip"
        // We have to break the association with any existing widget.
        QWidget *w = sipCpp->cellWidget(a0, a1);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setCellWidget(a0, a1, a2);
        Py_END_ALLOW_THREADS
#line 6239 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setCellWidget, doc_QTableWidget_setCellWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_removeCellWidget, "QTableWidget.removeCellWidget(int, int)");

extern "C" {static PyObject *meth_QTableWidget_removeCellWidget(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_removeCellWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1))
        {
#line 169 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtablewidget.sip"
        // We have to break the association with any existing widget.
        QWidget *w = sipCpp->cellWidget(a0, a1);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->removeCellWidget(a0, a1);
        Py_END_ALLOW_THREADS
#line 6282 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidget.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_removeCellWidget, doc_QTableWidget_removeCellWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setRangeSelected, "QTableWidget.setRangeSelected(QTableWidgetSelectionRange, bool)");

extern "C" {static PyObject *meth_QTableWidget_setRangeSelected(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setRangeSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetSelectionRange* a0;
        bool a1;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9b", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTableWidgetSelectionRange, &a0, &a1))
        {
            sipCpp->setRangeSelected(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setRangeSelected, doc_QTableWidget_setRangeSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_selectedRanges, "QTableWidget.selectedRanges() -> list-of-QTableWidgetSelectionRange");

extern "C" {static PyObject *meth_QTableWidget_selectedRanges(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_selectedRanges(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            QList<QTableWidgetSelectionRange>*sipRes;

            sipRes = new QList<QTableWidgetSelectionRange>(sipCpp->selectedRanges());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTableWidgetSelectionRange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_selectedRanges, doc_QTableWidget_selectedRanges);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_selectedItems, "QTableWidget.selectedItems() -> list-of-QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidget_selectedItems(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_selectedItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            QList<QTableWidgetItem*>*sipRes;

            sipRes = new QList<QTableWidgetItem*>(sipCpp->selectedItems());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTableWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_selectedItems, doc_QTableWidget_selectedItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_findItems, "QTableWidget.findItems(str, Qt.MatchFlags) -> list-of-QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidget_findItems(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_findItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        Qt::MatchFlags* a1;
        int a1State = 0;
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QString,&a0, &a0State, sipType_Qt_MatchFlags, &a1, &a1State))
        {
            QList<QTableWidgetItem*>*sipRes;

            sipRes = new QList<QTableWidgetItem*>(sipCpp->findItems(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_Qt_MatchFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTableWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_findItems, doc_QTableWidget_findItems);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_visualRow, "QTableWidget.visualRow(int) -> int");

extern "C" {static PyObject *meth_QTableWidget_visualRow(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_visualRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->visualRow(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_visualRow, doc_QTableWidget_visualRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_visualColumn, "QTableWidget.visualColumn(int) -> int");

extern "C" {static PyObject *meth_QTableWidget_visualColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_visualColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->visualColumn(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_visualColumn, doc_QTableWidget_visualColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_itemAt, "QTableWidget.itemAt(QPoint) -> QTableWidgetItem\n"
    "QTableWidget.itemAt(int, int) -> QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidget_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QPoint, &a0))
        {
            QTableWidgetItem*sipRes;

            sipRes = sipCpp->itemAt(*a0);

            return sipConvertFromType(sipRes,sipType_QTableWidgetItem,NULL);
        }
    }

    {
        int a0;
        int a1;
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1))
        {
            QTableWidgetItem*sipRes;

            sipRes = sipCpp->itemAt(a0,a1);

            return sipConvertFromType(sipRes,sipType_QTableWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_itemAt, doc_QTableWidget_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_visualItemRect, "QTableWidget.visualItemRect(QTableWidgetItem) -> QRect");

extern "C" {static PyObject *meth_QTableWidget_visualItemRect(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_visualItemRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem* a0;
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTableWidgetItem, &a0))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->visualItemRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_visualItemRect, doc_QTableWidget_visualItemRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_itemPrototype, "QTableWidget.itemPrototype() -> QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidget_itemPrototype(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_itemPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            const QTableWidgetItem*sipRes;

            sipRes = sipCpp->itemPrototype();

            return sipConvertFromType(const_cast<QTableWidgetItem *>(sipRes),sipType_QTableWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_itemPrototype, doc_QTableWidget_itemPrototype);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_setItemPrototype, "QTableWidget.setItemPrototype(QTableWidgetItem)");

extern "C" {static PyObject *meth_QTableWidget_setItemPrototype(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setItemPrototype(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem* a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTableWidgetItem, &a0))
        {
            sipCpp->setItemPrototype(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_setItemPrototype, doc_QTableWidget_setItemPrototype);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_scrollToItem, "QTableWidget.scrollToItem(QTableWidgetItem, QAbstractItemView.ScrollHint hint=QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QTableWidget_scrollToItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_scrollToItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem* a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QTableWidget *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|E", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTableWidgetItem, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            sipCpp->scrollToItem(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_scrollToItem, doc_QTableWidget_scrollToItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_insertRow, "QTableWidget.insertRow(int)");

extern "C" {static PyObject *meth_QTableWidget_insertRow(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_insertRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            sipCpp->insertRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_insertRow, doc_QTableWidget_insertRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_insertColumn, "QTableWidget.insertColumn(int)");

extern "C" {static PyObject *meth_QTableWidget_insertColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_insertColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            sipCpp->insertColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_insertColumn, doc_QTableWidget_insertColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_removeRow, "QTableWidget.removeRow(int)");

extern "C" {static PyObject *meth_QTableWidget_removeRow(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_removeRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            sipCpp->removeRow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_removeRow, doc_QTableWidget_removeRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_removeColumn, "QTableWidget.removeColumn(int)");

extern "C" {static PyObject *meth_QTableWidget_removeColumn(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_removeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidget, &sipCpp, &a0))
        {
            sipCpp->removeColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_removeColumn, doc_QTableWidget_removeColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_clear, "QTableWidget.clear()");

extern "C" {static PyObject *meth_QTableWidget_clear(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_clear, doc_QTableWidget_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_clearContents, "QTableWidget.clearContents()");

extern "C" {static PyObject *meth_QTableWidget_clearContents(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_clearContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidget *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            sipCpp->clearContents();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_clearContents, doc_QTableWidget_clearContents);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_mimeTypes, "QTableWidget.mimeTypes() -> list-of-str");

extern "C" {static PyObject *meth_QTableWidget_mimeTypes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_mimeTypes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->sipProtectVirt_mimeTypes(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_mimeTypes, doc_QTableWidget_mimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_mimeData, "QTableWidget.mimeData(list-of-QTableWidgetItem) -> QMimeData");

extern "C" {static PyObject *meth_QTableWidget_mimeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_mimeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QList<QTableWidgetItem*>* a0;
        int a0State = 0;
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QList_0101QTableWidgetItem,&a0, &a0State))
        {
            QMimeData*sipRes;

            sipRes = sipCpp->sipProtectVirt_mimeData(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<QList<QTableWidgetItem*> *>(a0),sipType_QList_0101QTableWidgetItem,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_mimeData, doc_QTableWidget_mimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_dropMimeData, "QTableWidget.dropMimeData(int, int, QMimeData, Qt.DropAction) -> bool");

extern "C" {static PyObject *meth_QTableWidget_dropMimeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_dropMimeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QMimeData* a2;
        Qt::DropAction a3;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiiJ8E", &sipSelf, sipType_QTableWidget, &sipCpp, &a0, &a1, sipType_QMimeData, &a2, sipType_Qt_DropAction, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_dropMimeData(sipSelfWasArg,a0,a1,a2,a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_dropMimeData, doc_QTableWidget_dropMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_supportedDropActions, "QTableWidget.supportedDropActions() -> Qt.DropActions");

extern "C" {static PyObject *meth_QTableWidget_supportedDropActions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTableWidget, &sipCpp))
        {
            Qt::DropActions*sipRes;

            sipRes = new Qt::DropActions(sipCpp->sipProtectVirt_supportedDropActions(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_supportedDropActions, doc_QTableWidget_supportedDropActions);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_items, "QTableWidget.items(QMimeData) -> list-of-QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidget_items(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_items(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMimeData* a0;
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QMimeData, &a0))
        {
            QList<QTableWidgetItem*>*sipRes;

            sipRes = new QList<QTableWidgetItem*>(sipCpp->sipProtect_items(a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QTableWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_items, doc_QTableWidget_items);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_indexFromItem, "QTableWidget.indexFromItem(QTableWidgetItem) -> QModelIndex");

extern "C" {static PyObject *meth_QTableWidget_indexFromItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_indexFromItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTableWidgetItem* a0;
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QTableWidgetItem, &a0))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->sipProtect_indexFromItem(a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_indexFromItem, doc_QTableWidget_indexFromItem);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_itemFromIndex, "QTableWidget.itemFromIndex(QModelIndex) -> QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidget_itemFromIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_itemFromIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QModelIndex, &a0))
        {
            QTableWidgetItem*sipRes;

            sipRes = sipCpp->sipProtect_itemFromIndex(*a0);

            return sipConvertFromType(sipRes,sipType_QTableWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_itemFromIndex, doc_QTableWidget_itemFromIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_event, "QTableWidget.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QTableWidget_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_event, doc_QTableWidget_event);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidget_dropEvent, "QTableWidget.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QTableWidget_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQTableWidget *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTableWidget, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidget, sipName_dropEvent, doc_QTableWidget_dropEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTableWidget_setModel(PyObject *, PyObject *);}
static PyObject *meth_QTableWidget_setModel(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_QTableWidget, sipName_setModel, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTableWidget(void *, const sipTypeDef *);}
static void *cast_QTableWidget(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTableWidget)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTableView)->ctd_cast((QTableView *)(QTableWidget *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTableWidget(void *, int);}
static void release_QTableWidget(void *sipCppV,int)
{
    QTableWidget *sipCpp = reinterpret_cast<QTableWidget *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTableWidget(sipSimpleWrapper *);}
static void dealloc_QTableWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTableWidget *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTableWidget(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTableWidget(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTableWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTableWidget *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQTableWidget(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        QWidget* a2 = 0;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ii|JH", &a0, &a1, sipType_QWidget, &a2, sipOwner))
        {
            sipCpp = new sipQTableWidget(a0,a1,a2);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTableWidget[] = {{421, 255, 1}};


static PyMethodDef methods_QTableWidget[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QTableWidget_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_cellWidget), meth_QTableWidget_cellWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_cellWidget)},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QTableWidget_changeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QTableWidget_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QTableWidget_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_clear)},
    {SIP_MLNAME_CAST(sipName_clearContents), meth_QTableWidget_clearContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_clearContents)},
    {SIP_MLNAME_CAST(sipName_closeEditor), (PyCFunction)meth_QTableWidget_closeEditor, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QTableWidget_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closePersistentEditor), meth_QTableWidget_closePersistentEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_closePersistentEditor)},
    {SIP_MLNAME_CAST(sipName_column), meth_QTableWidget_column, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_column)},
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QTableWidget_columnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_columnCount)},
    {SIP_MLNAME_CAST(sipName_columnCountChanged), (PyCFunction)meth_QTableWidget_columnCountChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_columnMoved), (PyCFunction)meth_QTableWidget_columnMoved, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_columnResized), (PyCFunction)meth_QTableWidget_columnResized, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_commitData), (PyCFunction)meth_QTableWidget_commitData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QTableWidget_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QTableWidget_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QTableWidget_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_currentChanged), (PyCFunction)meth_QTableWidget_currentChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_currentColumn), meth_QTableWidget_currentColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_currentColumn)},
    {SIP_MLNAME_CAST(sipName_currentItem), meth_QTableWidget_currentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_currentItem)},
    {SIP_MLNAME_CAST(sipName_currentRow), meth_QTableWidget_currentRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_currentRow)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QTableWidget_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dataChanged), (PyCFunction)meth_QTableWidget_dataChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QTableWidget_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dirtyRegionOffset), (PyCFunction)meth_QTableWidget_dirtyRegionOffset, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QTableWidget_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QTableWidget_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QTableWidget_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QTableWidget_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawFrame), (PyCFunction)meth_QTableWidget_drawFrame, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QTableWidget_dropEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTableWidget_dropEvent)},
    {SIP_MLNAME_CAST(sipName_dropIndicatorPosition), (PyCFunction)meth_QTableWidget_dropIndicatorPosition, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropMimeData), (PyCFunction)meth_QTableWidget_dropMimeData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTableWidget_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_edit), (PyCFunction)meth_QTableWidget_edit, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_editItem), meth_QTableWidget_editItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_editItem)},
    {SIP_MLNAME_CAST(sipName_editorDestroyed), (PyCFunction)meth_QTableWidget_editorDestroyed, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QTableWidget_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QTableWidget_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTableWidget_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), (PyCFunction)meth_QTableWidget_eventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_executeDelayedItemsLayout), (PyCFunction)meth_QTableWidget_executeDelayedItemsLayout, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_findItems), meth_QTableWidget_findItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_findItems)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QTableWidget_focusInEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QTableWidget_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QTableWidget_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QTableWidget_focusOutEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QTableWidget_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QTableWidget_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalHeaderItem), meth_QTableWidget_horizontalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_horizontalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), (PyCFunction)meth_QTableWidget_horizontalOffset, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), (PyCFunction)meth_QTableWidget_horizontalScrollbarAction, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarValueChanged), (PyCFunction)meth_QTableWidget_horizontalScrollbarValueChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_indexFromItem), (PyCFunction)meth_QTableWidget_indexFromItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTableWidget_indexFromItem)},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QTableWidget_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QTableWidget_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_insertColumn), meth_QTableWidget_insertColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_insertColumn)},
    {SIP_MLNAME_CAST(sipName_insertRow), meth_QTableWidget_insertRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_insertRow)},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), (PyCFunction)meth_QTableWidget_isIndexHidden, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QTableWidget_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSortingEnabled), meth_QTableWidget_isSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_isSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_item), meth_QTableWidget_item, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_item)},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QTableWidget_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_itemAt)},
    {SIP_MLNAME_CAST(sipName_itemFromIndex), (PyCFunction)meth_QTableWidget_itemFromIndex, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTableWidget_itemFromIndex)},
    {SIP_MLNAME_CAST(sipName_itemPrototype), meth_QTableWidget_itemPrototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_itemPrototype)},
    {SIP_MLNAME_CAST(sipName_items), (PyCFunction)meth_QTableWidget_items, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTableWidget_items)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QTableWidget_keyPressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QTableWidget_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QTableWidget_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QTableWidget_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mimeData), (PyCFunction)meth_QTableWidget_mimeData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTableWidget_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), (PyCFunction)meth_QTableWidget_mimeTypes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTableWidget_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QTableWidget_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QTableWidget_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QTableWidget_mousePressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QTableWidget_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_moveCursor), (PyCFunction)meth_QTableWidget_moveCursor, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QTableWidget_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QTableWidget_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_openPersistentEditor), meth_QTableWidget_openPersistentEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_openPersistentEditor)},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QTableWidget_paintEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QTableWidget_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_removeCellWidget), meth_QTableWidget_removeCellWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_removeCellWidget)},
    {SIP_MLNAME_CAST(sipName_removeColumn), meth_QTableWidget_removeColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_removeColumn)},
    {SIP_MLNAME_CAST(sipName_removeRow), meth_QTableWidget_removeRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_removeRow)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QTableWidget_resizeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_row), meth_QTableWidget_row, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_row)},
    {SIP_MLNAME_CAST(sipName_rowCount), meth_QTableWidget_rowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_rowCount)},
    {SIP_MLNAME_CAST(sipName_rowCountChanged), (PyCFunction)meth_QTableWidget_rowCountChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_rowMoved), (PyCFunction)meth_QTableWidget_rowMoved, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_rowResized), (PyCFunction)meth_QTableWidget_rowResized, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), (PyCFunction)meth_QTableWidget_rowsAboutToBeRemoved, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_rowsInserted), (PyCFunction)meth_QTableWidget_rowsInserted, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scheduleDelayedItemsLayout), (PyCFunction)meth_QTableWidget_scheduleDelayedItemsLayout, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), (PyCFunction)meth_QTableWidget_scrollContentsBy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollDirtyRegion), (PyCFunction)meth_QTableWidget_scrollDirtyRegion, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollToItem), (PyCFunction)meth_QTableWidget_scrollToItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTableWidget_scrollToItem)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), (PyCFunction)meth_QTableWidget_selectedIndexes, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedItems), meth_QTableWidget_selectedItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_selectedItems)},
    {SIP_MLNAME_CAST(sipName_selectedRanges), meth_QTableWidget_selectedRanges, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_selectedRanges)},
    {SIP_MLNAME_CAST(sipName_selectionChanged), (PyCFunction)meth_QTableWidget_selectionChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_selectionCommand), (PyCFunction)meth_QTableWidget_selectionCommand, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QTableWidget_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QTableWidget_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setCellWidget), meth_QTableWidget_setCellWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_setCellWidget)},
    {SIP_MLNAME_CAST(sipName_setColumnCount), meth_QTableWidget_setColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_setColumnCount)},
    {SIP_MLNAME_CAST(sipName_setCurrentCell), meth_QTableWidget_setCurrentCell, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_setCurrentCell)},
    {SIP_MLNAME_CAST(sipName_setCurrentItem), meth_QTableWidget_setCurrentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_setCurrentItem)},
    {SIP_MLNAME_CAST(sipName_setDirtyRegion), (PyCFunction)meth_QTableWidget_setDirtyRegion, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setHorizontalHeaderItem), meth_QTableWidget_setHorizontalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_setHorizontalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_setHorizontalHeaderLabels), meth_QTableWidget_setHorizontalHeaderLabels, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_setHorizontalHeaderLabels)},
    {SIP_MLNAME_CAST(sipName_setItem), meth_QTableWidget_setItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_setItem)},
    {SIP_MLNAME_CAST(sipName_setItemPrototype), meth_QTableWidget_setItemPrototype, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_setItemPrototype)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QTableWidget_setModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRangeSelected), meth_QTableWidget_setRangeSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_setRangeSelected)},
    {SIP_MLNAME_CAST(sipName_setRowCount), meth_QTableWidget_setRowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_setRowCount)},
    {SIP_MLNAME_CAST(sipName_setSelection), (PyCFunction)meth_QTableWidget_setSelection, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setSortingEnabled), meth_QTableWidget_setSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_setSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_setState), (PyCFunction)meth_QTableWidget_setState, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setVerticalHeaderItem), meth_QTableWidget_setVerticalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_setVerticalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_setVerticalHeaderLabels), meth_QTableWidget_setVerticalHeaderLabels, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_setVerticalHeaderLabels)},
    {SIP_MLNAME_CAST(sipName_setViewportMargins), (PyCFunction)meth_QTableWidget_setViewportMargins, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QTableWidget_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QTableWidget_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHintForColumn), (PyCFunction)meth_QTableWidget_sizeHintForColumn, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHintForRow), (PyCFunction)meth_QTableWidget_sizeHintForRow, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sortItems), (PyCFunction)meth_QTableWidget_sortItems, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTableWidget_sortItems)},
    {SIP_MLNAME_CAST(sipName_startDrag), (PyCFunction)meth_QTableWidget_startDrag, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_state), (PyCFunction)meth_QTableWidget_state, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), (PyCFunction)meth_QTableWidget_supportedDropActions, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTableWidget_supportedDropActions)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QTableWidget_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_takeHorizontalHeaderItem), meth_QTableWidget_takeHorizontalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_takeHorizontalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_takeItem), meth_QTableWidget_takeItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_takeItem)},
    {SIP_MLNAME_CAST(sipName_takeVerticalHeaderItem), meth_QTableWidget_takeVerticalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_takeVerticalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QTableWidget_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorData), (PyCFunction)meth_QTableWidget_updateEditorData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometries), (PyCFunction)meth_QTableWidget_updateEditorGeometries, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateGeometries), (PyCFunction)meth_QTableWidget_updateGeometries, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QTableWidget_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalHeaderItem), meth_QTableWidget_verticalHeaderItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_verticalHeaderItem)},
    {SIP_MLNAME_CAST(sipName_verticalOffset), (PyCFunction)meth_QTableWidget_verticalOffset, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarAction), (PyCFunction)meth_QTableWidget_verticalScrollbarAction, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarValueChanged), (PyCFunction)meth_QTableWidget_verticalScrollbarValueChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewOptions), (PyCFunction)meth_QTableWidget_viewOptions, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportEvent), (PyCFunction)meth_QTableWidget_viewportEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportSizeHint), (PyCFunction)meth_QTableWidget_viewportSizeHint, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_visualColumn), meth_QTableWidget_visualColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_visualColumn)},
    {SIP_MLNAME_CAST(sipName_visualItemRect), meth_QTableWidget_visualItemRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_visualItemRect)},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), (PyCFunction)meth_QTableWidget_visualRegionForSelection, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_visualRow), meth_QTableWidget_visualRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidget_visualRow)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QTableWidget_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTableWidget[] = {
    {"currentCellChanged(int,int,int,int)", "\1QTableWidget.currentCellChanged[int, int, int, int]", 0, 0},
    {"cellChanged(int,int)", "\1QTableWidget.cellChanged[int, int]", 0, 0},
    {"cellEntered(int,int)", "\1QTableWidget.cellEntered[int, int]", 0, 0},
    {"cellActivated(int,int)", "\1QTableWidget.cellActivated[int, int]", 0, 0},
    {"cellDoubleClicked(int,int)", "\1QTableWidget.cellDoubleClicked[int, int]", 0, 0},
    {"cellClicked(int,int)", "\1QTableWidget.cellClicked[int, int]", 0, 0},
    {"cellPressed(int,int)", "\1QTableWidget.cellPressed[int, int]", 0, 0},
    {"itemSelectionChanged()", "\1QTableWidget.itemSelectionChanged", 0, 0},
    {"currentItemChanged(QTableWidgetItem*,QTableWidgetItem*)", "\1QTableWidget.currentItemChanged[QTableWidgetItem, QTableWidgetItem]", 0, 0},
    {"itemChanged(QTableWidgetItem*)", "\1QTableWidget.itemChanged[QTableWidgetItem]", 0, 0},
    {"itemEntered(QTableWidgetItem*)", "\1QTableWidget.itemEntered[QTableWidgetItem]", 0, 0},
    {"itemActivated(QTableWidgetItem*)", "\1QTableWidget.itemActivated[QTableWidgetItem]", 0, 0},
    {"itemDoubleClicked(QTableWidgetItem*)", "\1QTableWidget.itemDoubleClicked[QTableWidgetItem]", 0, 0},
    {"itemClicked(QTableWidgetItem*)", "\1QTableWidget.itemClicked[QTableWidgetItem]", 0, 0},
    {"itemPressed(QTableWidgetItem*)", "\1QTableWidget.itemPressed[QTableWidgetItem]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QTableWidget, "\1QTableWidget(QWidget parent=None)\n"
    "QTableWidget(int, int, QWidget parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QTableWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTableWidget,
        {0}
    },
    {
        sipNameNr_QTableWidget,
        {0, 0, 1},
        150, methods_QTableWidget,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTableWidget,
    -1,
    -1,
    supers_QTableWidget,
    0,
    init_type_QTableWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTableWidget,
    0,
    0,
    0,
    release_QTableWidget,
    cast_QTableWidget,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTableWidget::staticMetaObject,
    0,
    signals_QTableWidget,
    0
};
