/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:12 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qfilesystemmodel.sip"
#include <qfilesystemmodel.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 26 "sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtCore/qfiledevice.sip"
#include <qfiledevice.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 299 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtCore/qdir.sip"
#include <qdir.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qfileiconprovider.sip"
#include <qfileiconprovider.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtCore/qdir.sip"
#include <qdir.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 266 "sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 70 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 105 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 321 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 144 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"


class sipQFileSystemModel : public QFileSystemModel
{
public:
    sipQFileSystemModel(QObject*);
    virtual ~sipQFileSystemModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtect_encodeData(const QModelIndexList&,QDataStream&) const;
    bool sipProtect_decodeData(int,int,const QModelIndex&,QDataStream&);
    void sipProtect_beginInsertRows(const QModelIndex&,int,int);
    void sipProtect_endInsertRows();
    void sipProtect_beginRemoveRows(const QModelIndex&,int,int);
    void sipProtect_endRemoveRows();
    void sipProtect_beginInsertColumns(const QModelIndex&,int,int);
    void sipProtect_endInsertColumns();
    void sipProtect_beginRemoveColumns(const QModelIndex&,int,int);
    void sipProtect_endRemoveColumns();
    QModelIndexList sipProtect_persistentIndexList() const;
    void sipProtect_changePersistentIndex(const QModelIndex&,const QModelIndex&);
    void sipProtect_changePersistentIndexList(const QModelIndexList&,const QModelIndexList&);
    QModelIndex sipProtect_createIndex(int,int,void*) const;
    bool sipProtect_beginMoveRows(const QModelIndex&,int,int,const QModelIndex&,int);
    void sipProtect_endMoveRows();
    bool sipProtect_beginMoveColumns(const QModelIndex&,int,int,const QModelIndex&,int);
    void sipProtect_endMoveColumns();
    void sipProtect_beginResetModel();
    void sipProtect_endResetModel();
    void sipProtect_resetInternalData();
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool moveColumns(const QModelIndex&,int,int,const QModelIndex&,int);
    bool moveRows(const QModelIndex&,int,int,const QModelIndex&,int);
    bool canDropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&) const;
    QHash<int,QByteArray> roleNames() const;
    Qt::DropActions supportedDragActions() const;
    void revert();
    bool submit();
    QSize span(const QModelIndex&) const;
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    QModelIndex buddy(const QModelIndex&) const;
    bool removeColumns(int,int,const QModelIndex&);
    bool removeRows(int,int,const QModelIndex&);
    bool insertColumns(int,int,const QModelIndex&);
    bool insertRows(int,int,const QModelIndex&);
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    QModelIndex sibling(int,int,const QModelIndex&) const;
    void timerEvent(QTimerEvent*);
    bool event(QEvent*);
    Qt::DropActions supportedDropActions() const;
    bool dropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);
    QMimeData* mimeData(const QModelIndexList&) const;
    QStringList mimeTypes() const;
    void sort(int,Qt::SortOrder);
    Qt::ItemFlags flags(const QModelIndex&) const;
    QVariant headerData(int,Qt::Orientation,int) const;
    bool setData(const QModelIndex&,const QVariant&,int);
    QVariant data(const QModelIndex&,int) const;
    int columnCount(const QModelIndex&) const;
    int rowCount(const QModelIndex&) const;
    void fetchMore(const QModelIndex&);
    bool canFetchMore(const QModelIndex&) const;
    bool hasChildren(const QModelIndex&) const;
    QModelIndex parent(const QModelIndex&) const;
    QModelIndex index(int,int,const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFileSystemModel(const sipQFileSystemModel &);
    sipQFileSystemModel &operator = (const sipQFileSystemModel &);

    char sipPyMethods[41];
};

sipQFileSystemModel::sipQFileSystemModel(QObject*a0): QFileSystemModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFileSystemModel::~sipQFileSystemModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQFileSystemModel::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QFileSystemModel);
}

int sipQFileSystemModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QFileSystemModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QFileSystemModel,_c,_id,_a);

    return _id;
}

void *sipQFileSystemModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QFileSystemModel, _clname, &sipCpp) ? sipCpp : QFileSystemModel::qt_metacast(_clname));
}

void sipQFileSystemModel::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QFileSystemModel::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileSystemModel::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QFileSystemModel::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileSystemModel::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QFileSystemModel::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileSystemModel::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QFileSystemModel::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQFileSystemModel::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QFileSystemModel::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQFileSystemModel::moveColumns(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_moveColumns);

    if (!sipMeth)
        return QFileSystemModel::moveColumns(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_59)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int,const QModelIndex&,int);

    return ((sipVH_QtCore_59)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[59]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQFileSystemModel::moveRows(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_moveRows);

    if (!sipMeth)
        return QFileSystemModel::moveRows(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_59)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int,const QModelIndex&,int);

    return ((sipVH_QtCore_59)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[59]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQFileSystemModel::canDropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_canDropMimeData);

    if (!sipMeth)
        return QFileSystemModel::canDropMimeData(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);

    return ((sipVH_QtCore_33)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[33]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QHash<int,QByteArray> sipQFileSystemModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_roleNames);

    if (!sipMeth)
        return QFileSystemModel::roleNames();

    typedef QHash<int,QByteArray> (*sipVH_QtCore_60)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_60)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[60]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

Qt::DropActions sipQFileSystemModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_supportedDragActions);

    if (!sipMeth)
        return QFileSystemModel::supportedDragActions();

    typedef Qt::DropActions (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[18]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQFileSystemModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
        QFileSystemModel::revert();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQFileSystemModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return QFileSystemModel::submit();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQFileSystemModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return QFileSystemModel::span(a0);

    typedef QSize (*sipVH_QtCore_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_29)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QModelIndexList sipQFileSystemModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return QFileSystemModel::match(a0,a1,a2,a3,a4);

    typedef QList<QModelIndex> (*sipVH_QtCore_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QModelIndex sipQFileSystemModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return QFileSystemModel::buddy(a0);

    typedef QModelIndex (*sipVH_QtCore_30)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_30)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[30]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQFileSystemModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return QFileSystemModel::removeColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[20]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQFileSystemModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return QFileSystemModel::removeRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[20]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQFileSystemModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return QFileSystemModel::insertColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[20]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQFileSystemModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return QFileSystemModel::insertRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[20]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQFileSystemModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return QFileSystemModel::setItemData(a0,a1);

    typedef bool (*sipVH_QtCore_56)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QMap<int,QVariant>&);

    return ((sipVH_QtCore_56)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[56]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QMap<int,QVariant> sipQFileSystemModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return QFileSystemModel::itemData(a0);

    typedef QMap<int,QVariant> (*sipVH_QtCore_57)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_57)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[57]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQFileSystemModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return QFileSystemModel::setHeaderData(a0,a1,a2,a3);

    typedef bool (*sipVH_QtCore_35)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,const QVariant&,int);

    return ((sipVH_QtCore_35)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[35]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

QModelIndex sipQFileSystemModel::sibling(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_sibling);

    if (!sipMeth)
        return QFileSystemModel::sibling(a0,a1,a2);

    typedef QModelIndex (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_17)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQFileSystemModel::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QFileSystemModel::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQFileSystemModel::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QFileSystemModel::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

Qt::DropActions sipQFileSystemModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return QFileSystemModel::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[18]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQFileSystemModel::dropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return QFileSystemModel::dropMimeData(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);

    return ((sipVH_QtCore_33)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[33]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QMimeData* sipQFileSystemModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return QFileSystemModel::mimeData(a0);

    extern QMimeData* sipVH_QtWidgets_133(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QModelIndex>&);

    return sipVH_QtWidgets_133(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QStringList sipQFileSystemModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return QFileSystemModel::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[27]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQFileSystemModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
        QFileSystemModel::sort(a0,a1);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::SortOrder);

    ((sipVH_QtCore_19)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[19]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

Qt::ItemFlags sipQFileSystemModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return QFileSystemModel::flags(a0);

    typedef Qt::ItemFlags (*sipVH_QtCore_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_21)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[21]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQFileSystemModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return QFileSystemModel::headerData(a0,a1,a2);

    typedef QVariant (*sipVH_QtCore_36)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,int);

    return ((sipVH_QtCore_36)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[36]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQFileSystemModel::setData(const QModelIndex& a0,const QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return QFileSystemModel::setData(a0,a1,a2);

    typedef bool (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QVariant&,int);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[22]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QVariant sipQFileSystemModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return QFileSystemModel::data(a0,a1);

    typedef QVariant (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[23]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

int sipQFileSystemModel::columnCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_columnCount);

    if (!sipMeth)
        return QFileSystemModel::columnCount(a0);

    typedef int (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_24)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[24]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQFileSystemModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_rowCount);

    if (!sipMeth)
        return QFileSystemModel::rowCount(a0);

    typedef int (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_24)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[24]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileSystemModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
        QFileSystemModel::fetchMore(a0);
        return;
    }

    typedef void (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_32)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[32]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQFileSystemModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return QFileSystemModel::canFetchMore(a0);

    typedef bool (*sipVH_QtCore_31)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_31)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[31]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQFileSystemModel::hasChildren(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_hasChildren);

    if (!sipMeth)
        return QFileSystemModel::hasChildren(a0);

    typedef bool (*sipVH_QtCore_31)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_31)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[31]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QModelIndex sipQFileSystemModel::parent(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_parent);

    if (!sipMeth)
        return QFileSystemModel::parent(a0);

    typedef QModelIndex (*sipVH_QtCore_30)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_30)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[30]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QModelIndex sipQFileSystemModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return QFileSystemModel::index(a0,a1,a2);

    typedef QModelIndex (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_17)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QObject* sipQFileSystemModel::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQFileSystemModel::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQFileSystemModel::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQFileSystemModel::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQFileSystemModel::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQFileSystemModel::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQFileSystemModel::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQFileSystemModel::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQFileSystemModel::sipProtect_encodeData(const QModelIndexList& a0,QDataStream& a1) const
{
    QAbstractItemModel::encodeData(a0,a1);
}

bool sipQFileSystemModel::sipProtect_decodeData(int a0,int a1,const QModelIndex& a2,QDataStream& a3)
{
    return QAbstractItemModel::decodeData(a0,a1,a2,a3);
}

void sipQFileSystemModel::sipProtect_beginInsertRows(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginInsertRows(a0,a1,a2);
}

void sipQFileSystemModel::sipProtect_endInsertRows()
{
    QAbstractItemModel::endInsertRows();
}

void sipQFileSystemModel::sipProtect_beginRemoveRows(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginRemoveRows(a0,a1,a2);
}

void sipQFileSystemModel::sipProtect_endRemoveRows()
{
    QAbstractItemModel::endRemoveRows();
}

void sipQFileSystemModel::sipProtect_beginInsertColumns(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginInsertColumns(a0,a1,a2);
}

void sipQFileSystemModel::sipProtect_endInsertColumns()
{
    QAbstractItemModel::endInsertColumns();
}

void sipQFileSystemModel::sipProtect_beginRemoveColumns(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginRemoveColumns(a0,a1,a2);
}

void sipQFileSystemModel::sipProtect_endRemoveColumns()
{
    QAbstractItemModel::endRemoveColumns();
}

QModelIndexList sipQFileSystemModel::sipProtect_persistentIndexList() const
{
    return QAbstractItemModel::persistentIndexList();
}

void sipQFileSystemModel::sipProtect_changePersistentIndex(const QModelIndex& a0,const QModelIndex& a1)
{
    QAbstractItemModel::changePersistentIndex(a0,a1);
}

void sipQFileSystemModel::sipProtect_changePersistentIndexList(const QModelIndexList& a0,const QModelIndexList& a1)
{
    QAbstractItemModel::changePersistentIndexList(a0,a1);
}

QModelIndex sipQFileSystemModel::sipProtect_createIndex(int a0,int a1,void*a2) const
{
    return QAbstractItemModel::createIndex(a0,a1,a2);
}

bool sipQFileSystemModel::sipProtect_beginMoveRows(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    return QAbstractItemModel::beginMoveRows(a0,a1,a2,a3,a4);
}

void sipQFileSystemModel::sipProtect_endMoveRows()
{
    QAbstractItemModel::endMoveRows();
}

bool sipQFileSystemModel::sipProtect_beginMoveColumns(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    return QAbstractItemModel::beginMoveColumns(a0,a1,a2,a3,a4);
}

void sipQFileSystemModel::sipProtect_endMoveColumns()
{
    QAbstractItemModel::endMoveColumns();
}

void sipQFileSystemModel::sipProtect_beginResetModel()
{
    QAbstractItemModel::beginResetModel();
}

void sipQFileSystemModel::sipProtect_endResetModel()
{
    QAbstractItemModel::endResetModel();
}

void sipQFileSystemModel::sipProtect_resetInternalData()
{
    QAbstractItemModel::resetInternalData();
}

bool sipQFileSystemModel::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QFileSystemModel::event(a0) : event(a0));
}

void sipQFileSystemModel::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QFileSystemModel::timerEvent(a0) : timerEvent(a0));
}


PyDoc_STRVAR(doc_QFileSystemModel_sender, "QFileSystemModel.sender() -> QObject");

extern "C" {static PyObject *meth_QFileSystemModel_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_sender, doc_QFileSystemModel_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_receivers, "QFileSystemModel.receivers(signal) -> int");

extern "C" {static PyObject *meth_QFileSystemModel_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QFileSystemModel, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1176 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_receivers, doc_QFileSystemModel_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_childEvent, "QFileSystemModel.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QFileSystemModel_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_childEvent, doc_QFileSystemModel_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_customEvent, "QFileSystemModel.customEvent(QEvent)");

extern "C" {static PyObject *meth_QFileSystemModel_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_customEvent, doc_QFileSystemModel_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_connectNotify, "QFileSystemModel.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QFileSystemModel_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_connectNotify, doc_QFileSystemModel_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_disconnectNotify, "QFileSystemModel.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QFileSystemModel_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_disconnectNotify, doc_QFileSystemModel_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_senderSignalIndex, "QFileSystemModel.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QFileSystemModel_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_senderSignalIndex, doc_QFileSystemModel_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_isSignalConnected, "QFileSystemModel.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_isSignalConnected, doc_QFileSystemModel_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_encodeData, "QFileSystemModel.encodeData(list-of-QModelIndex, QDataStream)");

extern "C" {static PyObject *meth_QFileSystemModel_encodeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_encodeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndexList* a0;
        int a0State = 0;
        QDataStream* a1;
        const sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State, sipType_QDataStream, &a1))
        {
            sipCpp->sipProtect_encodeData(*a0,*a1);
            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_encodeData, doc_QFileSystemModel_encodeData);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_decodeData, "QFileSystemModel.decodeData(int, int, QModelIndex, QDataStream) -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_decodeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_decodeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QModelIndex* a2;
        QDataStream* a3;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiiJ9J9", &sipSelf, sipType_QFileSystemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2, sipType_QDataStream, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_decodeData(a0,a1,*a2,*a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_decodeData, doc_QFileSystemModel_decodeData);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_beginInsertRows, "QFileSystemModel.beginInsertRows(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QFileSystemModel_beginInsertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_beginInsertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_beginInsertRows(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_beginInsertRows, doc_QFileSystemModel_beginInsertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_endInsertRows, "QFileSystemModel.endInsertRows()");

extern "C" {static PyObject *meth_QFileSystemModel_endInsertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_endInsertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            sipCpp->sipProtect_endInsertRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_endInsertRows, doc_QFileSystemModel_endInsertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_beginRemoveRows, "QFileSystemModel.beginRemoveRows(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QFileSystemModel_beginRemoveRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_beginRemoveRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_beginRemoveRows(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_beginRemoveRows, doc_QFileSystemModel_beginRemoveRows);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_endRemoveRows, "QFileSystemModel.endRemoveRows()");

extern "C" {static PyObject *meth_QFileSystemModel_endRemoveRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_endRemoveRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            sipCpp->sipProtect_endRemoveRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_endRemoveRows, doc_QFileSystemModel_endRemoveRows);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_beginInsertColumns, "QFileSystemModel.beginInsertColumns(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QFileSystemModel_beginInsertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_beginInsertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_beginInsertColumns(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_beginInsertColumns, doc_QFileSystemModel_beginInsertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_endInsertColumns, "QFileSystemModel.endInsertColumns()");

extern "C" {static PyObject *meth_QFileSystemModel_endInsertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_endInsertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            sipCpp->sipProtect_endInsertColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_endInsertColumns, doc_QFileSystemModel_endInsertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_beginRemoveColumns, "QFileSystemModel.beginRemoveColumns(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QFileSystemModel_beginRemoveColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_beginRemoveColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_beginRemoveColumns(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_beginRemoveColumns, doc_QFileSystemModel_beginRemoveColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_endRemoveColumns, "QFileSystemModel.endRemoveColumns()");

extern "C" {static PyObject *meth_QFileSystemModel_endRemoveColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_endRemoveColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            sipCpp->sipProtect_endRemoveColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_endRemoveColumns, doc_QFileSystemModel_endRemoveColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_persistentIndexList, "QFileSystemModel.persistentIndexList() -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QFileSystemModel_persistentIndexList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_persistentIndexList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            QModelIndexList*sipRes;

            sipRes = new QModelIndexList(sipCpp->sipProtect_persistentIndexList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_persistentIndexList, doc_QFileSystemModel_persistentIndexList);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_changePersistentIndex, "QFileSystemModel.changePersistentIndex(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QFileSystemModel_changePersistentIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_changePersistentIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp->sipProtect_changePersistentIndex(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_changePersistentIndex, doc_QFileSystemModel_changePersistentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_changePersistentIndexList, "QFileSystemModel.changePersistentIndexList(list-of-QModelIndex, list-of-QModelIndex)");

extern "C" {static PyObject *meth_QFileSystemModel_changePersistentIndexList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_changePersistentIndexList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndexList* a0;
        int a0State = 0;
        const QModelIndexList* a1;
        int a1State = 0;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State, sipType_QList_0100QModelIndex,&a1, &a1State))
        {
            sipCpp->sipProtect_changePersistentIndexList(*a0,*a1);
            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);
            sipReleaseType(const_cast<QModelIndexList *>(a1),sipType_QList_0100QModelIndex,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_changePersistentIndexList, doc_QFileSystemModel_changePersistentIndexList);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_createIndex, "QFileSystemModel.createIndex(int, int, object object=0) -> QModelIndex");

extern "C" {static PyObject *meth_QFileSystemModel_createIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_createIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        PyObject * a2 = 0;
        const sipQFileSystemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|P0", &sipSelf, sipType_QFileSystemModel, &sipCpp, &a0, &a1, &a2))
        {
            QModelIndex*sipRes = 0;

#line 194 "sip/QtCore/qabstractitemmodel.sip"
        // The Qt API is broken (and won't be fixed as it would break binary
        // compatibility) regarding the internal id of a model index on different
        // architectures (32 vs 64 bits).  We choose to work around the breakage as it
        // is fairly subtle and continues to catch people out.  Instead of letting Qt
        // convert betweed an integer id and a pointer id (the internal format used by
        // Qt) we let Python do it.
        
        void *ptr;
        
        if (a2)
        {
            // Try and convert it to a Python long and fallback to the object's
            // address if it fails.
            ptr = PyLong_AsVoidPtr(a2);
        
            if (PyErr_Occurred())
            {
                PyErr_Clear();
                ptr = a2;
            }
        }
        else
        {
            ptr = 0;
        }
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = new QModelIndex(sipCpp->createIndex(a0, a1, ptr));
        #else
        sipRes = new QModelIndex(sipCpp->sipProtect_createIndex(a0, a1, ptr));
        #endif
#line 1787 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileSystemModel.cpp"

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_createIndex, doc_QFileSystemModel_createIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_beginMoveRows, "QFileSystemModel.beginMoveRows(QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_beginMoveRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_beginMoveRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        const QModelIndex* a3;
        int a4;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9iiJ9i", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_beginMoveRows(*a0,a1,a2,*a3,a4);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_beginMoveRows, doc_QFileSystemModel_beginMoveRows);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_endMoveRows, "QFileSystemModel.endMoveRows()");

extern "C" {static PyObject *meth_QFileSystemModel_endMoveRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_endMoveRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            sipCpp->sipProtect_endMoveRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_endMoveRows, doc_QFileSystemModel_endMoveRows);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_beginMoveColumns, "QFileSystemModel.beginMoveColumns(QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_beginMoveColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_beginMoveColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        const QModelIndex* a3;
        int a4;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9iiJ9i", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_beginMoveColumns(*a0,a1,a2,*a3,a4);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_beginMoveColumns, doc_QFileSystemModel_beginMoveColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_endMoveColumns, "QFileSystemModel.endMoveColumns()");

extern "C" {static PyObject *meth_QFileSystemModel_endMoveColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_endMoveColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            sipCpp->sipProtect_endMoveColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_endMoveColumns, doc_QFileSystemModel_endMoveColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_beginResetModel, "QFileSystemModel.beginResetModel()");

extern "C" {static PyObject *meth_QFileSystemModel_beginResetModel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_beginResetModel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            sipCpp->sipProtect_beginResetModel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_beginResetModel, doc_QFileSystemModel_beginResetModel);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_endResetModel, "QFileSystemModel.endResetModel()");

extern "C" {static PyObject *meth_QFileSystemModel_endResetModel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_endResetModel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            sipCpp->sipProtect_endResetModel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_endResetModel, doc_QFileSystemModel_endResetModel);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_resetInternalData, "QFileSystemModel.resetInternalData()");

extern "C" {static PyObject *meth_QFileSystemModel_resetInternalData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_resetInternalData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            sipCpp->sipProtect_resetInternalData();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_resetInternalData, doc_QFileSystemModel_resetInternalData);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_index, "QFileSystemModel.index(int, int, QModelIndex parent=QModelIndex()) -> QModelIndex\n"
    "QFileSystemModel.index(str, int column=0) -> QModelIndex");

extern "C" {static PyObject *meth_QFileSystemModel_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        const QFileSystemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QFileSystemModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QFileSystemModel::index(a0,a1,*a2) : sipCpp->index(a0,a1,*a2)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        int a1 = 0;
        const QFileSystemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->index(*a0,a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_index, doc_QFileSystemModel_index);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_parent, "QFileSystemModel.parent(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QFileSystemModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QFileSystemModel::parent(*a0) : sipCpp->parent(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_parent, doc_QFileSystemModel_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_hasChildren, "QFileSystemModel.hasChildren(QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_hasChildren(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QFileSystemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QFileSystemModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_hasChildren, doc_QFileSystemModel_hasChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_canFetchMore, "QFileSystemModel.canFetchMore(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_canFetchMore(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_canFetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QFileSystemModel::canFetchMore(*a0) : sipCpp->canFetchMore(*a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_canFetchMore, doc_QFileSystemModel_canFetchMore);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_fetchMore, "QFileSystemModel.fetchMore(QModelIndex)");

extern "C" {static PyObject *meth_QFileSystemModel_fetchMore(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_fetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            (sipSelfWasArg ? sipCpp->QFileSystemModel::fetchMore(*a0) : sipCpp->fetchMore(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_fetchMore, doc_QFileSystemModel_fetchMore);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_rowCount, "QFileSystemModel.rowCount(QModelIndex parent=QModelIndex()) -> int");

extern "C" {static PyObject *meth_QFileSystemModel_rowCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_rowCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QFileSystemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QFileSystemModel::rowCount(*a0) : sipCpp->rowCount(*a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_rowCount, doc_QFileSystemModel_rowCount);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_columnCount, "QFileSystemModel.columnCount(QModelIndex parent=QModelIndex()) -> int");

extern "C" {static PyObject *meth_QFileSystemModel_columnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_columnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex* a0 = &a0def;
        const QFileSystemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QFileSystemModel::columnCount(*a0) : sipCpp->columnCount(*a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_columnCount, doc_QFileSystemModel_columnCount);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_myComputer, "QFileSystemModel.myComputer(int role=Qt.DisplayRole) -> QVariant");

extern "C" {static PyObject *meth_QFileSystemModel_myComputer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_myComputer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = Qt::DisplayRole;
        const QFileSystemModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QFileSystemModel, &sipCpp, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->myComputer(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_myComputer, doc_QFileSystemModel_myComputer);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_data, "QFileSystemModel.data(QModelIndex, int role=Qt.DisplayRole) -> QVariant");

extern "C" {static PyObject *meth_QFileSystemModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const QFileSystemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QFileSystemModel::data(*a0,a1) : sipCpp->data(*a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_data, doc_QFileSystemModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_setData, "QFileSystemModel.setData(QModelIndex, QVariant, int role=Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
        QFileSystemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|i", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant, &a1, &a1State, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QFileSystemModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_setData, doc_QFileSystemModel_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_headerData, "QFileSystemModel.headerData(int, Qt.Orientation, int role=Qt.DisplayRole) -> QVariant");

extern "C" {static PyObject *meth_QFileSystemModel_headerData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_headerData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        const QFileSystemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiE|i", &sipSelf, sipType_QFileSystemModel, &sipCpp, &a0, sipType_Qt_Orientation, &a1, &a2))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QFileSystemModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_headerData, doc_QFileSystemModel_headerData);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_flags, "QFileSystemModel.flags(QModelIndex) -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QFileSystemModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            Qt::ItemFlags*sipRes;

            sipRes = new Qt::ItemFlags((sipSelfWasArg ? sipCpp->QFileSystemModel::flags(*a0) : sipCpp->flags(*a0)));

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_flags, doc_QFileSystemModel_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_sort, "QFileSystemModel.sort(int, Qt.SortOrder order=Qt.AscendingOrder)");

extern "C" {static PyObject *meth_QFileSystemModel_sort(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_sort(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::SortOrder a1 = Qt::AscendingOrder;
        QFileSystemModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_order,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|E", &sipSelf, sipType_QFileSystemModel, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            (sipSelfWasArg ? sipCpp->QFileSystemModel::sort(a0,a1) : sipCpp->sort(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_sort, doc_QFileSystemModel_sort);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_mimeTypes, "QFileSystemModel.mimeTypes() -> list-of-str");

extern "C" {static PyObject *meth_QFileSystemModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QFileSystemModel::mimeTypes() : sipCpp->mimeTypes()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_mimeTypes, doc_QFileSystemModel_mimeTypes);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_mimeData, "QFileSystemModel.mimeData(list-of-QModelIndex) -> QMimeData");

extern "C" {static PyObject *meth_QFileSystemModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndexList* a0;
        int a0State = 0;
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State))
        {
            QMimeData*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QFileSystemModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_mimeData, doc_QFileSystemModel_mimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_dropMimeData, "QFileSystemModel.dropMimeData(QMimeData, Qt.DropAction, int, int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData* a0;
        Qt::DropAction a1;
        int a2;
        int a3;
        const QModelIndex* a4;
        QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8EiiJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QMimeData, &a0, sipType_Qt_DropAction, &a1, &a2, &a3, sipType_QModelIndex, &a4))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QFileSystemModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_dropMimeData, doc_QFileSystemModel_dropMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_supportedDropActions, "QFileSystemModel.supportedDropActions() -> Qt.DropActions");

extern "C" {static PyObject *meth_QFileSystemModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            Qt::DropActions*sipRes;

            sipRes = new Qt::DropActions((sipSelfWasArg ? sipCpp->QFileSystemModel::supportedDropActions() : sipCpp->supportedDropActions()));

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_supportedDropActions, doc_QFileSystemModel_supportedDropActions);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_setRootPath, "QFileSystemModel.setRootPath(str) -> QModelIndex");

extern "C" {static PyObject *meth_QFileSystemModel_setRootPath(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_setRootPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->setRootPath(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_setRootPath, doc_QFileSystemModel_setRootPath);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_rootPath, "QFileSystemModel.rootPath() -> str");

extern "C" {static PyObject *meth_QFileSystemModel_rootPath(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_rootPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->rootPath());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_rootPath, doc_QFileSystemModel_rootPath);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_rootDirectory, "QFileSystemModel.rootDirectory() -> QDir");

extern "C" {static PyObject *meth_QFileSystemModel_rootDirectory(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_rootDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            QDir*sipRes;

            sipRes = new QDir(sipCpp->rootDirectory());

            return sipConvertFromNewType(sipRes,sipType_QDir,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_rootDirectory, doc_QFileSystemModel_rootDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_setIconProvider, "QFileSystemModel.setIconProvider(QFileIconProvider)");

extern "C" {static PyObject *meth_QFileSystemModel_setIconProvider(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_setIconProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileIconProvider* a0;
        PyObject *a0Keep;
        QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QFileSystemModel, &sipCpp, &a0Keep, sipType_QFileIconProvider, &a0))
        {
            sipCpp->setIconProvider(a0);

            sipKeepReference(sipSelf, -22, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_setIconProvider, doc_QFileSystemModel_setIconProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_iconProvider, "QFileSystemModel.iconProvider() -> QFileIconProvider");

extern "C" {static PyObject *meth_QFileSystemModel_iconProvider(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_iconProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            QFileIconProvider*sipRes;

            sipRes = sipCpp->iconProvider();

            return sipConvertFromType(sipRes,sipType_QFileIconProvider,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_iconProvider, doc_QFileSystemModel_iconProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_setFilter, "QFileSystemModel.setFilter(QDir.Filters)");

extern "C" {static PyObject *meth_QFileSystemModel_setFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_setFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir::Filters* a0;
        int a0State = 0;
        QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QDir_Filters, &a0, &a0State))
        {
            sipCpp->setFilter(*a0);
            sipReleaseType(a0,sipType_QDir_Filters,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_setFilter, doc_QFileSystemModel_setFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_filter, "QFileSystemModel.filter() -> QDir.Filters");

extern "C" {static PyObject *meth_QFileSystemModel_filter(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_filter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            QDir::Filters*sipRes;

            sipRes = new QDir::Filters(sipCpp->filter());

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_filter, doc_QFileSystemModel_filter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_setResolveSymlinks, "QFileSystemModel.setResolveSymlinks(bool)");

extern "C" {static PyObject *meth_QFileSystemModel_setResolveSymlinks(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_setResolveSymlinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileSystemModel, &sipCpp, &a0))
        {
            sipCpp->setResolveSymlinks(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_setResolveSymlinks, doc_QFileSystemModel_setResolveSymlinks);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_resolveSymlinks, "QFileSystemModel.resolveSymlinks() -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_resolveSymlinks(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_resolveSymlinks(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->resolveSymlinks();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_resolveSymlinks, doc_QFileSystemModel_resolveSymlinks);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_setReadOnly, "QFileSystemModel.setReadOnly(bool)");

extern "C" {static PyObject *meth_QFileSystemModel_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileSystemModel, &sipCpp, &a0))
        {
            sipCpp->setReadOnly(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_setReadOnly, doc_QFileSystemModel_setReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_isReadOnly, "QFileSystemModel.isReadOnly() -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_isReadOnly, doc_QFileSystemModel_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_setNameFilterDisables, "QFileSystemModel.setNameFilterDisables(bool)");

extern "C" {static PyObject *meth_QFileSystemModel_setNameFilterDisables(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_setNameFilterDisables(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileSystemModel, &sipCpp, &a0))
        {
            sipCpp->setNameFilterDisables(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_setNameFilterDisables, doc_QFileSystemModel_setNameFilterDisables);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_nameFilterDisables, "QFileSystemModel.nameFilterDisables() -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_nameFilterDisables(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_nameFilterDisables(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->nameFilterDisables();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_nameFilterDisables, doc_QFileSystemModel_nameFilterDisables);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_setNameFilters, "QFileSystemModel.setNameFilters(list-of-str)");

extern "C" {static PyObject *meth_QFileSystemModel_setNameFilters(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_setNameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setNameFilters(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_setNameFilters, doc_QFileSystemModel_setNameFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_nameFilters, "QFileSystemModel.nameFilters() -> list-of-str");

extern "C" {static PyObject *meth_QFileSystemModel_nameFilters(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_nameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileSystemModel, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->nameFilters());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_nameFilters, doc_QFileSystemModel_nameFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_filePath, "QFileSystemModel.filePath(QModelIndex) -> str");

extern "C" {static PyObject *meth_QFileSystemModel_filePath(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_filePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->filePath(*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_filePath, doc_QFileSystemModel_filePath);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_isDir, "QFileSystemModel.isDir(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_isDir(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_isDir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isDir(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_isDir, doc_QFileSystemModel_isDir);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_size, "QFileSystemModel.size(QModelIndex) -> int");

extern "C" {static PyObject *meth_QFileSystemModel_size(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            qint64 sipRes;

            sipRes = sipCpp->size(*a0);

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_size, doc_QFileSystemModel_size);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_type, "QFileSystemModel.type(QModelIndex) -> str");

extern "C" {static PyObject *meth_QFileSystemModel_type(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->type(*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_type, doc_QFileSystemModel_type);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_lastModified, "QFileSystemModel.lastModified(QModelIndex) -> QDateTime");

extern "C" {static PyObject *meth_QFileSystemModel_lastModified(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_lastModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QDateTime*sipRes;

            sipRes = new QDateTime(sipCpp->lastModified(*a0));

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_lastModified, doc_QFileSystemModel_lastModified);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_mkdir, "QFileSystemModel.mkdir(QModelIndex, str) -> QModelIndex");

extern "C" {static PyObject *meth_QFileSystemModel_mkdir(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_mkdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QString* a1;
        int a1State = 0;
        QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QString,&a1, &a1State))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->mkdir(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_mkdir, doc_QFileSystemModel_mkdir);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_permissions, "QFileSystemModel.permissions(QModelIndex) -> QFileDevice.Permissions");

extern "C" {static PyObject *meth_QFileSystemModel_permissions(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_permissions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QFileDevice::Permissions*sipRes;

            sipRes = new QFileDevice::Permissions(sipCpp->permissions(*a0));

            return sipConvertFromNewType(sipRes,sipType_QFileDevice_Permissions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_permissions, doc_QFileSystemModel_permissions);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_rmdir, "QFileSystemModel.rmdir(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_rmdir(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_rmdir(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->rmdir(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_rmdir, doc_QFileSystemModel_rmdir);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_fileName, "QFileSystemModel.fileName(QModelIndex) -> str");

extern "C" {static PyObject *meth_QFileSystemModel_fileName(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->fileName(*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_fileName, doc_QFileSystemModel_fileName);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_fileIcon, "QFileSystemModel.fileIcon(QModelIndex) -> QIcon");

extern "C" {static PyObject *meth_QFileSystemModel_fileIcon(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_fileIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QIcon*sipRes;

            sipRes = new QIcon(sipCpp->fileIcon(*a0));

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_fileIcon, doc_QFileSystemModel_fileIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_fileInfo, "QFileSystemModel.fileInfo(QModelIndex) -> QFileInfo");

extern "C" {static PyObject *meth_QFileSystemModel_fileInfo(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_fileInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QFileInfo*sipRes;

            sipRes = new QFileInfo(sipCpp->fileInfo(*a0));

            return sipConvertFromNewType(sipRes,sipType_QFileInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_fileInfo, doc_QFileSystemModel_fileInfo);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_remove, "QFileSystemModel.remove(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_remove(PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        QFileSystemModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->remove(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_remove, doc_QFileSystemModel_remove);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_event, "QFileSystemModel.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QFileSystemModel_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_event, doc_QFileSystemModel_event);

    return NULL;
}


PyDoc_STRVAR(doc_QFileSystemModel_timerEvent, "QFileSystemModel.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QFileSystemModel_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileSystemModel_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQFileSystemModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileSystemModel, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileSystemModel, sipName_timerEvent, doc_QFileSystemModel_timerEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QFileSystemModel(void *, const sipTypeDef *);}
static void *cast_QFileSystemModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QFileSystemModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemModel)->ctd_cast((QAbstractItemModel *)(QFileSystemModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileSystemModel(void *, int);}
static void release_QFileSystemModel(void *sipCppV,int)
{
    QFileSystemModel *sipCpp = reinterpret_cast<QFileSystemModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QFileSystemModel(sipSimpleWrapper *);}
static void dealloc_QFileSystemModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQFileSystemModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QFileSystemModel(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QFileSystemModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFileSystemModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQFileSystemModel *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQFileSystemModel(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFileSystemModel[] = {{6, 0, 1}};


static PyMethodDef methods_QFileSystemModel[] = {
    {SIP_MLNAME_CAST(sipName_beginInsertColumns), (PyCFunction)meth_QFileSystemModel_beginInsertColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginInsertRows), (PyCFunction)meth_QFileSystemModel_beginInsertRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginMoveColumns), (PyCFunction)meth_QFileSystemModel_beginMoveColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginMoveRows), (PyCFunction)meth_QFileSystemModel_beginMoveRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginRemoveColumns), (PyCFunction)meth_QFileSystemModel_beginRemoveColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginRemoveRows), (PyCFunction)meth_QFileSystemModel_beginRemoveRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginResetModel), (PyCFunction)meth_QFileSystemModel_beginResetModel, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_canFetchMore), meth_QFileSystemModel_canFetchMore, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_canFetchMore)},
    {SIP_MLNAME_CAST(sipName_changePersistentIndex), (PyCFunction)meth_QFileSystemModel_changePersistentIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_changePersistentIndexList), (PyCFunction)meth_QFileSystemModel_changePersistentIndexList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QFileSystemModel_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_columnCount), (PyCFunction)meth_QFileSystemModel_columnCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileSystemModel_columnCount)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QFileSystemModel_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createIndex), (PyCFunction)meth_QFileSystemModel_createIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QFileSystemModel_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_data), (PyCFunction)meth_QFileSystemModel_data, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileSystemModel_data)},
    {SIP_MLNAME_CAST(sipName_decodeData), (PyCFunction)meth_QFileSystemModel_decodeData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QFileSystemModel_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QFileSystemModel_dropMimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_dropMimeData)},
    {SIP_MLNAME_CAST(sipName_encodeData), (PyCFunction)meth_QFileSystemModel_encodeData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endInsertColumns), (PyCFunction)meth_QFileSystemModel_endInsertColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endInsertRows), (PyCFunction)meth_QFileSystemModel_endInsertRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endMoveColumns), (PyCFunction)meth_QFileSystemModel_endMoveColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endMoveRows), (PyCFunction)meth_QFileSystemModel_endMoveRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endRemoveColumns), (PyCFunction)meth_QFileSystemModel_endRemoveColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endRemoveRows), (PyCFunction)meth_QFileSystemModel_endRemoveRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endResetModel), (PyCFunction)meth_QFileSystemModel_endResetModel, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QFileSystemModel_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileSystemModel_event)},
    {SIP_MLNAME_CAST(sipName_fetchMore), meth_QFileSystemModel_fetchMore, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_fetchMore)},
    {SIP_MLNAME_CAST(sipName_fileIcon), meth_QFileSystemModel_fileIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_fileIcon)},
    {SIP_MLNAME_CAST(sipName_fileInfo), meth_QFileSystemModel_fileInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_fileInfo)},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QFileSystemModel_fileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_fileName)},
    {SIP_MLNAME_CAST(sipName_filePath), meth_QFileSystemModel_filePath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_filePath)},
    {SIP_MLNAME_CAST(sipName_filter), meth_QFileSystemModel_filter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_filter)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QFileSystemModel_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_flags)},
    {SIP_MLNAME_CAST(sipName_hasChildren), (PyCFunction)meth_QFileSystemModel_hasChildren, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileSystemModel_hasChildren)},
    {SIP_MLNAME_CAST(sipName_headerData), (PyCFunction)meth_QFileSystemModel_headerData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileSystemModel_headerData)},
    {SIP_MLNAME_CAST(sipName_iconProvider), meth_QFileSystemModel_iconProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_iconProvider)},
    {SIP_MLNAME_CAST(sipName_index), (PyCFunction)meth_QFileSystemModel_index, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileSystemModel_index)},
    {SIP_MLNAME_CAST(sipName_isDir), meth_QFileSystemModel_isDir, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_isDir)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QFileSystemModel_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QFileSystemModel_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_lastModified), meth_QFileSystemModel_lastModified, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_lastModified)},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QFileSystemModel_mimeData, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_mimeData)},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QFileSystemModel_mimeTypes, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_mimeTypes)},
    {SIP_MLNAME_CAST(sipName_mkdir), meth_QFileSystemModel_mkdir, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_mkdir)},
    {SIP_MLNAME_CAST(sipName_myComputer), (PyCFunction)meth_QFileSystemModel_myComputer, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileSystemModel_myComputer)},
    {SIP_MLNAME_CAST(sipName_nameFilterDisables), meth_QFileSystemModel_nameFilterDisables, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_nameFilterDisables)},
    {SIP_MLNAME_CAST(sipName_nameFilters), meth_QFileSystemModel_nameFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_nameFilters)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QFileSystemModel_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_parent)},
    {SIP_MLNAME_CAST(sipName_permissions), meth_QFileSystemModel_permissions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_permissions)},
    {SIP_MLNAME_CAST(sipName_persistentIndexList), (PyCFunction)meth_QFileSystemModel_persistentIndexList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QFileSystemModel_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_remove), meth_QFileSystemModel_remove, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_remove)},
    {SIP_MLNAME_CAST(sipName_resetInternalData), (PyCFunction)meth_QFileSystemModel_resetInternalData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_resolveSymlinks), meth_QFileSystemModel_resolveSymlinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_resolveSymlinks)},
    {SIP_MLNAME_CAST(sipName_rmdir), meth_QFileSystemModel_rmdir, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_rmdir)},
    {SIP_MLNAME_CAST(sipName_rootDirectory), meth_QFileSystemModel_rootDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_rootDirectory)},
    {SIP_MLNAME_CAST(sipName_rootPath), meth_QFileSystemModel_rootPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_rootPath)},
    {SIP_MLNAME_CAST(sipName_rowCount), (PyCFunction)meth_QFileSystemModel_rowCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileSystemModel_rowCount)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QFileSystemModel_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QFileSystemModel_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setData), (PyCFunction)meth_QFileSystemModel_setData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileSystemModel_setData)},
    {SIP_MLNAME_CAST(sipName_setFilter), meth_QFileSystemModel_setFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_setFilter)},
    {SIP_MLNAME_CAST(sipName_setIconProvider), meth_QFileSystemModel_setIconProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_setIconProvider)},
    {SIP_MLNAME_CAST(sipName_setNameFilterDisables), meth_QFileSystemModel_setNameFilterDisables, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_setNameFilterDisables)},
    {SIP_MLNAME_CAST(sipName_setNameFilters), meth_QFileSystemModel_setNameFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_setNameFilters)},
    {SIP_MLNAME_CAST(sipName_setReadOnly), meth_QFileSystemModel_setReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_setReadOnly)},
    {SIP_MLNAME_CAST(sipName_setResolveSymlinks), meth_QFileSystemModel_setResolveSymlinks, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_setResolveSymlinks)},
    {SIP_MLNAME_CAST(sipName_setRootPath), meth_QFileSystemModel_setRootPath, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_setRootPath)},
    {SIP_MLNAME_CAST(sipName_size), meth_QFileSystemModel_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_size)},
    {SIP_MLNAME_CAST(sipName_sort), (PyCFunction)meth_QFileSystemModel_sort, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileSystemModel_sort)},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QFileSystemModel_supportedDropActions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_supportedDropActions)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QFileSystemModel_timerEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileSystemModel_timerEvent)},
    {SIP_MLNAME_CAST(sipName_type), meth_QFileSystemModel_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileSystemModel_type)}
};

static sipEnumMemberDef enummembers_QFileSystemModel[] = {
    {sipName_FileIconRole, static_cast<int>(QFileSystemModel::FileIconRole), 86},
    {sipName_FileNameRole, static_cast<int>(QFileSystemModel::FileNameRole), 86},
    {sipName_FilePathRole, static_cast<int>(QFileSystemModel::FilePathRole), 86},
    {sipName_FilePermissions, static_cast<int>(QFileSystemModel::FilePermissions), 86},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QFileSystemModel[] = {
    {"directoryLoaded(QString)", "\1QFileSystemModel.directoryLoaded[str]", 0, 0},
    {"rootPathChanged(QString)", "\1QFileSystemModel.rootPathChanged[str]", 0, 0},
    {"fileRenamed(QString,QString,QString)", "\1QFileSystemModel.fileRenamed[str, str, str]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QFileSystemModel, "\1QFileSystemModel(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QFileSystemModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QFileSystemModel,
        {0}
    },
    {
        sipNameNr_QFileSystemModel,
        {0, 0, 1},
        75, methods_QFileSystemModel,
        4, enummembers_QFileSystemModel,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QFileSystemModel,
    -1,
    -1,
    supers_QFileSystemModel,
    0,
    init_type_QFileSystemModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QFileSystemModel,
    0,
    0,
    0,
    release_QFileSystemModel,
    cast_QFileSystemModel,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QFileSystemModel::staticMetaObject,
    0,
    signals_QFileSystemModel,
    0
};
