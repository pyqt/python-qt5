/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:13 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractbutton.sip"
#include <qabstractbutton.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 368 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qbuttongroup.sip"
#include <qbuttongroup.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 635 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 275 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 452 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 408 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 395 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 382 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 177 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 180 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 183 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 186 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 189 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 195 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 198 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 201 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 204 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 207 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 210 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 213 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 216 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 219 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 225 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 228 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 231 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"


class sipQAbstractButton : public QAbstractButton
{
public:
    sipQAbstractButton(QWidget*);
    virtual ~sipQAbstractButton();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    void sipProtectVirt_enterEvent(bool,QEvent*);
    void sipProtectVirt_leaveEvent(bool,QEvent*);
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    void sipProtectVirt_closeEvent(bool,QCloseEvent*);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);
    void sipProtectVirt_actionEvent(bool,QActionEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent*);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool,QDropEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const QByteArray&,void*,long*);
    QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool,QPainter*) const;
    void sipProtect_paintEvent(QPaintEvent*);
    bool sipProtectVirt_hitButton(bool,const QPoint&) const;
    void sipProtectVirt_checkStateSet(bool);
    void sipProtectVirt_nextCheckState(bool);
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_changeEvent(bool,QEvent*);
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    bool eventFilter(QObject*,QEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void closeEvent(QCloseEvent*);
    void resizeEvent(QResizeEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void setVisible(bool);
    int devType() const;
    void timerEvent(QTimerEvent*);
    void changeEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    bool event(QEvent*);
    void nextCheckState();
    void checkStateSet();
    bool hitButton(const QPoint&) const;
    void paintEvent(QPaintEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractButton(const sipQAbstractButton &);
    sipQAbstractButton &operator = (const sipQAbstractButton &);

    char sipPyMethods[49];
};

sipQAbstractButton::sipQAbstractButton(QWidget*a0): QAbstractButton(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractButton::~sipQAbstractButton()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractButton::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QAbstractButton);
}

int sipQAbstractButton::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractButton::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QAbstractButton,_c,_id,_a);

    return _id;
}

void *sipQAbstractButton::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QAbstractButton, _clname, &sipCpp) ? sipCpp : QAbstractButton::qt_metacast(_clname));
}

void sipQAbstractButton::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QAbstractButton::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QAbstractButton::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QAbstractButton::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QAbstractButton::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAbstractButton::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QAbstractButton::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQAbstractButton::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QAbstractButton::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQAbstractButton::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QAbstractButton::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQAbstractButton::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QAbstractButton::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQAbstractButton::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QAbstractButton::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQAbstractButton::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QAbstractButton::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQAbstractButton::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QAbstractButton::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QAbstractButton::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQAbstractButton::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QAbstractButton::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QAbstractButton::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QAbstractButton::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QAbstractButton::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QAbstractButton::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QAbstractButton::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QAbstractButton::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QAbstractButton::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QAbstractButton::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QAbstractButton::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QAbstractButton::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QAbstractButton::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QAbstractButton::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QAbstractButton::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QAbstractButton::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QAbstractButton::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QAbstractButton::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQAbstractButton::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QAbstractButton::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQAbstractButton::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QAbstractButton::heightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQAbstractButton::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QAbstractButton::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQAbstractButton::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QAbstractButton::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractButton::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QAbstractButton::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQAbstractButton::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QAbstractButton::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractButton::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QAbstractButton::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QAbstractButton::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QAbstractButton::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QAbstractButton::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QAbstractButton::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QAbstractButton::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QAbstractButton::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QAbstractButton::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QAbstractButton::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQAbstractButton::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QAbstractButton::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::nextCheckState()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_nextCheckState);

    if (!sipMeth)
    {
        QAbstractButton::nextCheckState();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQAbstractButton::checkStateSet()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_checkStateSet);

    if (!sipMeth)
    {
        QAbstractButton::checkStateSet();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQAbstractButton::hitButton(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[47]),sipPySelf,NULL,sipName_hitButton);

    if (!sipMeth)
        return QAbstractButton::hitButton(a0);

    extern bool sipVH_QtWidgets_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPoint&);

    return sipVH_QtWidgets_36(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQAbstractButton::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,sipName_QAbstractButton,sipName_paintEvent);

    if (!sipMeth)
        return;

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQAbstractButton::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQAbstractButton::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQAbstractButton::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQAbstractButton::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQAbstractButton::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQAbstractButton::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQAbstractButton::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QWidget::wheelEvent(a0) : wheelEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QWidget::resizeEvent(a0) : resizeEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent*a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent*a0)
{
    (sipSelfWasArg ? QWidget::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent*a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QWidget::dropEvent(a0) : dropEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QWidget::showEvent(a0) : showEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQAbstractButton::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQAbstractButton::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QWidget::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQAbstractButton::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQAbstractButton::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQAbstractButton::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQAbstractButton::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QWidget::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipQAbstractButton::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQAbstractButton::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

bool sipQAbstractButton::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ? QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

QPainter* sipQAbstractButton::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QWidget::sharedPainter() : sharedPainter());
}

void sipQAbstractButton::sipProtectVirt_initPainter(bool sipSelfWasArg,QPainter*a0) const
{
    (sipSelfWasArg ? QWidget::initPainter(a0) : initPainter(a0));
}

void sipQAbstractButton::sipProtect_paintEvent(QPaintEvent*a0)
{
    paintEvent(a0);
}

bool sipQAbstractButton::sipProtectVirt_hitButton(bool sipSelfWasArg,const QPoint& a0) const
{
    return (sipSelfWasArg ? QAbstractButton::hitButton(a0) : hitButton(a0));
}

void sipQAbstractButton::sipProtectVirt_checkStateSet(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractButton::checkStateSet() : checkStateSet());
}

void sipQAbstractButton::sipProtectVirt_nextCheckState(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractButton::nextCheckState() : nextCheckState());
}

bool sipQAbstractButton::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QAbstractButton::event(a0) : event(a0));
}

void sipQAbstractButton::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QAbstractButton::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QAbstractButton::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QAbstractButton::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QAbstractButton::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QAbstractButton::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QAbstractButton::focusInEvent(a0) : focusInEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QAbstractButton::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QAbstractButton::changeEvent(a0) : changeEvent(a0));
}

void sipQAbstractButton::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QAbstractButton::timerEvent(a0) : timerEvent(a0));
}


PyDoc_STRVAR(doc_QAbstractButton_sender, "QAbstractButton.sender() -> QObject");

extern "C" {static PyObject *meth_QAbstractButton_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1521 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_sender, doc_QAbstractButton_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_receivers, "QAbstractButton.receivers(signal) -> int");

extern "C" {static PyObject *meth_QAbstractButton_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1580 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQAbstractButton.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_receivers, doc_QAbstractButton_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_childEvent, "QAbstractButton.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QAbstractButton_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_childEvent, doc_QAbstractButton_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_customEvent, "QAbstractButton.customEvent(QEvent)");

extern "C" {static PyObject *meth_QAbstractButton_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_customEvent, doc_QAbstractButton_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_connectNotify, "QAbstractButton.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QAbstractButton_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_connectNotify, doc_QAbstractButton_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_disconnectNotify, "QAbstractButton.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QAbstractButton_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_disconnectNotify, doc_QAbstractButton_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_senderSignalIndex, "QAbstractButton.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QAbstractButton_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_senderSignalIndex, doc_QAbstractButton_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_isSignalConnected, "QAbstractButton.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QAbstractButton_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_isSignalConnected, doc_QAbstractButton_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_mouseDoubleClickEvent, "QAbstractButton.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractButton_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_mouseDoubleClickEvent, doc_QAbstractButton_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_wheelEvent, "QAbstractButton.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QAbstractButton_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_wheelEvent, doc_QAbstractButton_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_enterEvent, "QAbstractButton.enterEvent(QEvent)");

extern "C" {static PyObject *meth_QAbstractButton_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_enterEvent, doc_QAbstractButton_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_leaveEvent, "QAbstractButton.leaveEvent(QEvent)");

extern "C" {static PyObject *meth_QAbstractButton_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_leaveEvent, doc_QAbstractButton_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_moveEvent, "QAbstractButton.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QAbstractButton_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_moveEvent, doc_QAbstractButton_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_resizeEvent, "QAbstractButton.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QAbstractButton_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_resizeEvent, doc_QAbstractButton_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_closeEvent, "QAbstractButton.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QAbstractButton_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_closeEvent, doc_QAbstractButton_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_contextMenuEvent, "QAbstractButton.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QAbstractButton_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_contextMenuEvent, doc_QAbstractButton_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_tabletEvent, "QAbstractButton.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QAbstractButton_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_tabletEvent, doc_QAbstractButton_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_actionEvent, "QAbstractButton.actionEvent(QActionEvent)");

extern "C" {static PyObject *meth_QAbstractButton_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_actionEvent, doc_QAbstractButton_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_dragEnterEvent, "QAbstractButton.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QAbstractButton_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_dragEnterEvent, doc_QAbstractButton_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_dragMoveEvent, "QAbstractButton.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QAbstractButton_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_dragMoveEvent, doc_QAbstractButton_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_dragLeaveEvent, "QAbstractButton.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QAbstractButton_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_dragLeaveEvent, doc_QAbstractButton_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_dropEvent, "QAbstractButton.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QAbstractButton_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_dropEvent, doc_QAbstractButton_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_showEvent, "QAbstractButton.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QAbstractButton_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_showEvent, doc_QAbstractButton_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_hideEvent, "QAbstractButton.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QAbstractButton_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_hideEvent, doc_QAbstractButton_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_metric, "QAbstractButton.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QAbstractButton_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_metric, doc_QAbstractButton_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_inputMethodEvent, "QAbstractButton.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QAbstractButton_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_inputMethodEvent, doc_QAbstractButton_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_updateMicroFocus, "QAbstractButton.updateMicroFocus()");

extern "C" {static PyObject *meth_QAbstractButton_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_updateMicroFocus, doc_QAbstractButton_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_create, "QAbstractButton.create(sip.voidptr window=0, bool initializeWindow=True, bool destroyOldWindow=True)");

extern "C" {static PyObject *meth_QAbstractButton_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0def = 0;
        WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQAbstractButton *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_create, doc_QAbstractButton_create);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_destroy, "QAbstractButton.destroy(bool destroyWindow=True, bool destroySubWindows=True)");

extern "C" {static PyObject *meth_QAbstractButton_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQAbstractButton *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_destroy, doc_QAbstractButton_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_focusNextPrevChild, "QAbstractButton.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QAbstractButton_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_focusNextPrevChild, doc_QAbstractButton_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_focusNextChild, "QAbstractButton.focusNextChild() -> bool");

extern "C" {static PyObject *meth_QAbstractButton_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_focusNextChild, doc_QAbstractButton_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_focusPreviousChild, "QAbstractButton.focusPreviousChild() -> bool");

extern "C" {static PyObject *meth_QAbstractButton_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_focusPreviousChild, doc_QAbstractButton_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_nativeEvent, "QAbstractButton.nativeEvent(QByteArray, sip.voidptr) -> (bool, int)");

extern "C" {static PyObject *meth_QAbstractButton_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_nativeEvent, doc_QAbstractButton_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_sharedPainter, "QAbstractButton.sharedPainter() -> QPainter");

extern "C" {static PyObject *meth_QAbstractButton_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_sharedPainter, doc_QAbstractButton_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_initPainter, "QAbstractButton.initPainter(QPainter)");

extern "C" {static PyObject *meth_QAbstractButton_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_initPainter, doc_QAbstractButton_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setAutoRepeatDelay, "QAbstractButton.setAutoRepeatDelay(int)");

extern "C" {static PyObject *meth_QAbstractButton_setAutoRepeatDelay(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setAutoRepeatDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            sipCpp->setAutoRepeatDelay(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setAutoRepeatDelay, doc_QAbstractButton_setAutoRepeatDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_autoRepeatDelay, "QAbstractButton.autoRepeatDelay() -> int");

extern "C" {static PyObject *meth_QAbstractButton_autoRepeatDelay(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_autoRepeatDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->autoRepeatDelay();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_autoRepeatDelay, doc_QAbstractButton_autoRepeatDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setAutoRepeatInterval, "QAbstractButton.setAutoRepeatInterval(int)");

extern "C" {static PyObject *meth_QAbstractButton_setAutoRepeatInterval(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setAutoRepeatInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            sipCpp->setAutoRepeatInterval(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setAutoRepeatInterval, doc_QAbstractButton_setAutoRepeatInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_autoRepeatInterval, "QAbstractButton.autoRepeatInterval() -> int");

extern "C" {static PyObject *meth_QAbstractButton_autoRepeatInterval(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_autoRepeatInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->autoRepeatInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_autoRepeatInterval, doc_QAbstractButton_autoRepeatInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setText, "QAbstractButton.setText(str)");

extern "C" {static PyObject *meth_QAbstractButton_setText(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setText, doc_QAbstractButton_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_text, "QAbstractButton.text() -> str");

extern "C" {static PyObject *meth_QAbstractButton_text(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_text, doc_QAbstractButton_text);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setIcon, "QAbstractButton.setIcon(QIcon)");

extern "C" {static PyObject *meth_QAbstractButton_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon* a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setIcon, doc_QAbstractButton_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_icon, "QAbstractButton.icon() -> QIcon");

extern "C" {static PyObject *meth_QAbstractButton_icon(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            QIcon*sipRes;

            sipRes = new QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_icon, doc_QAbstractButton_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_iconSize, "QAbstractButton.iconSize() -> QSize");

extern "C" {static PyObject *meth_QAbstractButton_iconSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_iconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->iconSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_iconSize, doc_QAbstractButton_iconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setShortcut, "QAbstractButton.setShortcut(QKeySequence)");

extern "C" {static PyObject *meth_QAbstractButton_setShortcut(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setShortcut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QKeySequence* a0;
        int a0State = 0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QKeySequence, &a0, &a0State))
        {
            sipCpp->setShortcut(*a0);
            sipReleaseType(const_cast<QKeySequence *>(a0),sipType_QKeySequence,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setShortcut, doc_QAbstractButton_setShortcut);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_shortcut, "QAbstractButton.shortcut() -> QKeySequence");

extern "C" {static PyObject *meth_QAbstractButton_shortcut(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_shortcut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            QKeySequence*sipRes;

            sipRes = new QKeySequence(sipCpp->shortcut());

            return sipConvertFromNewType(sipRes,sipType_QKeySequence,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_shortcut, doc_QAbstractButton_shortcut);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setCheckable, "QAbstractButton.setCheckable(bool)");

extern "C" {static PyObject *meth_QAbstractButton_setCheckable(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            sipCpp->setCheckable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setCheckable, doc_QAbstractButton_setCheckable);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_isCheckable, "QAbstractButton.isCheckable() -> bool");

extern "C" {static PyObject *meth_QAbstractButton_isCheckable(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_isCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isCheckable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_isCheckable, doc_QAbstractButton_isCheckable);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_isChecked, "QAbstractButton.isChecked() -> bool");

extern "C" {static PyObject *meth_QAbstractButton_isChecked(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_isChecked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isChecked();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_isChecked, doc_QAbstractButton_isChecked);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setDown, "QAbstractButton.setDown(bool)");

extern "C" {static PyObject *meth_QAbstractButton_setDown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            sipCpp->setDown(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setDown, doc_QAbstractButton_setDown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_isDown, "QAbstractButton.isDown() -> bool");

extern "C" {static PyObject *meth_QAbstractButton_isDown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_isDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDown();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_isDown, doc_QAbstractButton_isDown);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setAutoRepeat, "QAbstractButton.setAutoRepeat(bool)");

extern "C" {static PyObject *meth_QAbstractButton_setAutoRepeat(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setAutoRepeat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            sipCpp->setAutoRepeat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setAutoRepeat, doc_QAbstractButton_setAutoRepeat);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_autoRepeat, "QAbstractButton.autoRepeat() -> bool");

extern "C" {static PyObject *meth_QAbstractButton_autoRepeat(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_autoRepeat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoRepeat();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_autoRepeat, doc_QAbstractButton_autoRepeat);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setAutoExclusive, "QAbstractButton.setAutoExclusive(bool)");

extern "C" {static PyObject *meth_QAbstractButton_setAutoExclusive(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setAutoExclusive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            sipCpp->setAutoExclusive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setAutoExclusive, doc_QAbstractButton_setAutoExclusive);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_autoExclusive, "QAbstractButton.autoExclusive() -> bool");

extern "C" {static PyObject *meth_QAbstractButton_autoExclusive(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_autoExclusive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->autoExclusive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_autoExclusive, doc_QAbstractButton_autoExclusive);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_group, "QAbstractButton.group() -> QButtonGroup");

extern "C" {static PyObject *meth_QAbstractButton_group(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_group(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            QButtonGroup*sipRes;

            sipRes = sipCpp->group();

            return sipConvertFromType(sipRes,sipType_QButtonGroup,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_group, doc_QAbstractButton_group);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setIconSize, "QAbstractButton.setIconSize(QSize)");

extern "C" {static PyObject *meth_QAbstractButton_setIconSize(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setIconSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setIconSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setIconSize, doc_QAbstractButton_setIconSize);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_animateClick, "QAbstractButton.animateClick(int msecs=100)");

extern "C" {static PyObject *meth_QAbstractButton_animateClick(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_animateClick(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 100;
        QAbstractButton *sipCpp;

        static const char *sipKwdList[] = {
            sipName_msecs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            sipCpp->animateClick(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_animateClick, doc_QAbstractButton_animateClick);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_click, "QAbstractButton.click()");

extern "C" {static PyObject *meth_QAbstractButton_click(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_click(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            sipCpp->click();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_click, doc_QAbstractButton_click);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_toggle, "QAbstractButton.toggle()");

extern "C" {static PyObject *meth_QAbstractButton_toggle(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_toggle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            sipCpp->toggle();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_toggle, doc_QAbstractButton_toggle);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_setChecked, "QAbstractButton.setChecked(bool)");

extern "C" {static PyObject *meth_QAbstractButton_setChecked(PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_setChecked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QAbstractButton *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QAbstractButton, &sipCpp, &a0))
        {
            sipCpp->setChecked(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_setChecked, doc_QAbstractButton_setChecked);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_paintEvent, "QAbstractButton.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QAbstractButton_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPaintEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QPaintEvent, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractButton, sipName_paintEvent);
                return NULL;
            }

            sipCpp->sipProtect_paintEvent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_paintEvent, doc_QAbstractButton_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_hitButton, "QAbstractButton.hitButton(QPoint) -> bool");

extern "C" {static PyObject *meth_QAbstractButton_hitButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_hitButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPoint* a0;
        const sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QPoint, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_hitButton(sipSelfWasArg,*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_hitButton, doc_QAbstractButton_hitButton);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_checkStateSet, "QAbstractButton.checkStateSet()");

extern "C" {static PyObject *meth_QAbstractButton_checkStateSet(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_checkStateSet(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            sipCpp->sipProtectVirt_checkStateSet(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_checkStateSet, doc_QAbstractButton_checkStateSet);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_nextCheckState, "QAbstractButton.nextCheckState()");

extern "C" {static PyObject *meth_QAbstractButton_nextCheckState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_nextCheckState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QAbstractButton, &sipCpp))
        {
            sipCpp->sipProtectVirt_nextCheckState(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_nextCheckState, doc_QAbstractButton_nextCheckState);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_event, "QAbstractButton.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QAbstractButton_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_event, doc_QAbstractButton_event);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_keyPressEvent, "QAbstractButton.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QAbstractButton_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_keyPressEvent, doc_QAbstractButton_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_keyReleaseEvent, "QAbstractButton.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QAbstractButton_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_keyReleaseEvent, doc_QAbstractButton_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_mousePressEvent, "QAbstractButton.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractButton_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_mousePressEvent, doc_QAbstractButton_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_mouseReleaseEvent, "QAbstractButton.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractButton_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_mouseReleaseEvent, doc_QAbstractButton_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_mouseMoveEvent, "QAbstractButton.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QAbstractButton_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_mouseMoveEvent, doc_QAbstractButton_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_focusInEvent, "QAbstractButton.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractButton_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_focusInEvent, doc_QAbstractButton_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_focusOutEvent, "QAbstractButton.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QAbstractButton_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_focusOutEvent, doc_QAbstractButton_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_changeEvent, "QAbstractButton.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QAbstractButton_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_changeEvent, doc_QAbstractButton_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QAbstractButton_timerEvent, "QAbstractButton.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QAbstractButton_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QAbstractButton_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQAbstractButton *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QAbstractButton, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_timerEvent, doc_QAbstractButton_timerEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractButton(void *, const sipTypeDef *);}
static void *cast_QAbstractButton(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractButton)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(QAbstractButton *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractButton(void *, int);}
static void release_QAbstractButton(void *sipCppV,int)
{
    QAbstractButton *sipCpp = reinterpret_cast<QAbstractButton *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QAbstractButton(sipSimpleWrapper *);}
static void dealloc_QAbstractButton(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractButton *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractButton(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QAbstractButton(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QAbstractButton(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQAbstractButton *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQAbstractButton(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractButton[] = {{454, 255, 1}};


static PyMethodDef methods_QAbstractButton[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QAbstractButton_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_animateClick), (PyCFunction)meth_QAbstractButton_animateClick, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_animateClick)},
    {SIP_MLNAME_CAST(sipName_autoExclusive), meth_QAbstractButton_autoExclusive, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_autoExclusive)},
    {SIP_MLNAME_CAST(sipName_autoRepeat), meth_QAbstractButton_autoRepeat, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_autoRepeat)},
    {SIP_MLNAME_CAST(sipName_autoRepeatDelay), meth_QAbstractButton_autoRepeatDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_autoRepeatDelay)},
    {SIP_MLNAME_CAST(sipName_autoRepeatInterval), meth_QAbstractButton_autoRepeatInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_autoRepeatInterval)},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QAbstractButton_changeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_changeEvent)},
    {SIP_MLNAME_CAST(sipName_checkStateSet), (PyCFunction)meth_QAbstractButton_checkStateSet, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_checkStateSet)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QAbstractButton_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_click), meth_QAbstractButton_click, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_click)},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QAbstractButton_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QAbstractButton_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QAbstractButton_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QAbstractButton_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QAbstractButton_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QAbstractButton_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QAbstractButton_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QAbstractButton_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QAbstractButton_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QAbstractButton_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QAbstractButton_dropEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QAbstractButton_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QAbstractButton_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_event)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QAbstractButton_focusInEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QAbstractButton_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QAbstractButton_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QAbstractButton_focusOutEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QAbstractButton_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_group), meth_QAbstractButton_group, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_group)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QAbstractButton_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hitButton), (PyCFunction)meth_QAbstractButton_hitButton, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_hitButton)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QAbstractButton_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_icon)},
    {SIP_MLNAME_CAST(sipName_iconSize), meth_QAbstractButton_iconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_iconSize)},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QAbstractButton_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QAbstractButton_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isCheckable), meth_QAbstractButton_isCheckable, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_isCheckable)},
    {SIP_MLNAME_CAST(sipName_isChecked), meth_QAbstractButton_isChecked, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_isChecked)},
    {SIP_MLNAME_CAST(sipName_isDown), meth_QAbstractButton_isDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_isDown)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QAbstractButton_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QAbstractButton_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QAbstractButton_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QAbstractButton_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QAbstractButton_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QAbstractButton_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QAbstractButton_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QAbstractButton_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QAbstractButton_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QAbstractButton_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QAbstractButton_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nextCheckState), (PyCFunction)meth_QAbstractButton_nextCheckState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_nextCheckState)},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QAbstractButton_paintEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_paintEvent)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QAbstractButton_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QAbstractButton_resizeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QAbstractButton_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QAbstractButton_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAutoExclusive), meth_QAbstractButton_setAutoExclusive, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setAutoExclusive)},
    {SIP_MLNAME_CAST(sipName_setAutoRepeat), meth_QAbstractButton_setAutoRepeat, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setAutoRepeat)},
    {SIP_MLNAME_CAST(sipName_setAutoRepeatDelay), meth_QAbstractButton_setAutoRepeatDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setAutoRepeatDelay)},
    {SIP_MLNAME_CAST(sipName_setAutoRepeatInterval), meth_QAbstractButton_setAutoRepeatInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setAutoRepeatInterval)},
    {SIP_MLNAME_CAST(sipName_setCheckable), meth_QAbstractButton_setCheckable, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setCheckable)},
    {SIP_MLNAME_CAST(sipName_setChecked), meth_QAbstractButton_setChecked, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setChecked)},
    {SIP_MLNAME_CAST(sipName_setDown), meth_QAbstractButton_setDown, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setDown)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QAbstractButton_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setIcon)},
    {SIP_MLNAME_CAST(sipName_setIconSize), meth_QAbstractButton_setIconSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setIconSize)},
    {SIP_MLNAME_CAST(sipName_setShortcut), meth_QAbstractButton_setShortcut, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setShortcut)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QAbstractButton_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_setText)},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QAbstractButton_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_shortcut), meth_QAbstractButton_shortcut, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_shortcut)},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QAbstractButton_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QAbstractButton_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QAbstractButton_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_text)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QAbstractButton_timerEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QAbstractButton_timerEvent)},
    {SIP_MLNAME_CAST(sipName_toggle), meth_QAbstractButton_toggle, METH_VARARGS, SIP_MLDOC_CAST(doc_QAbstractButton_toggle)},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QAbstractButton_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QAbstractButton_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};


extern "C" {static int emit_QAbstractButton_clicked(void *, PyObject *);}

static int emit_QAbstractButton_clicked(void *sipCppV, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    QAbstractButton *sipCpp = reinterpret_cast<QAbstractButton *>(sipCppV);

    {
        bool a0 = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "|b", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clicked(a0);
            Py_END_ALLOW_THREADS


            return 0;
        }
    }

    sipNoMethod(sipParseErr, sipName_QAbstractButton, sipName_clicked, NULL);

    return -1;
}


/* Define this type's signals. */
static const pyqt5QtSignal signals_QAbstractButton[] = {
    {"toggled(bool)", "\1QAbstractButton.toggled[bool]", 0, 0},
    {"clicked(bool)", "\1QAbstractButton.clicked[bool]", 0, emit_QAbstractButton_clicked},
    {"released()", "\1QAbstractButton.released", 0, 0},
    {"pressed()", "\1QAbstractButton.pressed", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QAbstractButton, "\1QAbstractButton(QWidget parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QAbstractButton = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QAbstractButton,
        {0}
    },
    {
        sipNameNr_QAbstractButton,
        {0, 0, 1},
        75, methods_QAbstractButton,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QAbstractButton,
    -1,
    -1,
    supers_QAbstractButton,
    0,
    init_type_QAbstractButton,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractButton,
    0,
    0,
    0,
    release_QAbstractButton,
    cast_QAbstractButton,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QAbstractButton::staticMetaObject,
    0,
    signals_QAbstractButton,
    0
};
