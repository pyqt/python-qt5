/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:12 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qfiledialog.sip"
#include <qfiledialog.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qfiledialog.sip"
#include <qfiledialog.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qdir.sip"
#include <qdir.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qabstractproxymodel.sip"
#include <qabstractproxymodel.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qfileiconprovider.sip"
#include <qfileiconprovider.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qdir.sip"
#include <qdir.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 452 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 395 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 408 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 635 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 177 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 275 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 180 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 382 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 183 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 368 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 186 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 189 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 195 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 198 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 201 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 204 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 207 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 210 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 213 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 216 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 219 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 225 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 228 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 231 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 237 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 240 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 243 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 246 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 249 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 252 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 255 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 258 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"


class sipQFileDialog : public QFileDialog
{
public:
    sipQFileDialog(QWidget*,Qt::WindowFlags);
    sipQFileDialog(QWidget*,const QString&,const QString&,const QString&);
    virtual ~sipQFileDialog();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_enterEvent(bool,QEvent*);
    void sipProtectVirt_leaveEvent(bool,QEvent*);
    void sipProtectVirt_paintEvent(bool,QPaintEvent*);
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);
    void sipProtectVirt_actionEvent(bool,QActionEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent*);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool,QDropEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const QByteArray&,void*,long*);
    QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool,QPainter*) const;
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_closeEvent(bool,QCloseEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent*);
    bool sipProtectVirt_eventFilter(bool,QObject*,QEvent*);
    void sipProtectVirt_done(bool,int);
    void sipProtectVirt_accept(bool);
    void sipProtectVirt_changeEvent(bool,QEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void moveEvent(QMoveEvent*);
    void paintEvent(QPaintEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    bool event(QEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    int devType() const;
    bool eventFilter(QObject*,QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void resizeEvent(QResizeEvent*);
    void showEvent(QShowEvent*);
    void closeEvent(QCloseEvent*);
    void keyPressEvent(QKeyEvent*);
    void reject();
    int exec();
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void setVisible(bool);
    void open();
    void changeEvent(QEvent*);
    void accept();
    void done(int);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFileDialog(const sipQFileDialog &);
    sipQFileDialog &operator = (const sipQFileDialog &);

    char sipPyMethods[51];
};

sipQFileDialog::sipQFileDialog(QWidget*a0,Qt::WindowFlags a1): QFileDialog(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFileDialog::sipQFileDialog(QWidget*a0,const QString& a1,const QString& a2,const QString& a3): QFileDialog(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFileDialog::~sipQFileDialog()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQFileDialog::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QFileDialog);
}

int sipQFileDialog::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QFileDialog::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QFileDialog,_c,_id,_a);

    return _id;
}

void *sipQFileDialog::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QFileDialog, _clname, &sipCpp) ? sipCpp : QFileDialog::qt_metacast(_clname));
}

void sipQFileDialog::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QFileDialog::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QFileDialog::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QFileDialog::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QFileDialog::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QFileDialog::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QFileDialog::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQFileDialog::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QFileDialog::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQFileDialog::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QFileDialog::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQFileDialog::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QFileDialog::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQFileDialog::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QFileDialog::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQFileDialog::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QFileDialog::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QFileDialog::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQFileDialog::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QFileDialog::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QFileDialog::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QFileDialog::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QFileDialog::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QFileDialog::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QFileDialog::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QFileDialog::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QFileDialog::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QFileDialog::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QFileDialog::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QFileDialog::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QFileDialog::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QFileDialog::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QFileDialog::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QFileDialog::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QFileDialog::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QFileDialog::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QFileDialog::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QFileDialog::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QFileDialog::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQFileDialog::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QFileDialog::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQFileDialog::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QFileDialog::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQFileDialog::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QFileDialog::heightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQFileDialog::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QFileDialog::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQFileDialog::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QFileDialog::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQFileDialog::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QFileDialog::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QFileDialog::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QFileDialog::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QFileDialog::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QFileDialog::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::reject()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_reject);

    if (!sipMeth)
    {
        QFileDialog::reject();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQFileDialog::exec()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_exec_);

    if (!sipMeth)
        return QFileDialog::exec();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQFileDialog::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QFileDialog::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQFileDialog::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QFileDialog::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQFileDialog::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QFileDialog::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::open()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_open);

    if (!sipMeth)
    {
        QFileDialog::open();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQFileDialog::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QFileDialog::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQFileDialog::accept()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_accept);

    if (!sipMeth)
    {
        QFileDialog::accept();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQFileDialog::done(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_done);

    if (!sipMeth)
    {
        QFileDialog::done(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQFileDialog::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQFileDialog::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQFileDialog::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQFileDialog::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQFileDialog::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQFileDialog::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQFileDialog::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQFileDialog::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQFileDialog::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

bool sipQFileDialog::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QWidget::event(a0) : event(a0));
}

void sipQFileDialog::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQFileDialog::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQFileDialog::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQFileDialog::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QWidget::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQFileDialog::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QWidget::wheelEvent(a0) : wheelEvent(a0));
}

void sipQFileDialog::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQFileDialog::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QWidget::focusInEvent(a0) : focusInEvent(a0));
}

void sipQFileDialog::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QWidget::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQFileDialog::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQFileDialog::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQFileDialog::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent*a0)
{
    (sipSelfWasArg ? QWidget::paintEvent(a0) : paintEvent(a0));
}

void sipQFileDialog::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQFileDialog::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQFileDialog::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent*a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQFileDialog::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQFileDialog::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQFileDialog::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QWidget::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQFileDialog::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QWidget::dropEvent(a0) : dropEvent(a0));
}

void sipQFileDialog::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQFileDialog::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQFileDialog::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QWidget::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQFileDialog::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQFileDialog::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQFileDialog::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQFileDialog::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QWidget::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipQFileDialog::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQFileDialog::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

bool sipQFileDialog::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ? QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

QPainter* sipQFileDialog::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QWidget::sharedPainter() : sharedPainter());
}

void sipQFileDialog::sipProtectVirt_initPainter(bool sipSelfWasArg,QPainter*a0) const
{
    (sipSelfWasArg ? QWidget::initPainter(a0) : initPainter(a0));
}

void sipQFileDialog::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QDialog::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQFileDialog::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent*a0)
{
    (sipSelfWasArg ? QDialog::closeEvent(a0) : closeEvent(a0));
}

void sipQFileDialog::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QDialog::showEvent(a0) : showEvent(a0));
}

void sipQFileDialog::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QDialog::resizeEvent(a0) : resizeEvent(a0));
}

void sipQFileDialog::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent*a0)
{
    (sipSelfWasArg ? QDialog::contextMenuEvent(a0) : contextMenuEvent(a0));
}

bool sipQFileDialog::sipProtectVirt_eventFilter(bool sipSelfWasArg,QObject*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QDialog::eventFilter(a0,a1) : eventFilter(a0,a1));
}

void sipQFileDialog::sipProtectVirt_done(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QFileDialog::done(a0) : done(a0));
}

void sipQFileDialog::sipProtectVirt_accept(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QFileDialog::accept() : accept());
}

void sipQFileDialog::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QFileDialog::changeEvent(a0) : changeEvent(a0));
}


PyDoc_STRVAR(doc_QFileDialog_sender, "QFileDialog.sender() -> QObject");

extern "C" {static PyObject *meth_QFileDialog_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1592 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_sender, doc_QFileDialog_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_receivers, "QFileDialog.receivers(signal) -> int");

extern "C" {static PyObject *meth_QFileDialog_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1651 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_receivers, doc_QFileDialog_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_timerEvent, "QFileDialog.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QFileDialog_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_timerEvent, doc_QFileDialog_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_childEvent, "QFileDialog.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QFileDialog_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_childEvent, doc_QFileDialog_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_customEvent, "QFileDialog.customEvent(QEvent)");

extern "C" {static PyObject *meth_QFileDialog_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_customEvent, doc_QFileDialog_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_connectNotify, "QFileDialog.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QFileDialog_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_connectNotify, doc_QFileDialog_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_disconnectNotify, "QFileDialog.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QFileDialog_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_disconnectNotify, doc_QFileDialog_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_senderSignalIndex, "QFileDialog.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QFileDialog_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_senderSignalIndex, doc_QFileDialog_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_isSignalConnected, "QFileDialog.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QFileDialog_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_isSignalConnected, doc_QFileDialog_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_event, "QFileDialog.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QFileDialog_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_event, doc_QFileDialog_event);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_mousePressEvent, "QFileDialog.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QFileDialog_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_mousePressEvent, doc_QFileDialog_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_mouseReleaseEvent, "QFileDialog.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QFileDialog_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_mouseReleaseEvent, doc_QFileDialog_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_mouseDoubleClickEvent, "QFileDialog.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QFileDialog_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_mouseDoubleClickEvent, doc_QFileDialog_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_mouseMoveEvent, "QFileDialog.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QFileDialog_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_mouseMoveEvent, doc_QFileDialog_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_wheelEvent, "QFileDialog.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QFileDialog_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_wheelEvent, doc_QFileDialog_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_keyReleaseEvent, "QFileDialog.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QFileDialog_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_keyReleaseEvent, doc_QFileDialog_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_focusInEvent, "QFileDialog.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QFileDialog_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_focusInEvent, doc_QFileDialog_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_focusOutEvent, "QFileDialog.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QFileDialog_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_focusOutEvent, doc_QFileDialog_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_enterEvent, "QFileDialog.enterEvent(QEvent)");

extern "C" {static PyObject *meth_QFileDialog_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_enterEvent, doc_QFileDialog_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_leaveEvent, "QFileDialog.leaveEvent(QEvent)");

extern "C" {static PyObject *meth_QFileDialog_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_leaveEvent, doc_QFileDialog_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_paintEvent, "QFileDialog.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QFileDialog_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_paintEvent, doc_QFileDialog_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_moveEvent, "QFileDialog.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QFileDialog_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_moveEvent, doc_QFileDialog_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_tabletEvent, "QFileDialog.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QFileDialog_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_tabletEvent, doc_QFileDialog_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_actionEvent, "QFileDialog.actionEvent(QActionEvent)");

extern "C" {static PyObject *meth_QFileDialog_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_actionEvent, doc_QFileDialog_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_dragEnterEvent, "QFileDialog.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QFileDialog_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_dragEnterEvent, doc_QFileDialog_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_dragMoveEvent, "QFileDialog.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QFileDialog_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_dragMoveEvent, doc_QFileDialog_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_dragLeaveEvent, "QFileDialog.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QFileDialog_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_dragLeaveEvent, doc_QFileDialog_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_dropEvent, "QFileDialog.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QFileDialog_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_dropEvent, doc_QFileDialog_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_hideEvent, "QFileDialog.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QFileDialog_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_hideEvent, doc_QFileDialog_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_metric, "QFileDialog.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QFileDialog_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_metric, doc_QFileDialog_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_inputMethodEvent, "QFileDialog.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QFileDialog_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_inputMethodEvent, doc_QFileDialog_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_updateMicroFocus, "QFileDialog.updateMicroFocus()");

extern "C" {static PyObject *meth_QFileDialog_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_updateMicroFocus, doc_QFileDialog_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_create, "QFileDialog.create(sip.voidptr window=0, bool initializeWindow=True, bool destroyOldWindow=True)");

extern "C" {static PyObject *meth_QFileDialog_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0def = 0;
        WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQFileDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_create, doc_QFileDialog_create);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_destroy, "QFileDialog.destroy(bool destroyWindow=True, bool destroySubWindows=True)");

extern "C" {static PyObject *meth_QFileDialog_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQFileDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QFileDialog, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_destroy, doc_QFileDialog_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_focusNextPrevChild, "QFileDialog.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QFileDialog_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_focusNextPrevChild, doc_QFileDialog_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_focusNextChild, "QFileDialog.focusNextChild() -> bool");

extern "C" {static PyObject *meth_QFileDialog_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_focusNextChild, doc_QFileDialog_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_focusPreviousChild, "QFileDialog.focusPreviousChild() -> bool");

extern "C" {static PyObject *meth_QFileDialog_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_focusPreviousChild, doc_QFileDialog_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_nativeEvent, "QFileDialog.nativeEvent(QByteArray, sip.voidptr) -> (bool, int)");

extern "C" {static PyObject *meth_QFileDialog_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_nativeEvent, doc_QFileDialog_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_sharedPainter, "QFileDialog.sharedPainter() -> QPainter");

extern "C" {static PyObject *meth_QFileDialog_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_sharedPainter, doc_QFileDialog_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_initPainter, "QFileDialog.initPainter(QPainter)");

extern "C" {static PyObject *meth_QFileDialog_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_initPainter, doc_QFileDialog_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_keyPressEvent, "QFileDialog.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QFileDialog_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_keyPressEvent, doc_QFileDialog_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_closeEvent, "QFileDialog.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QFileDialog_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_closeEvent, doc_QFileDialog_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_showEvent, "QFileDialog.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QFileDialog_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_showEvent, doc_QFileDialog_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_resizeEvent, "QFileDialog.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QFileDialog_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_resizeEvent, doc_QFileDialog_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_contextMenuEvent, "QFileDialog.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QFileDialog_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_contextMenuEvent, doc_QFileDialog_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_eventFilter, "QFileDialog.eventFilter(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QFileDialog_eventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_eventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_eventFilter, doc_QFileDialog_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setDirectory, "QFileDialog.setDirectory(str)\n"
    "QFileDialog.setDirectory(QDir)");

extern "C" {static PyObject *meth_QFileDialog_setDirectory(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDirectory(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QDir* a0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QDir, &a0))
        {
            sipCpp->setDirectory(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setDirectory, doc_QFileDialog_setDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_directory, "QFileDialog.directory() -> QDir");

extern "C" {static PyObject *meth_QFileDialog_directory(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_directory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QDir*sipRes;

            sipRes = new QDir(sipCpp->directory());

            return sipConvertFromNewType(sipRes,sipType_QDir,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_directory, doc_QFileDialog_directory);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_selectFile, "QFileDialog.selectFile(str)");

extern "C" {static PyObject *meth_QFileDialog_selectFile(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->selectFile(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectFile, doc_QFileDialog_selectFile);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_selectedFiles, "QFileDialog.selectedFiles() -> list-of-str");

extern "C" {static PyObject *meth_QFileDialog_selectedFiles(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectedFiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->selectedFiles());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectedFiles, doc_QFileDialog_selectedFiles);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setViewMode, "QFileDialog.setViewMode(QFileDialog.ViewMode)");

extern "C" {static PyObject *meth_QFileDialog_setViewMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setViewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileDialog::ViewMode a0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_ViewMode, &a0))
        {
            sipCpp->setViewMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setViewMode, doc_QFileDialog_setViewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_viewMode, "QFileDialog.viewMode() -> QFileDialog.ViewMode");

extern "C" {static PyObject *meth_QFileDialog_viewMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_viewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QFileDialog::ViewMode sipRes;

            sipRes = sipCpp->viewMode();

            return sipConvertFromEnum(sipRes,sipType_QFileDialog_ViewMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_viewMode, doc_QFileDialog_viewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setFileMode, "QFileDialog.setFileMode(QFileDialog.FileMode)");

extern "C" {static PyObject *meth_QFileDialog_setFileMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setFileMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileDialog::FileMode a0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_FileMode, &a0))
        {
            sipCpp->setFileMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setFileMode, doc_QFileDialog_setFileMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_fileMode, "QFileDialog.fileMode() -> QFileDialog.FileMode");

extern "C" {static PyObject *meth_QFileDialog_fileMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_fileMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QFileDialog::FileMode sipRes;

            sipRes = sipCpp->fileMode();

            return sipConvertFromEnum(sipRes,sipType_QFileDialog_FileMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_fileMode, doc_QFileDialog_fileMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setAcceptMode, "QFileDialog.setAcceptMode(QFileDialog.AcceptMode)");

extern "C" {static PyObject *meth_QFileDialog_setAcceptMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setAcceptMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileDialog::AcceptMode a0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_AcceptMode, &a0))
        {
            sipCpp->setAcceptMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setAcceptMode, doc_QFileDialog_setAcceptMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_acceptMode, "QFileDialog.acceptMode() -> QFileDialog.AcceptMode");

extern "C" {static PyObject *meth_QFileDialog_acceptMode(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_acceptMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QFileDialog::AcceptMode sipRes;

            sipRes = sipCpp->acceptMode();

            return sipConvertFromEnum(sipRes,sipType_QFileDialog_AcceptMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_acceptMode, doc_QFileDialog_acceptMode);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setDefaultSuffix, "QFileDialog.setDefaultSuffix(str)");

extern "C" {static PyObject *meth_QFileDialog_setDefaultSuffix(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setDefaultSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDefaultSuffix(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setDefaultSuffix, doc_QFileDialog_setDefaultSuffix);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_defaultSuffix, "QFileDialog.defaultSuffix() -> str");

extern "C" {static PyObject *meth_QFileDialog_defaultSuffix(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_defaultSuffix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->defaultSuffix());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_defaultSuffix, doc_QFileDialog_defaultSuffix);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setHistory, "QFileDialog.setHistory(list-of-str)");

extern "C" {static PyObject *meth_QFileDialog_setHistory(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setHistory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setHistory(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setHistory, doc_QFileDialog_setHistory);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_history, "QFileDialog.history() -> list-of-str");

extern "C" {static PyObject *meth_QFileDialog_history(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->history());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_history, doc_QFileDialog_history);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setItemDelegate, "QFileDialog.setItemDelegate(QAbstractItemDelegate)");

extern "C" {static PyObject *meth_QFileDialog_setItemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setItemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractItemDelegate* a0;
        PyObject *a0Keep;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QFileDialog, &sipCpp, &a0Keep, sipType_QAbstractItemDelegate, &a0))
        {
            sipCpp->setItemDelegate(a0);

            sipKeepReference(sipSelf, -20, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setItemDelegate, doc_QFileDialog_setItemDelegate);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_itemDelegate, "QFileDialog.itemDelegate() -> QAbstractItemDelegate");

extern "C" {static PyObject *meth_QFileDialog_itemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_itemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QAbstractItemDelegate*sipRes;

            sipRes = sipCpp->itemDelegate();

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_itemDelegate, doc_QFileDialog_itemDelegate);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setIconProvider, "QFileDialog.setIconProvider(QFileIconProvider)");

extern "C" {static PyObject *meth_QFileDialog_setIconProvider(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setIconProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileIconProvider* a0;
        PyObject *a0Keep;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QFileDialog, &sipCpp, &a0Keep, sipType_QFileIconProvider, &a0))
        {
            sipCpp->setIconProvider(a0);

            sipKeepReference(sipSelf, -21, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setIconProvider, doc_QFileDialog_setIconProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_iconProvider, "QFileDialog.iconProvider() -> QFileIconProvider");

extern "C" {static PyObject *meth_QFileDialog_iconProvider(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_iconProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QFileIconProvider*sipRes;

            sipRes = sipCpp->iconProvider();

            return sipConvertFromType(sipRes,sipType_QFileIconProvider,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_iconProvider, doc_QFileDialog_iconProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setLabelText, "QFileDialog.setLabelText(QFileDialog.DialogLabel, str)");

extern "C" {static PyObject *meth_QFileDialog_setLabelText(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setLabelText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileDialog::DialogLabel a0;
        const QString* a1;
        int a1State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_DialogLabel, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->setLabelText(a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setLabelText, doc_QFileDialog_setLabelText);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_labelText, "QFileDialog.labelText(QFileDialog.DialogLabel) -> str");

extern "C" {static PyObject *meth_QFileDialog_labelText(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_labelText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileDialog::DialogLabel a0;
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_DialogLabel, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->labelText(a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_labelText, doc_QFileDialog_labelText);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getExistingDirectory, "QFileDialog.getExistingDirectory(QWidget parent=None, str caption='', str directory='', QFileDialog.Options options=QFileDialog.ShowDirsOnly) -> str");

extern "C" {static PyObject *meth_QFileDialog_getExistingDirectory(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getExistingDirectory(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0 = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        QFileDialog::Options a3def = QFileDialog::ShowDirsOnly;
        QFileDialog::Options* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QFileDialog_Options, &a3, &a3State))
        {
            QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QFileDialog::getExistingDirectory(a0,*a1,*a2,*a3));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QFileDialog_Options,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getExistingDirectory, doc_QFileDialog_getExistingDirectory);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getOpenFileName, "QFileDialog.getOpenFileName(QWidget parent=None, str caption='', str directory='', str filter='', str initialFilter='', QFileDialog.Options options=0) -> (str, str)");

extern "C" {static PyObject *meth_QFileDialog_getOpenFileName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getOpenFileName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0 = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        const QString& a3def = QString();
        const QString* a3 = &a3def;
        int a3State = 0;
        const QString& a4def = QString();
        const QString* a4 = &a4def;
        int a4State = 0;
        QFileDialog::Options a5def = 0;
        QFileDialog::Options* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State))
        {
            PyObject * sipRes = 0;

#line 115 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qfiledialog.sip"
        QString *name;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        name = new QString(QFileDialog::getOpenFileName(a0, *a1, *a2, *a3, filter, *a5));
        
        Py_END_ALLOW_THREADS
        
        PyObject *name_obj = sipConvertFromNewType(name, sipType_QString, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (name_obj && filter_obj)
            sipRes = PyTuple_Pack(2, name_obj, filter_obj);
        
        Py_XDECREF(name_obj);
        Py_XDECREF(filter_obj);
#line 3600 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getOpenFileName, doc_QFileDialog_getOpenFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getOpenFileNames, "QFileDialog.getOpenFileNames(QWidget parent=None, str caption='', str directory='', str filter='', str initialFilter='', QFileDialog.Options options=0) -> (list-of-str, str)");

extern "C" {static PyObject *meth_QFileDialog_getOpenFileNames(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getOpenFileNames(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0 = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        const QString& a3def = QString();
        const QString* a3 = &a3def;
        int a3State = 0;
        const QString& a4def = QString();
        const QString* a4 = &a4def;
        int a4State = 0;
        QFileDialog::Options a5def = 0;
        QFileDialog::Options* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State))
        {
            PyObject * sipRes = 0;

#line 136 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qfiledialog.sip"
        QStringList *names;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        names = new QStringList(QFileDialog::getOpenFileNames(a0, *a1, *a2, *a3, filter, *a5));
        
        Py_END_ALLOW_THREADS
        
        PyObject *names_obj = sipConvertFromNewType(names, sipType_QStringList, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (names_obj && filter_obj)
            sipRes = PyTuple_Pack(2, names_obj, filter_obj);
        
        Py_XDECREF(names_obj);
        Py_XDECREF(filter_obj);
#line 3674 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getOpenFileNames, doc_QFileDialog_getOpenFileNames);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getSaveFileName, "QFileDialog.getSaveFileName(QWidget parent=None, str caption='', str directory='', str filter='', str initialFilter='', QFileDialog.Options options=0) -> (str, str)");

extern "C" {static PyObject *meth_QFileDialog_getSaveFileName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getSaveFileName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0 = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        const QString& a3def = QString();
        const QString* a3 = &a3def;
        int a3State = 0;
        const QString& a4def = QString();
        const QString* a4 = &a4def;
        int a4State = 0;
        QFileDialog::Options a5def = 0;
        QFileDialog::Options* a5 = &a5def;
        int a5State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State))
        {
            PyObject * sipRes = 0;

#line 157 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qfiledialog.sip"
        QString *name;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        name = new QString(QFileDialog::getSaveFileName(a0, *a1, *a2, *a3, filter, *a5));
        
        Py_END_ALLOW_THREADS
        
        PyObject *name_obj = sipConvertFromNewType(name, sipType_QString, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (name_obj && filter_obj)
            sipRes = PyTuple_Pack(2, name_obj, filter_obj);
        
        Py_XDECREF(name_obj);
        Py_XDECREF(filter_obj);
#line 3748 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getSaveFileName, doc_QFileDialog_getSaveFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_done, "QFileDialog.done(int)");

extern "C" {static PyObject *meth_QFileDialog_done(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_done(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_done(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_done, doc_QFileDialog_done);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_accept, "QFileDialog.accept()");

extern "C" {static PyObject *meth_QFileDialog_accept(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_accept(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            sipCpp->sipProtectVirt_accept(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_accept, doc_QFileDialog_accept);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_changeEvent, "QFileDialog.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QFileDialog_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQFileDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_changeEvent, doc_QFileDialog_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setSidebarUrls, "QFileDialog.setSidebarUrls(list-of-QUrl)");

extern "C" {static PyObject *meth_QFileDialog_setSidebarUrls(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setSidebarUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QUrl>* a0;
        int a0State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QList_0100QUrl,&a0, &a0State))
        {
            sipCpp->setSidebarUrls(*a0);
            sipReleaseType(const_cast<QList<QUrl> *>(a0),sipType_QList_0100QUrl,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setSidebarUrls, doc_QFileDialog_setSidebarUrls);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_sidebarUrls, "QFileDialog.sidebarUrls() -> list-of-QUrl");

extern "C" {static PyObject *meth_QFileDialog_sidebarUrls(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_sidebarUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QList<QUrl>*sipRes;

            sipRes = new QList<QUrl>(sipCpp->sidebarUrls());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_sidebarUrls, doc_QFileDialog_sidebarUrls);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_saveState, "QFileDialog.saveState() -> QByteArray");

extern "C" {static PyObject *meth_QFileDialog_saveState(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_saveState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QByteArray*sipRes;

            sipRes = new QByteArray(sipCpp->saveState());

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_saveState, doc_QFileDialog_saveState);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_restoreState, "QFileDialog.restoreState(QByteArray) -> bool");

extern "C" {static PyObject *meth_QFileDialog_restoreState(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_restoreState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QByteArray, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->restoreState(*a0);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_restoreState, doc_QFileDialog_restoreState);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setProxyModel, "QFileDialog.setProxyModel(QAbstractProxyModel)");

extern "C" {static PyObject *meth_QFileDialog_setProxyModel(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setProxyModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QAbstractProxyModel* a0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QAbstractProxyModel, &a0))
        {
            sipCpp->setProxyModel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setProxyModel, doc_QFileDialog_setProxyModel);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_proxyModel, "QFileDialog.proxyModel() -> QAbstractProxyModel");

extern "C" {static PyObject *meth_QFileDialog_proxyModel(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_proxyModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QAbstractProxyModel*sipRes;

            sipRes = sipCpp->proxyModel();

            return sipConvertFromType(sipRes,sipType_QAbstractProxyModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_proxyModel, doc_QFileDialog_proxyModel);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setNameFilter, "QFileDialog.setNameFilter(str)");

extern "C" {static PyObject *meth_QFileDialog_setNameFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setNameFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setNameFilter(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setNameFilter, doc_QFileDialog_setNameFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setNameFilters, "QFileDialog.setNameFilters(list-of-str)");

extern "C" {static PyObject *meth_QFileDialog_setNameFilters(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setNameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setNameFilters(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setNameFilters, doc_QFileDialog_setNameFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_nameFilters, "QFileDialog.nameFilters() -> list-of-str");

extern "C" {static PyObject *meth_QFileDialog_nameFilters(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_nameFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->nameFilters());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_nameFilters, doc_QFileDialog_nameFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_selectNameFilter, "QFileDialog.selectNameFilter(str)");

extern "C" {static PyObject *meth_QFileDialog_selectNameFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectNameFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->selectNameFilter(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectNameFilter, doc_QFileDialog_selectNameFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_selectedNameFilter, "QFileDialog.selectedNameFilter() -> str");

extern "C" {static PyObject *meth_QFileDialog_selectedNameFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectedNameFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->selectedNameFilter());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectedNameFilter, doc_QFileDialog_selectedNameFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_filter, "QFileDialog.filter() -> QDir.Filters");

extern "C" {static PyObject *meth_QFileDialog_filter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_filter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QDir::Filters*sipRes;

            sipRes = new QDir::Filters(sipCpp->filter());

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_filter, doc_QFileDialog_filter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setFilter, "QFileDialog.setFilter(QDir.Filters)");

extern "C" {static PyObject *meth_QFileDialog_setFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QDir::Filters* a0;
        int a0State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QDir_Filters, &a0, &a0State))
        {
            sipCpp->setFilter(*a0);
            sipReleaseType(a0,sipType_QDir_Filters,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setFilter, doc_QFileDialog_setFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setOption, "QFileDialog.setOption(QFileDialog.Option, bool on=True)");

extern "C" {static PyObject *meth_QFileDialog_setOption(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setOption(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QFileDialog::Option a0;
        bool a1 = 1;
        QFileDialog *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_Option, &a0, &a1))
        {
            sipCpp->setOption(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setOption, doc_QFileDialog_setOption);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_testOption, "QFileDialog.testOption(QFileDialog.Option) -> bool");

extern "C" {static PyObject *meth_QFileDialog_testOption(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_testOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileDialog::Option a0;
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_Option, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->testOption(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_testOption, doc_QFileDialog_testOption);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setOptions, "QFileDialog.setOptions(QFileDialog.Options)");

extern "C" {static PyObject *meth_QFileDialog_setOptions(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QFileDialog::Options* a0;
        int a0State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QFileDialog_Options, &a0, &a0State))
        {
            sipCpp->setOptions(*a0);
            sipReleaseType(a0,sipType_QFileDialog_Options,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setOptions, doc_QFileDialog_setOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_options, "QFileDialog.options() -> QFileDialog.Options");

extern "C" {static PyObject *meth_QFileDialog_options(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_options(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QFileDialog::Options*sipRes;

            sipRes = new QFileDialog::Options(sipCpp->options());

            return sipConvertFromNewType(sipRes,sipType_QFileDialog_Options,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_options, doc_QFileDialog_options);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_open, "QFileDialog.open()\n"
    "QFileDialog.open(slot)");

extern "C" {static PyObject *meth_QFileDialog_open(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_open(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QFileDialog::open() : sipCpp->open());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        PyObject * a0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 202 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qfiledialog.sip"
        QObject *receiver;
        QByteArray slot_signature;
        
        if ((sipError = pyqt5_qtwidgets_get_connection_parts(a0, sipCpp, "()", false, &receiver, slot_signature)) == sipErrorNone)
        {
            sipCpp->open(receiver, slot_signature.constData());
        }
        else if (sipError == sipErrorContinue)
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 4371 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_open, doc_QFileDialog_open);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setVisible, "QFileDialog.setVisible(bool)");

extern "C" {static PyObject *meth_QFileDialog_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QFileDialog, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QFileDialog::setVisible(a0) : sipCpp->setVisible(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setVisible, doc_QFileDialog_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setDirectoryUrl, "QFileDialog.setDirectoryUrl(QUrl)");

extern "C" {static PyObject *meth_QFileDialog_setDirectoryUrl(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setDirectoryUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setDirectoryUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setDirectoryUrl, doc_QFileDialog_setDirectoryUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_directoryUrl, "QFileDialog.directoryUrl() -> QUrl");

extern "C" {static PyObject *meth_QFileDialog_directoryUrl(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_directoryUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->directoryUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_directoryUrl, doc_QFileDialog_directoryUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_selectUrl, "QFileDialog.selectUrl(QUrl)");

extern "C" {static PyObject *meth_QFileDialog_selectUrl(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->selectUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectUrl, doc_QFileDialog_selectUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_selectedUrls, "QFileDialog.selectedUrls() -> list-of-QUrl");

extern "C" {static PyObject *meth_QFileDialog_selectedUrls(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectedUrls(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QList<QUrl>*sipRes;

            sipRes = new QList<QUrl>(sipCpp->selectedUrls());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectedUrls, doc_QFileDialog_selectedUrls);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_setMimeTypeFilters, "QFileDialog.setMimeTypeFilters(list-of-str)");

extern "C" {static PyObject *meth_QFileDialog_setMimeTypeFilters(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_setMimeTypeFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QStringList* a0;
        int a0State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            sipCpp->setMimeTypeFilters(*a0);
            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_setMimeTypeFilters, doc_QFileDialog_setMimeTypeFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_mimeTypeFilters, "QFileDialog.mimeTypeFilters() -> list-of-str");

extern "C" {static PyObject *meth_QFileDialog_mimeTypeFilters(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_mimeTypeFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QFileDialog, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->mimeTypeFilters());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_mimeTypeFilters, doc_QFileDialog_mimeTypeFilters);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_selectMimeTypeFilter, "QFileDialog.selectMimeTypeFilter(str)");

extern "C" {static PyObject *meth_QFileDialog_selectMimeTypeFilter(PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_selectMimeTypeFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QFileDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QFileDialog, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->selectMimeTypeFilter(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_selectMimeTypeFilter, doc_QFileDialog_selectMimeTypeFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getExistingDirectoryUrl, "QFileDialog.getExistingDirectoryUrl(QWidget parent=None, str caption='', QUrl directory=QUrl(), QFileDialog.Options options=QFileDialog.ShowDirsOnly, list-of-str supportedSchemes=[]) -> QUrl");

extern "C" {static PyObject *meth_QFileDialog_getExistingDirectoryUrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getExistingDirectoryUrl(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0 = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QUrl& a2def = QUrl();
        const QUrl* a2 = &a2def;
        QFileDialog::Options a3def = QFileDialog::ShowDirsOnly;
        QFileDialog::Options* a3 = &a3def;
        int a3State = 0;
        const QStringList& a4def = QStringList();
        const QStringList* a4 = &a4def;
        int a4State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_options,
            sipName_supportedSchemes,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J9J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QUrl, &a2, sipType_QFileDialog_Options, &a3, &a3State, sipType_QStringList,&a4, &a4State))
        {
            QUrl*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(QFileDialog::getExistingDirectoryUrl(a0,*a1,*a2,*a3,*a4));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a3,sipType_QFileDialog_Options,a3State);
            sipReleaseType(const_cast<QStringList *>(a4),sipType_QStringList,a4State);

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getExistingDirectoryUrl, doc_QFileDialog_getExistingDirectoryUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getOpenFileUrl, "QFileDialog.getOpenFileUrl(QWidget parent=None, str caption='', str directory='', str filter='', str initialFilter='', QFileDialog.Options options=0, list-of-str supportedSchemes=[]) -> (QUrl, str)");

extern "C" {static PyObject *meth_QFileDialog_getOpenFileUrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getOpenFileUrl(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0 = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        const QString& a3def = QString();
        const QString* a3 = &a3def;
        int a3State = 0;
        const QString& a4def = QString();
        const QString* a4 = &a4def;
        int a4State = 0;
        QFileDialog::Options a5def = 0;
        QFileDialog::Options* a5 = &a5def;
        int a5State = 0;
        const QStringList& a6def = QStringList();
        const QStringList* a6 = &a6def;
        int a6State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
            sipName_supportedSchemes,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State, sipType_QStringList,&a6, &a6State))
        {
            PyObject * sipRes = 0;

#line 259 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qfiledialog.sip"
        QUrl *url;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        url = new QUrl(QFileDialog::getOpenFileUrl(a0, *a1, *a2, *a3, filter, *a5, *a6));
        
        Py_END_ALLOW_THREADS
        
        PyObject *url_obj = sipConvertFromNewType(url, sipType_QUrl, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (url_obj && filter_obj)
            sipRes = PyTuple_Pack(2, url_obj, filter_obj);
        
        Py_XDECREF(url_obj);
        Py_XDECREF(filter_obj);
#line 4725 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);
            sipReleaseType(const_cast<QStringList *>(a6),sipType_QStringList,a6State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getOpenFileUrl, doc_QFileDialog_getOpenFileUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getOpenFileUrls, "QFileDialog.getOpenFileUrls(QWidget parent=None, str caption='', str directory='', str filter='', str initialFilter='', QFileDialog.Options options=0, list-of-str supportedSchemes=[]) -> (list-of-QUrl, str)");

extern "C" {static PyObject *meth_QFileDialog_getOpenFileUrls(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getOpenFileUrls(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0 = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        const QString& a3def = QString();
        const QString* a3 = &a3def;
        int a3State = 0;
        const QString& a4def = QString();
        const QString* a4 = &a4def;
        int a4State = 0;
        QFileDialog::Options a5def = 0;
        QFileDialog::Options* a5 = &a5def;
        int a5State = 0;
        const QStringList& a6def = QStringList();
        const QStringList* a6 = &a6def;
        int a6State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
            sipName_supportedSchemes,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State, sipType_QStringList,&a6, &a6State))
        {
            PyObject * sipRes = 0;

#line 282 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qfiledialog.sip"
        QList<QUrl> url_list;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        url_list = QFileDialog::getOpenFileUrls(a0, *a1, *a2, *a3, filter, *a5, *a6);
        
        Py_END_ALLOW_THREADS
        
        PyObject *url_list_obj = PyList_New(url_list.size());
        
        if (url_list_obj)
        {
            for (int i = 0; i < url_list.size(); ++i)
            {
                QUrl *url = new QUrl(url_list.at(i));
                PyObject *url_obj = sipConvertFromNewType(url, sipType_QUrl, NULL);
                
                if (!url_obj)
                {
                    delete url;
                    Py_DECREF(url_list_obj);
                    url_list_obj = 0;
                    break;
                }
                
                PyList_SET_ITEM(url_list_obj, i, url_obj);
            }
        }
        
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (url_list_obj && filter_obj)
            sipRes = PyTuple_Pack(2, url_list_obj, filter_obj);
        
        Py_XDECREF(url_list_obj);
        Py_XDECREF(filter_obj);
#line 4824 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);
            sipReleaseType(const_cast<QStringList *>(a6),sipType_QStringList,a6State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getOpenFileUrls, doc_QFileDialog_getOpenFileUrls);

    return NULL;
}


PyDoc_STRVAR(doc_QFileDialog_getSaveFileUrl, "QFileDialog.getSaveFileUrl(QWidget parent=None, str caption='', str directory='', str filter='', str initialFilter='', QFileDialog.Options options=0, list-of-str supportedSchemes=[]) -> (QUrl, str)");

extern "C" {static PyObject *meth_QFileDialog_getSaveFileUrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QFileDialog_getSaveFileUrl(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0 = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        const QString& a3def = QString();
        const QString* a3 = &a3def;
        int a3State = 0;
        const QString& a4def = QString();
        const QString* a4 = &a4def;
        int a4State = 0;
        QFileDialog::Options a5def = 0;
        QFileDialog::Options* a5 = &a5def;
        int a5State = 0;
        const QStringList& a6def = QStringList();
        const QStringList* a6 = &a6def;
        int a6State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
            sipName_initialFilter,
            sipName_options,
            sipName_supportedSchemes,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|J8J1J1J1J1J1J1", sipType_QWidget, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QFileDialog_Options, &a5, &a5State, sipType_QStringList,&a6, &a6State))
        {
            PyObject * sipRes = 0;

#line 325 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qfiledialog.sip"
        QUrl *url;
        QString *filter = new QString(*a4);
        
        Py_BEGIN_ALLOW_THREADS
        
        url = new QUrl(QFileDialog::getSaveFileUrl(a0, *a1, *a2, *a3, filter, *a5, *a6));
        
        Py_END_ALLOW_THREADS
        
        PyObject *url_obj = sipConvertFromNewType(url, sipType_QUrl, NULL);
        PyObject *filter_obj = sipConvertFromNewType(filter, sipType_QString, NULL);
        
        if (url_obj && filter_obj)
            sipRes = PyTuple_Pack(2, url_obj, filter_obj);
        
        Py_XDECREF(url_obj);
        Py_XDECREF(filter_obj);
#line 4903 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQFileDialog.cpp"
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(a5,sipType_QFileDialog_Options,a5State);
            sipReleaseType(const_cast<QStringList *>(a6),sipType_QStringList,a6State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QFileDialog, sipName_getSaveFileUrl, doc_QFileDialog_getSaveFileUrl);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QFileDialog(void *, const sipTypeDef *);}
static void *cast_QFileDialog(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QFileDialog)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QDialog)->ctd_cast((QDialog *)(QFileDialog *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFileDialog(void *, int);}
static void release_QFileDialog(void *sipCppV,int)
{
    QFileDialog *sipCpp = reinterpret_cast<QFileDialog *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QFileDialog(sipSimpleWrapper *);}
static void dealloc_QFileDialog(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQFileDialog *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QFileDialog(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QFileDialog(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QFileDialog(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQFileDialog *sipCpp = 0;

    {
        QWidget* a0;
        Qt::WindowFlags* a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JHJ1", sipType_QWidget, &a0, sipOwner, sipType_Qt_WindowFlags, &a1, &a1State))
        {
            sipCpp = new sipQFileDialog(a0,*a1);
            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QWidget* a0 = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        const QString& a3def = QString();
        const QString* a3 = &a3def;
        int a3State = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_caption,
            sipName_directory,
            sipName_filter,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ1J1J1", sipType_QWidget, &a0, sipOwner, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State))
        {
            sipCpp = new sipQFileDialog(a0,*a1,*a2,*a3);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFileDialog[] = {{60, 255, 1}};


static PyMethodDef methods_QFileDialog[] = {
    {SIP_MLNAME_CAST(sipName_accept), (PyCFunction)meth_QFileDialog_accept, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_accept)},
    {SIP_MLNAME_CAST(sipName_acceptMode), meth_QFileDialog_acceptMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_acceptMode)},
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QFileDialog_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QFileDialog_changeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_changeEvent)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QFileDialog_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QFileDialog_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QFileDialog_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QFileDialog_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QFileDialog_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QFileDialog_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultSuffix), meth_QFileDialog_defaultSuffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_defaultSuffix)},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QFileDialog_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_directory), meth_QFileDialog_directory, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_directory)},
    {SIP_MLNAME_CAST(sipName_directoryUrl), meth_QFileDialog_directoryUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_directoryUrl)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QFileDialog_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_done), (PyCFunction)meth_QFileDialog_done, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_done)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QFileDialog_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QFileDialog_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QFileDialog_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QFileDialog_dropEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QFileDialog_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QFileDialog_event, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_eventFilter), (PyCFunction)meth_QFileDialog_eventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_fileMode), meth_QFileDialog_fileMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_fileMode)},
    {SIP_MLNAME_CAST(sipName_filter), meth_QFileDialog_filter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_filter)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QFileDialog_focusInEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QFileDialog_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QFileDialog_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QFileDialog_focusOutEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QFileDialog_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_getExistingDirectory), (PyCFunction)meth_QFileDialog_getExistingDirectory, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getExistingDirectory)},
    {SIP_MLNAME_CAST(sipName_getExistingDirectoryUrl), (PyCFunction)meth_QFileDialog_getExistingDirectoryUrl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getExistingDirectoryUrl)},
    {SIP_MLNAME_CAST(sipName_getOpenFileName), (PyCFunction)meth_QFileDialog_getOpenFileName, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getOpenFileName)},
    {SIP_MLNAME_CAST(sipName_getOpenFileNames), (PyCFunction)meth_QFileDialog_getOpenFileNames, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getOpenFileNames)},
    {SIP_MLNAME_CAST(sipName_getOpenFileUrl), (PyCFunction)meth_QFileDialog_getOpenFileUrl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getOpenFileUrl)},
    {SIP_MLNAME_CAST(sipName_getOpenFileUrls), (PyCFunction)meth_QFileDialog_getOpenFileUrls, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getOpenFileUrls)},
    {SIP_MLNAME_CAST(sipName_getSaveFileName), (PyCFunction)meth_QFileDialog_getSaveFileName, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getSaveFileName)},
    {SIP_MLNAME_CAST(sipName_getSaveFileUrl), (PyCFunction)meth_QFileDialog_getSaveFileUrl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_getSaveFileUrl)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QFileDialog_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_history), meth_QFileDialog_history, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_history)},
    {SIP_MLNAME_CAST(sipName_iconProvider), meth_QFileDialog_iconProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_iconProvider)},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QFileDialog_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QFileDialog_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QFileDialog_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_itemDelegate), meth_QFileDialog_itemDelegate, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_itemDelegate)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QFileDialog_keyPressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QFileDialog_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_labelText), meth_QFileDialog_labelText, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_labelText)},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QFileDialog_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QFileDialog_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mimeTypeFilters), meth_QFileDialog_mimeTypeFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_mimeTypeFilters)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QFileDialog_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QFileDialog_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QFileDialog_mousePressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QFileDialog_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QFileDialog_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nameFilters), meth_QFileDialog_nameFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_nameFilters)},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QFileDialog_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_open), meth_QFileDialog_open, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_open)},
    {SIP_MLNAME_CAST(sipName_options), meth_QFileDialog_options, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_options)},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QFileDialog_paintEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_proxyModel), meth_QFileDialog_proxyModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_proxyModel)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QFileDialog_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QFileDialog_resizeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_restoreState), meth_QFileDialog_restoreState, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_restoreState)},
    {SIP_MLNAME_CAST(sipName_saveState), meth_QFileDialog_saveState, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_saveState)},
    {SIP_MLNAME_CAST(sipName_selectFile), meth_QFileDialog_selectFile, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_selectFile)},
    {SIP_MLNAME_CAST(sipName_selectMimeTypeFilter), meth_QFileDialog_selectMimeTypeFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_selectMimeTypeFilter)},
    {SIP_MLNAME_CAST(sipName_selectNameFilter), meth_QFileDialog_selectNameFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_selectNameFilter)},
    {SIP_MLNAME_CAST(sipName_selectUrl), meth_QFileDialog_selectUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_selectUrl)},
    {SIP_MLNAME_CAST(sipName_selectedFiles), meth_QFileDialog_selectedFiles, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_selectedFiles)},
    {SIP_MLNAME_CAST(sipName_selectedNameFilter), meth_QFileDialog_selectedNameFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_selectedNameFilter)},
    {SIP_MLNAME_CAST(sipName_selectedUrls), meth_QFileDialog_selectedUrls, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_selectedUrls)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QFileDialog_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QFileDialog_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAcceptMode), meth_QFileDialog_setAcceptMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setAcceptMode)},
    {SIP_MLNAME_CAST(sipName_setDefaultSuffix), meth_QFileDialog_setDefaultSuffix, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setDefaultSuffix)},
    {SIP_MLNAME_CAST(sipName_setDirectory), meth_QFileDialog_setDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setDirectory)},
    {SIP_MLNAME_CAST(sipName_setDirectoryUrl), meth_QFileDialog_setDirectoryUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setDirectoryUrl)},
    {SIP_MLNAME_CAST(sipName_setFileMode), meth_QFileDialog_setFileMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setFileMode)},
    {SIP_MLNAME_CAST(sipName_setFilter), meth_QFileDialog_setFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setFilter)},
    {SIP_MLNAME_CAST(sipName_setHistory), meth_QFileDialog_setHistory, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setHistory)},
    {SIP_MLNAME_CAST(sipName_setIconProvider), meth_QFileDialog_setIconProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setIconProvider)},
    {SIP_MLNAME_CAST(sipName_setItemDelegate), meth_QFileDialog_setItemDelegate, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setItemDelegate)},
    {SIP_MLNAME_CAST(sipName_setLabelText), meth_QFileDialog_setLabelText, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setLabelText)},
    {SIP_MLNAME_CAST(sipName_setMimeTypeFilters), meth_QFileDialog_setMimeTypeFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setMimeTypeFilters)},
    {SIP_MLNAME_CAST(sipName_setNameFilter), meth_QFileDialog_setNameFilter, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setNameFilter)},
    {SIP_MLNAME_CAST(sipName_setNameFilters), meth_QFileDialog_setNameFilters, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setNameFilters)},
    {SIP_MLNAME_CAST(sipName_setOption), (PyCFunction)meth_QFileDialog_setOption, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QFileDialog_setOption)},
    {SIP_MLNAME_CAST(sipName_setOptions), meth_QFileDialog_setOptions, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setOptions)},
    {SIP_MLNAME_CAST(sipName_setProxyModel), meth_QFileDialog_setProxyModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setProxyModel)},
    {SIP_MLNAME_CAST(sipName_setSidebarUrls), meth_QFileDialog_setSidebarUrls, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setSidebarUrls)},
    {SIP_MLNAME_CAST(sipName_setViewMode), meth_QFileDialog_setViewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setViewMode)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QFileDialog_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_setVisible)},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QFileDialog_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QFileDialog_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sidebarUrls), meth_QFileDialog_sidebarUrls, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_sidebarUrls)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QFileDialog_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_testOption), meth_QFileDialog_testOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_testOption)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QFileDialog_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QFileDialog_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewMode), meth_QFileDialog_viewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QFileDialog_viewMode)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QFileDialog_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QFileDialog[] = {
    {sipName_Accept, static_cast<int>(QFileDialog::Accept), 76},
    {sipName_AcceptOpen, static_cast<int>(QFileDialog::AcceptOpen), 75},
    {sipName_AcceptSave, static_cast<int>(QFileDialog::AcceptSave), 75},
    {sipName_AnyFile, static_cast<int>(QFileDialog::AnyFile), 77},
    {sipName_Detail, static_cast<int>(QFileDialog::Detail), 80},
    {sipName_Directory, static_cast<int>(QFileDialog::Directory), 77},
    {sipName_DirectoryOnly, static_cast<int>(QFileDialog::DirectoryOnly), 77},
    {sipName_DontConfirmOverwrite, static_cast<int>(QFileDialog::DontConfirmOverwrite), 78},
    {sipName_DontResolveSymlinks, static_cast<int>(QFileDialog::DontResolveSymlinks), 78},
    {sipName_DontUseCustomDirectoryIcons, static_cast<int>(QFileDialog::DontUseCustomDirectoryIcons), 78},
    {sipName_DontUseNativeDialog, static_cast<int>(QFileDialog::DontUseNativeDialog), 78},
    {sipName_DontUseSheet, static_cast<int>(QFileDialog::DontUseSheet), 78},
    {sipName_ExistingFile, static_cast<int>(QFileDialog::ExistingFile), 77},
    {sipName_ExistingFiles, static_cast<int>(QFileDialog::ExistingFiles), 77},
    {sipName_FileName, static_cast<int>(QFileDialog::FileName), 76},
    {sipName_FileType, static_cast<int>(QFileDialog::FileType), 76},
    {sipName_HideNameFilterDetails, static_cast<int>(QFileDialog::HideNameFilterDetails), 78},
    {sipName_List, static_cast<int>(QFileDialog::List), 80},
    {sipName_LookIn, static_cast<int>(QFileDialog::LookIn), 76},
    {sipName_ReadOnly, static_cast<int>(QFileDialog::ReadOnly), 78},
    {sipName_Reject, static_cast<int>(QFileDialog::Reject), 76},
    {sipName_ShowDirsOnly, static_cast<int>(QFileDialog::ShowDirsOnly), 78},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QFileDialog[] = {
    {"directoryUrlEntered(QUrl)", "\1QFileDialog.directoryUrlEntered[QUrl]", 0, 0},
    {"currentUrlChanged(QUrl)", "\1QFileDialog.currentUrlChanged[QUrl]", 0, 0},
    {"urlsSelected(QList<QUrl>)", "\1QFileDialog.urlsSelected[list-of-QUrl]", 0, 0},
    {"urlSelected(QUrl)", "\1QFileDialog.urlSelected[QUrl]", 0, 0},
    {"fileSelected(QString)", "\1QFileDialog.fileSelected[str]", 0, 0},
    {"filterSelected(QString)", "\1QFileDialog.filterSelected[str]", 0, 0},
    {"filesSelected(QStringList)", "\1QFileDialog.filesSelected[list-of-str]", 0, 0},
    {"directoryEntered(QString)", "\1QFileDialog.directoryEntered[str]", 0, 0},
    {"currentChanged(QString)", "\1QFileDialog.currentChanged[str]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QFileDialog, "\1QFileDialog(QWidget, Qt.WindowFlags)\n"
    "QFileDialog(QWidget parent=None, str caption='', str directory='', str filter='')");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QFileDialog = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QFileDialog,
        {0}
    },
    {
        sipNameNr_QFileDialog,
        {0, 0, 1},
        103, methods_QFileDialog,
        22, enummembers_QFileDialog,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QFileDialog,
    -1,
    -1,
    supers_QFileDialog,
    0,
    init_type_QFileDialog,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QFileDialog,
    0,
    0,
    0,
    release_QFileDialog,
    cast_QFileDialog,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QFileDialog::staticMetaObject,
    0,
    signals_QFileDialog,
    0
};
