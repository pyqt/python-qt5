/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:10 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 452 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 368 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 395 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 247 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 37 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 116 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 119 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 122 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 125 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 128 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 131 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 40 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 134 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 137 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 140 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtextedit.sip"
#include <qtextedit.h>
#line 143 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 40 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 146 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractscrollarea.sip"
#include <qabstractscrollarea.h>
#line 149 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 152 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 155 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 158 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 161 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 164 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 167 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 170 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 173 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 176 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 179 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 182 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 185 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 188 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 191 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 194 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 197 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 200 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 203 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 206 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 209 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 212 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 215 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 218 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 221 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 635 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 224 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 275 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 227 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 408 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 230 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 382 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 233 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 236 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 239 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 242 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 245 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 248 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 251 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 254 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 257 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 260 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 263 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 266 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 269 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 272 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 275 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 278 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 281 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 284 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 287 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 290 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"


class sipQTextEdit : public QTextEdit
{
public:
    sipQTextEdit(QWidget*);
    sipQTextEdit(const QString&,QWidget*);
    virtual ~sipQTextEdit();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_enterEvent(bool,QEvent*);
    void sipProtectVirt_leaveEvent(bool,QEvent*);
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_closeEvent(bool,QCloseEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);
    void sipProtectVirt_actionEvent(bool,QActionEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const QByteArray&,void*,long*);
    QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool,QPainter*) const;
    void sipProtect_drawFrame(QPainter*);
    void sipProtect_setViewportMargins(int,int,int,int);
    void sipProtect_setViewportMargins(const QMargins&);
    bool sipProtectVirt_viewportEvent(bool,QEvent*);
    bool sipProtectVirt_eventFilter(bool,QObject*,QEvent*);
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    void sipProtectVirt_paintEvent(bool,QPaintEvent*);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent*);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent*);
    void sipProtectVirt_dropEvent(bool,QDropEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_changeEvent(bool,QEvent*);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    QMimeData* sipProtectVirt_createMimeDataFromSelection(bool) const;
    bool sipProtectVirt_canInsertFromMimeData(bool,const QMimeData*) const;
    void sipProtectVirt_insertFromMimeData(bool,const QMimeData*);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    void sipProtectVirt_scrollContentsBy(bool,int,int);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void setupViewport(QWidget*);
    bool eventFilter(QObject*,QEvent*);
    bool viewportEvent(QEvent*);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    void scrollContentsBy(int,int);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void inputMethodEvent(QInputMethodEvent*);
    void insertFromMimeData(const QMimeData*);
    bool canInsertFromMimeData(const QMimeData*) const;
    QMimeData* createMimeDataFromSelection() const;
    void wheelEvent(QWheelEvent*);
    void changeEvent(QEvent*);
    void showEvent(QShowEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dropEvent(QDropEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    bool focusNextPrevChild(bool);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void paintEvent(QPaintEvent*);
    void resizeEvent(QResizeEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void timerEvent(QTimerEvent*);
    bool event(QEvent*);
    QVariant loadResource(int,const QUrl&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTextEdit(const sipQTextEdit &);
    sipQTextEdit &operator = (const sipQTextEdit &);

    char sipPyMethods[53];
};

sipQTextEdit::sipQTextEdit(QWidget*a0): QTextEdit(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextEdit::sipQTextEdit(const QString& a0,QWidget*a1): QTextEdit(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTextEdit::~sipQTextEdit()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTextEdit::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QTextEdit);
}

int sipQTextEdit::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTextEdit::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QTextEdit,_c,_id,_a);

    return _id;
}

void *sipQTextEdit::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QTextEdit, _clname, &sipCpp) ? sipCpp : QTextEdit::qt_metacast(_clname));
}

void sipQTextEdit::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTextEdit::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTextEdit::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTextEdit::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTextEdit::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QTextEdit::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQTextEdit::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QTextEdit::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQTextEdit::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QTextEdit::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQTextEdit::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QTextEdit::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTextEdit::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QTextEdit::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QTextEdit::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QTextEdit::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QTextEdit::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QTextEdit::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QTextEdit::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QTextEdit::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QTextEdit::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQTextEdit::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QTextEdit::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTextEdit::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QTextEdit::heightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QTextEdit::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQTextEdit::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QTextEdit::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTextEdit::setupViewport(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_setupViewport);

    if (!sipMeth)
    {
        QTextEdit::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTextEdit::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTextEdit::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQTextEdit::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QTextEdit::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQTextEdit::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QTextEdit::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQTextEdit::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QTextEdit::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTextEdit::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QTextEdit::scrollContentsBy(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    ((sipVH_QtGui_17)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QVariant sipQTextEdit::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QTextEdit::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QTextEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::insertFromMimeData(const QMimeData*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_insertFromMimeData);

    if (!sipMeth)
    {
        QTextEdit::insertFromMimeData(a0);
        return;
    }

    extern void sipVH_QtWidgets_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*);

    sipVH_QtWidgets_37(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTextEdit::canInsertFromMimeData(const QMimeData*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_canInsertFromMimeData);

    if (!sipMeth)
        return QTextEdit::canInsertFromMimeData(a0);

    extern bool sipVH_QtWidgets_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*);

    return sipVH_QtWidgets_38(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QMimeData* sipQTextEdit::createMimeDataFromSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_createMimeDataFromSelection);

    if (!sipMeth)
        return QTextEdit::createMimeDataFromSelection();

    extern QMimeData* sipVH_QtWidgets_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_39(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTextEdit::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QTextEdit::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QTextEdit::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QTextEdit::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QTextEdit::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QTextEdit::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QTextEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QTextEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QTextEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QTextEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QTextEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTextEdit::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QTextEdit::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QTextEdit::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QTextEdit::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QTextEdit::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QTextEdit::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QTextEdit::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QTextEdit::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QTextEdit::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QTextEdit::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTextEdit::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTextEdit::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTextEdit::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTextEdit::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQTextEdit::loadResource(int a0,const QUrl& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_loadResource);

    if (!sipMeth)
        return QTextEdit::loadResource(a0,a1);

    typedef QVariant (*sipVH_QtGui_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const QUrl&);

    return ((sipVH_QtGui_20)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[20]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QObject* sipQTextEdit::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQTextEdit::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQTextEdit::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQTextEdit::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQTextEdit::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQTextEdit::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQTextEdit::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQTextEdit::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQTextEdit::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQTextEdit::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQTextEdit::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQTextEdit::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent*a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQTextEdit::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQTextEdit::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent*a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQTextEdit::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQTextEdit::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQTextEdit::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQTextEdit::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQTextEdit::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQTextEdit::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQTextEdit::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

bool sipQTextEdit::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ? QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

QPainter* sipQTextEdit::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QWidget::sharedPainter() : sharedPainter());
}

void sipQTextEdit::sipProtectVirt_initPainter(bool sipSelfWasArg,QPainter*a0) const
{
    (sipSelfWasArg ? QWidget::initPainter(a0) : initPainter(a0));
}

void sipQTextEdit::sipProtect_drawFrame(QPainter*a0)
{
    QFrame::drawFrame(a0);
}

void sipQTextEdit::sipProtect_setViewportMargins(int a0,int a1,int a2,int a3)
{
    QAbstractScrollArea::setViewportMargins(a0,a1,a2,a3);
}

void sipQTextEdit::sipProtect_setViewportMargins(const QMargins& a0)
{
    QAbstractScrollArea::setViewportMargins(a0);
}

bool sipQTextEdit::sipProtectVirt_viewportEvent(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QAbstractScrollArea::viewportEvent(a0) : viewportEvent(a0));
}

bool sipQTextEdit::sipProtectVirt_eventFilter(bool sipSelfWasArg,QObject*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QAbstractScrollArea::eventFilter(a0,a1) : eventFilter(a0,a1));
}

bool sipQTextEdit::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QTextEdit::event(a0) : event(a0));
}

void sipQTextEdit::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::timerEvent(a0) : timerEvent(a0));
}

void sipQTextEdit::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQTextEdit::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQTextEdit::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::resizeEvent(a0) : resizeEvent(a0));
}

void sipQTextEdit::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::paintEvent(a0) : paintEvent(a0));
}

void sipQTextEdit::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQTextEdit::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQTextEdit::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQTextEdit::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

bool sipQTextEdit::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QTextEdit::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQTextEdit::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQTextEdit::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQTextEdit::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQTextEdit::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQTextEdit::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::dropEvent(a0) : dropEvent(a0));
}

void sipQTextEdit::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::focusInEvent(a0) : focusInEvent(a0));
}

void sipQTextEdit::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQTextEdit::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::showEvent(a0) : showEvent(a0));
}

void sipQTextEdit::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::changeEvent(a0) : changeEvent(a0));
}

void sipQTextEdit::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::wheelEvent(a0) : wheelEvent(a0));
}

QMimeData* sipQTextEdit::sipProtectVirt_createMimeDataFromSelection(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTextEdit::createMimeDataFromSelection() : createMimeDataFromSelection());
}

bool sipQTextEdit::sipProtectVirt_canInsertFromMimeData(bool sipSelfWasArg,const QMimeData*a0) const
{
    return (sipSelfWasArg ? QTextEdit::canInsertFromMimeData(a0) : canInsertFromMimeData(a0));
}

void sipQTextEdit::sipProtectVirt_insertFromMimeData(bool sipSelfWasArg,const QMimeData*a0)
{
    (sipSelfWasArg ? QTextEdit::insertFromMimeData(a0) : insertFromMimeData(a0));
}

void sipQTextEdit::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QTextEdit::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQTextEdit::sipProtectVirt_scrollContentsBy(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ? QTextEdit::scrollContentsBy(a0,a1) : scrollContentsBy(a0,a1));
}


PyDoc_STRVAR(doc_QTextEdit_sender, "QTextEdit.sender() -> QObject");

extern "C" {static PyObject *meth_QTextEdit_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1689 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_sender, doc_QTextEdit_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_receivers, "QTextEdit.receivers(signal) -> int");

extern "C" {static PyObject *meth_QTextEdit_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1748 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTextEdit.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_receivers, doc_QTextEdit_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_childEvent, "QTextEdit.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QTextEdit_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_childEvent, doc_QTextEdit_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_customEvent, "QTextEdit.customEvent(QEvent)");

extern "C" {static PyObject *meth_QTextEdit_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_customEvent, doc_QTextEdit_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_connectNotify, "QTextEdit.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTextEdit_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_connectNotify, doc_QTextEdit_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_disconnectNotify, "QTextEdit.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTextEdit_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_disconnectNotify, doc_QTextEdit_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_senderSignalIndex, "QTextEdit.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QTextEdit_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_senderSignalIndex, doc_QTextEdit_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_isSignalConnected, "QTextEdit.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QTextEdit_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_isSignalConnected, doc_QTextEdit_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_enterEvent, "QTextEdit.enterEvent(QEvent)");

extern "C" {static PyObject *meth_QTextEdit_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_enterEvent, doc_QTextEdit_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_leaveEvent, "QTextEdit.leaveEvent(QEvent)");

extern "C" {static PyObject *meth_QTextEdit_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_leaveEvent, doc_QTextEdit_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_moveEvent, "QTextEdit.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QTextEdit_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_moveEvent, doc_QTextEdit_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_closeEvent, "QTextEdit.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QTextEdit_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_closeEvent, doc_QTextEdit_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_tabletEvent, "QTextEdit.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QTextEdit_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_tabletEvent, doc_QTextEdit_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_actionEvent, "QTextEdit.actionEvent(QActionEvent)");

extern "C" {static PyObject *meth_QTextEdit_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_actionEvent, doc_QTextEdit_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_hideEvent, "QTextEdit.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QTextEdit_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_hideEvent, doc_QTextEdit_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_metric, "QTextEdit.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QTextEdit_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_metric, doc_QTextEdit_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_updateMicroFocus, "QTextEdit.updateMicroFocus()");

extern "C" {static PyObject *meth_QTextEdit_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_updateMicroFocus, doc_QTextEdit_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_create, "QTextEdit.create(sip.voidptr window=0, bool initializeWindow=True, bool destroyOldWindow=True)");

extern "C" {static PyObject *meth_QTextEdit_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0def = 0;
        WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_create, doc_QTextEdit_create);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_destroy, "QTextEdit.destroy(bool destroyWindow=True, bool destroySubWindows=True)");

extern "C" {static PyObject *meth_QTextEdit_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_destroy, doc_QTextEdit_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_focusNextChild, "QTextEdit.focusNextChild() -> bool");

extern "C" {static PyObject *meth_QTextEdit_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusNextChild, doc_QTextEdit_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_focusPreviousChild, "QTextEdit.focusPreviousChild() -> bool");

extern "C" {static PyObject *meth_QTextEdit_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusPreviousChild, doc_QTextEdit_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_nativeEvent, "QTextEdit.nativeEvent(QByteArray, sip.voidptr) -> (bool, int)");

extern "C" {static PyObject *meth_QTextEdit_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_nativeEvent, doc_QTextEdit_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_sharedPainter, "QTextEdit.sharedPainter() -> QPainter");

extern "C" {static PyObject *meth_QTextEdit_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_sharedPainter, doc_QTextEdit_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_initPainter, "QTextEdit.initPainter(QPainter)");

extern "C" {static PyObject *meth_QTextEdit_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_initPainter, doc_QTextEdit_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_drawFrame, "QTextEdit.drawFrame(QPainter)");

extern "C" {static PyObject *meth_QTextEdit_drawFrame(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_drawFrame(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtect_drawFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_drawFrame, doc_QTextEdit_drawFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setViewportMargins, "QTextEdit.setViewportMargins(int, int, int, int)\n"
    "QTextEdit.setViewportMargins(QMargins)");

extern "C" {static PyObject *meth_QTextEdit_setViewportMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setViewportMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biiii", &sipSelf, sipType_QTextEdit, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->sipProtect_setViewportMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QMargins* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMargins, &a0))
        {
            sipCpp->sipProtect_setViewportMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setViewportMargins, doc_QTextEdit_setViewportMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_viewportEvent, "QTextEdit.viewportEvent(QEvent) -> bool");

extern "C" {static PyObject *meth_QTextEdit_viewportEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_viewportEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_viewportEvent(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_viewportEvent, doc_QTextEdit_viewportEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_eventFilter, "QTextEdit.eventFilter(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QTextEdit_eventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_eventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_eventFilter, doc_QTextEdit_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setDocument, "QTextEdit.setDocument(QTextDocument)");

extern "C" {static PyObject *meth_QTextEdit_setDocument(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextDocument* a0;
        PyObject *a0Keep;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTextEdit, &sipCpp, &a0Keep, sipType_QTextDocument, &a0))
        {
            sipCpp->setDocument(a0);

            sipKeepReference(sipSelf, -49, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setDocument, doc_QTextEdit_setDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_document, "QTextEdit.document() -> QTextDocument");

extern "C" {static PyObject *meth_QTextEdit_document(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QTextDocument*sipRes;

            sipRes = sipCpp->document();

            return sipConvertFromType(sipRes,sipType_QTextDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_document, doc_QTextEdit_document);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTextCursor, "QTextEdit.setTextCursor(QTextCursor)");

extern "C" {static PyObject *meth_QTextEdit_setTextCursor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor* a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCursor, &a0))
        {
            sipCpp->setTextCursor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextCursor, doc_QTextEdit_setTextCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_textCursor, "QTextEdit.textCursor() -> QTextCursor");

extern "C" {static PyObject *meth_QTextEdit_textCursor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QTextCursor*sipRes;

            sipRes = new QTextCursor(sipCpp->textCursor());

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textCursor, doc_QTextEdit_textCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_isReadOnly, "QTextEdit.isReadOnly() -> bool");

extern "C" {static PyObject *meth_QTextEdit_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isReadOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_isReadOnly, doc_QTextEdit_isReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setReadOnly, "QTextEdit.setReadOnly(bool)");

extern "C" {static PyObject *meth_QTextEdit_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setReadOnly(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setReadOnly, doc_QTextEdit_setReadOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontPointSize, "QTextEdit.fontPointSize() -> float");

extern "C" {static PyObject *meth_QTextEdit_fontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->fontPointSize();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontPointSize, doc_QTextEdit_fontPointSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontFamily, "QTextEdit.fontFamily() -> str");

extern "C" {static PyObject *meth_QTextEdit_fontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->fontFamily());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontFamily, doc_QTextEdit_fontFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontWeight, "QTextEdit.fontWeight() -> int");

extern "C" {static PyObject *meth_QTextEdit_fontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->fontWeight();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontWeight, doc_QTextEdit_fontWeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontUnderline, "QTextEdit.fontUnderline() -> bool");

extern "C" {static PyObject *meth_QTextEdit_fontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontUnderline();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontUnderline, doc_QTextEdit_fontUnderline);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_fontItalic, "QTextEdit.fontItalic() -> bool");

extern "C" {static PyObject *meth_QTextEdit_fontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_fontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontItalic();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_fontItalic, doc_QTextEdit_fontItalic);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_textColor, "QTextEdit.textColor() -> QColor");

extern "C" {static PyObject *meth_QTextEdit_textColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->textColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textColor, doc_QTextEdit_textColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_currentFont, "QTextEdit.currentFont() -> QFont");

extern "C" {static PyObject *meth_QTextEdit_currentFont(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_currentFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QFont*sipRes;

            sipRes = new QFont(sipCpp->currentFont());

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_currentFont, doc_QTextEdit_currentFont);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_alignment, "QTextEdit.alignment() -> Qt.Alignment");

extern "C" {static PyObject *meth_QTextEdit_alignment(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Qt::Alignment*sipRes;

            sipRes = new Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_alignment, doc_QTextEdit_alignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mergeCurrentCharFormat, "QTextEdit.mergeCurrentCharFormat(QTextCharFormat)");

extern "C" {static PyObject *meth_QTextEdit_mergeCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mergeCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat* a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->mergeCurrentCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mergeCurrentCharFormat, doc_QTextEdit_mergeCurrentCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setCurrentCharFormat, "QTextEdit.setCurrentCharFormat(QTextCharFormat)");

extern "C" {static PyObject *meth_QTextEdit_setCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCharFormat* a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCharFormat, &a0))
        {
            sipCpp->setCurrentCharFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setCurrentCharFormat, doc_QTextEdit_setCurrentCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_currentCharFormat, "QTextEdit.currentCharFormat() -> QTextCharFormat");

extern "C" {static PyObject *meth_QTextEdit_currentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_currentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QTextCharFormat*sipRes;

            sipRes = new QTextCharFormat(sipCpp->currentCharFormat());

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_currentCharFormat, doc_QTextEdit_currentCharFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_autoFormatting, "QTextEdit.autoFormatting() -> QTextEdit.AutoFormatting");

extern "C" {static PyObject *meth_QTextEdit_autoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_autoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QTextEdit::AutoFormatting*sipRes;

            sipRes = new QTextEdit::AutoFormatting(sipCpp->autoFormatting());

            return sipConvertFromNewType(sipRes,sipType_QTextEdit_AutoFormatting,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_autoFormatting, doc_QTextEdit_autoFormatting);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setAutoFormatting, "QTextEdit.setAutoFormatting(QTextEdit.AutoFormatting)");

extern "C" {static PyObject *meth_QTextEdit_setAutoFormatting(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setAutoFormatting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit::AutoFormatting* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextEdit_AutoFormatting, &a0, &a0State))
        {
            sipCpp->setAutoFormatting(*a0);
            sipReleaseType(a0,sipType_QTextEdit_AutoFormatting,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setAutoFormatting, doc_QTextEdit_setAutoFormatting);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_tabChangesFocus, "QTextEdit.tabChangesFocus() -> bool");

extern "C" {static PyObject *meth_QTextEdit_tabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_tabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->tabChangesFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_tabChangesFocus, doc_QTextEdit_tabChangesFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTabChangesFocus, "QTextEdit.setTabChangesFocus(bool)");

extern "C" {static PyObject *meth_QTextEdit_setTabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setTabChangesFocus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTabChangesFocus, doc_QTextEdit_setTabChangesFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setDocumentTitle, "QTextEdit.setDocumentTitle(str)");

extern "C" {static PyObject *meth_QTextEdit_setDocumentTitle(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setDocumentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDocumentTitle(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setDocumentTitle, doc_QTextEdit_setDocumentTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_documentTitle, "QTextEdit.documentTitle() -> str");

extern "C" {static PyObject *meth_QTextEdit_documentTitle(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_documentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->documentTitle());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_documentTitle, doc_QTextEdit_documentTitle);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_isUndoRedoEnabled, "QTextEdit.isUndoRedoEnabled() -> bool");

extern "C" {static PyObject *meth_QTextEdit_isUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_isUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isUndoRedoEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_isUndoRedoEnabled, doc_QTextEdit_isUndoRedoEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setUndoRedoEnabled, "QTextEdit.setUndoRedoEnabled(bool)");

extern "C" {static PyObject *meth_QTextEdit_setUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setUndoRedoEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setUndoRedoEnabled, doc_QTextEdit_setUndoRedoEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_lineWrapMode, "QTextEdit.lineWrapMode() -> QTextEdit.LineWrapMode");

extern "C" {static PyObject *meth_QTextEdit_lineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_lineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QTextEdit::LineWrapMode sipRes;

            sipRes = sipCpp->lineWrapMode();

            return sipConvertFromEnum(sipRes,sipType_QTextEdit_LineWrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_lineWrapMode, doc_QTextEdit_lineWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setLineWrapMode, "QTextEdit.setLineWrapMode(QTextEdit.LineWrapMode)");

extern "C" {static PyObject *meth_QTextEdit_setLineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setLineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit::LineWrapMode a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextEdit_LineWrapMode, &a0))
        {
            sipCpp->setLineWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setLineWrapMode, doc_QTextEdit_setLineWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_lineWrapColumnOrWidth, "QTextEdit.lineWrapColumnOrWidth() -> int");

extern "C" {static PyObject *meth_QTextEdit_lineWrapColumnOrWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_lineWrapColumnOrWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->lineWrapColumnOrWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_lineWrapColumnOrWidth, doc_QTextEdit_lineWrapColumnOrWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setLineWrapColumnOrWidth, "QTextEdit.setLineWrapColumnOrWidth(int)");

extern "C" {static PyObject *meth_QTextEdit_setLineWrapColumnOrWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setLineWrapColumnOrWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setLineWrapColumnOrWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setLineWrapColumnOrWidth, doc_QTextEdit_setLineWrapColumnOrWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_wordWrapMode, "QTextEdit.wordWrapMode() -> QTextOption.WrapMode");

extern "C" {static PyObject *meth_QTextEdit_wordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_wordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QTextOption::WrapMode sipRes;

            sipRes = sipCpp->wordWrapMode();

            return sipConvertFromEnum(sipRes,sipType_QTextOption_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_wordWrapMode, doc_QTextEdit_wordWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setWordWrapMode, "QTextEdit.setWordWrapMode(QTextOption.WrapMode)");

extern "C" {static PyObject *meth_QTextEdit_setWordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setWordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextOption::WrapMode a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextOption_WrapMode, &a0))
        {
            sipCpp->setWordWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setWordWrapMode, doc_QTextEdit_setWordWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_find, "QTextEdit.find(str, QTextDocument.FindFlags options=0) -> bool\n"
    "QTextEdit.find(QRegExp, QTextDocument.FindFlags options=0) -> bool");

extern "C" {static PyObject *meth_QTextEdit_find(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_find(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextDocument::FindFlags a1def = 0;
        QTextDocument::FindFlags* a1 = &a1def;
        int a1State = 0;
        QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State, sipType_QTextDocument_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->find(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QTextDocument_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QRegExp* a0;
        QTextDocument::FindFlags a1def = 0;
        QTextDocument::FindFlags* a1 = &a1def;
        int a1State = 0;
        QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QRegExp, &a0, sipType_QTextDocument_FindFlags, &a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->find(*a0,*a1);
            sipReleaseType(a1,sipType_QTextDocument_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_find, doc_QTextEdit_find);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_toPlainText, "QTextEdit.toPlainText() -> str");

extern "C" {static PyObject *meth_QTextEdit_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toPlainText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_toPlainText, doc_QTextEdit_toPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_toHtml, "QTextEdit.toHtml() -> str");

extern "C" {static PyObject *meth_QTextEdit_toHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_toHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toHtml());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_toHtml, doc_QTextEdit_toHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_append, "QTextEdit.append(str)");

extern "C" {static PyObject *meth_QTextEdit_append(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_append(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->append(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_append, doc_QTextEdit_append);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_ensureCursorVisible, "QTextEdit.ensureCursorVisible()");

extern "C" {static PyObject *meth_QTextEdit_ensureCursorVisible(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_ensureCursorVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->ensureCursorVisible();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_ensureCursorVisible, doc_QTextEdit_ensureCursorVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_loadResource, "QTextEdit.loadResource(int, QUrl) -> QVariant");

extern "C" {static PyObject *meth_QTextEdit_loadResource(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_loadResource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QUrl* a1;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTextEdit, &sipCpp, &a0, sipType_QUrl, &a1))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QTextEdit::loadResource(a0,*a1) : sipCpp->loadResource(a0,*a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_loadResource, doc_QTextEdit_loadResource);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_createStandardContextMenu, "QTextEdit.createStandardContextMenu() -> QMenu\n"
    "QTextEdit.createStandardContextMenu(QPoint) -> QMenu");

extern "C" {static PyObject *meth_QTextEdit_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QMenu*sipRes;

            sipRes = sipCpp->createStandardContextMenu();

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    {
        const QPoint* a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
            QMenu*sipRes;

            sipRes = sipCpp->createStandardContextMenu(*a0);

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_createStandardContextMenu, doc_QTextEdit_createStandardContextMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_cursorForPosition, "QTextEdit.cursorForPosition(QPoint) -> QTextCursor");

extern "C" {static PyObject *meth_QTextEdit_cursorForPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cursorForPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
            QTextCursor*sipRes;

            sipRes = new QTextCursor(sipCpp->cursorForPosition(*a0));

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cursorForPosition, doc_QTextEdit_cursorForPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_cursorRect, "QTextEdit.cursorRect(QTextCursor) -> QRect\n"
    "QTextEdit.cursorRect() -> QRect");

extern "C" {static PyObject *meth_QTextEdit_cursorRect(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cursorRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextCursor* a0;
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCursor, &a0))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->cursorRect(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->cursorRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cursorRect, doc_QTextEdit_cursorRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_anchorAt, "QTextEdit.anchorAt(QPoint) -> str");

extern "C" {static PyObject *meth_QTextEdit_anchorAt(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_anchorAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPoint, &a0))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->anchorAt(*a0));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_anchorAt, doc_QTextEdit_anchorAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_overwriteMode, "QTextEdit.overwriteMode() -> bool");

extern "C" {static PyObject *meth_QTextEdit_overwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_overwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->overwriteMode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_overwriteMode, doc_QTextEdit_overwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setOverwriteMode, "QTextEdit.setOverwriteMode(bool)");

extern "C" {static PyObject *meth_QTextEdit_setOverwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setOverwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setOverwriteMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setOverwriteMode, doc_QTextEdit_setOverwriteMode);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_tabStopWidth, "QTextEdit.tabStopWidth() -> int");

extern "C" {static PyObject *meth_QTextEdit_tabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_tabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->tabStopWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_tabStopWidth, doc_QTextEdit_tabStopWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTabStopWidth, "QTextEdit.setTabStopWidth(int)");

extern "C" {static PyObject *meth_QTextEdit_setTabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setTabStopWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTabStopWidth, doc_QTextEdit_setTabStopWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_acceptRichText, "QTextEdit.acceptRichText() -> bool");

extern "C" {static PyObject *meth_QTextEdit_acceptRichText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_acceptRichText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->acceptRichText();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_acceptRichText, doc_QTextEdit_acceptRichText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setAcceptRichText, "QTextEdit.setAcceptRichText(bool)");

extern "C" {static PyObject *meth_QTextEdit_setAcceptRichText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setAcceptRichText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setAcceptRichText(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setAcceptRichText, doc_QTextEdit_setAcceptRichText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTextInteractionFlags, "QTextEdit.setTextInteractionFlags(Qt.TextInteractionFlags)");

extern "C" {static PyObject *meth_QTextEdit_setTextInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::TextInteractionFlags* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_TextInteractionFlags, &a0, &a0State))
        {
            sipCpp->setTextInteractionFlags(*a0);
            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextInteractionFlags, doc_QTextEdit_setTextInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_textInteractionFlags, "QTextEdit.textInteractionFlags() -> Qt.TextInteractionFlags");

extern "C" {static PyObject *meth_QTextEdit_textInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            Qt::TextInteractionFlags*sipRes;

            sipRes = new Qt::TextInteractionFlags(sipCpp->textInteractionFlags());

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textInteractionFlags, doc_QTextEdit_textInteractionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setCursorWidth, "QTextEdit.setCursorWidth(int)");

extern "C" {static PyObject *meth_QTextEdit_setCursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setCursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setCursorWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setCursorWidth, doc_QTextEdit_setCursorWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_cursorWidth, "QTextEdit.cursorWidth() -> int");

extern "C" {static PyObject *meth_QTextEdit_cursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cursorWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cursorWidth, doc_QTextEdit_cursorWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setExtraSelections, "QTextEdit.setExtraSelections(list-of-QTextEdit.ExtraSelection)");

extern "C" {static PyObject *meth_QTextEdit_setExtraSelections(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setExtraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QTextEdit::ExtraSelection>* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QList_0100QTextEdit_ExtraSelection,&a0, &a0State))
        {
            sipCpp->setExtraSelections(*a0);
            sipReleaseType(const_cast<QList<QTextEdit::ExtraSelection> *>(a0),sipType_QList_0100QTextEdit_ExtraSelection,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setExtraSelections, doc_QTextEdit_setExtraSelections);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_extraSelections, "QTextEdit.extraSelections() -> list-of-QTextEdit.ExtraSelection");

extern "C" {static PyObject *meth_QTextEdit_extraSelections(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_extraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QList<QTextEdit::ExtraSelection>*sipRes;

            sipRes = new QList<QTextEdit::ExtraSelection>(sipCpp->extraSelections());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextEdit_ExtraSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_extraSelections, doc_QTextEdit_extraSelections);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_canPaste, "QTextEdit.canPaste() -> bool");

extern "C" {static PyObject *meth_QTextEdit_canPaste(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_canPaste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->canPaste();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_canPaste, doc_QTextEdit_canPaste);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_moveCursor, "QTextEdit.moveCursor(QTextCursor.MoveOperation, QTextCursor.MoveMode mode=QTextCursor.MoveAnchor)");

extern "C" {static PyObject *meth_QTextEdit_moveCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_moveCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QTextCursor::MoveOperation a0;
        QTextCursor::MoveMode a1 = QTextCursor::MoveAnchor;
        QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|E", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTextCursor_MoveOperation, &a0, sipType_QTextCursor_MoveMode, &a1))
        {
            sipCpp->moveCursor(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_moveCursor, doc_QTextEdit_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_print_, "QTextEdit.print_(QPagedPaintDevice)");

extern "C" {static PyObject *meth_QTextEdit_print_(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPagedPaintDevice* a0;
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPagedPaintDevice, &a0))
        {
            sipCpp->print(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_print_, doc_QTextEdit_print_);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontPointSize, "QTextEdit.setFontPointSize(float)");

extern "C" {static PyObject *meth_QTextEdit_setFontPointSize(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontPointSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setFontPointSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontPointSize, doc_QTextEdit_setFontPointSize);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontFamily, "QTextEdit.setFontFamily(str)");

extern "C" {static PyObject *meth_QTextEdit_setFontFamily(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setFontFamily(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontFamily, doc_QTextEdit_setFontFamily);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontWeight, "QTextEdit.setFontWeight(int)");

extern "C" {static PyObject *meth_QTextEdit_setFontWeight(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontWeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setFontWeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontWeight, doc_QTextEdit_setFontWeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontUnderline, "QTextEdit.setFontUnderline(bool)");

extern "C" {static PyObject *meth_QTextEdit_setFontUnderline(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setFontUnderline(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontUnderline, doc_QTextEdit_setFontUnderline);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setFontItalic, "QTextEdit.setFontItalic(bool)");

extern "C" {static PyObject *meth_QTextEdit_setFontItalic(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setFontItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->setFontItalic(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setFontItalic, doc_QTextEdit_setFontItalic);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setText, "QTextEdit.setText(str)");

extern "C" {static PyObject *meth_QTextEdit_setText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setText, doc_QTextEdit_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTextColor, "QTextEdit.setTextColor(QColor)");

extern "C" {static PyObject *meth_QTextEdit_setTextColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setTextColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextColor, doc_QTextEdit_setTextColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setCurrentFont, "QTextEdit.setCurrentFont(QFont)");

extern "C" {static PyObject *meth_QTextEdit_setCurrentFont(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setCurrentFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setCurrentFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setCurrentFont, doc_QTextEdit_setCurrentFont);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setAlignment, "QTextEdit.setAlignment(Qt.Alignment)");

extern "C" {static PyObject *meth_QTextEdit_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setAlignment, doc_QTextEdit_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setPlainText, "QTextEdit.setPlainText(str)");

extern "C" {static PyObject *meth_QTextEdit_setPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlainText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setPlainText, doc_QTextEdit_setPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setHtml, "QTextEdit.setHtml(str)");

extern "C" {static PyObject *meth_QTextEdit_setHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setHtml(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setHtml, doc_QTextEdit_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_cut, "QTextEdit.cut()");

extern "C" {static PyObject *meth_QTextEdit_cut(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_cut(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->cut();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_cut, doc_QTextEdit_cut);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_copy, "QTextEdit.copy()");

extern "C" {static PyObject *meth_QTextEdit_copy(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->copy();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_copy, doc_QTextEdit_copy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_paste, "QTextEdit.paste()");

extern "C" {static PyObject *meth_QTextEdit_paste(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_paste(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->paste();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_paste, doc_QTextEdit_paste);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_clear, "QTextEdit.clear()");

extern "C" {static PyObject *meth_QTextEdit_clear(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->clear();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_clear, doc_QTextEdit_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_selectAll, "QTextEdit.selectAll()");

extern "C" {static PyObject *meth_QTextEdit_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->selectAll();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_selectAll, doc_QTextEdit_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_insertPlainText, "QTextEdit.insertPlainText(str)");

extern "C" {static PyObject *meth_QTextEdit_insertPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_insertPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insertPlainText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_insertPlainText, doc_QTextEdit_insertPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_insertHtml, "QTextEdit.insertHtml(str)");

extern "C" {static PyObject *meth_QTextEdit_insertHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_insertHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->insertHtml(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_insertHtml, doc_QTextEdit_insertHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_scrollToAnchor, "QTextEdit.scrollToAnchor(str)");

extern "C" {static PyObject *meth_QTextEdit_scrollToAnchor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_scrollToAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->scrollToAnchor(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_scrollToAnchor, doc_QTextEdit_scrollToAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_redo, "QTextEdit.redo()");

extern "C" {static PyObject *meth_QTextEdit_redo(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->redo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_redo, doc_QTextEdit_redo);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_undo, "QTextEdit.undo()");

extern "C" {static PyObject *meth_QTextEdit_undo(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            sipCpp->undo();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_undo, doc_QTextEdit_undo);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_zoomIn, "QTextEdit.zoomIn(int range=1)");

extern "C" {static PyObject *meth_QTextEdit_zoomIn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_zoomIn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 1;
        QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->zoomIn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_zoomIn, doc_QTextEdit_zoomIn);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_zoomOut, "QTextEdit.zoomOut(int range=1)");

extern "C" {static PyObject *meth_QTextEdit_zoomOut(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_zoomOut(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 1;
        QTextEdit *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            sipCpp->zoomOut(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_zoomOut, doc_QTextEdit_zoomOut);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_event, "QTextEdit.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QTextEdit_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_event, doc_QTextEdit_event);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_timerEvent, "QTextEdit.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QTextEdit_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_timerEvent, doc_QTextEdit_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_keyPressEvent, "QTextEdit.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QTextEdit_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_keyPressEvent, doc_QTextEdit_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_keyReleaseEvent, "QTextEdit.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QTextEdit_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_keyReleaseEvent, doc_QTextEdit_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_resizeEvent, "QTextEdit.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QTextEdit_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_resizeEvent, doc_QTextEdit_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_paintEvent, "QTextEdit.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QTextEdit_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_paintEvent, doc_QTextEdit_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mousePressEvent, "QTextEdit.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mousePressEvent, doc_QTextEdit_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mouseMoveEvent, "QTextEdit.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mouseMoveEvent, doc_QTextEdit_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mouseReleaseEvent, "QTextEdit.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mouseReleaseEvent, doc_QTextEdit_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_mouseDoubleClickEvent, "QTextEdit.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTextEdit_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_mouseDoubleClickEvent, doc_QTextEdit_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_focusNextPrevChild, "QTextEdit.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QTextEdit_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QTextEdit, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusNextPrevChild, doc_QTextEdit_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_contextMenuEvent, "QTextEdit.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QTextEdit_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_contextMenuEvent, doc_QTextEdit_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_dragEnterEvent, "QTextEdit.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QTextEdit_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dragEnterEvent, doc_QTextEdit_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_dragLeaveEvent, "QTextEdit.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QTextEdit_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dragLeaveEvent, doc_QTextEdit_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_dragMoveEvent, "QTextEdit.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QTextEdit_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dragMoveEvent, doc_QTextEdit_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_dropEvent, "QTextEdit.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QTextEdit_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_dropEvent, doc_QTextEdit_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_focusInEvent, "QTextEdit.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QTextEdit_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusInEvent, doc_QTextEdit_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_focusOutEvent, "QTextEdit.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QTextEdit_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_focusOutEvent, doc_QTextEdit_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_showEvent, "QTextEdit.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QTextEdit_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_showEvent, doc_QTextEdit_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_changeEvent, "QTextEdit.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QTextEdit_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_changeEvent, doc_QTextEdit_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_wheelEvent, "QTextEdit.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QTextEdit_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_wheelEvent, doc_QTextEdit_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_createMimeDataFromSelection, "QTextEdit.createMimeDataFromSelection() -> QMimeData");

extern "C" {static PyObject *meth_QTextEdit_createMimeDataFromSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_createMimeDataFromSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QMimeData*sipRes;

            sipRes = sipCpp->sipProtectVirt_createMimeDataFromSelection(sipSelfWasArg);

            return sipConvertFromNewType(sipRes,sipType_QMimeData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_createMimeDataFromSelection, doc_QTextEdit_createMimeDataFromSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_canInsertFromMimeData, "QTextEdit.canInsertFromMimeData(QMimeData) -> bool");

extern "C" {static PyObject *meth_QTextEdit_canInsertFromMimeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_canInsertFromMimeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData* a0;
        const sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMimeData, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_canInsertFromMimeData(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_canInsertFromMimeData, doc_QTextEdit_canInsertFromMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_insertFromMimeData, "QTextEdit.insertFromMimeData(QMimeData)");

extern "C" {static PyObject *meth_QTextEdit_insertFromMimeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_insertFromMimeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QMimeData, &a0))
        {
            sipCpp->sipProtectVirt_insertFromMimeData(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_insertFromMimeData, doc_QTextEdit_insertFromMimeData);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_inputMethodEvent, "QTextEdit.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QTextEdit_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_inputMethodEvent, doc_QTextEdit_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_inputMethodQuery, "QTextEdit.inputMethodQuery(Qt.InputMethodQuery) -> QVariant\n"
    "QTextEdit.inputMethodQuery(Qt.InputMethodQuery, QVariant) -> QVariant");

extern "C" {static PyObject *meth_QTextEdit_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QTextEdit::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    {
        Qt::InputMethodQuery a0;
        QVariant* a1;
        int a1State = 0;
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_Qt_InputMethodQuery, &a0, sipType_QVariant, &a1, &a1State))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->inputMethodQuery(a0,*a1));
            sipReleaseType(a1,sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_inputMethodQuery, doc_QTextEdit_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_scrollContentsBy, "QTextEdit.scrollContentsBy(int, int)");

extern "C" {static PyObject *meth_QTextEdit_scrollContentsBy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQTextEdit *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QTextEdit, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtectVirt_scrollContentsBy(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_scrollContentsBy, doc_QTextEdit_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_textBackgroundColor, "QTextEdit.textBackgroundColor() -> QColor");

extern "C" {static PyObject *meth_QTextEdit_textBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_textBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->textBackgroundColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_textBackgroundColor, doc_QTextEdit_textBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setTextBackgroundColor, "QTextEdit.setTextBackgroundColor(QColor)");

extern "C" {static PyObject *meth_QTextEdit_setTextBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setTextBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setTextBackgroundColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setTextBackgroundColor, doc_QTextEdit_setTextBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_setPlaceholderText, "QTextEdit.setPlaceholderText(str)");

extern "C" {static PyObject *meth_QTextEdit_setPlaceholderText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_setPlaceholderText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTextEdit, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlaceholderText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_setPlaceholderText, doc_QTextEdit_setPlaceholderText);

    return NULL;
}


PyDoc_STRVAR(doc_QTextEdit_placeholderText, "QTextEdit.placeholderText() -> str");

extern "C" {static PyObject *meth_QTextEdit_placeholderText(PyObject *, PyObject *);}
static PyObject *meth_QTextEdit_placeholderText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextEdit *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTextEdit, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->placeholderText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTextEdit, sipName_placeholderText, doc_QTextEdit_placeholderText);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextEdit(void *, const sipTypeDef *);}
static void *cast_QTextEdit(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextEdit)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractScrollArea)->ctd_cast((QAbstractScrollArea *)(QTextEdit *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextEdit(void *, int);}
static void release_QTextEdit(void *sipCppV,int)
{
    QTextEdit *sipCpp = reinterpret_cast<QTextEdit *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTextEdit(sipSimpleWrapper *);}
static void dealloc_QTextEdit(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTextEdit *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTextEdit(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTextEdit(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTextEdit(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTextEdit *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQTextEdit(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|JH", sipType_QString,&a0, &a0State, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQTextEdit(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextEdit[] = {{15, 255, 1}};


static PyMethodDef methods_QTextEdit[] = {
    {SIP_MLNAME_CAST(sipName_acceptRichText), meth_QTextEdit_acceptRichText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_acceptRichText)},
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QTextEdit_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_alignment), meth_QTextEdit_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_alignment)},
    {SIP_MLNAME_CAST(sipName_anchorAt), meth_QTextEdit_anchorAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_anchorAt)},
    {SIP_MLNAME_CAST(sipName_append), meth_QTextEdit_append, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_append)},
    {SIP_MLNAME_CAST(sipName_autoFormatting), meth_QTextEdit_autoFormatting, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_autoFormatting)},
    {SIP_MLNAME_CAST(sipName_canInsertFromMimeData), (PyCFunction)meth_QTextEdit_canInsertFromMimeData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_canInsertFromMimeData)},
    {SIP_MLNAME_CAST(sipName_canPaste), meth_QTextEdit_canPaste, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_canPaste)},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QTextEdit_changeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_changeEvent)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QTextEdit_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QTextEdit_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_clear)},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QTextEdit_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QTextEdit_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QTextEdit_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_copy), meth_QTextEdit_copy, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_copy)},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QTextEdit_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createMimeDataFromSelection), (PyCFunction)meth_QTextEdit_createMimeDataFromSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_createMimeDataFromSelection)},
    {SIP_MLNAME_CAST(sipName_createStandardContextMenu), meth_QTextEdit_createStandardContextMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_createStandardContextMenu)},
    {SIP_MLNAME_CAST(sipName_currentCharFormat), meth_QTextEdit_currentCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_currentCharFormat)},
    {SIP_MLNAME_CAST(sipName_currentFont), meth_QTextEdit_currentFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_currentFont)},
    {SIP_MLNAME_CAST(sipName_cursorForPosition), meth_QTextEdit_cursorForPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_cursorForPosition)},
    {SIP_MLNAME_CAST(sipName_cursorRect), meth_QTextEdit_cursorRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_cursorRect)},
    {SIP_MLNAME_CAST(sipName_cursorWidth), meth_QTextEdit_cursorWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_cursorWidth)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QTextEdit_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_cut), meth_QTextEdit_cut, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_cut)},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QTextEdit_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QTextEdit_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_document), meth_QTextEdit_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_document)},
    {SIP_MLNAME_CAST(sipName_documentTitle), meth_QTextEdit_documentTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_documentTitle)},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QTextEdit_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QTextEdit_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QTextEdit_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_drawFrame), (PyCFunction)meth_QTextEdit_drawFrame, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QTextEdit_dropEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_dropEvent)},
    {SIP_MLNAME_CAST(sipName_ensureCursorVisible), meth_QTextEdit_ensureCursorVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_ensureCursorVisible)},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QTextEdit_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QTextEdit_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), (PyCFunction)meth_QTextEdit_eventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_extraSelections), meth_QTextEdit_extraSelections, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_extraSelections)},
    {SIP_MLNAME_CAST(sipName_find), (PyCFunction)meth_QTextEdit_find, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_find)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QTextEdit_focusInEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QTextEdit_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QTextEdit_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QTextEdit_focusOutEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QTextEdit_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_fontFamily), meth_QTextEdit_fontFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontFamily)},
    {SIP_MLNAME_CAST(sipName_fontItalic), meth_QTextEdit_fontItalic, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontItalic)},
    {SIP_MLNAME_CAST(sipName_fontPointSize), meth_QTextEdit_fontPointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontPointSize)},
    {SIP_MLNAME_CAST(sipName_fontUnderline), meth_QTextEdit_fontUnderline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontUnderline)},
    {SIP_MLNAME_CAST(sipName_fontWeight), meth_QTextEdit_fontWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_fontWeight)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QTextEdit_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QTextEdit_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QTextEdit_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QTextEdit_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_insertFromMimeData), (PyCFunction)meth_QTextEdit_insertFromMimeData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_insertFromMimeData)},
    {SIP_MLNAME_CAST(sipName_insertHtml), meth_QTextEdit_insertHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_insertHtml)},
    {SIP_MLNAME_CAST(sipName_insertPlainText), meth_QTextEdit_insertPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_insertPlainText)},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QTextEdit_isReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_isReadOnly)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QTextEdit_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isUndoRedoEnabled), meth_QTextEdit_isUndoRedoEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_isUndoRedoEnabled)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QTextEdit_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QTextEdit_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QTextEdit_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_lineWrapColumnOrWidth), meth_QTextEdit_lineWrapColumnOrWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_lineWrapColumnOrWidth)},
    {SIP_MLNAME_CAST(sipName_lineWrapMode), meth_QTextEdit_lineWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_lineWrapMode)},
    {SIP_MLNAME_CAST(sipName_loadResource), meth_QTextEdit_loadResource, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_loadResource)},
    {SIP_MLNAME_CAST(sipName_mergeCurrentCharFormat), meth_QTextEdit_mergeCurrentCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_mergeCurrentCharFormat)},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QTextEdit_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QTextEdit_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QTextEdit_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QTextEdit_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QTextEdit_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), (PyCFunction)meth_QTextEdit_moveCursor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_moveCursor)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QTextEdit_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QTextEdit_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_overwriteMode), meth_QTextEdit_overwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_overwriteMode)},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QTextEdit_paintEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_paintEvent)},
    {SIP_MLNAME_CAST(sipName_paste), meth_QTextEdit_paste, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_paste)},
    {SIP_MLNAME_CAST(sipName_placeholderText), meth_QTextEdit_placeholderText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_placeholderText)},
    {SIP_MLNAME_CAST(sipName_print_), meth_QTextEdit_print_, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_print_)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QTextEdit_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_redo), meth_QTextEdit_redo, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_redo)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QTextEdit_resizeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), (PyCFunction)meth_QTextEdit_scrollContentsBy, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_scrollToAnchor), meth_QTextEdit_scrollToAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_scrollToAnchor)},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QTextEdit_selectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_selectAll)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QTextEdit_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QTextEdit_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAcceptRichText), meth_QTextEdit_setAcceptRichText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setAcceptRichText)},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QTextEdit_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setAutoFormatting), meth_QTextEdit_setAutoFormatting, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setAutoFormatting)},
    {SIP_MLNAME_CAST(sipName_setCurrentCharFormat), meth_QTextEdit_setCurrentCharFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setCurrentCharFormat)},
    {SIP_MLNAME_CAST(sipName_setCurrentFont), meth_QTextEdit_setCurrentFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setCurrentFont)},
    {SIP_MLNAME_CAST(sipName_setCursorWidth), meth_QTextEdit_setCursorWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setCursorWidth)},
    {SIP_MLNAME_CAST(sipName_setDocument), meth_QTextEdit_setDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setDocument)},
    {SIP_MLNAME_CAST(sipName_setDocumentTitle), meth_QTextEdit_setDocumentTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setDocumentTitle)},
    {SIP_MLNAME_CAST(sipName_setExtraSelections), meth_QTextEdit_setExtraSelections, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setExtraSelections)},
    {SIP_MLNAME_CAST(sipName_setFontFamily), meth_QTextEdit_setFontFamily, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontFamily)},
    {SIP_MLNAME_CAST(sipName_setFontItalic), meth_QTextEdit_setFontItalic, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontItalic)},
    {SIP_MLNAME_CAST(sipName_setFontPointSize), meth_QTextEdit_setFontPointSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontPointSize)},
    {SIP_MLNAME_CAST(sipName_setFontUnderline), meth_QTextEdit_setFontUnderline, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontUnderline)},
    {SIP_MLNAME_CAST(sipName_setFontWeight), meth_QTextEdit_setFontWeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setFontWeight)},
    {SIP_MLNAME_CAST(sipName_setHtml), meth_QTextEdit_setHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setHtml)},
    {SIP_MLNAME_CAST(sipName_setLineWrapColumnOrWidth), meth_QTextEdit_setLineWrapColumnOrWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setLineWrapColumnOrWidth)},
    {SIP_MLNAME_CAST(sipName_setLineWrapMode), meth_QTextEdit_setLineWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setLineWrapMode)},
    {SIP_MLNAME_CAST(sipName_setOverwriteMode), meth_QTextEdit_setOverwriteMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setOverwriteMode)},
    {SIP_MLNAME_CAST(sipName_setPlaceholderText), meth_QTextEdit_setPlaceholderText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setPlaceholderText)},
    {SIP_MLNAME_CAST(sipName_setPlainText), meth_QTextEdit_setPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setPlainText)},
    {SIP_MLNAME_CAST(sipName_setReadOnly), meth_QTextEdit_setReadOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setReadOnly)},
    {SIP_MLNAME_CAST(sipName_setTabChangesFocus), meth_QTextEdit_setTabChangesFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTabChangesFocus)},
    {SIP_MLNAME_CAST(sipName_setTabStopWidth), meth_QTextEdit_setTabStopWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTabStopWidth)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QTextEdit_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setText)},
    {SIP_MLNAME_CAST(sipName_setTextBackgroundColor), meth_QTextEdit_setTextBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTextBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setTextColor), meth_QTextEdit_setTextColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTextColor)},
    {SIP_MLNAME_CAST(sipName_setTextCursor), meth_QTextEdit_setTextCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTextCursor)},
    {SIP_MLNAME_CAST(sipName_setTextInteractionFlags), meth_QTextEdit_setTextInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setTextInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_setUndoRedoEnabled), meth_QTextEdit_setUndoRedoEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setUndoRedoEnabled)},
    {SIP_MLNAME_CAST(sipName_setViewportMargins), (PyCFunction)meth_QTextEdit_setViewportMargins, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setWordWrapMode), meth_QTextEdit_setWordWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_setWordWrapMode)},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QTextEdit_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QTextEdit_showEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_showEvent)},
    {SIP_MLNAME_CAST(sipName_tabChangesFocus), meth_QTextEdit_tabChangesFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_tabChangesFocus)},
    {SIP_MLNAME_CAST(sipName_tabStopWidth), meth_QTextEdit_tabStopWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_tabStopWidth)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QTextEdit_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_textBackgroundColor), meth_QTextEdit_textBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_textBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_textColor), meth_QTextEdit_textColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_textColor)},
    {SIP_MLNAME_CAST(sipName_textCursor), meth_QTextEdit_textCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_textCursor)},
    {SIP_MLNAME_CAST(sipName_textInteractionFlags), meth_QTextEdit_textInteractionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_textInteractionFlags)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QTextEdit_timerEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_timerEvent)},
    {SIP_MLNAME_CAST(sipName_toHtml), meth_QTextEdit_toHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_toHtml)},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QTextEdit_toPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_toPlainText)},
    {SIP_MLNAME_CAST(sipName_undo), meth_QTextEdit_undo, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_undo)},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QTextEdit_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportEvent), (PyCFunction)meth_QTextEdit_viewportEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QTextEdit_wheelEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_wordWrapMode), meth_QTextEdit_wordWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QTextEdit_wordWrapMode)},
    {SIP_MLNAME_CAST(sipName_zoomIn), (PyCFunction)meth_QTextEdit_zoomIn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_zoomIn)},
    {SIP_MLNAME_CAST(sipName_zoomOut), (PyCFunction)meth_QTextEdit_zoomOut, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTextEdit_zoomOut)}
};

static sipEnumMemberDef enummembers_QTextEdit[] = {
    {sipName_AutoAll, static_cast<int>(QTextEdit::AutoAll), 431},
    {sipName_AutoBulletList, static_cast<int>(QTextEdit::AutoBulletList), 431},
    {sipName_AutoNone, static_cast<int>(QTextEdit::AutoNone), 431},
    {sipName_FixedColumnWidth, static_cast<int>(QTextEdit::FixedColumnWidth), 433},
    {sipName_FixedPixelWidth, static_cast<int>(QTextEdit::FixedPixelWidth), 433},
    {sipName_NoWrap, static_cast<int>(QTextEdit::NoWrap), 433},
    {sipName_WidgetWidth, static_cast<int>(QTextEdit::WidgetWidth), 433},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTextEdit[] = {
    {"cursorPositionChanged()", "\1QTextEdit.cursorPositionChanged", 0, 0},
    {"selectionChanged()", "\1QTextEdit.selectionChanged", 0, 0},
    {"copyAvailable(bool)", "\1QTextEdit.copyAvailable[bool]", 0, 0},
    {"currentCharFormatChanged(QTextCharFormat)", "\1QTextEdit.currentCharFormatChanged[QTextCharFormat]", 0, 0},
    {"redoAvailable(bool)", "\1QTextEdit.redoAvailable[bool]", 0, 0},
    {"undoAvailable(bool)", "\1QTextEdit.undoAvailable[bool]", 0, 0},
    {"textChanged()", "\1QTextEdit.textChanged", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QTextEdit, "\1QTextEdit(QWidget parent=None)\n"
    "QTextEdit(str, QWidget parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QTextEdit = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTextEdit,
        {0}
    },
    {
        sipNameNr_QTextEdit,
        {0, 0, 1},
        138, methods_QTextEdit,
        7, enummembers_QTextEdit,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTextEdit,
    -1,
    -1,
    supers_QTextEdit,
    0,
    init_type_QTextEdit,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextEdit,
    0,
    0,
    0,
    release_QTextEdit,
    cast_QTextEdit,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTextEdit::staticMetaObject,
    0,
    signals_QTextEdit,
    0
};
