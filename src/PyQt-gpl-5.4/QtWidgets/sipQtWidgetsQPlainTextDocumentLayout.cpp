/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:11 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 189 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qplaintextedit.sip"
#include <qplaintextedit.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"

#line 40 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 129 "sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 65 "sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 101 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 46 "sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 59 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 247 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 62 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 65 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 60 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 68 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 89 "sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 71 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 74 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 77 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 80 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 83 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 86 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 89 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 92 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 95 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 98 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 101 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 104 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 107 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 110 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 113 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 116 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 119 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"


class sipQPlainTextDocumentLayout : public QPlainTextDocumentLayout
{
public:
    sipQPlainTextDocumentLayout(QTextDocument*);
    virtual ~sipQPlainTextDocumentLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_resizeInlineObject(bool,QTextInlineObject,int,const QTextFormat&);
    void sipProtectVirt_positionInlineObject(bool,QTextInlineObject,int,const QTextFormat&);
    void sipProtectVirt_drawInlineObject(bool,QPainter*,const QRectF&,QTextInlineObject,int,const QTextFormat&);
    QTextCharFormat sipProtect_format(int);
    void sipProtectVirt_documentChanged(bool,int,int,int);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void drawInlineObject(QPainter*,const QRectF&,QTextInlineObject,int,const QTextFormat&);
    void positionInlineObject(QTextInlineObject,int,const QTextFormat&);
    void resizeInlineObject(QTextInlineObject,int,const QTextFormat&);
    void documentChanged(int,int,int);
    QRectF blockBoundingRect(const QTextBlock&) const;
    QRectF frameBoundingRect(QTextFrame*) const;
    QSizeF documentSize() const;
    int pageCount() const;
    int hitTest(const QPointF&,Qt::HitTestAccuracy) const;
    void draw(QPainter*,const QAbstractTextDocumentLayout::PaintContext&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlainTextDocumentLayout(const sipQPlainTextDocumentLayout &);
    sipQPlainTextDocumentLayout &operator = (const sipQPlainTextDocumentLayout &);

    char sipPyMethods[17];
};

sipQPlainTextDocumentLayout::sipQPlainTextDocumentLayout(QTextDocument*a0): QPlainTextDocumentLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlainTextDocumentLayout::~sipQPlainTextDocumentLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQPlainTextDocumentLayout::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QPlainTextDocumentLayout);
}

int sipQPlainTextDocumentLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QPlainTextDocumentLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QPlainTextDocumentLayout,_c,_id,_a);

    return _id;
}

void *sipQPlainTextDocumentLayout::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QPlainTextDocumentLayout, _clname, &sipCpp) ? sipCpp : QPlainTextDocumentLayout::qt_metacast(_clname));
}

void sipQPlainTextDocumentLayout::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QPlainTextDocumentLayout::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QPlainTextDocumentLayout::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QPlainTextDocumentLayout::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QPlainTextDocumentLayout::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QPlainTextDocumentLayout::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQPlainTextDocumentLayout::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QPlainTextDocumentLayout::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQPlainTextDocumentLayout::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QPlainTextDocumentLayout::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPlainTextDocumentLayout::drawInlineObject(QPainter*a0,const QRectF& a1,QTextInlineObject a2,int a3,const QTextFormat& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_drawInlineObject);

    if (!sipMeth)
    {
        QPlainTextDocumentLayout::drawInlineObject(a0,a1,a2,a3,a4);
        return;
    }

    typedef void (*sipVH_QtGui_69)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRectF&,QTextInlineObject,int,const QTextFormat&);

    ((sipVH_QtGui_69)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[69]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

void sipQPlainTextDocumentLayout::positionInlineObject(QTextInlineObject a0,int a1,const QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_positionInlineObject);

    if (!sipMeth)
    {
        QPlainTextDocumentLayout::positionInlineObject(a0,a1,a2);
        return;
    }

    typedef void (*sipVH_QtGui_70)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTextInlineObject,int,const QTextFormat&);

    ((sipVH_QtGui_70)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[70]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPlainTextDocumentLayout::resizeInlineObject(QTextInlineObject a0,int a1,const QTextFormat& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_resizeInlineObject);

    if (!sipMeth)
    {
        QPlainTextDocumentLayout::resizeInlineObject(a0,a1,a2);
        return;
    }

    typedef void (*sipVH_QtGui_70)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTextInlineObject,int,const QTextFormat&);

    ((sipVH_QtGui_70)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[70]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQPlainTextDocumentLayout::documentChanged(int a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_documentChanged);

    if (!sipMeth)
    {
        QPlainTextDocumentLayout::documentChanged(a0,a1,a2);
        return;
    }

    typedef void (*sipVH_QtGui_71)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    ((sipVH_QtGui_71)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[71]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QRectF sipQPlainTextDocumentLayout::blockBoundingRect(const QTextBlock& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_blockBoundingRect);

    if (!sipMeth)
        return QPlainTextDocumentLayout::blockBoundingRect(a0);

    typedef QRectF (*sipVH_QtGui_72)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QTextBlock&);

    return ((sipVH_QtGui_72)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[72]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QRectF sipQPlainTextDocumentLayout::frameBoundingRect(QTextFrame*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_frameBoundingRect);

    if (!sipMeth)
        return QPlainTextDocumentLayout::frameBoundingRect(a0);

    typedef QRectF (*sipVH_QtGui_73)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTextFrame*);

    return ((sipVH_QtGui_73)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[73]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSizeF sipQPlainTextDocumentLayout::documentSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_documentSize);

    if (!sipMeth)
        return QPlainTextDocumentLayout::documentSize();

    typedef QSizeF (*sipVH_QtGui_74)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_74)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[74]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQPlainTextDocumentLayout::pageCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_pageCount);

    if (!sipMeth)
        return QPlainTextDocumentLayout::pageCount();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQPlainTextDocumentLayout::hitTest(const QPointF& a0,Qt::HitTestAccuracy a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_hitTest);

    if (!sipMeth)
        return QPlainTextDocumentLayout::hitTest(a0,a1);

    typedef int (*sipVH_QtGui_75)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPointF&,Qt::HitTestAccuracy);

    return ((sipVH_QtGui_75)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[75]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQPlainTextDocumentLayout::draw(QPainter*a0,const QAbstractTextDocumentLayout::PaintContext& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_draw);

    if (!sipMeth)
    {
        QPlainTextDocumentLayout::draw(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_76)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QAbstractTextDocumentLayout::PaintContext&);

    ((sipVH_QtGui_76)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[76]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QObject* sipQPlainTextDocumentLayout::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQPlainTextDocumentLayout::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQPlainTextDocumentLayout::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQPlainTextDocumentLayout::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQPlainTextDocumentLayout::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQPlainTextDocumentLayout::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQPlainTextDocumentLayout::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQPlainTextDocumentLayout::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQPlainTextDocumentLayout::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQPlainTextDocumentLayout::sipProtectVirt_resizeInlineObject(bool sipSelfWasArg,QTextInlineObject a0,int a1,const QTextFormat& a2)
{
    (sipSelfWasArg ? QAbstractTextDocumentLayout::resizeInlineObject(a0,a1,a2) : resizeInlineObject(a0,a1,a2));
}

void sipQPlainTextDocumentLayout::sipProtectVirt_positionInlineObject(bool sipSelfWasArg,QTextInlineObject a0,int a1,const QTextFormat& a2)
{
    (sipSelfWasArg ? QAbstractTextDocumentLayout::positionInlineObject(a0,a1,a2) : positionInlineObject(a0,a1,a2));
}

void sipQPlainTextDocumentLayout::sipProtectVirt_drawInlineObject(bool sipSelfWasArg,QPainter*a0,const QRectF& a1,QTextInlineObject a2,int a3,const QTextFormat& a4)
{
    (sipSelfWasArg ? QAbstractTextDocumentLayout::drawInlineObject(a0,a1,a2,a3,a4) : drawInlineObject(a0,a1,a2,a3,a4));
}

QTextCharFormat sipQPlainTextDocumentLayout::sipProtect_format(int a0)
{
    return QAbstractTextDocumentLayout::format(a0);
}

void sipQPlainTextDocumentLayout::sipProtectVirt_documentChanged(bool sipSelfWasArg,int a0,int a1,int a2)
{
    (sipSelfWasArg ? QPlainTextDocumentLayout::documentChanged(a0,a1,a2) : documentChanged(a0,a1,a2));
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_sender, "QPlainTextDocumentLayout.sender() -> QObject");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 612 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_sender, doc_QPlainTextDocumentLayout_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_receivers, "QPlainTextDocumentLayout.receivers(signal) -> int");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 671 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQPlainTextDocumentLayout.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_receivers, doc_QPlainTextDocumentLayout_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_timerEvent, "QPlainTextDocumentLayout.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_timerEvent, doc_QPlainTextDocumentLayout_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_childEvent, "QPlainTextDocumentLayout.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_childEvent, doc_QPlainTextDocumentLayout_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_customEvent, "QPlainTextDocumentLayout.customEvent(QEvent)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_customEvent, doc_QPlainTextDocumentLayout_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_connectNotify, "QPlainTextDocumentLayout.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_connectNotify, doc_QPlainTextDocumentLayout_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_disconnectNotify, "QPlainTextDocumentLayout.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_disconnectNotify, doc_QPlainTextDocumentLayout_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_senderSignalIndex, "QPlainTextDocumentLayout.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_senderSignalIndex, doc_QPlainTextDocumentLayout_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_isSignalConnected, "QPlainTextDocumentLayout.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_isSignalConnected, doc_QPlainTextDocumentLayout_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_resizeInlineObject, "QPlainTextDocumentLayout.resizeInlineObject(QTextInlineObject, int, QTextFormat)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_resizeInlineObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_resizeInlineObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextInlineObject* a0;
        int a1;
        const QTextFormat* a2;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9iJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextInlineObject, &a0, &a1, sipType_QTextFormat, &a2))
        {
            sipCpp->sipProtectVirt_resizeInlineObject(sipSelfWasArg,*a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_resizeInlineObject, doc_QPlainTextDocumentLayout_resizeInlineObject);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_positionInlineObject, "QPlainTextDocumentLayout.positionInlineObject(QTextInlineObject, int, QTextFormat)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_positionInlineObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_positionInlineObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextInlineObject* a0;
        int a1;
        const QTextFormat* a2;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9iJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextInlineObject, &a0, &a1, sipType_QTextFormat, &a2))
        {
            sipCpp->sipProtectVirt_positionInlineObject(sipSelfWasArg,*a0,a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_positionInlineObject, doc_QPlainTextDocumentLayout_positionInlineObject);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_drawInlineObject, "QPlainTextDocumentLayout.drawInlineObject(QPainter, QRectF, QTextInlineObject, int, QTextFormat)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_drawInlineObject(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_drawInlineObject(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QRectF* a1;
        QTextInlineObject* a2;
        int a3;
        const QTextFormat* a4;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9J9iJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1, sipType_QTextInlineObject, &a2, &a3, sipType_QTextFormat, &a4))
        {
            sipCpp->sipProtectVirt_drawInlineObject(sipSelfWasArg,a0,*a1,*a2,a3,*a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_drawInlineObject, doc_QPlainTextDocumentLayout_drawInlineObject);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_format, "QPlainTextDocumentLayout.format(int) -> QTextCharFormat");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_format(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_format(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0))
        {
            QTextCharFormat*sipRes;

            sipRes = new QTextCharFormat(sipCpp->sipProtect_format(a0));

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_format, doc_QPlainTextDocumentLayout_format);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_draw, "QPlainTextDocumentLayout.draw(QPainter, QAbstractTextDocumentLayout.PaintContext)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_draw(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QAbstractTextDocumentLayout::PaintContext* a1;
        QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QPainter, &a0, sipType_QAbstractTextDocumentLayout_PaintContext, &a1))
        {
            (sipSelfWasArg ? sipCpp->QPlainTextDocumentLayout::draw(a0,*a1) : sipCpp->draw(a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_draw, doc_QPlainTextDocumentLayout_draw);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_hitTest, "QPlainTextDocumentLayout.hitTest(QPointF, Qt.HitTestAccuracy) -> int");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_hitTest(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_hitTest(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPointF* a0;
        int a0State = 0;
        Qt::HitTestAccuracy a1;
        const QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QPointF, &a0, &a0State, sipType_Qt_HitTestAccuracy, &a1))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlainTextDocumentLayout::hitTest(*a0,a1) : sipCpp->hitTest(*a0,a1));
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_hitTest, doc_QPlainTextDocumentLayout_hitTest);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_pageCount, "QPlainTextDocumentLayout.pageCount() -> int");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_pageCount(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_pageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPlainTextDocumentLayout::pageCount() : sipCpp->pageCount());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_pageCount, doc_QPlainTextDocumentLayout_pageCount);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_documentSize, "QPlainTextDocumentLayout.documentSize() -> QSizeF");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_documentSize(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_documentSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            QSizeF*sipRes;

            sipRes = new QSizeF((sipSelfWasArg ? sipCpp->QPlainTextDocumentLayout::documentSize() : sipCpp->documentSize()));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_documentSize, doc_QPlainTextDocumentLayout_documentSize);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_frameBoundingRect, "QPlainTextDocumentLayout.frameBoundingRect(QTextFrame) -> QRectF");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_frameBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_frameBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTextFrame* a0;
        const QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextFrame, &a0))
        {
            QRectF*sipRes;

            sipRes = new QRectF((sipSelfWasArg ? sipCpp->QPlainTextDocumentLayout::frameBoundingRect(a0) : sipCpp->frameBoundingRect(a0)));

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_frameBoundingRect, doc_QPlainTextDocumentLayout_frameBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_blockBoundingRect, "QPlainTextDocumentLayout.blockBoundingRect(QTextBlock) -> QRectF");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_blockBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_blockBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTextBlock* a0;
        const QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextBlock, &a0))
        {
            QRectF*sipRes;

            sipRes = new QRectF((sipSelfWasArg ? sipCpp->QPlainTextDocumentLayout::blockBoundingRect(*a0) : sipCpp->blockBoundingRect(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_blockBoundingRect, doc_QPlainTextDocumentLayout_blockBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_ensureBlockLayout, "QPlainTextDocumentLayout.ensureBlockLayout(QTextBlock)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_ensureBlockLayout(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_ensureBlockLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTextBlock* a0;
        const QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, sipType_QTextBlock, &a0))
        {
            sipCpp->ensureBlockLayout(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_ensureBlockLayout, doc_QPlainTextDocumentLayout_ensureBlockLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_setCursorWidth, "QPlainTextDocumentLayout.setCursorWidth(int)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_setCursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_setCursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0))
        {
            sipCpp->setCursorWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_setCursorWidth, doc_QPlainTextDocumentLayout_setCursorWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_cursorWidth, "QPlainTextDocumentLayout.cursorWidth() -> int");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_cursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_cursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->cursorWidth();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_cursorWidth, doc_QPlainTextDocumentLayout_cursorWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_requestUpdate, "QPlainTextDocumentLayout.requestUpdate()");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_requestUpdate(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_requestUpdate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPlainTextDocumentLayout *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp))
        {
            sipCpp->requestUpdate();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_requestUpdate, doc_QPlainTextDocumentLayout_requestUpdate);

    return NULL;
}


PyDoc_STRVAR(doc_QPlainTextDocumentLayout_documentChanged, "QPlainTextDocumentLayout.documentChanged(int, int, int)");

extern "C" {static PyObject *meth_QPlainTextDocumentLayout_documentChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPlainTextDocumentLayout_documentChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        int a2;
        sipQPlainTextDocumentLayout *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biii", &sipSelf, sipType_QPlainTextDocumentLayout, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->sipProtectVirt_documentChanged(sipSelfWasArg,a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPlainTextDocumentLayout, sipName_documentChanged, doc_QPlainTextDocumentLayout_documentChanged);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPlainTextDocumentLayout(void *, const sipTypeDef *);}
static void *cast_QPlainTextDocumentLayout(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QPlainTextDocumentLayout)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractTextDocumentLayout)->ctd_cast((QAbstractTextDocumentLayout *)(QPlainTextDocumentLayout *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlainTextDocumentLayout(void *, int);}
static void release_QPlainTextDocumentLayout(void *sipCppV,int)
{
    QPlainTextDocumentLayout *sipCpp = reinterpret_cast<QPlainTextDocumentLayout *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QPlainTextDocumentLayout(sipSimpleWrapper *);}
static void dealloc_QPlainTextDocumentLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPlainTextDocumentLayout *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPlainTextDocumentLayout(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPlainTextDocumentLayout(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPlainTextDocumentLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPlainTextDocumentLayout *sipCpp = 0;

    {
        QTextDocument* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QTextDocument, &a0))
        {
            sipCpp = new sipQPlainTextDocumentLayout(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlainTextDocumentLayout[] = {{1, 1, 1}};


static PyMethodDef methods_QPlainTextDocumentLayout[] = {
    {SIP_MLNAME_CAST(sipName_blockBoundingRect), meth_QPlainTextDocumentLayout_blockBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_blockBoundingRect)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QPlainTextDocumentLayout_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QPlainTextDocumentLayout_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_cursorWidth), meth_QPlainTextDocumentLayout_cursorWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_cursorWidth)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QPlainTextDocumentLayout_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QPlainTextDocumentLayout_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_documentChanged), (PyCFunction)meth_QPlainTextDocumentLayout_documentChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_documentChanged)},
    {SIP_MLNAME_CAST(sipName_documentSize), meth_QPlainTextDocumentLayout_documentSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_documentSize)},
    {SIP_MLNAME_CAST(sipName_draw), meth_QPlainTextDocumentLayout_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_draw)},
    {SIP_MLNAME_CAST(sipName_drawInlineObject), (PyCFunction)meth_QPlainTextDocumentLayout_drawInlineObject, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_ensureBlockLayout), meth_QPlainTextDocumentLayout_ensureBlockLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_ensureBlockLayout)},
    {SIP_MLNAME_CAST(sipName_format), (PyCFunction)meth_QPlainTextDocumentLayout_format, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_frameBoundingRect), meth_QPlainTextDocumentLayout_frameBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_frameBoundingRect)},
    {SIP_MLNAME_CAST(sipName_hitTest), meth_QPlainTextDocumentLayout_hitTest, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_hitTest)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QPlainTextDocumentLayout_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_pageCount), meth_QPlainTextDocumentLayout_pageCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_pageCount)},
    {SIP_MLNAME_CAST(sipName_positionInlineObject), (PyCFunction)meth_QPlainTextDocumentLayout_positionInlineObject, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QPlainTextDocumentLayout_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_requestUpdate), meth_QPlainTextDocumentLayout_requestUpdate, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_requestUpdate)},
    {SIP_MLNAME_CAST(sipName_resizeInlineObject), (PyCFunction)meth_QPlainTextDocumentLayout_resizeInlineObject, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QPlainTextDocumentLayout_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QPlainTextDocumentLayout_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setCursorWidth), meth_QPlainTextDocumentLayout_setCursorWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QPlainTextDocumentLayout_setCursorWidth)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QPlainTextDocumentLayout_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

PyDoc_STRVAR(doc_QPlainTextDocumentLayout, "\1QPlainTextDocumentLayout(QTextDocument)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QPlainTextDocumentLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPlainTextDocumentLayout,
        {0}
    },
    {
        sipNameNr_QPlainTextDocumentLayout,
        {0, 0, 1},
        24, methods_QPlainTextDocumentLayout,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPlainTextDocumentLayout,
    -1,
    -1,
    supers_QPlainTextDocumentLayout,
    0,
    init_type_QPlainTextDocumentLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlainTextDocumentLayout,
    0,
    0,
    0,
    release_QPlainTextDocumentLayout,
    cast_QPlainTextDocumentLayout,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QPlainTextDocumentLayout::staticMetaObject,
    0,
    0,
    0
};
