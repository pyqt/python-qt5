/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:10 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 49 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtablewidget.sip"
#include <qtablewidget.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidgetItem.cpp"

#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidgetItem.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidgetItem.cpp"
#line 30 "sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidgetItem.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidgetItem.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidgetItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidgetItem.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidgetItem.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidgetItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidgetItem.cpp"
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtablewidget.sip"
#include <qtablewidget.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTableWidgetItem.cpp"


class sipQTableWidgetItem : public QTableWidgetItem
{
public:
    sipQTableWidgetItem(int);
    sipQTableWidgetItem(const QString&,int);
    sipQTableWidgetItem(const QIcon&,const QString&,int);
    sipQTableWidgetItem(const QTableWidgetItem&);
    virtual ~sipQTableWidgetItem();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void write(QDataStream&) const;
    void read(QDataStream&);
    bool operator<(const QTableWidgetItem&) const;
    void setData(int,const QVariant&);
    QVariant data(int) const;
    QTableWidgetItem* clone() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTableWidgetItem(const sipQTableWidgetItem &);
    sipQTableWidgetItem &operator = (const sipQTableWidgetItem &);

    char sipPyMethods[6];
};

sipQTableWidgetItem::sipQTableWidgetItem(int a0): QTableWidgetItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTableWidgetItem::sipQTableWidgetItem(const QString& a0,int a1): QTableWidgetItem(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTableWidgetItem::sipQTableWidgetItem(const QIcon& a0,const QString& a1,int a2): QTableWidgetItem(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTableWidgetItem::sipQTableWidgetItem(const QTableWidgetItem& a0): QTableWidgetItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTableWidgetItem::~sipQTableWidgetItem()
{
    sipCommonDtor(sipPySelf);
}

void sipQTableWidgetItem::write(QDataStream& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_write);

    if (!sipMeth)
    {
        QTableWidgetItem::write(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDataStream&);

    ((sipVH_QtGui_24)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[24]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidgetItem::read(QDataStream& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_read);

    if (!sipMeth)
    {
        QTableWidgetItem::read(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDataStream&);

    ((sipVH_QtGui_24)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[24]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTableWidgetItem::operator<(const QTableWidgetItem& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName___lt__);

    if (!sipMeth)
        return QTableWidgetItem::operator<(a0);

    extern bool sipVH_QtWidgets_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QTableWidgetItem&);

    return sipVH_QtWidgets_43(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTableWidgetItem::setData(int a0,const QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
    {
        QTableWidgetItem::setData(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const QVariant&);

    sipVH_QtWidgets_44(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QVariant sipQTableWidgetItem::data(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return QTableWidgetItem::data(a0);

    typedef QVariant (*sipVH_QtGui_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtGui_27)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[27]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QTableWidgetItem* sipQTableWidgetItem::clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_clone);

    if (!sipMeth)
        return QTableWidgetItem::clone();

    extern QTableWidgetItem* sipVH_QtWidgets_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_45(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QTableWidgetItem_clone, "QTableWidgetItem.clone() -> QTableWidgetItem");

extern "C" {static PyObject *meth_QTableWidgetItem_clone(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QTableWidgetItem*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QTableWidgetItem::clone() : sipCpp->clone());

            return sipConvertFromNewType(sipRes,sipType_QTableWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_clone, doc_QTableWidgetItem_clone);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_tableWidget, "QTableWidgetItem.tableWidget() -> QTableWidget");

extern "C" {static PyObject *meth_QTableWidgetItem_tableWidget(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_tableWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QTableWidget*sipRes;

            sipRes = sipCpp->tableWidget();

            return sipConvertFromType(sipRes,sipType_QTableWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_tableWidget, doc_QTableWidgetItem_tableWidget);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_flags, "QTableWidgetItem.flags() -> Qt.ItemFlags");

extern "C" {static PyObject *meth_QTableWidgetItem_flags(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            Qt::ItemFlags*sipRes;

            sipRes = new Qt::ItemFlags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_flags, doc_QTableWidgetItem_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_text, "QTableWidgetItem.text() -> str");

extern "C" {static PyObject *meth_QTableWidgetItem_text(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_text(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->text());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_text, doc_QTableWidgetItem_text);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_icon, "QTableWidgetItem.icon() -> QIcon");

extern "C" {static PyObject *meth_QTableWidgetItem_icon(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QIcon*sipRes;

            sipRes = new QIcon(sipCpp->icon());

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_icon, doc_QTableWidgetItem_icon);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_statusTip, "QTableWidgetItem.statusTip() -> str");

extern "C" {static PyObject *meth_QTableWidgetItem_statusTip(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_statusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->statusTip());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_statusTip, doc_QTableWidgetItem_statusTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_toolTip, "QTableWidgetItem.toolTip() -> str");

extern "C" {static PyObject *meth_QTableWidgetItem_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toolTip());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_toolTip, doc_QTableWidgetItem_toolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_whatsThis, "QTableWidgetItem.whatsThis() -> str");

extern "C" {static PyObject *meth_QTableWidgetItem_whatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_whatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->whatsThis());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_whatsThis, doc_QTableWidgetItem_whatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_font, "QTableWidgetItem.font() -> QFont");

extern "C" {static PyObject *meth_QTableWidgetItem_font(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QFont*sipRes;

            sipRes = new QFont(sipCpp->font());

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_font, doc_QTableWidgetItem_font);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_textAlignment, "QTableWidgetItem.textAlignment() -> int");

extern "C" {static PyObject *meth_QTableWidgetItem_textAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_textAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->textAlignment();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_textAlignment, doc_QTableWidgetItem_textAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setTextAlignment, "QTableWidgetItem.setTextAlignment(int)");

extern "C" {static PyObject *meth_QTableWidgetItem_setTextAlignment(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setTextAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidgetItem, &sipCpp, &a0))
        {
            sipCpp->setTextAlignment(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setTextAlignment, doc_QTableWidgetItem_setTextAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_checkState, "QTableWidgetItem.checkState() -> Qt.CheckState");

extern "C" {static PyObject *meth_QTableWidgetItem_checkState(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_checkState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            Qt::CheckState sipRes;

            sipRes = sipCpp->checkState();

            return sipConvertFromEnum(sipRes,sipType_Qt_CheckState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_checkState, doc_QTableWidgetItem_checkState);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setCheckState, "QTableWidgetItem.setCheckState(Qt.CheckState)");

extern "C" {static PyObject *meth_QTableWidgetItem_setCheckState(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setCheckState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::CheckState a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_Qt_CheckState, &a0))
        {
            sipCpp->setCheckState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setCheckState, doc_QTableWidgetItem_setCheckState);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_data, "QTableWidgetItem.data(int) -> QVariant");

extern "C" {static PyObject *meth_QTableWidgetItem_data(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_data(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTableWidgetItem, &sipCpp, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QTableWidgetItem::data(a0) : sipCpp->data(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_data, doc_QTableWidgetItem_data);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setData, "QTableWidgetItem.setData(int, QVariant)");

extern "C" {static PyObject *meth_QTableWidgetItem_setData(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QVariant* a1;
        int a1State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, &a0, sipType_QVariant, &a1, &a1State))
        {
            (sipSelfWasArg ? sipCpp->QTableWidgetItem::setData(a0,*a1) : sipCpp->setData(a0,*a1));
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setData, doc_QTableWidgetItem_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_read, "QTableWidgetItem.read(QDataStream)");

extern "C" {static PyObject *meth_QTableWidgetItem_read(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_read(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream* a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableWidgetItem::read(*a0) : sipCpp->read(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_read, doc_QTableWidgetItem_read);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_write, "QTableWidgetItem.write(QDataStream)");

extern "C" {static PyObject *meth_QTableWidgetItem_write(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_write(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream* a0;
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QDataStream, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTableWidgetItem::write(*a0) : sipCpp->write(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_write, doc_QTableWidgetItem_write);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_type, "QTableWidgetItem.type() -> int");

extern "C" {static PyObject *meth_QTableWidgetItem_type(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->type();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_type, doc_QTableWidgetItem_type);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setFlags, "QTableWidgetItem.setFlags(Qt.ItemFlags)");

extern "C" {static PyObject *meth_QTableWidgetItem_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ItemFlags* a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_Qt_ItemFlags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_Qt_ItemFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setFlags, doc_QTableWidgetItem_setFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setText, "QTableWidgetItem.setText(str)");

extern "C" {static PyObject *meth_QTableWidgetItem_setText(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setText, doc_QTableWidgetItem_setText);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setIcon, "QTableWidgetItem.setIcon(QIcon)");

extern "C" {static PyObject *meth_QTableWidgetItem_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QIcon* a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QIcon, &a0))
        {
            sipCpp->setIcon(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setIcon, doc_QTableWidgetItem_setIcon);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setStatusTip, "QTableWidgetItem.setStatusTip(str)");

extern "C" {static PyObject *meth_QTableWidgetItem_setStatusTip(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setStatusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setStatusTip(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setStatusTip, doc_QTableWidgetItem_setStatusTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setToolTip, "QTableWidgetItem.setToolTip(str)");

extern "C" {static PyObject *meth_QTableWidgetItem_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setToolTip(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setToolTip, doc_QTableWidgetItem_setToolTip);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setWhatsThis, "QTableWidgetItem.setWhatsThis(str)");

extern "C" {static PyObject *meth_QTableWidgetItem_setWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setWhatsThis(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setWhatsThis, doc_QTableWidgetItem_setWhatsThis);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setFont, "QTableWidgetItem.setFont(QFont)");

extern "C" {static PyObject *meth_QTableWidgetItem_setFont(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QFont* a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QFont, &a0))
        {
            sipCpp->setFont(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setFont, doc_QTableWidgetItem_setFont);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_sizeHint, "QTableWidgetItem.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QTableWidgetItem_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->sizeHint());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_sizeHint, doc_QTableWidgetItem_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setSizeHint, "QTableWidgetItem.setSizeHint(QSize)");

extern "C" {static PyObject *meth_QTableWidgetItem_setSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setSizeHint(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setSizeHint, doc_QTableWidgetItem_setSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_background, "QTableWidgetItem.background() -> QBrush");

extern "C" {static PyObject *meth_QTableWidgetItem_background(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_background(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->background());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_background, doc_QTableWidgetItem_background);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setBackground, "QTableWidgetItem.setBackground(QBrush)");

extern "C" {static PyObject *meth_QTableWidgetItem_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBackground(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setBackground, doc_QTableWidgetItem_setBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_foreground, "QTableWidgetItem.foreground() -> QBrush");

extern "C" {static PyObject *meth_QTableWidgetItem_foreground(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->foreground());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_foreground, doc_QTableWidgetItem_foreground);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setForeground, "QTableWidgetItem.setForeground(QBrush)");

extern "C" {static PyObject *meth_QTableWidgetItem_setForeground(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTableWidgetItem, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setForeground(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setForeground, doc_QTableWidgetItem_setForeground);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_row, "QTableWidgetItem.row() -> int");

extern "C" {static PyObject *meth_QTableWidgetItem_row(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_row(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->row();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_row, doc_QTableWidgetItem_row);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_column, "QTableWidgetItem.column() -> int");

extern "C" {static PyObject *meth_QTableWidgetItem_column(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_column(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->column();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_column, doc_QTableWidgetItem_column);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_setSelected, "QTableWidgetItem.setSelected(bool)");

extern "C" {static PyObject *meth_QTableWidgetItem_setSelected(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_setSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTableWidgetItem, &sipCpp, &a0))
        {
            sipCpp->setSelected(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_setSelected, doc_QTableWidgetItem_setSelected);

    return NULL;
}


PyDoc_STRVAR(doc_QTableWidgetItem_isSelected, "QTableWidgetItem.isSelected() -> bool");

extern "C" {static PyObject *meth_QTableWidgetItem_isSelected(PyObject *, PyObject *);}
static PyObject *meth_QTableWidgetItem_isSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTableWidgetItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSelected();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTableWidgetItem, sipName_isSelected, doc_QTableWidgetItem_isSelected);

    return NULL;
}


extern "C" {static PyObject *slot_QTableWidgetItem___ge__(PyObject *,PyObject *);}
static PyObject *slot_QTableWidgetItem___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QTableWidgetItem *sipCpp = reinterpret_cast<QTableWidgetItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTableWidgetItem));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTableWidgetItem, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp->QTableWidgetItem::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWidgets,ge_slot,sipType_QTableWidgetItem,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTableWidgetItem___lt__(PyObject *,PyObject *);}
static PyObject *slot_QTableWidgetItem___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QTableWidgetItem *sipCpp = reinterpret_cast<QTableWidgetItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTableWidgetItem));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QTableWidgetItem* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QTableWidgetItem, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QTableWidgetItem::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWidgets,lt_slot,sipType_QTableWidgetItem,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTableWidgetItem(void *, const sipTypeDef *);}
static void *cast_QTableWidgetItem(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTableWidgetItem)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTableWidgetItem(void *, int);}
static void release_QTableWidgetItem(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTableWidgetItem *>(sipCppV);
    else
        delete reinterpret_cast<QTableWidgetItem *>(sipCppV);
}


extern "C" {static void dealloc_QTableWidgetItem(sipSimpleWrapper *);}
static void dealloc_QTableWidgetItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTableWidgetItem *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTableWidgetItem(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTableWidgetItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTableWidgetItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQTableWidgetItem *sipCpp = 0;

    {
        int a0 = QTableWidgetItem::Type;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &a0))
        {
            sipCpp = new sipQTableWidgetItem(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        int a1 = QTableWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|i", sipType_QString,&a0, &a0State, &a1))
        {
            sipCpp = new sipQTableWidgetItem(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QIcon* a0;
        const QString* a1;
        int a1State = 0;
        int a2 = QTableWidgetItem::Type;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9J1|i", sipType_QIcon, &a0, sipType_QString,&a1, &a1State, &a2))
        {
            sipCpp = new sipQTableWidgetItem(*a0,*a1,a2);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QTableWidgetItem* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QTableWidgetItem, &a0))
        {
            sipCpp = new sipQTableWidgetItem(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTableWidgetItem[] = {
    {(void *)slot_QTableWidgetItem___ge__, ge_slot},
    {(void *)slot_QTableWidgetItem___lt__, lt_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTableWidgetItem[] = {
    {SIP_MLNAME_CAST(sipName_background), meth_QTableWidgetItem_background, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_background)},
    {SIP_MLNAME_CAST(sipName_checkState), meth_QTableWidgetItem_checkState, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_checkState)},
    {SIP_MLNAME_CAST(sipName_clone), meth_QTableWidgetItem_clone, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_clone)},
    {SIP_MLNAME_CAST(sipName_column), meth_QTableWidgetItem_column, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_column)},
    {SIP_MLNAME_CAST(sipName_data), meth_QTableWidgetItem_data, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_data)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QTableWidgetItem_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_flags)},
    {SIP_MLNAME_CAST(sipName_font), meth_QTableWidgetItem_font, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_font)},
    {SIP_MLNAME_CAST(sipName_foreground), meth_QTableWidgetItem_foreground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_foreground)},
    {SIP_MLNAME_CAST(sipName_icon), meth_QTableWidgetItem_icon, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_icon)},
    {SIP_MLNAME_CAST(sipName_isSelected), meth_QTableWidgetItem_isSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_isSelected)},
    {SIP_MLNAME_CAST(sipName_read), meth_QTableWidgetItem_read, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_read)},
    {SIP_MLNAME_CAST(sipName_row), meth_QTableWidgetItem_row, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_row)},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QTableWidgetItem_setBackground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setBackground)},
    {SIP_MLNAME_CAST(sipName_setCheckState), meth_QTableWidgetItem_setCheckState, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setCheckState)},
    {SIP_MLNAME_CAST(sipName_setData), meth_QTableWidgetItem_setData, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setData)},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QTableWidgetItem_setFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setFlags)},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QTableWidgetItem_setFont, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setFont)},
    {SIP_MLNAME_CAST(sipName_setForeground), meth_QTableWidgetItem_setForeground, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setForeground)},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QTableWidgetItem_setIcon, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setIcon)},
    {SIP_MLNAME_CAST(sipName_setSelected), meth_QTableWidgetItem_setSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setSelected)},
    {SIP_MLNAME_CAST(sipName_setSizeHint), meth_QTableWidgetItem_setSizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setSizeHint)},
    {SIP_MLNAME_CAST(sipName_setStatusTip), meth_QTableWidgetItem_setStatusTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setStatusTip)},
    {SIP_MLNAME_CAST(sipName_setText), meth_QTableWidgetItem_setText, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setText)},
    {SIP_MLNAME_CAST(sipName_setTextAlignment), meth_QTableWidgetItem_setTextAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setTextAlignment)},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QTableWidgetItem_setToolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setToolTip)},
    {SIP_MLNAME_CAST(sipName_setWhatsThis), meth_QTableWidgetItem_setWhatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_setWhatsThis)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QTableWidgetItem_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_sizeHint)},
    {SIP_MLNAME_CAST(sipName_statusTip), meth_QTableWidgetItem_statusTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_statusTip)},
    {SIP_MLNAME_CAST(sipName_tableWidget), meth_QTableWidgetItem_tableWidget, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_tableWidget)},
    {SIP_MLNAME_CAST(sipName_text), meth_QTableWidgetItem_text, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_text)},
    {SIP_MLNAME_CAST(sipName_textAlignment), meth_QTableWidgetItem_textAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_textAlignment)},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QTableWidgetItem_toolTip, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_toolTip)},
    {SIP_MLNAME_CAST(sipName_type), meth_QTableWidgetItem_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_type)},
    {SIP_MLNAME_CAST(sipName_whatsThis), meth_QTableWidgetItem_whatsThis, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_whatsThis)},
    {SIP_MLNAME_CAST(sipName_write), meth_QTableWidgetItem_write, METH_VARARGS, SIP_MLDOC_CAST(doc_QTableWidgetItem_write)}
};

static sipEnumMemberDef enummembers_QTableWidgetItem[] = {
    {sipName_Type, static_cast<int>(QTableWidgetItem::Type), 424},
    {sipName_UserType, static_cast<int>(QTableWidgetItem::UserType), 424},
};

PyDoc_STRVAR(doc_QTableWidgetItem, "\1QTableWidgetItem(int type=QTableWidgetItem.Type)\n"
    "QTableWidgetItem(str, int type=QTableWidgetItem.Type)\n"
    "QTableWidgetItem(QIcon, str, int type=QTableWidgetItem.Type)\n"
    "QTableWidgetItem(QTableWidgetItem)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QTableWidgetItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTableWidgetItem,
        {0}
    },
    {
        sipNameNr_QTableWidgetItem,
        {0, 0, 1},
        35, methods_QTableWidgetItem,
        2, enummembers_QTableWidgetItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTableWidgetItem,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    -1,
    0,
    slots_QTableWidgetItem,
    init_type_QTableWidgetItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTableWidgetItem,
    0,
    0,
    0,
    release_QTableWidgetItem,
    cast_QTableWidgetItem,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
