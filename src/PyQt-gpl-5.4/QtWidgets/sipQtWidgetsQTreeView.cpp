/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:10 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qtreeview.sip"
#include <qtreeview.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 133 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 564 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 368 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 68 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 321 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qheaderview.sip"
#include <qheaderview.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 68 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 105 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 395 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractscrollarea.sip"
#include <qabstractscrollarea.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 452 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 171 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 174 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 177 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 180 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 183 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 186 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 189 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 195 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 198 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 201 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 204 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 207 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 210 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 213 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 216 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 635 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 219 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 275 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 408 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 225 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 382 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 228 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 231 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 237 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 240 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 243 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 246 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 249 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 252 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 255 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 258 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 261 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 264 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 267 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 270 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 273 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 276 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 279 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 282 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 285 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 288 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"


class sipQTreeView : public QTreeView
{
public:
    sipQTreeView(QWidget*);
    virtual ~sipQTreeView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /* Expose this protected enum. */
    enum sipDropIndicatorPosition {
        OnItem = QAbstractItemView::OnItem,
        AboveItem = QAbstractItemView::AboveItem,
        BelowItem = QAbstractItemView::BelowItem,
        OnViewport = QAbstractItemView::OnViewport
    };

    /* Expose this protected enum. */
    enum sipState {
        NoState = QAbstractItemView::NoState,
        DraggingState = QAbstractItemView::DraggingState,
        DragSelectingState = QAbstractItemView::DragSelectingState,
        EditingState = QAbstractItemView::EditingState,
        ExpandingState = QAbstractItemView::ExpandingState,
        CollapsingState = QAbstractItemView::CollapsingState,
        AnimatingState = QAbstractItemView::AnimatingState
    };

    /* Expose this protected enum. */
    enum sipCursorAction {
        MoveUp = QAbstractItemView::MoveUp,
        MoveDown = QAbstractItemView::MoveDown,
        MoveLeft = QAbstractItemView::MoveLeft,
        MoveRight = QAbstractItemView::MoveRight,
        MoveHome = QAbstractItemView::MoveHome,
        MoveEnd = QAbstractItemView::MoveEnd,
        MovePageUp = QAbstractItemView::MovePageUp,
        MovePageDown = QAbstractItemView::MovePageDown,
        MoveNext = QAbstractItemView::MoveNext,
        MovePrevious = QAbstractItemView::MovePrevious
    };

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_enterEvent(bool,QEvent*);
    void sipProtectVirt_leaveEvent(bool,QEvent*);
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_closeEvent(bool,QCloseEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);
    void sipProtectVirt_actionEvent(bool,QActionEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const QByteArray&,void*,long*);
    QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool,QPainter*) const;
    void sipProtectVirt_changeEvent(bool,QEvent*);
    void sipProtect_drawFrame(QPainter*);
    void sipProtect_setViewportMargins(int,int,int,int);
    void sipProtect_setViewportMargins(const QMargins&);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent*);
    bool sipProtectVirt_eventFilter(bool,QObject*,QEvent*);
    bool sipProtectVirt_edit(bool,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);
    void sipProtectVirt_updateEditorData(bool);
    void sipProtectVirt_updateEditorGeometries(bool);
    void sipProtectVirt_verticalScrollbarAction(bool,int);
    void sipProtectVirt_verticalScrollbarValueChanged(bool,int);
    void sipProtectVirt_horizontalScrollbarValueChanged(bool,int);
    void sipProtectVirt_closeEditor(bool,QWidget*,QAbstractItemDelegate::EndEditHint);
    void sipProtectVirt_commitData(bool,QWidget*);
    void sipProtectVirt_editorDestroyed(bool,QObject*);
    QItemSelectionModel::SelectionFlags sipProtectVirt_selectionCommand(bool,const QModelIndex&,const QEvent*) const;
    void sipProtectVirt_startDrag(bool,Qt::DropActions);
    QStyleOptionViewItem sipProtectVirt_viewOptions(bool) const;
    int sipProtect_state() const;
    void sipProtect_setState(int);
    void sipProtect_scheduleDelayedItemsLayout();
    void sipProtect_executeDelayedItemsLayout();
    void sipProtect_scrollDirtyRegion(int,int);
    void sipProtect_setDirtyRegion(const QRegion&);
    QPoint sipProtect_dirtyRegionOffset() const;
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool,QDropEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    int sipProtect_dropIndicatorPosition() const;
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    void sipProtect_columnResized(int,int,int);
    void sipProtect_columnCountChanged(int,int);
    void sipProtect_columnMoved();
    void sipProtect_reexpand();
    void sipProtect_rowsRemoved(const QModelIndex&,int,int);
    void sipProtectVirt_scrollContentsBy(bool,int,int);
    void sipProtectVirt_rowsInserted(bool,const QModelIndex&,int,int);
    void sipProtectVirt_rowsAboutToBeRemoved(bool,const QModelIndex&,int,int);
    QModelIndex sipProtectVirt_moveCursor(bool,int,Qt::KeyboardModifiers);
    int sipProtectVirt_horizontalOffset(bool) const;
    int sipProtectVirt_verticalOffset(bool) const;
    void sipProtectVirt_setSelection(bool,const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion sipProtectVirt_visualRegionForSelection(bool,const QItemSelection&) const;
    QModelIndexList sipProtectVirt_selectedIndexes(bool) const;
    void sipProtectVirt_paintEvent(bool,QPaintEvent*);
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_drawRow(bool,QPainter*,const QStyleOptionViewItem&,const QModelIndex&) const;
    void sipProtectVirt_drawBranches(bool,QPainter*,const QRect&,const QModelIndex&) const;
    void sipProtect_drawTree(QPainter*,const QRegion&) const;
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_updateGeometries(bool);
    int sipProtectVirt_sizeHintForColumn(bool,int) const;
    int sipProtect_indexRowSizeHint(const QModelIndex&) const;
    void sipProtectVirt_horizontalScrollbarAction(bool,int);
    bool sipProtectVirt_isIndexHidden(bool,const QModelIndex&) const;
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent*);
    bool sipProtectVirt_viewportEvent(bool,QEvent*);
    int sipProtect_rowHeight(const QModelIndex&) const;
    void sipProtectVirt_selectionChanged(bool,const QItemSelection&,const QItemSelection&);
    void sipProtectVirt_currentChanged(bool,const QModelIndex&,const QModelIndex&);
    QSize sipProtectVirt_viewportSizeHint(bool) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void keyReleaseEvent(QKeyEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void changeEvent(QEvent*);
    void setupViewport(QWidget*);
    bool eventFilter(QObject*,QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void wheelEvent(QWheelEvent*);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    void inputMethodEvent(QInputMethodEvent*);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void resizeEvent(QResizeEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    bool event(QEvent*);
    QStyleOptionViewItem viewOptions() const;
    void startDrag(Qt::DropActions);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent*) const;
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);
    void editorDestroyed(QObject*);
    void commitData(QWidget*);
    void closeEditor(QWidget*,QAbstractItemDelegate::EndEditHint);
    void horizontalScrollbarValueChanged(int);
    void verticalScrollbarValueChanged(int);
    void verticalScrollbarAction(int);
    void updateEditorGeometries();
    void updateEditorData();
    int sizeHintForRow(int) const;
    QSize viewportSizeHint() const;
    void currentChanged(const QModelIndex&,const QModelIndex&);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    bool viewportEvent(QEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    bool isIndexHidden(const QModelIndex&) const;
    void horizontalScrollbarAction(int);
    int sizeHintForColumn(int) const;
    void updateGeometries();
    void keyPressEvent(QKeyEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void drawBranches(QPainter*,const QRect&,const QModelIndex&) const;
    void drawRow(QPainter*,const QStyleOptionViewItem&,const QModelIndex&) const;
    void mouseReleaseEvent(QMouseEvent*);
    void timerEvent(QTimerEvent*);
    void paintEvent(QPaintEvent*);
    QModelIndexList selectedIndexes() const;
    QRegion visualRegionForSelection(const QItemSelection&) const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    int verticalOffset() const;
    int horizontalOffset() const;
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void rowsInserted(const QModelIndex&,int,int);
    void scrollContentsBy(int,int);
    void selectAll();
    void dataChanged(const QModelIndex&,const QModelIndex&,const QVector<int>&);
    void reset();
    QModelIndex indexAt(const QPoint&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QRect visualRect(const QModelIndex&) const;
    void keyboardSearch(const QString&);
    void setSelectionModel(QItemSelectionModel*);
    void setRootIndex(const QModelIndex&);
    void setModel(QAbstractItemModel*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTreeView(const sipQTreeView &);
    sipQTreeView &operator = (const sipQTreeView &);

    char sipPyMethods[89];
};

sipQTreeView::sipQTreeView(QWidget*a0): QTreeView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeView::~sipQTreeView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTreeView::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QTreeView);
}

int sipQTreeView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTreeView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QTreeView,_c,_id,_a);

    return _id;
}

void *sipQTreeView::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QTreeView, _clname, &sipCpp) ? sipCpp : QTreeView::qt_metacast(_clname));
}

void sipQTreeView::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QTreeView::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QTreeView::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QTreeView::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QTreeView::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QTreeView::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQTreeView::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QTreeView::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQTreeView::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QTreeView::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQTreeView::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QTreeView::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTreeView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QTreeView::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QTreeView::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QTreeView::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QTreeView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QTreeView::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QTreeView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QTreeView::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QTreeView::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QTreeView::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QTreeView::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQTreeView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QTreeView::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTreeView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QTreeView::heightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QTreeView::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQTreeView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QTreeView::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTreeView::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QTreeView::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::setupViewport(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_setupViewport);

    if (!sipMeth)
    {
        QTreeView::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTreeView::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QTreeView::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QTreeView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QTreeView::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQTreeView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QTreeView::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQTreeView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QTreeView::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTreeView::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QTreeView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTreeView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QTreeView::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQTreeView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QTreeView::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QTreeView::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QTreeView::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QTreeView::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QTreeView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QTreeView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QTreeView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTreeView::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QTreeView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QStyleOptionViewItem sipQTreeView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_viewOptions);

    if (!sipMeth)
        return QTreeView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtWidgets_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_46(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTreeView::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_startDrag);

    if (!sipMeth)
    {
        QTreeView::startDrag(a0);
        return;
    }

    extern void sipVH_QtWidgets_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::DropActions);

    sipVH_QtWidgets_91(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QItemSelectionModel::SelectionFlags sipQTreeView::selectionCommand(const QModelIndex& a0,const QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_selectionCommand);

    if (!sipMeth)
        return QTreeView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtWidgets_144(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QEvent*);

    return sipVH_QtWidgets_144(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQTreeView::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_edit);

    if (!sipMeth)
        return QTreeView::edit(a0,a1,a2);

    extern bool sipVH_QtWidgets_145(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);

    return sipVH_QtWidgets_145(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::editorDestroyed(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_editorDestroyed);

    if (!sipMeth)
    {
        QTreeView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtWidgets_146(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtWidgets_146(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::commitData(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
        QTreeView::commitData(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::closeEditor(QWidget*a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_closeEditor);

    if (!sipMeth)
    {
        QTreeView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_147(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,QAbstractItemDelegate::EndEditHint);

    sipVH_QtWidgets_147(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!sipMeth)
    {
        QTreeView::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!sipMeth)
    {
        QTreeView::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!sipMeth)
    {
        QTreeView::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!sipMeth)
    {
        QTreeView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTreeView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_updateEditorData);

    if (!sipMeth)
    {
        QTreeView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTreeView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!sipMeth)
        return QTreeView::sizeHintForRow(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQTreeView::viewportSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,NULL,sipName_viewportSizeHint);

    if (!sipMeth)
        return QTreeView::viewportSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTreeView::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_currentChanged);

    if (!sipMeth)
    {
        QTreeView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&);

    sipVH_QtWidgets_23(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_selectionChanged);

    if (!sipMeth)
    {
        QTreeView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&,const QItemSelection&);

    sipVH_QtWidgets_24(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQTreeView::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QTreeView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QTreeView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQTreeView::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[57]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!sipMeth)
        return QTreeView::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_31)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_31)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[31]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!sipMeth)
    {
        QTreeView::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQTreeView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[59]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!sipMeth)
        return QTreeView::sizeHintForColumn(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_updateGeometries);

    if (!sipMeth)
    {
        QTreeView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTreeView::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QTreeView::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QTreeView::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QTreeView::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QTreeView::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::drawBranches(QPainter*a0,const QRect& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[65]),sipPySelf,NULL,sipName_drawBranches);

    if (!sipMeth)
    {
        QTreeView::drawBranches(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRect&,const QModelIndex&);

    sipVH_QtWidgets_25(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::drawRow(QPainter*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[66]),sipPySelf,NULL,sipName_drawRow);

    if (!sipMeth)
    {
        QTreeView::drawRow(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtWidgets_26(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QTreeView::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QTreeView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QTreeView::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QModelIndexList sipQTreeView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[70]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!sipMeth)
        return QTreeView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_27(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QRegion sipQTreeView::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[71]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!sipMeth)
        return QTreeView::visualRegionForSelection(a0);

    extern QRegion sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtWidgets_28(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_setSelection);

    if (!sipMeth)
    {
        QTreeView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtWidgets_29(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

int sipQTreeView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[73]),sipPySelf,NULL,sipName_verticalOffset);

    if (!sipMeth)
        return QTreeView::verticalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQTreeView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[74]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!sipMeth)
        return QTreeView::horizontalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QModelIndex sipQTreeView::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_moveCursor);

    if (!sipMeth)
        return QTreeView::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::KeyboardModifiers);

    return sipVH_QtWidgets_30(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, (int)a0, a1);
}

void sipQTreeView::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!sipMeth)
    {
        QTreeView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_31(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_rowsInserted);

    if (!sipMeth)
    {
        QTreeView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_31(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QTreeView::scrollContentsBy(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    ((sipVH_QtGui_17)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQTreeView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
        QTreeView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQTreeView::dataChanged(const QModelIndex& a0,const QModelIndex& a1,const QVector<int>& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_dataChanged);

    if (!sipMeth)
    {
        QTreeView::dataChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&,const QVector<int>&);

    sipVH_QtWidgets_32(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQTreeView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[81],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
        QTreeView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QModelIndex sipQTreeView::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[82]),sipPySelf,NULL,sipName_indexAt);

    if (!sipMeth)
        return QTreeView::indexAt(a0);

    extern QModelIndex sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPoint&);

    return sipVH_QtWidgets_33(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[83],sipPySelf,NULL,sipName_scrollTo);

    if (!sipMeth)
    {
        QTreeView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtWidgets_34(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QRect sipQTreeView::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[84]),sipPySelf,NULL,sipName_visualRect);

    if (!sipMeth)
        return QTreeView::visualRect(a0);

    extern QRect sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtWidgets_35(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_keyboardSearch);

    if (!sipMeth)
    {
        QTreeView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtGui_22)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[22]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::setSelectionModel(QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_setSelectionModel);

    if (!sipMeth)
    {
        QTreeView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QItemSelectionModel*);

    sipVH_QtWidgets_16(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[87],sipPySelf,NULL,sipName_setRootIndex);

    if (!sipMeth)
    {
        QTreeView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_32)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[32]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQTreeView::setModel(QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[88],sipPySelf,NULL,sipName_setModel);

    if (!sipMeth)
    {
        QTreeView::setModel(a0);
        return;
    }

    typedef void (*sipVH_QtCore_40)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemModel*);

    ((sipVH_QtCore_40)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[40]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQTreeView::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQTreeView::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQTreeView::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQTreeView::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQTreeView::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQTreeView::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQTreeView::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQTreeView::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQTreeView::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQTreeView::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQTreeView::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQTreeView::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQTreeView::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent*a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQTreeView::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQTreeView::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent*a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQTreeView::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QWidget::showEvent(a0) : showEvent(a0));
}

void sipQTreeView::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQTreeView::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQTreeView::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQTreeView::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQTreeView::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQTreeView::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQTreeView::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

bool sipQTreeView::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ? QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

QPainter* sipQTreeView::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QWidget::sharedPainter() : sharedPainter());
}

void sipQTreeView::sipProtectVirt_initPainter(bool sipSelfWasArg,QPainter*a0) const
{
    (sipSelfWasArg ? QWidget::initPainter(a0) : initPainter(a0));
}

void sipQTreeView::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QFrame::changeEvent(a0) : changeEvent(a0));
}

void sipQTreeView::sipProtect_drawFrame(QPainter*a0)
{
    QFrame::drawFrame(a0);
}

void sipQTreeView::sipProtect_setViewportMargins(int a0,int a1,int a2,int a3)
{
    QAbstractScrollArea::setViewportMargins(a0,a1,a2,a3);
}

void sipQTreeView::sipProtect_setViewportMargins(const QMargins& a0)
{
    QAbstractScrollArea::setViewportMargins(a0);
}

void sipQTreeView::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::wheelEvent(a0) : wheelEvent(a0));
}

void sipQTreeView::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent*a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::contextMenuEvent(a0) : contextMenuEvent(a0));
}

bool sipQTreeView::sipProtectVirt_eventFilter(bool sipSelfWasArg,QObject*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QAbstractScrollArea::eventFilter(a0,a1) : eventFilter(a0,a1));
}

bool sipQTreeView::sipProtectVirt_edit(bool sipSelfWasArg,const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent*a2)
{
    return (sipSelfWasArg ? QAbstractItemView::edit(a0,a1,a2) : edit(a0,a1,a2));
}

void sipQTreeView::sipProtectVirt_updateEditorData(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorData() : updateEditorData());
}

void sipQTreeView::sipProtectVirt_updateEditorGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorGeometries() : updateEditorGeometries());
}

void sipQTreeView::sipProtectVirt_verticalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::verticalScrollbarAction(a0) : verticalScrollbarAction(a0));
}

void sipQTreeView::sipProtectVirt_verticalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::verticalScrollbarValueChanged(a0) : verticalScrollbarValueChanged(a0));
}

void sipQTreeView::sipProtectVirt_horizontalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::horizontalScrollbarValueChanged(a0) : horizontalScrollbarValueChanged(a0));
}

void sipQTreeView::sipProtectVirt_closeEditor(bool sipSelfWasArg,QWidget*a0,QAbstractItemDelegate::EndEditHint a1)
{
    (sipSelfWasArg ? QAbstractItemView::closeEditor(a0,a1) : closeEditor(a0,a1));
}

void sipQTreeView::sipProtectVirt_commitData(bool sipSelfWasArg,QWidget*a0)
{
    (sipSelfWasArg ? QAbstractItemView::commitData(a0) : commitData(a0));
}

void sipQTreeView::sipProtectVirt_editorDestroyed(bool sipSelfWasArg,QObject*a0)
{
    (sipSelfWasArg ? QAbstractItemView::editorDestroyed(a0) : editorDestroyed(a0));
}

QItemSelectionModel::SelectionFlags sipQTreeView::sipProtectVirt_selectionCommand(bool sipSelfWasArg,const QModelIndex& a0,const QEvent*a1) const
{
    return (sipSelfWasArg ? QAbstractItemView::selectionCommand(a0,a1) : selectionCommand(a0,a1));
}

void sipQTreeView::sipProtectVirt_startDrag(bool sipSelfWasArg,Qt::DropActions a0)
{
    (sipSelfWasArg ? QAbstractItemView::startDrag(a0) : startDrag(a0));
}

QStyleOptionViewItem sipQTreeView::sipProtectVirt_viewOptions(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QAbstractItemView::viewOptions() : viewOptions());
}

int sipQTreeView::sipProtect_state() const
{
    return (int)QAbstractItemView::state();
}

void sipQTreeView::sipProtect_setState(int a0)
{
    QAbstractItemView::setState((QAbstractItemView::State)a0);
}

void sipQTreeView::sipProtect_scheduleDelayedItemsLayout()
{
    QAbstractItemView::scheduleDelayedItemsLayout();
}

void sipQTreeView::sipProtect_executeDelayedItemsLayout()
{
    QAbstractItemView::executeDelayedItemsLayout();
}

void sipQTreeView::sipProtect_scrollDirtyRegion(int a0,int a1)
{
    QAbstractItemView::scrollDirtyRegion(a0,a1);
}

void sipQTreeView::sipProtect_setDirtyRegion(const QRegion& a0)
{
    QAbstractItemView::setDirtyRegion(a0);
}

QPoint sipQTreeView::sipProtect_dirtyRegionOffset() const
{
    return QAbstractItemView::dirtyRegionOffset();
}

bool sipQTreeView::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QAbstractItemView::event(a0) : event(a0));
}

void sipQTreeView::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQTreeView::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQTreeView::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::dropEvent(a0) : dropEvent(a0));
}

void sipQTreeView::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusInEvent(a0) : focusInEvent(a0));
}

void sipQTreeView::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQTreeView::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::resizeEvent(a0) : resizeEvent(a0));
}

int sipQTreeView::sipProtect_dropIndicatorPosition() const
{
    return (int)QAbstractItemView::dropIndicatorPosition();
}

bool sipQTreeView::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QAbstractItemView::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQTreeView::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQTreeView::sipProtect_columnResized(int a0,int a1,int a2)
{
    QTreeView::columnResized(a0,a1,a2);
}

void sipQTreeView::sipProtect_columnCountChanged(int a0,int a1)
{
    QTreeView::columnCountChanged(a0,a1);
}

void sipQTreeView::sipProtect_columnMoved()
{
    QTreeView::columnMoved();
}

void sipQTreeView::sipProtect_reexpand()
{
    QTreeView::reexpand();
}

void sipQTreeView::sipProtect_rowsRemoved(const QModelIndex& a0,int a1,int a2)
{
    QTreeView::rowsRemoved(a0,a1,a2);
}

void sipQTreeView::sipProtectVirt_scrollContentsBy(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ? QTreeView::scrollContentsBy(a0,a1) : scrollContentsBy(a0,a1));
}

void sipQTreeView::sipProtectVirt_rowsInserted(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QTreeView::rowsInserted(a0,a1,a2) : rowsInserted(a0,a1,a2));
}

void sipQTreeView::sipProtectVirt_rowsAboutToBeRemoved(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QTreeView::rowsAboutToBeRemoved(a0,a1,a2) : rowsAboutToBeRemoved(a0,a1,a2));
}

QModelIndex sipQTreeView::sipProtectVirt_moveCursor(bool sipSelfWasArg,int a0,Qt::KeyboardModifiers a1)
{
    return (sipSelfWasArg ? QTreeView::moveCursor((QAbstractItemView::CursorAction)a0,a1) : moveCursor((QAbstractItemView::CursorAction)a0,a1));
}

int sipQTreeView::sipProtectVirt_horizontalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTreeView::horizontalOffset() : horizontalOffset());
}

int sipQTreeView::sipProtectVirt_verticalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTreeView::verticalOffset() : verticalOffset());
}

void sipQTreeView::sipProtectVirt_setSelection(bool sipSelfWasArg,const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    (sipSelfWasArg ? QTreeView::setSelection(a0,a1) : setSelection(a0,a1));
}

QRegion sipQTreeView::sipProtectVirt_visualRegionForSelection(bool sipSelfWasArg,const QItemSelection& a0) const
{
    return (sipSelfWasArg ? QTreeView::visualRegionForSelection(a0) : visualRegionForSelection(a0));
}

QModelIndexList sipQTreeView::sipProtectVirt_selectedIndexes(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTreeView::selectedIndexes() : selectedIndexes());
}

void sipQTreeView::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent*a0)
{
    (sipSelfWasArg ? QTreeView::paintEvent(a0) : paintEvent(a0));
}

void sipQTreeView::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QTreeView::timerEvent(a0) : timerEvent(a0));
}

void sipQTreeView::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QTreeView::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQTreeView::sipProtectVirt_drawRow(bool sipSelfWasArg,QPainter*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    (sipSelfWasArg ? QTreeView::drawRow(a0,a1,a2) : drawRow(a0,a1,a2));
}

void sipQTreeView::sipProtectVirt_drawBranches(bool sipSelfWasArg,QPainter*a0,const QRect& a1,const QModelIndex& a2) const
{
    (sipSelfWasArg ? QTreeView::drawBranches(a0,a1,a2) : drawBranches(a0,a1,a2));
}

void sipQTreeView::sipProtect_drawTree(QPainter*a0,const QRegion& a1) const
{
    QTreeView::drawTree(a0,a1);
}

void sipQTreeView::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QTreeView::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQTreeView::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QTreeView::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQTreeView::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QTreeView::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQTreeView::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QTreeView::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQTreeView::sipProtectVirt_updateGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QTreeView::updateGeometries() : updateGeometries());
}

int sipQTreeView::sipProtectVirt_sizeHintForColumn(bool sipSelfWasArg,int a0) const
{
    return (sipSelfWasArg ? QTreeView::sizeHintForColumn(a0) : sizeHintForColumn(a0));
}

int sipQTreeView::sipProtect_indexRowSizeHint(const QModelIndex& a0) const
{
    return QTreeView::indexRowSizeHint(a0);
}

void sipQTreeView::sipProtectVirt_horizontalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QTreeView::horizontalScrollbarAction(a0) : horizontalScrollbarAction(a0));
}

bool sipQTreeView::sipProtectVirt_isIndexHidden(bool sipSelfWasArg,const QModelIndex& a0) const
{
    return (sipSelfWasArg ? QTreeView::isIndexHidden(a0) : isIndexHidden(a0));
}

void sipQTreeView::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QTreeView::dragMoveEvent(a0) : dragMoveEvent(a0));
}

bool sipQTreeView::sipProtectVirt_viewportEvent(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QTreeView::viewportEvent(a0) : viewportEvent(a0));
}

int sipQTreeView::sipProtect_rowHeight(const QModelIndex& a0) const
{
    return QTreeView::rowHeight(a0);
}

void sipQTreeView::sipProtectVirt_selectionChanged(bool sipSelfWasArg,const QItemSelection& a0,const QItemSelection& a1)
{
    (sipSelfWasArg ? QTreeView::selectionChanged(a0,a1) : selectionChanged(a0,a1));
}

void sipQTreeView::sipProtectVirt_currentChanged(bool sipSelfWasArg,const QModelIndex& a0,const QModelIndex& a1)
{
    (sipSelfWasArg ? QTreeView::currentChanged(a0,a1) : currentChanged(a0,a1));
}

QSize sipQTreeView::sipProtectVirt_viewportSizeHint(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTreeView::viewportSizeHint() : viewportSizeHint());
}


PyDoc_STRVAR(doc_QTreeView_sender, "QTreeView.sender() -> QObject");

extern "C" {static PyObject *meth_QTreeView_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 2617 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_sender, doc_QTreeView_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_receivers, "QTreeView.receivers(signal) -> int");

extern "C" {static PyObject *meth_QTreeView_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 2676 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQTreeView.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_receivers, doc_QTreeView_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_childEvent, "QTreeView.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QTreeView_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_childEvent, doc_QTreeView_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_customEvent, "QTreeView.customEvent(QEvent)");

extern "C" {static PyObject *meth_QTreeView_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_customEvent, doc_QTreeView_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_connectNotify, "QTreeView.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTreeView_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_connectNotify, doc_QTreeView_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_disconnectNotify, "QTreeView.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QTreeView_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_disconnectNotify, doc_QTreeView_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_senderSignalIndex, "QTreeView.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QTreeView_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_senderSignalIndex, doc_QTreeView_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isSignalConnected, "QTreeView.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QTreeView_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isSignalConnected, doc_QTreeView_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_keyReleaseEvent, "QTreeView.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QTreeView_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_keyReleaseEvent, doc_QTreeView_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_enterEvent, "QTreeView.enterEvent(QEvent)");

extern "C" {static PyObject *meth_QTreeView_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_enterEvent, doc_QTreeView_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_leaveEvent, "QTreeView.leaveEvent(QEvent)");

extern "C" {static PyObject *meth_QTreeView_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_leaveEvent, doc_QTreeView_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_moveEvent, "QTreeView.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QTreeView_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_moveEvent, doc_QTreeView_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_closeEvent, "QTreeView.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QTreeView_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_closeEvent, doc_QTreeView_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_tabletEvent, "QTreeView.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QTreeView_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_tabletEvent, doc_QTreeView_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_actionEvent, "QTreeView.actionEvent(QActionEvent)");

extern "C" {static PyObject *meth_QTreeView_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_actionEvent, doc_QTreeView_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_showEvent, "QTreeView.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QTreeView_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_showEvent, doc_QTreeView_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_hideEvent, "QTreeView.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QTreeView_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_hideEvent, doc_QTreeView_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_metric, "QTreeView.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QTreeView_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_metric, doc_QTreeView_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_updateMicroFocus, "QTreeView.updateMicroFocus()");

extern "C" {static PyObject *meth_QTreeView_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_updateMicroFocus, doc_QTreeView_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_create, "QTreeView.create(sip.voidptr window=0, bool initializeWindow=True, bool destroyOldWindow=True)");

extern "C" {static PyObject *meth_QTreeView_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0def = 0;
        WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQTreeView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QTreeView, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_create, doc_QTreeView_create);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_destroy, "QTreeView.destroy(bool destroyWindow=True, bool destroySubWindows=True)");

extern "C" {static PyObject *meth_QTreeView_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQTreeView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_destroy, doc_QTreeView_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_focusNextChild, "QTreeView.focusNextChild() -> bool");

extern "C" {static PyObject *meth_QTreeView_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_focusNextChild, doc_QTreeView_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_focusPreviousChild, "QTreeView.focusPreviousChild() -> bool");

extern "C" {static PyObject *meth_QTreeView_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_focusPreviousChild, doc_QTreeView_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_nativeEvent, "QTreeView.nativeEvent(QByteArray, sip.voidptr) -> (bool, int)");

extern "C" {static PyObject *meth_QTreeView_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_nativeEvent, doc_QTreeView_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_sharedPainter, "QTreeView.sharedPainter() -> QPainter");

extern "C" {static PyObject *meth_QTreeView_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_sharedPainter, doc_QTreeView_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_initPainter, "QTreeView.initPainter(QPainter)");

extern "C" {static PyObject *meth_QTreeView_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_initPainter, doc_QTreeView_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_changeEvent, "QTreeView.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QTreeView_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_changeEvent, doc_QTreeView_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_drawFrame, "QTreeView.drawFrame(QPainter)");

extern "C" {static PyObject *meth_QTreeView_drawFrame(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawFrame(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtect_drawFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_drawFrame, doc_QTreeView_drawFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setViewportMargins, "QTreeView.setViewportMargins(int, int, int, int)\n"
    "QTreeView.setViewportMargins(QMargins)");

extern "C" {static PyObject *meth_QTreeView_setViewportMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setViewportMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biiii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->sipProtect_setViewportMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QMargins* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMargins, &a0))
        {
            sipCpp->sipProtect_setViewportMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setViewportMargins, doc_QTreeView_setViewportMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_wheelEvent, "QTreeView.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QTreeView_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_wheelEvent, doc_QTreeView_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_contextMenuEvent, "QTreeView.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QTreeView_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_contextMenuEvent, doc_QTreeView_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_eventFilter, "QTreeView.eventFilter(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QTreeView_eventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_eventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_eventFilter, doc_QTreeView_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_edit, "QTreeView.edit(QModelIndex)\n"
    "QTreeView.edit(QModelIndex, QAbstractItemView.EditTrigger, QEvent) -> bool");

extern "C" {static PyObject *meth_QTreeView_edit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_edit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->edit(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QModelIndex* a0;
        QAbstractItemView::EditTrigger a1;
        QEvent* a2;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9EJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_EditTrigger, &a1, sipType_QEvent, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_edit(sipSelfWasArg,*a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_edit, doc_QTreeView_edit);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_updateEditorData, "QTreeView.updateEditorData()");

extern "C" {static PyObject *meth_QTreeView_updateEditorData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_updateEditorData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateEditorData(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_updateEditorData, doc_QTreeView_updateEditorData);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_updateEditorGeometries, "QTreeView.updateEditorGeometries()");

extern "C" {static PyObject *meth_QTreeView_updateEditorGeometries(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_updateEditorGeometries(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateEditorGeometries(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_updateEditorGeometries, doc_QTreeView_updateEditorGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_verticalScrollbarAction, "QTreeView.verticalScrollbarAction(int)");

extern "C" {static PyObject *meth_QTreeView_verticalScrollbarAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_verticalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_verticalScrollbarAction(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_verticalScrollbarAction, doc_QTreeView_verticalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_verticalScrollbarValueChanged, "QTreeView.verticalScrollbarValueChanged(int)");

extern "C" {static PyObject *meth_QTreeView_verticalScrollbarValueChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_verticalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_verticalScrollbarValueChanged(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_verticalScrollbarValueChanged, doc_QTreeView_verticalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_horizontalScrollbarValueChanged, "QTreeView.horizontalScrollbarValueChanged(int)");

extern "C" {static PyObject *meth_QTreeView_horizontalScrollbarValueChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_horizontalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_horizontalScrollbarValueChanged(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_horizontalScrollbarValueChanged, doc_QTreeView_horizontalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_closeEditor, "QTreeView.closeEditor(QWidget, QAbstractItemDelegate.EndEditHint)");

extern "C" {static PyObject *meth_QTreeView_closeEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_closeEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        QAbstractItemDelegate::EndEditHint a1;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8E", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QWidget, &a0, sipType_QAbstractItemDelegate_EndEditHint, &a1))
        {
            sipCpp->sipProtectVirt_closeEditor(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_closeEditor, doc_QTreeView_closeEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_commitData, "QTreeView.commitData(QWidget)");

extern "C" {static PyObject *meth_QTreeView_commitData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_commitData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->sipProtectVirt_commitData(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_commitData, doc_QTreeView_commitData);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_editorDestroyed, "QTreeView.editorDestroyed(QObject)");

extern "C" {static PyObject *meth_QTreeView_editorDestroyed(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_editorDestroyed(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QObject, &a0))
        {
            sipCpp->sipProtectVirt_editorDestroyed(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_editorDestroyed, doc_QTreeView_editorDestroyed);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_selectionCommand, "QTreeView.selectionCommand(QModelIndex, QEvent event=None) -> QItemSelectionModel.SelectionFlags");

extern "C" {static PyObject *meth_QTreeView_selectionCommand(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectionCommand(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QEvent* a1 = 0;
        const sipQTreeView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, sipType_QEvent, &a1))
        {
            QItemSelectionModel::SelectionFlags*sipRes;

            sipRes = new QItemSelectionModel::SelectionFlags(sipCpp->sipProtectVirt_selectionCommand(sipSelfWasArg,*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_selectionCommand, doc_QTreeView_selectionCommand);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_startDrag, "QTreeView.startDrag(Qt.DropActions)");

extern "C" {static PyObject *meth_QTreeView_startDrag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_startDrag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::DropActions* a0;
        int a0State = 0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QTreeView, &sipCpp, sipType_Qt_DropActions, &a0, &a0State))
        {
            sipCpp->sipProtectVirt_startDrag(sipSelfWasArg,*a0);
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_startDrag, doc_QTreeView_startDrag);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_viewOptions, "QTreeView.viewOptions() -> QStyleOptionViewItem");

extern "C" {static PyObject *meth_QTreeView_viewOptions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_viewOptions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            QStyleOptionViewItem*sipRes;

            sipRes = new QStyleOptionViewItem(sipCpp->sipProtectVirt_viewOptions(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_viewOptions, doc_QTreeView_viewOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_state, "QTreeView.state() -> QAbstractItemView.State");

extern "C" {static PyObject *meth_QTreeView_state(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_state(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_state();

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_state, doc_QTreeView_state);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setState, "QTreeView.setState(QAbstractItemView.State)");

extern "C" {static PyObject *meth_QTreeView_setState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QAbstractItemView_State, &a0))
        {
            sipCpp->sipProtect_setState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setState, doc_QTreeView_setState);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_scheduleDelayedItemsLayout, "QTreeView.scheduleDelayedItemsLayout()");

extern "C" {static PyObject *meth_QTreeView_scheduleDelayedItemsLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_scheduleDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->sipProtect_scheduleDelayedItemsLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_scheduleDelayedItemsLayout, doc_QTreeView_scheduleDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_executeDelayedItemsLayout, "QTreeView.executeDelayedItemsLayout()");

extern "C" {static PyObject *meth_QTreeView_executeDelayedItemsLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_executeDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->sipProtect_executeDelayedItemsLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_executeDelayedItemsLayout, doc_QTreeView_executeDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_scrollDirtyRegion, "QTreeView.scrollDirtyRegion(int, int)");

extern "C" {static PyObject *meth_QTreeView_scrollDirtyRegion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_scrollDirtyRegion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_scrollDirtyRegion(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_scrollDirtyRegion, doc_QTreeView_scrollDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setDirtyRegion, "QTreeView.setDirtyRegion(QRegion)");

extern "C" {static PyObject *meth_QTreeView_setDirtyRegion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setDirtyRegion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRegion* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->sipProtect_setDirtyRegion(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setDirtyRegion, doc_QTreeView_setDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_dirtyRegionOffset, "QTreeView.dirtyRegionOffset() -> QPoint");

extern "C" {static PyObject *meth_QTreeView_dirtyRegionOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dirtyRegionOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->sipProtect_dirtyRegionOffset());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_dirtyRegionOffset, doc_QTreeView_dirtyRegionOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_event, "QTreeView.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QTreeView_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_event, doc_QTreeView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_dragEnterEvent, "QTreeView.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QTreeView_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_dragEnterEvent, doc_QTreeView_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_dragLeaveEvent, "QTreeView.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QTreeView_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_dragLeaveEvent, doc_QTreeView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_dropEvent, "QTreeView.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QTreeView_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_dropEvent, doc_QTreeView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_focusInEvent, "QTreeView.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QTreeView_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_focusInEvent, doc_QTreeView_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_focusOutEvent, "QTreeView.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QTreeView_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_focusOutEvent, doc_QTreeView_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_resizeEvent, "QTreeView.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QTreeView_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_resizeEvent, doc_QTreeView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_dropIndicatorPosition, "QTreeView.dropIndicatorPosition() -> QAbstractItemView.DropIndicatorPosition");

extern "C" {static PyObject *meth_QTreeView_dropIndicatorPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dropIndicatorPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_dropIndicatorPosition();

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_DropIndicatorPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_dropIndicatorPosition, doc_QTreeView_dropIndicatorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_focusNextPrevChild, "QTreeView.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QTreeView_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_focusNextPrevChild, doc_QTreeView_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_inputMethodEvent, "QTreeView.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QTreeView_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_inputMethodEvent, doc_QTreeView_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setModel, "QTreeView.setModel(QAbstractItemModel)");

extern "C" {static PyObject *meth_QTreeView_setModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel* a0;
        PyObject *a0Keep;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTreeView, &sipCpp, &a0Keep, sipType_QAbstractItemModel, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTreeView::setModel(a0) : sipCpp->setModel(a0));

            sipKeepReference(sipSelf, -52, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setModel, doc_QTreeView_setModel);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setRootIndex, "QTreeView.setRootIndex(QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTreeView::setRootIndex(*a0) : sipCpp->setRootIndex(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setRootIndex, doc_QTreeView_setRootIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setSelectionModel, "QTreeView.setSelectionModel(QItemSelectionModel)");

extern "C" {static PyObject *meth_QTreeView_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel* a0;
        PyObject *a0Keep;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QTreeView, &sipCpp, &a0Keep, sipType_QItemSelectionModel, &a0))
        {
            (sipSelfWasArg ? sipCpp->QTreeView::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));

            sipKeepReference(sipSelf, -53, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setSelectionModel, doc_QTreeView_setSelectionModel);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_header, "QTreeView.header() -> QHeaderView");

extern "C" {static PyObject *meth_QTreeView_header(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_header(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            QHeaderView*sipRes;

            sipRes = sipCpp->header();

            return sipConvertFromType(sipRes,sipType_QHeaderView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_header, doc_QTreeView_header);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setHeader, "QTreeView.setHeader(QHeaderView)");

extern "C" {static PyObject *meth_QTreeView_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QHeaderView* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QHeaderView, &a0))
        {
            sipCpp->setHeader(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setHeader, doc_QTreeView_setHeader);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_indentation, "QTreeView.indentation() -> int");

extern "C" {static PyObject *meth_QTreeView_indentation(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->indentation();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indentation, doc_QTreeView_indentation);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setIndentation, "QTreeView.setIndentation(int)");

extern "C" {static PyObject *meth_QTreeView_setIndentation(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setIndentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setIndentation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setIndentation, doc_QTreeView_setIndentation);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_rootIsDecorated, "QTreeView.rootIsDecorated() -> bool");

extern "C" {static PyObject *meth_QTreeView_rootIsDecorated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rootIsDecorated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->rootIsDecorated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rootIsDecorated, doc_QTreeView_rootIsDecorated);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setRootIsDecorated, "QTreeView.setRootIsDecorated(bool)");

extern "C" {static PyObject *meth_QTreeView_setRootIsDecorated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setRootIsDecorated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setRootIsDecorated(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setRootIsDecorated, doc_QTreeView_setRootIsDecorated);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_uniformRowHeights, "QTreeView.uniformRowHeights() -> bool");

extern "C" {static PyObject *meth_QTreeView_uniformRowHeights(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_uniformRowHeights(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->uniformRowHeights();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_uniformRowHeights, doc_QTreeView_uniformRowHeights);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setUniformRowHeights, "QTreeView.setUniformRowHeights(bool)");

extern "C" {static PyObject *meth_QTreeView_setUniformRowHeights(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setUniformRowHeights(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setUniformRowHeights(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setUniformRowHeights, doc_QTreeView_setUniformRowHeights);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_itemsExpandable, "QTreeView.itemsExpandable() -> bool");

extern "C" {static PyObject *meth_QTreeView_itemsExpandable(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_itemsExpandable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->itemsExpandable();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_itemsExpandable, doc_QTreeView_itemsExpandable);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setItemsExpandable, "QTreeView.setItemsExpandable(bool)");

extern "C" {static PyObject *meth_QTreeView_setItemsExpandable(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setItemsExpandable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setItemsExpandable(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setItemsExpandable, doc_QTreeView_setItemsExpandable);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_columnViewportPosition, "QTreeView.columnViewportPosition(int) -> int");

extern "C" {static PyObject *meth_QTreeView_columnViewportPosition(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnViewportPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->columnViewportPosition(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnViewportPosition, doc_QTreeView_columnViewportPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_columnWidth, "QTreeView.columnWidth(int) -> int");

extern "C" {static PyObject *meth_QTreeView_columnWidth(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->columnWidth(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnWidth, doc_QTreeView_columnWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_columnAt, "QTreeView.columnAt(int) -> int");

extern "C" {static PyObject *meth_QTreeView_columnAt(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->columnAt(a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnAt, doc_QTreeView_columnAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isColumnHidden, "QTreeView.isColumnHidden(int) -> bool");

extern "C" {static PyObject *meth_QTreeView_isColumnHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isColumnHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isColumnHidden(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isColumnHidden, doc_QTreeView_isColumnHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setColumnHidden, "QTreeView.setColumnHidden(int, bool)");

extern "C" {static PyObject *meth_QTreeView_setColumnHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setColumnHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            sipCpp->setColumnHidden(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setColumnHidden, doc_QTreeView_setColumnHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isRowHidden, "QTreeView.isRowHidden(int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTreeView_isRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QModelIndex* a1;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isRowHidden(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isRowHidden, doc_QTreeView_isRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setRowHidden, "QTreeView.setRowHidden(int, QModelIndex, bool)");

extern "C" {static PyObject *meth_QTreeView_setRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QModelIndex* a1;
        bool a2;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9b", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_QModelIndex, &a1, &a2))
        {
            sipCpp->setRowHidden(a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setRowHidden, doc_QTreeView_setRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isExpanded, "QTreeView.isExpanded(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTreeView_isExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isExpanded(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isExpanded, doc_QTreeView_isExpanded);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setExpanded, "QTreeView.setExpanded(QModelIndex, bool)");

extern "C" {static PyObject *meth_QTreeView_setExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        bool a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9b", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
            sipCpp->setExpanded(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setExpanded, doc_QTreeView_setExpanded);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_keyboardSearch, "QTreeView.keyboardSearch(str)");

extern "C" {static PyObject *meth_QTreeView_keyboardSearch(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_keyboardSearch(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QString,&a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp->QTreeView::keyboardSearch(*a0) : sipCpp->keyboardSearch(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_keyboardSearch, doc_QTreeView_keyboardSearch);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_visualRect, "QTreeView.visualRect(QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QTreeView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QRect*sipRes;

            sipRes = new QRect((sipSelfWasArg ? sipCpp->QTreeView::visualRect(*a0) : sipCpp->visualRect(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_visualRect, doc_QTreeView_visualRect);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_scrollTo, "QTreeView.scrollTo(QModelIndex, QAbstractItemView.ScrollHint hint=QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QTreeView_scrollTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_scrollTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QTreeView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            (sipSelfWasArg ? sipCpp->QTreeView::scrollTo(*a0,a1) : sipCpp->scrollTo(*a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_scrollTo, doc_QTreeView_scrollTo);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_indexAt, "QTreeView.indexAt(QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPoint* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPoint, &a0))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QTreeView::indexAt(*a0) : sipCpp->indexAt(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indexAt, doc_QTreeView_indexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_indexAbove, "QTreeView.indexAbove(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeView_indexAbove(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexAbove(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->indexAbove(*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indexAbove, doc_QTreeView_indexAbove);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_indexBelow, "QTreeView.indexBelow(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeView_indexBelow(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexBelow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->indexBelow(*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indexBelow, doc_QTreeView_indexBelow);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_reset, "QTreeView.reset()");

extern "C" {static PyObject *meth_QTreeView_reset(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QTreeView::reset() : sipCpp->reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_reset, doc_QTreeView_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_dataChanged, "QTreeView.dataChanged(QModelIndex, QModelIndex, list-of-int roles=[])");

extern "C" {static PyObject *meth_QTreeView_dataChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dataChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        const QVector<int>& a2def = QVector<int>();
        const QVector<int>* a2 = &a2def;
        int a2State = 0;
        QTreeView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_roles,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|J1", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1, sipType_QVector_1800,&a2, &a2State))
        {
            (sipSelfWasArg ? sipCpp->QTreeView::dataChanged(*a0,*a1,*a2) : sipCpp->dataChanged(*a0,*a1,*a2));
            sipReleaseType(const_cast<QVector<int> *>(a2),sipType_QVector_1800,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_dataChanged, doc_QTreeView_dataChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_hideColumn, "QTreeView.hideColumn(int)");

extern "C" {static PyObject *meth_QTreeView_hideColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_hideColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->hideColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_hideColumn, doc_QTreeView_hideColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_showColumn, "QTreeView.showColumn(int)");

extern "C" {static PyObject *meth_QTreeView_showColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_showColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->showColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_showColumn, doc_QTreeView_showColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_expand, "QTreeView.expand(QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_expand(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->expand(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_expand, doc_QTreeView_expand);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_expandAll, "QTreeView.expandAll()");

extern "C" {static PyObject *meth_QTreeView_expandAll(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expandAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->expandAll();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_expandAll, doc_QTreeView_expandAll);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_collapse, "QTreeView.collapse(QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_collapse(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_collapse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->collapse(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_collapse, doc_QTreeView_collapse);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_collapseAll, "QTreeView.collapseAll()");

extern "C" {static PyObject *meth_QTreeView_collapseAll(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_collapseAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->collapseAll();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_collapseAll, doc_QTreeView_collapseAll);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_resizeColumnToContents, "QTreeView.resizeColumnToContents(int)");

extern "C" {static PyObject *meth_QTreeView_resizeColumnToContents(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_resizeColumnToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->resizeColumnToContents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_resizeColumnToContents, doc_QTreeView_resizeColumnToContents);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_selectAll, "QTreeView.selectAll()");

extern "C" {static PyObject *meth_QTreeView_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QTreeView::selectAll() : sipCpp->selectAll());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_selectAll, doc_QTreeView_selectAll);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_columnResized, "QTreeView.columnResized(int, int, int)");

extern "C" {static PyObject *meth_QTreeView_columnResized(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnResized(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_columnResized(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnResized, doc_QTreeView_columnResized);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_columnCountChanged, "QTreeView.columnCountChanged(int, int)");

extern "C" {static PyObject *meth_QTreeView_columnCountChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnCountChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_columnCountChanged(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnCountChanged, doc_QTreeView_columnCountChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_columnMoved, "QTreeView.columnMoved()");

extern "C" {static PyObject *meth_QTreeView_columnMoved(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnMoved(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->sipProtect_columnMoved();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_columnMoved, doc_QTreeView_columnMoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_reexpand, "QTreeView.reexpand()");

extern "C" {static PyObject *meth_QTreeView_reexpand(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_reexpand(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->sipProtect_reexpand();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_reexpand, doc_QTreeView_reexpand);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_rowsRemoved, "QTreeView.rowsRemoved(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QTreeView_rowsRemoved(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowsRemoved(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_rowsRemoved(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rowsRemoved, doc_QTreeView_rowsRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_scrollContentsBy, "QTreeView.scrollContentsBy(int, int)");

extern "C" {static PyObject *meth_QTreeView_scrollContentsBy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtectVirt_scrollContentsBy(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_scrollContentsBy, doc_QTreeView_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_rowsInserted, "QTreeView.rowsInserted(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QTreeView_rowsInserted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtectVirt_rowsInserted(sipSelfWasArg,*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rowsInserted, doc_QTreeView_rowsInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_rowsAboutToBeRemoved, "QTreeView.rowsAboutToBeRemoved(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QTreeView_rowsAboutToBeRemoved(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtectVirt_rowsAboutToBeRemoved(sipSelfWasArg,*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rowsAboutToBeRemoved, doc_QTreeView_rowsAboutToBeRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_moveCursor, "QTreeView.moveCursor(QAbstractItemView.CursorAction, Qt.KeyboardModifiers) -> QModelIndex");

extern "C" {static PyObject *meth_QTreeView_moveCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_moveCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::KeyboardModifiers* a1;
        int a1State = 0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BEJ1", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->sipProtectVirt_moveCursor(sipSelfWasArg,a0,*a1));
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_moveCursor, doc_QTreeView_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_horizontalOffset, "QTreeView.horizontalOffset() -> int");

extern "C" {static PyObject *meth_QTreeView_horizontalOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_horizontalOffset(sipSelfWasArg);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_horizontalOffset, doc_QTreeView_horizontalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_verticalOffset, "QTreeView.verticalOffset() -> int");

extern "C" {static PyObject *meth_QTreeView_verticalOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_verticalOffset(sipSelfWasArg);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_verticalOffset, doc_QTreeView_verticalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setSelection, "QTreeView.setSelection(QRect, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QTreeView_setSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            sipCpp->sipProtectVirt_setSelection(sipSelfWasArg,*a0,*a1);
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setSelection, doc_QTreeView_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_visualRegionForSelection, "QTreeView.visualRegionForSelection(QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QTreeView_visualRegionForSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QItemSelection, &a0))
        {
            QRegion*sipRes;

            sipRes = new QRegion(sipCpp->sipProtectVirt_visualRegionForSelection(sipSelfWasArg,*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_visualRegionForSelection, doc_QTreeView_visualRegionForSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_selectedIndexes, "QTreeView.selectedIndexes() -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QTreeView_selectedIndexes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            QModelIndexList*sipRes;

            sipRes = new QModelIndexList(sipCpp->sipProtectVirt_selectedIndexes(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_selectedIndexes, doc_QTreeView_selectedIndexes);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_paintEvent, "QTreeView.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QTreeView_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_paintEvent, doc_QTreeView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_timerEvent, "QTreeView.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QTreeView_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_timerEvent, doc_QTreeView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_mouseReleaseEvent, "QTreeView.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTreeView_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_mouseReleaseEvent, doc_QTreeView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_drawRow, "QTreeView.drawRow(QPainter, QStyleOptionViewItem, QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_drawRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QModelIndex* a2;
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QModelIndex, &a2))
        {
            sipCpp->sipProtectVirt_drawRow(sipSelfWasArg,a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_drawRow, doc_QTreeView_drawRow);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_drawBranches, "QTreeView.drawBranches(QPainter, QRect, QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_drawBranches(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawBranches(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QRect* a1;
        const QModelIndex* a2;
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1, sipType_QModelIndex, &a2))
        {
            sipCpp->sipProtectVirt_drawBranches(sipSelfWasArg,a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_drawBranches, doc_QTreeView_drawBranches);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_drawTree, "QTreeView.drawTree(QPainter, QRegion)");

extern "C" {static PyObject *meth_QTreeView_drawTree(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawTree(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        const QRegion* a1;
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QPainter, &a0, sipType_QRegion, &a1))
        {
            sipCpp->sipProtect_drawTree(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_drawTree, doc_QTreeView_drawTree);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_mousePressEvent, "QTreeView.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTreeView_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_mousePressEvent, doc_QTreeView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_mouseMoveEvent, "QTreeView.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTreeView_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_mouseMoveEvent, doc_QTreeView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_mouseDoubleClickEvent, "QTreeView.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QTreeView_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_mouseDoubleClickEvent, doc_QTreeView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_keyPressEvent, "QTreeView.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QTreeView_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_keyPressEvent, doc_QTreeView_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_updateGeometries, "QTreeView.updateGeometries()");

extern "C" {static PyObject *meth_QTreeView_updateGeometries(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateGeometries(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_updateGeometries, doc_QTreeView_updateGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_sizeHintForColumn, "QTreeView.sizeHintForColumn(int) -> int");

extern "C" {static PyObject *meth_QTreeView_sizeHintForColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_sizeHintForColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_sizeHintForColumn(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_sizeHintForColumn, doc_QTreeView_sizeHintForColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_indexRowSizeHint, "QTreeView.indexRowSizeHint(QModelIndex) -> int");

extern "C" {static PyObject *meth_QTreeView_indexRowSizeHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexRowSizeHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_indexRowSizeHint(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_indexRowSizeHint, doc_QTreeView_indexRowSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_horizontalScrollbarAction, "QTreeView.horizontalScrollbarAction(int)");

extern "C" {static PyObject *meth_QTreeView_horizontalScrollbarAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_horizontalScrollbarAction(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_horizontalScrollbarAction, doc_QTreeView_horizontalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isIndexHidden, "QTreeView.isIndexHidden(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTreeView_isIndexHidden(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_isIndexHidden(sipSelfWasArg,*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isIndexHidden, doc_QTreeView_isIndexHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setColumnWidth, "QTreeView.setColumnWidth(int, int)");

extern "C" {static PyObject *meth_QTreeView_setColumnWidth(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setColumnWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QTreeView, &sipCpp, &a0, &a1))
        {
            sipCpp->setColumnWidth(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setColumnWidth, doc_QTreeView_setColumnWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setSortingEnabled, "QTreeView.setSortingEnabled(bool)");

extern "C" {static PyObject *meth_QTreeView_setSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setSortingEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setSortingEnabled, doc_QTreeView_setSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isSortingEnabled, "QTreeView.isSortingEnabled() -> bool");

extern "C" {static PyObject *meth_QTreeView_isSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSortingEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isSortingEnabled, doc_QTreeView_isSortingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setAnimated, "QTreeView.setAnimated(bool)");

extern "C" {static PyObject *meth_QTreeView_setAnimated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setAnimated(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setAnimated, doc_QTreeView_setAnimated);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isAnimated, "QTreeView.isAnimated() -> bool");

extern "C" {static PyObject *meth_QTreeView_isAnimated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAnimated();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isAnimated, doc_QTreeView_isAnimated);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setAllColumnsShowFocus, "QTreeView.setAllColumnsShowFocus(bool)");

extern "C" {static PyObject *meth_QTreeView_setAllColumnsShowFocus(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setAllColumnsShowFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setAllColumnsShowFocus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setAllColumnsShowFocus, doc_QTreeView_setAllColumnsShowFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_allColumnsShowFocus, "QTreeView.allColumnsShowFocus() -> bool");

extern "C" {static PyObject *meth_QTreeView_allColumnsShowFocus(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_allColumnsShowFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->allColumnsShowFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_allColumnsShowFocus, doc_QTreeView_allColumnsShowFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_sortByColumn, "QTreeView.sortByColumn(int, Qt.SortOrder)");

extern "C" {static PyObject *meth_QTreeView_sortByColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_sortByColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        Qt::SortOrder a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiE", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_Qt_SortOrder, &a1))
        {
            sipCpp->sortByColumn(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_sortByColumn, doc_QTreeView_sortByColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_autoExpandDelay, "QTreeView.autoExpandDelay() -> int");

extern "C" {static PyObject *meth_QTreeView_autoExpandDelay(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_autoExpandDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->autoExpandDelay();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_autoExpandDelay, doc_QTreeView_autoExpandDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setAutoExpandDelay, "QTreeView.setAutoExpandDelay(int)");

extern "C" {static PyObject *meth_QTreeView_setAutoExpandDelay(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setAutoExpandDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setAutoExpandDelay(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setAutoExpandDelay, doc_QTreeView_setAutoExpandDelay);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isFirstColumnSpanned, "QTreeView.isFirstColumnSpanned(int, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QTreeView_isFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QModelIndex* a1;
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_QModelIndex, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->isFirstColumnSpanned(a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isFirstColumnSpanned, doc_QTreeView_isFirstColumnSpanned);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setFirstColumnSpanned, "QTreeView.setFirstColumnSpanned(int, QModelIndex, bool)");

extern "C" {static PyObject *meth_QTreeView_setFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QModelIndex* a1;
        bool a2;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9b", &sipSelf, sipType_QTreeView, &sipCpp, &a0, sipType_QModelIndex, &a1, &a2))
        {
            sipCpp->setFirstColumnSpanned(a0,*a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setFirstColumnSpanned, doc_QTreeView_setFirstColumnSpanned);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setWordWrap, "QTreeView.setWordWrap(bool)");

extern "C" {static PyObject *meth_QTreeView_setWordWrap(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setWordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setWordWrap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setWordWrap, doc_QTreeView_setWordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_wordWrap, "QTreeView.wordWrap() -> bool");

extern "C" {static PyObject *meth_QTreeView_wordWrap(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_wordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->wordWrap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_wordWrap, doc_QTreeView_wordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_expandToDepth, "QTreeView.expandToDepth(int)");

extern "C" {static PyObject *meth_QTreeView_expandToDepth(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expandToDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->expandToDepth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_expandToDepth, doc_QTreeView_expandToDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_dragMoveEvent, "QTreeView.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QTreeView_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_dragMoveEvent, doc_QTreeView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_viewportEvent, "QTreeView.viewportEvent(QEvent) -> bool");

extern "C" {static PyObject *meth_QTreeView_viewportEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_viewportEvent(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_viewportEvent, doc_QTreeView_viewportEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_rowHeight, "QTreeView.rowHeight(QModelIndex) -> int");

extern "C" {static PyObject *meth_QTreeView_rowHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_rowHeight(*a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_rowHeight, doc_QTreeView_rowHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_selectionChanged, "QTreeView.selectionChanged(QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QTreeView_selectionChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QItemSelection* a1;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            sipCpp->sipProtectVirt_selectionChanged(sipSelfWasArg,*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_selectionChanged, doc_QTreeView_selectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_currentChanged, "QTreeView.currentChanged(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QTreeView_currentChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_currentChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QTreeView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp->sipProtectVirt_currentChanged(sipSelfWasArg,*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_currentChanged, doc_QTreeView_currentChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_expandsOnDoubleClick, "QTreeView.expandsOnDoubleClick() -> bool");

extern "C" {static PyObject *meth_QTreeView_expandsOnDoubleClick(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expandsOnDoubleClick(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->expandsOnDoubleClick();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_expandsOnDoubleClick, doc_QTreeView_expandsOnDoubleClick);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setExpandsOnDoubleClick, "QTreeView.setExpandsOnDoubleClick(bool)");

extern "C" {static PyObject *meth_QTreeView_setExpandsOnDoubleClick(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setExpandsOnDoubleClick(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setExpandsOnDoubleClick(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setExpandsOnDoubleClick, doc_QTreeView_setExpandsOnDoubleClick);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_isHeaderHidden, "QTreeView.isHeaderHidden() -> bool");

extern "C" {static PyObject *meth_QTreeView_isHeaderHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isHeaderHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isHeaderHidden();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_isHeaderHidden, doc_QTreeView_isHeaderHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setHeaderHidden, "QTreeView.setHeaderHidden(bool)");

extern "C" {static PyObject *meth_QTreeView_setHeaderHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setHeaderHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setHeaderHidden(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setHeaderHidden, doc_QTreeView_setHeaderHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_setTreePosition, "QTreeView.setTreePosition(int)");

extern "C" {static PyObject *meth_QTreeView_setTreePosition(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setTreePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QTreeView, &sipCpp, &a0))
        {
            sipCpp->setTreePosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_setTreePosition, doc_QTreeView_setTreePosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_treePosition, "QTreeView.treePosition() -> int");

extern "C" {static PyObject *meth_QTreeView_treePosition(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_treePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->treePosition();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_treePosition, doc_QTreeView_treePosition);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_viewportSizeHint, "QTreeView.viewportSizeHint() -> QSize");

extern "C" {static PyObject *meth_QTreeView_viewportSizeHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QTreeView_viewportSizeHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQTreeView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->sipProtectVirt_viewportSizeHint(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_viewportSizeHint, doc_QTreeView_viewportSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QTreeView_resetIndentation, "QTreeView.resetIndentation()");

extern "C" {static PyObject *meth_QTreeView_resetIndentation(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_resetIndentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QTreeView, &sipCpp))
        {
            sipCpp->resetIndentation();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QTreeView, sipName_resetIndentation, doc_QTreeView_resetIndentation);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTreeView(void *, const sipTypeDef *);}
static void *cast_QTreeView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTreeView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemView)->ctd_cast((QAbstractItemView *)(QTreeView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTreeView(void *, int);}
static void release_QTreeView(void *sipCppV,int)
{
    QTreeView *sipCpp = reinterpret_cast<QTreeView *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QTreeView(sipSimpleWrapper *);}
static void dealloc_QTreeView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTreeView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTreeView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QTreeView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QTreeView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQTreeView *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQTreeView(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTreeView[] = {{4, 255, 1}};


static PyMethodDef methods_QTreeView[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QTreeView_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_allColumnsShowFocus), meth_QTreeView_allColumnsShowFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_allColumnsShowFocus)},
    {SIP_MLNAME_CAST(sipName_autoExpandDelay), meth_QTreeView_autoExpandDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_autoExpandDelay)},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QTreeView_changeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QTreeView_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEditor), (PyCFunction)meth_QTreeView_closeEditor, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QTreeView_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_collapse), meth_QTreeView_collapse, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_collapse)},
    {SIP_MLNAME_CAST(sipName_collapseAll), meth_QTreeView_collapseAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_collapseAll)},
    {SIP_MLNAME_CAST(sipName_columnAt), meth_QTreeView_columnAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_columnAt)},
    {SIP_MLNAME_CAST(sipName_columnCountChanged), (PyCFunction)meth_QTreeView_columnCountChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_columnCountChanged)},
    {SIP_MLNAME_CAST(sipName_columnMoved), (PyCFunction)meth_QTreeView_columnMoved, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_columnMoved)},
    {SIP_MLNAME_CAST(sipName_columnResized), (PyCFunction)meth_QTreeView_columnResized, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_columnResized)},
    {SIP_MLNAME_CAST(sipName_columnViewportPosition), meth_QTreeView_columnViewportPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_columnViewportPosition)},
    {SIP_MLNAME_CAST(sipName_columnWidth), meth_QTreeView_columnWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_columnWidth)},
    {SIP_MLNAME_CAST(sipName_commitData), (PyCFunction)meth_QTreeView_commitData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QTreeView_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QTreeView_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QTreeView_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_currentChanged), (PyCFunction)meth_QTreeView_currentChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_currentChanged)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QTreeView_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dataChanged), (PyCFunction)meth_QTreeView_dataChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_dataChanged)},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QTreeView_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dirtyRegionOffset), (PyCFunction)meth_QTreeView_dirtyRegionOffset, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QTreeView_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QTreeView_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QTreeView_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QTreeView_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_drawBranches), (PyCFunction)meth_QTreeView_drawBranches, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_drawBranches)},
    {SIP_MLNAME_CAST(sipName_drawFrame), (PyCFunction)meth_QTreeView_drawFrame, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawRow), (PyCFunction)meth_QTreeView_drawRow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_drawRow)},
    {SIP_MLNAME_CAST(sipName_drawTree), (PyCFunction)meth_QTreeView_drawTree, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_drawTree)},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QTreeView_dropEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropIndicatorPosition), (PyCFunction)meth_QTreeView_dropIndicatorPosition, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_edit), (PyCFunction)meth_QTreeView_edit, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_editorDestroyed), (PyCFunction)meth_QTreeView_editorDestroyed, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QTreeView_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QTreeView_event, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_eventFilter), (PyCFunction)meth_QTreeView_eventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_executeDelayedItemsLayout), (PyCFunction)meth_QTreeView_executeDelayedItemsLayout, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_expand), meth_QTreeView_expand, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_expand)},
    {SIP_MLNAME_CAST(sipName_expandAll), meth_QTreeView_expandAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_expandAll)},
    {SIP_MLNAME_CAST(sipName_expandToDepth), meth_QTreeView_expandToDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_expandToDepth)},
    {SIP_MLNAME_CAST(sipName_expandsOnDoubleClick), meth_QTreeView_expandsOnDoubleClick, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_expandsOnDoubleClick)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QTreeView_focusInEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QTreeView_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QTreeView_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QTreeView_focusOutEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QTreeView_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_header), meth_QTreeView_header, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_header)},
    {SIP_MLNAME_CAST(sipName_hideColumn), meth_QTreeView_hideColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_hideColumn)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QTreeView_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), (PyCFunction)meth_QTreeView_horizontalOffset, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_horizontalOffset)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), (PyCFunction)meth_QTreeView_horizontalScrollbarAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_horizontalScrollbarAction)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarValueChanged), (PyCFunction)meth_QTreeView_horizontalScrollbarValueChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_indentation), meth_QTreeView_indentation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_indentation)},
    {SIP_MLNAME_CAST(sipName_indexAbove), meth_QTreeView_indexAbove, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_indexAbove)},
    {SIP_MLNAME_CAST(sipName_indexAt), meth_QTreeView_indexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_indexAt)},
    {SIP_MLNAME_CAST(sipName_indexBelow), meth_QTreeView_indexBelow, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_indexBelow)},
    {SIP_MLNAME_CAST(sipName_indexRowSizeHint), (PyCFunction)meth_QTreeView_indexRowSizeHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_indexRowSizeHint)},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QTreeView_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QTreeView_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isAnimated), meth_QTreeView_isAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isAnimated)},
    {SIP_MLNAME_CAST(sipName_isColumnHidden), meth_QTreeView_isColumnHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isColumnHidden)},
    {SIP_MLNAME_CAST(sipName_isExpanded), meth_QTreeView_isExpanded, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isExpanded)},
    {SIP_MLNAME_CAST(sipName_isFirstColumnSpanned), meth_QTreeView_isFirstColumnSpanned, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isFirstColumnSpanned)},
    {SIP_MLNAME_CAST(sipName_isHeaderHidden), meth_QTreeView_isHeaderHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isHeaderHidden)},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), (PyCFunction)meth_QTreeView_isIndexHidden, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_isIndexHidden)},
    {SIP_MLNAME_CAST(sipName_isRowHidden), meth_QTreeView_isRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isRowHidden)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QTreeView_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSortingEnabled), meth_QTreeView_isSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_isSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_itemsExpandable), meth_QTreeView_itemsExpandable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_itemsExpandable)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QTreeView_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QTreeView_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyboardSearch), meth_QTreeView_keyboardSearch, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_keyboardSearch)},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QTreeView_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QTreeView_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QTreeView_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QTreeView_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QTreeView_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QTreeView_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), (PyCFunction)meth_QTreeView_moveCursor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_moveCursor)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QTreeView_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QTreeView_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QTreeView_paintEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QTreeView_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_reexpand), (PyCFunction)meth_QTreeView_reexpand, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_reexpand)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QTreeView_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_reset)},
    {SIP_MLNAME_CAST(sipName_resetIndentation), meth_QTreeView_resetIndentation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_resetIndentation)},
    {SIP_MLNAME_CAST(sipName_resizeColumnToContents), meth_QTreeView_resizeColumnToContents, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_resizeColumnToContents)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QTreeView_resizeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_rootIsDecorated), meth_QTreeView_rootIsDecorated, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_rootIsDecorated)},
    {SIP_MLNAME_CAST(sipName_rowHeight), (PyCFunction)meth_QTreeView_rowHeight, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_rowHeight)},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), (PyCFunction)meth_QTreeView_rowsAboutToBeRemoved, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_rowsAboutToBeRemoved)},
    {SIP_MLNAME_CAST(sipName_rowsInserted), (PyCFunction)meth_QTreeView_rowsInserted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_rowsInserted)},
    {SIP_MLNAME_CAST(sipName_rowsRemoved), (PyCFunction)meth_QTreeView_rowsRemoved, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_rowsRemoved)},
    {SIP_MLNAME_CAST(sipName_scheduleDelayedItemsLayout), (PyCFunction)meth_QTreeView_scheduleDelayedItemsLayout, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), (PyCFunction)meth_QTreeView_scrollContentsBy, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_scrollDirtyRegion), (PyCFunction)meth_QTreeView_scrollDirtyRegion, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollTo), (PyCFunction)meth_QTreeView_scrollTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_scrollTo)},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QTreeView_selectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_selectAll)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), (PyCFunction)meth_QTreeView_selectedIndexes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_selectedIndexes)},
    {SIP_MLNAME_CAST(sipName_selectionChanged), (PyCFunction)meth_QTreeView_selectionChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_selectionChanged)},
    {SIP_MLNAME_CAST(sipName_selectionCommand), (PyCFunction)meth_QTreeView_selectionCommand, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QTreeView_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QTreeView_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAllColumnsShowFocus), meth_QTreeView_setAllColumnsShowFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setAllColumnsShowFocus)},
    {SIP_MLNAME_CAST(sipName_setAnimated), meth_QTreeView_setAnimated, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setAnimated)},
    {SIP_MLNAME_CAST(sipName_setAutoExpandDelay), meth_QTreeView_setAutoExpandDelay, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setAutoExpandDelay)},
    {SIP_MLNAME_CAST(sipName_setColumnHidden), meth_QTreeView_setColumnHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setColumnHidden)},
    {SIP_MLNAME_CAST(sipName_setColumnWidth), meth_QTreeView_setColumnWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setColumnWidth)},
    {SIP_MLNAME_CAST(sipName_setDirtyRegion), (PyCFunction)meth_QTreeView_setDirtyRegion, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setExpanded), meth_QTreeView_setExpanded, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setExpanded)},
    {SIP_MLNAME_CAST(sipName_setExpandsOnDoubleClick), meth_QTreeView_setExpandsOnDoubleClick, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setExpandsOnDoubleClick)},
    {SIP_MLNAME_CAST(sipName_setFirstColumnSpanned), meth_QTreeView_setFirstColumnSpanned, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setFirstColumnSpanned)},
    {SIP_MLNAME_CAST(sipName_setHeader), meth_QTreeView_setHeader, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setHeader)},
    {SIP_MLNAME_CAST(sipName_setHeaderHidden), meth_QTreeView_setHeaderHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setHeaderHidden)},
    {SIP_MLNAME_CAST(sipName_setIndentation), meth_QTreeView_setIndentation, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setIndentation)},
    {SIP_MLNAME_CAST(sipName_setItemsExpandable), meth_QTreeView_setItemsExpandable, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setItemsExpandable)},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QTreeView_setModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setModel)},
    {SIP_MLNAME_CAST(sipName_setRootIndex), meth_QTreeView_setRootIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setRootIndex)},
    {SIP_MLNAME_CAST(sipName_setRootIsDecorated), meth_QTreeView_setRootIsDecorated, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setRootIsDecorated)},
    {SIP_MLNAME_CAST(sipName_setRowHidden), meth_QTreeView_setRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setRowHidden)},
    {SIP_MLNAME_CAST(sipName_setSelection), (PyCFunction)meth_QTreeView_setSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_setSelection)},
    {SIP_MLNAME_CAST(sipName_setSelectionModel), meth_QTreeView_setSelectionModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setSelectionModel)},
    {SIP_MLNAME_CAST(sipName_setSortingEnabled), meth_QTreeView_setSortingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setSortingEnabled)},
    {SIP_MLNAME_CAST(sipName_setState), (PyCFunction)meth_QTreeView_setState, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setTreePosition), meth_QTreeView_setTreePosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setTreePosition)},
    {SIP_MLNAME_CAST(sipName_setUniformRowHeights), meth_QTreeView_setUniformRowHeights, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setUniformRowHeights)},
    {SIP_MLNAME_CAST(sipName_setViewportMargins), (PyCFunction)meth_QTreeView_setViewportMargins, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setWordWrap), meth_QTreeView_setWordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_setWordWrap)},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QTreeView_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showColumn), meth_QTreeView_showColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_showColumn)},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QTreeView_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHintForColumn), (PyCFunction)meth_QTreeView_sizeHintForColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_sizeHintForColumn)},
    {SIP_MLNAME_CAST(sipName_sortByColumn), meth_QTreeView_sortByColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_sortByColumn)},
    {SIP_MLNAME_CAST(sipName_startDrag), (PyCFunction)meth_QTreeView_startDrag, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_state), (PyCFunction)meth_QTreeView_state, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QTreeView_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QTreeView_timerEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_timerEvent)},
    {SIP_MLNAME_CAST(sipName_treePosition), meth_QTreeView_treePosition, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_treePosition)},
    {SIP_MLNAME_CAST(sipName_uniformRowHeights), meth_QTreeView_uniformRowHeights, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_uniformRowHeights)},
    {SIP_MLNAME_CAST(sipName_updateEditorData), (PyCFunction)meth_QTreeView_updateEditorData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometries), (PyCFunction)meth_QTreeView_updateEditorGeometries, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateGeometries), (PyCFunction)meth_QTreeView_updateGeometries, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_updateGeometries)},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QTreeView_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalOffset), (PyCFunction)meth_QTreeView_verticalOffset, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_verticalOffset)},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarAction), (PyCFunction)meth_QTreeView_verticalScrollbarAction, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarValueChanged), (PyCFunction)meth_QTreeView_verticalScrollbarValueChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewOptions), (PyCFunction)meth_QTreeView_viewOptions, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportEvent), (PyCFunction)meth_QTreeView_viewportEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_viewportEvent)},
    {SIP_MLNAME_CAST(sipName_viewportSizeHint), (PyCFunction)meth_QTreeView_viewportSizeHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_viewportSizeHint)},
    {SIP_MLNAME_CAST(sipName_visualRect), meth_QTreeView_visualRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_visualRect)},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), (PyCFunction)meth_QTreeView_visualRegionForSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QTreeView_visualRegionForSelection)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QTreeView_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_wordWrap), meth_QTreeView_wordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QTreeView_wordWrap)}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QTreeView[] = {
    {"collapsed(QModelIndex)", "\1QTreeView.collapsed[QModelIndex]", 0, 0},
    {"expanded(QModelIndex)", "\1QTreeView.expanded[QModelIndex]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QTreeView, "\1QTreeView(QWidget parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QTreeView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QTreeView,
        {0}
    },
    {
        sipNameNr_QTreeView,
        {0, 0, 1},
        156, methods_QTreeView,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QTreeView,
    -1,
    -1,
    supers_QTreeView,
    0,
    init_type_QTreeView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTreeView,
    0,
    0,
    0,
    release_QTreeView,
    cast_QTreeView,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QTreeView::staticMetaObject,
    0,
    signals_QTreeView,
    0
};
