/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:11 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlistview.sip"
#include <qlistview.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 133 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 68 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 368 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 564 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 395 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 321 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 68 "sip/QtCore/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 105 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractscrollarea.sip"
#include <qabstractscrollarea.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 452 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 171 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 174 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 177 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 180 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 183 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 186 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 189 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 195 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 198 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 201 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 204 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 207 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 210 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 213 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 635 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 216 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 275 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 219 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 408 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 382 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 225 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 228 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 231 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 237 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 240 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 243 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 246 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 249 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 252 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 255 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 258 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 261 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 264 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 267 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 270 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 273 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 276 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 279 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 282 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 285 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"


class sipQListView : public QListView
{
public:
    sipQListView(QWidget*);
    virtual ~sipQListView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /* Expose this protected enum. */
    enum sipDropIndicatorPosition {
        OnItem = QAbstractItemView::OnItem,
        AboveItem = QAbstractItemView::AboveItem,
        BelowItem = QAbstractItemView::BelowItem,
        OnViewport = QAbstractItemView::OnViewport
    };

    /* Expose this protected enum. */
    enum sipState {
        NoState = QAbstractItemView::NoState,
        DraggingState = QAbstractItemView::DraggingState,
        DragSelectingState = QAbstractItemView::DragSelectingState,
        EditingState = QAbstractItemView::EditingState,
        ExpandingState = QAbstractItemView::ExpandingState,
        CollapsingState = QAbstractItemView::CollapsingState,
        AnimatingState = QAbstractItemView::AnimatingState
    };

    /* Expose this protected enum. */
    enum sipCursorAction {
        MoveUp = QAbstractItemView::MoveUp,
        MoveDown = QAbstractItemView::MoveDown,
        MoveLeft = QAbstractItemView::MoveLeft,
        MoveRight = QAbstractItemView::MoveRight,
        MoveHome = QAbstractItemView::MoveHome,
        MoveEnd = QAbstractItemView::MoveEnd,
        MovePageUp = QAbstractItemView::MovePageUp,
        MovePageDown = QAbstractItemView::MovePageDown,
        MoveNext = QAbstractItemView::MoveNext,
        MovePrevious = QAbstractItemView::MovePrevious
    };

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_enterEvent(bool,QEvent*);
    void sipProtectVirt_leaveEvent(bool,QEvent*);
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_closeEvent(bool,QCloseEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);
    void sipProtectVirt_actionEvent(bool,QActionEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const QByteArray&,void*,long*);
    QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool,QPainter*) const;
    void sipProtectVirt_changeEvent(bool,QEvent*);
    void sipProtect_drawFrame(QPainter*);
    void sipProtect_setViewportMargins(int,int,int,int);
    void sipProtect_setViewportMargins(const QMargins&);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent*);
    bool sipProtectVirt_eventFilter(bool,QObject*,QEvent*);
    bool sipProtectVirt_edit(bool,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);
    void sipProtectVirt_updateEditorData(bool);
    void sipProtectVirt_updateEditorGeometries(bool);
    void sipProtectVirt_verticalScrollbarAction(bool,int);
    void sipProtectVirt_horizontalScrollbarAction(bool,int);
    void sipProtectVirt_verticalScrollbarValueChanged(bool,int);
    void sipProtectVirt_horizontalScrollbarValueChanged(bool,int);
    void sipProtectVirt_closeEditor(bool,QWidget*,QAbstractItemDelegate::EndEditHint);
    void sipProtectVirt_commitData(bool,QWidget*);
    void sipProtectVirt_editorDestroyed(bool,QObject*);
    QItemSelectionModel::SelectionFlags sipProtectVirt_selectionCommand(bool,const QModelIndex&,const QEvent*) const;
    int sipProtect_state() const;
    void sipProtect_setState(int);
    void sipProtect_scheduleDelayedItemsLayout();
    void sipProtect_executeDelayedItemsLayout();
    void sipProtect_scrollDirtyRegion(int,int);
    void sipProtect_setDirtyRegion(const QRegion&);
    QPoint sipProtect_dirtyRegionOffset() const;
    bool sipProtectVirt_viewportEvent(bool,QEvent*);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    int sipProtect_dropIndicatorPosition() const;
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    void sipProtectVirt_scrollContentsBy(bool,int,int);
    void sipProtectVirt_dataChanged(bool,const QModelIndex&,const QModelIndex&,const QVector<int>&);
    void sipProtectVirt_rowsInserted(bool,const QModelIndex&,int,int);
    void sipProtectVirt_rowsAboutToBeRemoved(bool,const QModelIndex&,int,int);
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool,QDropEvent*);
    void sipProtectVirt_startDrag(bool,Qt::DropActions);
    QStyleOptionViewItem sipProtectVirt_viewOptions(bool) const;
    void sipProtectVirt_paintEvent(bool,QPaintEvent*);
    int sipProtectVirt_horizontalOffset(bool) const;
    int sipProtectVirt_verticalOffset(bool) const;
    QModelIndex sipProtectVirt_moveCursor(bool,int,Qt::KeyboardModifiers);
    QRect sipProtect_rectForIndex(const QModelIndex&) const;
    void sipProtect_setPositionForIndex(const QPoint&,const QModelIndex&);
    void sipProtectVirt_setSelection(bool,const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion sipProtectVirt_visualRegionForSelection(bool,const QItemSelection&) const;
    QModelIndexList sipProtectVirt_selectedIndexes(bool) const;
    void sipProtectVirt_updateGeometries(bool);
    bool sipProtectVirt_isIndexHidden(bool,const QModelIndex&) const;
    QSize sipProtectVirt_viewportSizeHint(bool) const;
    void sipProtectVirt_selectionChanged(bool,const QItemSelection&,const QItemSelection&);
    void sipProtectVirt_currentChanged(bool,const QModelIndex&,const QModelIndex&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    void keyReleaseEvent(QKeyEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void changeEvent(QEvent*);
    void setupViewport(QWidget*);
    bool eventFilter(QObject*,QEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    void wheelEvent(QWheelEvent*);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    void inputMethodEvent(QInputMethodEvent*);
    bool focusNextPrevChild(bool);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void keyPressEvent(QKeyEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    bool viewportEvent(QEvent*);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent*) const;
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);
    void editorDestroyed(QObject*);
    void commitData(QWidget*);
    void closeEditor(QWidget*,QAbstractItemDelegate::EndEditHint);
    void horizontalScrollbarValueChanged(int);
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarAction(int);
    void verticalScrollbarAction(int);
    void updateEditorGeometries();
    void updateEditorData();
    void selectAll();
    int sizeHintForColumn(int) const;
    int sizeHintForRow(int) const;
    void keyboardSearch(const QString&);
    void setSelectionModel(QItemSelectionModel*);
    void setModel(QAbstractItemModel*);
    void currentChanged(const QModelIndex&,const QModelIndex&);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    QSize viewportSizeHint() const;
    bool isIndexHidden(const QModelIndex&) const;
    void updateGeometries();
    QModelIndexList selectedIndexes() const;
    QRegion visualRegionForSelection(const QItemSelection&) const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    int verticalOffset() const;
    int horizontalOffset() const;
    void paintEvent(QPaintEvent*);
    QStyleOptionViewItem viewOptions() const;
    void startDrag(Qt::DropActions);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void resizeEvent(QResizeEvent*);
    void timerEvent(QTimerEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    bool event(QEvent*);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void rowsInserted(const QModelIndex&,int,int);
    void dataChanged(const QModelIndex&,const QModelIndex&,const QVector<int>&);
    void scrollContentsBy(int,int);
    void setRootIndex(const QModelIndex&);
    void reset();
    QModelIndex indexAt(const QPoint&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QRect visualRect(const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQListView(const sipQListView &);
    sipQListView &operator = (const sipQListView &);

    char sipPyMethods[87];
};

sipQListView::sipQListView(QWidget*a0): QListView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQListView::~sipQListView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQListView::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QListView);
}

int sipQListView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QListView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QListView,_c,_id,_a);

    return _id;
}

void *sipQListView::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QListView, _clname, &sipCpp) ? sipCpp : QListView::qt_metacast(_clname));
}

void sipQListView::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QListView::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QListView::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QListView::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QListView::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QListView::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQListView::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QListView::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQListView::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QListView::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQListView::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QListView::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQListView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QListView::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QListView::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QListView::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QListView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QListView::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QListView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QListView::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QListView::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QListView::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QListView::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQListView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QListView::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQListView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QListView::heightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QListView::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQListView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QListView::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQListView::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QListView::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::setupViewport(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_setupViewport);

    if (!sipMeth)
    {
        QListView::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQListView::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QListView::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQListView::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QListView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QListView::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQListView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QListView::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQListView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QListView::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQListView::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QListView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQListView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QListView::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQListView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QListView::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QListView::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QListView::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QListView::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QListView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QListView::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QListView::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQListView::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QListView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QItemSelectionModel::SelectionFlags sipQListView::selectionCommand(const QModelIndex& a0,const QEvent*a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_selectionCommand);

    if (!sipMeth)
        return QListView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtWidgets_144(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QEvent*);

    return sipVH_QtWidgets_144(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQListView::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_edit);

    if (!sipMeth)
        return QListView::edit(a0,a1,a2);

    extern bool sipVH_QtWidgets_145(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::EditTrigger,QEvent*);

    return sipVH_QtWidgets_145(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQListView::editorDestroyed(QObject*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_editorDestroyed);

    if (!sipMeth)
    {
        QListView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtWidgets_146(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*);

    sipVH_QtWidgets_146(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::commitData(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_commitData);

    if (!sipMeth)
    {
        QListView::commitData(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::closeEditor(QWidget*a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_closeEditor);

    if (!sipMeth)
    {
        QListView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_147(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,QAbstractItemDelegate::EndEditHint);

    sipVH_QtWidgets_147(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQListView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!sipMeth)
    {
        QListView::horizontalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!sipMeth)
    {
        QListView::verticalScrollbarValueChanged(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!sipMeth)
    {
        QListView::horizontalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!sipMeth)
    {
        QListView::verticalScrollbarAction(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!sipMeth)
    {
        QListView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQListView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_updateEditorData);

    if (!sipMeth)
    {
        QListView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQListView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_selectAll);

    if (!sipMeth)
    {
        QListView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQListView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!sipMeth)
        return QListView::sizeHintForColumn(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQListView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!sipMeth)
        return QListView::sizeHintForRow(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_keyboardSearch);

    if (!sipMeth)
    {
        QListView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtGui_22)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[22]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::setSelectionModel(QItemSelectionModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_setSelectionModel);

    if (!sipMeth)
    {
        QListView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtWidgets_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QItemSelectionModel*);

    sipVH_QtWidgets_16(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::setModel(QAbstractItemModel*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_setModel);

    if (!sipMeth)
    {
        QListView::setModel(a0);
        return;
    }

    typedef void (*sipVH_QtCore_40)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QAbstractItemModel*);

    ((sipVH_QtCore_40)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[40]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_currentChanged);

    if (!sipMeth)
    {
        QListView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&);

    sipVH_QtWidgets_23(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQListView::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_selectionChanged);

    if (!sipMeth)
    {
        QListView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&,const QItemSelection&);

    sipVH_QtWidgets_24(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QSize sipQListView::viewportSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[58]),sipPySelf,NULL,sipName_viewportSizeHint);

    if (!sipMeth)
        return QListView::viewportSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQListView::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[59]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!sipMeth)
        return QListView::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_31)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_31)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[31]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_updateGeometries);

    if (!sipMeth)
    {
        QListView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QModelIndexList sipQListView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[61]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!sipMeth)
        return QListView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtWidgets_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_27(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QRegion sipQListView::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[62]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!sipMeth)
        return QListView::visualRegionForSelection(a0);

    extern QRegion sipVH_QtWidgets_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QItemSelection&);

    return sipVH_QtWidgets_28(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_setSelection);

    if (!sipMeth)
    {
        QListView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtWidgets_29(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QModelIndex sipQListView::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_moveCursor);

    if (!sipMeth)
        return QListView::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtWidgets_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::KeyboardModifiers);

    return sipVH_QtWidgets_30(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, (int)a0, a1);
}

int sipQListView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[65]),sipPySelf,NULL,sipName_verticalOffset);

    if (!sipMeth)
        return QListView::verticalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQListView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[66]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!sipMeth)
        return QListView::horizontalOffset();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQListView::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QListView::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QStyleOptionViewItem sipQListView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[68]),sipPySelf,NULL,sipName_viewOptions);

    if (!sipMeth)
        return QListView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtWidgets_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_46(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQListView::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_startDrag);

    if (!sipMeth)
    {
        QListView::startDrag(a0);
        return;
    }

    extern void sipVH_QtWidgets_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::DropActions);

    sipVH_QtWidgets_91(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QListView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QListView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QListView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QListView::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QListView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QListView::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QListView::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQListView::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QListView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!sipMeth)
    {
        QListView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_31(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQListView::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_rowsInserted);

    if (!sipMeth)
    {
        QListView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int);

    sipVH_QtWidgets_31(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQListView::dataChanged(const QModelIndex& a0,const QModelIndex& a1,const QVector<int>& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_dataChanged);

    if (!sipMeth)
    {
        QListView::dataChanged(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWidgets_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QModelIndex&,const QVector<int>&);

    sipVH_QtWidgets_32(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQListView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[81],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QListView::scrollContentsBy(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    ((sipVH_QtGui_17)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQListView::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_setRootIndex);

    if (!sipMeth)
    {
        QListView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_32)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[32]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[83],sipPySelf,NULL,sipName_reset);

    if (!sipMeth)
    {
        QListView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QModelIndex sipQListView::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[84]),sipPySelf,NULL,sipName_indexAt);

    if (!sipMeth)
        return QListView::indexAt(a0);

    extern QModelIndex sipVH_QtWidgets_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPoint&);

    return sipVH_QtWidgets_33(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQListView::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_scrollTo);

    if (!sipMeth)
    {
        QListView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtWidgets_34(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QRect sipQListView::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[86]),sipPySelf,NULL,sipName_visualRect);

    if (!sipMeth)
        return QListView::visualRect(a0);

    extern QRect sipVH_QtWidgets_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return sipVH_QtWidgets_35(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQListView::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQListView::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQListView::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQListView::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQListView::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQListView::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQListView::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQListView::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQListView::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQListView::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQListView::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQListView::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQListView::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent*a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQListView::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQListView::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent*a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQListView::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QWidget::showEvent(a0) : showEvent(a0));
}

void sipQListView::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQListView::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQListView::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQListView::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQListView::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQListView::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQListView::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

bool sipQListView::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ? QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

QPainter* sipQListView::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QWidget::sharedPainter() : sharedPainter());
}

void sipQListView::sipProtectVirt_initPainter(bool sipSelfWasArg,QPainter*a0) const
{
    (sipSelfWasArg ? QWidget::initPainter(a0) : initPainter(a0));
}

void sipQListView::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QFrame::changeEvent(a0) : changeEvent(a0));
}

void sipQListView::sipProtect_drawFrame(QPainter*a0)
{
    QFrame::drawFrame(a0);
}

void sipQListView::sipProtect_setViewportMargins(int a0,int a1,int a2,int a3)
{
    QAbstractScrollArea::setViewportMargins(a0,a1,a2,a3);
}

void sipQListView::sipProtect_setViewportMargins(const QMargins& a0)
{
    QAbstractScrollArea::setViewportMargins(a0);
}

void sipQListView::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::wheelEvent(a0) : wheelEvent(a0));
}

void sipQListView::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent*a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::contextMenuEvent(a0) : contextMenuEvent(a0));
}

bool sipQListView::sipProtectVirt_eventFilter(bool sipSelfWasArg,QObject*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QAbstractScrollArea::eventFilter(a0,a1) : eventFilter(a0,a1));
}

bool sipQListView::sipProtectVirt_edit(bool sipSelfWasArg,const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent*a2)
{
    return (sipSelfWasArg ? QAbstractItemView::edit(a0,a1,a2) : edit(a0,a1,a2));
}

void sipQListView::sipProtectVirt_updateEditorData(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorData() : updateEditorData());
}

void sipQListView::sipProtectVirt_updateEditorGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorGeometries() : updateEditorGeometries());
}

void sipQListView::sipProtectVirt_verticalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::verticalScrollbarAction(a0) : verticalScrollbarAction(a0));
}

void sipQListView::sipProtectVirt_horizontalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::horizontalScrollbarAction(a0) : horizontalScrollbarAction(a0));
}

void sipQListView::sipProtectVirt_verticalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::verticalScrollbarValueChanged(a0) : verticalScrollbarValueChanged(a0));
}

void sipQListView::sipProtectVirt_horizontalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::horizontalScrollbarValueChanged(a0) : horizontalScrollbarValueChanged(a0));
}

void sipQListView::sipProtectVirt_closeEditor(bool sipSelfWasArg,QWidget*a0,QAbstractItemDelegate::EndEditHint a1)
{
    (sipSelfWasArg ? QAbstractItemView::closeEditor(a0,a1) : closeEditor(a0,a1));
}

void sipQListView::sipProtectVirt_commitData(bool sipSelfWasArg,QWidget*a0)
{
    (sipSelfWasArg ? QAbstractItemView::commitData(a0) : commitData(a0));
}

void sipQListView::sipProtectVirt_editorDestroyed(bool sipSelfWasArg,QObject*a0)
{
    (sipSelfWasArg ? QAbstractItemView::editorDestroyed(a0) : editorDestroyed(a0));
}

QItemSelectionModel::SelectionFlags sipQListView::sipProtectVirt_selectionCommand(bool sipSelfWasArg,const QModelIndex& a0,const QEvent*a1) const
{
    return (sipSelfWasArg ? QAbstractItemView::selectionCommand(a0,a1) : selectionCommand(a0,a1));
}

int sipQListView::sipProtect_state() const
{
    return (int)QAbstractItemView::state();
}

void sipQListView::sipProtect_setState(int a0)
{
    QAbstractItemView::setState((QAbstractItemView::State)a0);
}

void sipQListView::sipProtect_scheduleDelayedItemsLayout()
{
    QAbstractItemView::scheduleDelayedItemsLayout();
}

void sipQListView::sipProtect_executeDelayedItemsLayout()
{
    QAbstractItemView::executeDelayedItemsLayout();
}

void sipQListView::sipProtect_scrollDirtyRegion(int a0,int a1)
{
    QAbstractItemView::scrollDirtyRegion(a0,a1);
}

void sipQListView::sipProtect_setDirtyRegion(const QRegion& a0)
{
    QAbstractItemView::setDirtyRegion(a0);
}

QPoint sipQListView::sipProtect_dirtyRegionOffset() const
{
    return QAbstractItemView::dirtyRegionOffset();
}

bool sipQListView::sipProtectVirt_viewportEvent(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QAbstractItemView::viewportEvent(a0) : viewportEvent(a0));
}

void sipQListView::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQListView::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQListView::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQListView::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusInEvent(a0) : focusInEvent(a0));
}

void sipQListView::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQListView::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::keyPressEvent(a0) : keyPressEvent(a0));
}

int sipQListView::sipProtect_dropIndicatorPosition() const
{
    return (int)QAbstractItemView::dropIndicatorPosition();
}

bool sipQListView::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QAbstractItemView::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQListView::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QAbstractItemView::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQListView::sipProtectVirt_scrollContentsBy(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ? QListView::scrollContentsBy(a0,a1) : scrollContentsBy(a0,a1));
}

void sipQListView::sipProtectVirt_dataChanged(bool sipSelfWasArg,const QModelIndex& a0,const QModelIndex& a1,const QVector<int>& a2)
{
    (sipSelfWasArg ? QListView::dataChanged(a0,a1,a2) : dataChanged(a0,a1,a2));
}

void sipQListView::sipProtectVirt_rowsInserted(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QListView::rowsInserted(a0,a1,a2) : rowsInserted(a0,a1,a2));
}

void sipQListView::sipProtectVirt_rowsAboutToBeRemoved(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QListView::rowsAboutToBeRemoved(a0,a1,a2) : rowsAboutToBeRemoved(a0,a1,a2));
}

bool sipQListView::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QListView::event(a0) : event(a0));
}

void sipQListView::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QListView::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQListView::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QListView::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQListView::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QListView::timerEvent(a0) : timerEvent(a0));
}

void sipQListView::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QListView::resizeEvent(a0) : resizeEvent(a0));
}

void sipQListView::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QListView::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQListView::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QListView::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQListView::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QListView::dropEvent(a0) : dropEvent(a0));
}

void sipQListView::sipProtectVirt_startDrag(bool sipSelfWasArg,Qt::DropActions a0)
{
    (sipSelfWasArg ? QListView::startDrag(a0) : startDrag(a0));
}

QStyleOptionViewItem sipQListView::sipProtectVirt_viewOptions(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QListView::viewOptions() : viewOptions());
}

void sipQListView::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent*a0)
{
    (sipSelfWasArg ? QListView::paintEvent(a0) : paintEvent(a0));
}

int sipQListView::sipProtectVirt_horizontalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QListView::horizontalOffset() : horizontalOffset());
}

int sipQListView::sipProtectVirt_verticalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QListView::verticalOffset() : verticalOffset());
}

QModelIndex sipQListView::sipProtectVirt_moveCursor(bool sipSelfWasArg,int a0,Qt::KeyboardModifiers a1)
{
    return (sipSelfWasArg ? QListView::moveCursor((QAbstractItemView::CursorAction)a0,a1) : moveCursor((QAbstractItemView::CursorAction)a0,a1));
}

QRect sipQListView::sipProtect_rectForIndex(const QModelIndex& a0) const
{
    return QListView::rectForIndex(a0);
}

void sipQListView::sipProtect_setPositionForIndex(const QPoint& a0,const QModelIndex& a1)
{
    QListView::setPositionForIndex(a0,a1);
}

void sipQListView::sipProtectVirt_setSelection(bool sipSelfWasArg,const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    (sipSelfWasArg ? QListView::setSelection(a0,a1) : setSelection(a0,a1));
}

QRegion sipQListView::sipProtectVirt_visualRegionForSelection(bool sipSelfWasArg,const QItemSelection& a0) const
{
    return (sipSelfWasArg ? QListView::visualRegionForSelection(a0) : visualRegionForSelection(a0));
}

QModelIndexList sipQListView::sipProtectVirt_selectedIndexes(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QListView::selectedIndexes() : selectedIndexes());
}

void sipQListView::sipProtectVirt_updateGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QListView::updateGeometries() : updateGeometries());
}

bool sipQListView::sipProtectVirt_isIndexHidden(bool sipSelfWasArg,const QModelIndex& a0) const
{
    return (sipSelfWasArg ? QListView::isIndexHidden(a0) : isIndexHidden(a0));
}

QSize sipQListView::sipProtectVirt_viewportSizeHint(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QListView::viewportSizeHint() : viewportSizeHint());
}

void sipQListView::sipProtectVirt_selectionChanged(bool sipSelfWasArg,const QItemSelection& a0,const QItemSelection& a1)
{
    (sipSelfWasArg ? QListView::selectionChanged(a0,a1) : selectionChanged(a0,a1));
}

void sipQListView::sipProtectVirt_currentChanged(bool sipSelfWasArg,const QModelIndex& a0,const QModelIndex& a1)
{
    (sipSelfWasArg ? QListView::currentChanged(a0,a1) : currentChanged(a0,a1));
}


PyDoc_STRVAR(doc_QListView_sender, "QListView.sender() -> QObject");

extern "C" {static PyObject *meth_QListView_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 2528 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_sender, doc_QListView_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_receivers, "QListView.receivers(signal) -> int");

extern "C" {static PyObject *meth_QListView_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 2587 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQListView.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_receivers, doc_QListView_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_childEvent, "QListView.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QListView_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_childEvent, doc_QListView_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_customEvent, "QListView.customEvent(QEvent)");

extern "C" {static PyObject *meth_QListView_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_customEvent, doc_QListView_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_connectNotify, "QListView.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QListView_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_connectNotify, doc_QListView_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_disconnectNotify, "QListView.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QListView_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_disconnectNotify, doc_QListView_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_senderSignalIndex, "QListView.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QListView_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_senderSignalIndex, doc_QListView_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_isSignalConnected, "QListView.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QListView_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_isSignalConnected, doc_QListView_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_keyReleaseEvent, "QListView.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QListView_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_keyReleaseEvent, doc_QListView_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_enterEvent, "QListView.enterEvent(QEvent)");

extern "C" {static PyObject *meth_QListView_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_enterEvent, doc_QListView_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_leaveEvent, "QListView.leaveEvent(QEvent)");

extern "C" {static PyObject *meth_QListView_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_leaveEvent, doc_QListView_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_moveEvent, "QListView.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QListView_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_moveEvent, doc_QListView_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_closeEvent, "QListView.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QListView_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_closeEvent, doc_QListView_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_tabletEvent, "QListView.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QListView_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_tabletEvent, doc_QListView_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_actionEvent, "QListView.actionEvent(QActionEvent)");

extern "C" {static PyObject *meth_QListView_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_actionEvent, doc_QListView_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_showEvent, "QListView.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QListView_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_showEvent, doc_QListView_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_hideEvent, "QListView.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QListView_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_hideEvent, doc_QListView_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_metric, "QListView.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QListView_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_metric, doc_QListView_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_updateMicroFocus, "QListView.updateMicroFocus()");

extern "C" {static PyObject *meth_QListView_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_updateMicroFocus, doc_QListView_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_create, "QListView.create(sip.voidptr window=0, bool initializeWindow=True, bool destroyOldWindow=True)");

extern "C" {static PyObject *meth_QListView_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0def = 0;
        WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQListView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QListView, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_create, doc_QListView_create);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_destroy, "QListView.destroy(bool destroyWindow=True, bool destroySubWindows=True)");

extern "C" {static PyObject *meth_QListView_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQListView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QListView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_destroy, doc_QListView_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_focusNextChild, "QListView.focusNextChild() -> bool");

extern "C" {static PyObject *meth_QListView_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_focusNextChild, doc_QListView_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_focusPreviousChild, "QListView.focusPreviousChild() -> bool");

extern "C" {static PyObject *meth_QListView_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_focusPreviousChild, doc_QListView_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_nativeEvent, "QListView.nativeEvent(QByteArray, sip.voidptr) -> (bool, int)");

extern "C" {static PyObject *meth_QListView_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QListView, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_nativeEvent, doc_QListView_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_sharedPainter, "QListView.sharedPainter() -> QPainter");

extern "C" {static PyObject *meth_QListView_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_sharedPainter, doc_QListView_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_initPainter, "QListView.initPainter(QPainter)");

extern "C" {static PyObject *meth_QListView_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_initPainter, doc_QListView_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_changeEvent, "QListView.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QListView_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_changeEvent, doc_QListView_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_drawFrame, "QListView.drawFrame(QPainter)");

extern "C" {static PyObject *meth_QListView_drawFrame(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_drawFrame(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtect_drawFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_drawFrame, doc_QListView_drawFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setViewportMargins, "QListView.setViewportMargins(int, int, int, int)\n"
    "QListView.setViewportMargins(QMargins)");

extern "C" {static PyObject *meth_QListView_setViewportMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_setViewportMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biiii", &sipSelf, sipType_QListView, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->sipProtect_setViewportMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QMargins* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QMargins, &a0))
        {
            sipCpp->sipProtect_setViewportMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setViewportMargins, doc_QListView_setViewportMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_wheelEvent, "QListView.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QListView_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_wheelEvent, doc_QListView_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_contextMenuEvent, "QListView.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QListView_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_contextMenuEvent, doc_QListView_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_eventFilter, "QListView.eventFilter(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QListView_eventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_eventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QListView, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_eventFilter, doc_QListView_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_edit, "QListView.edit(QModelIndex)\n"
    "QListView.edit(QModelIndex, QAbstractItemView.EditTrigger, QEvent) -> bool");

extern "C" {static PyObject *meth_QListView_edit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_edit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0))
        {
            sipCpp->edit(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QModelIndex* a0;
        QAbstractItemView::EditTrigger a1;
        QEvent* a2;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9EJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_EditTrigger, &a1, sipType_QEvent, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_edit(sipSelfWasArg,*a0,a1,a2);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_edit, doc_QListView_edit);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_updateEditorData, "QListView.updateEditorData()");

extern "C" {static PyObject *meth_QListView_updateEditorData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_updateEditorData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateEditorData(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_updateEditorData, doc_QListView_updateEditorData);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_updateEditorGeometries, "QListView.updateEditorGeometries()");

extern "C" {static PyObject *meth_QListView_updateEditorGeometries(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_updateEditorGeometries(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateEditorGeometries(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_updateEditorGeometries, doc_QListView_updateEditorGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_verticalScrollbarAction, "QListView.verticalScrollbarAction(int)");

extern "C" {static PyObject *meth_QListView_verticalScrollbarAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_verticalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_verticalScrollbarAction(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_verticalScrollbarAction, doc_QListView_verticalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_horizontalScrollbarAction, "QListView.horizontalScrollbarAction(int)");

extern "C" {static PyObject *meth_QListView_horizontalScrollbarAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_horizontalScrollbarAction(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_horizontalScrollbarAction, doc_QListView_horizontalScrollbarAction);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_verticalScrollbarValueChanged, "QListView.verticalScrollbarValueChanged(int)");

extern "C" {static PyObject *meth_QListView_verticalScrollbarValueChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_verticalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_verticalScrollbarValueChanged(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_verticalScrollbarValueChanged, doc_QListView_verticalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_horizontalScrollbarValueChanged, "QListView.horizontalScrollbarValueChanged(int)");

extern "C" {static PyObject *meth_QListView_horizontalScrollbarValueChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_horizontalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_horizontalScrollbarValueChanged(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_horizontalScrollbarValueChanged, doc_QListView_horizontalScrollbarValueChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_closeEditor, "QListView.closeEditor(QWidget, QAbstractItemDelegate.EndEditHint)");

extern "C" {static PyObject *meth_QListView_closeEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_closeEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        QAbstractItemDelegate::EndEditHint a1;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8E", &sipSelf, sipType_QListView, &sipCpp, sipType_QWidget, &a0, sipType_QAbstractItemDelegate_EndEditHint, &a1))
        {
            sipCpp->sipProtectVirt_closeEditor(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_closeEditor, doc_QListView_closeEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_commitData, "QListView.commitData(QWidget)");

extern "C" {static PyObject *meth_QListView_commitData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_commitData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->sipProtectVirt_commitData(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_commitData, doc_QListView_commitData);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_editorDestroyed, "QListView.editorDestroyed(QObject)");

extern "C" {static PyObject *meth_QListView_editorDestroyed(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_editorDestroyed(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QObject, &a0))
        {
            sipCpp->sipProtectVirt_editorDestroyed(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_editorDestroyed, doc_QListView_editorDestroyed);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_selectionCommand, "QListView.selectionCommand(QModelIndex, QEvent event=None) -> QItemSelectionModel.SelectionFlags");

extern "C" {static PyObject *meth_QListView_selectionCommand(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_selectionCommand(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QEvent* a1 = 0;
        const sipQListView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, sipType_QEvent, &a1))
        {
            QItemSelectionModel::SelectionFlags*sipRes;

            sipRes = new QItemSelectionModel::SelectionFlags(sipCpp->sipProtectVirt_selectionCommand(sipSelfWasArg,*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_selectionCommand, doc_QListView_selectionCommand);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_state, "QListView.state() -> QAbstractItemView.State");

extern "C" {static PyObject *meth_QListView_state(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_state(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_state();

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_state, doc_QListView_state);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setState, "QListView.setState(QAbstractItemView.State)");

extern "C" {static PyObject *meth_QListView_setState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_setState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QAbstractItemView_State, &a0))
        {
            sipCpp->sipProtect_setState(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setState, doc_QListView_setState);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_scheduleDelayedItemsLayout, "QListView.scheduleDelayedItemsLayout()");

extern "C" {static PyObject *meth_QListView_scheduleDelayedItemsLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_scheduleDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            sipCpp->sipProtect_scheduleDelayedItemsLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_scheduleDelayedItemsLayout, doc_QListView_scheduleDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_executeDelayedItemsLayout, "QListView.executeDelayedItemsLayout()");

extern "C" {static PyObject *meth_QListView_executeDelayedItemsLayout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_executeDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            sipCpp->sipProtect_executeDelayedItemsLayout();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_executeDelayedItemsLayout, doc_QListView_executeDelayedItemsLayout);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_scrollDirtyRegion, "QListView.scrollDirtyRegion(int, int)");

extern "C" {static PyObject *meth_QListView_scrollDirtyRegion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_scrollDirtyRegion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QListView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_scrollDirtyRegion(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_scrollDirtyRegion, doc_QListView_scrollDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setDirtyRegion, "QListView.setDirtyRegion(QRegion)");

extern "C" {static PyObject *meth_QListView_setDirtyRegion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_setDirtyRegion(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRegion* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QRegion, &a0))
        {
            sipCpp->sipProtect_setDirtyRegion(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setDirtyRegion, doc_QListView_setDirtyRegion);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dirtyRegionOffset, "QListView.dirtyRegionOffset() -> QPoint");

extern "C" {static PyObject *meth_QListView_dirtyRegionOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_dirtyRegionOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->sipProtect_dirtyRegionOffset());

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dirtyRegionOffset, doc_QListView_dirtyRegionOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_viewportEvent, "QListView.viewportEvent(QEvent) -> bool");

extern "C" {static PyObject *meth_QListView_viewportEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_viewportEvent(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_viewportEvent, doc_QListView_viewportEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_mousePressEvent, "QListView.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QListView_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_mousePressEvent, doc_QListView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_mouseDoubleClickEvent, "QListView.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QListView_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_mouseDoubleClickEvent, doc_QListView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dragEnterEvent, "QListView.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QListView_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dragEnterEvent, doc_QListView_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_focusInEvent, "QListView.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QListView_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_focusInEvent, doc_QListView_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_focusOutEvent, "QListView.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QListView_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_focusOutEvent, doc_QListView_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_keyPressEvent, "QListView.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QListView_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_keyPressEvent, doc_QListView_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dropIndicatorPosition, "QListView.dropIndicatorPosition() -> QAbstractItemView.DropIndicatorPosition");

extern "C" {static PyObject *meth_QListView_dropIndicatorPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_dropIndicatorPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_dropIndicatorPosition();

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_DropIndicatorPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dropIndicatorPosition, doc_QListView_dropIndicatorPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_focusNextPrevChild, "QListView.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QListView_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_focusNextPrevChild, doc_QListView_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_inputMethodEvent, "QListView.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QListView_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_inputMethodEvent, doc_QListView_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setMovement, "QListView.setMovement(QListView.Movement)");

extern "C" {static PyObject *meth_QListView_setMovement(PyObject *, PyObject *);}
static PyObject *meth_QListView_setMovement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QListView::Movement a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_Movement, &a0))
        {
            sipCpp->setMovement(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setMovement, doc_QListView_setMovement);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_movement, "QListView.movement() -> QListView.Movement");

extern "C" {static PyObject *meth_QListView_movement(PyObject *, PyObject *);}
static PyObject *meth_QListView_movement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QListView::Movement sipRes;

            sipRes = sipCpp->movement();

            return sipConvertFromEnum(sipRes,sipType_QListView_Movement);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_movement, doc_QListView_movement);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setFlow, "QListView.setFlow(QListView.Flow)");

extern "C" {static PyObject *meth_QListView_setFlow(PyObject *, PyObject *);}
static PyObject *meth_QListView_setFlow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QListView::Flow a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_Flow, &a0))
        {
            sipCpp->setFlow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setFlow, doc_QListView_setFlow);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_flow, "QListView.flow() -> QListView.Flow");

extern "C" {static PyObject *meth_QListView_flow(PyObject *, PyObject *);}
static PyObject *meth_QListView_flow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QListView::Flow sipRes;

            sipRes = sipCpp->flow();

            return sipConvertFromEnum(sipRes,sipType_QListView_Flow);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_flow, doc_QListView_flow);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setWrapping, "QListView.setWrapping(bool)");

extern "C" {static PyObject *meth_QListView_setWrapping(PyObject *, PyObject *);}
static PyObject *meth_QListView_setWrapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            sipCpp->setWrapping(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setWrapping, doc_QListView_setWrapping);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_isWrapping, "QListView.isWrapping() -> bool");

extern "C" {static PyObject *meth_QListView_isWrapping(PyObject *, PyObject *);}
static PyObject *meth_QListView_isWrapping(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isWrapping();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_isWrapping, doc_QListView_isWrapping);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setResizeMode, "QListView.setResizeMode(QListView.ResizeMode)");

extern "C" {static PyObject *meth_QListView_setResizeMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_setResizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QListView::ResizeMode a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_ResizeMode, &a0))
        {
            sipCpp->setResizeMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setResizeMode, doc_QListView_setResizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_resizeMode, "QListView.resizeMode() -> QListView.ResizeMode");

extern "C" {static PyObject *meth_QListView_resizeMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_resizeMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QListView::ResizeMode sipRes;

            sipRes = sipCpp->resizeMode();

            return sipConvertFromEnum(sipRes,sipType_QListView_ResizeMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_resizeMode, doc_QListView_resizeMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setLayoutMode, "QListView.setLayoutMode(QListView.LayoutMode)");

extern "C" {static PyObject *meth_QListView_setLayoutMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_setLayoutMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QListView::LayoutMode a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_LayoutMode, &a0))
        {
            sipCpp->setLayoutMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setLayoutMode, doc_QListView_setLayoutMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_layoutMode, "QListView.layoutMode() -> QListView.LayoutMode");

extern "C" {static PyObject *meth_QListView_layoutMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_layoutMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QListView::LayoutMode sipRes;

            sipRes = sipCpp->layoutMode();

            return sipConvertFromEnum(sipRes,sipType_QListView_LayoutMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_layoutMode, doc_QListView_layoutMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setSpacing, "QListView.setSpacing(int)");

extern "C" {static PyObject *meth_QListView_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QListView_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            sipCpp->setSpacing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setSpacing, doc_QListView_setSpacing);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_spacing, "QListView.spacing() -> int");

extern "C" {static PyObject *meth_QListView_spacing(PyObject *, PyObject *);}
static PyObject *meth_QListView_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->spacing();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_spacing, doc_QListView_spacing);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setGridSize, "QListView.setGridSize(QSize)");

extern "C" {static PyObject *meth_QListView_setGridSize(PyObject *, PyObject *);}
static PyObject *meth_QListView_setGridSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setGridSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setGridSize, doc_QListView_setGridSize);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_gridSize, "QListView.gridSize() -> QSize");

extern "C" {static PyObject *meth_QListView_gridSize(PyObject *, PyObject *);}
static PyObject *meth_QListView_gridSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->gridSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_gridSize, doc_QListView_gridSize);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setViewMode, "QListView.setViewMode(QListView.ViewMode)");

extern "C" {static PyObject *meth_QListView_setViewMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_setViewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QListView::ViewMode a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QListView, &sipCpp, sipType_QListView_ViewMode, &a0))
        {
            sipCpp->setViewMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setViewMode, doc_QListView_setViewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_viewMode, "QListView.viewMode() -> QListView.ViewMode");

extern "C" {static PyObject *meth_QListView_viewMode(PyObject *, PyObject *);}
static PyObject *meth_QListView_viewMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QListView::ViewMode sipRes;

            sipRes = sipCpp->viewMode();

            return sipConvertFromEnum(sipRes,sipType_QListView_ViewMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_viewMode, doc_QListView_viewMode);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_clearPropertyFlags, "QListView.clearPropertyFlags()");

extern "C" {static PyObject *meth_QListView_clearPropertyFlags(PyObject *, PyObject *);}
static PyObject *meth_QListView_clearPropertyFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            sipCpp->clearPropertyFlags();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_clearPropertyFlags, doc_QListView_clearPropertyFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_isRowHidden, "QListView.isRowHidden(int) -> bool");

extern "C" {static PyObject *meth_QListView_isRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QListView_isRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isRowHidden(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_isRowHidden, doc_QListView_isRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setRowHidden, "QListView.setRowHidden(int, bool)");

extern "C" {static PyObject *meth_QListView_setRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QListView_setRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bib", &sipSelf, sipType_QListView, &sipCpp, &a0, &a1))
        {
            sipCpp->setRowHidden(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setRowHidden, doc_QListView_setRowHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setModelColumn, "QListView.setModelColumn(int)");

extern "C" {static PyObject *meth_QListView_setModelColumn(PyObject *, PyObject *);}
static PyObject *meth_QListView_setModelColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            sipCpp->setModelColumn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setModelColumn, doc_QListView_setModelColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_modelColumn, "QListView.modelColumn() -> int");

extern "C" {static PyObject *meth_QListView_modelColumn(PyObject *, PyObject *);}
static PyObject *meth_QListView_modelColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->modelColumn();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_modelColumn, doc_QListView_modelColumn);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setUniformItemSizes, "QListView.setUniformItemSizes(bool)");

extern "C" {static PyObject *meth_QListView_setUniformItemSizes(PyObject *, PyObject *);}
static PyObject *meth_QListView_setUniformItemSizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            sipCpp->setUniformItemSizes(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setUniformItemSizes, doc_QListView_setUniformItemSizes);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_uniformItemSizes, "QListView.uniformItemSizes() -> bool");

extern "C" {static PyObject *meth_QListView_uniformItemSizes(PyObject *, PyObject *);}
static PyObject *meth_QListView_uniformItemSizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->uniformItemSizes();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_uniformItemSizes, doc_QListView_uniformItemSizes);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_visualRect, "QListView.visualRect(QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QListView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QListView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QRect*sipRes;

            sipRes = new QRect((sipSelfWasArg ? sipCpp->QListView::visualRect(*a0) : sipCpp->visualRect(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_visualRect, doc_QListView_visualRect);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_scrollTo, "QListView.scrollTo(QModelIndex, QAbstractItemView.ScrollHint hint=QAbstractItemView.EnsureVisible)");

extern "C" {static PyObject *meth_QListView_scrollTo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_scrollTo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QListView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_hint,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, sipType_QAbstractItemView_ScrollHint, &a1))
        {
            (sipSelfWasArg ? sipCpp->QListView::scrollTo(*a0,a1) : sipCpp->scrollTo(*a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_scrollTo, doc_QListView_scrollTo);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_indexAt, "QListView.indexAt(QPoint) -> QModelIndex");

extern "C" {static PyObject *meth_QListView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QListView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPoint* a0;
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QPoint, &a0))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QListView::indexAt(*a0) : sipCpp->indexAt(*a0)));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_indexAt, doc_QListView_indexAt);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_reset, "QListView.reset()");

extern "C" {static PyObject *meth_QListView_reset(PyObject *, PyObject *);}
static PyObject *meth_QListView_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QListView::reset() : sipCpp->reset());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_reset, doc_QListView_reset);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setRootIndex, "QListView.setRootIndex(QModelIndex)");

extern "C" {static PyObject *meth_QListView_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QListView_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0))
        {
            (sipSelfWasArg ? sipCpp->QListView::setRootIndex(*a0) : sipCpp->setRootIndex(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setRootIndex, doc_QListView_setRootIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_scrollContentsBy, "QListView.scrollContentsBy(int, int)");

extern "C" {static PyObject *meth_QListView_scrollContentsBy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QListView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtectVirt_scrollContentsBy(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_scrollContentsBy, doc_QListView_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dataChanged, "QListView.dataChanged(QModelIndex, QModelIndex, list-of-int roles=[])");

extern "C" {static PyObject *meth_QListView_dataChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_dataChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        const QVector<int>& a2def = QVector<int>();
        const QVector<int>* a2 = &a2def;
        int a2State = 0;
        sipQListView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_roles,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|J1", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1, sipType_QVector_1800,&a2, &a2State))
        {
            sipCpp->sipProtectVirt_dataChanged(sipSelfWasArg,*a0,*a1,*a2);
            sipReleaseType(const_cast<QVector<int> *>(a2),sipType_QVector_1800,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dataChanged, doc_QListView_dataChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_rowsInserted, "QListView.rowsInserted(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QListView_rowsInserted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtectVirt_rowsInserted(sipSelfWasArg,*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_rowsInserted, doc_QListView_rowsInserted);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_rowsAboutToBeRemoved, "QListView.rowsAboutToBeRemoved(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QListView_rowsAboutToBeRemoved(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtectVirt_rowsAboutToBeRemoved(sipSelfWasArg,*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_rowsAboutToBeRemoved, doc_QListView_rowsAboutToBeRemoved);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_event, "QListView.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QListView_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_event, doc_QListView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_mouseMoveEvent, "QListView.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QListView_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_mouseMoveEvent, doc_QListView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_mouseReleaseEvent, "QListView.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QListView_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_mouseReleaseEvent, doc_QListView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_timerEvent, "QListView.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QListView_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_timerEvent, doc_QListView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_resizeEvent, "QListView.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QListView_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_resizeEvent, doc_QListView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dragMoveEvent, "QListView.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QListView_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dragMoveEvent, doc_QListView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dragLeaveEvent, "QListView.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QListView_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dragLeaveEvent, doc_QListView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_dropEvent, "QListView.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QListView_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_dropEvent, doc_QListView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_startDrag, "QListView.startDrag(Qt.DropActions)");

extern "C" {static PyObject *meth_QListView_startDrag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_startDrag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::DropActions* a0;
        int a0State = 0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1", &sipSelf, sipType_QListView, &sipCpp, sipType_Qt_DropActions, &a0, &a0State))
        {
            sipCpp->sipProtectVirt_startDrag(sipSelfWasArg,*a0);
            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_startDrag, doc_QListView_startDrag);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_viewOptions, "QListView.viewOptions() -> QStyleOptionViewItem");

extern "C" {static PyObject *meth_QListView_viewOptions(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_viewOptions(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QStyleOptionViewItem*sipRes;

            sipRes = new QStyleOptionViewItem(sipCpp->sipProtectVirt_viewOptions(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_viewOptions, doc_QListView_viewOptions);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_paintEvent, "QListView.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QListView_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QListView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_paintEvent, doc_QListView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_horizontalOffset, "QListView.horizontalOffset() -> int");

extern "C" {static PyObject *meth_QListView_horizontalOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_horizontalOffset(sipSelfWasArg);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_horizontalOffset, doc_QListView_horizontalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_verticalOffset, "QListView.verticalOffset() -> int");

extern "C" {static PyObject *meth_QListView_verticalOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_verticalOffset(sipSelfWasArg);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_verticalOffset, doc_QListView_verticalOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_moveCursor, "QListView.moveCursor(QAbstractItemView.CursorAction, Qt.KeyboardModifiers) -> QModelIndex");

extern "C" {static PyObject *meth_QListView_moveCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_moveCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::KeyboardModifiers* a1;
        int a1State = 0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BEJ1", &sipSelf, sipType_QListView, &sipCpp, sipType_QAbstractItemView_CursorAction, &a0, sipType_Qt_KeyboardModifiers, &a1, &a1State))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->sipProtectVirt_moveCursor(sipSelfWasArg,a0,*a1));
            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_moveCursor, doc_QListView_moveCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_rectForIndex, "QListView.rectForIndex(QModelIndex) -> QRect");

extern "C" {static PyObject *meth_QListView_rectForIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_rectForIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->sipProtect_rectForIndex(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_rectForIndex, doc_QListView_rectForIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setPositionForIndex, "QListView.setPositionForIndex(QPoint, QModelIndex)");

extern "C" {static PyObject *meth_QListView_setPositionForIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_setPositionForIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QModelIndex* a1;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QListView, &sipCpp, sipType_QPoint, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp->sipProtect_setPositionForIndex(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setPositionForIndex, doc_QListView_setPositionForIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setSelection, "QListView.setSelection(QRect, QItemSelectionModel.SelectionFlags)");

extern "C" {static PyObject *meth_QListView_setSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_setSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect* a0;
        QItemSelectionModel::SelectionFlags* a1;
        int a1State = 0;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QListView, &sipCpp, sipType_QRect, &a0, sipType_QItemSelectionModel_SelectionFlags, &a1, &a1State))
        {
            sipCpp->sipProtectVirt_setSelection(sipSelfWasArg,*a0,*a1);
            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setSelection, doc_QListView_setSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_visualRegionForSelection, "QListView.visualRegionForSelection(QItemSelection) -> QRegion");

extern "C" {static PyObject *meth_QListView_visualRegionForSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QItemSelection, &a0))
        {
            QRegion*sipRes;

            sipRes = new QRegion(sipCpp->sipProtectVirt_visualRegionForSelection(sipSelfWasArg,*a0));

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_visualRegionForSelection, doc_QListView_visualRegionForSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_selectedIndexes, "QListView.selectedIndexes() -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QListView_selectedIndexes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QModelIndexList*sipRes;

            sipRes = new QModelIndexList(sipCpp->sipProtectVirt_selectedIndexes(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_selectedIndexes, doc_QListView_selectedIndexes);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_updateGeometries, "QListView.updateGeometries()");

extern "C" {static PyObject *meth_QListView_updateGeometries(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            sipCpp->sipProtectVirt_updateGeometries(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_updateGeometries, doc_QListView_updateGeometries);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_isIndexHidden, "QListView.isIndexHidden(QModelIndex) -> bool");

extern "C" {static PyObject *meth_QListView_isIndexHidden(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_isIndexHidden(sipSelfWasArg,*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_isIndexHidden, doc_QListView_isIndexHidden);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_viewportSizeHint, "QListView.viewportSizeHint() -> QSize");

extern "C" {static PyObject *meth_QListView_viewportSizeHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_viewportSizeHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->sipProtectVirt_viewportSizeHint(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_viewportSizeHint, doc_QListView_viewportSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setBatchSize, "QListView.setBatchSize(int)");

extern "C" {static PyObject *meth_QListView_setBatchSize(PyObject *, PyObject *);}
static PyObject *meth_QListView_setBatchSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            sipCpp->setBatchSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setBatchSize, doc_QListView_setBatchSize);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_batchSize, "QListView.batchSize() -> int");

extern "C" {static PyObject *meth_QListView_batchSize(PyObject *, PyObject *);}
static PyObject *meth_QListView_batchSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->batchSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_batchSize, doc_QListView_batchSize);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setWordWrap, "QListView.setWordWrap(bool)");

extern "C" {static PyObject *meth_QListView_setWordWrap(PyObject *, PyObject *);}
static PyObject *meth_QListView_setWordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            sipCpp->setWordWrap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setWordWrap, doc_QListView_setWordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_wordWrap, "QListView.wordWrap() -> bool");

extern "C" {static PyObject *meth_QListView_wordWrap(PyObject *, PyObject *);}
static PyObject *meth_QListView_wordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->wordWrap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_wordWrap, doc_QListView_wordWrap);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_setSelectionRectVisible, "QListView.setSelectionRectVisible(bool)");

extern "C" {static PyObject *meth_QListView_setSelectionRectVisible(PyObject *, PyObject *);}
static PyObject *meth_QListView_setSelectionRectVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QListView, &sipCpp, &a0))
        {
            sipCpp->setSelectionRectVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_setSelectionRectVisible, doc_QListView_setSelectionRectVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_isSelectionRectVisible, "QListView.isSelectionRectVisible() -> bool");

extern "C" {static PyObject *meth_QListView_isSelectionRectVisible(PyObject *, PyObject *);}
static PyObject *meth_QListView_isSelectionRectVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QListView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QListView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSelectionRectVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_isSelectionRectVisible, doc_QListView_isSelectionRectVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_selectionChanged, "QListView.selectionChanged(QItemSelection, QItemSelection)");

extern "C" {static PyObject *meth_QListView_selectionChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection* a0;
        const QItemSelection* a1;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QListView, &sipCpp, sipType_QItemSelection, &a0, sipType_QItemSelection, &a1))
        {
            sipCpp->sipProtectVirt_selectionChanged(sipSelfWasArg,*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_selectionChanged, doc_QListView_selectionChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QListView_currentChanged, "QListView.currentChanged(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QListView_currentChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QListView_currentChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        sipQListView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QListView, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp->sipProtectVirt_currentChanged(sipSelfWasArg,*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QListView, sipName_currentChanged, doc_QListView_currentChanged);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QListView(void *, const sipTypeDef *);}
static void *cast_QListView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QListView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemView)->ctd_cast((QAbstractItemView *)(QListView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QListView(void *, int);}
static void release_QListView(void *sipCppV,int)
{
    QListView *sipCpp = reinterpret_cast<QListView *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QListView(sipSimpleWrapper *);}
static void dealloc_QListView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQListView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QListView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QListView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QListView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQListView *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQListView(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QListView[] = {{4, 255, 1}};


static PyMethodDef methods_QListView[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QListView_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_batchSize), meth_QListView_batchSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_batchSize)},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QListView_changeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QListView_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clearPropertyFlags), meth_QListView_clearPropertyFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_clearPropertyFlags)},
    {SIP_MLNAME_CAST(sipName_closeEditor), (PyCFunction)meth_QListView_closeEditor, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QListView_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_commitData), (PyCFunction)meth_QListView_commitData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QListView_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QListView_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QListView_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_currentChanged), (PyCFunction)meth_QListView_currentChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_currentChanged)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QListView_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dataChanged), (PyCFunction)meth_QListView_dataChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_dataChanged)},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QListView_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dirtyRegionOffset), (PyCFunction)meth_QListView_dirtyRegionOffset, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QListView_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QListView_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QListView_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QListView_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_drawFrame), (PyCFunction)meth_QListView_drawFrame, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QListView_dropEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_dropEvent)},
    {SIP_MLNAME_CAST(sipName_dropIndicatorPosition), (PyCFunction)meth_QListView_dropIndicatorPosition, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_edit), (PyCFunction)meth_QListView_edit, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_editorDestroyed), (PyCFunction)meth_QListView_editorDestroyed, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QListView_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QListView_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), (PyCFunction)meth_QListView_eventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_executeDelayedItemsLayout), (PyCFunction)meth_QListView_executeDelayedItemsLayout, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_flow), meth_QListView_flow, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_flow)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QListView_focusInEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QListView_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QListView_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QListView_focusOutEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QListView_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_gridSize), meth_QListView_gridSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_gridSize)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QListView_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), (PyCFunction)meth_QListView_horizontalOffset, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_horizontalOffset)},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), (PyCFunction)meth_QListView_horizontalScrollbarAction, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarValueChanged), (PyCFunction)meth_QListView_horizontalScrollbarValueChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_indexAt), meth_QListView_indexAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_indexAt)},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QListView_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QListView_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), (PyCFunction)meth_QListView_isIndexHidden, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_isIndexHidden)},
    {SIP_MLNAME_CAST(sipName_isRowHidden), meth_QListView_isRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_isRowHidden)},
    {SIP_MLNAME_CAST(sipName_isSelectionRectVisible), meth_QListView_isSelectionRectVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_isSelectionRectVisible)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QListView_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isWrapping), meth_QListView_isWrapping, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_isWrapping)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QListView_keyPressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QListView_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_layoutMode), meth_QListView_layoutMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_layoutMode)},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QListView_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QListView_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_modelColumn), meth_QListView_modelColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_modelColumn)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QListView_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QListView_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QListView_mousePressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QListView_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveCursor), (PyCFunction)meth_QListView_moveCursor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_moveCursor)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QListView_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_movement), meth_QListView_movement, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_movement)},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QListView_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QListView_paintEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QListView_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_rectForIndex), (PyCFunction)meth_QListView_rectForIndex, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_rectForIndex)},
    {SIP_MLNAME_CAST(sipName_reset), meth_QListView_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_reset)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QListView_resizeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_resizeMode), meth_QListView_resizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_resizeMode)},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), (PyCFunction)meth_QListView_rowsAboutToBeRemoved, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_rowsAboutToBeRemoved)},
    {SIP_MLNAME_CAST(sipName_rowsInserted), (PyCFunction)meth_QListView_rowsInserted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_rowsInserted)},
    {SIP_MLNAME_CAST(sipName_scheduleDelayedItemsLayout), (PyCFunction)meth_QListView_scheduleDelayedItemsLayout, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), (PyCFunction)meth_QListView_scrollContentsBy, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_scrollDirtyRegion), (PyCFunction)meth_QListView_scrollDirtyRegion, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollTo), (PyCFunction)meth_QListView_scrollTo, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_scrollTo)},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), (PyCFunction)meth_QListView_selectedIndexes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_selectedIndexes)},
    {SIP_MLNAME_CAST(sipName_selectionChanged), (PyCFunction)meth_QListView_selectionChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_selectionChanged)},
    {SIP_MLNAME_CAST(sipName_selectionCommand), (PyCFunction)meth_QListView_selectionCommand, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QListView_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QListView_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setBatchSize), meth_QListView_setBatchSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setBatchSize)},
    {SIP_MLNAME_CAST(sipName_setDirtyRegion), (PyCFunction)meth_QListView_setDirtyRegion, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setFlow), meth_QListView_setFlow, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setFlow)},
    {SIP_MLNAME_CAST(sipName_setGridSize), meth_QListView_setGridSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setGridSize)},
    {SIP_MLNAME_CAST(sipName_setLayoutMode), meth_QListView_setLayoutMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setLayoutMode)},
    {SIP_MLNAME_CAST(sipName_setModelColumn), meth_QListView_setModelColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setModelColumn)},
    {SIP_MLNAME_CAST(sipName_setMovement), meth_QListView_setMovement, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setMovement)},
    {SIP_MLNAME_CAST(sipName_setPositionForIndex), (PyCFunction)meth_QListView_setPositionForIndex, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_setPositionForIndex)},
    {SIP_MLNAME_CAST(sipName_setResizeMode), meth_QListView_setResizeMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setResizeMode)},
    {SIP_MLNAME_CAST(sipName_setRootIndex), meth_QListView_setRootIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setRootIndex)},
    {SIP_MLNAME_CAST(sipName_setRowHidden), meth_QListView_setRowHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setRowHidden)},
    {SIP_MLNAME_CAST(sipName_setSelection), (PyCFunction)meth_QListView_setSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_setSelection)},
    {SIP_MLNAME_CAST(sipName_setSelectionRectVisible), meth_QListView_setSelectionRectVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setSelectionRectVisible)},
    {SIP_MLNAME_CAST(sipName_setSpacing), meth_QListView_setSpacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setSpacing)},
    {SIP_MLNAME_CAST(sipName_setState), (PyCFunction)meth_QListView_setState, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setUniformItemSizes), meth_QListView_setUniformItemSizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setUniformItemSizes)},
    {SIP_MLNAME_CAST(sipName_setViewMode), meth_QListView_setViewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setViewMode)},
    {SIP_MLNAME_CAST(sipName_setViewportMargins), (PyCFunction)meth_QListView_setViewportMargins, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setWordWrap), meth_QListView_setWordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setWordWrap)},
    {SIP_MLNAME_CAST(sipName_setWrapping), meth_QListView_setWrapping, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_setWrapping)},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QListView_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QListView_showEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_spacing), meth_QListView_spacing, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_spacing)},
    {SIP_MLNAME_CAST(sipName_startDrag), (PyCFunction)meth_QListView_startDrag, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_startDrag)},
    {SIP_MLNAME_CAST(sipName_state), (PyCFunction)meth_QListView_state, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QListView_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QListView_timerEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_timerEvent)},
    {SIP_MLNAME_CAST(sipName_uniformItemSizes), meth_QListView_uniformItemSizes, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_uniformItemSizes)},
    {SIP_MLNAME_CAST(sipName_updateEditorData), (PyCFunction)meth_QListView_updateEditorData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometries), (PyCFunction)meth_QListView_updateEditorGeometries, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateGeometries), (PyCFunction)meth_QListView_updateGeometries, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_updateGeometries)},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QListView_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalOffset), (PyCFunction)meth_QListView_verticalOffset, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_verticalOffset)},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarAction), (PyCFunction)meth_QListView_verticalScrollbarAction, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarValueChanged), (PyCFunction)meth_QListView_verticalScrollbarValueChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewMode), meth_QListView_viewMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_viewMode)},
    {SIP_MLNAME_CAST(sipName_viewOptions), (PyCFunction)meth_QListView_viewOptions, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_viewOptions)},
    {SIP_MLNAME_CAST(sipName_viewportEvent), (PyCFunction)meth_QListView_viewportEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportSizeHint), (PyCFunction)meth_QListView_viewportSizeHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_viewportSizeHint)},
    {SIP_MLNAME_CAST(sipName_visualRect), meth_QListView_visualRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_visualRect)},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), (PyCFunction)meth_QListView_visualRegionForSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QListView_visualRegionForSelection)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QListView_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_wordWrap), meth_QListView_wordWrap, METH_VARARGS, SIP_MLDOC_CAST(doc_QListView_wordWrap)}
};

static sipEnumMemberDef enummembers_QListView[] = {
    {sipName_Adjust, static_cast<int>(QListView::Adjust), 215},
    {sipName_Batched, static_cast<int>(QListView::Batched), 213},
    {sipName_Fixed, static_cast<int>(QListView::Fixed), 215},
    {sipName_Free, static_cast<int>(QListView::Free), 214},
    {sipName_IconMode, static_cast<int>(QListView::IconMode), 216},
    {sipName_LeftToRight, static_cast<int>(QListView::LeftToRight), 212},
    {sipName_ListMode, static_cast<int>(QListView::ListMode), 216},
    {sipName_SinglePass, static_cast<int>(QListView::SinglePass), 213},
    {sipName_Snap, static_cast<int>(QListView::Snap), 214},
    {sipName_Static, static_cast<int>(QListView::Static), 214},
    {sipName_TopToBottom, static_cast<int>(QListView::TopToBottom), 212},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QListView[] = {
    {"indexesMoved(QModelIndexList)", "\1QListView.indexesMoved[list-of-QModelIndex]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QListView, "\1QListView(QWidget parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QListView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QListView,
        {0}
    },
    {
        sipNameNr_QListView,
        {0, 0, 1},
        122, methods_QListView,
        11, enummembers_QListView,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QListView,
    -1,
    -1,
    supers_QListView,
    0,
    init_type_QListView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QListView,
    0,
    0,
    0,
    release_QListView,
    cast_QListView,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QListView::staticMetaObject,
    0,
    signals_QListView,
    0
};
