/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:11 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWidgets.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsview.sip"
#include <qgraphicsview.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsview.sip"
#include <qgraphicsview.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 395 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 368 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 452 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 327 "sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsview.sip"
#include <qgraphicsview.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qabstractscrollarea.sip"
#include <qabstractscrollarea.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qscrollbar.sip"
#include <qscrollbar.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qframe.sip"
#include <qframe.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 171 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 174 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 177 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 180 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 183 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicseffect.sip"
#include <qgraphicseffect.h>
#line 186 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 189 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 195 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 198 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 201 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 204 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 207 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 210 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 635 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 213 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 275 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 216 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 408 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 219 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 382 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 222 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 225 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 228 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 231 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qlayout.sip"
#include <qlayout.h>
#line 234 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 237 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 240 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 243 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 246 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 249 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 252 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 255 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWidgets/qstyle.sip"
#include <qstyle.h>
#line 258 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 261 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 264 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 267 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 270 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 273 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 276 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 279 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 282 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 285 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 288 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"


class sipQGraphicsView : public QGraphicsView
{
public:
    sipQGraphicsView(QWidget*);
    sipQGraphicsView(QGraphicsScene*,QWidget*);
    virtual ~sipQGraphicsView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_enterEvent(bool,QEvent*);
    void sipProtectVirt_leaveEvent(bool,QEvent*);
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_closeEvent(bool,QCloseEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);
    void sipProtectVirt_actionEvent(bool,QActionEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    bool sipProtectVirt_nativeEvent(bool,const QByteArray&,void*,long*);
    QPainter* sipProtectVirt_sharedPainter(bool) const;
    void sipProtectVirt_initPainter(bool,QPainter*) const;
    void sipProtectVirt_changeEvent(bool,QEvent*);
    void sipProtect_drawFrame(QPainter*);
    void sipProtect_setViewportMargins(int,int,int,int);
    void sipProtect_setViewportMargins(const QMargins&);
    bool sipProtectVirt_eventFilter(bool,QObject*,QEvent*);
    void sipProtectVirt_setupViewport(bool,QWidget*);
    bool sipProtectVirt_event(bool,QEvent*);
    bool sipProtectVirt_viewportEvent(bool,QEvent*);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent*);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent*);
    void sipProtectVirt_dropEvent(bool,QDropEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    void sipProtectVirt_paintEvent(bool,QPaintEvent*);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    void sipProtectVirt_scrollContentsBy(bool,int,int);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    void sipProtectVirt_drawBackground(bool,QPainter*,const QRectF&);
    void sipProtectVirt_drawForeground(bool,QPainter*,const QRectF&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    void initPainter(QPainter*) const;
    QPainter* sharedPainter() const;
    bool nativeEvent(const QByteArray&,void*,long*);
    bool hasHeightForWidth() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void hideEvent(QHideEvent*);
    void actionEvent(QActionEvent*);
    void tabletEvent(QTabletEvent*);
    void closeEvent(QCloseEvent*);
    void moveEvent(QMoveEvent*);
    void leaveEvent(QEvent*);
    void enterEvent(QEvent*);
    QPaintEngine* paintEngine() const;
    int heightForWidth(int) const;
    void setVisible(bool);
    int devType() const;
    void changeEvent(QEvent*);
    bool eventFilter(QObject*,QEvent*);
    QSize minimumSizeHint() const;
    void drawForeground(QPainter*,const QRectF&);
    void drawBackground(QPainter*,const QRectF&);
    void inputMethodEvent(QInputMethodEvent*);
    void showEvent(QShowEvent*);
    void scrollContentsBy(int,int);
    void resizeEvent(QResizeEvent*);
    void paintEvent(QPaintEvent*);
    void wheelEvent(QWheelEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    bool focusNextPrevChild(bool);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void dropEvent(QDropEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void contextMenuEvent(QContextMenuEvent*);
    bool viewportEvent(QEvent*);
    bool event(QEvent*);
    void setupViewport(QWidget*);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    QSize sizeHint() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsView(const sipQGraphicsView &);
    sipQGraphicsView &operator = (const sipQGraphicsView &);

    char sipPyMethods[51];
};

sipQGraphicsView::sipQGraphicsView(QWidget*a0): QGraphicsView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsView::sipQGraphicsView(QGraphicsScene*a0,QWidget*a1): QGraphicsView(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsView::~sipQGraphicsView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGraphicsView::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWidgets_qt_metaobject(sipPySelf,sipType_QGraphicsView);
}

int sipQGraphicsView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGraphicsView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWidgets_qt_metacall(sipPySelf,sipType_QGraphicsView,_c,_id,_a);

    return _id;
}

void *sipQGraphicsView::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWidgets_qt_metacast(sipPySelf, sipType_QGraphicsView, _clname, &sipCpp) ? sipCpp : QGraphicsView::qt_metacast(_clname));
}

void sipQGraphicsView::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QGraphicsView::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QGraphicsView::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QGraphicsView::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QGraphicsView::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QGraphicsView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::initPainter(QPainter*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_initPainter);

    if (!sipMeth)
    {
        QGraphicsView::initPainter(a0);
        return;
    }

    extern void sipVH_QtWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtWidgets_3(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPainter* sipQGraphicsView::sharedPainter() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_sharedPainter);

    if (!sipMeth)
        return QGraphicsView::sharedPainter();

    extern QPainter* sipVH_QtWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWidgets_4(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQGraphicsView::nativeEvent(const QByteArray& a0,void*a1,long*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_nativeEvent);

    if (!sipMeth)
        return QGraphicsView::nativeEvent(a0,a1,a2);

    typedef bool (*sipVH_QtCore_58)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QByteArray&,void*,long*);

    return ((sipVH_QtCore_58)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[58]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQGraphicsView::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!sipMeth)
        return QGraphicsView::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQGraphicsView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QGraphicsView::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QGraphicsView::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::actionEvent(QActionEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_actionEvent);

    if (!sipMeth)
    {
        QGraphicsView::actionEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QActionEvent*);

    sipVH_QtWidgets_12(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QGraphicsView::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::closeEvent(QCloseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_closeEvent);

    if (!sipMeth)
    {
        QGraphicsView::closeEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QCloseEvent*);

    sipVH_QtWidgets_14(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QGraphicsView::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::leaveEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_leaveEvent);

    if (!sipMeth)
    {
        QGraphicsView::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::enterEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_enterEvent);

    if (!sipMeth)
    {
        QGraphicsView::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQGraphicsView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QGraphicsView::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQGraphicsView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_heightForWidth);

    if (!sipMeth)
        return QGraphicsView::heightForWidth(a0);

    typedef int (*sipVH_QtCore_63)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_63)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[63]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        QGraphicsView::setVisible(a0);
        return;
    }

    extern void sipVH_QtWidgets_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH_QtWidgets_0(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQGraphicsView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_devType);

    if (!sipMeth)
        return QGraphicsView::devType();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGraphicsView::changeEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_changeEvent);

    if (!sipMeth)
    {
        QGraphicsView::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGraphicsView::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QGraphicsView::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QSize sipQGraphicsView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!sipMeth)
        return QGraphicsView::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGraphicsView::drawForeground(QPainter*a0,const QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_drawForeground);

    if (!sipMeth)
    {
        QGraphicsView::drawForeground(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_115(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRectF&);

    sipVH_QtWidgets_115(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsView::drawBackground(QPainter*a0,const QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_drawBackground);

    if (!sipMeth)
    {
        QGraphicsView::drawBackground(a0,a1);
        return;
    }

    extern void sipVH_QtWidgets_115(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QRectF&);

    sipVH_QtWidgets_115(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsView::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QGraphicsView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtWidgets_7(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QGraphicsView::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!sipMeth)
    {
        QGraphicsView::scrollContentsBy(a0,a1);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    ((sipVH_QtGui_17)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQGraphicsView::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QGraphicsView::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::paintEvent(QPaintEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_paintEvent);

    if (!sipMeth)
    {
        QGraphicsView::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintEvent*);

    ((sipVH_QtGui_52)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QGraphicsView::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QGraphicsView::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QGraphicsView::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QGraphicsView::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QGraphicsView::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QGraphicsView::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QGraphicsView::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGraphicsView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!sipMeth)
        return QGraphicsView::focusNextPrevChild(a0);

    extern bool sipVH_QtWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtWidgets_5(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QGraphicsView::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QGraphicsView::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QGraphicsView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtWidgets_8(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QGraphicsView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtWidgets_10(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QGraphicsView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtWidgets_9(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QGraphicsView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtWidgets_11(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::contextMenuEvent(QContextMenuEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!sipMeth)
    {
        QGraphicsView::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtWidgets_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QContextMenuEvent*);

    sipVH_QtWidgets_13(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGraphicsView::viewportEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_viewportEvent);

    if (!sipMeth)
        return QGraphicsView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGraphicsView::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QGraphicsView::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGraphicsView::setupViewport(QWidget*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_setupViewport);

    if (!sipMeth)
    {
        QGraphicsView::setupViewport(a0);
        return;
    }

    extern void sipVH_QtWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*);

    sipVH_QtWidgets_1(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQGraphicsView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QGraphicsView::inputMethodQuery(a0);

    extern QVariant sipVH_QtWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtWidgets_6(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQGraphicsView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QGraphicsView::sizeHint();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtWidgets_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQGraphicsView::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQGraphicsView::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQGraphicsView::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQGraphicsView::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQGraphicsView::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQGraphicsView::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQGraphicsView::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent*a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent*a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQGraphicsView::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQGraphicsView::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQGraphicsView::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQGraphicsView::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQGraphicsView::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQGraphicsView::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

bool sipQGraphicsView::sipProtectVirt_nativeEvent(bool sipSelfWasArg,const QByteArray& a0,void*a1,long*a2)
{
    return (sipSelfWasArg ? QWidget::nativeEvent(a0,a1,a2) : nativeEvent(a0,a1,a2));
}

QPainter* sipQGraphicsView::sipProtectVirt_sharedPainter(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QWidget::sharedPainter() : sharedPainter());
}

void sipQGraphicsView::sipProtectVirt_initPainter(bool sipSelfWasArg,QPainter*a0) const
{
    (sipSelfWasArg ? QWidget::initPainter(a0) : initPainter(a0));
}

void sipQGraphicsView::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QFrame::changeEvent(a0) : changeEvent(a0));
}

void sipQGraphicsView::sipProtect_drawFrame(QPainter*a0)
{
    QFrame::drawFrame(a0);
}

void sipQGraphicsView::sipProtect_setViewportMargins(int a0,int a1,int a2,int a3)
{
    QAbstractScrollArea::setViewportMargins(a0,a1,a2,a3);
}

void sipQGraphicsView::sipProtect_setViewportMargins(const QMargins& a0)
{
    QAbstractScrollArea::setViewportMargins(a0);
}

bool sipQGraphicsView::sipProtectVirt_eventFilter(bool sipSelfWasArg,QObject*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QAbstractScrollArea::eventFilter(a0,a1) : eventFilter(a0,a1));
}

void sipQGraphicsView::sipProtectVirt_setupViewport(bool sipSelfWasArg,QWidget*a0)
{
    (sipSelfWasArg ? QGraphicsView::setupViewport(a0) : setupViewport(a0));
}

bool sipQGraphicsView::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QGraphicsView::event(a0) : event(a0));
}

bool sipQGraphicsView::sipProtectVirt_viewportEvent(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QGraphicsView::viewportEvent(a0) : viewportEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::dropEvent(a0) : dropEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::focusInEvent(a0) : focusInEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::focusOutEvent(a0) : focusOutEvent(a0));
}

bool sipQGraphicsView::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QGraphicsView::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQGraphicsView::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::wheelEvent(a0) : wheelEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::paintEvent(a0) : paintEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::resizeEvent(a0) : resizeEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_scrollContentsBy(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ? QGraphicsView::scrollContentsBy(a0,a1) : scrollContentsBy(a0,a1));
}

void sipQGraphicsView::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::showEvent(a0) : showEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QGraphicsView::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQGraphicsView::sipProtectVirt_drawBackground(bool sipSelfWasArg,QPainter*a0,const QRectF& a1)
{
    (sipSelfWasArg ? QGraphicsView::drawBackground(a0,a1) : drawBackground(a0,a1));
}

void sipQGraphicsView::sipProtectVirt_drawForeground(bool sipSelfWasArg,QPainter*a0,const QRectF& a1)
{
    (sipSelfWasArg ? QGraphicsView::drawForeground(a0,a1) : drawForeground(a0,a1));
}


PyDoc_STRVAR(doc_QGraphicsView_sender, "QGraphicsView.sender() -> QObject");

extern "C" {static PyObject *meth_QGraphicsView_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1658 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_sender, doc_QGraphicsView_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_receivers, "QGraphicsView.receivers(signal) -> int");

extern "C" {static PyObject *meth_QGraphicsView_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1717 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWidgets/sipQtWidgetsQGraphicsView.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_receivers, doc_QGraphicsView_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_timerEvent, "QGraphicsView.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QGraphicsView_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_timerEvent, doc_QGraphicsView_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_childEvent, "QGraphicsView.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QGraphicsView_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_childEvent, doc_QGraphicsView_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_customEvent, "QGraphicsView.customEvent(QEvent)");

extern "C" {static PyObject *meth_QGraphicsView_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_customEvent, doc_QGraphicsView_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_connectNotify, "QGraphicsView.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QGraphicsView_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_connectNotify, doc_QGraphicsView_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_disconnectNotify, "QGraphicsView.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QGraphicsView_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_disconnectNotify, doc_QGraphicsView_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_senderSignalIndex, "QGraphicsView.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QGraphicsView_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_senderSignalIndex, doc_QGraphicsView_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_isSignalConnected, "QGraphicsView.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QGraphicsView_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_isSignalConnected, doc_QGraphicsView_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_enterEvent, "QGraphicsView.enterEvent(QEvent)");

extern "C" {static PyObject *meth_QGraphicsView_enterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_enterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_enterEvent, doc_QGraphicsView_enterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_leaveEvent, "QGraphicsView.leaveEvent(QEvent)");

extern "C" {static PyObject *meth_QGraphicsView_leaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_leaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_leaveEvent, doc_QGraphicsView_leaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_moveEvent, "QGraphicsView.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QGraphicsView_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_moveEvent, doc_QGraphicsView_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_closeEvent, "QGraphicsView.closeEvent(QCloseEvent)");

extern "C" {static PyObject *meth_QGraphicsView_closeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_closeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QCloseEvent, &a0))
        {
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_closeEvent, doc_QGraphicsView_closeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_tabletEvent, "QGraphicsView.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QGraphicsView_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_tabletEvent, doc_QGraphicsView_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_actionEvent, "QGraphicsView.actionEvent(QActionEvent)");

extern "C" {static PyObject *meth_QGraphicsView_actionEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_actionEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QActionEvent, &a0))
        {
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_actionEvent, doc_QGraphicsView_actionEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_hideEvent, "QGraphicsView.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QGraphicsView_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_hideEvent, doc_QGraphicsView_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_metric, "QGraphicsView.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QGraphicsView_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_metric, doc_QGraphicsView_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_updateMicroFocus, "QGraphicsView.updateMicroFocus()");

extern "C" {static PyObject *meth_QGraphicsView_updateMicroFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            sipCpp->sipProtect_updateMicroFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_updateMicroFocus, doc_QGraphicsView_updateMicroFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_create, "QGraphicsView.create(sip.voidptr window=0, bool initializeWindow=True, bool destroyOldWindow=True)");

extern "C" {static PyObject *meth_QGraphicsView_create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        WId a0def = 0;
        WId* a0 = &a0def;
        int a0State = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_initializeWindow,
            sipName_destroyOldWindow,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1bb", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_quintptr,&a0, &a0State, &a1, &a2))
        {
            sipCpp->sipProtect_create(*a0,a1,a2);
            sipReleaseType(a0,sipType_quintptr,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_create, doc_QGraphicsView_create);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_destroy, "QGraphicsView.destroy(bool destroyWindow=True, bool destroySubWindows=True)");

extern "C" {static PyObject *meth_QGraphicsView_destroy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_destroy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_destroyWindow,
            sipName_destroySubWindows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|bb", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtect_destroy(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_destroy, doc_QGraphicsView_destroy);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_focusNextChild, "QGraphicsView.focusNextChild() -> bool");

extern "C" {static PyObject *meth_QGraphicsView_focusNextChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_focusNextChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusNextChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_focusNextChild, doc_QGraphicsView_focusNextChild);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_focusPreviousChild, "QGraphicsView.focusPreviousChild() -> bool");

extern "C" {static PyObject *meth_QGraphicsView_focusPreviousChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_focusPreviousChild();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_focusPreviousChild, doc_QGraphicsView_focusPreviousChild);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_nativeEvent, "QGraphicsView.nativeEvent(QByteArray, sip.voidptr) -> (bool, int)");

extern "C" {static PyObject *meth_QGraphicsView_nativeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_nativeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QByteArray* a0;
        int a0State = 0;
        void* a1;
        long a2;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1v", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QByteArray, &a0, &a0State, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_nativeEvent(sipSelfWasArg,*a0,a1,&a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipBuildResult(0,"(bl)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_nativeEvent, doc_QGraphicsView_nativeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_sharedPainter, "QGraphicsView.sharedPainter() -> QPainter");

extern "C" {static PyObject *meth_QGraphicsView_sharedPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_sharedPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QPainter*sipRes;

            sipRes = sipCpp->sipProtectVirt_sharedPainter(sipSelfWasArg);

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_sharedPainter, doc_QGraphicsView_sharedPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_initPainter, "QGraphicsView.initPainter(QPainter)");

extern "C" {static PyObject *meth_QGraphicsView_initPainter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_initPainter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtectVirt_initPainter(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_initPainter, doc_QGraphicsView_initPainter);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_changeEvent, "QGraphicsView.changeEvent(QEvent)");

extern "C" {static PyObject *meth_QGraphicsView_changeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_changeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_changeEvent, doc_QGraphicsView_changeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_drawFrame, "QGraphicsView.drawFrame(QPainter)");

extern "C" {static PyObject *meth_QGraphicsView_drawFrame(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_drawFrame(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->sipProtect_drawFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_drawFrame, doc_QGraphicsView_drawFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setViewportMargins, "QGraphicsView.setViewportMargins(int, int, int, int)\n"
    "QGraphicsView.setViewportMargins(QMargins)");

extern "C" {static PyObject *meth_QGraphicsView_setViewportMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setViewportMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Biiii", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->sipProtect_setViewportMargins(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QMargins* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMargins, &a0))
        {
            sipCpp->sipProtect_setViewportMargins(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setViewportMargins, doc_QGraphicsView_setViewportMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_eventFilter, "QGraphicsView.eventFilter(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsView_eventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_eventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_eventFilter, doc_QGraphicsView_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_sizeHint, "QGraphicsView.sizeHint() -> QSize");

extern "C" {static PyObject *meth_QGraphicsView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize((sipSelfWasArg ? sipCpp->QGraphicsView::sizeHint() : sipCpp->sizeHint()));

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_sizeHint, doc_QGraphicsView_sizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_renderHints, "QGraphicsView.renderHints() -> QPainter.RenderHints");

extern "C" {static PyObject *meth_QGraphicsView_renderHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_renderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QPainter::RenderHints*sipRes;

            sipRes = new QPainter::RenderHints(sipCpp->renderHints());

            return sipConvertFromNewType(sipRes,sipType_QPainter_RenderHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_renderHints, doc_QGraphicsView_renderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setRenderHint, "QGraphicsView.setRenderHint(QPainter.RenderHint, bool on=True)");

extern "C" {static PyObject *meth_QGraphicsView_setRenderHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setRenderHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHint a0;
        bool a1 = 1;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainter_RenderHint, &a0, &a1))
        {
            sipCpp->setRenderHint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setRenderHint, doc_QGraphicsView_setRenderHint);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setRenderHints, "QGraphicsView.setRenderHints(QPainter.RenderHints)");

extern "C" {static PyObject *meth_QGraphicsView_setRenderHints(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setRenderHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter::RenderHints* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainter_RenderHints, &a0, &a0State))
        {
            sipCpp->setRenderHints(*a0);
            sipReleaseType(a0,sipType_QPainter_RenderHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setRenderHints, doc_QGraphicsView_setRenderHints);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_alignment, "QGraphicsView.alignment() -> Qt.Alignment");

extern "C" {static PyObject *meth_QGraphicsView_alignment(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_alignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            Qt::Alignment*sipRes;

            sipRes = new Qt::Alignment(sipCpp->alignment());

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_alignment, doc_QGraphicsView_alignment);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setAlignment, "QGraphicsView.setAlignment(Qt.Alignment)");

extern "C" {static PyObject *meth_QGraphicsView_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::Alignment* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_Qt_Alignment, &a0, &a0State))
        {
            sipCpp->setAlignment(*a0);
            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setAlignment, doc_QGraphicsView_setAlignment);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_transformationAnchor, "QGraphicsView.transformationAnchor() -> QGraphicsView.ViewportAnchor");

extern "C" {static PyObject *meth_QGraphicsView_transformationAnchor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_transformationAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsView::ViewportAnchor sipRes;

            sipRes = sipCpp->transformationAnchor();

            return sipConvertFromEnum(sipRes,sipType_QGraphicsView_ViewportAnchor);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_transformationAnchor, doc_QGraphicsView_transformationAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setTransformationAnchor, "QGraphicsView.setTransformationAnchor(QGraphicsView.ViewportAnchor)");

extern "C" {static PyObject *meth_QGraphicsView_setTransformationAnchor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setTransformationAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::ViewportAnchor a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_ViewportAnchor, &a0))
        {
            sipCpp->setTransformationAnchor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setTransformationAnchor, doc_QGraphicsView_setTransformationAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_resizeAnchor, "QGraphicsView.resizeAnchor() -> QGraphicsView.ViewportAnchor");

extern "C" {static PyObject *meth_QGraphicsView_resizeAnchor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_resizeAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsView::ViewportAnchor sipRes;

            sipRes = sipCpp->resizeAnchor();

            return sipConvertFromEnum(sipRes,sipType_QGraphicsView_ViewportAnchor);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_resizeAnchor, doc_QGraphicsView_resizeAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setResizeAnchor, "QGraphicsView.setResizeAnchor(QGraphicsView.ViewportAnchor)");

extern "C" {static PyObject *meth_QGraphicsView_setResizeAnchor(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setResizeAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::ViewportAnchor a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_ViewportAnchor, &a0))
        {
            sipCpp->setResizeAnchor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setResizeAnchor, doc_QGraphicsView_setResizeAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_dragMode, "QGraphicsView.dragMode() -> QGraphicsView.DragMode");

extern "C" {static PyObject *meth_QGraphicsView_dragMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_dragMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsView::DragMode sipRes;

            sipRes = sipCpp->dragMode();

            return sipConvertFromEnum(sipRes,sipType_QGraphicsView_DragMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_dragMode, doc_QGraphicsView_dragMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setDragMode, "QGraphicsView.setDragMode(QGraphicsView.DragMode)");

extern "C" {static PyObject *meth_QGraphicsView_setDragMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setDragMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::DragMode a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_DragMode, &a0))
        {
            sipCpp->setDragMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setDragMode, doc_QGraphicsView_setDragMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_cacheMode, "QGraphicsView.cacheMode() -> QGraphicsView.CacheMode");

extern "C" {static PyObject *meth_QGraphicsView_cacheMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_cacheMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsView::CacheMode*sipRes;

            sipRes = new QGraphicsView::CacheMode(sipCpp->cacheMode());

            return sipConvertFromNewType(sipRes,sipType_QGraphicsView_CacheMode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_cacheMode, doc_QGraphicsView_cacheMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setCacheMode, "QGraphicsView.setCacheMode(QGraphicsView.CacheMode)");

extern "C" {static PyObject *meth_QGraphicsView_setCacheMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setCacheMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::CacheMode* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_CacheMode, &a0, &a0State))
        {
            sipCpp->setCacheMode(*a0);
            sipReleaseType(a0,sipType_QGraphicsView_CacheMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setCacheMode, doc_QGraphicsView_setCacheMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_resetCachedContent, "QGraphicsView.resetCachedContent()");

extern "C" {static PyObject *meth_QGraphicsView_resetCachedContent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_resetCachedContent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            sipCpp->resetCachedContent();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_resetCachedContent, doc_QGraphicsView_resetCachedContent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_isInteractive, "QGraphicsView.isInteractive() -> bool");

extern "C" {static PyObject *meth_QGraphicsView_isInteractive(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_isInteractive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isInteractive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_isInteractive, doc_QGraphicsView_isInteractive);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setInteractive, "QGraphicsView.setInteractive(bool)");

extern "C" {static PyObject *meth_QGraphicsView_setInteractive(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setInteractive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0))
        {
            sipCpp->setInteractive(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setInteractive, doc_QGraphicsView_setInteractive);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_scene, "QGraphicsView.scene() -> QGraphicsScene");

extern "C" {static PyObject *meth_QGraphicsView_scene(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_scene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsScene*sipRes;

            sipRes = sipCpp->scene();

            return sipConvertFromType(sipRes,sipType_QGraphicsScene,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_scene, doc_QGraphicsView_scene);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setScene, "QGraphicsView.setScene(QGraphicsScene)");

extern "C" {static PyObject *meth_QGraphicsView_setScene(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsScene* a0;
        PyObject *a0Keep;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B@J8", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0Keep, sipType_QGraphicsScene, &a0))
        {
            sipCpp->setScene(a0);

            sipKeepReference(sipSelf, -28, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setScene, doc_QGraphicsView_setScene);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_sceneRect, "QGraphicsView.sceneRect() -> QRectF");

extern "C" {static PyObject *meth_QGraphicsView_sceneRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_sceneRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->sceneRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_sceneRect, doc_QGraphicsView_sceneRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setSceneRect, "QGraphicsView.setSceneRect(QRectF)\n"
    "QGraphicsView.setSceneRect(float, float, float, float)");

extern "C" {static PyObject *meth_QGraphicsView_setSceneRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setSceneRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setSceneRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setSceneRect(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setSceneRect, doc_QGraphicsView_setSceneRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_rotate, "QGraphicsView.rotate(float)");

extern "C" {static PyObject *meth_QGraphicsView_rotate(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_rotate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0))
        {
            sipCpp->rotate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_rotate, doc_QGraphicsView_rotate);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_scale, "QGraphicsView.scale(float, float)");

extern "C" {static PyObject *meth_QGraphicsView_scale(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            sipCpp->scale(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_scale, doc_QGraphicsView_scale);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_shear, "QGraphicsView.shear(float, float)");

extern "C" {static PyObject *meth_QGraphicsView_shear(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_shear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            sipCpp->shear(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_shear, doc_QGraphicsView_shear);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_translate, "QGraphicsView.translate(float, float)");

extern "C" {static PyObject *meth_QGraphicsView_translate(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_translate, doc_QGraphicsView_translate);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_centerOn, "QGraphicsView.centerOn(QPointF)\n"
    "QGraphicsView.centerOn(QGraphicsItem)\n"
    "QGraphicsView.centerOn(float, float)");

extern "C" {static PyObject *meth_QGraphicsView_centerOn(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_centerOn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            sipCpp->centerOn(*a0);
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QGraphicsItem* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsItem, &a0))
        {
            sipCpp->centerOn(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            sipCpp->centerOn(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_centerOn, doc_QGraphicsView_centerOn);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_ensureVisible, "QGraphicsView.ensureVisible(QRectF, int xMargin=50, int yMargin=50)\n"
    "QGraphicsView.ensureVisible(QGraphicsItem, int xMargin=50, int yMargin=50)\n"
    "QGraphicsView.ensureVisible(float, float, float, float, int xMargin=50, int yMargin=50)");

extern "C" {static PyObject *meth_QGraphicsView_ensureVisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_ensureVisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        int a1 = 50;
        int a2 = 50;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_xMargin,
            sipName_yMargin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|ii", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRectF, &a0, &a1, &a2))
        {
            sipCpp->ensureVisible(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QGraphicsItem* a0;
        int a1 = 50;
        int a2 = 50;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_xMargin,
            sipName_yMargin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|ii", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsItem, &a0, &a1, &a2))
        {
            sipCpp->ensureVisible(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        int a4 = 50;
        int a5 = 50;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_xMargin,
            sipName_yMargin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdddd|ii", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1, &a2, &a3, &a4, &a5))
        {
            sipCpp->ensureVisible(a0,a1,a2,a3,a4,a5);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_ensureVisible, doc_QGraphicsView_ensureVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_fitInView, "QGraphicsView.fitInView(QRectF, Qt.AspectRatioMode mode=Qt.IgnoreAspectRatio)\n"
    "QGraphicsView.fitInView(QGraphicsItem, Qt.AspectRatioMode mode=Qt.IgnoreAspectRatio)\n"
    "QGraphicsView.fitInView(float, float, float, float, Qt.AspectRatioMode mode=Qt.IgnoreAspectRatio)");

extern "C" {static PyObject *meth_QGraphicsView_fitInView(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_fitInView(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        Qt::AspectRatioMode a1 = Qt::IgnoreAspectRatio;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRectF, &a0, sipType_Qt_AspectRatioMode, &a1))
        {
            sipCpp->fitInView(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QGraphicsItem* a0;
        Qt::AspectRatioMode a1 = Qt::IgnoreAspectRatio;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|E", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsItem, &a0, sipType_Qt_AspectRatioMode, &a1))
        {
            sipCpp->fitInView(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        Qt::AspectRatioMode a4 = Qt::IgnoreAspectRatio;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bdddd|E", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_AspectRatioMode, &a4))
        {
            sipCpp->fitInView(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_fitInView, doc_QGraphicsView_fitInView);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_render, "QGraphicsView.render(QPainter, QRectF target=QRectF(), QRect source=QRect(), Qt.AspectRatioMode mode=Qt.KeepAspectRatio)");

extern "C" {static PyObject *meth_QGraphicsView_render(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_render(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        const QRectF& a1def = QRectF();
        const QRectF* a1 = &a1def;
        const QRect& a2def = QRect();
        const QRect* a2 = &a2def;
        Qt::AspectRatioMode a3 = Qt::KeepAspectRatio;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_target,
            sipName_source,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J9J9E", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1, sipType_QRect, &a2, sipType_Qt_AspectRatioMode, &a3))
        {
            sipCpp->render(a0,*a1,*a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_render, doc_QGraphicsView_render);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_items, "QGraphicsView.items() -> list-of-QGraphicsItem\n"
    "QGraphicsView.items(QPoint) -> list-of-QGraphicsItem\n"
    "QGraphicsView.items(int, int) -> list-of-QGraphicsItem\n"
    "QGraphicsView.items(int, int, int, int, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape) -> list-of-QGraphicsItem\n"
    "QGraphicsView.items(QRect, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape) -> list-of-QGraphicsItem\n"
    "QGraphicsView.items(QPolygon, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape) -> list-of-QGraphicsItem\n"
    "QGraphicsView.items(QPainterPath, Qt.ItemSelectionMode mode=Qt.IntersectsItemShape) -> list-of-QGraphicsItem");

extern "C" {static PyObject *meth_QGraphicsView_items(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_items(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->items());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        const QPoint* a0;
        const QGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPoint, &a0))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->items(*a0));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        int a0;
        int a1;
        const QGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->items(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        Qt::ItemSelectionMode a4 = Qt::IntersectsItemShape;
        const QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            NULL,
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii|E", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1, &a2, &a3, sipType_Qt_ItemSelectionMode, &a4))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->items(a0,a1,a2,a3,a4));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        const QRect* a0;
        Qt::ItemSelectionMode a1 = Qt::IntersectsItemShape;
        const QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRect, &a0, sipType_Qt_ItemSelectionMode, &a1))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->items(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        const QPolygon* a0;
        Qt::ItemSelectionMode a1 = Qt::IntersectsItemShape;
        const QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPolygon, &a0, sipType_Qt_ItemSelectionMode, &a1))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->items(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    {
        const QPainterPath* a0;
        Qt::ItemSelectionMode a1 = Qt::IntersectsItemShape;
        const QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainterPath, &a0, sipType_Qt_ItemSelectionMode, &a1))
        {
            QList<QGraphicsItem*>*sipRes;

            sipRes = new QList<QGraphicsItem*>(sipCpp->items(*a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QList_0101QGraphicsItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_items, doc_QGraphicsView_items);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_itemAt, "QGraphicsView.itemAt(QPoint) -> QGraphicsItem\n"
    "QGraphicsView.itemAt(int, int) -> QGraphicsItem");

extern "C" {static PyObject *meth_QGraphicsView_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPoint, &a0))
        {
            QGraphicsItem*sipRes;

            sipRes = sipCpp->itemAt(*a0);

            return sipConvertFromType(sipRes,sipType_QGraphicsItem,NULL);
        }
    }

    {
        int a0;
        int a1;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            QGraphicsItem*sipRes;

            sipRes = sipCpp->itemAt(a0,a1);

            return sipConvertFromType(sipRes,sipType_QGraphicsItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_itemAt, doc_QGraphicsView_itemAt);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_mapToScene, "QGraphicsView.mapToScene(QPoint) -> QPointF\n"
    "QGraphicsView.mapToScene(QRect) -> QPolygonF\n"
    "QGraphicsView.mapToScene(QPolygon) -> QPolygonF\n"
    "QGraphicsView.mapToScene(QPainterPath) -> QPainterPath\n"
    "QGraphicsView.mapToScene(int, int) -> QPointF\n"
    "QGraphicsView.mapToScene(int, int, int, int) -> QPolygonF");

extern "C" {static PyObject *meth_QGraphicsView_mapToScene(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_mapToScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPoint* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPoint, &a0))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->mapToScene(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    {
        const QRect* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRect, &a0))
        {
            QPolygonF*sipRes;

            sipRes = new QPolygonF(sipCpp->mapToScene(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    {
        const QPolygon* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPolygon, &a0))
        {
            QPolygonF*sipRes;

            sipRes = new QPolygonF(sipCpp->mapToScene(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    {
        const QPainterPath* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainterPath, &a0))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath(sipCpp->mapToScene(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    {
        int a0;
        int a1;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->mapToScene(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1, &a2, &a3))
        {
            QPolygonF*sipRes;

            sipRes = new QPolygonF(sipCpp->mapToScene(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QPolygonF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_mapToScene, doc_QGraphicsView_mapToScene);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_mapFromScene, "QGraphicsView.mapFromScene(QPointF) -> QPoint\n"
    "QGraphicsView.mapFromScene(QRectF) -> QPolygon\n"
    "QGraphicsView.mapFromScene(QPolygonF) -> QPolygon\n"
    "QGraphicsView.mapFromScene(QPainterPath) -> QPainterPath\n"
    "QGraphicsView.mapFromScene(float, float) -> QPoint\n"
    "QGraphicsView.mapFromScene(float, float, float, float) -> QPolygon");

extern "C" {static PyObject *meth_QGraphicsView_mapFromScene(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_mapFromScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->mapFromScene(*a0));
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    {
        const QRectF* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRectF, &a0))
        {
            QPolygon*sipRes;

            sipRes = new QPolygon(sipCpp->mapFromScene(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    {
        const QPolygonF* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPolygonF, &a0))
        {
            QPolygon*sipRes;

            sipRes = new QPolygon(sipCpp->mapFromScene(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    {
        const QPainterPath* a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainterPath, &a0))
        {
            QPainterPath*sipRes;

            sipRes = new QPainterPath(sipCpp->mapFromScene(*a0));

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    {
        qreal a0;
        qreal a1;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            QPoint*sipRes;

            sipRes = new QPoint(sipCpp->mapFromScene(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdddd", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1, &a2, &a3))
        {
            QPolygon*sipRes;

            sipRes = new QPolygon(sipCpp->mapFromScene(a0,a1,a2,a3));

            return sipConvertFromNewType(sipRes,sipType_QPolygon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_mapFromScene, doc_QGraphicsView_mapFromScene);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_inputMethodQuery, "QGraphicsView.inputMethodQuery(Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QGraphicsView_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QGraphicsView::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_inputMethodQuery, doc_QGraphicsView_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_backgroundBrush, "QGraphicsView.backgroundBrush() -> QBrush");

extern "C" {static PyObject *meth_QGraphicsView_backgroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_backgroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->backgroundBrush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_backgroundBrush, doc_QGraphicsView_backgroundBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setBackgroundBrush, "QGraphicsView.setBackgroundBrush(QBrush)");

extern "C" {static PyObject *meth_QGraphicsView_setBackgroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setBackgroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setBackgroundBrush(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setBackgroundBrush, doc_QGraphicsView_setBackgroundBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_foregroundBrush, "QGraphicsView.foregroundBrush() -> QBrush");

extern "C" {static PyObject *meth_QGraphicsView_foregroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_foregroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QBrush*sipRes;

            sipRes = new QBrush(sipCpp->foregroundBrush());

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_foregroundBrush, doc_QGraphicsView_foregroundBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setForegroundBrush, "QGraphicsView.setForegroundBrush(QBrush)");

extern "C" {static PyObject *meth_QGraphicsView_setForegroundBrush(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setForegroundBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QBrush* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QBrush, &a0, &a0State))
        {
            sipCpp->setForegroundBrush(*a0);
            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setForegroundBrush, doc_QGraphicsView_setForegroundBrush);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_invalidateScene, "QGraphicsView.invalidateScene(QRectF rect=QRectF(), QGraphicsScene.SceneLayers layers=QGraphicsScene.AllLayers)");

extern "C" {static PyObject *meth_QGraphicsView_invalidateScene(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_invalidateScene(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF& a0def = QRectF();
        const QRectF* a0 = &a0def;
        QGraphicsScene::SceneLayers a1def = QGraphicsScene::AllLayers;
        QGraphicsScene::SceneLayers* a1 = &a1def;
        int a1State = 0;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
            sipName_layers,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9J1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRectF, &a0, sipType_QGraphicsScene_SceneLayers, &a1, &a1State))
        {
            sipCpp->invalidateScene(*a0,*a1);
            sipReleaseType(a1,sipType_QGraphicsScene_SceneLayers,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_invalidateScene, doc_QGraphicsView_invalidateScene);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_updateScene, "QGraphicsView.updateScene(list-of-QRectF)");

extern "C" {static PyObject *meth_QGraphicsView_updateScene(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_updateScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QList<QRectF>* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QList_0100QRectF,&a0, &a0State))
        {
            sipCpp->updateScene(*a0);
            sipReleaseType(const_cast<QList<QRectF> *>(a0),sipType_QList_0100QRectF,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_updateScene, doc_QGraphicsView_updateScene);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_updateSceneRect, "QGraphicsView.updateSceneRect(QRectF)");

extern "C" {static PyObject *meth_QGraphicsView_updateSceneRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_updateSceneRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->updateSceneRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_updateSceneRect, doc_QGraphicsView_updateSceneRect);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setupViewport, "QGraphicsView.setupViewport(QWidget)");

extern "C" {static PyObject *meth_QGraphicsView_setupViewport(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setupViewport(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->sipProtectVirt_setupViewport(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setupViewport, doc_QGraphicsView_setupViewport);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_event, "QGraphicsView.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsView_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_event, doc_QGraphicsView_event);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_viewportEvent, "QGraphicsView.viewportEvent(QEvent) -> bool");

extern "C" {static PyObject *meth_QGraphicsView_viewportEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_viewportEvent(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_viewportEvent, doc_QGraphicsView_viewportEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_contextMenuEvent, "QGraphicsView.contextMenuEvent(QContextMenuEvent)");

extern "C" {static PyObject *meth_QGraphicsView_contextMenuEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QContextMenuEvent, &a0))
        {
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_contextMenuEvent, doc_QGraphicsView_contextMenuEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_dragEnterEvent, "QGraphicsView.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QGraphicsView_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_dragEnterEvent, doc_QGraphicsView_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_dragLeaveEvent, "QGraphicsView.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QGraphicsView_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_dragLeaveEvent, doc_QGraphicsView_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_dragMoveEvent, "QGraphicsView.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QGraphicsView_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_dragMoveEvent, doc_QGraphicsView_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_dropEvent, "QGraphicsView.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QGraphicsView_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_dropEvent, doc_QGraphicsView_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_focusInEvent, "QGraphicsView.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QGraphicsView_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_focusInEvent, doc_QGraphicsView_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_focusOutEvent, "QGraphicsView.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QGraphicsView_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_focusOutEvent, doc_QGraphicsView_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_focusNextPrevChild, "QGraphicsView.focusNextPrevChild(bool) -> bool");

extern "C" {static PyObject *meth_QGraphicsView_focusNextPrevChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_focusNextPrevChild, doc_QGraphicsView_focusNextPrevChild);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_keyPressEvent, "QGraphicsView.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QGraphicsView_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_keyPressEvent, doc_QGraphicsView_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_keyReleaseEvent, "QGraphicsView.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QGraphicsView_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_keyReleaseEvent, doc_QGraphicsView_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_mouseDoubleClickEvent, "QGraphicsView.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsView_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_mouseDoubleClickEvent, doc_QGraphicsView_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_mousePressEvent, "QGraphicsView.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsView_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_mousePressEvent, doc_QGraphicsView_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_mouseMoveEvent, "QGraphicsView.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsView_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_mouseMoveEvent, doc_QGraphicsView_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_mouseReleaseEvent, "QGraphicsView.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QGraphicsView_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_mouseReleaseEvent, doc_QGraphicsView_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_wheelEvent, "QGraphicsView.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QGraphicsView_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_wheelEvent, doc_QGraphicsView_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_paintEvent, "QGraphicsView.paintEvent(QPaintEvent)");

extern "C" {static PyObject *meth_QGraphicsView_paintEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_paintEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPaintEvent, &a0))
        {
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_paintEvent, doc_QGraphicsView_paintEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_resizeEvent, "QGraphicsView.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QGraphicsView_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_resizeEvent, doc_QGraphicsView_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_scrollContentsBy, "QGraphicsView.scrollContentsBy(int, int)");

extern "C" {static PyObject *meth_QGraphicsView_scrollContentsBy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bii", &sipSelf, sipType_QGraphicsView, &sipCpp, &a0, &a1))
        {
            sipCpp->sipProtectVirt_scrollContentsBy(sipSelfWasArg,a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_scrollContentsBy, doc_QGraphicsView_scrollContentsBy);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_showEvent, "QGraphicsView.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QGraphicsView_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_showEvent, doc_QGraphicsView_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_inputMethodEvent, "QGraphicsView.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QGraphicsView_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_inputMethodEvent, doc_QGraphicsView_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_drawBackground, "QGraphicsView.drawBackground(QPainter, QRectF)");

extern "C" {static PyObject *meth_QGraphicsView_drawBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_drawBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QRectF* a1;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1))
        {
            sipCpp->sipProtectVirt_drawBackground(sipSelfWasArg,a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_drawBackground, doc_QGraphicsView_drawBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_drawForeground, "QGraphicsView.drawForeground(QPainter, QRectF)");

extern "C" {static PyObject *meth_QGraphicsView_drawForeground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_drawForeground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QRectF* a1;
        sipQGraphicsView *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QPainter, &a0, sipType_QRectF, &a1))
        {
            sipCpp->sipProtectVirt_drawForeground(sipSelfWasArg,a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_drawForeground, doc_QGraphicsView_drawForeground);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_viewportUpdateMode, "QGraphicsView.viewportUpdateMode() -> QGraphicsView.ViewportUpdateMode");

extern "C" {static PyObject *meth_QGraphicsView_viewportUpdateMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_viewportUpdateMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsView::ViewportUpdateMode sipRes;

            sipRes = sipCpp->viewportUpdateMode();

            return sipConvertFromEnum(sipRes,sipType_QGraphicsView_ViewportUpdateMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_viewportUpdateMode, doc_QGraphicsView_viewportUpdateMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setViewportUpdateMode, "QGraphicsView.setViewportUpdateMode(QGraphicsView.ViewportUpdateMode)");

extern "C" {static PyObject *meth_QGraphicsView_setViewportUpdateMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setViewportUpdateMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::ViewportUpdateMode a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_ViewportUpdateMode, &a0))
        {
            sipCpp->setViewportUpdateMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setViewportUpdateMode, doc_QGraphicsView_setViewportUpdateMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_optimizationFlags, "QGraphicsView.optimizationFlags() -> QGraphicsView.OptimizationFlags");

extern "C" {static PyObject *meth_QGraphicsView_optimizationFlags(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_optimizationFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QGraphicsView::OptimizationFlags*sipRes;

            sipRes = new QGraphicsView::OptimizationFlags(sipCpp->optimizationFlags());

            return sipConvertFromNewType(sipRes,sipType_QGraphicsView_OptimizationFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_optimizationFlags, doc_QGraphicsView_optimizationFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setOptimizationFlag, "QGraphicsView.setOptimizationFlag(QGraphicsView.OptimizationFlag, bool enabled=True)");

extern "C" {static PyObject *meth_QGraphicsView_setOptimizationFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setOptimizationFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::OptimizationFlag a0;
        bool a1 = 1;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_OptimizationFlag, &a0, &a1))
        {
            sipCpp->setOptimizationFlag(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setOptimizationFlag, doc_QGraphicsView_setOptimizationFlag);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setOptimizationFlags, "QGraphicsView.setOptimizationFlags(QGraphicsView.OptimizationFlags)");

extern "C" {static PyObject *meth_QGraphicsView_setOptimizationFlags(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setOptimizationFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView::OptimizationFlags* a0;
        int a0State = 0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QGraphicsView_OptimizationFlags, &a0, &a0State))
        {
            sipCpp->setOptimizationFlags(*a0);
            sipReleaseType(a0,sipType_QGraphicsView_OptimizationFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setOptimizationFlags, doc_QGraphicsView_setOptimizationFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_rubberBandSelectionMode, "QGraphicsView.rubberBandSelectionMode() -> Qt.ItemSelectionMode");

extern "C" {static PyObject *meth_QGraphicsView_rubberBandSelectionMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_rubberBandSelectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            Qt::ItemSelectionMode sipRes;

            sipRes = sipCpp->rubberBandSelectionMode();

            return sipConvertFromEnum(sipRes,sipType_Qt_ItemSelectionMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_rubberBandSelectionMode, doc_QGraphicsView_rubberBandSelectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setRubberBandSelectionMode, "QGraphicsView.setRubberBandSelectionMode(Qt.ItemSelectionMode)");

extern "C" {static PyObject *meth_QGraphicsView_setRubberBandSelectionMode(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setRubberBandSelectionMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::ItemSelectionMode a0;
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_Qt_ItemSelectionMode, &a0))
        {
            sipCpp->setRubberBandSelectionMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setRubberBandSelectionMode, doc_QGraphicsView_setRubberBandSelectionMode);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_transform, "QGraphicsView.transform() -> QTransform");

extern "C" {static PyObject *meth_QGraphicsView_transform(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_transform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QTransform*sipRes;

            sipRes = new QTransform(sipCpp->transform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_transform, doc_QGraphicsView_transform);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_viewportTransform, "QGraphicsView.viewportTransform() -> QTransform");

extern "C" {static PyObject *meth_QGraphicsView_viewportTransform(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_viewportTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QTransform*sipRes;

            sipRes = new QTransform(sipCpp->viewportTransform());

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_viewportTransform, doc_QGraphicsView_viewportTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_setTransform, "QGraphicsView.setTransform(QTransform, bool combine=False)");

extern "C" {static PyObject *meth_QGraphicsView_setTransform(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_setTransform(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QTransform* a0;
        bool a1 = 0;
        QGraphicsView *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_combine,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|b", &sipSelf, sipType_QGraphicsView, &sipCpp, sipType_QTransform, &a0, &a1))
        {
            sipCpp->setTransform(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_setTransform, doc_QGraphicsView_setTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_resetTransform, "QGraphicsView.resetTransform()");

extern "C" {static PyObject *meth_QGraphicsView_resetTransform(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_resetTransform(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            sipCpp->resetTransform();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_resetTransform, doc_QGraphicsView_resetTransform);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_isTransformed, "QGraphicsView.isTransformed() -> bool");

extern "C" {static PyObject *meth_QGraphicsView_isTransformed(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_isTransformed(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isTransformed();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_isTransformed, doc_QGraphicsView_isTransformed);

    return NULL;
}


PyDoc_STRVAR(doc_QGraphicsView_rubberBandRect, "QGraphicsView.rubberBandRect() -> QRect");

extern "C" {static PyObject *meth_QGraphicsView_rubberBandRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsView_rubberBandRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGraphicsView *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGraphicsView, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->rubberBandRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGraphicsView, sipName_rubberBandRect, doc_QGraphicsView_rubberBandRect);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGraphicsView(void *, const sipTypeDef *);}
static void *cast_QGraphicsView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGraphicsView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractScrollArea)->ctd_cast((QAbstractScrollArea *)(QGraphicsView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsView(void *, int);}
static void release_QGraphicsView(void *sipCppV,int)
{
    QGraphicsView *sipCpp = reinterpret_cast<QGraphicsView *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGraphicsView(sipSimpleWrapper *);}
static void dealloc_QGraphicsView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGraphicsView *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsView(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGraphicsView(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGraphicsView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGraphicsView *sipCpp = 0;

    {
        QWidget* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWidget, &a0, sipOwner))
        {
            sipCpp = new sipQGraphicsView(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        QGraphicsScene* a0;
        PyObject *a0Keep;
        QWidget* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "@J8|JH", &a0Keep, sipType_QGraphicsScene, &a0, sipType_QWidget, &a1, sipOwner))
        {
            sipCpp = new sipQGraphicsView(a0,a1);

            sipKeepReference((PyObject *)sipSelf, -27, a0Keep);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsView[] = {{15, 255, 1}};


static PyMethodDef methods_QGraphicsView[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), (PyCFunction)meth_QGraphicsView_actionEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_alignment), meth_QGraphicsView_alignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_alignment)},
    {SIP_MLNAME_CAST(sipName_backgroundBrush), meth_QGraphicsView_backgroundBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_backgroundBrush)},
    {SIP_MLNAME_CAST(sipName_cacheMode), meth_QGraphicsView_cacheMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_cacheMode)},
    {SIP_MLNAME_CAST(sipName_centerOn), meth_QGraphicsView_centerOn, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_centerOn)},
    {SIP_MLNAME_CAST(sipName_changeEvent), (PyCFunction)meth_QGraphicsView_changeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QGraphicsView_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), (PyCFunction)meth_QGraphicsView_closeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QGraphicsView_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), (PyCFunction)meth_QGraphicsView_contextMenuEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_contextMenuEvent)},
    {SIP_MLNAME_CAST(sipName_create), (PyCFunction)meth_QGraphicsView_create, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QGraphicsView_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), (PyCFunction)meth_QGraphicsView_destroy, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QGraphicsView_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QGraphicsView_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QGraphicsView_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMode), meth_QGraphicsView_dragMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_dragMode)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QGraphicsView_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_drawBackground), (PyCFunction)meth_QGraphicsView_drawBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_drawBackground)},
    {SIP_MLNAME_CAST(sipName_drawForeground), (PyCFunction)meth_QGraphicsView_drawForeground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_drawForeground)},
    {SIP_MLNAME_CAST(sipName_drawFrame), (PyCFunction)meth_QGraphicsView_drawFrame, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QGraphicsView_dropEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_dropEvent)},
    {SIP_MLNAME_CAST(sipName_ensureVisible), (PyCFunction)meth_QGraphicsView_ensureVisible, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_ensureVisible)},
    {SIP_MLNAME_CAST(sipName_enterEvent), (PyCFunction)meth_QGraphicsView_enterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QGraphicsView_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_event)},
    {SIP_MLNAME_CAST(sipName_eventFilter), (PyCFunction)meth_QGraphicsView_eventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_fitInView), (PyCFunction)meth_QGraphicsView_fitInView, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_fitInView)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QGraphicsView_focusInEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusNextChild), (PyCFunction)meth_QGraphicsView_focusNextChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), (PyCFunction)meth_QGraphicsView_focusNextPrevChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_focusNextPrevChild)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QGraphicsView_focusOutEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), (PyCFunction)meth_QGraphicsView_focusPreviousChild, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_foregroundBrush), meth_QGraphicsView_foregroundBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_foregroundBrush)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QGraphicsView_hideEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_initPainter), (PyCFunction)meth_QGraphicsView_initPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QGraphicsView_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QGraphicsView_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_invalidateScene), (PyCFunction)meth_QGraphicsView_invalidateScene, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_invalidateScene)},
    {SIP_MLNAME_CAST(sipName_isInteractive), meth_QGraphicsView_isInteractive, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_isInteractive)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QGraphicsView_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isTransformed), meth_QGraphicsView_isTransformed, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_isTransformed)},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QGraphicsView_itemAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_itemAt)},
    {SIP_MLNAME_CAST(sipName_items), (PyCFunction)meth_QGraphicsView_items, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_items)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QGraphicsView_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QGraphicsView_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_leaveEvent), (PyCFunction)meth_QGraphicsView_leaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mapFromScene), meth_QGraphicsView_mapFromScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_mapFromScene)},
    {SIP_MLNAME_CAST(sipName_mapToScene), meth_QGraphicsView_mapToScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_mapToScene)},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QGraphicsView_metric, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QGraphicsView_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QGraphicsView_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QGraphicsView_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QGraphicsView_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QGraphicsView_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_nativeEvent), (PyCFunction)meth_QGraphicsView_nativeEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_optimizationFlags), meth_QGraphicsView_optimizationFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_optimizationFlags)},
    {SIP_MLNAME_CAST(sipName_paintEvent), (PyCFunction)meth_QGraphicsView_paintEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_paintEvent)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QGraphicsView_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_render), (PyCFunction)meth_QGraphicsView_render, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_render)},
    {SIP_MLNAME_CAST(sipName_renderHints), meth_QGraphicsView_renderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_renderHints)},
    {SIP_MLNAME_CAST(sipName_resetCachedContent), meth_QGraphicsView_resetCachedContent, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_resetCachedContent)},
    {SIP_MLNAME_CAST(sipName_resetTransform), meth_QGraphicsView_resetTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_resetTransform)},
    {SIP_MLNAME_CAST(sipName_resizeAnchor), meth_QGraphicsView_resizeAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_resizeAnchor)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QGraphicsView_resizeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_rotate), meth_QGraphicsView_rotate, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_rotate)},
    {SIP_MLNAME_CAST(sipName_rubberBandRect), meth_QGraphicsView_rubberBandRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_rubberBandRect)},
    {SIP_MLNAME_CAST(sipName_rubberBandSelectionMode), meth_QGraphicsView_rubberBandSelectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_rubberBandSelectionMode)},
    {SIP_MLNAME_CAST(sipName_scale), meth_QGraphicsView_scale, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_scale)},
    {SIP_MLNAME_CAST(sipName_scene), meth_QGraphicsView_scene, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_scene)},
    {SIP_MLNAME_CAST(sipName_sceneRect), meth_QGraphicsView_sceneRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_sceneRect)},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), (PyCFunction)meth_QGraphicsView_scrollContentsBy, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_scrollContentsBy)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QGraphicsView_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QGraphicsView_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QGraphicsView_setAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setAlignment)},
    {SIP_MLNAME_CAST(sipName_setBackgroundBrush), meth_QGraphicsView_setBackgroundBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setBackgroundBrush)},
    {SIP_MLNAME_CAST(sipName_setCacheMode), meth_QGraphicsView_setCacheMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setCacheMode)},
    {SIP_MLNAME_CAST(sipName_setDragMode), meth_QGraphicsView_setDragMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setDragMode)},
    {SIP_MLNAME_CAST(sipName_setForegroundBrush), meth_QGraphicsView_setForegroundBrush, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setForegroundBrush)},
    {SIP_MLNAME_CAST(sipName_setInteractive), meth_QGraphicsView_setInteractive, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setInteractive)},
    {SIP_MLNAME_CAST(sipName_setOptimizationFlag), (PyCFunction)meth_QGraphicsView_setOptimizationFlag, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_setOptimizationFlag)},
    {SIP_MLNAME_CAST(sipName_setOptimizationFlags), meth_QGraphicsView_setOptimizationFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setOptimizationFlags)},
    {SIP_MLNAME_CAST(sipName_setRenderHint), (PyCFunction)meth_QGraphicsView_setRenderHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_setRenderHint)},
    {SIP_MLNAME_CAST(sipName_setRenderHints), meth_QGraphicsView_setRenderHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setRenderHints)},
    {SIP_MLNAME_CAST(sipName_setResizeAnchor), meth_QGraphicsView_setResizeAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setResizeAnchor)},
    {SIP_MLNAME_CAST(sipName_setRubberBandSelectionMode), meth_QGraphicsView_setRubberBandSelectionMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setRubberBandSelectionMode)},
    {SIP_MLNAME_CAST(sipName_setScene), meth_QGraphicsView_setScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setScene)},
    {SIP_MLNAME_CAST(sipName_setSceneRect), meth_QGraphicsView_setSceneRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setSceneRect)},
    {SIP_MLNAME_CAST(sipName_setTransform), (PyCFunction)meth_QGraphicsView_setTransform, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_setTransform)},
    {SIP_MLNAME_CAST(sipName_setTransformationAnchor), meth_QGraphicsView_setTransformationAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setTransformationAnchor)},
    {SIP_MLNAME_CAST(sipName_setViewportMargins), (PyCFunction)meth_QGraphicsView_setViewportMargins, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setViewportUpdateMode), meth_QGraphicsView_setViewportUpdateMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_setViewportUpdateMode)},
    {SIP_MLNAME_CAST(sipName_setupViewport), (PyCFunction)meth_QGraphicsView_setupViewport, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_setupViewport)},
    {SIP_MLNAME_CAST(sipName_sharedPainter), (PyCFunction)meth_QGraphicsView_sharedPainter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_shear), meth_QGraphicsView_shear, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_shear)},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QGraphicsView_showEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_showEvent)},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QGraphicsView_sizeHint, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_sizeHint)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QGraphicsView_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QGraphicsView_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_transform), meth_QGraphicsView_transform, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_transform)},
    {SIP_MLNAME_CAST(sipName_transformationAnchor), meth_QGraphicsView_transformationAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_transformationAnchor)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QGraphicsView_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_translate)},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), (PyCFunction)meth_QGraphicsView_updateMicroFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateScene), meth_QGraphicsView_updateScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_updateScene)},
    {SIP_MLNAME_CAST(sipName_updateSceneRect), meth_QGraphicsView_updateSceneRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_updateSceneRect)},
    {SIP_MLNAME_CAST(sipName_viewportEvent), (PyCFunction)meth_QGraphicsView_viewportEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_viewportEvent)},
    {SIP_MLNAME_CAST(sipName_viewportTransform), meth_QGraphicsView_viewportTransform, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_viewportTransform)},
    {SIP_MLNAME_CAST(sipName_viewportUpdateMode), meth_QGraphicsView_viewportUpdateMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QGraphicsView_viewportUpdateMode)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QGraphicsView_wheelEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGraphicsView_wheelEvent)}
};

static sipEnumMemberDef enummembers_QGraphicsView[] = {
    {sipName_AnchorUnderMouse, static_cast<int>(QGraphicsView::AnchorUnderMouse), 165},
    {sipName_AnchorViewCenter, static_cast<int>(QGraphicsView::AnchorViewCenter), 165},
    {sipName_BoundingRectViewportUpdate, static_cast<int>(QGraphicsView::BoundingRectViewportUpdate), 166},
    {sipName_CacheBackground, static_cast<int>(QGraphicsView::CacheBackground), 161},
    {sipName_CacheNone, static_cast<int>(QGraphicsView::CacheNone), 161},
    {sipName_DontAdjustForAntialiasing, static_cast<int>(QGraphicsView::DontAdjustForAntialiasing), 163},
    {sipName_DontClipPainter, static_cast<int>(QGraphicsView::DontClipPainter), 163},
    {sipName_DontSavePainterState, static_cast<int>(QGraphicsView::DontSavePainterState), 163},
    {sipName_FullViewportUpdate, static_cast<int>(QGraphicsView::FullViewportUpdate), 166},
    {sipName_MinimalViewportUpdate, static_cast<int>(QGraphicsView::MinimalViewportUpdate), 166},
    {sipName_NoAnchor, static_cast<int>(QGraphicsView::NoAnchor), 165},
    {sipName_NoDrag, static_cast<int>(QGraphicsView::NoDrag), 162},
    {sipName_NoViewportUpdate, static_cast<int>(QGraphicsView::NoViewportUpdate), 166},
    {sipName_RubberBandDrag, static_cast<int>(QGraphicsView::RubberBandDrag), 162},
    {sipName_ScrollHandDrag, static_cast<int>(QGraphicsView::ScrollHandDrag), 162},
    {sipName_SmartViewportUpdate, static_cast<int>(QGraphicsView::SmartViewportUpdate), 166},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGraphicsView[] = {
    {"rubberBandChanged(QRect,QPointF,QPointF)", "\1QGraphicsView.rubberBandChanged[QRect, QPointF, QPointF]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QGraphicsView, "\1QGraphicsView(QWidget parent=None)\n"
    "QGraphicsView(QGraphicsScene, QWidget parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWidgets_QGraphicsView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsView,
        {0}
    },
    {
        sipNameNr_QGraphicsView,
        {0, 0, 1},
        108, methods_QGraphicsView,
        16, enummembers_QGraphicsView,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGraphicsView,
    -1,
    -1,
    supers_QGraphicsView,
    0,
    init_type_QGraphicsView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsView,
    0,
    0,
    0,
    release_QGraphicsView,
    cast_QGraphicsView,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGraphicsView::staticMetaObject,
    0,
    signals_QGraphicsView,
    0
};
