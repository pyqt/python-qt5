/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:46 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"

#line 26 "sip/QtGui/qwindow.sip"
#include <qwindow.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qrunnable.sip"
#include <qrunnable.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 50 "sip/QtGui/qopenglcontext.sip"
#include <qopenglcontext.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 441 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 430 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 395 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 743 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 69 "sip/QtQml/qqmlincubator.sip"
#include <qqmlincubator.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 28 "sip/QtGui/qopenglframebufferobject.sip"
#include <qopenglframebufferobject.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 192 "sip/QtCore/qglobal.sip"
#include <QtGlobal>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 275 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 686 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 382 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtGui/qscreen.sip"
#include <qscreen.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtCore/qmargins.sip"
#include <qmargins.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtGui/qsurfaceformat.sip"
#include <qsurfaceformat.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtGui/qsurface.sip"
#include <qsurface.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 171 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 174 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 177 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"


class sipQQuickWindow : public QQuickWindow
{
public:
    sipQQuickWindow(QWindow*);
    virtual ~sipQQuickWindow();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_moveEvent(bool,QMoveEvent*);
    void sipProtectVirt_touchEvent(bool,QTouchEvent*);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent*);
    void sipProtectVirt_exposeEvent(bool,QExposeEvent*);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent*);
    void sipProtectVirt_showEvent(bool,QShowEvent*);
    void sipProtectVirt_hideEvent(bool,QHideEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    bool sipProtectVirt_event(bool,QEvent*);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void tabletEvent(QTabletEvent*);
    void touchEvent(QTouchEvent*);
    void moveEvent(QMoveEvent*);
    QSize size() const;
    QSurfaceFormat format() const;
    QSurface::SurfaceType surfaceType() const;
    void wheelEvent(QWheelEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    bool event(QEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void hideEvent(QHideEvent*);
    void showEvent(QShowEvent*);
    void resizeEvent(QResizeEvent*);
    void exposeEvent(QExposeEvent*);
    QObject* focusObject() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickWindow(const sipQQuickWindow &);
    sipQQuickWindow &operator = (const sipQQuickWindow &);

    char sipPyMethods[27];
};

sipQQuickWindow::sipQQuickWindow(QWindow*a0): QQuickWindow(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickWindow::~sipQQuickWindow()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQQuickWindow::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickWindow);
}

int sipQQuickWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QQuickWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickWindow,_c,_id,_a);

    return _id;
}

void *sipQQuickWindow::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickWindow, _clname, &sipCpp) ? sipCpp : QQuickWindow::qt_metacast(_clname));
}

void sipQQuickWindow::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QQuickWindow::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QQuickWindow::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QQuickWindow::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QQuickWindow::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QQuickWindow::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickWindow::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QQuickWindow::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickWindow::tabletEvent(QTabletEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_tabletEvent);

    if (!sipMeth)
    {
        QQuickWindow::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTabletEvent*);

    ((sipVH_QtGui_0)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::touchEvent(QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_touchEvent);

    if (!sipMeth)
    {
        QQuickWindow::touchEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTouchEvent*);

    ((sipVH_QtGui_1)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[1]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::moveEvent(QMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_moveEvent);

    if (!sipMeth)
    {
        QQuickWindow::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMoveEvent*);

    ((sipVH_QtGui_8)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[8]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSize sipQQuickWindow::size() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_size);

    if (!sipMeth)
        return QQuickWindow::size();

    typedef QSize (*sipVH_QtGui_12)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_12)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[12]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSurfaceFormat sipQQuickWindow::format() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_format);

    if (!sipMeth)
        return QQuickWindow::format();

    typedef QSurfaceFormat (*sipVH_QtGui_13)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_13)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[13]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSurface::SurfaceType sipQQuickWindow::surfaceType() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_surfaceType);

    if (!sipMeth)
        return QQuickWindow::surfaceType();

    typedef QSurface::SurfaceType (*sipVH_QtGui_14)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_14)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[14]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickWindow::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QQuickWindow::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QQuickWindow::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QQuickWindow::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QQuickWindow::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QQuickWindow::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QQuickWindow::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QQuickWindow::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickWindow::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QQuickWindow::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QQuickWindow::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QQuickWindow::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::hideEvent(QHideEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_hideEvent);

    if (!sipMeth)
    {
        QQuickWindow::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHideEvent*);

    ((sipVH_QtGui_5)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::showEvent(QShowEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_showEvent);

    if (!sipMeth)
    {
        QQuickWindow::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QShowEvent*);

    ((sipVH_QtGui_6)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::resizeEvent(QResizeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_resizeEvent);

    if (!sipMeth)
    {
        QQuickWindow::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QResizeEvent*);

    ((sipVH_QtGui_9)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickWindow::exposeEvent(QExposeEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_exposeEvent);

    if (!sipMeth)
    {
        QQuickWindow::exposeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_10)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QExposeEvent*);

    ((sipVH_QtGui_10)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[10]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQQuickWindow::focusObject() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_focusObject);

    if (!sipMeth)
        return QQuickWindow::focusObject();

    typedef QObject* (*sipVH_QtGui_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_11)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQQuickWindow::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQQuickWindow::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQQuickWindow::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQQuickWindow::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQQuickWindow::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQQuickWindow::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQQuickWindow::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent*a0)
{
    (sipSelfWasArg ? QWindow::moveEvent(a0) : moveEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_touchEvent(bool sipSelfWasArg,QTouchEvent*a0)
{
    (sipSelfWasArg ? QWindow::touchEvent(a0) : touchEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent*a0)
{
    (sipSelfWasArg ? QWindow::tabletEvent(a0) : tabletEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_exposeEvent(bool sipSelfWasArg,QExposeEvent*a0)
{
    (sipSelfWasArg ? QQuickWindow::exposeEvent(a0) : exposeEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent*a0)
{
    (sipSelfWasArg ? QQuickWindow::resizeEvent(a0) : resizeEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent*a0)
{
    (sipSelfWasArg ? QQuickWindow::showEvent(a0) : showEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent*a0)
{
    (sipSelfWasArg ? QQuickWindow::hideEvent(a0) : hideEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QQuickWindow::focusInEvent(a0) : focusInEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QQuickWindow::focusOutEvent(a0) : focusOutEvent(a0));
}

bool sipQQuickWindow::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QQuickWindow::event(a0) : event(a0));
}

void sipQQuickWindow::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QQuickWindow::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QQuickWindow::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickWindow::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickWindow::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickWindow::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickWindow::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQQuickWindow::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QQuickWindow::wheelEvent(a0) : wheelEvent(a0));
}


PyDoc_STRVAR(doc_QQuickWindow_sender, "QQuickWindow.sender() -> QObject");

extern "C" {static PyObject *meth_QQuickWindow_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 935 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_sender, doc_QQuickWindow_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_receivers, "QQuickWindow.receivers(signal) -> int");

extern "C" {static PyObject *meth_QQuickWindow_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 994 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickWindow.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_receivers, doc_QQuickWindow_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_timerEvent, "QQuickWindow.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QQuickWindow_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_timerEvent, doc_QQuickWindow_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_childEvent, "QQuickWindow.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QQuickWindow_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_childEvent, doc_QQuickWindow_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_customEvent, "QQuickWindow.customEvent(QEvent)");

extern "C" {static PyObject *meth_QQuickWindow_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_customEvent, doc_QQuickWindow_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_connectNotify, "QQuickWindow.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QQuickWindow_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_connectNotify, doc_QQuickWindow_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_disconnectNotify, "QQuickWindow.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QQuickWindow_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_disconnectNotify, doc_QQuickWindow_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_senderSignalIndex, "QQuickWindow.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QQuickWindow_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_senderSignalIndex, doc_QQuickWindow_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_isSignalConnected, "QQuickWindow.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_isSignalConnected, doc_QQuickWindow_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_moveEvent, "QQuickWindow.moveEvent(QMoveEvent)");

extern "C" {static PyObject *meth_QQuickWindow_moveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_moveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_moveEvent, doc_QQuickWindow_moveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_touchEvent, "QQuickWindow.touchEvent(QTouchEvent)");

extern "C" {static PyObject *meth_QQuickWindow_touchEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_touchEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTouchEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QTouchEvent, &a0))
        {
            sipCpp->sipProtectVirt_touchEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_touchEvent, doc_QQuickWindow_touchEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_tabletEvent, "QQuickWindow.tabletEvent(QTabletEvent)");

extern "C" {static PyObject *meth_QQuickWindow_tabletEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_tabletEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QTabletEvent, &a0))
        {
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_tabletEvent, doc_QQuickWindow_tabletEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_contentItem, "QQuickWindow.contentItem() -> QQuickItem");

extern "C" {static PyObject *meth_QQuickWindow_contentItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_contentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QQuickItem*sipRes;

            sipRes = sipCpp->contentItem();

            return sipConvertFromType(sipRes,sipType_QQuickItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_contentItem, doc_QQuickWindow_contentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_activeFocusItem, "QQuickWindow.activeFocusItem() -> QQuickItem");

extern "C" {static PyObject *meth_QQuickWindow_activeFocusItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_activeFocusItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QQuickItem*sipRes;

            sipRes = sipCpp->activeFocusItem();

            return sipConvertFromType(sipRes,sipType_QQuickItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_activeFocusItem, doc_QQuickWindow_activeFocusItem);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_focusObject, "QQuickWindow.focusObject() -> QObject");

extern "C" {static PyObject *meth_QQuickWindow_focusObject(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_focusObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QObject*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickWindow::focusObject() : sipCpp->focusObject());

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_focusObject, doc_QQuickWindow_focusObject);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_mouseGrabberItem, "QQuickWindow.mouseGrabberItem() -> QQuickItem");

extern "C" {static PyObject *meth_QQuickWindow_mouseGrabberItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mouseGrabberItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QQuickItem*sipRes;

            sipRes = sipCpp->mouseGrabberItem();

            return sipConvertFromType(sipRes,sipType_QQuickItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mouseGrabberItem, doc_QQuickWindow_mouseGrabberItem);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_sendEvent, "QQuickWindow.sendEvent(QQuickItem, QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_sendEvent(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_sendEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem* a0;
        QEvent* a1;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QQuickItem, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sendEvent(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_sendEvent, doc_QQuickWindow_sendEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_grabWindow, "QQuickWindow.grabWindow() -> QImage");

extern "C" {static PyObject *meth_QQuickWindow_grabWindow(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_grabWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QImage*sipRes;

            sipRes = new QImage(sipCpp->grabWindow());

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_grabWindow, doc_QQuickWindow_grabWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_setRenderTarget, "QQuickWindow.setRenderTarget(QOpenGLFramebufferObject)\n"
    "QQuickWindow.setRenderTarget(int, QSize)");

extern "C" {static PyObject *meth_QQuickWindow_setRenderTarget(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setRenderTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QOpenGLFramebufferObject* a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QOpenGLFramebufferObject, &a0))
        {
            sipCpp->setRenderTarget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        uint a0;
        const QSize* a1;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuJ9", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0, sipType_QSize, &a1))
        {
            sipCpp->setRenderTarget(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setRenderTarget, doc_QQuickWindow_setRenderTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_renderTarget, "QQuickWindow.renderTarget() -> QOpenGLFramebufferObject");

extern "C" {static PyObject *meth_QQuickWindow_renderTarget(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_renderTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QOpenGLFramebufferObject*sipRes;

            sipRes = sipCpp->renderTarget();

            return sipConvertFromType(sipRes,sipType_QOpenGLFramebufferObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_renderTarget, doc_QQuickWindow_renderTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_renderTargetId, "QQuickWindow.renderTargetId() -> int");

extern "C" {static PyObject *meth_QQuickWindow_renderTargetId(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_renderTargetId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            uint sipRes;

            sipRes = sipCpp->renderTargetId();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_renderTargetId, doc_QQuickWindow_renderTargetId);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_renderTargetSize, "QQuickWindow.renderTargetSize() -> QSize");

extern "C" {static PyObject *meth_QQuickWindow_renderTargetSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_renderTargetSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->renderTargetSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_renderTargetSize, doc_QQuickWindow_renderTargetSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_incubationController, "QQuickWindow.incubationController() -> QQmlIncubationController");

extern "C" {static PyObject *meth_QQuickWindow_incubationController(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_incubationController(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QQmlIncubationController*sipRes;

            sipRes = sipCpp->incubationController();

            return sipConvertFromType(sipRes,sipType_QQmlIncubationController,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_incubationController, doc_QQuickWindow_incubationController);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_createTextureFromImage, "QQuickWindow.createTextureFromImage(QImage) -> QSGTexture\n"
    "QQuickWindow.createTextureFromImage(QImage, QQuickWindow.CreateTextureOptions) -> QSGTexture");

extern "C" {static PyObject *meth_QQuickWindow_createTextureFromImage(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_createTextureFromImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QImage* a0;
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QImage, &a0))
        {
            QSGTexture*sipRes;

            sipRes = sipCpp->createTextureFromImage(*a0);

            return sipConvertFromNewType(sipRes,sipType_QSGTexture,NULL);
        }
    }

    {
        const QImage* a0;
        QQuickWindow::CreateTextureOptions* a1;
        int a1State = 0;
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QImage, &a0, sipType_QQuickWindow_CreateTextureOptions, &a1, &a1State))
        {
            QSGTexture*sipRes;

            sipRes = sipCpp->createTextureFromImage(*a0,*a1);
            sipReleaseType(a1,sipType_QQuickWindow_CreateTextureOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSGTexture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_createTextureFromImage, doc_QQuickWindow_createTextureFromImage);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_createTextureFromId, "QQuickWindow.createTextureFromId(int, QSize, QQuickWindow.CreateTextureOptions options=(QQuickWindow::CreateTextureOption)0) -> QSGTexture");

extern "C" {static PyObject *meth_QQuickWindow_createTextureFromId(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_createTextureFromId(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;
        const QSize* a1;
        QQuickWindow::CreateTextureOptions a2def = (QQuickWindow::CreateTextureOption)0;
        QQuickWindow::CreateTextureOptions* a2 = &a2def;
        int a2State = 0;
        const QQuickWindow *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BuJ9|J1", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0, sipType_QSize, &a1, sipType_QQuickWindow_CreateTextureOptions, &a2, &a2State))
        {
            QSGTexture*sipRes;

            sipRes = sipCpp->createTextureFromId(a0,*a1,*a2);
            sipReleaseType(a2,sipType_QQuickWindow_CreateTextureOptions,a2State);

            return sipConvertFromNewType(sipRes,sipType_QSGTexture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_createTextureFromId, doc_QQuickWindow_createTextureFromId);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_setClearBeforeRendering, "QQuickWindow.setClearBeforeRendering(bool)");

extern "C" {static PyObject *meth_QQuickWindow_setClearBeforeRendering(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setClearBeforeRendering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0))
        {
            sipCpp->setClearBeforeRendering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setClearBeforeRendering, doc_QQuickWindow_setClearBeforeRendering);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_clearBeforeRendering, "QQuickWindow.clearBeforeRendering() -> bool");

extern "C" {static PyObject *meth_QQuickWindow_clearBeforeRendering(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_clearBeforeRendering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->clearBeforeRendering();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_clearBeforeRendering, doc_QQuickWindow_clearBeforeRendering);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_setColor, "QQuickWindow.setColor(QColor)");

extern "C" {static PyObject *meth_QQuickWindow_setColor(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setColor, doc_QQuickWindow_setColor);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_color, "QQuickWindow.color() -> QColor");

extern "C" {static PyObject *meth_QQuickWindow_color(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->color());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_color, doc_QQuickWindow_color);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_setPersistentOpenGLContext, "QQuickWindow.setPersistentOpenGLContext(bool)");

extern "C" {static PyObject *meth_QQuickWindow_setPersistentOpenGLContext(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setPersistentOpenGLContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0))
        {
            sipCpp->setPersistentOpenGLContext(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setPersistentOpenGLContext, doc_QQuickWindow_setPersistentOpenGLContext);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_isPersistentOpenGLContext, "QQuickWindow.isPersistentOpenGLContext() -> bool");

extern "C" {static PyObject *meth_QQuickWindow_isPersistentOpenGLContext(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_isPersistentOpenGLContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isPersistentOpenGLContext();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_isPersistentOpenGLContext, doc_QQuickWindow_isPersistentOpenGLContext);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_setPersistentSceneGraph, "QQuickWindow.setPersistentSceneGraph(bool)");

extern "C" {static PyObject *meth_QQuickWindow_setPersistentSceneGraph(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setPersistentSceneGraph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickWindow, &sipCpp, &a0))
        {
            sipCpp->setPersistentSceneGraph(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setPersistentSceneGraph, doc_QQuickWindow_setPersistentSceneGraph);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_isPersistentSceneGraph, "QQuickWindow.isPersistentSceneGraph() -> bool");

extern "C" {static PyObject *meth_QQuickWindow_isPersistentSceneGraph(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_isPersistentSceneGraph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isPersistentSceneGraph();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_isPersistentSceneGraph, doc_QQuickWindow_isPersistentSceneGraph);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_openglContext, "QQuickWindow.openglContext() -> QOpenGLContext");

extern "C" {static PyObject *meth_QQuickWindow_openglContext(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_openglContext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            QOpenGLContext*sipRes;

            sipRes = sipCpp->openglContext();

            return sipConvertFromType(sipRes,sipType_QOpenGLContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_openglContext, doc_QQuickWindow_openglContext);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_update, "QQuickWindow.update()");

extern "C" {static PyObject *meth_QQuickWindow_update(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            sipCpp->update();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_update, doc_QQuickWindow_update);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_releaseResources, "QQuickWindow.releaseResources()");

extern "C" {static PyObject *meth_QQuickWindow_releaseResources(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_releaseResources(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            sipCpp->releaseResources();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_releaseResources, doc_QQuickWindow_releaseResources);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_exposeEvent, "QQuickWindow.exposeEvent(QExposeEvent)");

extern "C" {static PyObject *meth_QQuickWindow_exposeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_exposeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QExposeEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QExposeEvent, &a0))
        {
            sipCpp->sipProtectVirt_exposeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_exposeEvent, doc_QQuickWindow_exposeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_resizeEvent, "QQuickWindow.resizeEvent(QResizeEvent)");

extern "C" {static PyObject *meth_QQuickWindow_resizeEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_resizeEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QResizeEvent, &a0))
        {
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_resizeEvent, doc_QQuickWindow_resizeEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_showEvent, "QQuickWindow.showEvent(QShowEvent)");

extern "C" {static PyObject *meth_QQuickWindow_showEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_showEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QShowEvent, &a0))
        {
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_showEvent, doc_QQuickWindow_showEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_hideEvent, "QQuickWindow.hideEvent(QHideEvent)");

extern "C" {static PyObject *meth_QQuickWindow_hideEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_hideEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QHideEvent, &a0))
        {
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_hideEvent, doc_QQuickWindow_hideEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_focusInEvent, "QQuickWindow.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QQuickWindow_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_focusInEvent, doc_QQuickWindow_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_focusOutEvent, "QQuickWindow.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QQuickWindow_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_focusOutEvent, doc_QQuickWindow_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_event, "QQuickWindow.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickWindow_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_event, doc_QQuickWindow_event);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_keyPressEvent, "QQuickWindow.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QQuickWindow_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_keyPressEvent, doc_QQuickWindow_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_keyReleaseEvent, "QQuickWindow.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QQuickWindow_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_keyReleaseEvent, doc_QQuickWindow_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_mousePressEvent, "QQuickWindow.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWindow_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mousePressEvent, doc_QQuickWindow_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_mouseReleaseEvent, "QQuickWindow.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWindow_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mouseReleaseEvent, doc_QQuickWindow_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_mouseDoubleClickEvent, "QQuickWindow.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWindow_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mouseDoubleClickEvent, doc_QQuickWindow_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_mouseMoveEvent, "QQuickWindow.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickWindow_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_mouseMoveEvent, doc_QQuickWindow_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_wheelEvent, "QQuickWindow.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QQuickWindow_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQQuickWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_wheelEvent, doc_QQuickWindow_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_hasDefaultAlphaBuffer, "QQuickWindow.hasDefaultAlphaBuffer() -> bool");

extern "C" {static PyObject *meth_QQuickWindow_hasDefaultAlphaBuffer(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_hasDefaultAlphaBuffer(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QQuickWindow::hasDefaultAlphaBuffer();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_hasDefaultAlphaBuffer, doc_QQuickWindow_hasDefaultAlphaBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_setDefaultAlphaBuffer, "QQuickWindow.setDefaultAlphaBuffer(bool)");

extern "C" {static PyObject *meth_QQuickWindow_setDefaultAlphaBuffer(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_setDefaultAlphaBuffer(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "b", &a0))
        {
            QQuickWindow::setDefaultAlphaBuffer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_setDefaultAlphaBuffer, doc_QQuickWindow_setDefaultAlphaBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_resetOpenGLState, "QQuickWindow.resetOpenGLState()");

extern "C" {static PyObject *meth_QQuickWindow_resetOpenGLState(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_resetOpenGLState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            sipCpp->resetOpenGLState();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_resetOpenGLState, doc_QQuickWindow_resetOpenGLState);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_scheduleRenderJob, "QQuickWindow.scheduleRenderJob(QRunnable, QQuickWindow.RenderStage)");

extern "C" {static PyObject *meth_QQuickWindow_scheduleRenderJob(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_scheduleRenderJob(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QRunnable* a0;
        QQuickWindow::RenderStage a1;
        QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:E", &sipSelf, sipType_QQuickWindow, &sipCpp, sipType_QRunnable, &a0, sipType_QQuickWindow_RenderStage, &a1))
        {
            sipCpp->scheduleRenderJob(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_scheduleRenderJob, doc_QQuickWindow_scheduleRenderJob);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickWindow_effectiveDevicePixelRatio, "QQuickWindow.effectiveDevicePixelRatio() -> float");

extern "C" {static PyObject *meth_QQuickWindow_effectiveDevicePixelRatio(PyObject *, PyObject *);}
static PyObject *meth_QQuickWindow_effectiveDevicePixelRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickWindow, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->effectiveDevicePixelRatio();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickWindow, sipName_effectiveDevicePixelRatio, doc_QQuickWindow_effectiveDevicePixelRatio);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QQuickWindow(void *, const sipTypeDef *);}
static void *cast_QQuickWindow(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QQuickWindow)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWindow)->ctd_cast((QWindow *)(QQuickWindow *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickWindow(void *, int);}
static void release_QQuickWindow(void *sipCppV,int)
{
    QQuickWindow *sipCpp = reinterpret_cast<QQuickWindow *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickWindow(sipSimpleWrapper *);}
static void dealloc_QQuickWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQQuickWindow *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QQuickWindow(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QQuickWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickWindow *sipCpp = 0;

    {
        QWindow* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QWindow, &a0, sipOwner))
        {
            sipCpp = new sipQQuickWindow(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickWindow[] = {{362, 3, 1}};


static PyMethodDef methods_QQuickWindow[] = {
    {SIP_MLNAME_CAST(sipName_activeFocusItem), meth_QQuickWindow_activeFocusItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_activeFocusItem)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QQuickWindow_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clearBeforeRendering), meth_QQuickWindow_clearBeforeRendering, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_clearBeforeRendering)},
    {SIP_MLNAME_CAST(sipName_color), meth_QQuickWindow_color, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_color)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QQuickWindow_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contentItem), meth_QQuickWindow_contentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_contentItem)},
    {SIP_MLNAME_CAST(sipName_createTextureFromId), (PyCFunction)meth_QQuickWindow_createTextureFromId, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_createTextureFromId)},
    {SIP_MLNAME_CAST(sipName_createTextureFromImage), meth_QQuickWindow_createTextureFromImage, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_createTextureFromImage)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QQuickWindow_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QQuickWindow_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_effectiveDevicePixelRatio), meth_QQuickWindow_effectiveDevicePixelRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_effectiveDevicePixelRatio)},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QQuickWindow_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_event)},
    {SIP_MLNAME_CAST(sipName_exposeEvent), (PyCFunction)meth_QQuickWindow_exposeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_exposeEvent)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QQuickWindow_focusInEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusObject), meth_QQuickWindow_focusObject, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_focusObject)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QQuickWindow_focusOutEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_grabWindow), meth_QQuickWindow_grabWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_grabWindow)},
    {SIP_MLNAME_CAST(sipName_hasDefaultAlphaBuffer), meth_QQuickWindow_hasDefaultAlphaBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_hasDefaultAlphaBuffer)},
    {SIP_MLNAME_CAST(sipName_hideEvent), (PyCFunction)meth_QQuickWindow_hideEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_hideEvent)},
    {SIP_MLNAME_CAST(sipName_incubationController), meth_QQuickWindow_incubationController, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_incubationController)},
    {SIP_MLNAME_CAST(sipName_isPersistentOpenGLContext), meth_QQuickWindow_isPersistentOpenGLContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_isPersistentOpenGLContext)},
    {SIP_MLNAME_CAST(sipName_isPersistentSceneGraph), meth_QQuickWindow_isPersistentSceneGraph, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_isPersistentSceneGraph)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QQuickWindow_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QQuickWindow_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QQuickWindow_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QQuickWindow_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseGrabberItem), meth_QQuickWindow_mouseGrabberItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_mouseGrabberItem)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QQuickWindow_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QQuickWindow_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QQuickWindow_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_moveEvent), (PyCFunction)meth_QQuickWindow_moveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_openglContext), meth_QQuickWindow_openglContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_openglContext)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QQuickWindow_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_releaseResources), meth_QQuickWindow_releaseResources, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_releaseResources)},
    {SIP_MLNAME_CAST(sipName_renderTarget), meth_QQuickWindow_renderTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_renderTarget)},
    {SIP_MLNAME_CAST(sipName_renderTargetId), meth_QQuickWindow_renderTargetId, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_renderTargetId)},
    {SIP_MLNAME_CAST(sipName_renderTargetSize), meth_QQuickWindow_renderTargetSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_renderTargetSize)},
    {SIP_MLNAME_CAST(sipName_resetOpenGLState), meth_QQuickWindow_resetOpenGLState, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_resetOpenGLState)},
    {SIP_MLNAME_CAST(sipName_resizeEvent), (PyCFunction)meth_QQuickWindow_resizeEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_resizeEvent)},
    {SIP_MLNAME_CAST(sipName_scheduleRenderJob), meth_QQuickWindow_scheduleRenderJob, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_scheduleRenderJob)},
    {SIP_MLNAME_CAST(sipName_sendEvent), meth_QQuickWindow_sendEvent, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_sendEvent)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QQuickWindow_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QQuickWindow_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setClearBeforeRendering), meth_QQuickWindow_setClearBeforeRendering, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setClearBeforeRendering)},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QQuickWindow_setColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setColor)},
    {SIP_MLNAME_CAST(sipName_setDefaultAlphaBuffer), meth_QQuickWindow_setDefaultAlphaBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setDefaultAlphaBuffer)},
    {SIP_MLNAME_CAST(sipName_setPersistentOpenGLContext), meth_QQuickWindow_setPersistentOpenGLContext, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setPersistentOpenGLContext)},
    {SIP_MLNAME_CAST(sipName_setPersistentSceneGraph), meth_QQuickWindow_setPersistentSceneGraph, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setPersistentSceneGraph)},
    {SIP_MLNAME_CAST(sipName_setRenderTarget), meth_QQuickWindow_setRenderTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_setRenderTarget)},
    {SIP_MLNAME_CAST(sipName_showEvent), (PyCFunction)meth_QQuickWindow_showEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_showEvent)},
    {SIP_MLNAME_CAST(sipName_tabletEvent), (PyCFunction)meth_QQuickWindow_tabletEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QQuickWindow_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_touchEvent), (PyCFunction)meth_QQuickWindow_touchEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_update), meth_QQuickWindow_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickWindow_update)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QQuickWindow_wheelEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickWindow_wheelEvent)}
};

static sipEnumMemberDef enummembers_QQuickWindow[] = {
    {sipName_AfterRenderingStage, static_cast<int>(QQuickWindow::AfterRenderingStage), 25},
    {sipName_AfterSwapStage, static_cast<int>(QQuickWindow::AfterSwapStage), 25},
    {sipName_AfterSynchronizingStage, static_cast<int>(QQuickWindow::AfterSynchronizingStage), 25},
    {sipName_BeforeRenderingStage, static_cast<int>(QQuickWindow::BeforeRenderingStage), 25},
    {sipName_BeforeSynchronizingStage, static_cast<int>(QQuickWindow::BeforeSynchronizingStage), 25},
    {sipName_ContextNotAvailable, static_cast<int>(QQuickWindow::ContextNotAvailable), 26},
    {sipName_TextureCanUseAtlas, static_cast<int>(QQuickWindow::TextureCanUseAtlas), 23},
    {sipName_TextureHasAlphaChannel, static_cast<int>(QQuickWindow::TextureHasAlphaChannel), 23},
    {sipName_TextureHasMipmaps, static_cast<int>(QQuickWindow::TextureHasMipmaps), 23},
    {sipName_TextureOwnsGLTexture, static_cast<int>(QQuickWindow::TextureOwnsGLTexture), 23},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickWindow[] = {
    {"sceneGraphError(QQuickWindow::SceneGraphError,QString)", "\1QQuickWindow.sceneGraphError[QQuickWindow.SceneGraphError, str]", 0, 0},
    {"sceneGraphAboutToStop()", "\1QQuickWindow.sceneGraphAboutToStop", 0, 0},
    {"afterAnimating()", "\1QQuickWindow.afterAnimating", 0, 0},
    {"afterSynchronizing()", "\1QQuickWindow.afterSynchronizing", 0, 0},
    {"openglContextCreated(QOpenGLContext*)", "\1QQuickWindow.openglContextCreated[QOpenGLContext]", 0, 0},
    {"activeFocusItemChanged()", "\1QQuickWindow.activeFocusItemChanged", 0, 0},
    {"colorChanged(QColor)", "\1QQuickWindow.colorChanged[QColor]", 0, 0},
    {"afterRendering()", "\1QQuickWindow.afterRendering", 0, 0},
    {"beforeRendering()", "\1QQuickWindow.beforeRendering", 0, 0},
    {"beforeSynchronizing()", "\1QQuickWindow.beforeSynchronizing", 0, 0},
    {"sceneGraphInvalidated()", "\1QQuickWindow.sceneGraphInvalidated", 0, 0},
    {"sceneGraphInitialized()", "\1QQuickWindow.sceneGraphInitialized", 0, 0},
    {"frameSwapped()", "\1QQuickWindow.frameSwapped", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QQuickWindow, "\1QQuickWindow(QWindow parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtQuick_QQuickWindow = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QQuickWindow,
        {0}
    },
    {
        sipNameNr_QQuickWindow,
        {0, 0, 1},
        55, methods_QQuickWindow,
        10, enummembers_QQuickWindow,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQuickWindow,
    -1,
    -1,
    supers_QQuickWindow,
    0,
    init_type_QQuickWindow,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQuickWindow,
    0,
    0,
    0,
    release_QQuickWindow,
    cast_QQuickWindow,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QQuickWindow::staticMetaObject,
    0,
    signals_QQuickWindow,
    0
};
