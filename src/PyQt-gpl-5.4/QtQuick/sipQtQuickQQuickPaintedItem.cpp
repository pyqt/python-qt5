/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:46 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickpainteditem.sip"
#include <qquickpainteditem.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgtextureprovider.sip"
#include <qsgtextureprovider.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 178 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 44 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 47 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 50 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 53 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickpainteditem.sip"
#include <qquickpainteditem.h>
#line 59 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 62 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitemgrabresult.sip"
#include <qquickitemgrabresult.h>
#line 65 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 68 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 71 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 74 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 77 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 80 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 83 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 232 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 86 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 686 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 89 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 92 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 95 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 98 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 101 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 104 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 107 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 112 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 115 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 118 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 121 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 321 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 124 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 127 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 130 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 133 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 136 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 139 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 142 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 145 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 148 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 151 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 154 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 157 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 160 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 163 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 166 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 169 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 172 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 175 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"

sipQQuickPaintedItem::sipQQuickPaintedItem(QQuickItem*a0): QQuickPaintedItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickPaintedItem::~sipQQuickPaintedItem()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQQuickPaintedItem::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickPaintedItem);
}

int sipQQuickPaintedItem::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QQuickPaintedItem::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickPaintedItem,_c,_id,_a);

    return _id;
}

void *sipQQuickPaintedItem::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickPaintedItem, _clname, &sipCpp) ? sipCpp : QQuickPaintedItem::qt_metacast(_clname));
}

void sipQQuickPaintedItem::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QQuickPaintedItem::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QQuickPaintedItem::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickPaintedItem::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QQuickPaintedItem::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickPaintedItem::updatePolish()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_updatePolish);

    if (!sipMeth)
    {
        QQuickPaintedItem::updatePolish();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::geometryChanged(const QRectF& a0,const QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_geometryChanged);

    if (!sipMeth)
    {
        QQuickPaintedItem::geometryChanged(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRectF&,const QRectF&);

    sipVH_QtQuick_14(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQQuickPaintedItem::childMouseEventFilter(QQuickItem*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_childMouseEventFilter);

    if (!sipMeth)
        return QQuickPaintedItem::childMouseEventFilter(a0,a1);

    extern bool sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QQuickItem*,QEvent*);

    return sipVH_QtQuick_15(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickPaintedItem::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::dropEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtQuick_16(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtQuick_17(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtQuick_18(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtQuick_19(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::hoverLeaveEvent(QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_hoverLeaveEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::hoverLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHoverEvent*);

    sipVH_QtQuick_20(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::hoverMoveEvent(QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_hoverMoveEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::hoverMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHoverEvent*);

    sipVH_QtQuick_20(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::hoverEnterEvent(QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_hoverEnterEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::hoverEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHoverEvent*);

    sipVH_QtQuick_20(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::touchEvent(QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_touchEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::touchEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTouchEvent*);

    ((sipVH_QtGui_1)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[1]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::touchUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_touchUngrabEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::touchUngrabEvent();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::mouseUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_mouseUngrabEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::mouseUngrabEvent();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtQuick_21(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QQuickPaintedItem::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::componentComplete()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_componentComplete);

    if (!sipMeth)
    {
        QQuickPaintedItem::componentComplete();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::classBegin()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_classBegin);

    if (!sipMeth)
    {
        QQuickPaintedItem::classBegin();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickPaintedItem::itemChange(QQuickItem::ItemChange a0,const QQuickItem::ItemChangeData& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_itemChange);

    if (!sipMeth)
    {
        QQuickPaintedItem::itemChange(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QQuickItem::ItemChange,const QQuickItem::ItemChangeData&);

    sipVH_QtQuick_22(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQQuickPaintedItem::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QQuickPaintedItem::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQQuickPaintedItem::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QQuickPaintedItem::inputMethodQuery(a0);

    extern QVariant sipVH_QtQuick_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtQuick_23(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickPaintedItem::contains(const QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_contains);

    if (!sipMeth)
        return QQuickPaintedItem::contains(a0);

    extern bool sipVH_QtQuick_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPointF&);

    return sipVH_QtQuick_24(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickPaintedItem::releaseResources()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_releaseResources);

    if (!sipMeth)
    {
        QQuickPaintedItem::releaseResources();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSGTextureProvider* sipQQuickPaintedItem::textureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_textureProvider);

    if (!sipMeth)
        return QQuickPaintedItem::textureProvider();

    extern QSGTextureProvider* sipVH_QtQuick_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_11(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQQuickPaintedItem::isTextureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_isTextureProvider);

    if (!sipMeth)
        return QQuickPaintedItem::isTextureProvider();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSGNode* sipQQuickPaintedItem::updatePaintNode(QSGNode*a0,QQuickItem::UpdatePaintNodeData*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_updatePaintNode);

    if (!sipMeth)
        return QQuickPaintedItem::updatePaintNode(a0,a1);

    extern QSGNode* sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSGNode*,QQuickItem::UpdatePaintNodeData*);

    return sipVH_QtQuick_12(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickPaintedItem::paint(QPainter*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,sipName_QQuickPaintedItem,sipName_paint);

    if (!sipMeth)
        return;

    extern void sipVH_QtQuick_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*);

    sipVH_QtQuick_13(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQQuickPaintedItem::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQQuickPaintedItem::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQQuickPaintedItem::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQQuickPaintedItem::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQQuickPaintedItem::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

bool sipQQuickPaintedItem::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QQuickItem::event(a0) : event(a0));
}

bool sipQQuickPaintedItem::sipProtect_isComponentComplete() const
{
    return QQuickItem::isComponentComplete();
}

void sipQQuickPaintedItem::sipProtectVirt_itemChange(bool sipSelfWasArg,QQuickItem::ItemChange a0,const QQuickItem::ItemChangeData& a1)
{
    (sipSelfWasArg ? QQuickItem::itemChange(a0,a1) : itemChange(a0,a1));
}

void sipQQuickPaintedItem::sipProtect_updateInputMethod(Qt::InputMethodQueries a0)
{
    QQuickItem::updateInputMethod(a0);
}

bool sipQQuickPaintedItem::sipProtect_widthValid() const
{
    return QQuickItem::widthValid();
}

bool sipQQuickPaintedItem::sipProtect_heightValid() const
{
    return QQuickItem::heightValid();
}

void sipQQuickPaintedItem::sipProtectVirt_classBegin(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::classBegin() : classBegin());
}

void sipQQuickPaintedItem::sipProtectVirt_componentComplete(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::componentComplete() : componentComplete());
}

void sipQQuickPaintedItem::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::focusInEvent(a0) : focusInEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_mouseUngrabEvent(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::mouseUngrabEvent() : mouseUngrabEvent());
}

void sipQQuickPaintedItem::sipProtectVirt_touchUngrabEvent(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::touchUngrabEvent() : touchUngrabEvent());
}

void sipQQuickPaintedItem::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::wheelEvent(a0) : wheelEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_touchEvent(bool sipSelfWasArg,QTouchEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::touchEvent(a0) : touchEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_hoverEnterEvent(bool sipSelfWasArg,QHoverEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::hoverEnterEvent(a0) : hoverEnterEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_hoverMoveEvent(bool sipSelfWasArg,QHoverEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::hoverMoveEvent(a0) : hoverMoveEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_hoverLeaveEvent(bool sipSelfWasArg,QHoverEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::hoverLeaveEvent(a0) : hoverLeaveEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQQuickPaintedItem::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::dropEvent(a0) : dropEvent(a0));
}

bool sipQQuickPaintedItem::sipProtectVirt_childMouseEventFilter(bool sipSelfWasArg,QQuickItem*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QQuickItem::childMouseEventFilter(a0,a1) : childMouseEventFilter(a0,a1));
}

void sipQQuickPaintedItem::sipProtectVirt_geometryChanged(bool sipSelfWasArg,const QRectF& a0,const QRectF& a1)
{
    (sipSelfWasArg ? QQuickItem::geometryChanged(a0,a1) : geometryChanged(a0,a1));
}

void sipQQuickPaintedItem::sipProtectVirt_updatePolish(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::updatePolish() : updatePolish());
}

QSGNode* sipQQuickPaintedItem::sipProtectVirt_updatePaintNode(bool sipSelfWasArg,QSGNode*a0,QQuickItem::UpdatePaintNodeData*a1)
{
    return (sipSelfWasArg ? QQuickPaintedItem::updatePaintNode(a0,a1) : updatePaintNode(a0,a1));
}

void sipQQuickPaintedItem::sipProtectVirt_releaseResources(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickPaintedItem::releaseResources() : releaseResources());
}


PyDoc_STRVAR(doc_QQuickPaintedItem_sender, "QQuickPaintedItem.sender() -> QObject");

extern "C" {static PyObject *meth_QQuickPaintedItem_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_sender, doc_QQuickPaintedItem_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_receivers, "QQuickPaintedItem.receivers(signal) -> int");

extern "C" {static PyObject *meth_QQuickPaintedItem_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1212 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickPaintedItem.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_receivers, doc_QQuickPaintedItem_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_timerEvent, "QQuickPaintedItem.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_timerEvent, doc_QQuickPaintedItem_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_childEvent, "QQuickPaintedItem.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_childEvent, doc_QQuickPaintedItem_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_customEvent, "QQuickPaintedItem.customEvent(QEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_customEvent, doc_QQuickPaintedItem_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_connectNotify, "QQuickPaintedItem.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QQuickPaintedItem_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_connectNotify, doc_QQuickPaintedItem_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_disconnectNotify, "QQuickPaintedItem.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QQuickPaintedItem_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_disconnectNotify, doc_QQuickPaintedItem_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_senderSignalIndex, "QQuickPaintedItem.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QQuickPaintedItem_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_senderSignalIndex, doc_QQuickPaintedItem_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_isSignalConnected, "QQuickPaintedItem.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_isSignalConnected, doc_QQuickPaintedItem_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_event, "QQuickPaintedItem.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_event, doc_QQuickPaintedItem_event);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_isComponentComplete, "QQuickPaintedItem.isComponentComplete() -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_isComponentComplete(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_isComponentComplete(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isComponentComplete();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_isComponentComplete, doc_QQuickPaintedItem_isComponentComplete);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_itemChange, "QQuickPaintedItem.itemChange(QQuickItem.ItemChange, QQuickItem.ItemChangeData)");

extern "C" {static PyObject *meth_QQuickPaintedItem_itemChange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_itemChange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QQuickItem::ItemChange a0;
        const QQuickItem::ItemChangeData* a1;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BEJ9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QQuickItem_ItemChange, &a0, sipType_QQuickItem_ItemChangeData, &a1))
        {
            sipCpp->sipProtectVirt_itemChange(sipSelfWasArg,a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_itemChange, doc_QQuickPaintedItem_itemChange);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_updateInputMethod, "QQuickPaintedItem.updateInputMethod(Qt.InputMethodQueries queries=Qt.ImQueryInput)");

extern "C" {static PyObject *meth_QQuickPaintedItem_updateInputMethod(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_updateInputMethod(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::InputMethodQueries a0def = Qt::ImQueryInput;
        Qt::InputMethodQueries* a0 = &a0def;
        int a0State = 0;
        sipQQuickPaintedItem *sipCpp;

        static const char *sipKwdList[] = {
            sipName_queries,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_Qt_InputMethodQueries, &a0, &a0State))
        {
            sipCpp->sipProtect_updateInputMethod(*a0);
            sipReleaseType(a0,sipType_Qt_InputMethodQueries,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_updateInputMethod, doc_QQuickPaintedItem_updateInputMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_widthValid, "QQuickPaintedItem.widthValid() -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_widthValid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_widthValid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_widthValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_widthValid, doc_QQuickPaintedItem_widthValid);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_heightValid, "QQuickPaintedItem.heightValid() -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_heightValid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_heightValid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_heightValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_heightValid, doc_QQuickPaintedItem_heightValid);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_classBegin, "QQuickPaintedItem.classBegin()");

extern "C" {static PyObject *meth_QQuickPaintedItem_classBegin(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_classBegin(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            sipCpp->sipProtectVirt_classBegin(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_classBegin, doc_QQuickPaintedItem_classBegin);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_componentComplete, "QQuickPaintedItem.componentComplete()");

extern "C" {static PyObject *meth_QQuickPaintedItem_componentComplete(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_componentComplete(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            sipCpp->sipProtectVirt_componentComplete(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_componentComplete, doc_QQuickPaintedItem_componentComplete);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_keyPressEvent, "QQuickPaintedItem.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_keyPressEvent, doc_QQuickPaintedItem_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_keyReleaseEvent, "QQuickPaintedItem.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_keyReleaseEvent, doc_QQuickPaintedItem_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_inputMethodEvent, "QQuickPaintedItem.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_inputMethodEvent, doc_QQuickPaintedItem_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_focusInEvent, "QQuickPaintedItem.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_focusInEvent, doc_QQuickPaintedItem_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_focusOutEvent, "QQuickPaintedItem.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_focusOutEvent, doc_QQuickPaintedItem_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_mousePressEvent, "QQuickPaintedItem.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_mousePressEvent, doc_QQuickPaintedItem_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_mouseMoveEvent, "QQuickPaintedItem.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_mouseMoveEvent, doc_QQuickPaintedItem_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_mouseReleaseEvent, "QQuickPaintedItem.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_mouseReleaseEvent, doc_QQuickPaintedItem_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_mouseDoubleClickEvent, "QQuickPaintedItem.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_mouseDoubleClickEvent, doc_QQuickPaintedItem_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_mouseUngrabEvent, "QQuickPaintedItem.mouseUngrabEvent()");

extern "C" {static PyObject *meth_QQuickPaintedItem_mouseUngrabEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_mouseUngrabEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            sipCpp->sipProtectVirt_mouseUngrabEvent(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_mouseUngrabEvent, doc_QQuickPaintedItem_mouseUngrabEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_touchUngrabEvent, "QQuickPaintedItem.touchUngrabEvent()");

extern "C" {static PyObject *meth_QQuickPaintedItem_touchUngrabEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_touchUngrabEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            sipCpp->sipProtectVirt_touchUngrabEvent(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_touchUngrabEvent, doc_QQuickPaintedItem_touchUngrabEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_wheelEvent, "QQuickPaintedItem.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_wheelEvent, doc_QQuickPaintedItem_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_touchEvent, "QQuickPaintedItem.touchEvent(QTouchEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_touchEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_touchEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTouchEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QTouchEvent, &a0))
        {
            sipCpp->sipProtectVirt_touchEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_touchEvent, doc_QQuickPaintedItem_touchEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_hoverEnterEvent, "QQuickPaintedItem.hoverEnterEvent(QHoverEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_hoverEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_hoverEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHoverEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QHoverEvent, &a0))
        {
            sipCpp->sipProtectVirt_hoverEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_hoverEnterEvent, doc_QQuickPaintedItem_hoverEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_hoverMoveEvent, "QQuickPaintedItem.hoverMoveEvent(QHoverEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_hoverMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_hoverMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHoverEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QHoverEvent, &a0))
        {
            sipCpp->sipProtectVirt_hoverMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_hoverMoveEvent, doc_QQuickPaintedItem_hoverMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_hoverLeaveEvent, "QQuickPaintedItem.hoverLeaveEvent(QHoverEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_hoverLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_hoverLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHoverEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QHoverEvent, &a0))
        {
            sipCpp->sipProtectVirt_hoverLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_hoverLeaveEvent, doc_QQuickPaintedItem_hoverLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_dragEnterEvent, "QQuickPaintedItem.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_dragEnterEvent, doc_QQuickPaintedItem_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_dragMoveEvent, "QQuickPaintedItem.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_dragMoveEvent, doc_QQuickPaintedItem_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_dragLeaveEvent, "QQuickPaintedItem.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_dragLeaveEvent, doc_QQuickPaintedItem_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_dropEvent, "QQuickPaintedItem.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QQuickPaintedItem_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_dropEvent, doc_QQuickPaintedItem_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_childMouseEventFilter, "QQuickPaintedItem.childMouseEventFilter(QQuickItem, QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_childMouseEventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_childMouseEventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QQuickItem* a0;
        QEvent* a1;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QQuickItem, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_childMouseEventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_childMouseEventFilter, doc_QQuickPaintedItem_childMouseEventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_geometryChanged, "QQuickPaintedItem.geometryChanged(QRectF, QRectF)");

extern "C" {static PyObject *meth_QQuickPaintedItem_geometryChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_geometryChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF* a0;
        const QRectF* a1;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QRectF, &a0, sipType_QRectF, &a1))
        {
            sipCpp->sipProtectVirt_geometryChanged(sipSelfWasArg,*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_geometryChanged, doc_QQuickPaintedItem_geometryChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_updatePolish, "QQuickPaintedItem.updatePolish()");

extern "C" {static PyObject *meth_QQuickPaintedItem_updatePolish(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_updatePolish(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            sipCpp->sipProtectVirt_updatePolish(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_updatePolish, doc_QQuickPaintedItem_updatePolish);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_update, "QQuickPaintedItem.update(QRect rect=QRect())");

extern "C" {static PyObject *meth_QQuickPaintedItem_update(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_update(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect& a0def = QRect();
        const QRect* a0 = &a0def;
        QQuickPaintedItem *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->update(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_update, doc_QQuickPaintedItem_update);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_opaquePainting, "QQuickPaintedItem.opaquePainting() -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_opaquePainting(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_opaquePainting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->opaquePainting();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_opaquePainting, doc_QQuickPaintedItem_opaquePainting);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setOpaquePainting, "QQuickPaintedItem.setOpaquePainting(bool)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setOpaquePainting(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setOpaquePainting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, &a0))
        {
            sipCpp->setOpaquePainting(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setOpaquePainting, doc_QQuickPaintedItem_setOpaquePainting);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_antialiasing, "QQuickPaintedItem.antialiasing() -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_antialiasing(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_antialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->antialiasing();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_antialiasing, doc_QQuickPaintedItem_antialiasing);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setAntialiasing, "QQuickPaintedItem.setAntialiasing(bool)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setAntialiasing(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setAntialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, &a0))
        {
            sipCpp->setAntialiasing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setAntialiasing, doc_QQuickPaintedItem_setAntialiasing);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_mipmap, "QQuickPaintedItem.mipmap() -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_mipmap(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_mipmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->mipmap();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_mipmap, doc_QQuickPaintedItem_mipmap);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setMipmap, "QQuickPaintedItem.setMipmap(bool)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setMipmap(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setMipmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, &a0))
        {
            sipCpp->setMipmap(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setMipmap, doc_QQuickPaintedItem_setMipmap);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_performanceHints, "QQuickPaintedItem.performanceHints() -> QQuickPaintedItem.PerformanceHints");

extern "C" {static PyObject *meth_QQuickPaintedItem_performanceHints(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_performanceHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QQuickPaintedItem::PerformanceHints*sipRes;

            sipRes = new QQuickPaintedItem::PerformanceHints(sipCpp->performanceHints());

            return sipConvertFromNewType(sipRes,sipType_QQuickPaintedItem_PerformanceHints,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_performanceHints, doc_QQuickPaintedItem_performanceHints);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setPerformanceHint, "QQuickPaintedItem.setPerformanceHint(QQuickPaintedItem.PerformanceHint, bool enabled=True)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setPerformanceHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setPerformanceHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickPaintedItem::PerformanceHint a0;
        bool a1 = 1;
        QQuickPaintedItem *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QQuickPaintedItem_PerformanceHint, &a0, &a1))
        {
            sipCpp->setPerformanceHint(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setPerformanceHint, doc_QQuickPaintedItem_setPerformanceHint);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setPerformanceHints, "QQuickPaintedItem.setPerformanceHints(QQuickPaintedItem.PerformanceHints)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setPerformanceHints(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setPerformanceHints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickPaintedItem::PerformanceHints* a0;
        int a0State = 0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QQuickPaintedItem_PerformanceHints, &a0, &a0State))
        {
            sipCpp->setPerformanceHints(*a0);
            sipReleaseType(a0,sipType_QQuickPaintedItem_PerformanceHints,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setPerformanceHints, doc_QQuickPaintedItem_setPerformanceHints);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_contentsBoundingRect, "QQuickPaintedItem.contentsBoundingRect() -> QRectF");

extern "C" {static PyObject *meth_QQuickPaintedItem_contentsBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_contentsBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->contentsBoundingRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_contentsBoundingRect, doc_QQuickPaintedItem_contentsBoundingRect);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_contentsSize, "QQuickPaintedItem.contentsSize() -> QSize");

extern "C" {static PyObject *meth_QQuickPaintedItem_contentsSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_contentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QSize*sipRes;

            sipRes = new QSize(sipCpp->contentsSize());

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_contentsSize, doc_QQuickPaintedItem_contentsSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setContentsSize, "QQuickPaintedItem.setContentsSize(QSize)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setContentsSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setContentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize* a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setContentsSize(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setContentsSize, doc_QQuickPaintedItem_setContentsSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_resetContentsSize, "QQuickPaintedItem.resetContentsSize()");

extern "C" {static PyObject *meth_QQuickPaintedItem_resetContentsSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_resetContentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            sipCpp->resetContentsSize();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_resetContentsSize, doc_QQuickPaintedItem_resetContentsSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_contentsScale, "QQuickPaintedItem.contentsScale() -> float");

extern "C" {static PyObject *meth_QQuickPaintedItem_contentsScale(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_contentsScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->contentsScale();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_contentsScale, doc_QQuickPaintedItem_contentsScale);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setContentsScale, "QQuickPaintedItem.setContentsScale(float)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setContentsScale(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setContentsScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, &a0))
        {
            sipCpp->setContentsScale(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setContentsScale, doc_QQuickPaintedItem_setContentsScale);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_fillColor, "QQuickPaintedItem.fillColor() -> QColor");

extern "C" {static PyObject *meth_QQuickPaintedItem_fillColor(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_fillColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->fillColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_fillColor, doc_QQuickPaintedItem_fillColor);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setFillColor, "QQuickPaintedItem.setFillColor(QColor)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setFillColor(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setFillColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setFillColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setFillColor, doc_QQuickPaintedItem_setFillColor);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_renderTarget, "QQuickPaintedItem.renderTarget() -> QQuickPaintedItem.RenderTarget");

extern "C" {static PyObject *meth_QQuickPaintedItem_renderTarget(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_renderTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QQuickPaintedItem::RenderTarget sipRes;

            sipRes = sipCpp->renderTarget();

            return sipConvertFromEnum(sipRes,sipType_QQuickPaintedItem_RenderTarget);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_renderTarget, doc_QQuickPaintedItem_renderTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_setRenderTarget, "QQuickPaintedItem.setRenderTarget(QQuickPaintedItem.RenderTarget)");

extern "C" {static PyObject *meth_QQuickPaintedItem_setRenderTarget(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_setRenderTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickPaintedItem::RenderTarget a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QQuickPaintedItem_RenderTarget, &a0))
        {
            sipCpp->setRenderTarget(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_setRenderTarget, doc_QQuickPaintedItem_setRenderTarget);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_paint, "QQuickPaintedItem.paint(QPainter)");

extern "C" {static PyObject *meth_QQuickPaintedItem_paint(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_paint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPainter* a0;
        QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QPainter, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQuickPaintedItem, sipName_paint);
                return NULL;
            }

            sipCpp->paint(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_paint, doc_QQuickPaintedItem_paint);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_updatePaintNode, "QQuickPaintedItem.updatePaintNode(QSGNode, QQuickItem.UpdatePaintNodeData) -> QSGNode");

extern "C" {static PyObject *meth_QQuickPaintedItem_updatePaintNode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_updatePaintNode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSGNode* a0;
        QQuickItem::UpdatePaintNodeData* a1;
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QQuickPaintedItem, &sipCpp, sipType_QSGNode, &a0, sipType_QQuickItem_UpdatePaintNodeData, &a1))
        {
            QSGNode*sipRes;

            sipRes = sipCpp->sipProtectVirt_updatePaintNode(sipSelfWasArg,a0,a1);

            return sipConvertFromType(sipRes,sipType_QSGNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_updatePaintNode, doc_QQuickPaintedItem_updatePaintNode);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_isTextureProvider, "QQuickPaintedItem.isTextureProvider() -> bool");

extern "C" {static PyObject *meth_QQuickPaintedItem_isTextureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_isTextureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickPaintedItem::isTextureProvider() : sipCpp->isTextureProvider());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_isTextureProvider, doc_QQuickPaintedItem_isTextureProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_textureProvider, "QQuickPaintedItem.textureProvider() -> QSGTextureProvider");

extern "C" {static PyObject *meth_QQuickPaintedItem_textureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_textureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QQuickPaintedItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            QSGTextureProvider*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickPaintedItem::textureProvider() : sipCpp->textureProvider());

            return sipConvertFromType(sipRes,sipType_QSGTextureProvider,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_textureProvider, doc_QQuickPaintedItem_textureProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickPaintedItem_releaseResources, "QQuickPaintedItem.releaseResources()");

extern "C" {static PyObject *meth_QQuickPaintedItem_releaseResources(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickPaintedItem_releaseResources(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickPaintedItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickPaintedItem, &sipCpp))
        {
            sipCpp->sipProtectVirt_releaseResources(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickPaintedItem, sipName_releaseResources, doc_QQuickPaintedItem_releaseResources);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QQuickPaintedItem(void *, const sipTypeDef *);}
static void *cast_QQuickPaintedItem(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QQuickPaintedItem)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QQuickItem)->ctd_cast((QQuickItem *)(QQuickPaintedItem *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickPaintedItem(void *, int);}
static void release_QQuickPaintedItem(void *sipCppV,int)
{
    QQuickPaintedItem *sipCpp = reinterpret_cast<QQuickPaintedItem *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickPaintedItem(sipSimpleWrapper *);}
static void dealloc_QQuickPaintedItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQQuickPaintedItem *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QQuickPaintedItem(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QQuickPaintedItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickPaintedItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickPaintedItem *sipCpp = 0;

    {
        QQuickItem* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QQuickItem, &a0, sipOwner))
        {
            sipCpp = new sipQQuickPaintedItem(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickPaintedItem[] = {{4, 255, 1}};


static PyMethodDef methods_QQuickPaintedItem[] = {
    {SIP_MLNAME_CAST(sipName_antialiasing), meth_QQuickPaintedItem_antialiasing, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_antialiasing)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QQuickPaintedItem_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childMouseEventFilter), (PyCFunction)meth_QQuickPaintedItem_childMouseEventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_classBegin), (PyCFunction)meth_QQuickPaintedItem_classBegin, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_componentComplete), (PyCFunction)meth_QQuickPaintedItem_componentComplete, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QQuickPaintedItem_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contentsBoundingRect), meth_QQuickPaintedItem_contentsBoundingRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_contentsBoundingRect)},
    {SIP_MLNAME_CAST(sipName_contentsScale), meth_QQuickPaintedItem_contentsScale, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_contentsScale)},
    {SIP_MLNAME_CAST(sipName_contentsSize), meth_QQuickPaintedItem_contentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_contentsSize)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QQuickPaintedItem_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QQuickPaintedItem_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QQuickPaintedItem_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QQuickPaintedItem_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QQuickPaintedItem_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QQuickPaintedItem_dropEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QQuickPaintedItem_event, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_fillColor), meth_QQuickPaintedItem_fillColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_fillColor)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QQuickPaintedItem_focusInEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QQuickPaintedItem_focusOutEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_geometryChanged), (PyCFunction)meth_QQuickPaintedItem_geometryChanged, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_heightValid), (PyCFunction)meth_QQuickPaintedItem_heightValid, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hoverEnterEvent), (PyCFunction)meth_QQuickPaintedItem_hoverEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hoverLeaveEvent), (PyCFunction)meth_QQuickPaintedItem_hoverLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hoverMoveEvent), (PyCFunction)meth_QQuickPaintedItem_hoverMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QQuickPaintedItem_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isComponentComplete), (PyCFunction)meth_QQuickPaintedItem_isComponentComplete, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QQuickPaintedItem_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isTextureProvider), meth_QQuickPaintedItem_isTextureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_isTextureProvider)},
    {SIP_MLNAME_CAST(sipName_itemChange), (PyCFunction)meth_QQuickPaintedItem_itemChange, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QQuickPaintedItem_keyPressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QQuickPaintedItem_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mipmap), meth_QQuickPaintedItem_mipmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_mipmap)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QQuickPaintedItem_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QQuickPaintedItem_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QQuickPaintedItem_mousePressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QQuickPaintedItem_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseUngrabEvent), (PyCFunction)meth_QQuickPaintedItem_mouseUngrabEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_opaquePainting), meth_QQuickPaintedItem_opaquePainting, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_opaquePainting)},
    {SIP_MLNAME_CAST(sipName_paint), meth_QQuickPaintedItem_paint, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_paint)},
    {SIP_MLNAME_CAST(sipName_performanceHints), meth_QQuickPaintedItem_performanceHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_performanceHints)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QQuickPaintedItem_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_releaseResources), (PyCFunction)meth_QQuickPaintedItem_releaseResources, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_releaseResources)},
    {SIP_MLNAME_CAST(sipName_renderTarget), meth_QQuickPaintedItem_renderTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_renderTarget)},
    {SIP_MLNAME_CAST(sipName_resetContentsSize), meth_QQuickPaintedItem_resetContentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_resetContentsSize)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QQuickPaintedItem_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QQuickPaintedItem_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAntialiasing), meth_QQuickPaintedItem_setAntialiasing, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setAntialiasing)},
    {SIP_MLNAME_CAST(sipName_setContentsScale), meth_QQuickPaintedItem_setContentsScale, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setContentsScale)},
    {SIP_MLNAME_CAST(sipName_setContentsSize), meth_QQuickPaintedItem_setContentsSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setContentsSize)},
    {SIP_MLNAME_CAST(sipName_setFillColor), meth_QQuickPaintedItem_setFillColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setFillColor)},
    {SIP_MLNAME_CAST(sipName_setMipmap), meth_QQuickPaintedItem_setMipmap, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setMipmap)},
    {SIP_MLNAME_CAST(sipName_setOpaquePainting), meth_QQuickPaintedItem_setOpaquePainting, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setOpaquePainting)},
    {SIP_MLNAME_CAST(sipName_setPerformanceHint), (PyCFunction)meth_QQuickPaintedItem_setPerformanceHint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setPerformanceHint)},
    {SIP_MLNAME_CAST(sipName_setPerformanceHints), meth_QQuickPaintedItem_setPerformanceHints, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setPerformanceHints)},
    {SIP_MLNAME_CAST(sipName_setRenderTarget), meth_QQuickPaintedItem_setRenderTarget, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_setRenderTarget)},
    {SIP_MLNAME_CAST(sipName_textureProvider), meth_QQuickPaintedItem_textureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_textureProvider)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QQuickPaintedItem_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_touchEvent), (PyCFunction)meth_QQuickPaintedItem_touchEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_touchUngrabEvent), (PyCFunction)meth_QQuickPaintedItem_touchUngrabEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_update), (PyCFunction)meth_QQuickPaintedItem_update, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_update)},
    {SIP_MLNAME_CAST(sipName_updateInputMethod), (PyCFunction)meth_QQuickPaintedItem_updateInputMethod, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updatePaintNode), (PyCFunction)meth_QQuickPaintedItem_updatePaintNode, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickPaintedItem_updatePaintNode)},
    {SIP_MLNAME_CAST(sipName_updatePolish), (PyCFunction)meth_QQuickPaintedItem_updatePolish, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QQuickPaintedItem_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_widthValid), (PyCFunction)meth_QQuickPaintedItem_widthValid, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_QQuickPaintedItem[] = {
    {sipName_FastFBOResizing, static_cast<int>(QQuickPaintedItem::FastFBOResizing), 13},
    {sipName_FramebufferObject, static_cast<int>(QQuickPaintedItem::FramebufferObject), 15},
    {sipName_Image, static_cast<int>(QQuickPaintedItem::Image), 15},
    {sipName_InvertedYFramebufferObject, static_cast<int>(QQuickPaintedItem::InvertedYFramebufferObject), 15},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickPaintedItem[] = {
    {"renderTargetChanged()", "\1QQuickPaintedItem.renderTargetChanged", 0, 0},
    {"contentsScaleChanged()", "\1QQuickPaintedItem.contentsScaleChanged", 0, 0},
    {"contentsSizeChanged()", "\1QQuickPaintedItem.contentsSizeChanged", 0, 0},
    {"fillColorChanged()", "\1QQuickPaintedItem.fillColorChanged", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QQuickPaintedItem, "\1QQuickPaintedItem(QQuickItem parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtQuick_QQuickPaintedItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QQuickPaintedItem,
        {0}
    },
    {
        sipNameNr_QQuickPaintedItem,
        {0, 0, 1},
        65, methods_QQuickPaintedItem,
        4, enummembers_QQuickPaintedItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQuickPaintedItem,
    -1,
    -1,
    supers_QQuickPaintedItem,
    0,
    init_type_QQuickPaintedItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQuickPaintedItem,
    0,
    0,
    0,
    release_QQuickPaintedItem,
    cast_QQuickPaintedItem,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QQuickPaintedItem::staticMetaObject,
    0,
    signals_QQuickPaintedItem,
    0
};
