/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:46 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgtexturematerial.sip"
#include <qsgtexturematerial.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGOpaqueTextureMaterial.cpp"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgtexture.sip"
#include <qsgtexture.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGOpaqueTextureMaterial.cpp"
#line 199 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGOpaqueTextureMaterial.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGOpaqueTextureMaterial.cpp"
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGOpaqueTextureMaterial.cpp"
#line 199 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGOpaqueTextureMaterial.cpp"


class sipQSGOpaqueTextureMaterial : public QSGOpaqueTextureMaterial
{
public:
    sipQSGOpaqueTextureMaterial();
    virtual ~sipQSGOpaqueTextureMaterial();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int compare(const QSGMaterial*) const;
    QSGMaterialShader* createShader() const;
    QSGMaterialType* type() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGOpaqueTextureMaterial(const sipQSGOpaqueTextureMaterial &);
    sipQSGOpaqueTextureMaterial &operator = (const sipQSGOpaqueTextureMaterial &);

    char sipPyMethods[3];
};

sipQSGOpaqueTextureMaterial::sipQSGOpaqueTextureMaterial(): QSGOpaqueTextureMaterial(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGOpaqueTextureMaterial::~sipQSGOpaqueTextureMaterial()
{
    sipCommonDtor(sipPySelf);
}

int sipQSGOpaqueTextureMaterial::compare(const QSGMaterial*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_compare);

    if (!sipMeth)
        return QSGOpaqueTextureMaterial::compare(a0);

    extern int sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QSGMaterial*);

    return sipVH_QtQuick_2(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSGMaterialShader* sipQSGOpaqueTextureMaterial::createShader() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_createShader);

    if (!sipMeth)
        return QSGOpaqueTextureMaterial::createShader();

    extern QSGMaterialShader* sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_0(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSGMaterialType* sipQSGOpaqueTextureMaterial::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_type);

    if (!sipMeth)
        return QSGOpaqueTextureMaterial::type();

    extern QSGMaterialType* sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_1(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_type, "QSGOpaqueTextureMaterial.type() -> QSGMaterialType");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_type(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
            QSGMaterialType*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSGOpaqueTextureMaterial::type() : sipCpp->type());

            return sipConvertFromType(sipRes,sipType_QSGMaterialType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_type, doc_QSGOpaqueTextureMaterial_type);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_createShader, "QSGOpaqueTextureMaterial.createShader() -> QSGMaterialShader");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_createShader(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_createShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
            QSGMaterialShader*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSGOpaqueTextureMaterial::createShader() : sipCpp->createShader());

            return sipConvertFromNewType(sipRes,sipType_QSGMaterialShader,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_createShader, doc_QSGOpaqueTextureMaterial_createShader);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_compare, "QSGOpaqueTextureMaterial.compare(QSGMaterial) -> int");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_compare(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_compare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSGMaterial* a0;
        const QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp, sipType_QSGMaterial, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSGOpaqueTextureMaterial::compare(a0) : sipCpp->compare(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_compare, doc_QSGOpaqueTextureMaterial_compare);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_setTexture, "QSGOpaqueTextureMaterial.setTexture(QSGTexture)");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_setTexture(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_setTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSGTexture* a0;
        QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp, sipType_QSGTexture, &a0))
        {
            sipCpp->setTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_setTexture, doc_QSGOpaqueTextureMaterial_setTexture);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_texture, "QSGOpaqueTextureMaterial.texture() -> QSGTexture");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_texture(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_texture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
            QSGTexture*sipRes;

            sipRes = sipCpp->texture();

            return sipConvertFromType(sipRes,sipType_QSGTexture,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_texture, doc_QSGOpaqueTextureMaterial_texture);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_setMipmapFiltering, "QSGOpaqueTextureMaterial.setMipmapFiltering(QSGTexture.Filtering)");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_setMipmapFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_setMipmapFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSGTexture::Filtering a0;
        QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp, sipType_QSGTexture_Filtering, &a0))
        {
            sipCpp->setMipmapFiltering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_setMipmapFiltering, doc_QSGOpaqueTextureMaterial_setMipmapFiltering);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_mipmapFiltering, "QSGOpaqueTextureMaterial.mipmapFiltering() -> QSGTexture.Filtering");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_mipmapFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_mipmapFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
            QSGTexture::Filtering sipRes;

            sipRes = sipCpp->mipmapFiltering();

            return sipConvertFromEnum(sipRes,sipType_QSGTexture_Filtering);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_mipmapFiltering, doc_QSGOpaqueTextureMaterial_mipmapFiltering);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_setFiltering, "QSGOpaqueTextureMaterial.setFiltering(QSGTexture.Filtering)");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_setFiltering(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_setFiltering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSGTexture::Filtering a0;
        QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp, sipType_QSGTexture_Filtering, &a0))
        {
            sipCpp->setFiltering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_setFiltering, doc_QSGOpaqueTextureMaterial_setFiltering);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_filtering, "QSGOpaqueTextureMaterial.filtering() -> QSGTexture.Filtering");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_filtering(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_filtering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
            QSGTexture::Filtering sipRes;

            sipRes = sipCpp->filtering();

            return sipConvertFromEnum(sipRes,sipType_QSGTexture_Filtering);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_filtering, doc_QSGOpaqueTextureMaterial_filtering);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_setHorizontalWrapMode, "QSGOpaqueTextureMaterial.setHorizontalWrapMode(QSGTexture.WrapMode)");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_setHorizontalWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_setHorizontalWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSGTexture::WrapMode a0;
        QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp, sipType_QSGTexture_WrapMode, &a0))
        {
            sipCpp->setHorizontalWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_setHorizontalWrapMode, doc_QSGOpaqueTextureMaterial_setHorizontalWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_horizontalWrapMode, "QSGOpaqueTextureMaterial.horizontalWrapMode() -> QSGTexture.WrapMode");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_horizontalWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_horizontalWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
            QSGTexture::WrapMode sipRes;

            sipRes = sipCpp->horizontalWrapMode();

            return sipConvertFromEnum(sipRes,sipType_QSGTexture_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_horizontalWrapMode, doc_QSGOpaqueTextureMaterial_horizontalWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_setVerticalWrapMode, "QSGOpaqueTextureMaterial.setVerticalWrapMode(QSGTexture.WrapMode)");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_setVerticalWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_setVerticalWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSGTexture::WrapMode a0;
        QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp, sipType_QSGTexture_WrapMode, &a0))
        {
            sipCpp->setVerticalWrapMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_setVerticalWrapMode, doc_QSGOpaqueTextureMaterial_setVerticalWrapMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial_verticalWrapMode, "QSGOpaqueTextureMaterial.verticalWrapMode() -> QSGTexture.WrapMode");

extern "C" {static PyObject *meth_QSGOpaqueTextureMaterial_verticalWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QSGOpaqueTextureMaterial_verticalWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGOpaqueTextureMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpaqueTextureMaterial, &sipCpp))
        {
            QSGTexture::WrapMode sipRes;

            sipRes = sipCpp->verticalWrapMode();

            return sipConvertFromEnum(sipRes,sipType_QSGTexture_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpaqueTextureMaterial, sipName_verticalWrapMode, doc_QSGOpaqueTextureMaterial_verticalWrapMode);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSGOpaqueTextureMaterial(void *, const sipTypeDef *);}
static void *cast_QSGOpaqueTextureMaterial(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSGOpaqueTextureMaterial)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QSGMaterial)->ctd_cast((QSGMaterial *)(QSGOpaqueTextureMaterial *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGOpaqueTextureMaterial(void *, int);}
static void release_QSGOpaqueTextureMaterial(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGOpaqueTextureMaterial *>(sipCppV);
    else
        delete reinterpret_cast<QSGOpaqueTextureMaterial *>(sipCppV);
}


extern "C" {static void dealloc_QSGOpaqueTextureMaterial(sipSimpleWrapper *);}
static void dealloc_QSGOpaqueTextureMaterial(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSGOpaqueTextureMaterial *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSGOpaqueTextureMaterial(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSGOpaqueTextureMaterial(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGOpaqueTextureMaterial(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGOpaqueTextureMaterial *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQSGOpaqueTextureMaterial();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGOpaqueTextureMaterial[] = {{45, 255, 1}};


static PyMethodDef methods_QSGOpaqueTextureMaterial[] = {
    {SIP_MLNAME_CAST(sipName_compare), meth_QSGOpaqueTextureMaterial_compare, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_compare)},
    {SIP_MLNAME_CAST(sipName_createShader), meth_QSGOpaqueTextureMaterial_createShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_createShader)},
    {SIP_MLNAME_CAST(sipName_filtering), meth_QSGOpaqueTextureMaterial_filtering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_filtering)},
    {SIP_MLNAME_CAST(sipName_horizontalWrapMode), meth_QSGOpaqueTextureMaterial_horizontalWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_horizontalWrapMode)},
    {SIP_MLNAME_CAST(sipName_mipmapFiltering), meth_QSGOpaqueTextureMaterial_mipmapFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_mipmapFiltering)},
    {SIP_MLNAME_CAST(sipName_setFiltering), meth_QSGOpaqueTextureMaterial_setFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_setFiltering)},
    {SIP_MLNAME_CAST(sipName_setHorizontalWrapMode), meth_QSGOpaqueTextureMaterial_setHorizontalWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_setHorizontalWrapMode)},
    {SIP_MLNAME_CAST(sipName_setMipmapFiltering), meth_QSGOpaqueTextureMaterial_setMipmapFiltering, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_setMipmapFiltering)},
    {SIP_MLNAME_CAST(sipName_setTexture), meth_QSGOpaqueTextureMaterial_setTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_setTexture)},
    {SIP_MLNAME_CAST(sipName_setVerticalWrapMode), meth_QSGOpaqueTextureMaterial_setVerticalWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_setVerticalWrapMode)},
    {SIP_MLNAME_CAST(sipName_texture), meth_QSGOpaqueTextureMaterial_texture, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_texture)},
    {SIP_MLNAME_CAST(sipName_type), meth_QSGOpaqueTextureMaterial_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_type)},
    {SIP_MLNAME_CAST(sipName_verticalWrapMode), meth_QSGOpaqueTextureMaterial_verticalWrapMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpaqueTextureMaterial_verticalWrapMode)}
};

PyDoc_STRVAR(doc_QSGOpaqueTextureMaterial, "\1QSGOpaqueTextureMaterial()");


pyqt5ClassTypeDef sipTypeDef_QtQuick_QSGOpaqueTextureMaterial = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSGOpaqueTextureMaterial,
        {0}
    },
    {
        sipNameNr_QSGOpaqueTextureMaterial,
        {0, 0, 1},
        13, methods_QSGOpaqueTextureMaterial,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSGOpaqueTextureMaterial,
    -1,
    -1,
    supers_QSGOpaqueTextureMaterial,
    0,
    init_type_QSGOpaqueTextureMaterial,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSGOpaqueTextureMaterial,
    0,
    0,
    0,
    release_QSGOpaqueTextureMaterial,
    cast_QSGOpaqueTextureMaterial,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
