/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:46 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 199 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGMaterial.cpp"

#line 199 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGMaterial.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGMaterial.cpp"
#line 192 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgmaterial.sip"
#include <qsgmaterial.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGMaterial.cpp"


class sipQSGMaterial : public QSGMaterial
{
public:
    sipQSGMaterial();
    virtual ~sipQSGMaterial();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int compare(const QSGMaterial*) const;
    QSGMaterialShader* createShader() const;
    QSGMaterialType* type() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGMaterial(const sipQSGMaterial &);
    sipQSGMaterial &operator = (const sipQSGMaterial &);

    char sipPyMethods[3];
};

sipQSGMaterial::sipQSGMaterial(): QSGMaterial(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGMaterial::~sipQSGMaterial()
{
    sipCommonDtor(sipPySelf);
}

int sipQSGMaterial::compare(const QSGMaterial*a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_compare);

    if (!sipMeth)
        return QSGMaterial::compare(a0);

    extern int sipVH_QtQuick_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QSGMaterial*);

    return sipVH_QtQuick_2(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSGMaterialShader* sipQSGMaterial::createShader() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QSGMaterial,sipName_createShader);

    if (!sipMeth)
        return 0;

    extern QSGMaterialShader* sipVH_QtQuick_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_0(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSGMaterialType* sipQSGMaterial::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QSGMaterial,sipName_type);

    if (!sipMeth)
        return 0;

    extern QSGMaterialType* sipVH_QtQuick_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_1(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGMaterial_type, "QSGMaterial.type() -> QSGMaterialType");

extern "C" {static PyObject *meth_QSGMaterial_type(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterial_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QSGMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterial, &sipCpp))
        {
            QSGMaterialType*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGMaterial, sipName_type);
                return NULL;
            }

            sipRes = sipCpp->type();

            return sipConvertFromType(sipRes,sipType_QSGMaterialType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterial, sipName_type, doc_QSGMaterial_type);

    return NULL;
}


PyDoc_STRVAR(doc_QSGMaterial_createShader, "QSGMaterial.createShader() -> QSGMaterialShader");

extern "C" {static PyObject *meth_QSGMaterial_createShader(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterial_createShader(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QSGMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterial, &sipCpp))
        {
            QSGMaterialShader*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGMaterial, sipName_createShader);
                return NULL;
            }

            sipRes = sipCpp->createShader();

            return sipConvertFromNewType(sipRes,sipType_QSGMaterialShader,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterial, sipName_createShader, doc_QSGMaterial_createShader);

    return NULL;
}


PyDoc_STRVAR(doc_QSGMaterial_compare, "QSGMaterial.compare(QSGMaterial) -> int");

extern "C" {static PyObject *meth_QSGMaterial_compare(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterial_compare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSGMaterial* a0;
        const QSGMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QSGMaterial, &sipCpp, sipType_QSGMaterial, &a0))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSGMaterial::compare(a0) : sipCpp->compare(a0));

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterial, sipName_compare, doc_QSGMaterial_compare);

    return NULL;
}


PyDoc_STRVAR(doc_QSGMaterial_flags, "QSGMaterial.flags() -> QSGMaterial.Flags");

extern "C" {static PyObject *meth_QSGMaterial_flags(PyObject *, PyObject *);}
static PyObject *meth_QSGMaterial_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGMaterial *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGMaterial, &sipCpp))
        {
            QSGMaterial::Flags*sipRes;

            sipRes = new QSGMaterial::Flags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QSGMaterial_Flags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterial, sipName_flags, doc_QSGMaterial_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QSGMaterial_setFlag, "QSGMaterial.setFlag(QSGMaterial.Flags, bool enabled=True)");

extern "C" {static PyObject *meth_QSGMaterial_setFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSGMaterial_setFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QSGMaterial::Flags* a0;
        int a0State = 0;
        bool a1 = 1;
        QSGMaterial *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|b", &sipSelf, sipType_QSGMaterial, &sipCpp, sipType_QSGMaterial_Flags, &a0, &a0State, &a1))
        {
            sipCpp->setFlag(*a0,a1);
            sipReleaseType(a0,sipType_QSGMaterial_Flags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGMaterial, sipName_setFlag, doc_QSGMaterial_setFlag);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSGMaterial(void *, const sipTypeDef *);}
static void *cast_QSGMaterial(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QSGMaterial)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGMaterial(void *, int);}
static void release_QSGMaterial(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGMaterial *>(sipCppV);
    else
        delete reinterpret_cast<QSGMaterial *>(sipCppV);
}


extern "C" {static void dealloc_QSGMaterial(sipSimpleWrapper *);}
static void dealloc_QSGMaterial(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSGMaterial *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSGMaterial(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSGMaterial(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGMaterial(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGMaterial *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQSGMaterial();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QSGMaterial[] = {
    {SIP_MLNAME_CAST(sipName_compare), meth_QSGMaterial_compare, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterial_compare)},
    {SIP_MLNAME_CAST(sipName_createShader), meth_QSGMaterial_createShader, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterial_createShader)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QSGMaterial_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterial_flags)},
    {SIP_MLNAME_CAST(sipName_setFlag), (PyCFunction)meth_QSGMaterial_setFlag, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSGMaterial_setFlag)},
    {SIP_MLNAME_CAST(sipName_type), meth_QSGMaterial_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGMaterial_type)}
};

static sipEnumMemberDef enummembers_QSGMaterial[] = {
    {sipName_Blending, static_cast<int>(QSGMaterial::Blending), 46},
    {sipName_CustomCompileStep, static_cast<int>(QSGMaterial::CustomCompileStep), 46},
    {sipName_RequiresDeterminant, static_cast<int>(QSGMaterial::RequiresDeterminant), 46},
    {sipName_RequiresFullMatrix, static_cast<int>(QSGMaterial::RequiresFullMatrix), 46},
    {sipName_RequiresFullMatrixExceptTranslate, static_cast<int>(QSGMaterial::RequiresFullMatrixExceptTranslate), 46},
};

PyDoc_STRVAR(doc_QSGMaterial, "\1QSGMaterial()");


pyqt5ClassTypeDef sipTypeDef_QtQuick_QSGMaterial = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSGMaterial,
        {0}
    },
    {
        sipNameNr_QSGMaterial,
        {0, 0, 1},
        5, methods_QSGMaterial,
        5, enummembers_QSGMaterial,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSGMaterial,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_QSGMaterial,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSGMaterial,
    0,
    0,
    0,
    release_QSGMaterial,
    cast_QSGMaterial,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
