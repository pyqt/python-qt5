/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:46 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 336 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGOpacityNode.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGOpacityNode.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGOpacityNode.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGOpacityNode.cpp"


class sipQSGOpacityNode : public QSGOpacityNode
{
public:
    sipQSGOpacityNode();
    virtual ~sipQSGOpacityNode();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void preprocess();
    bool isSubtreeBlocked() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGOpacityNode(const sipQSGOpacityNode &);
    sipQSGOpacityNode &operator = (const sipQSGOpacityNode &);

    char sipPyMethods[2];
};

sipQSGOpacityNode::sipQSGOpacityNode(): QSGOpacityNode(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGOpacityNode::~sipQSGOpacityNode()
{
    sipCommonDtor(sipPySelf);
}

void sipQSGOpacityNode::preprocess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_preprocess);

    if (!sipMeth)
    {
        QSGOpacityNode::preprocess();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSGOpacityNode::isSubtreeBlocked() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_isSubtreeBlocked);

    if (!sipMeth)
        return QSGOpacityNode::isSubtreeBlocked();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGOpacityNode_setOpacity, "QSGOpacityNode.setOpacity(float)");

extern "C" {static PyObject *meth_QSGOpacityNode_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QSGOpacityNode_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QSGOpacityNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QSGOpacityNode, &sipCpp, &a0))
        {
            sipCpp->setOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpacityNode, sipName_setOpacity, doc_QSGOpacityNode_setOpacity);

    return NULL;
}


PyDoc_STRVAR(doc_QSGOpacityNode_opacity, "QSGOpacityNode.opacity() -> float");

extern "C" {static PyObject *meth_QSGOpacityNode_opacity(PyObject *, PyObject *);}
static PyObject *meth_QSGOpacityNode_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGOpacityNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGOpacityNode, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->opacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGOpacityNode, sipName_opacity, doc_QSGOpacityNode_opacity);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSGOpacityNode(void *, const sipTypeDef *);}
static void *cast_QSGOpacityNode(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSGOpacityNode)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QSGNode)->ctd_cast((QSGNode *)(QSGOpacityNode *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGOpacityNode(void *, int);}
static void release_QSGOpacityNode(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGOpacityNode *>(sipCppV);
    else
        delete reinterpret_cast<QSGOpacityNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGOpacityNode(sipSimpleWrapper *);}
static void dealloc_QSGOpacityNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSGOpacityNode *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSGOpacityNode(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSGOpacityNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGOpacityNode(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGOpacityNode *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQSGOpacityNode();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGOpacityNode[] = {{53, 255, 1}};


static PyMethodDef methods_QSGOpacityNode[] = {
    {SIP_MLNAME_CAST(sipName_opacity), meth_QSGOpacityNode_opacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpacityNode_opacity)},
    {SIP_MLNAME_CAST(sipName_setOpacity), meth_QSGOpacityNode_setOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGOpacityNode_setOpacity)}
};

PyDoc_STRVAR(doc_QSGOpacityNode, "\1QSGOpacityNode()");


pyqt5ClassTypeDef sipTypeDef_QtQuick_QSGOpacityNode = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSGOpacityNode,
        {0}
    },
    {
        sipNameNr_QSGOpacityNode,
        {0, 0, 1},
        2, methods_QSGOpacityNode,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSGOpacityNode,
    -1,
    -1,
    supers_QSGOpacityNode,
    0,
    init_type_QSGOpacityNode,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSGOpacityNode,
    0,
    0,
    0,
    release_QSGOpacityNode,
    cast_QSGOpacityNode,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
