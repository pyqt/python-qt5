/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:46 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickframebufferobject.sip"
#include <qquickframebufferobject.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgtextureprovider.sip"
#include <qsgtextureprovider.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 178 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 44 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 47 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickframebufferobject.sip"
#include <qquickframebufferobject.h>
#line 35 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickframebufferobject.sip"
#include <qquickframebufferobject.h>
#line 52 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitemgrabresult.sip"
#include <qquickitemgrabresult.h>
#line 55 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 58 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 61 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 67 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 70 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 73 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 76 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 232 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 79 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 686 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 82 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 85 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 88 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 91 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 94 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 97 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 100 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 321 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 147 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 150 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 153 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 156 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 159 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 162 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 165 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 168 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"


class sipQQuickFramebufferObject : public QQuickFramebufferObject
{
public:
    sipQQuickFramebufferObject(QQuickItem*);
    virtual ~sipQQuickFramebufferObject();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    bool sipProtectVirt_event(bool,QEvent*);
    bool sipProtect_isComponentComplete() const;
    void sipProtectVirt_itemChange(bool,QQuickItem::ItemChange,const QQuickItem::ItemChangeData&);
    void sipProtect_updateInputMethod(Qt::InputMethodQueries);
    bool sipProtect_widthValid() const;
    bool sipProtect_heightValid() const;
    void sipProtectVirt_classBegin(bool);
    void sipProtectVirt_componentComplete(bool);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent*);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent*);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent*);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent*);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent*);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent*);
    void sipProtectVirt_mouseUngrabEvent(bool);
    void sipProtectVirt_touchUngrabEvent(bool);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent*);
    void sipProtectVirt_touchEvent(bool,QTouchEvent*);
    void sipProtectVirt_hoverEnterEvent(bool,QHoverEvent*);
    void sipProtectVirt_hoverMoveEvent(bool,QHoverEvent*);
    void sipProtectVirt_hoverLeaveEvent(bool,QHoverEvent*);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent*);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent*);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent*);
    void sipProtectVirt_dropEvent(bool,QDropEvent*);
    bool sipProtectVirt_childMouseEventFilter(bool,QQuickItem*,QEvent*);
    void sipProtectVirt_updatePolish(bool);
    void sipProtectVirt_geometryChanged(bool,const QRectF&,const QRectF&);
    QSGNode* sipProtectVirt_updatePaintNode(bool,QSGNode*,QQuickItem::UpdatePaintNodeData*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    void updatePolish();
    bool childMouseEventFilter(QQuickItem*,QEvent*);
    void dropEvent(QDropEvent*);
    void dragLeaveEvent(QDragLeaveEvent*);
    void dragMoveEvent(QDragMoveEvent*);
    void dragEnterEvent(QDragEnterEvent*);
    void hoverLeaveEvent(QHoverEvent*);
    void hoverMoveEvent(QHoverEvent*);
    void hoverEnterEvent(QHoverEvent*);
    void touchEvent(QTouchEvent*);
    void wheelEvent(QWheelEvent*);
    void touchUngrabEvent();
    void mouseUngrabEvent();
    void mouseDoubleClickEvent(QMouseEvent*);
    void mouseReleaseEvent(QMouseEvent*);
    void mouseMoveEvent(QMouseEvent*);
    void mousePressEvent(QMouseEvent*);
    void focusOutEvent(QFocusEvent*);
    void focusInEvent(QFocusEvent*);
    void inputMethodEvent(QInputMethodEvent*);
    void keyReleaseEvent(QKeyEvent*);
    void keyPressEvent(QKeyEvent*);
    void componentComplete();
    void classBegin();
    void itemChange(QQuickItem::ItemChange,const QQuickItem::ItemChangeData&);
    bool event(QEvent*);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool contains(const QPointF&) const;
    void releaseResources();
    QSGTextureProvider* textureProvider() const;
    bool isTextureProvider() const;
    QSGNode* updatePaintNode(QSGNode*,QQuickItem::UpdatePaintNodeData*);
    void geometryChanged(const QRectF&,const QRectF&);
    QQuickFramebufferObject::Renderer* createRenderer() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQQuickFramebufferObject(const sipQQuickFramebufferObject &);
    sipQQuickFramebufferObject &operator = (const sipQQuickFramebufferObject &);

    char sipPyMethods[40];
};

sipQQuickFramebufferObject::sipQQuickFramebufferObject(QQuickItem*a0): QQuickFramebufferObject(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickFramebufferObject::~sipQQuickFramebufferObject()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQQuickFramebufferObject::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickFramebufferObject);
}

int sipQQuickFramebufferObject::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QQuickFramebufferObject::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickFramebufferObject,_c,_id,_a);

    return _id;
}

void *sipQQuickFramebufferObject::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickFramebufferObject, _clname, &sipCpp) ? sipCpp : QQuickFramebufferObject::qt_metacast(_clname));
}

void sipQQuickFramebufferObject::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QQuickFramebufferObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QQuickFramebufferObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickFramebufferObject::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QQuickFramebufferObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickFramebufferObject::updatePolish()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_updatePolish);

    if (!sipMeth)
    {
        QQuickFramebufferObject::updatePolish();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQQuickFramebufferObject::childMouseEventFilter(QQuickItem*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_childMouseEventFilter);

    if (!sipMeth)
        return QQuickFramebufferObject::childMouseEventFilter(a0,a1);

    extern bool sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QQuickItem*,QEvent*);

    return sipVH_QtQuick_15(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickFramebufferObject::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::dropEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtQuick_16(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtQuick_17(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtQuick_18(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtQuick_19(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::hoverLeaveEvent(QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_hoverLeaveEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::hoverLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHoverEvent*);

    sipVH_QtQuick_20(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::hoverMoveEvent(QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_hoverMoveEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::hoverMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHoverEvent*);

    sipVH_QtQuick_20(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::hoverEnterEvent(QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_hoverEnterEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::hoverEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHoverEvent*);

    sipVH_QtQuick_20(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::touchEvent(QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_touchEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::touchEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTouchEvent*);

    ((sipVH_QtGui_1)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[1]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::touchUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_touchUngrabEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::touchUngrabEvent();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickFramebufferObject::mouseUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_mouseUngrabEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::mouseUngrabEvent();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickFramebufferObject::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtQuick_21(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QQuickFramebufferObject::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::componentComplete()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_componentComplete);

    if (!sipMeth)
    {
        QQuickFramebufferObject::componentComplete();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickFramebufferObject::classBegin()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_classBegin);

    if (!sipMeth)
    {
        QQuickFramebufferObject::classBegin();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickFramebufferObject::itemChange(QQuickItem::ItemChange a0,const QQuickItem::ItemChangeData& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_itemChange);

    if (!sipMeth)
    {
        QQuickFramebufferObject::itemChange(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QQuickItem::ItemChange,const QQuickItem::ItemChangeData&);

    sipVH_QtQuick_22(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQQuickFramebufferObject::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QQuickFramebufferObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQQuickFramebufferObject::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QQuickFramebufferObject::inputMethodQuery(a0);

    extern QVariant sipVH_QtQuick_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtQuick_23(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickFramebufferObject::contains(const QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_contains);

    if (!sipMeth)
        return QQuickFramebufferObject::contains(a0);

    extern bool sipVH_QtQuick_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPointF&);

    return sipVH_QtQuick_24(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickFramebufferObject::releaseResources()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_releaseResources);

    if (!sipMeth)
    {
        QQuickFramebufferObject::releaseResources();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSGTextureProvider* sipQQuickFramebufferObject::textureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_textureProvider);

    if (!sipMeth)
        return QQuickFramebufferObject::textureProvider();

    extern QSGTextureProvider* sipVH_QtQuick_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_11(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQQuickFramebufferObject::isTextureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_isTextureProvider);

    if (!sipMeth)
        return QQuickFramebufferObject::isTextureProvider();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSGNode* sipQQuickFramebufferObject::updatePaintNode(QSGNode*a0,QQuickItem::UpdatePaintNodeData*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_updatePaintNode);

    if (!sipMeth)
        return QQuickFramebufferObject::updatePaintNode(a0,a1);

    extern QSGNode* sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSGNode*,QQuickItem::UpdatePaintNodeData*);

    return sipVH_QtQuick_12(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickFramebufferObject::geometryChanged(const QRectF& a0,const QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_geometryChanged);

    if (!sipMeth)
    {
        QQuickFramebufferObject::geometryChanged(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRectF&,const QRectF&);

    sipVH_QtQuick_14(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QQuickFramebufferObject::Renderer* sipQQuickFramebufferObject::createRenderer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,sipName_QQuickFramebufferObject,sipName_createRenderer);

    if (!sipMeth)
        return 0;

    extern QQuickFramebufferObject::Renderer* sipVH_QtQuick_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_30(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQQuickFramebufferObject::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQQuickFramebufferObject::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQQuickFramebufferObject::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQQuickFramebufferObject::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQQuickFramebufferObject::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

bool sipQQuickFramebufferObject::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QQuickItem::event(a0) : event(a0));
}

bool sipQQuickFramebufferObject::sipProtect_isComponentComplete() const
{
    return QQuickItem::isComponentComplete();
}

void sipQQuickFramebufferObject::sipProtectVirt_itemChange(bool sipSelfWasArg,QQuickItem::ItemChange a0,const QQuickItem::ItemChangeData& a1)
{
    (sipSelfWasArg ? QQuickItem::itemChange(a0,a1) : itemChange(a0,a1));
}

void sipQQuickFramebufferObject::sipProtect_updateInputMethod(Qt::InputMethodQueries a0)
{
    QQuickItem::updateInputMethod(a0);
}

bool sipQQuickFramebufferObject::sipProtect_widthValid() const
{
    return QQuickItem::widthValid();
}

bool sipQQuickFramebufferObject::sipProtect_heightValid() const
{
    return QQuickItem::heightValid();
}

void sipQQuickFramebufferObject::sipProtectVirt_classBegin(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::classBegin() : classBegin());
}

void sipQQuickFramebufferObject::sipProtectVirt_componentComplete(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::componentComplete() : componentComplete());
}

void sipQQuickFramebufferObject::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::focusInEvent(a0) : focusInEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_mouseUngrabEvent(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::mouseUngrabEvent() : mouseUngrabEvent());
}

void sipQQuickFramebufferObject::sipProtectVirt_touchUngrabEvent(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::touchUngrabEvent() : touchUngrabEvent());
}

void sipQQuickFramebufferObject::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::wheelEvent(a0) : wheelEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_touchEvent(bool sipSelfWasArg,QTouchEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::touchEvent(a0) : touchEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_hoverEnterEvent(bool sipSelfWasArg,QHoverEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::hoverEnterEvent(a0) : hoverEnterEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_hoverMoveEvent(bool sipSelfWasArg,QHoverEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::hoverMoveEvent(a0) : hoverMoveEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_hoverLeaveEvent(bool sipSelfWasArg,QHoverEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::hoverLeaveEvent(a0) : hoverLeaveEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQQuickFramebufferObject::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::dropEvent(a0) : dropEvent(a0));
}

bool sipQQuickFramebufferObject::sipProtectVirt_childMouseEventFilter(bool sipSelfWasArg,QQuickItem*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QQuickItem::childMouseEventFilter(a0,a1) : childMouseEventFilter(a0,a1));
}

void sipQQuickFramebufferObject::sipProtectVirt_updatePolish(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::updatePolish() : updatePolish());
}

void sipQQuickFramebufferObject::sipProtectVirt_geometryChanged(bool sipSelfWasArg,const QRectF& a0,const QRectF& a1)
{
    (sipSelfWasArg ? QQuickFramebufferObject::geometryChanged(a0,a1) : geometryChanged(a0,a1));
}

QSGNode* sipQQuickFramebufferObject::sipProtectVirt_updatePaintNode(bool sipSelfWasArg,QSGNode*a0,QQuickItem::UpdatePaintNodeData*a1)
{
    return (sipSelfWasArg ? QQuickFramebufferObject::updatePaintNode(a0,a1) : updatePaintNode(a0,a1));
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_sender, "QQuickFramebufferObject.sender() -> QObject");

extern "C" {static PyObject *meth_QQuickFramebufferObject_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1254 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_sender, doc_QQuickFramebufferObject_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_receivers, "QQuickFramebufferObject.receivers(signal) -> int");

extern "C" {static PyObject *meth_QQuickFramebufferObject_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1313 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickFramebufferObject.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_receivers, doc_QQuickFramebufferObject_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_timerEvent, "QQuickFramebufferObject.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_timerEvent, doc_QQuickFramebufferObject_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_childEvent, "QQuickFramebufferObject.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_childEvent, doc_QQuickFramebufferObject_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_customEvent, "QQuickFramebufferObject.customEvent(QEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_customEvent, doc_QQuickFramebufferObject_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_connectNotify, "QQuickFramebufferObject.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_connectNotify, doc_QQuickFramebufferObject_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_disconnectNotify, "QQuickFramebufferObject.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_disconnectNotify, doc_QQuickFramebufferObject_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_senderSignalIndex, "QQuickFramebufferObject.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QQuickFramebufferObject_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_senderSignalIndex, doc_QQuickFramebufferObject_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_isSignalConnected, "QQuickFramebufferObject.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QQuickFramebufferObject_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_isSignalConnected, doc_QQuickFramebufferObject_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_event, "QQuickFramebufferObject.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickFramebufferObject_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_event, doc_QQuickFramebufferObject_event);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_isComponentComplete, "QQuickFramebufferObject.isComponentComplete() -> bool");

extern "C" {static PyObject *meth_QQuickFramebufferObject_isComponentComplete(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_isComponentComplete(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isComponentComplete();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_isComponentComplete, doc_QQuickFramebufferObject_isComponentComplete);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_itemChange, "QQuickFramebufferObject.itemChange(QQuickItem.ItemChange, QQuickItem.ItemChangeData)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_itemChange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_itemChange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QQuickItem::ItemChange a0;
        const QQuickItem::ItemChangeData* a1;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BEJ9", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QQuickItem_ItemChange, &a0, sipType_QQuickItem_ItemChangeData, &a1))
        {
            sipCpp->sipProtectVirt_itemChange(sipSelfWasArg,a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_itemChange, doc_QQuickFramebufferObject_itemChange);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_updateInputMethod, "QQuickFramebufferObject.updateInputMethod(Qt.InputMethodQueries queries=Qt.ImQueryInput)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_updateInputMethod(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_updateInputMethod(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::InputMethodQueries a0def = Qt::ImQueryInput;
        Qt::InputMethodQueries* a0 = &a0def;
        int a0State = 0;
        sipQQuickFramebufferObject *sipCpp;

        static const char *sipKwdList[] = {
            sipName_queries,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_Qt_InputMethodQueries, &a0, &a0State))
        {
            sipCpp->sipProtect_updateInputMethod(*a0);
            sipReleaseType(a0,sipType_Qt_InputMethodQueries,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_updateInputMethod, doc_QQuickFramebufferObject_updateInputMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_widthValid, "QQuickFramebufferObject.widthValid() -> bool");

extern "C" {static PyObject *meth_QQuickFramebufferObject_widthValid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_widthValid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_widthValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_widthValid, doc_QQuickFramebufferObject_widthValid);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_heightValid, "QQuickFramebufferObject.heightValid() -> bool");

extern "C" {static PyObject *meth_QQuickFramebufferObject_heightValid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_heightValid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_heightValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_heightValid, doc_QQuickFramebufferObject_heightValid);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_classBegin, "QQuickFramebufferObject.classBegin()");

extern "C" {static PyObject *meth_QQuickFramebufferObject_classBegin(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_classBegin(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            sipCpp->sipProtectVirt_classBegin(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_classBegin, doc_QQuickFramebufferObject_classBegin);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_componentComplete, "QQuickFramebufferObject.componentComplete()");

extern "C" {static PyObject *meth_QQuickFramebufferObject_componentComplete(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_componentComplete(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            sipCpp->sipProtectVirt_componentComplete(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_componentComplete, doc_QQuickFramebufferObject_componentComplete);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_keyPressEvent, "QQuickFramebufferObject.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_keyPressEvent, doc_QQuickFramebufferObject_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_keyReleaseEvent, "QQuickFramebufferObject.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_keyReleaseEvent, doc_QQuickFramebufferObject_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_inputMethodEvent, "QQuickFramebufferObject.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_inputMethodEvent, doc_QQuickFramebufferObject_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_focusInEvent, "QQuickFramebufferObject.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_focusInEvent, doc_QQuickFramebufferObject_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_focusOutEvent, "QQuickFramebufferObject.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_focusOutEvent, doc_QQuickFramebufferObject_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_mousePressEvent, "QQuickFramebufferObject.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_mousePressEvent, doc_QQuickFramebufferObject_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_mouseMoveEvent, "QQuickFramebufferObject.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_mouseMoveEvent, doc_QQuickFramebufferObject_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_mouseReleaseEvent, "QQuickFramebufferObject.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_mouseReleaseEvent, doc_QQuickFramebufferObject_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_mouseDoubleClickEvent, "QQuickFramebufferObject.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_mouseDoubleClickEvent, doc_QQuickFramebufferObject_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_mouseUngrabEvent, "QQuickFramebufferObject.mouseUngrabEvent()");

extern "C" {static PyObject *meth_QQuickFramebufferObject_mouseUngrabEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_mouseUngrabEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            sipCpp->sipProtectVirt_mouseUngrabEvent(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_mouseUngrabEvent, doc_QQuickFramebufferObject_mouseUngrabEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_touchUngrabEvent, "QQuickFramebufferObject.touchUngrabEvent()");

extern "C" {static PyObject *meth_QQuickFramebufferObject_touchUngrabEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_touchUngrabEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            sipCpp->sipProtectVirt_touchUngrabEvent(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_touchUngrabEvent, doc_QQuickFramebufferObject_touchUngrabEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_wheelEvent, "QQuickFramebufferObject.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_wheelEvent, doc_QQuickFramebufferObject_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_touchEvent, "QQuickFramebufferObject.touchEvent(QTouchEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_touchEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_touchEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTouchEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QTouchEvent, &a0))
        {
            sipCpp->sipProtectVirt_touchEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_touchEvent, doc_QQuickFramebufferObject_touchEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_hoverEnterEvent, "QQuickFramebufferObject.hoverEnterEvent(QHoverEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_hoverEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_hoverEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHoverEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QHoverEvent, &a0))
        {
            sipCpp->sipProtectVirt_hoverEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_hoverEnterEvent, doc_QQuickFramebufferObject_hoverEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_hoverMoveEvent, "QQuickFramebufferObject.hoverMoveEvent(QHoverEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_hoverMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_hoverMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHoverEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QHoverEvent, &a0))
        {
            sipCpp->sipProtectVirt_hoverMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_hoverMoveEvent, doc_QQuickFramebufferObject_hoverMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_hoverLeaveEvent, "QQuickFramebufferObject.hoverLeaveEvent(QHoverEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_hoverLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_hoverLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHoverEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QHoverEvent, &a0))
        {
            sipCpp->sipProtectVirt_hoverLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_hoverLeaveEvent, doc_QQuickFramebufferObject_hoverLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_dragEnterEvent, "QQuickFramebufferObject.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_dragEnterEvent, doc_QQuickFramebufferObject_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_dragMoveEvent, "QQuickFramebufferObject.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_dragMoveEvent, doc_QQuickFramebufferObject_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_dragLeaveEvent, "QQuickFramebufferObject.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_dragLeaveEvent, doc_QQuickFramebufferObject_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_dropEvent, "QQuickFramebufferObject.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_dropEvent, doc_QQuickFramebufferObject_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_childMouseEventFilter, "QQuickFramebufferObject.childMouseEventFilter(QQuickItem, QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickFramebufferObject_childMouseEventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_childMouseEventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QQuickItem* a0;
        QEvent* a1;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QQuickItem, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_childMouseEventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_childMouseEventFilter, doc_QQuickFramebufferObject_childMouseEventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_updatePolish, "QQuickFramebufferObject.updatePolish()");

extern "C" {static PyObject *meth_QQuickFramebufferObject_updatePolish(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_updatePolish(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            sipCpp->sipProtectVirt_updatePolish(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_updatePolish, doc_QQuickFramebufferObject_updatePolish);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_textureFollowsItemSize, "QQuickFramebufferObject.textureFollowsItemSize() -> bool");

extern "C" {static PyObject *meth_QQuickFramebufferObject_textureFollowsItemSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_textureFollowsItemSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->textureFollowsItemSize();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_textureFollowsItemSize, doc_QQuickFramebufferObject_textureFollowsItemSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_setTextureFollowsItemSize, "QQuickFramebufferObject.setTextureFollowsItemSize(bool)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_setTextureFollowsItemSize(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_setTextureFollowsItemSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, &a0))
        {
            sipCpp->setTextureFollowsItemSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_setTextureFollowsItemSize, doc_QQuickFramebufferObject_setTextureFollowsItemSize);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_createRenderer, "QQuickFramebufferObject.createRenderer() -> QQuickFramebufferObject.Renderer");

extern "C" {static PyObject *meth_QQuickFramebufferObject_createRenderer(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_createRenderer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            QQuickFramebufferObject::Renderer*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QQuickFramebufferObject, sipName_createRenderer);
                return NULL;
            }

            sipRes = sipCpp->createRenderer();

            return sipConvertFromNewType(sipRes,sipType_QQuickFramebufferObject_Renderer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_createRenderer, doc_QQuickFramebufferObject_createRenderer);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_geometryChanged, "QQuickFramebufferObject.geometryChanged(QRectF, QRectF)");

extern "C" {static PyObject *meth_QQuickFramebufferObject_geometryChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_geometryChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF* a0;
        const QRectF* a1;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QRectF, &a0, sipType_QRectF, &a1))
        {
            sipCpp->sipProtectVirt_geometryChanged(sipSelfWasArg,*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_geometryChanged, doc_QQuickFramebufferObject_geometryChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_updatePaintNode, "QQuickFramebufferObject.updatePaintNode(QSGNode, QQuickItem.UpdatePaintNodeData) -> QSGNode");

extern "C" {static PyObject *meth_QQuickFramebufferObject_updatePaintNode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_updatePaintNode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSGNode* a0;
        QQuickItem::UpdatePaintNodeData* a1;
        sipQQuickFramebufferObject *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp, sipType_QSGNode, &a0, sipType_QQuickItem_UpdatePaintNodeData, &a1))
        {
            QSGNode*sipRes;

            sipRes = sipCpp->sipProtectVirt_updatePaintNode(sipSelfWasArg,a0,a1);

            return sipConvertFromType(sipRes,sipType_QSGNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_updatePaintNode, doc_QQuickFramebufferObject_updatePaintNode);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_isTextureProvider, "QQuickFramebufferObject.isTextureProvider() -> bool");

extern "C" {static PyObject *meth_QQuickFramebufferObject_isTextureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_isTextureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickFramebufferObject::isTextureProvider() : sipCpp->isTextureProvider());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_isTextureProvider, doc_QQuickFramebufferObject_isTextureProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_textureProvider, "QQuickFramebufferObject.textureProvider() -> QSGTextureProvider");

extern "C" {static PyObject *meth_QQuickFramebufferObject_textureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_textureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            QSGTextureProvider*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickFramebufferObject::textureProvider() : sipCpp->textureProvider());

            return sipConvertFromType(sipRes,sipType_QSGTextureProvider,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_textureProvider, doc_QQuickFramebufferObject_textureProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickFramebufferObject_releaseResources, "QQuickFramebufferObject.releaseResources()");

extern "C" {static PyObject *meth_QQuickFramebufferObject_releaseResources(PyObject *, PyObject *);}
static PyObject *meth_QQuickFramebufferObject_releaseResources(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QQuickFramebufferObject *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickFramebufferObject, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QQuickFramebufferObject::releaseResources() : sipCpp->releaseResources());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickFramebufferObject, sipName_releaseResources, doc_QQuickFramebufferObject_releaseResources);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QQuickFramebufferObject(void *, const sipTypeDef *);}
static void *cast_QQuickFramebufferObject(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QQuickFramebufferObject)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QQuickItem)->ctd_cast((QQuickItem *)(QQuickFramebufferObject *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickFramebufferObject(void *, int);}
static void release_QQuickFramebufferObject(void *sipCppV,int)
{
    QQuickFramebufferObject *sipCpp = reinterpret_cast<QQuickFramebufferObject *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickFramebufferObject(sipSimpleWrapper *);}
static void dealloc_QQuickFramebufferObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQQuickFramebufferObject *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QQuickFramebufferObject(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QQuickFramebufferObject(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickFramebufferObject(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickFramebufferObject *sipCpp = 0;

    {
        QQuickItem* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QQuickItem, &a0, sipOwner))
        {
            sipCpp = new sipQQuickFramebufferObject(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickFramebufferObject[] = {{4, 255, 1}};


static PyMethodDef methods_QQuickFramebufferObject[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QQuickFramebufferObject_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childMouseEventFilter), (PyCFunction)meth_QQuickFramebufferObject_childMouseEventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_classBegin), (PyCFunction)meth_QQuickFramebufferObject_classBegin, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_componentComplete), (PyCFunction)meth_QQuickFramebufferObject_componentComplete, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QQuickFramebufferObject_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createRenderer), meth_QQuickFramebufferObject_createRenderer, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_createRenderer)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QQuickFramebufferObject_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QQuickFramebufferObject_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QQuickFramebufferObject_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QQuickFramebufferObject_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QQuickFramebufferObject_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QQuickFramebufferObject_dropEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QQuickFramebufferObject_event, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QQuickFramebufferObject_focusInEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QQuickFramebufferObject_focusOutEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_geometryChanged), (PyCFunction)meth_QQuickFramebufferObject_geometryChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_geometryChanged)},
    {SIP_MLNAME_CAST(sipName_heightValid), (PyCFunction)meth_QQuickFramebufferObject_heightValid, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hoverEnterEvent), (PyCFunction)meth_QQuickFramebufferObject_hoverEnterEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hoverLeaveEvent), (PyCFunction)meth_QQuickFramebufferObject_hoverLeaveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_hoverMoveEvent), (PyCFunction)meth_QQuickFramebufferObject_hoverMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QQuickFramebufferObject_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isComponentComplete), (PyCFunction)meth_QQuickFramebufferObject_isComponentComplete, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QQuickFramebufferObject_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isTextureProvider), meth_QQuickFramebufferObject_isTextureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_isTextureProvider)},
    {SIP_MLNAME_CAST(sipName_itemChange), (PyCFunction)meth_QQuickFramebufferObject_itemChange, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QQuickFramebufferObject_keyPressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QQuickFramebufferObject_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QQuickFramebufferObject_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QQuickFramebufferObject_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QQuickFramebufferObject_mousePressEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QQuickFramebufferObject_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseUngrabEvent), (PyCFunction)meth_QQuickFramebufferObject_mouseUngrabEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QQuickFramebufferObject_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_releaseResources), meth_QQuickFramebufferObject_releaseResources, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_releaseResources)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QQuickFramebufferObject_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QQuickFramebufferObject_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextureFollowsItemSize), meth_QQuickFramebufferObject_setTextureFollowsItemSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_setTextureFollowsItemSize)},
    {SIP_MLNAME_CAST(sipName_textureFollowsItemSize), meth_QQuickFramebufferObject_textureFollowsItemSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_textureFollowsItemSize)},
    {SIP_MLNAME_CAST(sipName_textureProvider), meth_QQuickFramebufferObject_textureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_textureProvider)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QQuickFramebufferObject_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_touchEvent), (PyCFunction)meth_QQuickFramebufferObject_touchEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_touchUngrabEvent), (PyCFunction)meth_QQuickFramebufferObject_touchUngrabEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateInputMethod), (PyCFunction)meth_QQuickFramebufferObject_updateInputMethod, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updatePaintNode), (PyCFunction)meth_QQuickFramebufferObject_updatePaintNode, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickFramebufferObject_updatePaintNode)},
    {SIP_MLNAME_CAST(sipName_updatePolish), (PyCFunction)meth_QQuickFramebufferObject_updatePolish, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QQuickFramebufferObject_wheelEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_widthValid), (PyCFunction)meth_QQuickFramebufferObject_widthValid, METH_VARARGS|METH_KEYWORDS, NULL}
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickFramebufferObject[] = {
    {"textureFollowsItemSizeChanged(bool)", "\1QQuickFramebufferObject.textureFollowsItemSizeChanged[bool]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QQuickFramebufferObject, "\1QQuickFramebufferObject(QQuickItem parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtQuick_QQuickFramebufferObject = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QQuickFramebufferObject,
        {0}
    },
    {
        sipNameNr_QQuickFramebufferObject,
        {0, 0, 1},
        47, methods_QQuickFramebufferObject,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQuickFramebufferObject,
    -1,
    -1,
    supers_QQuickFramebufferObject,
    0,
    init_type_QQuickFramebufferObject,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQuickFramebufferObject,
    0,
    0,
    0,
    release_QQuickFramebufferObject,
    cast_QQuickFramebufferObject,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QQuickFramebufferObject::staticMetaObject,
    0,
    signals_QQuickFramebufferObject,
    0
};
