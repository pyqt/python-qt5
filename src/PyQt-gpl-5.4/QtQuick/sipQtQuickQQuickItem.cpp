/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:46 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitemgrabresult.sip"
#include <qquickitemgrabresult.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickwindow.sip"
#include <qquickwindow.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 178 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 47 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 50 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 53 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 534 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 583 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 59 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 556 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 62 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 572 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 65 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 232 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 68 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 686 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 71 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 247 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 74 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 202 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 77 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 354 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 80 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 479 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 83 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 333 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 86 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 89 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 94 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgtextureprovider.sip"
#include <qsgtextureprovider.h>
#line 97 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 100 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 103 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 99 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 106 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 321 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 109 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 112 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 115 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
#include <qquickitem.h>
#line 118 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 121 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 124 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 127 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 130 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 133 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 136 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 139 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 142 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 145 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 148 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 151 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 154 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 157 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 160 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"

sipQQuickItem::sipQQuickItem(QQuickItem*a0): QQuickItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQQuickItem::~sipQQuickItem()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQQuickItem::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtQuick_qt_metaobject(sipPySelf,sipType_QQuickItem);
}

int sipQQuickItem::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QQuickItem::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtQuick_qt_metacall(sipPySelf,sipType_QQuickItem,_c,_id,_a);

    return _id;
}

void *sipQQuickItem::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtQuick_qt_metacast(sipPySelf, sipType_QQuickItem, _clname, &sipCpp) ? sipCpp : QQuickItem::qt_metacast(_clname));
}

void sipQQuickItem::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QQuickItem::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QQuickItem::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QQuickItem::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QQuickItem::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QQuickItem::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickItem::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QQuickItem::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickItem::updatePolish()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_updatePolish);

    if (!sipMeth)
    {
        QQuickItem::updatePolish();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickItem::releaseResources()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_releaseResources);

    if (!sipMeth)
    {
        QQuickItem::releaseResources();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSGNode* sipQQuickItem::updatePaintNode(QSGNode*a0,QQuickItem::UpdatePaintNodeData*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_updatePaintNode);

    if (!sipMeth)
        return QQuickItem::updatePaintNode(a0,a1);

    extern QSGNode* sipVH_QtQuick_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSGNode*,QQuickItem::UpdatePaintNodeData*);

    return sipVH_QtQuick_12(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickItem::geometryChanged(const QRectF& a0,const QRectF& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_geometryChanged);

    if (!sipMeth)
    {
        QQuickItem::geometryChanged(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QRectF&,const QRectF&);

    sipVH_QtQuick_14(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQQuickItem::childMouseEventFilter(QQuickItem*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_childMouseEventFilter);

    if (!sipMeth)
        return QQuickItem::childMouseEventFilter(a0,a1);

    extern bool sipVH_QtQuick_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QQuickItem*,QEvent*);

    return sipVH_QtQuick_15(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQQuickItem::dropEvent(QDropEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_dropEvent);

    if (!sipMeth)
    {
        QQuickItem::dropEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDropEvent*);

    sipVH_QtQuick_16(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::dragLeaveEvent(QDragLeaveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!sipMeth)
    {
        QQuickItem::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragLeaveEvent*);

    sipVH_QtQuick_17(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::dragMoveEvent(QDragMoveEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!sipMeth)
    {
        QQuickItem::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragMoveEvent*);

    sipVH_QtQuick_18(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::dragEnterEvent(QDragEnterEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!sipMeth)
    {
        QQuickItem::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QDragEnterEvent*);

    sipVH_QtQuick_19(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::hoverLeaveEvent(QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_hoverLeaveEvent);

    if (!sipMeth)
    {
        QQuickItem::hoverLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHoverEvent*);

    sipVH_QtQuick_20(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::hoverMoveEvent(QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_hoverMoveEvent);

    if (!sipMeth)
    {
        QQuickItem::hoverMoveEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHoverEvent*);

    sipVH_QtQuick_20(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::hoverEnterEvent(QHoverEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_hoverEnterEvent);

    if (!sipMeth)
    {
        QQuickItem::hoverEnterEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHoverEvent*);

    sipVH_QtQuick_20(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::touchEvent(QTouchEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_touchEvent);

    if (!sipMeth)
    {
        QQuickItem::touchEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTouchEvent*);

    ((sipVH_QtGui_1)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[1]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::wheelEvent(QWheelEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_wheelEvent);

    if (!sipMeth)
    {
        QQuickItem::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWheelEvent*);

    ((sipVH_QtGui_2)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[2]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::touchUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_touchUngrabEvent);

    if (!sipMeth)
    {
        QQuickItem::touchUngrabEvent();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickItem::mouseUngrabEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_mouseUngrabEvent);

    if (!sipMeth)
    {
        QQuickItem::mouseUngrabEvent();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickItem::mouseDoubleClickEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!sipMeth)
    {
        QQuickItem::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::mouseReleaseEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!sipMeth)
    {
        QQuickItem::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::mouseMoveEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!sipMeth)
    {
        QQuickItem::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::mousePressEvent(QMouseEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_mousePressEvent);

    if (!sipMeth)
    {
        QQuickItem::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QMouseEvent*);

    ((sipVH_QtGui_3)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[3]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::focusOutEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_focusOutEvent);

    if (!sipMeth)
    {
        QQuickItem::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::focusInEvent(QFocusEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_focusInEvent);

    if (!sipMeth)
    {
        QQuickItem::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QFocusEvent*);

    ((sipVH_QtGui_7)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::inputMethodEvent(QInputMethodEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!sipMeth)
    {
        QQuickItem::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtQuick_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QInputMethodEvent*);

    sipVH_QtQuick_21(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::keyReleaseEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!sipMeth)
    {
        QQuickItem::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::keyPressEvent(QKeyEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_keyPressEvent);

    if (!sipMeth)
    {
        QQuickItem::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QKeyEvent*);

    ((sipVH_QtGui_4)(sipModuleAPI_QtQuick_QtGui->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQQuickItem::componentComplete()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_componentComplete);

    if (!sipMeth)
    {
        QQuickItem::componentComplete();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickItem::classBegin()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_classBegin);

    if (!sipMeth)
    {
        QQuickItem::classBegin();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQQuickItem::itemChange(QQuickItem::ItemChange a0,const QQuickItem::ItemChangeData& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_itemChange);

    if (!sipMeth)
    {
        QQuickItem::itemChange(a0,a1);
        return;
    }

    extern void sipVH_QtQuick_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QQuickItem::ItemChange,const QQuickItem::ItemChangeData&);

    sipVH_QtQuick_22(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQQuickItem::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QQuickItem::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSGTextureProvider* sipQQuickItem::textureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_textureProvider);

    if (!sipMeth)
        return QQuickItem::textureProvider();

    extern QSGTextureProvider* sipVH_QtQuick_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtQuick_11(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQQuickItem::isTextureProvider() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_isTextureProvider);

    if (!sipMeth)
        return QQuickItem::isTextureProvider();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QVariant sipQQuickItem::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!sipMeth)
        return QQuickItem::inputMethodQuery(a0);

    extern QVariant sipVH_QtQuick_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, Qt::InputMethodQuery);

    return sipVH_QtQuick_23(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQQuickItem::contains(const QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_contains);

    if (!sipMeth)
        return QQuickItem::contains(a0);

    extern bool sipVH_QtQuick_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPointF&);

    return sipVH_QtQuick_24(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQQuickItem::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQQuickItem::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQQuickItem::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQQuickItem::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQQuickItem::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQQuickItem::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQQuickItem::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQQuickItem::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQQuickItem::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

bool sipQQuickItem::sipProtectVirt_event(bool sipSelfWasArg,QEvent*a0)
{
    return (sipSelfWasArg ? QQuickItem::event(a0) : event(a0));
}

bool sipQQuickItem::sipProtect_isComponentComplete() const
{
    return QQuickItem::isComponentComplete();
}

void sipQQuickItem::sipProtectVirt_itemChange(bool sipSelfWasArg,QQuickItem::ItemChange a0,const QQuickItem::ItemChangeData& a1)
{
    (sipSelfWasArg ? QQuickItem::itemChange(a0,a1) : itemChange(a0,a1));
}

void sipQQuickItem::sipProtect_updateInputMethod(Qt::InputMethodQueries a0)
{
    QQuickItem::updateInputMethod(a0);
}

bool sipQQuickItem::sipProtect_widthValid() const
{
    return QQuickItem::widthValid();
}

bool sipQQuickItem::sipProtect_heightValid() const
{
    return QQuickItem::heightValid();
}

void sipQQuickItem::sipProtectVirt_classBegin(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::classBegin() : classBegin());
}

void sipQQuickItem::sipProtectVirt_componentComplete(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::componentComplete() : componentComplete());
}

void sipQQuickItem::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQQuickItem::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQQuickItem::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQQuickItem::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::focusInEvent(a0) : focusInEvent(a0));
}

void sipQQuickItem::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQQuickItem::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQQuickItem::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQQuickItem::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQQuickItem::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQQuickItem::sipProtectVirt_mouseUngrabEvent(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::mouseUngrabEvent() : mouseUngrabEvent());
}

void sipQQuickItem::sipProtectVirt_touchUngrabEvent(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::touchUngrabEvent() : touchUngrabEvent());
}

void sipQQuickItem::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::wheelEvent(a0) : wheelEvent(a0));
}

void sipQQuickItem::sipProtectVirt_touchEvent(bool sipSelfWasArg,QTouchEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::touchEvent(a0) : touchEvent(a0));
}

void sipQQuickItem::sipProtectVirt_hoverEnterEvent(bool sipSelfWasArg,QHoverEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::hoverEnterEvent(a0) : hoverEnterEvent(a0));
}

void sipQQuickItem::sipProtectVirt_hoverMoveEvent(bool sipSelfWasArg,QHoverEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::hoverMoveEvent(a0) : hoverMoveEvent(a0));
}

void sipQQuickItem::sipProtectVirt_hoverLeaveEvent(bool sipSelfWasArg,QHoverEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::hoverLeaveEvent(a0) : hoverLeaveEvent(a0));
}

void sipQQuickItem::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQQuickItem::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQQuickItem::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQQuickItem::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent*a0)
{
    (sipSelfWasArg ? QQuickItem::dropEvent(a0) : dropEvent(a0));
}

bool sipQQuickItem::sipProtectVirt_childMouseEventFilter(bool sipSelfWasArg,QQuickItem*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QQuickItem::childMouseEventFilter(a0,a1) : childMouseEventFilter(a0,a1));
}

void sipQQuickItem::sipProtectVirt_geometryChanged(bool sipSelfWasArg,const QRectF& a0,const QRectF& a1)
{
    (sipSelfWasArg ? QQuickItem::geometryChanged(a0,a1) : geometryChanged(a0,a1));
}

QSGNode* sipQQuickItem::sipProtectVirt_updatePaintNode(bool sipSelfWasArg,QSGNode*a0,QQuickItem::UpdatePaintNodeData*a1)
{
    return (sipSelfWasArg ? QQuickItem::updatePaintNode(a0,a1) : updatePaintNode(a0,a1));
}

void sipQQuickItem::sipProtectVirt_releaseResources(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::releaseResources() : releaseResources());
}

void sipQQuickItem::sipProtectVirt_updatePolish(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QQuickItem::updatePolish() : updatePolish());
}


PyDoc_STRVAR(doc_QQuickItem_sender, "QQuickItem.sender() -> QObject");

extern "C" {static PyObject *meth_QQuickItem_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_sender, doc_QQuickItem_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_receivers, "QQuickItem.receivers(signal) -> int");

extern "C" {static PyObject *meth_QQuickItem_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1182 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_receivers, doc_QQuickItem_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_timerEvent, "QQuickItem.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QQuickItem_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_timerEvent, doc_QQuickItem_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_childEvent, "QQuickItem.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QQuickItem_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_childEvent, doc_QQuickItem_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_customEvent, "QQuickItem.customEvent(QEvent)");

extern "C" {static PyObject *meth_QQuickItem_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_customEvent, doc_QQuickItem_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_connectNotify, "QQuickItem.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QQuickItem_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_connectNotify, doc_QQuickItem_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_disconnectNotify, "QQuickItem.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QQuickItem_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_disconnectNotify, doc_QQuickItem_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_senderSignalIndex, "QQuickItem.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QQuickItem_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_senderSignalIndex, doc_QQuickItem_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_isSignalConnected, "QQuickItem.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QQuickItem_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_isSignalConnected, doc_QQuickItem_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_window, "QQuickItem.window() -> QQuickWindow");

extern "C" {static PyObject *meth_QQuickItem_window(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_window(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            QQuickWindow*sipRes;

            sipRes = sipCpp->window();

            return sipConvertFromType(sipRes,sipType_QQuickWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_window, doc_QQuickItem_window);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_parentItem, "QQuickItem.parentItem() -> QQuickItem");

extern "C" {static PyObject *meth_QQuickItem_parentItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_parentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            QQuickItem*sipRes;

            sipRes = sipCpp->parentItem();

            return sipConvertFromType(sipRes,sipType_QQuickItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_parentItem, doc_QQuickItem_parentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setParentItem, "QQuickItem.setParentItem(QQuickItem)");

extern "C" {static PyObject *meth_QQuickItem_setParentItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setParentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem* a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0))
        {
            sipCpp->setParentItem(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setParentItem, doc_QQuickItem_setParentItem);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_stackBefore, "QQuickItem.stackBefore(QQuickItem)");

extern "C" {static PyObject *meth_QQuickItem_stackBefore(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_stackBefore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem* a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0))
        {
            sipCpp->stackBefore(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_stackBefore, doc_QQuickItem_stackBefore);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_stackAfter, "QQuickItem.stackAfter(QQuickItem)");

extern "C" {static PyObject *meth_QQuickItem_stackAfter(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_stackAfter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem* a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0))
        {
            sipCpp->stackAfter(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_stackAfter, doc_QQuickItem_stackAfter);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_childrenRect, "QQuickItem.childrenRect() -> QRectF");

extern "C" {static PyObject *meth_QQuickItem_childrenRect(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_childrenRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->childrenRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_childrenRect, doc_QQuickItem_childrenRect);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_childItems, "QQuickItem.childItems() -> list-of-QQuickItem");

extern "C" {static PyObject *meth_QQuickItem_childItems(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_childItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            QList<QQuickItem*>*sipRes;

            sipRes = new QList<QQuickItem*>(sipCpp->childItems());

            return sipConvertFromNewType(sipRes,sipType_QList_0101QQuickItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_childItems, doc_QQuickItem_childItems);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_clip, "QQuickItem.clip() -> bool");

extern "C" {static PyObject *meth_QQuickItem_clip(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_clip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->clip();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_clip, doc_QQuickItem_clip);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setClip, "QQuickItem.setClip(bool)");

extern "C" {static PyObject *meth_QQuickItem_setClip(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setClip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setClip(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setClip, doc_QQuickItem_setClip);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_state, "QQuickItem.state() -> str");

extern "C" {static PyObject *meth_QQuickItem_state(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_state(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->state());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_state, doc_QQuickItem_state);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setState, "QQuickItem.setState(str)");

extern "C" {static PyObject *meth_QQuickItem_setState(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setState(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setState, doc_QQuickItem_setState);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_baselineOffset, "QQuickItem.baselineOffset() -> float");

extern "C" {static PyObject *meth_QQuickItem_baselineOffset(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_baselineOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->baselineOffset();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_baselineOffset, doc_QQuickItem_baselineOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setBaselineOffset, "QQuickItem.setBaselineOffset(float)");

extern "C" {static PyObject *meth_QQuickItem_setBaselineOffset(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setBaselineOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setBaselineOffset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setBaselineOffset, doc_QQuickItem_setBaselineOffset);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_x, "QQuickItem.x() -> float");

extern "C" {static PyObject *meth_QQuickItem_x(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->x();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_x, doc_QQuickItem_x);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_y, "QQuickItem.y() -> float");

extern "C" {static PyObject *meth_QQuickItem_y(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->y();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_y, doc_QQuickItem_y);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setX, "QQuickItem.setX(float)");

extern "C" {static PyObject *meth_QQuickItem_setX(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setX(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setX, doc_QQuickItem_setX);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setY, "QQuickItem.setY(float)");

extern "C" {static PyObject *meth_QQuickItem_setY(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setY(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setY, doc_QQuickItem_setY);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_width, "QQuickItem.width() -> float");

extern "C" {static PyObject *meth_QQuickItem_width(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_width(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->width();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_width, doc_QQuickItem_width);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setWidth, "QQuickItem.setWidth(float)");

extern "C" {static PyObject *meth_QQuickItem_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setWidth, doc_QQuickItem_setWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_resetWidth, "QQuickItem.resetWidth()");

extern "C" {static PyObject *meth_QQuickItem_resetWidth(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_resetWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->resetWidth();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_resetWidth, doc_QQuickItem_resetWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setImplicitWidth, "QQuickItem.setImplicitWidth(float)");

extern "C" {static PyObject *meth_QQuickItem_setImplicitWidth(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setImplicitWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setImplicitWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setImplicitWidth, doc_QQuickItem_setImplicitWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_implicitWidth, "QQuickItem.implicitWidth() -> float");

extern "C" {static PyObject *meth_QQuickItem_implicitWidth(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_implicitWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->implicitWidth();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_implicitWidth, doc_QQuickItem_implicitWidth);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_height, "QQuickItem.height() -> float");

extern "C" {static PyObject *meth_QQuickItem_height(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_height(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->height();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_height, doc_QQuickItem_height);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setHeight, "QQuickItem.setHeight(float)");

extern "C" {static PyObject *meth_QQuickItem_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setHeight, doc_QQuickItem_setHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_resetHeight, "QQuickItem.resetHeight()");

extern "C" {static PyObject *meth_QQuickItem_resetHeight(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_resetHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->resetHeight();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_resetHeight, doc_QQuickItem_resetHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setImplicitHeight, "QQuickItem.setImplicitHeight(float)");

extern "C" {static PyObject *meth_QQuickItem_setImplicitHeight(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setImplicitHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setImplicitHeight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setImplicitHeight, doc_QQuickItem_setImplicitHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_implicitHeight, "QQuickItem.implicitHeight() -> float");

extern "C" {static PyObject *meth_QQuickItem_implicitHeight(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_implicitHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->implicitHeight();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_implicitHeight, doc_QQuickItem_implicitHeight);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_transformOrigin, "QQuickItem.transformOrigin() -> QQuickItem.TransformOrigin");

extern "C" {static PyObject *meth_QQuickItem_transformOrigin(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_transformOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            QQuickItem::TransformOrigin sipRes;

            sipRes = sipCpp->transformOrigin();

            return sipConvertFromEnum(sipRes,sipType_QQuickItem_TransformOrigin);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_transformOrigin, doc_QQuickItem_transformOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setTransformOrigin, "QQuickItem.setTransformOrigin(QQuickItem.TransformOrigin)");

extern "C" {static PyObject *meth_QQuickItem_setTransformOrigin(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setTransformOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem::TransformOrigin a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem_TransformOrigin, &a0))
        {
            sipCpp->setTransformOrigin(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setTransformOrigin, doc_QQuickItem_setTransformOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_z, "QQuickItem.z() -> float");

extern "C" {static PyObject *meth_QQuickItem_z(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_z(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->z();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_z, doc_QQuickItem_z);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setZ, "QQuickItem.setZ(float)");

extern "C" {static PyObject *meth_QQuickItem_setZ(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setZ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setZ(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setZ, doc_QQuickItem_setZ);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_rotation, "QQuickItem.rotation() -> float");

extern "C" {static PyObject *meth_QQuickItem_rotation(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_rotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->rotation();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_rotation, doc_QQuickItem_rotation);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setRotation, "QQuickItem.setRotation(float)");

extern "C" {static PyObject *meth_QQuickItem_setRotation(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setRotation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setRotation, doc_QQuickItem_setRotation);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_scale, "QQuickItem.scale() -> float");

extern "C" {static PyObject *meth_QQuickItem_scale(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->scale();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_scale, doc_QQuickItem_scale);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setScale, "QQuickItem.setScale(float)");

extern "C" {static PyObject *meth_QQuickItem_setScale(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setScale(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setScale, doc_QQuickItem_setScale);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_opacity, "QQuickItem.opacity() -> float");

extern "C" {static PyObject *meth_QQuickItem_opacity(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_opacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->opacity();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_opacity, doc_QQuickItem_opacity);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setOpacity, "QQuickItem.setOpacity(float)");

extern "C" {static PyObject *meth_QQuickItem_setOpacity(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setOpacity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setOpacity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setOpacity, doc_QQuickItem_setOpacity);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_isVisible, "QQuickItem.isVisible() -> bool");

extern "C" {static PyObject *meth_QQuickItem_isVisible(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_isVisible, doc_QQuickItem_isVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setVisible, "QQuickItem.setVisible(bool)");

extern "C" {static PyObject *meth_QQuickItem_setVisible(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setVisible(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setVisible, doc_QQuickItem_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_isEnabled, "QQuickItem.isEnabled() -> bool");

extern "C" {static PyObject *meth_QQuickItem_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_isEnabled, doc_QQuickItem_isEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setEnabled, "QQuickItem.setEnabled(bool)");

extern "C" {static PyObject *meth_QQuickItem_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setEnabled, doc_QQuickItem_setEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_smooth, "QQuickItem.smooth() -> bool");

extern "C" {static PyObject *meth_QQuickItem_smooth(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_smooth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->smooth();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_smooth, doc_QQuickItem_smooth);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setSmooth, "QQuickItem.setSmooth(bool)");

extern "C" {static PyObject *meth_QQuickItem_setSmooth(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setSmooth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setSmooth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setSmooth, doc_QQuickItem_setSmooth);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_antialiasing, "QQuickItem.antialiasing() -> bool");

extern "C" {static PyObject *meth_QQuickItem_antialiasing(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_antialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->antialiasing();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_antialiasing, doc_QQuickItem_antialiasing);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setAntialiasing, "QQuickItem.setAntialiasing(bool)");

extern "C" {static PyObject *meth_QQuickItem_setAntialiasing(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setAntialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setAntialiasing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setAntialiasing, doc_QQuickItem_setAntialiasing);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_flags, "QQuickItem.flags() -> QQuickItem.Flags");

extern "C" {static PyObject *meth_QQuickItem_flags(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            QQuickItem::Flags*sipRes;

            sipRes = new QQuickItem::Flags(sipCpp->flags());

            return sipConvertFromNewType(sipRes,sipType_QQuickItem_Flags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_flags, doc_QQuickItem_flags);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setFlag, "QQuickItem.setFlag(QQuickItem.Flag, bool enabled=True)");

extern "C" {static PyObject *meth_QQuickItem_setFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem::Flag a0;
        bool a1 = 1;
        QQuickItem *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem_Flag, &a0, &a1))
        {
            sipCpp->setFlag(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setFlag, doc_QQuickItem_setFlag);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setFlags, "QQuickItem.setFlags(QQuickItem.Flags)");

extern "C" {static PyObject *meth_QQuickItem_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem::Flags* a0;
        int a0State = 0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem_Flags, &a0, &a0State))
        {
            sipCpp->setFlags(*a0);
            sipReleaseType(a0,sipType_QQuickItem_Flags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setFlags, doc_QQuickItem_setFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_hasActiveFocus, "QQuickItem.hasActiveFocus() -> bool");

extern "C" {static PyObject *meth_QQuickItem_hasActiveFocus(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_hasActiveFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasActiveFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_hasActiveFocus, doc_QQuickItem_hasActiveFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_hasFocus, "QQuickItem.hasFocus() -> bool");

extern "C" {static PyObject *meth_QQuickItem_hasFocus(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_hasFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_hasFocus, doc_QQuickItem_hasFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setFocus, "QQuickItem.setFocus(bool)\n"
    "QQuickItem.setFocus(bool, Qt.FocusReason)");

extern "C" {static PyObject *meth_QQuickItem_setFocus(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setFocus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        bool a0;
        Qt::FocusReason a1;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BbE", &sipSelf, sipType_QQuickItem, &sipCpp, &a0, sipType_Qt_FocusReason, &a1))
        {
            sipCpp->setFocus(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setFocus, doc_QQuickItem_setFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_isFocusScope, "QQuickItem.isFocusScope() -> bool");

extern "C" {static PyObject *meth_QQuickItem_isFocusScope(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_isFocusScope(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isFocusScope();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_isFocusScope, doc_QQuickItem_isFocusScope);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_scopedFocusItem, "QQuickItem.scopedFocusItem() -> QQuickItem");

extern "C" {static PyObject *meth_QQuickItem_scopedFocusItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_scopedFocusItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            QQuickItem*sipRes;

            sipRes = sipCpp->scopedFocusItem();

            return sipConvertFromType(sipRes,sipType_QQuickItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_scopedFocusItem, doc_QQuickItem_scopedFocusItem);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_acceptedMouseButtons, "QQuickItem.acceptedMouseButtons() -> Qt.MouseButtons");

extern "C" {static PyObject *meth_QQuickItem_acceptedMouseButtons(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_acceptedMouseButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            Qt::MouseButtons*sipRes;

            sipRes = new Qt::MouseButtons(sipCpp->acceptedMouseButtons());

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_acceptedMouseButtons, doc_QQuickItem_acceptedMouseButtons);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setAcceptedMouseButtons, "QQuickItem.setAcceptedMouseButtons(Qt.MouseButtons)");

extern "C" {static PyObject *meth_QQuickItem_setAcceptedMouseButtons(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setAcceptedMouseButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::MouseButtons* a0;
        int a0State = 0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_Qt_MouseButtons, &a0, &a0State))
        {
            sipCpp->setAcceptedMouseButtons(*a0);
            sipReleaseType(a0,sipType_Qt_MouseButtons,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setAcceptedMouseButtons, doc_QQuickItem_setAcceptedMouseButtons);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_acceptHoverEvents, "QQuickItem.acceptHoverEvents() -> bool");

extern "C" {static PyObject *meth_QQuickItem_acceptHoverEvents(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_acceptHoverEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->acceptHoverEvents();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_acceptHoverEvents, doc_QQuickItem_acceptHoverEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setAcceptHoverEvents, "QQuickItem.setAcceptHoverEvents(bool)");

extern "C" {static PyObject *meth_QQuickItem_setAcceptHoverEvents(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setAcceptHoverEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setAcceptHoverEvents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setAcceptHoverEvents, doc_QQuickItem_setAcceptHoverEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_cursor, "QQuickItem.cursor() -> QCursor");

extern "C" {static PyObject *meth_QQuickItem_cursor(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_cursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            QCursor*sipRes;

            sipRes = new QCursor(sipCpp->cursor());

            return sipConvertFromNewType(sipRes,sipType_QCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_cursor, doc_QQuickItem_cursor);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setCursor, "QQuickItem.setCursor(QCursor)");

extern "C" {static PyObject *meth_QQuickItem_setCursor(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QCursor* a0;
        int a0State = 0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QCursor, &a0, &a0State))
        {
            sipCpp->setCursor(*a0);
            sipReleaseType(const_cast<QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setCursor, doc_QQuickItem_setCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_unsetCursor, "QQuickItem.unsetCursor()");

extern "C" {static PyObject *meth_QQuickItem_unsetCursor(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_unsetCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->unsetCursor();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_unsetCursor, doc_QQuickItem_unsetCursor);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_grabMouse, "QQuickItem.grabMouse()");

extern "C" {static PyObject *meth_QQuickItem_grabMouse(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_grabMouse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->grabMouse();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_grabMouse, doc_QQuickItem_grabMouse);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_ungrabMouse, "QQuickItem.ungrabMouse()");

extern "C" {static PyObject *meth_QQuickItem_ungrabMouse(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_ungrabMouse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->ungrabMouse();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_ungrabMouse, doc_QQuickItem_ungrabMouse);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_keepMouseGrab, "QQuickItem.keepMouseGrab() -> bool");

extern "C" {static PyObject *meth_QQuickItem_keepMouseGrab(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_keepMouseGrab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->keepMouseGrab();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_keepMouseGrab, doc_QQuickItem_keepMouseGrab);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setKeepMouseGrab, "QQuickItem.setKeepMouseGrab(bool)");

extern "C" {static PyObject *meth_QQuickItem_setKeepMouseGrab(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setKeepMouseGrab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setKeepMouseGrab(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setKeepMouseGrab, doc_QQuickItem_setKeepMouseGrab);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_filtersChildMouseEvents, "QQuickItem.filtersChildMouseEvents() -> bool");

extern "C" {static PyObject *meth_QQuickItem_filtersChildMouseEvents(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_filtersChildMouseEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->filtersChildMouseEvents();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_filtersChildMouseEvents, doc_QQuickItem_filtersChildMouseEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setFiltersChildMouseEvents, "QQuickItem.setFiltersChildMouseEvents(bool)");

extern "C" {static PyObject *meth_QQuickItem_setFiltersChildMouseEvents(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setFiltersChildMouseEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setFiltersChildMouseEvents(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setFiltersChildMouseEvents, doc_QQuickItem_setFiltersChildMouseEvents);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_grabTouchPoints, "QQuickItem.grabTouchPoints(list-of-int)");

extern "C" {static PyObject *meth_QQuickItem_grabTouchPoints(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_grabTouchPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QVector<int>* a0;
        int a0State = 0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QVector_1800,&a0, &a0State))
        {
            sipCpp->grabTouchPoints(*a0);
            sipReleaseType(const_cast<QVector<int> *>(a0),sipType_QVector_1800,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_grabTouchPoints, doc_QQuickItem_grabTouchPoints);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_ungrabTouchPoints, "QQuickItem.ungrabTouchPoints()");

extern "C" {static PyObject *meth_QQuickItem_ungrabTouchPoints(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_ungrabTouchPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->ungrabTouchPoints();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_ungrabTouchPoints, doc_QQuickItem_ungrabTouchPoints);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_keepTouchGrab, "QQuickItem.keepTouchGrab() -> bool");

extern "C" {static PyObject *meth_QQuickItem_keepTouchGrab(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_keepTouchGrab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->keepTouchGrab();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_keepTouchGrab, doc_QQuickItem_keepTouchGrab);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setKeepTouchGrab, "QQuickItem.setKeepTouchGrab(bool)");

extern "C" {static PyObject *meth_QQuickItem_setKeepTouchGrab(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setKeepTouchGrab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setKeepTouchGrab(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setKeepTouchGrab, doc_QQuickItem_setKeepTouchGrab);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_contains, "QQuickItem.contains(QPointF) -> bool");

extern "C" {static PyObject *meth_QQuickItem_contains(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPointF* a0;
        int a0State = 0;
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickItem::contains(*a0) : sipCpp->contains(*a0));
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_contains, doc_QQuickItem_contains);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_mapToItem, "QQuickItem.mapToItem(QQuickItem, QPointF) -> QPointF");

extern "C" {static PyObject *meth_QQuickItem_mapToItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapToItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem* a0;
        const QPointF* a1;
        int a1State = 0;
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0, sipType_QPointF, &a1, &a1State))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->mapToItem(a0,*a1));
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapToItem, doc_QQuickItem_mapToItem);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_mapToScene, "QQuickItem.mapToScene(QPointF) -> QPointF");

extern "C" {static PyObject *meth_QQuickItem_mapToScene(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapToScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->mapToScene(*a0));
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapToScene, doc_QQuickItem_mapToScene);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_mapRectToItem, "QQuickItem.mapRectToItem(QQuickItem, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QQuickItem_mapRectToItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapRectToItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem* a0;
        const QRectF* a1;
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0, sipType_QRectF, &a1))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->mapRectToItem(a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapRectToItem, doc_QQuickItem_mapRectToItem);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_mapRectToScene, "QQuickItem.mapRectToScene(QRectF) -> QRectF");

extern "C" {static PyObject *meth_QQuickItem_mapRectToScene(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapRectToScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QRectF, &a0))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->mapRectToScene(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapRectToScene, doc_QQuickItem_mapRectToScene);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_mapFromItem, "QQuickItem.mapFromItem(QQuickItem, QPointF) -> QPointF");

extern "C" {static PyObject *meth_QQuickItem_mapFromItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapFromItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem* a0;
        const QPointF* a1;
        int a1State = 0;
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0, sipType_QPointF, &a1, &a1State))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->mapFromItem(a0,*a1));
            sipReleaseType(const_cast<QPointF *>(a1),sipType_QPointF,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapFromItem, doc_QQuickItem_mapFromItem);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_mapFromScene, "QQuickItem.mapFromScene(QPointF) -> QPointF");

extern "C" {static PyObject *meth_QQuickItem_mapFromScene(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapFromScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPointF* a0;
        int a0State = 0;
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QPointF, &a0, &a0State))
        {
            QPointF*sipRes;

            sipRes = new QPointF(sipCpp->mapFromScene(*a0));
            sipReleaseType(const_cast<QPointF *>(a0),sipType_QPointF,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapFromScene, doc_QQuickItem_mapFromScene);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_mapRectFromItem, "QQuickItem.mapRectFromItem(QQuickItem, QRectF) -> QRectF");

extern "C" {static PyObject *meth_QQuickItem_mapRectFromItem(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapRectFromItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem* a0;
        const QRectF* a1;
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0, sipType_QRectF, &a1))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->mapRectFromItem(a0,*a1));

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapRectFromItem, doc_QQuickItem_mapRectFromItem);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_mapRectFromScene, "QQuickItem.mapRectFromScene(QRectF) -> QRectF");

extern "C" {static PyObject *meth_QQuickItem_mapRectFromScene(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mapRectFromScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QRectF, &a0))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->mapRectFromScene(*a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mapRectFromScene, doc_QQuickItem_mapRectFromScene);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_polish, "QQuickItem.polish()");

extern "C" {static PyObject *meth_QQuickItem_polish(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_polish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->polish();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_polish, doc_QQuickItem_polish);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_forceActiveFocus, "QQuickItem.forceActiveFocus()\n"
    "QQuickItem.forceActiveFocus(Qt.FocusReason)");

extern "C" {static PyObject *meth_QQuickItem_forceActiveFocus(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_forceActiveFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->forceActiveFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        Qt::FocusReason a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_Qt_FocusReason, &a0))
        {
            sipCpp->forceActiveFocus(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_forceActiveFocus, doc_QQuickItem_forceActiveFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_childAt, "QQuickItem.childAt(float, float) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickItem_childAt(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_childAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QQuickItem, &sipCpp, &a0, &a1))
        {
            QQuickItem*sipRes;

            sipRes = sipCpp->childAt(a0,a1);

            return sipConvertFromType(sipRes,sipType_QQuickItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_childAt, doc_QQuickItem_childAt);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_inputMethodQuery, "QQuickItem.inputMethodQuery(Qt.InputMethodQuery) -> QVariant");

extern "C" {static PyObject *meth_QQuickItem_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_Qt_InputMethodQuery, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QQuickItem::inputMethodQuery(a0) : sipCpp->inputMethodQuery(a0)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_inputMethodQuery, doc_QQuickItem_inputMethodQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_isTextureProvider, "QQuickItem.isTextureProvider() -> bool");

extern "C" {static PyObject *meth_QQuickItem_isTextureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_isTextureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickItem::isTextureProvider() : sipCpp->isTextureProvider());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_isTextureProvider, doc_QQuickItem_isTextureProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_textureProvider, "QQuickItem.textureProvider() -> QSGTextureProvider");

extern "C" {static PyObject *meth_QQuickItem_textureProvider(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_textureProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            QSGTextureProvider*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QQuickItem::textureProvider() : sipCpp->textureProvider());

            return sipConvertFromType(sipRes,sipType_QSGTextureProvider,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_textureProvider, doc_QQuickItem_textureProvider);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_update, "QQuickItem.update()");

extern "C" {static PyObject *meth_QQuickItem_update(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_update(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->update();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_update, doc_QQuickItem_update);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_event, "QQuickItem.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickItem_event(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_event(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_event, doc_QQuickItem_event);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_isComponentComplete, "QQuickItem.isComponentComplete() -> bool");

extern "C" {static PyObject *meth_QQuickItem_isComponentComplete(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_isComponentComplete(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isComponentComplete();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_isComponentComplete, doc_QQuickItem_isComponentComplete);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_itemChange, "QQuickItem.itemChange(QQuickItem.ItemChange, QQuickItem.ItemChangeData)");

extern "C" {static PyObject *meth_QQuickItem_itemChange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_itemChange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QQuickItem::ItemChange a0;
        const QQuickItem::ItemChangeData* a1;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BEJ9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem_ItemChange, &a0, sipType_QQuickItem_ItemChangeData, &a1))
        {
            sipCpp->sipProtectVirt_itemChange(sipSelfWasArg,a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_itemChange, doc_QQuickItem_itemChange);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_updateInputMethod, "QQuickItem.updateInputMethod(Qt.InputMethodQueries queries=Qt.ImQueryInput)");

extern "C" {static PyObject *meth_QQuickItem_updateInputMethod(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_updateInputMethod(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        Qt::InputMethodQueries a0def = Qt::ImQueryInput;
        Qt::InputMethodQueries* a0 = &a0def;
        int a0State = 0;
        sipQQuickItem *sipCpp;

        static const char *sipKwdList[] = {
            sipName_queries,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_Qt_InputMethodQueries, &a0, &a0State))
        {
            sipCpp->sipProtect_updateInputMethod(*a0);
            sipReleaseType(a0,sipType_Qt_InputMethodQueries,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_updateInputMethod, doc_QQuickItem_updateInputMethod);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_widthValid, "QQuickItem.widthValid() -> bool");

extern "C" {static PyObject *meth_QQuickItem_widthValid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_widthValid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_widthValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_widthValid, doc_QQuickItem_widthValid);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_heightValid, "QQuickItem.heightValid() -> bool");

extern "C" {static PyObject *meth_QQuickItem_heightValid(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_heightValid(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_heightValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_heightValid, doc_QQuickItem_heightValid);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_classBegin, "QQuickItem.classBegin()");

extern "C" {static PyObject *meth_QQuickItem_classBegin(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_classBegin(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->sipProtectVirt_classBegin(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_classBegin, doc_QQuickItem_classBegin);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_componentComplete, "QQuickItem.componentComplete()");

extern "C" {static PyObject *meth_QQuickItem_componentComplete(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_componentComplete(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->sipProtectVirt_componentComplete(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_componentComplete, doc_QQuickItem_componentComplete);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_keyPressEvent, "QQuickItem.keyPressEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QQuickItem_keyPressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_keyPressEvent, doc_QQuickItem_keyPressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_keyReleaseEvent, "QQuickItem.keyReleaseEvent(QKeyEvent)");

extern "C" {static PyObject *meth_QQuickItem_keyReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QKeyEvent, &a0))
        {
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_keyReleaseEvent, doc_QQuickItem_keyReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_inputMethodEvent, "QQuickItem.inputMethodEvent(QInputMethodEvent)");

extern "C" {static PyObject *meth_QQuickItem_inputMethodEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QInputMethodEvent, &a0))
        {
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_inputMethodEvent, doc_QQuickItem_inputMethodEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_focusInEvent, "QQuickItem.focusInEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QQuickItem_focusInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_focusInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_focusInEvent, doc_QQuickItem_focusInEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_focusOutEvent, "QQuickItem.focusOutEvent(QFocusEvent)");

extern "C" {static PyObject *meth_QQuickItem_focusOutEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QFocusEvent, &a0))
        {
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_focusOutEvent, doc_QQuickItem_focusOutEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_mousePressEvent, "QQuickItem.mousePressEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickItem_mousePressEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mousePressEvent, doc_QQuickItem_mousePressEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_mouseMoveEvent, "QQuickItem.mouseMoveEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickItem_mouseMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mouseMoveEvent, doc_QQuickItem_mouseMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_mouseReleaseEvent, "QQuickItem.mouseReleaseEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickItem_mouseReleaseEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mouseReleaseEvent, doc_QQuickItem_mouseReleaseEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_mouseDoubleClickEvent, "QQuickItem.mouseDoubleClickEvent(QMouseEvent)");

extern "C" {static PyObject *meth_QQuickItem_mouseDoubleClickEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QMouseEvent, &a0))
        {
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mouseDoubleClickEvent, doc_QQuickItem_mouseDoubleClickEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_mouseUngrabEvent, "QQuickItem.mouseUngrabEvent()");

extern "C" {static PyObject *meth_QQuickItem_mouseUngrabEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_mouseUngrabEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->sipProtectVirt_mouseUngrabEvent(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_mouseUngrabEvent, doc_QQuickItem_mouseUngrabEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_touchUngrabEvent, "QQuickItem.touchUngrabEvent()");

extern "C" {static PyObject *meth_QQuickItem_touchUngrabEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_touchUngrabEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->sipProtectVirt_touchUngrabEvent(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_touchUngrabEvent, doc_QQuickItem_touchUngrabEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_wheelEvent, "QQuickItem.wheelEvent(QWheelEvent)");

extern "C" {static PyObject *meth_QQuickItem_wheelEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_wheelEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QWheelEvent, &a0))
        {
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_wheelEvent, doc_QQuickItem_wheelEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_touchEvent, "QQuickItem.touchEvent(QTouchEvent)");

extern "C" {static PyObject *meth_QQuickItem_touchEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_touchEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTouchEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QTouchEvent, &a0))
        {
            sipCpp->sipProtectVirt_touchEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_touchEvent, doc_QQuickItem_touchEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_hoverEnterEvent, "QQuickItem.hoverEnterEvent(QHoverEvent)");

extern "C" {static PyObject *meth_QQuickItem_hoverEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_hoverEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHoverEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QHoverEvent, &a0))
        {
            sipCpp->sipProtectVirt_hoverEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_hoverEnterEvent, doc_QQuickItem_hoverEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_hoverMoveEvent, "QQuickItem.hoverMoveEvent(QHoverEvent)");

extern "C" {static PyObject *meth_QQuickItem_hoverMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_hoverMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHoverEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QHoverEvent, &a0))
        {
            sipCpp->sipProtectVirt_hoverMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_hoverMoveEvent, doc_QQuickItem_hoverMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_hoverLeaveEvent, "QQuickItem.hoverLeaveEvent(QHoverEvent)");

extern "C" {static PyObject *meth_QQuickItem_hoverLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_hoverLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHoverEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QHoverEvent, &a0))
        {
            sipCpp->sipProtectVirt_hoverLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_hoverLeaveEvent, doc_QQuickItem_hoverLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_dragEnterEvent, "QQuickItem.dragEnterEvent(QDragEnterEvent)");

extern "C" {static PyObject *meth_QQuickItem_dragEnterEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QDragEnterEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_dragEnterEvent, doc_QQuickItem_dragEnterEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_dragMoveEvent, "QQuickItem.dragMoveEvent(QDragMoveEvent)");

extern "C" {static PyObject *meth_QQuickItem_dragMoveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QDragMoveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_dragMoveEvent, doc_QQuickItem_dragMoveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_dragLeaveEvent, "QQuickItem.dragLeaveEvent(QDragLeaveEvent)");

extern "C" {static PyObject *meth_QQuickItem_dragLeaveEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QDragLeaveEvent, &a0))
        {
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_dragLeaveEvent, doc_QQuickItem_dragLeaveEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_dropEvent, "QQuickItem.dropEvent(QDropEvent)");

extern "C" {static PyObject *meth_QQuickItem_dropEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_dropEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent* a0;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QDropEvent, &a0))
        {
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_dropEvent, doc_QQuickItem_dropEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_childMouseEventFilter, "QQuickItem.childMouseEventFilter(QQuickItem, QEvent) -> bool");

extern "C" {static PyObject *meth_QQuickItem_childMouseEventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_childMouseEventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QQuickItem* a0;
        QEvent* a1;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QQuickItem, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_childMouseEventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_childMouseEventFilter, doc_QQuickItem_childMouseEventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_geometryChanged, "QQuickItem.geometryChanged(QRectF, QRectF)");

extern "C" {static PyObject *meth_QQuickItem_geometryChanged(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_geometryChanged(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF* a0;
        const QRectF* a1;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QRectF, &a0, sipType_QRectF, &a1))
        {
            sipCpp->sipProtectVirt_geometryChanged(sipSelfWasArg,*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_geometryChanged, doc_QQuickItem_geometryChanged);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_updatePaintNode, "QQuickItem.updatePaintNode(QSGNode, QQuickItem.UpdatePaintNodeData) -> QSGNode");

extern "C" {static PyObject *meth_QQuickItem_updatePaintNode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_updatePaintNode(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSGNode* a0;
        QQuickItem::UpdatePaintNodeData* a1;
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QSGNode, &a0, sipType_QQuickItem_UpdatePaintNodeData, &a1))
        {
            QSGNode*sipRes;

            sipRes = sipCpp->sipProtectVirt_updatePaintNode(sipSelfWasArg,a0,a1);

            return sipConvertFromType(sipRes,sipType_QSGNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_updatePaintNode, doc_QQuickItem_updatePaintNode);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_releaseResources, "QQuickItem.releaseResources()");

extern "C" {static PyObject *meth_QQuickItem_releaseResources(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_releaseResources(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->sipProtectVirt_releaseResources(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_releaseResources, doc_QQuickItem_releaseResources);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_updatePolish, "QQuickItem.updatePolish()");

extern "C" {static PyObject *meth_QQuickItem_updatePolish(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_updatePolish(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQQuickItem *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->sipProtectVirt_updatePolish(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_updatePolish, doc_QQuickItem_updatePolish);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_activeFocusOnTab, "QQuickItem.activeFocusOnTab() -> bool");

extern "C" {static PyObject *meth_QQuickItem_activeFocusOnTab(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_activeFocusOnTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->activeFocusOnTab();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_activeFocusOnTab, doc_QQuickItem_activeFocusOnTab);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_setActiveFocusOnTab, "QQuickItem.setActiveFocusOnTab(bool)");

extern "C" {static PyObject *meth_QQuickItem_setActiveFocusOnTab(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_setActiveFocusOnTab(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            sipCpp->setActiveFocusOnTab(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_setActiveFocusOnTab, doc_QQuickItem_setActiveFocusOnTab);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_nextItemInFocusChain, "QQuickItem.nextItemInFocusChain(bool forward=True) -> QQuickItem");

extern "C" {static PyObject *meth_QQuickItem_nextItemInFocusChain(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_nextItemInFocusChain(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0 = 1;
        QQuickItem *sipCpp;

        static const char *sipKwdList[] = {
            sipName_forward,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QQuickItem, &sipCpp, &a0))
        {
            QQuickItem*sipRes;

            sipRes = sipCpp->nextItemInFocusChain(a0);

            return sipConvertFromType(sipRes,sipType_QQuickItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_nextItemInFocusChain, doc_QQuickItem_nextItemInFocusChain);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_resetAntialiasing, "QQuickItem.resetAntialiasing()");

extern "C" {static PyObject *meth_QQuickItem_resetAntialiasing(PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_resetAntialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QQuickItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QQuickItem, &sipCpp))
        {
            sipCpp->resetAntialiasing();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_resetAntialiasing, doc_QQuickItem_resetAntialiasing);

    return NULL;
}


PyDoc_STRVAR(doc_QQuickItem_grabToImage, "QQuickItem.grabToImage(QSize targetSize=QSize()) -> QQuickItemGrabResult");

extern "C" {static PyObject *meth_QQuickItem_grabToImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QQuickItem_grabToImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QSize& a0def = QSize();
        const QSize* a0 = &a0def;
        QQuickItem *sipCpp;

        static const char *sipKwdList[] = {
            sipName_targetSize,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J9", &sipSelf, sipType_QQuickItem, &sipCpp, sipType_QSize, &a0))
        {
            QQuickItemGrabResult*sipRes = 0;

#line 257 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qquickitem.sip"
        QSharedPointer<QQuickItemGrabResult> *grab;
        
        Py_BEGIN_ALLOW_THREADS
        // This will leak but there seems to be no way to detach the object.
        grab = new QSharedPointer<QQuickItemGrabResult>(sipCpp->grabToImage(*a0));
        Py_END_ALLOW_THREADS
        
        sipRes = grab->data();
#line 4857 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQQuickItem.cpp"

            return sipConvertFromNewType(sipRes,sipType_QQuickItemGrabResult,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QQuickItem, sipName_grabToImage, doc_QQuickItem_grabToImage);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QQuickItem(void *, const sipTypeDef *);}
static void *cast_QQuickItem(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QQuickItem)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QQuickItem *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QQmlParserStatus)->ctd_cast((QQmlParserStatus *)(QQuickItem *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QQuickItem(void *, int);}
static void release_QQuickItem(void *sipCppV,int)
{
    QQuickItem *sipCpp = reinterpret_cast<QQuickItem *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QQuickItem(sipSimpleWrapper *);}
static void dealloc_QQuickItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQQuickItem *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QQuickItem(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QQuickItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QQuickItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQQuickItem *sipCpp = 0;

    {
        QQuickItem* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QQuickItem, &a0, sipOwner))
        {
            sipCpp = new sipQQuickItem(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QQuickItem[] = {{162, 0, 0}, {31, 2, 1}};


static PyMethodDef methods_QQuickItem[] = {
    {SIP_MLNAME_CAST(sipName_acceptHoverEvents), meth_QQuickItem_acceptHoverEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_acceptHoverEvents)},
    {SIP_MLNAME_CAST(sipName_acceptedMouseButtons), meth_QQuickItem_acceptedMouseButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_acceptedMouseButtons)},
    {SIP_MLNAME_CAST(sipName_activeFocusOnTab), meth_QQuickItem_activeFocusOnTab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_activeFocusOnTab)},
    {SIP_MLNAME_CAST(sipName_antialiasing), meth_QQuickItem_antialiasing, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_antialiasing)},
    {SIP_MLNAME_CAST(sipName_baselineOffset), meth_QQuickItem_baselineOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_baselineOffset)},
    {SIP_MLNAME_CAST(sipName_childAt), meth_QQuickItem_childAt, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_childAt)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QQuickItem_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childItems), meth_QQuickItem_childItems, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_childItems)},
    {SIP_MLNAME_CAST(sipName_childMouseEventFilter), (PyCFunction)meth_QQuickItem_childMouseEventFilter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_childMouseEventFilter)},
    {SIP_MLNAME_CAST(sipName_childrenRect), meth_QQuickItem_childrenRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_childrenRect)},
    {SIP_MLNAME_CAST(sipName_classBegin), (PyCFunction)meth_QQuickItem_classBegin, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_classBegin)},
    {SIP_MLNAME_CAST(sipName_clip), meth_QQuickItem_clip, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_clip)},
    {SIP_MLNAME_CAST(sipName_componentComplete), (PyCFunction)meth_QQuickItem_componentComplete, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_componentComplete)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QQuickItem_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_contains), meth_QQuickItem_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_contains)},
    {SIP_MLNAME_CAST(sipName_cursor), meth_QQuickItem_cursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_cursor)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QQuickItem_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QQuickItem_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), (PyCFunction)meth_QQuickItem_dragEnterEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_dragEnterEvent)},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), (PyCFunction)meth_QQuickItem_dragLeaveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_dragLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), (PyCFunction)meth_QQuickItem_dragMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_dragMoveEvent)},
    {SIP_MLNAME_CAST(sipName_dropEvent), (PyCFunction)meth_QQuickItem_dropEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_dropEvent)},
    {SIP_MLNAME_CAST(sipName_event), (PyCFunction)meth_QQuickItem_event, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_event)},
    {SIP_MLNAME_CAST(sipName_filtersChildMouseEvents), meth_QQuickItem_filtersChildMouseEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_filtersChildMouseEvents)},
    {SIP_MLNAME_CAST(sipName_flags), meth_QQuickItem_flags, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_flags)},
    {SIP_MLNAME_CAST(sipName_focusInEvent), (PyCFunction)meth_QQuickItem_focusInEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_focusInEvent)},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), (PyCFunction)meth_QQuickItem_focusOutEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_focusOutEvent)},
    {SIP_MLNAME_CAST(sipName_forceActiveFocus), meth_QQuickItem_forceActiveFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_forceActiveFocus)},
    {SIP_MLNAME_CAST(sipName_geometryChanged), (PyCFunction)meth_QQuickItem_geometryChanged, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_geometryChanged)},
    {SIP_MLNAME_CAST(sipName_grabMouse), meth_QQuickItem_grabMouse, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_grabMouse)},
    {SIP_MLNAME_CAST(sipName_grabToImage), (PyCFunction)meth_QQuickItem_grabToImage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_grabToImage)},
    {SIP_MLNAME_CAST(sipName_grabTouchPoints), meth_QQuickItem_grabTouchPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_grabTouchPoints)},
    {SIP_MLNAME_CAST(sipName_hasActiveFocus), meth_QQuickItem_hasActiveFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_hasActiveFocus)},
    {SIP_MLNAME_CAST(sipName_hasFocus), meth_QQuickItem_hasFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_hasFocus)},
    {SIP_MLNAME_CAST(sipName_height), meth_QQuickItem_height, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_height)},
    {SIP_MLNAME_CAST(sipName_heightValid), (PyCFunction)meth_QQuickItem_heightValid, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_heightValid)},
    {SIP_MLNAME_CAST(sipName_hoverEnterEvent), (PyCFunction)meth_QQuickItem_hoverEnterEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_hoverEnterEvent)},
    {SIP_MLNAME_CAST(sipName_hoverLeaveEvent), (PyCFunction)meth_QQuickItem_hoverLeaveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_hoverLeaveEvent)},
    {SIP_MLNAME_CAST(sipName_hoverMoveEvent), (PyCFunction)meth_QQuickItem_hoverMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_hoverMoveEvent)},
    {SIP_MLNAME_CAST(sipName_implicitHeight), meth_QQuickItem_implicitHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_implicitHeight)},
    {SIP_MLNAME_CAST(sipName_implicitWidth), meth_QQuickItem_implicitWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_implicitWidth)},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), (PyCFunction)meth_QQuickItem_inputMethodEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_inputMethodEvent)},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QQuickItem_inputMethodQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_inputMethodQuery)},
    {SIP_MLNAME_CAST(sipName_isComponentComplete), (PyCFunction)meth_QQuickItem_isComponentComplete, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_isComponentComplete)},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QQuickItem_isEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_isEnabled)},
    {SIP_MLNAME_CAST(sipName_isFocusScope), meth_QQuickItem_isFocusScope, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_isFocusScope)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QQuickItem_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isTextureProvider), meth_QQuickItem_isTextureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_isTextureProvider)},
    {SIP_MLNAME_CAST(sipName_isVisible), meth_QQuickItem_isVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_isVisible)},
    {SIP_MLNAME_CAST(sipName_itemChange), (PyCFunction)meth_QQuickItem_itemChange, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_itemChange)},
    {SIP_MLNAME_CAST(sipName_keepMouseGrab), meth_QQuickItem_keepMouseGrab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_keepMouseGrab)},
    {SIP_MLNAME_CAST(sipName_keepTouchGrab), meth_QQuickItem_keepTouchGrab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_keepTouchGrab)},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), (PyCFunction)meth_QQuickItem_keyPressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_keyPressEvent)},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), (PyCFunction)meth_QQuickItem_keyReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_keyReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_mapFromItem), meth_QQuickItem_mapFromItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapFromItem)},
    {SIP_MLNAME_CAST(sipName_mapFromScene), meth_QQuickItem_mapFromScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapFromScene)},
    {SIP_MLNAME_CAST(sipName_mapRectFromItem), meth_QQuickItem_mapRectFromItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapRectFromItem)},
    {SIP_MLNAME_CAST(sipName_mapRectFromScene), meth_QQuickItem_mapRectFromScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapRectFromScene)},
    {SIP_MLNAME_CAST(sipName_mapRectToItem), meth_QQuickItem_mapRectToItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapRectToItem)},
    {SIP_MLNAME_CAST(sipName_mapRectToScene), meth_QQuickItem_mapRectToScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapRectToScene)},
    {SIP_MLNAME_CAST(sipName_mapToItem), meth_QQuickItem_mapToItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapToItem)},
    {SIP_MLNAME_CAST(sipName_mapToScene), meth_QQuickItem_mapToScene, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_mapToScene)},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), (PyCFunction)meth_QQuickItem_mouseDoubleClickEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_mouseDoubleClickEvent)},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), (PyCFunction)meth_QQuickItem_mouseMoveEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_mouseMoveEvent)},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), (PyCFunction)meth_QQuickItem_mousePressEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_mousePressEvent)},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), (PyCFunction)meth_QQuickItem_mouseReleaseEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_mouseReleaseEvent)},
    {SIP_MLNAME_CAST(sipName_mouseUngrabEvent), (PyCFunction)meth_QQuickItem_mouseUngrabEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_mouseUngrabEvent)},
    {SIP_MLNAME_CAST(sipName_nextItemInFocusChain), (PyCFunction)meth_QQuickItem_nextItemInFocusChain, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_nextItemInFocusChain)},
    {SIP_MLNAME_CAST(sipName_opacity), meth_QQuickItem_opacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_opacity)},
    {SIP_MLNAME_CAST(sipName_parentItem), meth_QQuickItem_parentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_parentItem)},
    {SIP_MLNAME_CAST(sipName_polish), meth_QQuickItem_polish, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_polish)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QQuickItem_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_releaseResources), (PyCFunction)meth_QQuickItem_releaseResources, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_releaseResources)},
    {SIP_MLNAME_CAST(sipName_resetAntialiasing), meth_QQuickItem_resetAntialiasing, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_resetAntialiasing)},
    {SIP_MLNAME_CAST(sipName_resetHeight), meth_QQuickItem_resetHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_resetHeight)},
    {SIP_MLNAME_CAST(sipName_resetWidth), meth_QQuickItem_resetWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_resetWidth)},
    {SIP_MLNAME_CAST(sipName_rotation), meth_QQuickItem_rotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_rotation)},
    {SIP_MLNAME_CAST(sipName_scale), meth_QQuickItem_scale, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_scale)},
    {SIP_MLNAME_CAST(sipName_scopedFocusItem), meth_QQuickItem_scopedFocusItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_scopedFocusItem)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QQuickItem_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QQuickItem_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setAcceptHoverEvents), meth_QQuickItem_setAcceptHoverEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setAcceptHoverEvents)},
    {SIP_MLNAME_CAST(sipName_setAcceptedMouseButtons), meth_QQuickItem_setAcceptedMouseButtons, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setAcceptedMouseButtons)},
    {SIP_MLNAME_CAST(sipName_setActiveFocusOnTab), meth_QQuickItem_setActiveFocusOnTab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setActiveFocusOnTab)},
    {SIP_MLNAME_CAST(sipName_setAntialiasing), meth_QQuickItem_setAntialiasing, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setAntialiasing)},
    {SIP_MLNAME_CAST(sipName_setBaselineOffset), meth_QQuickItem_setBaselineOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setBaselineOffset)},
    {SIP_MLNAME_CAST(sipName_setClip), meth_QQuickItem_setClip, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setClip)},
    {SIP_MLNAME_CAST(sipName_setCursor), meth_QQuickItem_setCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setCursor)},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QQuickItem_setEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setEnabled)},
    {SIP_MLNAME_CAST(sipName_setFiltersChildMouseEvents), meth_QQuickItem_setFiltersChildMouseEvents, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setFiltersChildMouseEvents)},
    {SIP_MLNAME_CAST(sipName_setFlag), (PyCFunction)meth_QQuickItem_setFlag, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_setFlag)},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QQuickItem_setFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setFlags)},
    {SIP_MLNAME_CAST(sipName_setFocus), meth_QQuickItem_setFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setFocus)},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QQuickItem_setHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setHeight)},
    {SIP_MLNAME_CAST(sipName_setImplicitHeight), meth_QQuickItem_setImplicitHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setImplicitHeight)},
    {SIP_MLNAME_CAST(sipName_setImplicitWidth), meth_QQuickItem_setImplicitWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setImplicitWidth)},
    {SIP_MLNAME_CAST(sipName_setKeepMouseGrab), meth_QQuickItem_setKeepMouseGrab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setKeepMouseGrab)},
    {SIP_MLNAME_CAST(sipName_setKeepTouchGrab), meth_QQuickItem_setKeepTouchGrab, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setKeepTouchGrab)},
    {SIP_MLNAME_CAST(sipName_setOpacity), meth_QQuickItem_setOpacity, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setOpacity)},
    {SIP_MLNAME_CAST(sipName_setParentItem), meth_QQuickItem_setParentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setParentItem)},
    {SIP_MLNAME_CAST(sipName_setRotation), meth_QQuickItem_setRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setRotation)},
    {SIP_MLNAME_CAST(sipName_setScale), meth_QQuickItem_setScale, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setScale)},
    {SIP_MLNAME_CAST(sipName_setSmooth), meth_QQuickItem_setSmooth, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setSmooth)},
    {SIP_MLNAME_CAST(sipName_setState), meth_QQuickItem_setState, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setState)},
    {SIP_MLNAME_CAST(sipName_setTransformOrigin), meth_QQuickItem_setTransformOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setTransformOrigin)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_QQuickItem_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setVisible)},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QQuickItem_setWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setWidth)},
    {SIP_MLNAME_CAST(sipName_setX), meth_QQuickItem_setX, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setX)},
    {SIP_MLNAME_CAST(sipName_setY), meth_QQuickItem_setY, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setY)},
    {SIP_MLNAME_CAST(sipName_setZ), meth_QQuickItem_setZ, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_setZ)},
    {SIP_MLNAME_CAST(sipName_smooth), meth_QQuickItem_smooth, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_smooth)},
    {SIP_MLNAME_CAST(sipName_stackAfter), meth_QQuickItem_stackAfter, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_stackAfter)},
    {SIP_MLNAME_CAST(sipName_stackBefore), meth_QQuickItem_stackBefore, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_stackBefore)},
    {SIP_MLNAME_CAST(sipName_state), meth_QQuickItem_state, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_state)},
    {SIP_MLNAME_CAST(sipName_textureProvider), meth_QQuickItem_textureProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_textureProvider)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QQuickItem_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_touchEvent), (PyCFunction)meth_QQuickItem_touchEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_touchEvent)},
    {SIP_MLNAME_CAST(sipName_touchUngrabEvent), (PyCFunction)meth_QQuickItem_touchUngrabEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_touchUngrabEvent)},
    {SIP_MLNAME_CAST(sipName_transformOrigin), meth_QQuickItem_transformOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_transformOrigin)},
    {SIP_MLNAME_CAST(sipName_ungrabMouse), meth_QQuickItem_ungrabMouse, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_ungrabMouse)},
    {SIP_MLNAME_CAST(sipName_ungrabTouchPoints), meth_QQuickItem_ungrabTouchPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_ungrabTouchPoints)},
    {SIP_MLNAME_CAST(sipName_unsetCursor), meth_QQuickItem_unsetCursor, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_unsetCursor)},
    {SIP_MLNAME_CAST(sipName_update), meth_QQuickItem_update, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_update)},
    {SIP_MLNAME_CAST(sipName_updateInputMethod), (PyCFunction)meth_QQuickItem_updateInputMethod, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_updateInputMethod)},
    {SIP_MLNAME_CAST(sipName_updatePaintNode), (PyCFunction)meth_QQuickItem_updatePaintNode, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_updatePaintNode)},
    {SIP_MLNAME_CAST(sipName_updatePolish), (PyCFunction)meth_QQuickItem_updatePolish, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_updatePolish)},
    {SIP_MLNAME_CAST(sipName_wheelEvent), (PyCFunction)meth_QQuickItem_wheelEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_wheelEvent)},
    {SIP_MLNAME_CAST(sipName_width), meth_QQuickItem_width, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_width)},
    {SIP_MLNAME_CAST(sipName_widthValid), (PyCFunction)meth_QQuickItem_widthValid, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QQuickItem_widthValid)},
    {SIP_MLNAME_CAST(sipName_window), meth_QQuickItem_window, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_window)},
    {SIP_MLNAME_CAST(sipName_x), meth_QQuickItem_x, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_x)},
    {SIP_MLNAME_CAST(sipName_y), meth_QQuickItem_y, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_y)},
    {SIP_MLNAME_CAST(sipName_z), meth_QQuickItem_z, METH_VARARGS, SIP_MLDOC_CAST(doc_QQuickItem_z)}
};

static sipEnumMemberDef enummembers_QQuickItem[] = {
    {sipName_Bottom, static_cast<int>(QQuickItem::Bottom), 9},
    {sipName_BottomLeft, static_cast<int>(QQuickItem::BottomLeft), 9},
    {sipName_BottomRight, static_cast<int>(QQuickItem::BottomRight), 9},
    {sipName_Center, static_cast<int>(QQuickItem::Center), 9},
    {sipName_ItemAcceptsDrops, static_cast<int>(QQuickItem::ItemAcceptsDrops), 5},
    {sipName_ItemAcceptsInputMethod, static_cast<int>(QQuickItem::ItemAcceptsInputMethod), 5},
    {sipName_ItemActiveFocusHasChanged, static_cast<int>(QQuickItem::ItemActiveFocusHasChanged), 7},
    {sipName_ItemAntialiasingHasChanged, static_cast<int>(QQuickItem::ItemAntialiasingHasChanged), 7},
    {sipName_ItemChildAddedChange, static_cast<int>(QQuickItem::ItemChildAddedChange), 7},
    {sipName_ItemChildRemovedChange, static_cast<int>(QQuickItem::ItemChildRemovedChange), 7},
    {sipName_ItemClipsChildrenToShape, static_cast<int>(QQuickItem::ItemClipsChildrenToShape), 5},
    {sipName_ItemHasContents, static_cast<int>(QQuickItem::ItemHasContents), 5},
    {sipName_ItemIsFocusScope, static_cast<int>(QQuickItem::ItemIsFocusScope), 5},
    {sipName_ItemOpacityHasChanged, static_cast<int>(QQuickItem::ItemOpacityHasChanged), 7},
    {sipName_ItemParentHasChanged, static_cast<int>(QQuickItem::ItemParentHasChanged), 7},
    {sipName_ItemRotationHasChanged, static_cast<int>(QQuickItem::ItemRotationHasChanged), 7},
    {sipName_ItemSceneChange, static_cast<int>(QQuickItem::ItemSceneChange), 7},
    {sipName_ItemVisibleHasChanged, static_cast<int>(QQuickItem::ItemVisibleHasChanged), 7},
    {sipName_Left, static_cast<int>(QQuickItem::Left), 9},
    {sipName_Right, static_cast<int>(QQuickItem::Right), 9},
    {sipName_Top, static_cast<int>(QQuickItem::Top), 9},
    {sipName_TopLeft, static_cast<int>(QQuickItem::TopLeft), 9},
    {sipName_TopRight, static_cast<int>(QQuickItem::TopRight), 9},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QQuickItem[] = {
    {"windowChanged(QQuickWindow*)", "\1QQuickItem.windowChanged[QQuickWindow]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QQuickItem, "\1QQuickItem(QQuickItem parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtQuick_QQuickItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QQuickItem,
        {0}
    },
    {
        sipNameNr_QQuickItem,
        {0, 0, 1},
        133, methods_QQuickItem,
        23, enummembers_QQuickItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QQuickItem,
    -1,
    -1,
    supers_QQuickItem,
    0,
    init_type_QQuickItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QQuickItem,
    0,
    0,
    0,
    release_QQuickItem,
    cast_QQuickItem,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QQuickItem::staticMetaObject,
    0,
    signals_QQuickItem,
    0
};
