/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:46 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgabstractrenderer.sip"
#include <qsgabstractrenderer.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"

#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgabstractrenderer.sip"
#include <qsgabstractrenderer.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 30 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 30 "sip/QtGui/qmatrix4x4.sip"
#include <qmatrix4x4.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGAbstractRenderer.cpp"


PyDoc_STRVAR(doc_QSGAbstractRenderer_setDeviceRect, "QSGAbstractRenderer.setDeviceRect(QRect)\n"
    "QSGAbstractRenderer.setDeviceRect(QSize)");

extern "C" {static PyObject *meth_QSGAbstractRenderer_setDeviceRect(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_setDeviceRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setDeviceRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QSize* a0;
        QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setDeviceRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_setDeviceRect, doc_QSGAbstractRenderer_setDeviceRect);

    return NULL;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_deviceRect, "QSGAbstractRenderer.deviceRect() -> QRect");

extern "C" {static PyObject *meth_QSGAbstractRenderer_deviceRect(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_deviceRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->deviceRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_deviceRect, doc_QSGAbstractRenderer_deviceRect);

    return NULL;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_setViewportRect, "QSGAbstractRenderer.setViewportRect(QRect)\n"
    "QSGAbstractRenderer.setViewportRect(QSize)");

extern "C" {static PyObject *meth_QSGAbstractRenderer_setViewportRect(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_setViewportRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRect* a0;
        QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QRect, &a0))
        {
            sipCpp->setViewportRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QSize* a0;
        QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QSize, &a0))
        {
            sipCpp->setViewportRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_setViewportRect, doc_QSGAbstractRenderer_setViewportRect);

    return NULL;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_viewportRect, "QSGAbstractRenderer.viewportRect() -> QRect");

extern "C" {static PyObject *meth_QSGAbstractRenderer_viewportRect(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_viewportRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->viewportRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_viewportRect, doc_QSGAbstractRenderer_viewportRect);

    return NULL;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_setProjectionMatrixToRect, "QSGAbstractRenderer.setProjectionMatrixToRect(QRectF)");

extern "C" {static PyObject *meth_QSGAbstractRenderer_setProjectionMatrixToRect(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_setProjectionMatrixToRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setProjectionMatrixToRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_setProjectionMatrixToRect, doc_QSGAbstractRenderer_setProjectionMatrixToRect);

    return NULL;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_setProjectionMatrix, "QSGAbstractRenderer.setProjectionMatrix(QMatrix4x4)");

extern "C" {static PyObject *meth_QSGAbstractRenderer_setProjectionMatrix(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_setProjectionMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMatrix4x4* a0;
        QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QMatrix4x4, &a0))
        {
            sipCpp->setProjectionMatrix(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_setProjectionMatrix, doc_QSGAbstractRenderer_setProjectionMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_projectionMatrix, "QSGAbstractRenderer.projectionMatrix() -> QMatrix4x4");

extern "C" {static PyObject *meth_QSGAbstractRenderer_projectionMatrix(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_projectionMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp))
        {
            QMatrix4x4*sipRes;

            sipRes = new QMatrix4x4(sipCpp->projectionMatrix());

            return sipConvertFromNewType(sipRes,sipType_QMatrix4x4,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_projectionMatrix, doc_QSGAbstractRenderer_projectionMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_setClearColor, "QSGAbstractRenderer.setClearColor(QColor)");

extern "C" {static PyObject *meth_QSGAbstractRenderer_setClearColor(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_setClearColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QColor* a0;
        int a0State = 0;
        QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QColor, &a0, &a0State))
        {
            sipCpp->setClearColor(*a0);
            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_setClearColor, doc_QSGAbstractRenderer_setClearColor);

    return NULL;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_clearColor, "QSGAbstractRenderer.clearColor() -> QColor");

extern "C" {static PyObject *meth_QSGAbstractRenderer_clearColor(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_clearColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp))
        {
            QColor*sipRes;

            sipRes = new QColor(sipCpp->clearColor());

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_clearColor, doc_QSGAbstractRenderer_clearColor);

    return NULL;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_setClearMode, "QSGAbstractRenderer.setClearMode(QSGAbstractRenderer.ClearMode)");

extern "C" {static PyObject *meth_QSGAbstractRenderer_setClearMode(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_setClearMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSGAbstractRenderer::ClearMode* a0;
        int a0State = 0;
        QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, sipType_QSGAbstractRenderer_ClearMode, &a0, &a0State))
        {
            sipCpp->setClearMode(*a0);
            sipReleaseType(a0,sipType_QSGAbstractRenderer_ClearMode,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_setClearMode, doc_QSGAbstractRenderer_setClearMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_clearMode, "QSGAbstractRenderer.clearMode() -> QSGAbstractRenderer.ClearMode");

extern "C" {static PyObject *meth_QSGAbstractRenderer_clearMode(PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_clearMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGAbstractRenderer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp))
        {
            QSGAbstractRenderer::ClearMode*sipRes;

            sipRes = new QSGAbstractRenderer::ClearMode(sipCpp->clearMode());

            return sipConvertFromNewType(sipRes,sipType_QSGAbstractRenderer_ClearMode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_clearMode, doc_QSGAbstractRenderer_clearMode);

    return NULL;
}


PyDoc_STRVAR(doc_QSGAbstractRenderer_renderScene, "QSGAbstractRenderer.renderScene(int fboId=0)");

extern "C" {static PyObject *meth_QSGAbstractRenderer_renderScene(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSGAbstractRenderer_renderScene(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        GLuint a0 = 0;
        QSGAbstractRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_fboId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|u", &sipSelf, sipType_QSGAbstractRenderer, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSGAbstractRenderer, sipName_renderScene);
                return NULL;
            }

            sipCpp->renderScene(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGAbstractRenderer, sipName_renderScene, doc_QSGAbstractRenderer_renderScene);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSGAbstractRenderer(void *, const sipTypeDef *);}
static void *cast_QSGAbstractRenderer(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSGAbstractRenderer)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QSGAbstractRenderer *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGAbstractRenderer(void *, int);}
static void release_QSGAbstractRenderer(void *sipCppV,int)
{
    QSGAbstractRenderer *sipCpp = reinterpret_cast<QSGAbstractRenderer *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSGAbstractRenderer(sipSimpleWrapper *);}
static void dealloc_QSGAbstractRenderer(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QSGAbstractRenderer(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGAbstractRenderer[] = {{162, 0, 1}};


static PyMethodDef methods_QSGAbstractRenderer[] = {
    {SIP_MLNAME_CAST(sipName_clearColor), meth_QSGAbstractRenderer_clearColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_clearColor)},
    {SIP_MLNAME_CAST(sipName_clearMode), meth_QSGAbstractRenderer_clearMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_clearMode)},
    {SIP_MLNAME_CAST(sipName_deviceRect), meth_QSGAbstractRenderer_deviceRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_deviceRect)},
    {SIP_MLNAME_CAST(sipName_projectionMatrix), meth_QSGAbstractRenderer_projectionMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_projectionMatrix)},
    {SIP_MLNAME_CAST(sipName_renderScene), (PyCFunction)meth_QSGAbstractRenderer_renderScene, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_renderScene)},
    {SIP_MLNAME_CAST(sipName_setClearColor), meth_QSGAbstractRenderer_setClearColor, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_setClearColor)},
    {SIP_MLNAME_CAST(sipName_setClearMode), meth_QSGAbstractRenderer_setClearMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_setClearMode)},
    {SIP_MLNAME_CAST(sipName_setDeviceRect), meth_QSGAbstractRenderer_setDeviceRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_setDeviceRect)},
    {SIP_MLNAME_CAST(sipName_setProjectionMatrix), meth_QSGAbstractRenderer_setProjectionMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_setProjectionMatrix)},
    {SIP_MLNAME_CAST(sipName_setProjectionMatrixToRect), meth_QSGAbstractRenderer_setProjectionMatrixToRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_setProjectionMatrixToRect)},
    {SIP_MLNAME_CAST(sipName_setViewportRect), meth_QSGAbstractRenderer_setViewportRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_setViewportRect)},
    {SIP_MLNAME_CAST(sipName_viewportRect), meth_QSGAbstractRenderer_viewportRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGAbstractRenderer_viewportRect)}
};

static sipEnumMemberDef enummembers_QSGAbstractRenderer[] = {
    {sipName_ClearColorBuffer, static_cast<int>(QSGAbstractRenderer::ClearColorBuffer), 29},
    {sipName_ClearDepthBuffer, static_cast<int>(QSGAbstractRenderer::ClearDepthBuffer), 29},
    {sipName_ClearStencilBuffer, static_cast<int>(QSGAbstractRenderer::ClearStencilBuffer), 29},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSGAbstractRenderer[] = {
    {"sceneGraphChanged()", "\1QSGAbstractRenderer.sceneGraphChanged", 0, 0},
    {0, 0, 0, 0}
};


pyqt5ClassTypeDef sipTypeDef_QtQuick_QSGAbstractRenderer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSGAbstractRenderer,
        {0}
    },
    {
        sipNameNr_QSGAbstractRenderer,
        {0, 0, 1},
        12, methods_QSGAbstractRenderer,
        3, enummembers_QSGAbstractRenderer,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_QSGAbstractRenderer,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSGAbstractRenderer,
    0,
    0,
    0,
    release_QSGAbstractRenderer,
    cast_QSGAbstractRenderer,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSGAbstractRenderer::staticMetaObject,
    0,
    signals_QSGAbstractRenderer,
    0
};
