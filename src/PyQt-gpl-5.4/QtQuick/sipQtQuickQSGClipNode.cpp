/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:46 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtQuick.h"

#line 308 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGClipNode.cpp"

#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGClipNode.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsggeometry.sip"
#include <qsggeometry.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGClipNode.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGClipNode.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGClipNode.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtQuick/qsgnode.sip"
#include <qsgnode.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtQuick/sipQtQuickQSGClipNode.cpp"


class sipQSGClipNode : public QSGClipNode
{
public:
    sipQSGClipNode();
    virtual ~sipQSGClipNode();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void preprocess();
    bool isSubtreeBlocked() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSGClipNode(const sipQSGClipNode &);
    sipQSGClipNode &operator = (const sipQSGClipNode &);

    char sipPyMethods[2];
};

sipQSGClipNode::sipQSGClipNode(): QSGClipNode(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSGClipNode::~sipQSGClipNode()
{
    sipCommonDtor(sipPySelf);
}

void sipQSGClipNode::preprocess()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_preprocess);

    if (!sipMeth)
    {
        QSGClipNode::preprocess();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSGClipNode::isSubtreeBlocked() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_isSubtreeBlocked);

    if (!sipMeth)
        return QSGClipNode::isSubtreeBlocked();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtQuick_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtQuick_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_QSGClipNode_setIsRectangular, "QSGClipNode.setIsRectangular(bool)");

extern "C" {static PyObject *meth_QSGClipNode_setIsRectangular(PyObject *, PyObject *);}
static PyObject *meth_QSGClipNode_setIsRectangular(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QSGClipNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSGClipNode, &sipCpp, &a0))
        {
            sipCpp->setIsRectangular(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGClipNode, sipName_setIsRectangular, doc_QSGClipNode_setIsRectangular);

    return NULL;
}


PyDoc_STRVAR(doc_QSGClipNode_isRectangular, "QSGClipNode.isRectangular() -> bool");

extern "C" {static PyObject *meth_QSGClipNode_isRectangular(PyObject *, PyObject *);}
static PyObject *meth_QSGClipNode_isRectangular(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGClipNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGClipNode, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isRectangular();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGClipNode, sipName_isRectangular, doc_QSGClipNode_isRectangular);

    return NULL;
}


PyDoc_STRVAR(doc_QSGClipNode_setClipRect, "QSGClipNode.setClipRect(QRectF)");

extern "C" {static PyObject *meth_QSGClipNode_setClipRect(PyObject *, PyObject *);}
static PyObject *meth_QSGClipNode_setClipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QRectF* a0;
        QSGClipNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QSGClipNode, &sipCpp, sipType_QRectF, &a0))
        {
            sipCpp->setClipRect(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGClipNode, sipName_setClipRect, doc_QSGClipNode_setClipRect);

    return NULL;
}


PyDoc_STRVAR(doc_QSGClipNode_clipRect, "QSGClipNode.clipRect() -> QRectF");

extern "C" {static PyObject *meth_QSGClipNode_clipRect(PyObject *, PyObject *);}
static PyObject *meth_QSGClipNode_clipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSGClipNode *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSGClipNode, &sipCpp))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->clipRect());

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSGClipNode, sipName_clipRect, doc_QSGClipNode_clipRect);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSGClipNode(void *, const sipTypeDef *);}
static void *cast_QSGClipNode(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSGClipNode)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QSGBasicGeometryNode)->ctd_cast((QSGBasicGeometryNode *)(QSGClipNode *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSGClipNode(void *, int);}
static void release_QSGClipNode(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSGClipNode *>(sipCppV);
    else
        delete reinterpret_cast<QSGClipNode *>(sipCppV);
}


extern "C" {static void dealloc_QSGClipNode(sipSimpleWrapper *);}
static void dealloc_QSGClipNode(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSGClipNode *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSGClipNode(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSGClipNode(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSGClipNode(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQSGClipNode *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new sipQSGClipNode();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSGClipNode[] = {{30, 255, 1}};


static PyMethodDef methods_QSGClipNode[] = {
    {SIP_MLNAME_CAST(sipName_clipRect), meth_QSGClipNode_clipRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGClipNode_clipRect)},
    {SIP_MLNAME_CAST(sipName_isRectangular), meth_QSGClipNode_isRectangular, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGClipNode_isRectangular)},
    {SIP_MLNAME_CAST(sipName_setClipRect), meth_QSGClipNode_setClipRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGClipNode_setClipRect)},
    {SIP_MLNAME_CAST(sipName_setIsRectangular), meth_QSGClipNode_setIsRectangular, METH_VARARGS, SIP_MLDOC_CAST(doc_QSGClipNode_setIsRectangular)}
};

PyDoc_STRVAR(doc_QSGClipNode, "\1QSGClipNode()");


pyqt5ClassTypeDef sipTypeDef_QtQuick_QSGClipNode = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSGClipNode,
        {0}
    },
    {
        sipNameNr_QSGClipNode,
        {0, 0, 1},
        4, methods_QSGClipNode,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSGClipNode,
    -1,
    -1,
    supers_QSGClipNode,
    0,
    init_type_QSGClipNode,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSGClipNode,
    0,
    0,
    0,
    release_QSGClipNode,
    cast_QSGClipNode,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
