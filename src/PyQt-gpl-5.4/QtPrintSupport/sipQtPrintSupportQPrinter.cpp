/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:42 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtPrintSupport.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPrintSupport/qprinter.sip"
#include <qprinter.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPrintSupport/qprinterinfo.sip"
#include <qprinterinfo.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPrintSupport/qprintengine.sip"
#include <qprintengine.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"
#line 56 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"
#line 26 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"
#line 26 "sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 362 "sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 50 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 53 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"
#line 165 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"
#line 629 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 59 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"
#line 26 "sip/QtGui/qpagedpaintdevice.sip"
#include <qpagedpaintdevice.h>
#line 62 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"
#line 101 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 65 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"
#line 34 "sip/QtGui/qpagelayout.sip"
#include <qpagelayout.h>
#line 68 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"
#line 34 "sip/QtGui/qpagesize.sip"
#include <qpagesize.h>
#line 71 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPrintSupport/sipQtPrintSupportQPrinter.cpp"


class sipQPrinter : public QPrinter
{
public:
    sipQPrinter(QPrinter::PrinterMode);
    sipQPrinter(const QPrinterInfo&,QPrinter::PrinterMode);
    virtual ~sipQPrinter();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_setEngines(QPrintEngine*,QPaintEngine*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setPageSize(QPagedPaintDevice::PageSize);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void setMargins(const QPagedPaintDevice::Margins&);
    QPaintEngine* paintEngine() const;
    bool newPage();
    void setPageSizeMM(const QSizeF&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPrinter(const sipQPrinter &);
    sipQPrinter &operator = (const sipQPrinter &);

    char sipPyMethods[6];
};

sipQPrinter::sipQPrinter(QPrinter::PrinterMode a0): QPrinter(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPrinter::sipQPrinter(const QPrinterInfo& a0,QPrinter::PrinterMode a1): QPrinter(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPrinter::~sipQPrinter()
{
    sipCommonDtor(sipPySelf);
}

void sipQPrinter::setPageSize(QPagedPaintDevice::PageSize a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setPageSize);

    if (!sipMeth)
    {
        QPrinter::setPageSize(a0);
        return;
    }

    typedef void (*sipVH_QtGui_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPagedPaintDevice::PageSize);

    ((sipVH_QtGui_33)(sipModuleAPI_QtPrintSupport_QtGui->em_virthandlers[33]))(sipGILState, sipModuleAPI_QtPrintSupport_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQPrinter::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_metric);

    if (!sipMeth)
        return QPrinter::metric(a0);

    typedef int (*sipVH_QtGui_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtPrintSupport_QtGui->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtPrintSupport_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQPrinter::setMargins(const QPagedPaintDevice::Margins& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setMargins);

    if (!sipMeth)
    {
        QPrinter::setMargins(a0);
        return;
    }

    typedef void (*sipVH_QtGui_31)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QPagedPaintDevice::Margins&);

    ((sipVH_QtGui_31)(sipModuleAPI_QtPrintSupport_QtGui->em_virthandlers[31]))(sipGILState, sipModuleAPI_QtPrintSupport_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QPaintEngine* sipQPrinter::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_paintEngine);

    if (!sipMeth)
        return QPrinter::paintEngine();

    typedef QPaintEngine* (*sipVH_QtGui_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtGui_29)(sipModuleAPI_QtPrintSupport_QtGui->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtPrintSupport_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQPrinter::newPage()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_newPage);

    if (!sipMeth)
        return QPrinter::newPage();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtPrintSupport_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtPrintSupport_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQPrinter::setPageSizeMM(const QSizeF& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setPageSizeMM);

    if (!sipMeth)
    {
        QPrinter::setPageSizeMM(a0);
        return;
    }

    typedef void (*sipVH_QtGui_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QSizeF&);

    ((sipVH_QtGui_32)(sipModuleAPI_QtPrintSupport_QtGui->em_virthandlers[32]))(sipGILState, sipModuleAPI_QtPrintSupport_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

int sipQPrinter::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QPrinter::metric(a0) : metric(a0));
}

void sipQPrinter::sipProtect_setEngines(QPrintEngine*a0,QPaintEngine*a1)
{
    QPrinter::setEngines(a0,a1);
}


PyDoc_STRVAR(doc_QPrinter_setOutputFormat, "QPrinter.setOutputFormat(QPrinter.OutputFormat)");

extern "C" {static PyObject *meth_QPrinter_setOutputFormat(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setOutputFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::OutputFormat a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_OutputFormat, &a0))
        {
            sipCpp->setOutputFormat(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setOutputFormat, doc_QPrinter_setOutputFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_outputFormat, "QPrinter.outputFormat() -> QPrinter.OutputFormat");

extern "C" {static PyObject *meth_QPrinter_outputFormat(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_outputFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::OutputFormat sipRes;

            sipRes = sipCpp->outputFormat();

            return sipConvertFromEnum(sipRes,sipType_QPrinter_OutputFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_outputFormat, doc_QPrinter_outputFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPrinterName, "QPrinter.setPrinterName(str)");

extern "C" {static PyObject *meth_QPrinter_setPrinterName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPrinterName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPrinterName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPrinterName, doc_QPrinter_setPrinterName);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_printerName, "QPrinter.printerName() -> str");

extern "C" {static PyObject *meth_QPrinter_printerName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->printerName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printerName, doc_QPrinter_printerName);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_isValid, "QPrinter.isValid() -> bool");

extern "C" {static PyObject *meth_QPrinter_isValid(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_isValid, doc_QPrinter_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setOutputFileName, "QPrinter.setOutputFileName(str)");

extern "C" {static PyObject *meth_QPrinter_setOutputFileName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setOutputFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setOutputFileName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setOutputFileName, doc_QPrinter_setOutputFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_outputFileName, "QPrinter.outputFileName() -> str");

extern "C" {static PyObject *meth_QPrinter_outputFileName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_outputFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->outputFileName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_outputFileName, doc_QPrinter_outputFileName);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPrintProgram, "QPrinter.setPrintProgram(str)");

extern "C" {static PyObject *meth_QPrinter_setPrintProgram(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPrintProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPrintProgram(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPrintProgram, doc_QPrinter_setPrintProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_printProgram, "QPrinter.printProgram() -> str");

extern "C" {static PyObject *meth_QPrinter_printProgram(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printProgram(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->printProgram());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printProgram, doc_QPrinter_printProgram);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setDocName, "QPrinter.setDocName(str)");

extern "C" {static PyObject *meth_QPrinter_setDocName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setDocName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setDocName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setDocName, doc_QPrinter_setDocName);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_docName, "QPrinter.docName() -> str");

extern "C" {static PyObject *meth_QPrinter_docName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_docName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->docName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_docName, doc_QPrinter_docName);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setCreator, "QPrinter.setCreator(str)");

extern "C" {static PyObject *meth_QPrinter_setCreator(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setCreator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setCreator(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setCreator, doc_QPrinter_setCreator);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_creator, "QPrinter.creator() -> str");

extern "C" {static PyObject *meth_QPrinter_creator(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_creator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->creator());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_creator, doc_QPrinter_creator);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setOrientation, "QPrinter.setOrientation(QPrinter.Orientation)");

extern "C" {static PyObject *meth_QPrinter_setOrientation(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::Orientation a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Orientation, &a0))
        {
            sipCpp->setOrientation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setOrientation, doc_QPrinter_setOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_orientation, "QPrinter.orientation() -> QPrinter.Orientation");

extern "C" {static PyObject *meth_QPrinter_orientation(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::Orientation sipRes;

            sipRes = sipCpp->orientation();

            return sipConvertFromEnum(sipRes,sipType_QPrinter_Orientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_orientation, doc_QPrinter_orientation);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPageSizeMM, "QPrinter.setPageSizeMM(QSizeF)");

extern "C" {static PyObject *meth_QPrinter_setPageSizeMM(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPageSizeMM(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSizeF* a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QSizeF, &a0))
        {
            (sipSelfWasArg ? sipCpp->QPrinter::setPageSizeMM(*a0) : sipCpp->setPageSizeMM(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPageSizeMM, doc_QPrinter_setPageSizeMM);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPaperSize, "QPrinter.setPaperSize(QPagedPaintDevice.PageSize)\n"
    "QPrinter.setPaperSize(QSizeF, QPrinter.Unit)");

extern "C" {static PyObject *meth_QPrinter_setPaperSize(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPaperSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPagedPaintDevice::PageSize a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPagedPaintDevice_PageSize, &a0))
        {
            sipCpp->setPaperSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QSizeF* a0;
        QPrinter::Unit a1;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9E", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QSizeF, &a0, sipType_QPrinter_Unit, &a1))
        {
            sipCpp->setPaperSize(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPaperSize, doc_QPrinter_setPaperSize);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_paperSize, "QPrinter.paperSize() -> QPagedPaintDevice.PageSize\n"
    "QPrinter.paperSize(QPrinter.Unit) -> QSizeF");

extern "C" {static PyObject *meth_QPrinter_paperSize(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_paperSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPagedPaintDevice::PageSize sipRes;

            sipRes = sipCpp->paperSize();

            return sipConvertFromEnum(sipRes,sipType_QPagedPaintDevice_PageSize);
        }
    }

    {
        QPrinter::Unit a0;
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Unit, &a0))
        {
            QSizeF*sipRes;

            sipRes = new QSizeF(sipCpp->paperSize(a0));

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_paperSize, doc_QPrinter_paperSize);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPageOrder, "QPrinter.setPageOrder(QPrinter.PageOrder)");

extern "C" {static PyObject *meth_QPrinter_setPageOrder(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPageOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::PageOrder a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_PageOrder, &a0))
        {
            sipCpp->setPageOrder(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPageOrder, doc_QPrinter_setPageOrder);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_pageOrder, "QPrinter.pageOrder() -> QPrinter.PageOrder");

extern "C" {static PyObject *meth_QPrinter_pageOrder(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_pageOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PageOrder sipRes;

            sipRes = sipCpp->pageOrder();

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PageOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_pageOrder, doc_QPrinter_pageOrder);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setResolution, "QPrinter.setResolution(int)");

extern "C" {static PyObject *meth_QPrinter_setResolution(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            sipCpp->setResolution(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setResolution, doc_QPrinter_setResolution);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_resolution, "QPrinter.resolution() -> int");

extern "C" {static PyObject *meth_QPrinter_resolution(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_resolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->resolution();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_resolution, doc_QPrinter_resolution);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setColorMode, "QPrinter.setColorMode(QPrinter.ColorMode)");

extern "C" {static PyObject *meth_QPrinter_setColorMode(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setColorMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::ColorMode a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_ColorMode, &a0))
        {
            sipCpp->setColorMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setColorMode, doc_QPrinter_setColorMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_colorMode, "QPrinter.colorMode() -> QPrinter.ColorMode");

extern "C" {static PyObject *meth_QPrinter_colorMode(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_colorMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::ColorMode sipRes;

            sipRes = sipCpp->colorMode();

            return sipConvertFromEnum(sipRes,sipType_QPrinter_ColorMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_colorMode, doc_QPrinter_colorMode);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setCollateCopies, "QPrinter.setCollateCopies(bool)");

extern "C" {static PyObject *meth_QPrinter_setCollateCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setCollateCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            sipCpp->setCollateCopies(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setCollateCopies, doc_QPrinter_setCollateCopies);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_collateCopies, "QPrinter.collateCopies() -> bool");

extern "C" {static PyObject *meth_QPrinter_collateCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_collateCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->collateCopies();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_collateCopies, doc_QPrinter_collateCopies);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setFullPage, "QPrinter.setFullPage(bool)");

extern "C" {static PyObject *meth_QPrinter_setFullPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setFullPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            sipCpp->setFullPage(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setFullPage, doc_QPrinter_setFullPage);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_fullPage, "QPrinter.fullPage() -> bool");

extern "C" {static PyObject *meth_QPrinter_fullPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_fullPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fullPage();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_fullPage, doc_QPrinter_fullPage);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setCopyCount, "QPrinter.setCopyCount(int)");

extern "C" {static PyObject *meth_QPrinter_setCopyCount(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setCopyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            sipCpp->setCopyCount(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setCopyCount, doc_QPrinter_setCopyCount);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_copyCount, "QPrinter.copyCount() -> int");

extern "C" {static PyObject *meth_QPrinter_copyCount(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_copyCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->copyCount();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_copyCount, doc_QPrinter_copyCount);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_supportsMultipleCopies, "QPrinter.supportsMultipleCopies() -> bool");

extern "C" {static PyObject *meth_QPrinter_supportsMultipleCopies(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_supportsMultipleCopies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->supportsMultipleCopies();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_supportsMultipleCopies, doc_QPrinter_supportsMultipleCopies);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPaperSource, "QPrinter.setPaperSource(QPrinter.PaperSource)");

extern "C" {static PyObject *meth_QPrinter_setPaperSource(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPaperSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::PaperSource a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_PaperSource, &a0))
        {
            sipCpp->setPaperSource(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPaperSource, doc_QPrinter_setPaperSource);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_paperSource, "QPrinter.paperSource() -> QPrinter.PaperSource");

extern "C" {static PyObject *meth_QPrinter_paperSource(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_paperSource(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PaperSource sipRes;

            sipRes = sipCpp->paperSource();

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PaperSource);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_paperSource, doc_QPrinter_paperSource);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setDuplex, "QPrinter.setDuplex(QPrinter.DuplexMode)");

extern "C" {static PyObject *meth_QPrinter_setDuplex(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setDuplex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::DuplexMode a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_DuplexMode, &a0))
        {
            sipCpp->setDuplex(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setDuplex, doc_QPrinter_setDuplex);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_duplex, "QPrinter.duplex() -> QPrinter.DuplexMode");

extern "C" {static PyObject *meth_QPrinter_duplex(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_duplex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::DuplexMode sipRes;

            sipRes = sipCpp->duplex();

            return sipConvertFromEnum(sipRes,sipType_QPrinter_DuplexMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_duplex, doc_QPrinter_duplex);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_supportedResolutions, "QPrinter.supportedResolutions() -> list-of-int");

extern "C" {static PyObject *meth_QPrinter_supportedResolutions(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_supportedResolutions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QList<int>*sipRes;

            sipRes = new QList<int>(sipCpp->supportedResolutions());

            return sipConvertFromNewType(sipRes,sipType_QList_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_supportedResolutions, doc_QPrinter_supportedResolutions);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setFontEmbeddingEnabled, "QPrinter.setFontEmbeddingEnabled(bool)");

extern "C" {static PyObject *meth_QPrinter_setFontEmbeddingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setFontEmbeddingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            sipCpp->setFontEmbeddingEnabled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setFontEmbeddingEnabled, doc_QPrinter_setFontEmbeddingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_fontEmbeddingEnabled, "QPrinter.fontEmbeddingEnabled() -> bool");

extern "C" {static PyObject *meth_QPrinter_fontEmbeddingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_fontEmbeddingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->fontEmbeddingEnabled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_fontEmbeddingEnabled, doc_QPrinter_fontEmbeddingEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setDoubleSidedPrinting, "QPrinter.setDoubleSidedPrinting(bool)");

extern "C" {static PyObject *meth_QPrinter_setDoubleSidedPrinting(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setDoubleSidedPrinting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QPrinter, &sipCpp, &a0))
        {
            sipCpp->setDoubleSidedPrinting(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setDoubleSidedPrinting, doc_QPrinter_setDoubleSidedPrinting);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_doubleSidedPrinting, "QPrinter.doubleSidedPrinting() -> bool");

extern "C" {static PyObject *meth_QPrinter_doubleSidedPrinting(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_doubleSidedPrinting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->doubleSidedPrinting();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_doubleSidedPrinting, doc_QPrinter_doubleSidedPrinting);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_paperRect, "QPrinter.paperRect() -> QRect\n"
    "QPrinter.paperRect(QPrinter.Unit) -> QRectF");

extern "C" {static PyObject *meth_QPrinter_paperRect(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_paperRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->paperRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        QPrinter::Unit a0;
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Unit, &a0))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->paperRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_paperRect, doc_QPrinter_paperRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_pageRect, "QPrinter.pageRect() -> QRect\n"
    "QPrinter.pageRect(QPrinter.Unit) -> QRectF");

extern "C" {static PyObject *meth_QPrinter_pageRect(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_pageRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->pageRect());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        QPrinter::Unit a0;
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Unit, &a0))
        {
            QRectF*sipRes;

            sipRes = new QRectF(sipCpp->pageRect(a0));

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_pageRect, doc_QPrinter_pageRect);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_newPage, "QPrinter.newPage() -> bool");

extern "C" {static PyObject *meth_QPrinter_newPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_newPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPrinter::newPage() : sipCpp->newPage());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_newPage, doc_QPrinter_newPage);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_abort, "QPrinter.abort() -> bool");

extern "C" {static PyObject *meth_QPrinter_abort(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->abort();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_abort, doc_QPrinter_abort);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_printerState, "QPrinter.printerState() -> QPrinter.PrinterState");

extern "C" {static PyObject *meth_QPrinter_printerState(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printerState(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PrinterState sipRes;

            sipRes = sipCpp->printerState();

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PrinterState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printerState, doc_QPrinter_printerState);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_paintEngine, "QPrinter.paintEngine() -> QPaintEngine");

extern "C" {static PyObject *meth_QPrinter_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPaintEngine*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QPrinter::paintEngine() : sipCpp->paintEngine());

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_paintEngine, doc_QPrinter_paintEngine);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_printEngine, "QPrinter.printEngine() -> QPrintEngine");

extern "C" {static PyObject *meth_QPrinter_printEngine(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrintEngine*sipRes;

            sipRes = sipCpp->printEngine();

            return sipConvertFromType(sipRes,sipType_QPrintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printEngine, doc_QPrinter_printEngine);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setFromTo, "QPrinter.setFromTo(int, int)");

extern "C" {static PyObject *meth_QPrinter_setFromTo(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setFromTo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QPrinter, &sipCpp, &a0, &a1))
        {
            sipCpp->setFromTo(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setFromTo, doc_QPrinter_setFromTo);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_fromPage, "QPrinter.fromPage() -> int");

extern "C" {static PyObject *meth_QPrinter_fromPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_fromPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->fromPage();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_fromPage, doc_QPrinter_fromPage);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_toPage, "QPrinter.toPage() -> int");

extern "C" {static PyObject *meth_QPrinter_toPage(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_toPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->toPage();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_toPage, doc_QPrinter_toPage);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPrintRange, "QPrinter.setPrintRange(QPrinter.PrintRange)");

extern "C" {static PyObject *meth_QPrinter_setPrintRange(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPrintRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPrinter::PrintRange a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_PrintRange, &a0))
        {
            sipCpp->setPrintRange(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPrintRange, doc_QPrinter_setPrintRange);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_printRange, "QPrinter.printRange() -> QPrinter.PrintRange");

extern "C" {static PyObject *meth_QPrinter_printRange(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_printRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QPrinter::PrintRange sipRes;

            sipRes = sipCpp->printRange();

            return sipConvertFromEnum(sipRes,sipType_QPrinter_PrintRange);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_printRange, doc_QPrinter_printRange);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setMargins, "QPrinter.setMargins(QPagedPaintDevice.Margins)");

extern "C" {static PyObject *meth_QPrinter_setMargins(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPagedPaintDevice::Margins* a0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPagedPaintDevice_Margins, &a0))
        {
            (sipSelfWasArg ? sipCpp->QPrinter::setMargins(*a0) : sipCpp->setMargins(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setMargins, doc_QPrinter_setMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPageMargins, "QPrinter.setPageMargins(float, float, float, float, QPrinter.Unit)");

extern "C" {static PyObject *meth_QPrinter_setPageMargins(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPageMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QPrinter::Unit a4;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BddddE", &sipSelf, sipType_QPrinter, &sipCpp, &a0, &a1, &a2, &a3, sipType_QPrinter_Unit, &a4))
        {
            sipCpp->setPageMargins(a0,a1,a2,a3,a4);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPageMargins, doc_QPrinter_setPageMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_getPageMargins, "QPrinter.getPageMargins(QPrinter.Unit) -> (float, float, float, float)");

extern "C" {static PyObject *meth_QPrinter_getPageMargins(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_getPageMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QPrinter::Unit a4;
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrinter_Unit, &a4))
        {
            sipCpp->getPageMargins(&a0,&a1,&a2,&a3,a4);

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_getPageMargins, doc_QPrinter_getPageMargins);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_metric, "QPrinter.metric(QPaintDevice.PaintDeviceMetric) -> int");

extern "C" {static PyObject *meth_QPrinter_metric(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPrinter_metric(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        const sipQPrinter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPaintDevice_PaintDeviceMetric, &a0))
        {
            int sipRes;

            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_metric, doc_QPrinter_metric);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setEngines, "QPrinter.setEngines(QPrintEngine, QPaintEngine)");

extern "C" {static PyObject *meth_QPrinter_setEngines(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setEngines(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPrintEngine* a0;
        QPaintEngine* a1;
        sipQPrinter *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QPrintEngine, &a0, sipType_QPaintEngine, &a1))
        {
            sipCpp->sipProtect_setEngines(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setEngines, doc_QPrinter_setEngines);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_setPaperName, "QPrinter.setPaperName(str)");

extern "C" {static PyObject *meth_QPrinter_setPaperName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_setPaperName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QPrinter, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPaperName(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_setPaperName, doc_QPrinter_setPaperName);

    return NULL;
}


PyDoc_STRVAR(doc_QPrinter_paperName, "QPrinter.paperName() -> str");

extern "C" {static PyObject *meth_QPrinter_paperName(PyObject *, PyObject *);}
static PyObject *meth_QPrinter_paperName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QPrinter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QPrinter, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->paperName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QPrinter, sipName_paperName, doc_QPrinter_paperName);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPrinter(void *, const sipTypeDef *);}
static void *cast_QPrinter(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QPrinter)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QPagedPaintDevice)->ctd_cast((QPagedPaintDevice *)(QPrinter *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPrinter(void *, int);}
static void release_QPrinter(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPrinter *>(sipCppV);
    else
        delete reinterpret_cast<QPrinter *>(sipCppV);
}


extern "C" {static void dealloc_QPrinter(sipSimpleWrapper *);}
static void dealloc_QPrinter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPrinter *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPrinter(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QPrinter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QPrinter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipQPrinter *sipCpp = 0;

    {
        QPrinter::PrinterMode a0 = QPrinter::ScreenResolution;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|E", sipType_QPrinter_PrinterMode, &a0))
        {
            sipCpp = new sipQPrinter(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const QPrinterInfo* a0;
        QPrinter::PrinterMode a1 = QPrinter::ScreenResolution;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mode,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|E", sipType_QPrinterInfo, &a0, sipType_QPrinter_PrinterMode, &a1))
        {
            sipCpp = new sipQPrinter(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPrinter[] = {{180, 1, 1}};


static PyMethodDef methods_QPrinter[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QPrinter_abort, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_abort)},
    {SIP_MLNAME_CAST(sipName_collateCopies), meth_QPrinter_collateCopies, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_collateCopies)},
    {SIP_MLNAME_CAST(sipName_colorMode), meth_QPrinter_colorMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_colorMode)},
    {SIP_MLNAME_CAST(sipName_copyCount), meth_QPrinter_copyCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_copyCount)},
    {SIP_MLNAME_CAST(sipName_creator), meth_QPrinter_creator, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_creator)},
    {SIP_MLNAME_CAST(sipName_docName), meth_QPrinter_docName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_docName)},
    {SIP_MLNAME_CAST(sipName_doubleSidedPrinting), meth_QPrinter_doubleSidedPrinting, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_doubleSidedPrinting)},
    {SIP_MLNAME_CAST(sipName_duplex), meth_QPrinter_duplex, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_duplex)},
    {SIP_MLNAME_CAST(sipName_fontEmbeddingEnabled), meth_QPrinter_fontEmbeddingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_fontEmbeddingEnabled)},
    {SIP_MLNAME_CAST(sipName_fromPage), meth_QPrinter_fromPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_fromPage)},
    {SIP_MLNAME_CAST(sipName_fullPage), meth_QPrinter_fullPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_fullPage)},
    {SIP_MLNAME_CAST(sipName_getPageMargins), meth_QPrinter_getPageMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_getPageMargins)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QPrinter_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_isValid)},
    {SIP_MLNAME_CAST(sipName_metric), (PyCFunction)meth_QPrinter_metric, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPrinter_metric)},
    {SIP_MLNAME_CAST(sipName_newPage), meth_QPrinter_newPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_newPage)},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QPrinter_orientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_orientation)},
    {SIP_MLNAME_CAST(sipName_outputFileName), meth_QPrinter_outputFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_outputFileName)},
    {SIP_MLNAME_CAST(sipName_outputFormat), meth_QPrinter_outputFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_outputFormat)},
    {SIP_MLNAME_CAST(sipName_pageOrder), meth_QPrinter_pageOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_pageOrder)},
    {SIP_MLNAME_CAST(sipName_pageRect), meth_QPrinter_pageRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_pageRect)},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QPrinter_paintEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_paintEngine)},
    {SIP_MLNAME_CAST(sipName_paperName), meth_QPrinter_paperName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_paperName)},
    {SIP_MLNAME_CAST(sipName_paperRect), meth_QPrinter_paperRect, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_paperRect)},
    {SIP_MLNAME_CAST(sipName_paperSize), meth_QPrinter_paperSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_paperSize)},
    {SIP_MLNAME_CAST(sipName_paperSource), meth_QPrinter_paperSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_paperSource)},
    {SIP_MLNAME_CAST(sipName_printEngine), meth_QPrinter_printEngine, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_printEngine)},
    {SIP_MLNAME_CAST(sipName_printProgram), meth_QPrinter_printProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_printProgram)},
    {SIP_MLNAME_CAST(sipName_printRange), meth_QPrinter_printRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_printRange)},
    {SIP_MLNAME_CAST(sipName_printerName), meth_QPrinter_printerName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_printerName)},
    {SIP_MLNAME_CAST(sipName_printerState), meth_QPrinter_printerState, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_printerState)},
    {SIP_MLNAME_CAST(sipName_resolution), meth_QPrinter_resolution, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_resolution)},
    {SIP_MLNAME_CAST(sipName_setCollateCopies), meth_QPrinter_setCollateCopies, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setCollateCopies)},
    {SIP_MLNAME_CAST(sipName_setColorMode), meth_QPrinter_setColorMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setColorMode)},
    {SIP_MLNAME_CAST(sipName_setCopyCount), meth_QPrinter_setCopyCount, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setCopyCount)},
    {SIP_MLNAME_CAST(sipName_setCreator), meth_QPrinter_setCreator, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setCreator)},
    {SIP_MLNAME_CAST(sipName_setDocName), meth_QPrinter_setDocName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setDocName)},
    {SIP_MLNAME_CAST(sipName_setDoubleSidedPrinting), meth_QPrinter_setDoubleSidedPrinting, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setDoubleSidedPrinting)},
    {SIP_MLNAME_CAST(sipName_setDuplex), meth_QPrinter_setDuplex, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setDuplex)},
    {SIP_MLNAME_CAST(sipName_setEngines), (PyCFunction)meth_QPrinter_setEngines, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QPrinter_setEngines)},
    {SIP_MLNAME_CAST(sipName_setFontEmbeddingEnabled), meth_QPrinter_setFontEmbeddingEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setFontEmbeddingEnabled)},
    {SIP_MLNAME_CAST(sipName_setFromTo), meth_QPrinter_setFromTo, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setFromTo)},
    {SIP_MLNAME_CAST(sipName_setFullPage), meth_QPrinter_setFullPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setFullPage)},
    {SIP_MLNAME_CAST(sipName_setMargins), meth_QPrinter_setMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setMargins)},
    {SIP_MLNAME_CAST(sipName_setOrientation), meth_QPrinter_setOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setOrientation)},
    {SIP_MLNAME_CAST(sipName_setOutputFileName), meth_QPrinter_setOutputFileName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setOutputFileName)},
    {SIP_MLNAME_CAST(sipName_setOutputFormat), meth_QPrinter_setOutputFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setOutputFormat)},
    {SIP_MLNAME_CAST(sipName_setPageMargins), meth_QPrinter_setPageMargins, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPageMargins)},
    {SIP_MLNAME_CAST(sipName_setPageOrder), meth_QPrinter_setPageOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPageOrder)},
    {SIP_MLNAME_CAST(sipName_setPageSizeMM), meth_QPrinter_setPageSizeMM, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPageSizeMM)},
    {SIP_MLNAME_CAST(sipName_setPaperName), meth_QPrinter_setPaperName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPaperName)},
    {SIP_MLNAME_CAST(sipName_setPaperSize), meth_QPrinter_setPaperSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPaperSize)},
    {SIP_MLNAME_CAST(sipName_setPaperSource), meth_QPrinter_setPaperSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPaperSource)},
    {SIP_MLNAME_CAST(sipName_setPrintProgram), meth_QPrinter_setPrintProgram, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPrintProgram)},
    {SIP_MLNAME_CAST(sipName_setPrintRange), meth_QPrinter_setPrintRange, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPrintRange)},
    {SIP_MLNAME_CAST(sipName_setPrinterName), meth_QPrinter_setPrinterName, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setPrinterName)},
    {SIP_MLNAME_CAST(sipName_setResolution), meth_QPrinter_setResolution, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_setResolution)},
    {SIP_MLNAME_CAST(sipName_supportedResolutions), meth_QPrinter_supportedResolutions, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_supportedResolutions)},
    {SIP_MLNAME_CAST(sipName_supportsMultipleCopies), meth_QPrinter_supportsMultipleCopies, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_supportsMultipleCopies)},
    {SIP_MLNAME_CAST(sipName_toPage), meth_QPrinter_toPage, METH_VARARGS, SIP_MLDOC_CAST(doc_QPrinter_toPage)}
};

static sipEnumMemberDef enummembers_QPrinter[] = {
    {sipName_Aborted, static_cast<int>(QPrinter::Aborted), 26},
    {sipName_Active, static_cast<int>(QPrinter::Active), 26},
    {sipName_AllPages, static_cast<int>(QPrinter::AllPages), 24},
    {sipName_Auto, static_cast<int>(QPrinter::Auto), 23},
    {sipName_Cassette, static_cast<int>(QPrinter::Cassette), 23},
    {sipName_Cicero, static_cast<int>(QPrinter::Cicero), 27},
    {sipName_Color, static_cast<int>(QPrinter::Color), 18},
    {sipName_CurrentPage, static_cast<int>(QPrinter::CurrentPage), 24},
    {sipName_CustomSource, static_cast<int>(QPrinter::CustomSource), 23},
    {sipName_DevicePixel, static_cast<int>(QPrinter::DevicePixel), 27},
    {sipName_Didot, static_cast<int>(QPrinter::Didot), 27},
    {sipName_DuplexAuto, static_cast<int>(QPrinter::DuplexAuto), 19},
    {sipName_DuplexLongSide, static_cast<int>(QPrinter::DuplexLongSide), 19},
    {sipName_DuplexNone, static_cast<int>(QPrinter::DuplexNone), 19},
    {sipName_DuplexShortSide, static_cast<int>(QPrinter::DuplexShortSide), 19},
    {sipName_Envelope, static_cast<int>(QPrinter::Envelope), 23},
    {sipName_EnvelopeManual, static_cast<int>(QPrinter::EnvelopeManual), 23},
    {sipName_Error, static_cast<int>(QPrinter::Error), 26},
    {sipName_FirstPageFirst, static_cast<int>(QPrinter::FirstPageFirst), 22},
    {sipName_FormSource, static_cast<int>(QPrinter::FormSource), 23},
    {sipName_GrayScale, static_cast<int>(QPrinter::GrayScale), 18},
    {sipName_HighResolution, static_cast<int>(QPrinter::HighResolution), 25},
    {sipName_Idle, static_cast<int>(QPrinter::Idle), 26},
    {sipName_Inch, static_cast<int>(QPrinter::Inch), 27},
    {sipName_Landscape, static_cast<int>(QPrinter::Landscape), 20},
    {sipName_LargeCapacity, static_cast<int>(QPrinter::LargeCapacity), 23},
    {sipName_LargeFormat, static_cast<int>(QPrinter::LargeFormat), 23},
    {sipName_LastPageFirst, static_cast<int>(QPrinter::LastPageFirst), 22},
    {sipName_LastPaperSource, static_cast<int>(QPrinter::LastPaperSource), 23},
    {sipName_Lower, static_cast<int>(QPrinter::Lower), 23},
    {sipName_Manual, static_cast<int>(QPrinter::Manual), 23},
    {sipName_MaxPageSource, static_cast<int>(QPrinter::MaxPageSource), 23},
    {sipName_Middle, static_cast<int>(QPrinter::Middle), 23},
    {sipName_Millimeter, static_cast<int>(QPrinter::Millimeter), 27},
    {sipName_NativeFormat, static_cast<int>(QPrinter::NativeFormat), 21},
    {sipName_OnlyOne, static_cast<int>(QPrinter::OnlyOne), 23},
    {sipName_PageRange, static_cast<int>(QPrinter::PageRange), 24},
    {sipName_PdfFormat, static_cast<int>(QPrinter::PdfFormat), 21},
    {sipName_Pica, static_cast<int>(QPrinter::Pica), 27},
    {sipName_Point, static_cast<int>(QPrinter::Point), 27},
    {sipName_Portrait, static_cast<int>(QPrinter::Portrait), 20},
    {sipName_PrinterResolution, static_cast<int>(QPrinter::PrinterResolution), 25},
    {sipName_ScreenResolution, static_cast<int>(QPrinter::ScreenResolution), 25},
    {sipName_Selection, static_cast<int>(QPrinter::Selection), 24},
    {sipName_SmallFormat, static_cast<int>(QPrinter::SmallFormat), 23},
    {sipName_Tractor, static_cast<int>(QPrinter::Tractor), 23},
    {sipName_Upper, static_cast<int>(QPrinter::Upper), 23},
};

PyDoc_STRVAR(doc_QPrinter, "\1QPrinter(QPrinter.PrinterMode mode=QPrinter.ScreenResolution)\n"
    "QPrinter(QPrinterInfo, QPrinter.PrinterMode mode=QPrinter.ScreenResolution)");


pyqt5ClassTypeDef sipTypeDef_QtPrintSupport_QPrinter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QPrinter,
        {0}
    },
    {
        sipNameNr_QPrinter,
        {0, 0, 1},
        59, methods_QPrinter,
        47, enummembers_QPrinter,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QPrinter,
    -1,
    -1,
    supers_QPrinter,
    0,
    init_type_QPrinter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPrinter,
    0,
    0,
    0,
    release_QPrinter,
    cast_QPrinter,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
