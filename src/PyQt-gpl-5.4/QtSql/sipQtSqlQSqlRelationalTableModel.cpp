/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:51 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 41 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlrelationaltablemodel.sip"
#include <qsqlrelationaltablemodel.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 37 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqldatabase.sip"
#include <qsqldatabase.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqltablemodel.sip"
#include <qsqltablemodel.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlrelationaltablemodel.sip"
#include <qsqlrelationaltablemodel.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlquery.sip"
#include <qsqlquery.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlindex.sip"
#include <qsqlindex.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlerror.sip"
#include <qsqlerror.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 26 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 266 "sip/QtCore/qpycore_qhash.sip"
#include <qhash.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 70 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 105 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 321 "sip/QtCore/qpycore_qvector.sip"
#include <qvector.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 144 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 120 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 123 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 126 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 129 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 132 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 138 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 141 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 144 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"


class sipQSqlRelationalTableModel : public QSqlRelationalTableModel
{
public:
    sipQSqlRelationalTableModel(QObject*,QSqlDatabase);
    virtual ~sipQSqlRelationalTableModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtect_encodeData(const QModelIndexList&,QDataStream&) const;
    bool sipProtect_decodeData(int,int,const QModelIndex&,QDataStream&);
    QModelIndexList sipProtect_persistentIndexList() const;
    void sipProtect_changePersistentIndex(const QModelIndex&,const QModelIndex&);
    void sipProtect_changePersistentIndexList(const QModelIndexList&,const QModelIndexList&);
    QModelIndex sipProtect_createIndex(int,int,void*) const;
    bool sipProtect_beginMoveRows(const QModelIndex&,int,int,const QModelIndex&,int);
    void sipProtect_endMoveRows();
    bool sipProtect_beginMoveColumns(const QModelIndex&,int,int,const QModelIndex&,int);
    void sipProtect_endMoveColumns();
    void sipProtect_resetInternalData();
    void sipProtectVirt_queryChange(bool);
    void sipProtect_setLastError(const QSqlError&);
    void sipProtect_beginResetModel();
    void sipProtect_endResetModel();
    void sipProtect_beginInsertRows(const QModelIndex&,int,int);
    void sipProtect_endInsertRows();
    void sipProtect_beginRemoveRows(const QModelIndex&,int,int);
    void sipProtect_endRemoveRows();
    void sipProtect_beginInsertColumns(const QModelIndex&,int,int);
    void sipProtect_endInsertColumns();
    void sipProtect_beginRemoveColumns(const QModelIndex&,int,int);
    void sipProtect_endRemoveColumns();
    bool sipProtectVirt_deleteRowFromTable(bool,int);
    void sipProtect_setPrimaryKey(const QSqlIndex&);
    void sipProtect_setQuery(const QSqlQuery&);
    QModelIndex sipProtectVirt_indexInQuery(bool,const QModelIndex&) const;
    QSqlRecord sipProtect_primaryValues(int) const;
    QString sipProtectVirt_selectStatement(bool) const;
    bool sipProtectVirt_updateRowInTable(bool,int,const QSqlRecord&);
    QString sipProtectVirt_orderByClause(bool) const;
    bool sipProtectVirt_insertRowIntoTable(bool,const QSqlRecord&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool moveColumns(const QModelIndex&,int,int,const QModelIndex&,int);
    bool moveRows(const QModelIndex&,int,int,const QModelIndex&,int);
    bool canDropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&) const;
    QHash<int,QByteArray> roleNames() const;
    Qt::DropActions supportedDragActions() const;
    QSize span(const QModelIndex&) const;
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    QModelIndex buddy(const QModelIndex&) const;
    Qt::DropActions supportedDropActions() const;
    QMimeData* mimeData(const QModelIndexList&) const;
    QStringList mimeTypes() const;
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    QModelIndex sibling(int,int,const QModelIndex&) const;
    bool dropMimeData(const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);
    QModelIndex index(int,int,const QModelIndex&) const;
    void queryChange();
    bool canFetchMore(const QModelIndex&) const;
    void fetchMore(const QModelIndex&);
    bool insertColumns(int,int,const QModelIndex&);
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    int columnCount(const QModelIndex&) const;
    bool selectRow(int);
    QModelIndex indexInQuery(const QModelIndex&) const;
    bool deleteRowFromTable(int);
    void revert();
    bool submit();
    bool insertRows(int,int,const QModelIndex&);
    bool removeRows(int,int,const QModelIndex&);
    int rowCount(const QModelIndex&) const;
    void setFilter(const QString&);
    void setSort(int,Qt::SortOrder);
    void sort(int,Qt::SortOrder);
    void setEditStrategy(QSqlTableModel::EditStrategy);
    QVariant headerData(int,Qt::Orientation,int) const;
    Qt::ItemFlags flags(const QModelIndex&) const;
    bool insertRowIntoTable(const QSqlRecord&);
    QString orderByClause() const;
    bool updateRowInTable(int,const QSqlRecord&);
    QString selectStatement() const;
    bool removeColumns(int,int,const QModelIndex&);
    void revertRow(int);
    QSqlTableModel* relationModel(int) const;
    void setRelation(int,const QSqlRelation&);
    void setTable(const QString&);
    bool select();
    void clear();
    bool setData(const QModelIndex&,const QVariant&,int);
    QVariant data(const QModelIndex&,int) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSqlRelationalTableModel(const sipQSqlRelationalTableModel &);
    sipQSqlRelationalTableModel &operator = (const sipQSqlRelationalTableModel &);

    char sipPyMethods[56];
};

sipQSqlRelationalTableModel::sipQSqlRelationalTableModel(QObject*a0,QSqlDatabase a1): QSqlRelationalTableModel(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSqlRelationalTableModel::~sipQSqlRelationalTableModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSqlRelationalTableModel::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtSql_qt_metaobject(sipPySelf,sipType_QSqlRelationalTableModel);
}

int sipQSqlRelationalTableModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSqlRelationalTableModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtSql_qt_metacall(sipPySelf,sipType_QSqlRelationalTableModel,_c,_id,_a);

    return _id;
}

void *sipQSqlRelationalTableModel::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtSql_qt_metacast(sipPySelf, sipType_QSqlRelationalTableModel, _clname, &sipCpp) ? sipCpp : QSqlRelationalTableModel::qt_metacast(_clname));
}

void sipQSqlRelationalTableModel::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtSql_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlRelationalTableModel::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtSql_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlRelationalTableModel::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtSql_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlRelationalTableModel::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtSql_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlRelationalTableModel::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtSql_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSqlRelationalTableModel::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSqlRelationalTableModel::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtSql_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQSqlRelationalTableModel::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSqlRelationalTableModel::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtSql_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSqlRelationalTableModel::moveColumns(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_moveColumns);

    if (!sipMeth)
        return QSqlRelationalTableModel::moveColumns(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_59)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int,const QModelIndex&,int);

    return ((sipVH_QtCore_59)(sipModuleAPI_QtSql_QtCore->em_virthandlers[59]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQSqlRelationalTableModel::moveRows(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_moveRows);

    if (!sipMeth)
        return QSqlRelationalTableModel::moveRows(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_59)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,int,const QModelIndex&,int);

    return ((sipVH_QtCore_59)(sipModuleAPI_QtSql_QtCore->em_virthandlers[59]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

bool sipQSqlRelationalTableModel::canDropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_canDropMimeData);

    if (!sipMeth)
        return QSqlRelationalTableModel::canDropMimeData(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);

    return ((sipVH_QtCore_33)(sipModuleAPI_QtSql_QtCore->em_virthandlers[33]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QHash<int,QByteArray> sipQSqlRelationalTableModel::roleNames() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_roleNames);

    if (!sipMeth)
        return QSqlRelationalTableModel::roleNames();

    typedef QHash<int,QByteArray> (*sipVH_QtCore_60)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_60)(sipModuleAPI_QtSql_QtCore->em_virthandlers[60]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

Qt::DropActions sipQSqlRelationalTableModel::supportedDragActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_supportedDragActions);

    if (!sipMeth)
        return QSqlRelationalTableModel::supportedDragActions();

    typedef Qt::DropActions (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtSql_QtCore->em_virthandlers[18]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QSize sipQSqlRelationalTableModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_span);

    if (!sipMeth)
        return QSqlRelationalTableModel::span(a0);

    typedef QSize (*sipVH_QtCore_29)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_29)(sipModuleAPI_QtSql_QtCore->em_virthandlers[29]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QModelIndexList sipQSqlRelationalTableModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_match);

    if (!sipMeth)
        return QSqlRelationalTableModel::match(a0,a1,a2,a3,a4);

    typedef QList<QModelIndex> (*sipVH_QtCore_28)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);

    return ((sipVH_QtCore_28)(sipModuleAPI_QtSql_QtCore->em_virthandlers[28]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QModelIndex sipQSqlRelationalTableModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_buddy);

    if (!sipMeth)
        return QSqlRelationalTableModel::buddy(a0);

    typedef QModelIndex (*sipVH_QtCore_30)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_30)(sipModuleAPI_QtSql_QtCore->em_virthandlers[30]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

Qt::DropActions sipQSqlRelationalTableModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!sipMeth)
        return QSqlRelationalTableModel::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_18)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_18)(sipModuleAPI_QtSql_QtCore->em_virthandlers[18]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QMimeData* sipQSqlRelationalTableModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_mimeData);

    if (!sipMeth)
        return QSqlRelationalTableModel::mimeData(a0);

    typedef QMimeData* (*sipVH_QtCore_34)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QList<QModelIndex>&);

    return ((sipVH_QtCore_34)(sipModuleAPI_QtSql_QtCore->em_virthandlers[34]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QStringList sipQSqlRelationalTableModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_mimeTypes);

    if (!sipMeth)
        return QSqlRelationalTableModel::mimeTypes();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_QtSql_QtCore->em_virthandlers[27]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSqlRelationalTableModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_setItemData);

    if (!sipMeth)
        return QSqlRelationalTableModel::setItemData(a0,a1);

    typedef bool (*sipVH_QtCore_56)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QMap<int,QVariant>&);

    return ((sipVH_QtCore_56)(sipModuleAPI_QtSql_QtCore->em_virthandlers[56]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QMap<int,QVariant> sipQSqlRelationalTableModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_itemData);

    if (!sipMeth)
        return QSqlRelationalTableModel::itemData(a0);

    typedef QMap<int,QVariant> (*sipVH_QtCore_57)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_57)(sipModuleAPI_QtSql_QtCore->em_virthandlers[57]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QModelIndex sipQSqlRelationalTableModel::sibling(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_sibling);

    if (!sipMeth)
        return QSqlRelationalTableModel::sibling(a0,a1,a2);

    typedef QModelIndex (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_17)(sipModuleAPI_QtSql_QtCore->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSqlRelationalTableModel::dropMimeData(const QMimeData*a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_dropMimeData);

    if (!sipMeth)
        return QSqlRelationalTableModel::dropMimeData(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_33)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMimeData*,Qt::DropAction,int,int,const QModelIndex&);

    return ((sipVH_QtCore_33)(sipModuleAPI_QtSql_QtCore->em_virthandlers[33]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4);
}

QModelIndex sipQSqlRelationalTableModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_index);

    if (!sipMeth)
        return QSqlRelationalTableModel::index(a0,a1,a2);

    typedef QModelIndex (*sipVH_QtCore_17)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_17)(sipModuleAPI_QtSql_QtCore->em_virthandlers[17]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQSqlRelationalTableModel::queryChange()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_queryChange);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::queryChange();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtSql_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSqlRelationalTableModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_canFetchMore);

    if (!sipMeth)
        return QSqlRelationalTableModel::canFetchMore(a0);

    typedef bool (*sipVH_QtCore_31)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_31)(sipModuleAPI_QtSql_QtCore->em_virthandlers[31]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlRelationalTableModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_fetchMore);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::fetchMore(a0);
        return;
    }

    typedef void (*sipVH_QtCore_32)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    ((sipVH_QtCore_32)(sipModuleAPI_QtSql_QtCore->em_virthandlers[32]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSqlRelationalTableModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_insertColumns);

    if (!sipMeth)
        return QSqlRelationalTableModel::insertColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtSql_QtCore->em_virthandlers[20]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSqlRelationalTableModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_setHeaderData);

    if (!sipMeth)
        return QSqlRelationalTableModel::setHeaderData(a0,a1,a2,a3);

    typedef bool (*sipVH_QtCore_35)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,const QVariant&,int);

    return ((sipVH_QtCore_35)(sipModuleAPI_QtSql_QtCore->em_virthandlers[35]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

int sipQSqlRelationalTableModel::columnCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_columnCount);

    if (!sipMeth)
        return QSqlRelationalTableModel::columnCount(a0);

    typedef int (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_24)(sipModuleAPI_QtSql_QtCore->em_virthandlers[24]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSqlRelationalTableModel::selectRow(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_selectRow);

    if (!sipMeth)
        return QSqlRelationalTableModel::selectRow(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtSql_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QModelIndex sipQSqlRelationalTableModel::indexInQuery(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_indexInQuery);

    if (!sipMeth)
        return QSqlRelationalTableModel::indexInQuery(a0);

    typedef QModelIndex (*sipVH_QtCore_30)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_30)(sipModuleAPI_QtSql_QtCore->em_virthandlers[30]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSqlRelationalTableModel::deleteRowFromTable(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_deleteRowFromTable);

    if (!sipMeth)
        return QSqlRelationalTableModel::deleteRowFromTable(a0);

    typedef bool (*sipVH_QtCore_45)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return ((sipVH_QtCore_45)(sipModuleAPI_QtSql_QtCore->em_virthandlers[45]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlRelationalTableModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_revert);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::revert();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtSql_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSqlRelationalTableModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_submit);

    if (!sipMeth)
        return QSqlRelationalTableModel::submit();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSqlRelationalTableModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_insertRows);

    if (!sipMeth)
        return QSqlRelationalTableModel::insertRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtSql_QtCore->em_virthandlers[20]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

bool sipQSqlRelationalTableModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_removeRows);

    if (!sipMeth)
        return QSqlRelationalTableModel::removeRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtSql_QtCore->em_virthandlers[20]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

int sipQSqlRelationalTableModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_rowCount);

    if (!sipMeth)
        return QSqlRelationalTableModel::rowCount(a0);

    typedef int (*sipVH_QtCore_24)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_24)(sipModuleAPI_QtSql_QtCore->em_virthandlers[24]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlRelationalTableModel::setFilter(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_setFilter);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::setFilter(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtGui_22)(sipModuleAPI_QtSql_QtGui->em_virthandlers[22]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlRelationalTableModel::setSort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_setSort);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::setSort(a0,a1);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::SortOrder);

    ((sipVH_QtCore_19)(sipModuleAPI_QtSql_QtCore->em_virthandlers[19]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQSqlRelationalTableModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_sort);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::sort(a0,a1);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::SortOrder);

    ((sipVH_QtCore_19)(sipModuleAPI_QtSql_QtCore->em_virthandlers[19]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQSqlRelationalTableModel::setEditStrategy(QSqlTableModel::EditStrategy a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_setEditStrategy);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::setEditStrategy(a0);
        return;
    }

    extern void sipVH_QtSql_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSqlTableModel::EditStrategy);

    sipVH_QtSql_2(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQSqlRelationalTableModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_headerData);

    if (!sipMeth)
        return QSqlRelationalTableModel::headerData(a0,a1,a2);

    typedef QVariant (*sipVH_QtCore_36)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,Qt::Orientation,int);

    return ((sipVH_QtCore_36)(sipModuleAPI_QtSql_QtCore->em_virthandlers[36]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

Qt::ItemFlags sipQSqlRelationalTableModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_flags);

    if (!sipMeth)
        return QSqlRelationalTableModel::flags(a0);

    typedef Qt::ItemFlags (*sipVH_QtCore_21)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&);

    return ((sipVH_QtCore_21)(sipModuleAPI_QtSql_QtCore->em_virthandlers[21]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSqlRelationalTableModel::insertRowIntoTable(const QSqlRecord& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_insertRowIntoTable);

    if (!sipMeth)
        return QSqlRelationalTableModel::insertRowIntoTable(a0);

    extern bool sipVH_QtSql_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QSqlRecord&);

    return sipVH_QtSql_0(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QString sipQSqlRelationalTableModel::orderByClause() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_orderByClause);

    if (!sipMeth)
        return QSqlRelationalTableModel::orderByClause();

    typedef QString (*sipVH_QtCore_16)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_16)(sipModuleAPI_QtSql_QtCore->em_virthandlers[16]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSqlRelationalTableModel::updateRowInTable(int a0,const QSqlRecord& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_updateRowInTable);

    if (!sipMeth)
        return QSqlRelationalTableModel::updateRowInTable(a0,a1);

    extern bool sipVH_QtSql_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const QSqlRecord&);

    return sipVH_QtSql_1(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QString sipQSqlRelationalTableModel::selectStatement() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_selectStatement);

    if (!sipMeth)
        return QSqlRelationalTableModel::selectStatement();

    typedef QString (*sipVH_QtCore_16)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_16)(sipModuleAPI_QtSql_QtCore->em_virthandlers[16]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSqlRelationalTableModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_removeColumns);

    if (!sipMeth)
        return QSqlRelationalTableModel::removeColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const QModelIndex&);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtSql_QtCore->em_virthandlers[20]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQSqlRelationalTableModel::revertRow(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_revertRow);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::revertRow(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtSql_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSqlTableModel* sipQSqlRelationalTableModel::relationModel(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,NULL,sipName_relationModel);

    if (!sipMeth)
        return QSqlRelationalTableModel::relationModel(a0);

    extern QSqlTableModel* sipVH_QtSql_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH_QtSql_8(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlRelationalTableModel::setRelation(int a0,const QSqlRelation& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_setRelation);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::setRelation(a0,a1);
        return;
    }

    extern void sipVH_QtSql_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const QSqlRelation&);

    sipVH_QtSql_9(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQSqlRelationalTableModel::setTable(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_setTable);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::setTable(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    ((sipVH_QtGui_22)(sipModuleAPI_QtSql_QtGui->em_virthandlers[22]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSqlRelationalTableModel::select()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_select);

    if (!sipMeth)
        return QSqlRelationalTableModel::select();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQSqlRelationalTableModel::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_clear);

    if (!sipMeth)
    {
        QSqlRelationalTableModel::clear();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtSql_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSqlRelationalTableModel::setData(const QModelIndex& a0,const QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_setData);

    if (!sipMeth)
        return QSqlRelationalTableModel::setData(a0,a1,a2);

    typedef bool (*sipVH_QtCore_22)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,const QVariant&,int);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtSql_QtCore->em_virthandlers[22]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QVariant sipQSqlRelationalTableModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[55]),sipPySelf,NULL,sipName_data);

    if (!sipMeth)
        return QSqlRelationalTableModel::data(a0,a1);

    typedef QVariant (*sipVH_QtCore_23)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QModelIndex&,int);

    return ((sipVH_QtCore_23)(sipModuleAPI_QtSql_QtCore->em_virthandlers[23]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QObject* sipQSqlRelationalTableModel::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQSqlRelationalTableModel::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQSqlRelationalTableModel::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQSqlRelationalTableModel::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQSqlRelationalTableModel::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQSqlRelationalTableModel::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQSqlRelationalTableModel::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQSqlRelationalTableModel::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQSqlRelationalTableModel::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQSqlRelationalTableModel::sipProtect_encodeData(const QModelIndexList& a0,QDataStream& a1) const
{
    QAbstractItemModel::encodeData(a0,a1);
}

bool sipQSqlRelationalTableModel::sipProtect_decodeData(int a0,int a1,const QModelIndex& a2,QDataStream& a3)
{
    return QAbstractItemModel::decodeData(a0,a1,a2,a3);
}

QModelIndexList sipQSqlRelationalTableModel::sipProtect_persistentIndexList() const
{
    return QAbstractItemModel::persistentIndexList();
}

void sipQSqlRelationalTableModel::sipProtect_changePersistentIndex(const QModelIndex& a0,const QModelIndex& a1)
{
    QAbstractItemModel::changePersistentIndex(a0,a1);
}

void sipQSqlRelationalTableModel::sipProtect_changePersistentIndexList(const QModelIndexList& a0,const QModelIndexList& a1)
{
    QAbstractItemModel::changePersistentIndexList(a0,a1);
}

QModelIndex sipQSqlRelationalTableModel::sipProtect_createIndex(int a0,int a1,void*a2) const
{
    return QAbstractItemModel::createIndex(a0,a1,a2);
}

bool sipQSqlRelationalTableModel::sipProtect_beginMoveRows(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    return QAbstractItemModel::beginMoveRows(a0,a1,a2,a3,a4);
}

void sipQSqlRelationalTableModel::sipProtect_endMoveRows()
{
    QAbstractItemModel::endMoveRows();
}

bool sipQSqlRelationalTableModel::sipProtect_beginMoveColumns(const QModelIndex& a0,int a1,int a2,const QModelIndex& a3,int a4)
{
    return QAbstractItemModel::beginMoveColumns(a0,a1,a2,a3,a4);
}

void sipQSqlRelationalTableModel::sipProtect_endMoveColumns()
{
    QAbstractItemModel::endMoveColumns();
}

void sipQSqlRelationalTableModel::sipProtect_resetInternalData()
{
    QAbstractItemModel::resetInternalData();
}

void sipQSqlRelationalTableModel::sipProtectVirt_queryChange(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QSqlQueryModel::queryChange() : queryChange());
}

void sipQSqlRelationalTableModel::sipProtect_setLastError(const QSqlError& a0)
{
    QSqlQueryModel::setLastError(a0);
}

void sipQSqlRelationalTableModel::sipProtect_beginResetModel()
{
    QSqlQueryModel::beginResetModel();
}

void sipQSqlRelationalTableModel::sipProtect_endResetModel()
{
    QSqlQueryModel::endResetModel();
}

void sipQSqlRelationalTableModel::sipProtect_beginInsertRows(const QModelIndex& a0,int a1,int a2)
{
    QSqlQueryModel::beginInsertRows(a0,a1,a2);
}

void sipQSqlRelationalTableModel::sipProtect_endInsertRows()
{
    QSqlQueryModel::endInsertRows();
}

void sipQSqlRelationalTableModel::sipProtect_beginRemoveRows(const QModelIndex& a0,int a1,int a2)
{
    QSqlQueryModel::beginRemoveRows(a0,a1,a2);
}

void sipQSqlRelationalTableModel::sipProtect_endRemoveRows()
{
    QSqlQueryModel::endRemoveRows();
}

void sipQSqlRelationalTableModel::sipProtect_beginInsertColumns(const QModelIndex& a0,int a1,int a2)
{
    QSqlQueryModel::beginInsertColumns(a0,a1,a2);
}

void sipQSqlRelationalTableModel::sipProtect_endInsertColumns()
{
    QSqlQueryModel::endInsertColumns();
}

void sipQSqlRelationalTableModel::sipProtect_beginRemoveColumns(const QModelIndex& a0,int a1,int a2)
{
    QSqlQueryModel::beginRemoveColumns(a0,a1,a2);
}

void sipQSqlRelationalTableModel::sipProtect_endRemoveColumns()
{
    QSqlQueryModel::endRemoveColumns();
}

bool sipQSqlRelationalTableModel::sipProtectVirt_deleteRowFromTable(bool sipSelfWasArg,int a0)
{
    return (sipSelfWasArg ? QSqlTableModel::deleteRowFromTable(a0) : deleteRowFromTable(a0));
}

void sipQSqlRelationalTableModel::sipProtect_setPrimaryKey(const QSqlIndex& a0)
{
    QSqlTableModel::setPrimaryKey(a0);
}

void sipQSqlRelationalTableModel::sipProtect_setQuery(const QSqlQuery& a0)
{
    QSqlTableModel::setQuery(a0);
}

QModelIndex sipQSqlRelationalTableModel::sipProtectVirt_indexInQuery(bool sipSelfWasArg,const QModelIndex& a0) const
{
    return (sipSelfWasArg ? QSqlTableModel::indexInQuery(a0) : indexInQuery(a0));
}

QSqlRecord sipQSqlRelationalTableModel::sipProtect_primaryValues(int a0) const
{
    return QSqlTableModel::primaryValues(a0);
}

QString sipQSqlRelationalTableModel::sipProtectVirt_selectStatement(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QSqlRelationalTableModel::selectStatement() : selectStatement());
}

bool sipQSqlRelationalTableModel::sipProtectVirt_updateRowInTable(bool sipSelfWasArg,int a0,const QSqlRecord& a1)
{
    return (sipSelfWasArg ? QSqlRelationalTableModel::updateRowInTable(a0,a1) : updateRowInTable(a0,a1));
}

QString sipQSqlRelationalTableModel::sipProtectVirt_orderByClause(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QSqlRelationalTableModel::orderByClause() : orderByClause());
}

bool sipQSqlRelationalTableModel::sipProtectVirt_insertRowIntoTable(bool sipSelfWasArg,const QSqlRecord& a0)
{
    return (sipSelfWasArg ? QSqlRelationalTableModel::insertRowIntoTable(a0) : insertRowIntoTable(a0));
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_sender, "QSqlRelationalTableModel.sender() -> QObject");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 1441 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_sender, doc_QSqlRelationalTableModel_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_receivers, "QSqlRelationalTableModel.receivers(signal) -> int");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 1500 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_receivers, doc_QSqlRelationalTableModel_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_timerEvent, "QSqlRelationalTableModel.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_timerEvent, doc_QSqlRelationalTableModel_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_childEvent, "QSqlRelationalTableModel.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_childEvent, doc_QSqlRelationalTableModel_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_customEvent, "QSqlRelationalTableModel.customEvent(QEvent)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_customEvent, doc_QSqlRelationalTableModel_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_connectNotify, "QSqlRelationalTableModel.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_connectNotify, doc_QSqlRelationalTableModel_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_disconnectNotify, "QSqlRelationalTableModel.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_disconnectNotify, doc_QSqlRelationalTableModel_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_senderSignalIndex, "QSqlRelationalTableModel.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_senderSignalIndex, doc_QSqlRelationalTableModel_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_isSignalConnected, "QSqlRelationalTableModel.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_isSignalConnected, doc_QSqlRelationalTableModel_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_encodeData, "QSqlRelationalTableModel.encodeData(list-of-QModelIndex, QDataStream)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_encodeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_encodeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndexList* a0;
        int a0State = 0;
        QDataStream* a1;
        const sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State, sipType_QDataStream, &a1))
        {
            sipCpp->sipProtect_encodeData(*a0,*a1);
            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_encodeData, doc_QSqlRelationalTableModel_encodeData);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_decodeData, "QSqlRelationalTableModel.decodeData(int, int, QModelIndex, QDataStream) -> bool");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_decodeData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_decodeData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const QModelIndex* a2;
        QDataStream* a3;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiiJ9J9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2, sipType_QDataStream, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_decodeData(a0,a1,*a2,*a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_decodeData, doc_QSqlRelationalTableModel_decodeData);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_persistentIndexList, "QSqlRelationalTableModel.persistentIndexList() -> list-of-QModelIndex");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_persistentIndexList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_persistentIndexList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            QModelIndexList*sipRes;

            sipRes = new QModelIndexList(sipCpp->sipProtect_persistentIndexList());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_persistentIndexList, doc_QSqlRelationalTableModel_persistentIndexList);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_changePersistentIndex, "QSqlRelationalTableModel.changePersistentIndex(QModelIndex, QModelIndex)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_changePersistentIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_changePersistentIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        const QModelIndex* a1;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QModelIndex, &a1))
        {
            sipCpp->sipProtect_changePersistentIndex(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_changePersistentIndex, doc_QSqlRelationalTableModel_changePersistentIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_changePersistentIndexList, "QSqlRelationalTableModel.changePersistentIndexList(list-of-QModelIndex, list-of-QModelIndex)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_changePersistentIndexList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_changePersistentIndexList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndexList* a0;
        int a0State = 0;
        const QModelIndexList* a1;
        int a1State = 0;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ1J1", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QList_0100QModelIndex,&a0, &a0State, sipType_QList_0100QModelIndex,&a1, &a1State))
        {
            sipCpp->sipProtect_changePersistentIndexList(*a0,*a1);
            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);
            sipReleaseType(const_cast<QModelIndexList *>(a1),sipType_QList_0100QModelIndex,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_changePersistentIndexList, doc_QSqlRelationalTableModel_changePersistentIndexList);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_createIndex, "QSqlRelationalTableModel.createIndex(int, int, object object=0) -> QModelIndex");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_createIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_createIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        PyObject * a2 = 0;
        const sipQSqlRelationalTableModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_object,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|P0", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, &a0, &a1, &a2))
        {
            QModelIndex*sipRes = 0;

#line 194 "sip/QtCore/qabstractitemmodel.sip"
        // The Qt API is broken (and won't be fixed as it would break binary
        // compatibility) regarding the internal id of a model index on different
        // architectures (32 vs 64 bits).  We choose to work around the breakage as it
        // is fairly subtle and continues to catch people out.  Instead of letting Qt
        // convert betweed an integer id and a pointer id (the internal format used by
        // Qt) we let Python do it.
        
        void *ptr;
        
        if (a2)
        {
            // Try and convert it to a Python long and fallback to the object's
            // address if it fails.
            ptr = PyLong_AsVoidPtr(a2);
        
            if (PyErr_Occurred())
            {
                PyErr_Clear();
                ptr = a2;
            }
        }
        else
        {
            ptr = 0;
        }
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = new QModelIndex(sipCpp->createIndex(a0, a1, ptr));
        #else
        sipRes = new QModelIndex(sipCpp->sipProtect_createIndex(a0, a1, ptr));
        #endif
#line 1919 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalTableModel.cpp"

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_createIndex, doc_QSqlRelationalTableModel_createIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_beginMoveRows, "QSqlRelationalTableModel.beginMoveRows(QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_beginMoveRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_beginMoveRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        const QModelIndex* a3;
        int a4;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9iiJ9i", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_beginMoveRows(*a0,a1,a2,*a3,a4);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_beginMoveRows, doc_QSqlRelationalTableModel_beginMoveRows);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_endMoveRows, "QSqlRelationalTableModel.endMoveRows()");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_endMoveRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_endMoveRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            sipCpp->sipProtect_endMoveRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_endMoveRows, doc_QSqlRelationalTableModel_endMoveRows);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_beginMoveColumns, "QSqlRelationalTableModel.beginMoveColumns(QModelIndex, int, int, QModelIndex, int) -> bool");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_beginMoveColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_beginMoveColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        const QModelIndex* a3;
        int a4;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9iiJ9i", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2, sipType_QModelIndex, &a3, &a4))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_beginMoveColumns(*a0,a1,a2,*a3,a4);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_beginMoveColumns, doc_QSqlRelationalTableModel_beginMoveColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_endMoveColumns, "QSqlRelationalTableModel.endMoveColumns()");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_endMoveColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_endMoveColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            sipCpp->sipProtect_endMoveColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_endMoveColumns, doc_QSqlRelationalTableModel_endMoveColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_resetInternalData, "QSqlRelationalTableModel.resetInternalData()");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_resetInternalData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_resetInternalData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            sipCpp->sipProtect_resetInternalData();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_resetInternalData, doc_QSqlRelationalTableModel_resetInternalData);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_queryChange, "QSqlRelationalTableModel.queryChange()");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_queryChange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_queryChange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            sipCpp->sipProtectVirt_queryChange(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_queryChange, doc_QSqlRelationalTableModel_queryChange);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_setLastError, "QSqlRelationalTableModel.setLastError(QSqlError)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_setLastError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_setLastError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlError* a0;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QSqlError, &a0))
        {
            sipCpp->sipProtect_setLastError(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_setLastError, doc_QSqlRelationalTableModel_setLastError);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_beginResetModel, "QSqlRelationalTableModel.beginResetModel()");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_beginResetModel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_beginResetModel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            sipCpp->sipProtect_beginResetModel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_beginResetModel, doc_QSqlRelationalTableModel_beginResetModel);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_endResetModel, "QSqlRelationalTableModel.endResetModel()");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_endResetModel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_endResetModel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            sipCpp->sipProtect_endResetModel();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_endResetModel, doc_QSqlRelationalTableModel_endResetModel);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_beginInsertRows, "QSqlRelationalTableModel.beginInsertRows(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_beginInsertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_beginInsertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_beginInsertRows(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_beginInsertRows, doc_QSqlRelationalTableModel_beginInsertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_endInsertRows, "QSqlRelationalTableModel.endInsertRows()");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_endInsertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_endInsertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            sipCpp->sipProtect_endInsertRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_endInsertRows, doc_QSqlRelationalTableModel_endInsertRows);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_beginRemoveRows, "QSqlRelationalTableModel.beginRemoveRows(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_beginRemoveRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_beginRemoveRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_beginRemoveRows(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_beginRemoveRows, doc_QSqlRelationalTableModel_beginRemoveRows);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_endRemoveRows, "QSqlRelationalTableModel.endRemoveRows()");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_endRemoveRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_endRemoveRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            sipCpp->sipProtect_endRemoveRows();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_endRemoveRows, doc_QSqlRelationalTableModel_endRemoveRows);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_beginInsertColumns, "QSqlRelationalTableModel.beginInsertColumns(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_beginInsertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_beginInsertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_beginInsertColumns(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_beginInsertColumns, doc_QSqlRelationalTableModel_beginInsertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_endInsertColumns, "QSqlRelationalTableModel.endInsertColumns()");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_endInsertColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_endInsertColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            sipCpp->sipProtect_endInsertColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_endInsertColumns, doc_QSqlRelationalTableModel_endInsertColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_beginRemoveColumns, "QSqlRelationalTableModel.beginRemoveColumns(QModelIndex, int, int)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_beginRemoveColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_beginRemoveColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QModelIndex* a0;
        int a1;
        int a2;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9ii", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QModelIndex, &a0, &a1, &a2))
        {
            sipCpp->sipProtect_beginRemoveColumns(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_beginRemoveColumns, doc_QSqlRelationalTableModel_beginRemoveColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_endRemoveColumns, "QSqlRelationalTableModel.endRemoveColumns()");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_endRemoveColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_endRemoveColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            sipCpp->sipProtect_endRemoveColumns();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_endRemoveColumns, doc_QSqlRelationalTableModel_endRemoveColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_deleteRowFromTable, "QSqlRelationalTableModel.deleteRowFromTable(int) -> bool");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_deleteRowFromTable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_deleteRowFromTable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_deleteRowFromTable(sipSelfWasArg,a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_deleteRowFromTable, doc_QSqlRelationalTableModel_deleteRowFromTable);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_setPrimaryKey, "QSqlRelationalTableModel.setPrimaryKey(QSqlIndex)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_setPrimaryKey(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_setPrimaryKey(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlIndex* a0;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QSqlIndex, &a0))
        {
            sipCpp->sipProtect_setPrimaryKey(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_setPrimaryKey, doc_QSqlRelationalTableModel_setPrimaryKey);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_setQuery, "QSqlRelationalTableModel.setQuery(QSqlQuery)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_setQuery(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_setQuery(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery* a0;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QSqlQuery, &a0))
        {
            sipCpp->sipProtect_setQuery(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_setQuery, doc_QSqlRelationalTableModel_setQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_indexInQuery, "QSqlRelationalTableModel.indexInQuery(QModelIndex) -> QModelIndex");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_indexInQuery(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_indexInQuery(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QModelIndex, &a0))
        {
            QModelIndex*sipRes;

            sipRes = new QModelIndex(sipCpp->sipProtectVirt_indexInQuery(sipSelfWasArg,*a0));

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_indexInQuery, doc_QSqlRelationalTableModel_indexInQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_primaryValues, "QSqlRelationalTableModel.primaryValues(int) -> QSqlRecord");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_primaryValues(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_primaryValues(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bi", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, &a0))
        {
            QSqlRecord*sipRes;

            sipRes = new QSqlRecord(sipCpp->sipProtect_primaryValues(a0));

            return sipConvertFromNewType(sipRes,sipType_QSqlRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_primaryValues, doc_QSqlRelationalTableModel_primaryValues);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_data, "QSqlRelationalTableModel.data(QModelIndex, int role=Qt.DisplayRole) -> QVariant");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_data(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_data(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        int a1 = Qt::DisplayRole;
        const QSqlRelationalTableModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|i", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QModelIndex, &a0, &a1))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QSqlRelationalTableModel::data(*a0,a1) : sipCpp->data(*a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_data, doc_QSqlRelationalTableModel_data);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_setData, "QSqlRelationalTableModel.setData(QModelIndex, QVariant, int role=Qt.EditRole) -> bool");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_setData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_setData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex* a0;
        const QVariant* a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
        QSqlRelationalTableModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_role,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|i", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QModelIndex, &a0, sipType_QVariant, &a1, &a1State, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSqlRelationalTableModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_setData, doc_QSqlRelationalTableModel_setData);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_clear, "QSqlRelationalTableModel.clear()");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_clear(PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlRelationalTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QSqlRelationalTableModel::clear() : sipCpp->clear());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_clear, doc_QSqlRelationalTableModel_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_select, "QSqlRelationalTableModel.select() -> bool");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_select(PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_select(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlRelationalTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSqlRelationalTableModel::select() : sipCpp->select());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_select, doc_QSqlRelationalTableModel_select);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_setTable, "QSqlRelationalTableModel.setTable(str)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_setTable(PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_setTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QSqlRelationalTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QString,&a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp->QSqlRelationalTableModel::setTable(*a0) : sipCpp->setTable(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_setTable, doc_QSqlRelationalTableModel_setTable);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_setRelation, "QSqlRelationalTableModel.setRelation(int, QSqlRelation)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_setRelation(PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_setRelation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QSqlRelation* a1;
        QSqlRelationalTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, &a0, sipType_QSqlRelation, &a1))
        {
            (sipSelfWasArg ? sipCpp->QSqlRelationalTableModel::setRelation(a0,*a1) : sipCpp->setRelation(a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_setRelation, doc_QSqlRelationalTableModel_setRelation);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_relation, "QSqlRelationalTableModel.relation(int) -> QSqlRelation");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_relation(PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_relation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QSqlRelationalTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, &a0))
        {
            QSqlRelation*sipRes;

            sipRes = new QSqlRelation(sipCpp->relation(a0));

            return sipConvertFromNewType(sipRes,sipType_QSqlRelation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_relation, doc_QSqlRelationalTableModel_relation);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_relationModel, "QSqlRelationalTableModel.relationModel(int) -> QSqlTableModel");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_relationModel(PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_relationModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QSqlRelationalTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, &a0))
        {
            QSqlTableModel*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSqlRelationalTableModel::relationModel(a0) : sipCpp->relationModel(a0));

            return sipConvertFromType(sipRes,sipType_QSqlTableModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_relationModel, doc_QSqlRelationalTableModel_relationModel);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_revertRow, "QSqlRelationalTableModel.revertRow(int)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_revertRow(PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_revertRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QSqlRelationalTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QSqlRelationalTableModel::revertRow(a0) : sipCpp->revertRow(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_revertRow, doc_QSqlRelationalTableModel_revertRow);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_removeColumns, "QSqlRelationalTableModel.removeColumns(int, int, QModelIndex parent=QModelIndex()) -> bool");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_removeColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex* a2 = &a2def;
        QSqlRelationalTableModel *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, &a0, &a1, sipType_QModelIndex, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSqlRelationalTableModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_removeColumns, doc_QSqlRelationalTableModel_removeColumns);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_selectStatement, "QSqlRelationalTableModel.selectStatement() -> str");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_selectStatement(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_selectStatement(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->sipProtectVirt_selectStatement(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_selectStatement, doc_QSqlRelationalTableModel_selectStatement);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_updateRowInTable, "QSqlRelationalTableModel.updateRowInTable(int, QSqlRecord) -> bool");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_updateRowInTable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_updateRowInTable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QSqlRecord* a1;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BiJ9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, &a0, sipType_QSqlRecord, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_updateRowInTable(sipSelfWasArg,a0,*a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_updateRowInTable, doc_QSqlRelationalTableModel_updateRowInTable);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_orderByClause, "QSqlRelationalTableModel.orderByClause() -> str");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_orderByClause(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_orderByClause(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->sipProtectVirt_orderByClause(sipSelfWasArg));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_orderByClause, doc_QSqlRelationalTableModel_orderByClause);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_insertRowIntoTable, "QSqlRelationalTableModel.insertRowIntoTable(QSqlRecord) -> bool");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_insertRowIntoTable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_insertRowIntoTable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlRecord* a0;
        sipQSqlRelationalTableModel *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QSqlRecord, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_insertRowIntoTable(sipSelfWasArg,*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_insertRowIntoTable, doc_QSqlRelationalTableModel_insertRowIntoTable);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalTableModel_setJoinMode, "QSqlRelationalTableModel.setJoinMode(QSqlRelationalTableModel.JoinMode)");

extern "C" {static PyObject *meth_QSqlRelationalTableModel_setJoinMode(PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalTableModel_setJoinMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlRelationalTableModel::JoinMode a0;
        QSqlRelationalTableModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlRelationalTableModel, &sipCpp, sipType_QSqlRelationalTableModel_JoinMode, &a0))
        {
            sipCpp->setJoinMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalTableModel, sipName_setJoinMode, doc_QSqlRelationalTableModel_setJoinMode);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSqlRelationalTableModel(void *, const sipTypeDef *);}
static void *cast_QSqlRelationalTableModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSqlRelationalTableModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QSqlTableModel)->ctd_cast((QSqlTableModel *)(QSqlRelationalTableModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlRelationalTableModel(void *, int);}
static void release_QSqlRelationalTableModel(void *sipCppV,int)
{
    QSqlRelationalTableModel *sipCpp = reinterpret_cast<QSqlRelationalTableModel *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSqlRelationalTableModel(sipSimpleWrapper *);}
static void dealloc_QSqlRelationalTableModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSqlRelationalTableModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSqlRelationalTableModel(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSqlRelationalTableModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSqlRelationalTableModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSqlRelationalTableModel *sipCpp = 0;

    {
        QObject* a0 = 0;
        QSqlDatabase a1def = QSqlDatabase();
        QSqlDatabase* a1 = &a1def;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_db,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JHJ9", sipType_QObject, &a0, sipOwner, sipType_QSqlDatabase, &a1))
        {
            sipCpp = new sipQSqlRelationalTableModel(a0,*a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSqlRelationalTableModel[] = {{29, 255, 1}};


static PyMethodDef methods_QSqlRelationalTableModel[] = {
    {SIP_MLNAME_CAST(sipName_beginInsertColumns), (PyCFunction)meth_QSqlRelationalTableModel_beginInsertColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginInsertRows), (PyCFunction)meth_QSqlRelationalTableModel_beginInsertRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginMoveColumns), (PyCFunction)meth_QSqlRelationalTableModel_beginMoveColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginMoveRows), (PyCFunction)meth_QSqlRelationalTableModel_beginMoveRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginRemoveColumns), (PyCFunction)meth_QSqlRelationalTableModel_beginRemoveColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginRemoveRows), (PyCFunction)meth_QSqlRelationalTableModel_beginRemoveRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_beginResetModel), (PyCFunction)meth_QSqlRelationalTableModel_beginResetModel, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_changePersistentIndex), (PyCFunction)meth_QSqlRelationalTableModel_changePersistentIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_changePersistentIndexList), (PyCFunction)meth_QSqlRelationalTableModel_changePersistentIndexList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QSqlRelationalTableModel_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QSqlRelationalTableModel_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_clear)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QSqlRelationalTableModel_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createIndex), (PyCFunction)meth_QSqlRelationalTableModel_createIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QSqlRelationalTableModel_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_data), (PyCFunction)meth_QSqlRelationalTableModel_data, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_data)},
    {SIP_MLNAME_CAST(sipName_decodeData), (PyCFunction)meth_QSqlRelationalTableModel_decodeData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_deleteRowFromTable), (PyCFunction)meth_QSqlRelationalTableModel_deleteRowFromTable, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QSqlRelationalTableModel_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_encodeData), (PyCFunction)meth_QSqlRelationalTableModel_encodeData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endInsertColumns), (PyCFunction)meth_QSqlRelationalTableModel_endInsertColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endInsertRows), (PyCFunction)meth_QSqlRelationalTableModel_endInsertRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endMoveColumns), (PyCFunction)meth_QSqlRelationalTableModel_endMoveColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endMoveRows), (PyCFunction)meth_QSqlRelationalTableModel_endMoveRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endRemoveColumns), (PyCFunction)meth_QSqlRelationalTableModel_endRemoveColumns, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endRemoveRows), (PyCFunction)meth_QSqlRelationalTableModel_endRemoveRows, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_endResetModel), (PyCFunction)meth_QSqlRelationalTableModel_endResetModel, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_indexInQuery), (PyCFunction)meth_QSqlRelationalTableModel_indexInQuery, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_insertRowIntoTable), (PyCFunction)meth_QSqlRelationalTableModel_insertRowIntoTable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_insertRowIntoTable)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QSqlRelationalTableModel_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_orderByClause), (PyCFunction)meth_QSqlRelationalTableModel_orderByClause, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_orderByClause)},
    {SIP_MLNAME_CAST(sipName_persistentIndexList), (PyCFunction)meth_QSqlRelationalTableModel_persistentIndexList, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_primaryValues), (PyCFunction)meth_QSqlRelationalTableModel_primaryValues, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_queryChange), (PyCFunction)meth_QSqlRelationalTableModel_queryChange, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QSqlRelationalTableModel_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_relation), meth_QSqlRelationalTableModel_relation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_relation)},
    {SIP_MLNAME_CAST(sipName_relationModel), meth_QSqlRelationalTableModel_relationModel, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_relationModel)},
    {SIP_MLNAME_CAST(sipName_removeColumns), (PyCFunction)meth_QSqlRelationalTableModel_removeColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_removeColumns)},
    {SIP_MLNAME_CAST(sipName_resetInternalData), (PyCFunction)meth_QSqlRelationalTableModel_resetInternalData, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_revertRow), meth_QSqlRelationalTableModel_revertRow, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_revertRow)},
    {SIP_MLNAME_CAST(sipName_select), meth_QSqlRelationalTableModel_select, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_select)},
    {SIP_MLNAME_CAST(sipName_selectStatement), (PyCFunction)meth_QSqlRelationalTableModel_selectStatement, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_selectStatement)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QSqlRelationalTableModel_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QSqlRelationalTableModel_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setData), (PyCFunction)meth_QSqlRelationalTableModel_setData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_setData)},
    {SIP_MLNAME_CAST(sipName_setJoinMode), meth_QSqlRelationalTableModel_setJoinMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_setJoinMode)},
    {SIP_MLNAME_CAST(sipName_setLastError), (PyCFunction)meth_QSqlRelationalTableModel_setLastError, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setPrimaryKey), (PyCFunction)meth_QSqlRelationalTableModel_setPrimaryKey, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setQuery), (PyCFunction)meth_QSqlRelationalTableModel_setQuery, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setRelation), meth_QSqlRelationalTableModel_setRelation, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_setRelation)},
    {SIP_MLNAME_CAST(sipName_setTable), meth_QSqlRelationalTableModel_setTable, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_setTable)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QSqlRelationalTableModel_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateRowInTable), (PyCFunction)meth_QSqlRelationalTableModel_updateRowInTable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlRelationalTableModel_updateRowInTable)}
};

static sipEnumMemberDef enummembers_QSqlRelationalTableModel[] = {
    {sipName_InnerJoin, static_cast<int>(QSqlRelationalTableModel::InnerJoin), 26},
    {sipName_LeftJoin, static_cast<int>(QSqlRelationalTableModel::LeftJoin), 26},
};

PyDoc_STRVAR(doc_QSqlRelationalTableModel, "\1QSqlRelationalTableModel(QObject parent=None, QSqlDatabase db=QSqlDatabase())");


pyqt5ClassTypeDef sipTypeDef_QtSql_QSqlRelationalTableModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSqlRelationalTableModel,
        {0}
    },
    {
        sipNameNr_QSqlRelationalTableModel,
        {0, 0, 1},
        52, methods_QSqlRelationalTableModel,
        2, enummembers_QSqlRelationalTableModel,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSqlRelationalTableModel,
    -1,
    -1,
    supers_QSqlRelationalTableModel,
    0,
    init_type_QSqlRelationalTableModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSqlRelationalTableModel,
    0,
    0,
    0,
    release_QSqlRelationalTableModel,
    cast_QSqlRelationalTableModel,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSqlRelationalTableModel::staticMetaObject,
    0,
    0,
    0
};
