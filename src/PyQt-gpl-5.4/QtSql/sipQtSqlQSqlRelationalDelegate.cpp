/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:51 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlrelationaldelegate.sip"
#include <qsqlrelationaldelegate.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 30 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 105 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 26 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 564 "sip/QtWidgets/qstyleoption.sip"
#include <qstyleoption.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 30 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 38 "sip/QtWidgets/qitemeditorfactory.sip"
#include <qitemeditorfactory.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 30 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 26 "sip/QtWidgets/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 594 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 30 "sip/QtWidgets/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 114 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"


class sipQSqlRelationalDelegate : public QSqlRelationalDelegate
{
public:
    sipQSqlRelationalDelegate(QObject*);
    virtual ~sipQSqlRelationalDelegate();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtect_drawBackground(QPainter*,const QStyleOptionViewItem&,const QModelIndex&) const;
    void sipProtectVirt_drawCheck(bool,QPainter*,const QStyleOptionViewItem&,const QRect&,Qt::CheckState) const;
    void sipProtectVirt_drawDecoration(bool,QPainter*,const QStyleOptionViewItem&,const QRect&,const QPixmap&) const;
    void sipProtectVirt_drawDisplay(bool,QPainter*,const QStyleOptionViewItem&,const QRect&,const QString&) const;
    void sipProtectVirt_drawFocus(bool,QPainter*,const QStyleOptionViewItem&,const QRect&) const;
    bool sipProtectVirt_eventFilter(bool,QObject*,QEvent*);
    bool sipProtectVirt_editorEvent(bool,QEvent*,QAbstractItemModel*,const QStyleOptionViewItem&,const QModelIndex&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool event(QEvent*);
    bool helpEvent(QHelpEvent*,QAbstractItemView*,const QStyleOptionViewItem&,const QModelIndex&);
    void destroyEditor(QWidget*,const QModelIndex&) const;
    bool editorEvent(QEvent*,QAbstractItemModel*,const QStyleOptionViewItem&,const QModelIndex&);
    bool eventFilter(QObject*,QEvent*);
    void drawFocus(QPainter*,const QStyleOptionViewItem&,const QRect&) const;
    void drawDisplay(QPainter*,const QStyleOptionViewItem&,const QRect&,const QString&) const;
    void drawDecoration(QPainter*,const QStyleOptionViewItem&,const QRect&,const QPixmap&) const;
    void drawCheck(QPainter*,const QStyleOptionViewItem&,const QRect&,Qt::CheckState) const;
    void updateEditorGeometry(QWidget*,const QStyleOptionViewItem&,const QModelIndex&) const;
    void setEditorData(QWidget*,const QModelIndex&) const;
    QSize sizeHint(const QStyleOptionViewItem&,const QModelIndex&) const;
    void paint(QPainter*,const QStyleOptionViewItem&,const QModelIndex&) const;
    void setModelData(QWidget*,QAbstractItemModel*,const QModelIndex&) const;
    QWidget* createEditor(QWidget*,const QStyleOptionViewItem&,const QModelIndex&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSqlRelationalDelegate(const sipQSqlRelationalDelegate &);
    sipQSqlRelationalDelegate &operator = (const sipQSqlRelationalDelegate &);

    char sipPyMethods[20];
};

sipQSqlRelationalDelegate::sipQSqlRelationalDelegate(QObject*a0): QSqlRelationalDelegate(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSqlRelationalDelegate::~sipQSqlRelationalDelegate()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSqlRelationalDelegate::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtSql_qt_metaobject(sipPySelf,sipType_QSqlRelationalDelegate);
}

int sipQSqlRelationalDelegate::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSqlRelationalDelegate::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtSql_qt_metacall(sipPySelf,sipType_QSqlRelationalDelegate,_c,_id,_a);

    return _id;
}

void *sipQSqlRelationalDelegate::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtSql_qt_metacast(sipPySelf, sipType_QSqlRelationalDelegate, _clname, &sipCpp) ? sipCpp : QSqlRelationalDelegate::qt_metacast(_clname));
}

void sipQSqlRelationalDelegate::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtSql_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlRelationalDelegate::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtSql_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlRelationalDelegate::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtSql_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlRelationalDelegate::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtSql_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlRelationalDelegate::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtSql_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSqlRelationalDelegate::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSqlRelationalDelegate::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtSql_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSqlRelationalDelegate::helpEvent(QHelpEvent*a0,QAbstractItemView*a1,const QStyleOptionViewItem& a2,const QModelIndex& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_helpEvent);

    if (!sipMeth)
        return QSqlRelationalDelegate::helpEvent(a0,a1,a2,a3);

    typedef bool (*sipVH_QtWidgets_148)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QHelpEvent*,QAbstractItemView*,const QStyleOptionViewItem&,const QModelIndex&);

    return ((sipVH_QtWidgets_148)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[148]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQSqlRelationalDelegate::destroyEditor(QWidget*a0,const QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_destroyEditor);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::destroyEditor(a0,a1);
        return;
    }

    typedef void (*sipVH_QtWidgets_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,const QModelIndex&);

    ((sipVH_QtWidgets_53)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[53]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQSqlRelationalDelegate::editorEvent(QEvent*a0,QAbstractItemModel*a1,const QStyleOptionViewItem& a2,const QModelIndex& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_editorEvent);

    if (!sipMeth)
        return QSqlRelationalDelegate::editorEvent(a0,a1,a2,a3);

    typedef bool (*sipVH_QtWidgets_48)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*,QAbstractItemModel*,const QStyleOptionViewItem&,const QModelIndex&);

    return ((sipVH_QtWidgets_48)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[48]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

bool sipQSqlRelationalDelegate::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSqlRelationalDelegate::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtSql_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQSqlRelationalDelegate::drawFocus(QPainter*a0,const QStyleOptionViewItem& a1,const QRect& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_drawFocus);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::drawFocus(a0,a1,a2);
        return;
    }

    typedef void (*sipVH_QtWidgets_99)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QRect&);

    ((sipVH_QtWidgets_99)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[99]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQSqlRelationalDelegate::drawDisplay(QPainter*a0,const QStyleOptionViewItem& a1,const QRect& a2,const QString& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_drawDisplay);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::drawDisplay(a0,a1,a2,a3);
        return;
    }

    typedef void (*sipVH_QtWidgets_100)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QRect&,const QString&);

    ((sipVH_QtWidgets_100)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[100]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQSqlRelationalDelegate::drawDecoration(QPainter*a0,const QStyleOptionViewItem& a1,const QRect& a2,const QPixmap& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_drawDecoration);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::drawDecoration(a0,a1,a2,a3);
        return;
    }

    typedef void (*sipVH_QtWidgets_101)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QRect&,const QPixmap&);

    ((sipVH_QtWidgets_101)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[101]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQSqlRelationalDelegate::drawCheck(QPainter*a0,const QStyleOptionViewItem& a1,const QRect& a2,Qt::CheckState a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_drawCheck);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::drawCheck(a0,a1,a2,a3);
        return;
    }

    typedef void (*sipVH_QtWidgets_102)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QRect&,Qt::CheckState);

    ((sipVH_QtWidgets_102)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[102]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQSqlRelationalDelegate::updateEditorGeometry(QWidget*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_updateEditorGeometry);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::updateEditorGeometry(a0,a1,a2);
        return;
    }

    typedef void (*sipVH_QtWidgets_51)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,const QStyleOptionViewItem&,const QModelIndex&);

    ((sipVH_QtWidgets_51)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[51]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQSqlRelationalDelegate::setEditorData(QWidget*a0,const QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_setEditorData);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::setEditorData(a0,a1);
        return;
    }

    typedef void (*sipVH_QtWidgets_53)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,const QModelIndex&);

    ((sipVH_QtWidgets_53)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[53]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QSize sipQSqlRelationalDelegate::sizeHint(const QStyleOptionViewItem& a0,const QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_sizeHint);

    if (!sipMeth)
        return QSqlRelationalDelegate::sizeHint(a0,a1);

    typedef QSize (*sipVH_QtWidgets_55)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QStyleOptionViewItem&,const QModelIndex&);

    return ((sipVH_QtWidgets_55)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[55]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQSqlRelationalDelegate::paint(QPainter*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_paint);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::paint(a0,a1,a2);
        return;
    }

    typedef void (*sipVH_QtWidgets_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QPainter*,const QStyleOptionViewItem&,const QModelIndex&);

    ((sipVH_QtWidgets_26)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

void sipQSqlRelationalDelegate::setModelData(QWidget*a0,QAbstractItemModel*a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_setModelData);

    if (!sipMeth)
    {
        QSqlRelationalDelegate::setModelData(a0,a1,a2);
        return;
    }

    typedef void (*sipVH_QtWidgets_52)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,QAbstractItemModel*,const QModelIndex&);

    ((sipVH_QtWidgets_52)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[52]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QWidget* sipQSqlRelationalDelegate::createEditor(QWidget*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_createEditor);

    if (!sipMeth)
        return QSqlRelationalDelegate::createEditor(a0,a1,a2);

    typedef QWidget* (*sipVH_QtWidgets_54)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWidget*,const QStyleOptionViewItem&,const QModelIndex&);

    return ((sipVH_QtWidgets_54)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[54]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QObject* sipQSqlRelationalDelegate::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQSqlRelationalDelegate::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQSqlRelationalDelegate::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQSqlRelationalDelegate::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQSqlRelationalDelegate::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQSqlRelationalDelegate::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQSqlRelationalDelegate::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQSqlRelationalDelegate::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQSqlRelationalDelegate::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQSqlRelationalDelegate::sipProtect_drawBackground(QPainter*a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    QItemDelegate::drawBackground(a0,a1,a2);
}

void sipQSqlRelationalDelegate::sipProtectVirt_drawCheck(bool sipSelfWasArg,QPainter*a0,const QStyleOptionViewItem& a1,const QRect& a2,Qt::CheckState a3) const
{
    (sipSelfWasArg ? QItemDelegate::drawCheck(a0,a1,a2,a3) : drawCheck(a0,a1,a2,a3));
}

void sipQSqlRelationalDelegate::sipProtectVirt_drawDecoration(bool sipSelfWasArg,QPainter*a0,const QStyleOptionViewItem& a1,const QRect& a2,const QPixmap& a3) const
{
    (sipSelfWasArg ? QItemDelegate::drawDecoration(a0,a1,a2,a3) : drawDecoration(a0,a1,a2,a3));
}

void sipQSqlRelationalDelegate::sipProtectVirt_drawDisplay(bool sipSelfWasArg,QPainter*a0,const QStyleOptionViewItem& a1,const QRect& a2,const QString& a3) const
{
    (sipSelfWasArg ? QItemDelegate::drawDisplay(a0,a1,a2,a3) : drawDisplay(a0,a1,a2,a3));
}

void sipQSqlRelationalDelegate::sipProtectVirt_drawFocus(bool sipSelfWasArg,QPainter*a0,const QStyleOptionViewItem& a1,const QRect& a2) const
{
    (sipSelfWasArg ? QItemDelegate::drawFocus(a0,a1,a2) : drawFocus(a0,a1,a2));
}

bool sipQSqlRelationalDelegate::sipProtectVirt_eventFilter(bool sipSelfWasArg,QObject*a0,QEvent*a1)
{
    return (sipSelfWasArg ? QItemDelegate::eventFilter(a0,a1) : eventFilter(a0,a1));
}

bool sipQSqlRelationalDelegate::sipProtectVirt_editorEvent(bool sipSelfWasArg,QEvent*a0,QAbstractItemModel*a1,const QStyleOptionViewItem& a2,const QModelIndex& a3)
{
    return (sipSelfWasArg ? QItemDelegate::editorEvent(a0,a1,a2,a3) : editorEvent(a0,a1,a2,a3));
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_sender, "QSqlRelationalDelegate.sender() -> QObject");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 679 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_sender, doc_QSqlRelationalDelegate_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_receivers, "QSqlRelationalDelegate.receivers(signal) -> int");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 738 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlRelationalDelegate.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_receivers, doc_QSqlRelationalDelegate_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_timerEvent, "QSqlRelationalDelegate.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_timerEvent, doc_QSqlRelationalDelegate_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_childEvent, "QSqlRelationalDelegate.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_childEvent, doc_QSqlRelationalDelegate_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_customEvent, "QSqlRelationalDelegate.customEvent(QEvent)");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_customEvent, doc_QSqlRelationalDelegate_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_connectNotify, "QSqlRelationalDelegate.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_connectNotify, doc_QSqlRelationalDelegate_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_disconnectNotify, "QSqlRelationalDelegate.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_disconnectNotify, doc_QSqlRelationalDelegate_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_senderSignalIndex, "QSqlRelationalDelegate.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_senderSignalIndex, doc_QSqlRelationalDelegate_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_isSignalConnected, "QSqlRelationalDelegate.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_isSignalConnected, doc_QSqlRelationalDelegate_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_drawBackground, "QSqlRelationalDelegate.drawBackground(QPainter, QStyleOptionViewItem, QModelIndex)");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_drawBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_drawBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QModelIndex* a2;
        const sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9J9", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QModelIndex, &a2))
        {
            sipCpp->sipProtect_drawBackground(a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_drawBackground, doc_QSqlRelationalDelegate_drawBackground);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_drawCheck, "QSqlRelationalDelegate.drawCheck(QPainter, QStyleOptionViewItem, QRect, Qt.CheckState)");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_drawCheck(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_drawCheck(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QRect* a2;
        Qt::CheckState a3;
        const sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9J9E", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QRect, &a2, sipType_Qt_CheckState, &a3))
        {
            sipCpp->sipProtectVirt_drawCheck(sipSelfWasArg,a0,*a1,*a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_drawCheck, doc_QSqlRelationalDelegate_drawCheck);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_drawDecoration, "QSqlRelationalDelegate.drawDecoration(QPainter, QStyleOptionViewItem, QRect, QPixmap)");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_drawDecoration(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_drawDecoration(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QRect* a2;
        const QPixmap* a3;
        const sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9J9J9", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QRect, &a2, sipType_QPixmap, &a3))
        {
            sipCpp->sipProtectVirt_drawDecoration(sipSelfWasArg,a0,*a1,*a2,*a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_drawDecoration, doc_QSqlRelationalDelegate_drawDecoration);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_drawDisplay, "QSqlRelationalDelegate.drawDisplay(QPainter, QStyleOptionViewItem, QRect, str)");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_drawDisplay(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_drawDisplay(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QRect* a2;
        const QString* a3;
        int a3State = 0;
        const sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9J9J1", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QRect, &a2, sipType_QString,&a3, &a3State))
        {
            sipCpp->sipProtectVirt_drawDisplay(sipSelfWasArg,a0,*a1,*a2,*a3);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_drawDisplay, doc_QSqlRelationalDelegate_drawDisplay);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_drawFocus, "QSqlRelationalDelegate.drawFocus(QPainter, QStyleOptionViewItem, QRect)");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_drawFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_drawFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter* a0;
        const QStyleOptionViewItem* a1;
        const QRect* a2;
        const sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J9J9", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QPainter, &a0, sipType_QStyleOptionViewItem, &a1, sipType_QRect, &a2))
        {
            sipCpp->sipProtectVirt_drawFocus(sipSelfWasArg,a0,*a1,*a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_drawFocus, doc_QSqlRelationalDelegate_drawFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_eventFilter, "QSqlRelationalDelegate.eventFilter(QObject, QEvent) -> bool");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_eventFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_eventFilter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject* a0;
        QEvent* a1;
        sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QObject, &a0, sipType_QEvent, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_eventFilter, doc_QSqlRelationalDelegate_eventFilter);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_editorEvent, "QSqlRelationalDelegate.editorEvent(QEvent, QAbstractItemModel, QStyleOptionViewItem, QModelIndex) -> bool");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_editorEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_editorEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QAbstractItemModel* a1;
        const QStyleOptionViewItem* a2;
        const QModelIndex* a3;
        sipQSqlRelationalDelegate *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8J8J9J9", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QEvent, &a0, sipType_QAbstractItemModel, &a1, sipType_QStyleOptionViewItem, &a2, sipType_QModelIndex, &a3))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_editorEvent(sipSelfWasArg,a0,a1,*a2,*a3);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_editorEvent, doc_QSqlRelationalDelegate_editorEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_createEditor, "QSqlRelationalDelegate.createEditor(QWidget, QStyleOptionViewItem, QModelIndex) -> QWidget");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_createEditor(PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_createEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        const QStyleOptionViewItem* a1;
        const QModelIndex* a2;
        sipWrapper *sipOwner = 0;
        const QSqlRelationalDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJHJ9J9", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QWidget, &a0, &sipOwner, sipType_QStyleOptionViewItem, &a1, sipType_QModelIndex, &a2))
        {
            QWidget*sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSqlRelationalDelegate::createEditor(a0,*a1,*a2) : sipCpp->createEditor(a0,*a1,*a2));

            return sipConvertFromNewType(sipRes,sipType_QWidget,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_createEditor, doc_QSqlRelationalDelegate_createEditor);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlRelationalDelegate_setModelData, "QSqlRelationalDelegate.setModelData(QWidget, QAbstractItemModel, QModelIndex)");

extern "C" {static PyObject *meth_QSqlRelationalDelegate_setModelData(PyObject *, PyObject *);}
static PyObject *meth_QSqlRelationalDelegate_setModelData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget* a0;
        QAbstractItemModel* a1;
        PyObject *a1Keep;
        const QModelIndex* a2;
        const QSqlRelationalDelegate *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8@J8J9", &sipSelf, sipType_QSqlRelationalDelegate, &sipCpp, sipType_QWidget, &a0, &a1Keep, sipType_QAbstractItemModel, &a1, sipType_QModelIndex, &a2))
        {
            (sipSelfWasArg ? sipCpp->QSqlRelationalDelegate::setModelData(a0,a1,*a2) : sipCpp->setModelData(a0,a1,*a2));

            sipKeepReference(sipSelf, -2, a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlRelationalDelegate, sipName_setModelData, doc_QSqlRelationalDelegate_setModelData);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSqlRelationalDelegate(void *, const sipTypeDef *);}
static void *cast_QSqlRelationalDelegate(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSqlRelationalDelegate)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QItemDelegate)->ctd_cast((QItemDelegate *)(QSqlRelationalDelegate *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlRelationalDelegate(void *, int);}
static void release_QSqlRelationalDelegate(void *sipCppV,int)
{
    QSqlRelationalDelegate *sipCpp = reinterpret_cast<QSqlRelationalDelegate *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSqlRelationalDelegate(sipSimpleWrapper *);}
static void dealloc_QSqlRelationalDelegate(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSqlRelationalDelegate *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSqlRelationalDelegate(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSqlRelationalDelegate(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSqlRelationalDelegate(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSqlRelationalDelegate *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSqlRelationalDelegate(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSqlRelationalDelegate[] = {{177, 2, 1}};


static PyMethodDef methods_QSqlRelationalDelegate[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QSqlRelationalDelegate_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QSqlRelationalDelegate_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createEditor), meth_QSqlRelationalDelegate_createEditor, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlRelationalDelegate_createEditor)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QSqlRelationalDelegate_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QSqlRelationalDelegate_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawBackground), (PyCFunction)meth_QSqlRelationalDelegate_drawBackground, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawCheck), (PyCFunction)meth_QSqlRelationalDelegate_drawCheck, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawDecoration), (PyCFunction)meth_QSqlRelationalDelegate_drawDecoration, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawDisplay), (PyCFunction)meth_QSqlRelationalDelegate_drawDisplay, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_drawFocus), (PyCFunction)meth_QSqlRelationalDelegate_drawFocus, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_editorEvent), (PyCFunction)meth_QSqlRelationalDelegate_editorEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_eventFilter), (PyCFunction)meth_QSqlRelationalDelegate_eventFilter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QSqlRelationalDelegate_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QSqlRelationalDelegate_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QSqlRelationalDelegate_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QSqlRelationalDelegate_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setModelData), meth_QSqlRelationalDelegate_setModelData, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlRelationalDelegate_setModelData)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QSqlRelationalDelegate_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

PyDoc_STRVAR(doc_QSqlRelationalDelegate, "\1QSqlRelationalDelegate(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtSql_QSqlRelationalDelegate = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSqlRelationalDelegate,
        {0}
    },
    {
        sipNameNr_QSqlRelationalDelegate,
        {0, 0, 1},
        18, methods_QSqlRelationalDelegate,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSqlRelationalDelegate,
    -1,
    -1,
    supers_QSqlRelationalDelegate,
    0,
    init_type_QSqlRelationalDelegate,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSqlRelationalDelegate,
    0,
    0,
    0,
    release_QSqlRelationalDelegate,
    cast_QSqlRelationalDelegate,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSqlRelationalDelegate::staticMetaObject,
    0,
    0,
    0
};
