/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:51 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqldriver.sip"
#include <qsqldriver.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsql.sip"
#include <qsql.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlerror.sip"
#include <qsqlerror.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlresult.sip"
#include <qsqlresult.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlfield.sip"
#include <qsqlfield.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlindex.sip"
#include <qsqlindex.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"


class sipQSqlDriver : public QSqlDriver
{
public:
    sipQSqlDriver(QObject*);
    virtual ~sipQSqlDriver();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    void sipProtectVirt_setOpen(bool,bool);
    void sipProtectVirt_setOpenError(bool,bool);
    void sipProtectVirt_setLastError(bool,const QSqlError&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    QString stripDelimiters(const QString&,QSqlDriver::IdentifierType) const;
    bool isIdentifierEscaped(const QString&,QSqlDriver::IdentifierType) const;
    QStringList subscribedToNotifications() const;
    bool unsubscribeFromNotification(const QString&);
    bool subscribeToNotification(const QString&);
    void setLastError(const QSqlError&);
    void setOpenError(bool);
    void setOpen(bool);
    bool open(const QString&,const QString&,const QString&,const QString&,int,const QString&);
    QSqlResult* createResult() const;
    void close();
    bool hasFeature(QSqlDriver::DriverFeature) const;
    QVariant handle() const;
    QString sqlStatement(QSqlDriver::StatementType,const QString&,const QSqlRecord&,bool) const;
    QString escapeIdentifier(const QString&,QSqlDriver::IdentifierType) const;
    QString formatValue(const QSqlField&,bool) const;
    QSqlRecord record(const QString&) const;
    QSqlIndex primaryIndex(const QString&) const;
    QStringList tables(QSql::TableType) const;
    bool rollbackTransaction();
    bool commitTransaction();
    bool beginTransaction();
    bool isOpen() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSqlDriver(const sipQSqlDriver &);
    sipQSqlDriver &operator = (const sipQSqlDriver &);

    char sipPyMethods[30];
};

sipQSqlDriver::sipQSqlDriver(QObject*a0): QSqlDriver(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSqlDriver::~sipQSqlDriver()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSqlDriver::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtSql_qt_metaobject(sipPySelf,sipType_QSqlDriver);
}

int sipQSqlDriver::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSqlDriver::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtSql_qt_metacall(sipPySelf,sipType_QSqlDriver,_c,_id,_a);

    return _id;
}

void *sipQSqlDriver::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtSql_qt_metacast(sipPySelf, sipType_QSqlDriver, _clname, &sipCpp) ? sipCpp : QSqlDriver::qt_metacast(_clname));
}

void sipQSqlDriver::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QSqlDriver::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtSql_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QSqlDriver::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtSql_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QSqlDriver::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtSql_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QSqlDriver::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtSql_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QSqlDriver::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtSql_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSqlDriver::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QSqlDriver::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtSql_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQSqlDriver::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QSqlDriver::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtSql_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QString sipQSqlDriver::stripDelimiters(const QString& a0,QSqlDriver::IdentifierType a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_stripDelimiters);

    if (!sipMeth)
        return QSqlDriver::stripDelimiters(a0,a1);

    extern QString sipVH_QtSql_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,QSqlDriver::IdentifierType);

    return sipVH_QtSql_10(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQSqlDriver::isIdentifierEscaped(const QString& a0,QSqlDriver::IdentifierType a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_isIdentifierEscaped);

    if (!sipMeth)
        return QSqlDriver::isIdentifierEscaped(a0,a1);

    extern bool sipVH_QtSql_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,QSqlDriver::IdentifierType);

    return sipVH_QtSql_11(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QStringList sipQSqlDriver::subscribedToNotifications() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_subscribedToNotifications);

    if (!sipMeth)
        return QSqlDriver::subscribedToNotifications();

    typedef QStringList (*sipVH_QtCore_27)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_27)(sipModuleAPI_QtSql_QtCore->em_virthandlers[27]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSqlDriver::unsubscribeFromNotification(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_unsubscribeFromNotification);

    if (!sipMeth)
        return QSqlDriver::unsubscribeFromNotification(a0);

    typedef bool (*sipVH_QtCore_49)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return ((sipVH_QtCore_49)(sipModuleAPI_QtSql_QtCore->em_virthandlers[49]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSqlDriver::subscribeToNotification(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_subscribeToNotification);

    if (!sipMeth)
        return QSqlDriver::subscribeToNotification(a0);

    typedef bool (*sipVH_QtCore_49)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return ((sipVH_QtCore_49)(sipModuleAPI_QtSql_QtCore->em_virthandlers[49]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::setLastError(const QSqlError& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_setLastError);

    if (!sipMeth)
    {
        QSqlDriver::setLastError(a0);
        return;
    }

    extern void sipVH_QtSql_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QSqlError&);

    sipVH_QtSql_7(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::setOpenError(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_setOpenError);

    if (!sipMeth)
    {
        QSqlDriver::setOpenError(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtWidgets_0)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQSqlDriver::setOpen(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_setOpen);

    if (!sipMeth)
    {
        QSqlDriver::setOpen(a0);
        return;
    }

    typedef void (*sipVH_QtWidgets_0)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    ((sipVH_QtWidgets_0)(sipModuleAPI_QtSql_QtWidgets->em_virthandlers[0]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSqlDriver::open(const QString& a0,const QString& a1,const QString& a2,const QString& a3,int a4,const QString& a5)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,sipName_QSqlDriver,sipName_open);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtSql_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,const QString&,const QString&,const QString&,int,const QString&);

    return sipVH_QtSql_12(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3, a4, a5);
}

QSqlResult* sipQSqlDriver::createResult() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,sipName_QSqlDriver,sipName_createResult);

    if (!sipMeth)
        return 0;

    extern QSqlResult* sipVH_QtSql_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_13(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQSqlDriver::close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,sipName_QSqlDriver,sipName_close);

    if (!sipMeth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtSql_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSqlDriver::hasFeature(QSqlDriver::DriverFeature a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,sipName_QSqlDriver,sipName_hasFeature);

    if (!sipMeth)
        return 0;

    extern bool sipVH_QtSql_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSqlDriver::DriverFeature);

    return sipVH_QtSql_14(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QVariant sipQSqlDriver::handle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_handle);

    if (!sipMeth)
        return QSqlDriver::handle();

    extern QVariant sipVH_QtSql_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtSql_3(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QString sipQSqlDriver::sqlStatement(QSqlDriver::StatementType a0,const QString& a1,const QSqlRecord& a2,bool a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_sqlStatement);

    if (!sipMeth)
        return QSqlDriver::sqlStatement(a0,a1,a2,a3);

    extern QString sipVH_QtSql_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSqlDriver::StatementType,const QString&,const QSqlRecord&,bool);

    return sipVH_QtSql_15(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

QString sipQSqlDriver::escapeIdentifier(const QString& a0,QSqlDriver::IdentifierType a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_escapeIdentifier);

    if (!sipMeth)
        return QSqlDriver::escapeIdentifier(a0,a1);

    extern QString sipVH_QtSql_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,QSqlDriver::IdentifierType);

    return sipVH_QtSql_10(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QString sipQSqlDriver::formatValue(const QSqlField& a0,bool a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_formatValue);

    if (!sipMeth)
        return QSqlDriver::formatValue(a0,a1);

    extern QString sipVH_QtSql_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QSqlField&,bool);

    return sipVH_QtSql_16(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QSqlRecord sipQSqlDriver::record(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_record);

    if (!sipMeth)
        return QSqlDriver::record(a0);

    extern QSqlRecord sipVH_QtSql_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtSql_17(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QSqlIndex sipQSqlDriver::primaryIndex(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_primaryIndex);

    if (!sipMeth)
        return QSqlDriver::primaryIndex(a0);

    extern QSqlIndex sipVH_QtSql_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&);

    return sipVH_QtSql_18(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QStringList sipQSqlDriver::tables(QSql::TableType a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_tables);

    if (!sipMeth)
        return QSqlDriver::tables(a0);

    extern QStringList sipVH_QtSql_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QSql::TableType);

    return sipVH_QtSql_19(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQSqlDriver::rollbackTransaction()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_rollbackTransaction);

    if (!sipMeth)
        return QSqlDriver::rollbackTransaction();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSqlDriver::commitTransaction()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_commitTransaction);

    if (!sipMeth)
        return QSqlDriver::commitTransaction();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSqlDriver::beginTransaction()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_beginTransaction);

    if (!sipMeth)
        return QSqlDriver::beginTransaction();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

bool sipQSqlDriver::isOpen() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_isOpen);

    if (!sipMeth)
        return QSqlDriver::isOpen();

    typedef bool (*sipVH_QtCore_7)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtSql_QtCore->em_virthandlers[7]))(sipGILState, sipModuleAPI_QtSql_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQSqlDriver::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQSqlDriver::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQSqlDriver::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQSqlDriver::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQSqlDriver::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQSqlDriver::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQSqlDriver::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQSqlDriver::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQSqlDriver::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

void sipQSqlDriver::sipProtectVirt_setOpen(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QSqlDriver::setOpen(a0) : setOpen(a0));
}

void sipQSqlDriver::sipProtectVirt_setOpenError(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QSqlDriver::setOpenError(a0) : setOpenError(a0));
}

void sipQSqlDriver::sipProtectVirt_setLastError(bool sipSelfWasArg,const QSqlError& a0)
{
    (sipSelfWasArg ? QSqlDriver::setLastError(a0) : setLastError(a0));
}


PyDoc_STRVAR(doc_QSqlDriver_sender, "QSqlDriver.sender() -> QObject");

extern "C" {static PyObject *meth_QSqlDriver_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSqlDriver *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 782 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_sender, doc_QSqlDriver_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_receivers, "QSqlDriver.receivers(signal) -> int");

extern "C" {static PyObject *meth_QSqlDriver_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQSqlDriver *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QSqlDriver, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 841 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlDriver.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_receivers, doc_QSqlDriver_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_timerEvent, "QSqlDriver.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QSqlDriver_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQSqlDriver *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_timerEvent, doc_QSqlDriver_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_childEvent, "QSqlDriver.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QSqlDriver_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQSqlDriver *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_childEvent, doc_QSqlDriver_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_customEvent, "QSqlDriver.customEvent(QEvent)");

extern "C" {static PyObject *meth_QSqlDriver_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQSqlDriver *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_customEvent, doc_QSqlDriver_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_connectNotify, "QSqlDriver.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QSqlDriver_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQSqlDriver *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_connectNotify, doc_QSqlDriver_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_disconnectNotify, "QSqlDriver.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QSqlDriver_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQSqlDriver *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_disconnectNotify, doc_QSqlDriver_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_senderSignalIndex, "QSqlDriver.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QSqlDriver_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQSqlDriver *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_senderSignalIndex, doc_QSqlDriver_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_isSignalConnected, "QSqlDriver.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQSqlDriver *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_isSignalConnected, doc_QSqlDriver_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_isOpen, "QSqlDriver.isOpen() -> bool");

extern "C" {static PyObject *meth_QSqlDriver_isOpen(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_isOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::isOpen() : sipCpp->isOpen());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_isOpen, doc_QSqlDriver_isOpen);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_isOpenError, "QSqlDriver.isOpenError() -> bool");

extern "C" {static PyObject *meth_QSqlDriver_isOpenError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_isOpenError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isOpenError();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_isOpenError, doc_QSqlDriver_isOpenError);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_beginTransaction, "QSqlDriver.beginTransaction() -> bool");

extern "C" {static PyObject *meth_QSqlDriver_beginTransaction(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_beginTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::beginTransaction() : sipCpp->beginTransaction());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_beginTransaction, doc_QSqlDriver_beginTransaction);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_commitTransaction, "QSqlDriver.commitTransaction() -> bool");

extern "C" {static PyObject *meth_QSqlDriver_commitTransaction(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_commitTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::commitTransaction() : sipCpp->commitTransaction());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_commitTransaction, doc_QSqlDriver_commitTransaction);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_rollbackTransaction, "QSqlDriver.rollbackTransaction() -> bool");

extern "C" {static PyObject *meth_QSqlDriver_rollbackTransaction(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_rollbackTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::rollbackTransaction() : sipCpp->rollbackTransaction());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_rollbackTransaction, doc_QSqlDriver_rollbackTransaction);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_tables, "QSqlDriver.tables(QSql.TableType) -> list-of-str");

extern "C" {static PyObject *meth_QSqlDriver_tables(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_tables(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSql::TableType a0;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSql_TableType, &a0))
        {
            QStringList*sipRes;

            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QSqlDriver::tables(a0) : sipCpp->tables(a0)));

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_tables, doc_QSqlDriver_tables);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_primaryIndex, "QSqlDriver.primaryIndex(str) -> QSqlIndex");

extern "C" {static PyObject *meth_QSqlDriver_primaryIndex(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_primaryIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QSqlIndex*sipRes;

            sipRes = new QSqlIndex((sipSelfWasArg ? sipCpp->QSqlDriver::primaryIndex(*a0) : sipCpp->primaryIndex(*a0)));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSqlIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_primaryIndex, doc_QSqlDriver_primaryIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_record, "QSqlDriver.record(str) -> QSqlRecord");

extern "C" {static PyObject *meth_QSqlDriver_record(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_record(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QSqlRecord*sipRes;

            sipRes = new QSqlRecord((sipSelfWasArg ? sipCpp->QSqlDriver::record(*a0) : sipCpp->record(*a0)));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSqlRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_record, doc_QSqlDriver_record);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_formatValue, "QSqlDriver.formatValue(QSqlField, bool trimStrings=False) -> str");

extern "C" {static PyObject *meth_QSqlDriver_formatValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_formatValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlField* a0;
        bool a1 = 0;
        const QSqlDriver *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_trimStrings,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|b", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSqlField, &a0, &a1))
        {
            QString*sipRes;

            sipRes = new QString((sipSelfWasArg ? sipCpp->QSqlDriver::formatValue(*a0,a1) : sipCpp->formatValue(*a0,a1)));

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_formatValue, doc_QSqlDriver_formatValue);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_escapeIdentifier, "QSqlDriver.escapeIdentifier(str, QSqlDriver.IdentifierType) -> str");

extern "C" {static PyObject *meth_QSqlDriver_escapeIdentifier(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_escapeIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver::IdentifierType a1;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSqlDriver_IdentifierType, &a1))
        {
            QString*sipRes;

            sipRes = new QString((sipSelfWasArg ? sipCpp->QSqlDriver::escapeIdentifier(*a0,a1) : sipCpp->escapeIdentifier(*a0,a1)));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_escapeIdentifier, doc_QSqlDriver_escapeIdentifier);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_sqlStatement, "QSqlDriver.sqlStatement(QSqlDriver.StatementType, str, QSqlRecord, bool) -> str");

extern "C" {static PyObject *meth_QSqlDriver_sqlStatement(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_sqlStatement(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver::StatementType a0;
        const QString* a1;
        int a1State = 0;
        const QSqlRecord* a2;
        bool a3;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BEJ1J9b", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSqlDriver_StatementType, &a0, sipType_QString,&a1, &a1State, sipType_QSqlRecord, &a2, &a3))
        {
            QString*sipRes;

            sipRes = new QString((sipSelfWasArg ? sipCpp->QSqlDriver::sqlStatement(a0,*a1,*a2,a3) : sipCpp->sqlStatement(a0,*a1,*a2,a3)));
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_sqlStatement, doc_QSqlDriver_sqlStatement);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_lastError, "QSqlDriver.lastError() -> QSqlError");

extern "C" {static PyObject *meth_QSqlDriver_lastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            QSqlError*sipRes;

            sipRes = new QSqlError(sipCpp->lastError());

            return sipConvertFromNewType(sipRes,sipType_QSqlError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_lastError, doc_QSqlDriver_lastError);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_handle, "QSqlDriver.handle() -> QVariant");

extern "C" {static PyObject *meth_QSqlDriver_handle(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            QVariant*sipRes;

            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QSqlDriver::handle() : sipCpp->handle()));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_handle, doc_QSqlDriver_handle);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_hasFeature, "QSqlDriver.hasFeature(QSqlDriver.DriverFeature) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_hasFeature(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_hasFeature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSqlDriver::DriverFeature a0;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSqlDriver_DriverFeature, &a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_hasFeature);
                return NULL;
            }

            sipRes = sipCpp->hasFeature(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_hasFeature, doc_QSqlDriver_hasFeature);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_close, "QSqlDriver.close()");

extern "C" {static PyObject *meth_QSqlDriver_close(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_close);
                return NULL;
            }

            sipCpp->close();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_close, doc_QSqlDriver_close);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_createResult, "QSqlDriver.createResult() -> QSqlResult");

extern "C" {static PyObject *meth_QSqlDriver_createResult(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_createResult(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            QSqlResult*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_createResult);
                return NULL;
            }

            sipRes = sipCpp->createResult();

            return sipConvertFromNewType(sipRes,sipType_QSqlResult,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_createResult, doc_QSqlDriver_createResult);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_open, "QSqlDriver.open(str, str user='', str password='', str host='', int port=-1, str options='') -> bool");

extern "C" {static PyObject *meth_QSqlDriver_open(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_open(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        const QString& a3def = QString();
        const QString* a3 = &a3def;
        int a3State = 0;
        int a4 = -1;
        const QString& a5def = QString();
        const QString* a5 = &a5def;
        int a5State = 0;
        QSqlDriver *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_user,
            sipName_password,
            sipName_host,
            sipName_port,
            sipName_options,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J1J1iJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, &a4, sipType_QString,&a5, &a5State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_open);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->open(*a0,*a1,*a2,*a3,a4,*a5);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_open, doc_QSqlDriver_open);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_setOpen, "QSqlDriver.setOpen(bool)");

extern "C" {static PyObject *meth_QSqlDriver_setOpen(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setOpen(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQSqlDriver *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QSqlDriver, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_setOpen(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_setOpen, doc_QSqlDriver_setOpen);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_setOpenError, "QSqlDriver.setOpenError(bool)");

extern "C" {static PyObject *meth_QSqlDriver_setOpenError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setOpenError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQSqlDriver *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "Bb", &sipSelf, sipType_QSqlDriver, &sipCpp, &a0))
        {
            sipCpp->sipProtectVirt_setOpenError(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_setOpenError, doc_QSqlDriver_setOpenError);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_setLastError, "QSqlDriver.setLastError(QSqlError)");

extern "C" {static PyObject *meth_QSqlDriver_setLastError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setLastError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlError* a0;
        sipQSqlDriver *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSqlError, &a0))
        {
            sipCpp->sipProtectVirt_setLastError(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_setLastError, doc_QSqlDriver_setLastError);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_subscribeToNotification, "QSqlDriver.subscribeToNotification(str) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_subscribeToNotification(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_subscribeToNotification(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::subscribeToNotification(*a0) : sipCpp->subscribeToNotification(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_subscribeToNotification, doc_QSqlDriver_subscribeToNotification);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_unsubscribeFromNotification, "QSqlDriver.unsubscribeFromNotification(str) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_unsubscribeFromNotification(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_unsubscribeFromNotification(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::unsubscribeFromNotification(*a0) : sipCpp->unsubscribeFromNotification(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_unsubscribeFromNotification, doc_QSqlDriver_unsubscribeFromNotification);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_subscribedToNotifications, "QSqlDriver.subscribedToNotifications() -> list-of-str");

extern "C" {static PyObject *meth_QSqlDriver_subscribedToNotifications(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_subscribedToNotifications(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QSqlDriver::subscribedToNotifications() : sipCpp->subscribedToNotifications()));

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_subscribedToNotifications, doc_QSqlDriver_subscribedToNotifications);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_isIdentifierEscaped, "QSqlDriver.isIdentifierEscaped(str, QSqlDriver.IdentifierType) -> bool");

extern "C" {static PyObject *meth_QSqlDriver_isIdentifierEscaped(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_isIdentifierEscaped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver::IdentifierType a1;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSqlDriver_IdentifierType, &a1))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::isIdentifierEscaped(*a0,a1) : sipCpp->isIdentifierEscaped(*a0,a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_isIdentifierEscaped, doc_QSqlDriver_isIdentifierEscaped);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_stripDelimiters, "QSqlDriver.stripDelimiters(str, QSqlDriver.IdentifierType) -> str");

extern "C" {static PyObject *meth_QSqlDriver_stripDelimiters(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_stripDelimiters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString* a0;
        int a0State = 0;
        QSqlDriver::IdentifierType a1;
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QString,&a0, &a0State, sipType_QSqlDriver_IdentifierType, &a1))
        {
            QString*sipRes;

            sipRes = new QString((sipSelfWasArg ? sipCpp->QSqlDriver::stripDelimiters(*a0,a1) : sipCpp->stripDelimiters(*a0,a1)));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_stripDelimiters, doc_QSqlDriver_stripDelimiters);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_setNumericalPrecisionPolicy, "QSqlDriver.setNumericalPrecisionPolicy(QSql.NumericalPrecisionPolicy)");

extern "C" {static PyObject *meth_QSqlDriver_setNumericalPrecisionPolicy(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setNumericalPrecisionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSql::NumericalPrecisionPolicy a0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlDriver, &sipCpp, sipType_QSql_NumericalPrecisionPolicy, &a0))
        {
            sipCpp->setNumericalPrecisionPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_setNumericalPrecisionPolicy, doc_QSqlDriver_setNumericalPrecisionPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_numericalPrecisionPolicy, "QSqlDriver.numericalPrecisionPolicy() -> QSql.NumericalPrecisionPolicy");

extern "C" {static PyObject *meth_QSqlDriver_numericalPrecisionPolicy(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_numericalPrecisionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            QSql::NumericalPrecisionPolicy sipRes;

            sipRes = sipCpp->numericalPrecisionPolicy();

            return sipConvertFromEnum(sipRes,sipType_QSql_NumericalPrecisionPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_numericalPrecisionPolicy, doc_QSqlDriver_numericalPrecisionPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlDriver_dbmsType, "QSqlDriver.dbmsType() -> QSqlDriver.DbmsType");

extern "C" {static PyObject *meth_QSqlDriver_dbmsType(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_dbmsType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlDriver *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlDriver, &sipCpp))
        {
            QSqlDriver::DbmsType sipRes;

            sipRes = sipCpp->dbmsType();

            return sipConvertFromEnum(sipRes,sipType_QSqlDriver_DbmsType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlDriver, sipName_dbmsType, doc_QSqlDriver_dbmsType);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSqlDriver(void *, const sipTypeDef *);}
static void *cast_QSqlDriver(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSqlDriver)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QSqlDriver *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlDriver(void *, int);}
static void release_QSqlDriver(void *sipCppV,int)
{
    QSqlDriver *sipCpp = reinterpret_cast<QSqlDriver *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QSqlDriver(sipSimpleWrapper *);}
static void dealloc_QSqlDriver(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSqlDriver *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSqlDriver(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QSqlDriver(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSqlDriver(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQSqlDriver *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQSqlDriver(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSqlDriver[] = {{162, 0, 1}};


static PyMethodDef methods_QSqlDriver[] = {
    {SIP_MLNAME_CAST(sipName_beginTransaction), meth_QSqlDriver_beginTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_beginTransaction)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QSqlDriver_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QSqlDriver_close, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_close)},
    {SIP_MLNAME_CAST(sipName_commitTransaction), meth_QSqlDriver_commitTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_commitTransaction)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QSqlDriver_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createResult), meth_QSqlDriver_createResult, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_createResult)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QSqlDriver_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_dbmsType), meth_QSqlDriver_dbmsType, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_dbmsType)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QSqlDriver_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_escapeIdentifier), meth_QSqlDriver_escapeIdentifier, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_escapeIdentifier)},
    {SIP_MLNAME_CAST(sipName_formatValue), (PyCFunction)meth_QSqlDriver_formatValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlDriver_formatValue)},
    {SIP_MLNAME_CAST(sipName_handle), meth_QSqlDriver_handle, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_handle)},
    {SIP_MLNAME_CAST(sipName_hasFeature), meth_QSqlDriver_hasFeature, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_hasFeature)},
    {SIP_MLNAME_CAST(sipName_isIdentifierEscaped), meth_QSqlDriver_isIdentifierEscaped, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_isIdentifierEscaped)},
    {SIP_MLNAME_CAST(sipName_isOpen), meth_QSqlDriver_isOpen, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_isOpen)},
    {SIP_MLNAME_CAST(sipName_isOpenError), meth_QSqlDriver_isOpenError, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_isOpenError)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QSqlDriver_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_lastError), meth_QSqlDriver_lastError, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_lastError)},
    {SIP_MLNAME_CAST(sipName_numericalPrecisionPolicy), meth_QSqlDriver_numericalPrecisionPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_numericalPrecisionPolicy)},
    {SIP_MLNAME_CAST(sipName_open), (PyCFunction)meth_QSqlDriver_open, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlDriver_open)},
    {SIP_MLNAME_CAST(sipName_primaryIndex), meth_QSqlDriver_primaryIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_primaryIndex)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QSqlDriver_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_record), meth_QSqlDriver_record, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_record)},
    {SIP_MLNAME_CAST(sipName_rollbackTransaction), meth_QSqlDriver_rollbackTransaction, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_rollbackTransaction)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QSqlDriver_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QSqlDriver_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setLastError), (PyCFunction)meth_QSqlDriver_setLastError, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlDriver_setLastError)},
    {SIP_MLNAME_CAST(sipName_setNumericalPrecisionPolicy), meth_QSqlDriver_setNumericalPrecisionPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_setNumericalPrecisionPolicy)},
    {SIP_MLNAME_CAST(sipName_setOpen), (PyCFunction)meth_QSqlDriver_setOpen, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlDriver_setOpen)},
    {SIP_MLNAME_CAST(sipName_setOpenError), (PyCFunction)meth_QSqlDriver_setOpenError, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlDriver_setOpenError)},
    {SIP_MLNAME_CAST(sipName_sqlStatement), meth_QSqlDriver_sqlStatement, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_sqlStatement)},
    {SIP_MLNAME_CAST(sipName_stripDelimiters), meth_QSqlDriver_stripDelimiters, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_stripDelimiters)},
    {SIP_MLNAME_CAST(sipName_subscribeToNotification), meth_QSqlDriver_subscribeToNotification, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_subscribeToNotification)},
    {SIP_MLNAME_CAST(sipName_subscribedToNotifications), meth_QSqlDriver_subscribedToNotifications, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_subscribedToNotifications)},
    {SIP_MLNAME_CAST(sipName_tables), meth_QSqlDriver_tables, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_tables)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QSqlDriver_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_unsubscribeFromNotification), meth_QSqlDriver_unsubscribeFromNotification, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlDriver_unsubscribeFromNotification)}
};

static sipEnumMemberDef enummembers_QSqlDriver[] = {
    {sipName_BLOB, static_cast<int>(QSqlDriver::BLOB), 9},
    {sipName_BatchOperations, static_cast<int>(QSqlDriver::BatchOperations), 9},
    {sipName_DB2, static_cast<int>(QSqlDriver::DB2), 8},
    {sipName_DeleteStatement, static_cast<int>(QSqlDriver::DeleteStatement), 12},
    {sipName_EventNotifications, static_cast<int>(QSqlDriver::EventNotifications), 9},
    {sipName_FieldName, static_cast<int>(QSqlDriver::FieldName), 10},
    {sipName_FinishQuery, static_cast<int>(QSqlDriver::FinishQuery), 9},
    {sipName_InsertStatement, static_cast<int>(QSqlDriver::InsertStatement), 12},
    {sipName_Interbase, static_cast<int>(QSqlDriver::Interbase), 8},
    {sipName_LastInsertId, static_cast<int>(QSqlDriver::LastInsertId), 9},
    {sipName_LowPrecisionNumbers, static_cast<int>(QSqlDriver::LowPrecisionNumbers), 9},
    {sipName_MSSqlServer, static_cast<int>(QSqlDriver::MSSqlServer), 8},
    {sipName_MultipleResultSets, static_cast<int>(QSqlDriver::MultipleResultSets), 9},
    {sipName_MySqlServer, static_cast<int>(QSqlDriver::MySqlServer), 8},
    {sipName_NamedPlaceholders, static_cast<int>(QSqlDriver::NamedPlaceholders), 9},
    {sipName_Oracle, static_cast<int>(QSqlDriver::Oracle), 8},
    {sipName_OtherSource, static_cast<int>(QSqlDriver::OtherSource), 11},
    {sipName_PositionalPlaceholders, static_cast<int>(QSqlDriver::PositionalPlaceholders), 9},
    {sipName_PostgreSQL, static_cast<int>(QSqlDriver::PostgreSQL), 8},
    {sipName_PreparedQueries, static_cast<int>(QSqlDriver::PreparedQueries), 9},
    {sipName_QuerySize, static_cast<int>(QSqlDriver::QuerySize), 9},
    {sipName_SQLite, static_cast<int>(QSqlDriver::SQLite), 8},
    {sipName_SelectStatement, static_cast<int>(QSqlDriver::SelectStatement), 12},
    {sipName_SelfSource, static_cast<int>(QSqlDriver::SelfSource), 11},
    {sipName_SimpleLocking, static_cast<int>(QSqlDriver::SimpleLocking), 9},
    {sipName_Sybase, static_cast<int>(QSqlDriver::Sybase), 8},
    {sipName_TableName, static_cast<int>(QSqlDriver::TableName), 10},
    {sipName_Transactions, static_cast<int>(QSqlDriver::Transactions), 9},
    {sipName_Unicode, static_cast<int>(QSqlDriver::Unicode), 9},
    {sipName_UnknownDbms, static_cast<int>(QSqlDriver::UnknownDbms), 8},
    {sipName_UnknownSource, static_cast<int>(QSqlDriver::UnknownSource), 11},
    {sipName_UpdateStatement, static_cast<int>(QSqlDriver::UpdateStatement), 12},
    {sipName_WhereStatement, static_cast<int>(QSqlDriver::WhereStatement), 12},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QSqlDriver[] = {
    {"notification(QString)", "\1QSqlDriver.notification[str]", 0, 0},
    {"notification(QString,QSqlDriver::NotificationSource,QVariant)", "\1QSqlDriver.notification[str, QSqlDriver.NotificationSource, QVariant]", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QSqlDriver, "\1QSqlDriver(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtSql_QSqlDriver = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSqlDriver,
        {0}
    },
    {
        sipNameNr_QSqlDriver,
        {0, 0, 1},
        37, methods_QSqlDriver,
        33, enummembers_QSqlDriver,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSqlDriver,
    -1,
    -1,
    supers_QSqlDriver,
    0,
    init_type_QSqlDriver,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSqlDriver,
    0,
    0,
    0,
    release_QSqlDriver,
    cast_QSqlDriver,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QSqlDriver::staticMetaObject,
    0,
    signals_QSqlDriver,
    0
};
