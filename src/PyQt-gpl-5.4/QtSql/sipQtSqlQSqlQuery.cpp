/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:51 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlquery.sip"
#include <qsqlquery.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlQuery.cpp"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlresult.sip"
#include <qsqlresult.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlQuery.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlQuery.cpp"
#line 37 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqldatabase.sip"
#include <qsqldatabase.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlQuery.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsql.sip"
#include <qsql.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlQuery.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlQuery.cpp"
#line 26 "sip/QtCore/qpycore_qmap.sip"
#include <qmap.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlQuery.cpp"
#line 30 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsql.sip"
#include <qsql.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlQuery.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlQuery.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqldriver.sip"
#include <qsqldriver.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlQuery.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtSql/qsqlerror.sip"
#include <qsqlerror.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtSql/sipQtSqlQSqlQuery.cpp"


PyDoc_STRVAR(doc_QSqlQuery_isValid, "QSqlQuery.isValid() -> bool");

extern "C" {static PyObject *meth_QSqlQuery_isValid(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_isValid, doc_QSqlQuery_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_isActive, "QSqlQuery.isActive() -> bool");

extern "C" {static PyObject *meth_QSqlQuery_isActive(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isActive();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_isActive, doc_QSqlQuery_isActive);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_isNull, "QSqlQuery.isNull(int) -> bool\n"
    "QSqlQuery.isNull(str) -> bool");

extern "C" {static PyObject *meth_QSqlQuery_isNull(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlQuery, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->isNull(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->isNull(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_isNull, doc_QSqlQuery_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_at, "QSqlQuery.at() -> int");

extern "C" {static PyObject *meth_QSqlQuery_at(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->at();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_at, doc_QSqlQuery_at);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_lastQuery, "QSqlQuery.lastQuery() -> str");

extern "C" {static PyObject *meth_QSqlQuery_lastQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_lastQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->lastQuery());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_lastQuery, doc_QSqlQuery_lastQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_numRowsAffected, "QSqlQuery.numRowsAffected() -> int");

extern "C" {static PyObject *meth_QSqlQuery_numRowsAffected(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_numRowsAffected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->numRowsAffected();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_numRowsAffected, doc_QSqlQuery_numRowsAffected);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_lastError, "QSqlQuery.lastError() -> QSqlError");

extern "C" {static PyObject *meth_QSqlQuery_lastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QSqlError*sipRes;

            sipRes = new QSqlError(sipCpp->lastError());

            return sipConvertFromNewType(sipRes,sipType_QSqlError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_lastError, doc_QSqlQuery_lastError);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_isSelect, "QSqlQuery.isSelect() -> bool");

extern "C" {static PyObject *meth_QSqlQuery_isSelect(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_isSelect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isSelect();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_isSelect, doc_QSqlQuery_isSelect);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_size, "QSqlQuery.size() -> int");

extern "C" {static PyObject *meth_QSqlQuery_size(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->size();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_size, doc_QSqlQuery_size);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_driver, "QSqlQuery.driver() -> QSqlDriver");

extern "C" {static PyObject *meth_QSqlQuery_driver(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_driver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            const QSqlDriver*sipRes;

            sipRes = sipCpp->driver();

            return sipConvertFromType(const_cast<QSqlDriver *>(sipRes),sipType_QSqlDriver,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_driver, doc_QSqlQuery_driver);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_result, "QSqlQuery.result() -> QSqlResult");

extern "C" {static PyObject *meth_QSqlQuery_result(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_result(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            const QSqlResult*sipRes;

            sipRes = sipCpp->result();

            return sipConvertFromType(const_cast<QSqlResult *>(sipRes),sipType_QSqlResult,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_result, doc_QSqlQuery_result);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_isForwardOnly, "QSqlQuery.isForwardOnly() -> bool");

extern "C" {static PyObject *meth_QSqlQuery_isForwardOnly(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_isForwardOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isForwardOnly();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_isForwardOnly, doc_QSqlQuery_isForwardOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_record, "QSqlQuery.record() -> QSqlRecord");

extern "C" {static PyObject *meth_QSqlQuery_record(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_record(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QSqlRecord*sipRes;

            sipRes = new QSqlRecord(sipCpp->record());

            return sipConvertFromNewType(sipRes,sipType_QSqlRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_record, doc_QSqlQuery_record);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_setForwardOnly, "QSqlQuery.setForwardOnly(bool)");

extern "C" {static PyObject *meth_QSqlQuery_setForwardOnly(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_setForwardOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QSqlQuery, &sipCpp, &a0))
        {
            sipCpp->setForwardOnly(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_setForwardOnly, doc_QSqlQuery_setForwardOnly);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_exec_, "QSqlQuery.exec_(str) -> bool\n"
    "QSqlQuery.exec_() -> bool");

extern "C" {static PyObject *meth_QSqlQuery_exec_(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_exec_(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_exec_, doc_QSqlQuery_exec_);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_value, "QSqlQuery.value(int) -> QVariant\n"
    "QSqlQuery.value(str) -> QVariant");

extern "C" {static PyObject *meth_QSqlQuery_value(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_value(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlQuery, &sipCpp, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->value(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->value(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_value, doc_QSqlQuery_value);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_seek, "QSqlQuery.seek(int, bool relative=False) -> bool");

extern "C" {static PyObject *meth_QSqlQuery_seek(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_seek(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bool a1 = 0;
        QSqlQuery *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_relative,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|b", &sipSelf, sipType_QSqlQuery, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->seek(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_seek, doc_QSqlQuery_seek);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_next, "QSqlQuery.next() -> bool");

extern "C" {static PyObject *meth_QSqlQuery_next(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->next();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_next, doc_QSqlQuery_next);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_previous, "QSqlQuery.previous() -> bool");

extern "C" {static PyObject *meth_QSqlQuery_previous(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_previous(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->previous();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_previous, doc_QSqlQuery_previous);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_first, "QSqlQuery.first() -> bool");

extern "C" {static PyObject *meth_QSqlQuery_first(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_first(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->first();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_first, doc_QSqlQuery_first);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_last, "QSqlQuery.last() -> bool");

extern "C" {static PyObject *meth_QSqlQuery_last(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_last(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->last();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_last, doc_QSqlQuery_last);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_clear, "QSqlQuery.clear()");

extern "C" {static PyObject *meth_QSqlQuery_clear(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_clear, doc_QSqlQuery_clear);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_execBatch, "QSqlQuery.execBatch(QSqlQuery.BatchExecutionMode mode=QSqlQuery.ValuesAsRows) -> bool");

extern "C" {static PyObject *meth_QSqlQuery_execBatch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_execBatch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery::BatchExecutionMode a0 = QSqlQuery::ValuesAsRows;
        QSqlQuery *sipCpp;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QSqlQuery_BatchExecutionMode, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->execBatch(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_execBatch, doc_QSqlQuery_execBatch);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_prepare, "QSqlQuery.prepare(str) -> bool");

extern "C" {static PyObject *meth_QSqlQuery_prepare(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_prepare(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->prepare(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_prepare, doc_QSqlQuery_prepare);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_bindValue, "QSqlQuery.bindValue(str, QVariant, QSql.ParamType type=QSql.In)\n"
    "QSqlQuery.bindValue(int, QVariant, QSql.ParamType type=QSql.In)");

extern "C" {static PyObject *meth_QSqlQuery_bindValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_bindValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QVariant* a1;
        int a1State = 0;
        QSql::ParamType a2def = QSql::In;
        QSql::ParamType* a2 = &a2def;
        int a2State = 0;
        QSqlQuery *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|J1", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVariant, &a1, &a1State, sipType_QSql_ParamType, &a2, &a2State))
        {
            sipCpp->bindValue(*a0,*a1,*a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);
            sipReleaseType(a2,sipType_QSql_ParamType,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QVariant* a1;
        int a1State = 0;
        QSql::ParamType a2def = QSql::In;
        QSql::ParamType* a2 = &a2def;
        int a2State = 0;
        QSqlQuery *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ1|J1", &sipSelf, sipType_QSqlQuery, &sipCpp, &a0, sipType_QVariant, &a1, &a1State, sipType_QSql_ParamType, &a2, &a2State))
        {
            sipCpp->bindValue(a0,*a1,*a2);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);
            sipReleaseType(a2,sipType_QSql_ParamType,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_bindValue, doc_QSqlQuery_bindValue);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_addBindValue, "QSqlQuery.addBindValue(QVariant, QSql.ParamType type=QSql.In)");

extern "C" {static PyObject *meth_QSqlQuery_addBindValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_addBindValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QVariant* a0;
        int a0State = 0;
        QSql::ParamType a1def = QSql::In;
        QSql::ParamType* a1 = &a1def;
        int a1State = 0;
        QSqlQuery *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QVariant, &a0, &a0State, sipType_QSql_ParamType, &a1, &a1State))
        {
            sipCpp->addBindValue(*a0,*a1);
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);
            sipReleaseType(a1,sipType_QSql_ParamType,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_addBindValue, doc_QSqlQuery_addBindValue);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_boundValue, "QSqlQuery.boundValue(str) -> QVariant\n"
    "QSqlQuery.boundValue(int) -> QVariant");

extern "C" {static PyObject *meth_QSqlQuery_boundValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_boundValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->boundValue(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    {
        int a0;
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QSqlQuery, &sipCpp, &a0))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->boundValue(a0));

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_boundValue, doc_QSqlQuery_boundValue);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_boundValues, "QSqlQuery.boundValues() -> dict-of-QString-QVariant");

extern "C" {static PyObject *meth_QSqlQuery_boundValues(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_boundValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QMap<QString,QVariant>*sipRes;

            sipRes = new QMap<QString,QVariant>(sipCpp->boundValues());

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_boundValues, doc_QSqlQuery_boundValues);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_executedQuery, "QSqlQuery.executedQuery() -> str");

extern "C" {static PyObject *meth_QSqlQuery_executedQuery(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_executedQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->executedQuery());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_executedQuery, doc_QSqlQuery_executedQuery);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_lastInsertId, "QSqlQuery.lastInsertId() -> QVariant");

extern "C" {static PyObject *meth_QSqlQuery_lastInsertId(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_lastInsertId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->lastInsertId());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_lastInsertId, doc_QSqlQuery_lastInsertId);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_setNumericalPrecisionPolicy, "QSqlQuery.setNumericalPrecisionPolicy(QSql.NumericalPrecisionPolicy)");

extern "C" {static PyObject *meth_QSqlQuery_setNumericalPrecisionPolicy(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_setNumericalPrecisionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSql::NumericalPrecisionPolicy a0;
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QSqlQuery, &sipCpp, sipType_QSql_NumericalPrecisionPolicy, &a0))
        {
            sipCpp->setNumericalPrecisionPolicy(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_setNumericalPrecisionPolicy, doc_QSqlQuery_setNumericalPrecisionPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_numericalPrecisionPolicy, "QSqlQuery.numericalPrecisionPolicy() -> QSql.NumericalPrecisionPolicy");

extern "C" {static PyObject *meth_QSqlQuery_numericalPrecisionPolicy(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_numericalPrecisionPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            QSql::NumericalPrecisionPolicy sipRes;

            sipRes = sipCpp->numericalPrecisionPolicy();

            return sipConvertFromEnum(sipRes,sipType_QSql_NumericalPrecisionPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_numericalPrecisionPolicy, doc_QSqlQuery_numericalPrecisionPolicy);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_finish, "QSqlQuery.finish()");

extern "C" {static PyObject *meth_QSqlQuery_finish(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_finish(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            sipCpp->finish();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_finish, doc_QSqlQuery_finish);

    return NULL;
}


PyDoc_STRVAR(doc_QSqlQuery_nextResult, "QSqlQuery.nextResult() -> bool");

extern "C" {static PyObject *meth_QSqlQuery_nextResult(PyObject *, PyObject *);}
static PyObject *meth_QSqlQuery_nextResult(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QSqlQuery *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QSqlQuery, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->nextResult();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QSqlQuery, sipName_nextResult, doc_QSqlQuery_nextResult);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSqlQuery(void *, const sipTypeDef *);}
static void *cast_QSqlQuery(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QSqlQuery)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlQuery(void *, int);}
static void release_QSqlQuery(void *sipCppV,int)
{
    delete reinterpret_cast<QSqlQuery *>(sipCppV);
}


extern "C" {static void assign_QSqlQuery(void *, SIP_SSIZE_T, const void *);}
static void assign_QSqlQuery(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QSqlQuery *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QSqlQuery *>(sipSrc);
}


extern "C" {static void *array_QSqlQuery(SIP_SSIZE_T);}
static void *array_QSqlQuery(SIP_SSIZE_T sipNrElem)
{
    return new QSqlQuery[sipNrElem];
}


extern "C" {static void *copy_QSqlQuery(const void *, SIP_SSIZE_T);}
static void *copy_QSqlQuery(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QSqlQuery(reinterpret_cast<const QSqlQuery *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QSqlQuery(sipSimpleWrapper *);}
static void dealloc_QSqlQuery(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QSqlQuery(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QSqlQuery(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QSqlQuery(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QSqlQuery *sipCpp = 0;

    {
        QSqlResult* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_QSqlResult, &a0))
        {
            sipCpp = new QSqlQuery(a0);

            return sipCpp;
        }
    }

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        QSqlDatabase a1def = QSqlDatabase();
        QSqlDatabase* a1 = &a1def;

        static const char *sipKwdList[] = {
            sipName_query,
            sipName_db,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1J9", sipType_QString,&a0, &a0State, sipType_QSqlDatabase, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QSqlQuery(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipCpp;
        }
    }

    {
        QSqlDatabase* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSqlDatabase, &a0))
        {
            sipCpp = new QSqlQuery(*a0);

            return sipCpp;
        }
    }

    {
        const QSqlQuery* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QSqlQuery, &a0))
        {
            sipCpp = new QSqlQuery(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QSqlQuery[] = {
    {SIP_MLNAME_CAST(sipName_addBindValue), (PyCFunction)meth_QSqlQuery_addBindValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQuery_addBindValue)},
    {SIP_MLNAME_CAST(sipName_at), meth_QSqlQuery_at, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_at)},
    {SIP_MLNAME_CAST(sipName_bindValue), (PyCFunction)meth_QSqlQuery_bindValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQuery_bindValue)},
    {SIP_MLNAME_CAST(sipName_boundValue), meth_QSqlQuery_boundValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_boundValue)},
    {SIP_MLNAME_CAST(sipName_boundValues), meth_QSqlQuery_boundValues, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_boundValues)},
    {SIP_MLNAME_CAST(sipName_clear), meth_QSqlQuery_clear, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_clear)},
    {SIP_MLNAME_CAST(sipName_driver), meth_QSqlQuery_driver, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_driver)},
    {SIP_MLNAME_CAST(sipName_execBatch), (PyCFunction)meth_QSqlQuery_execBatch, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQuery_execBatch)},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QSqlQuery_exec_, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_exec_)},
    {SIP_MLNAME_CAST(sipName_executedQuery), meth_QSqlQuery_executedQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_executedQuery)},
    {SIP_MLNAME_CAST(sipName_finish), meth_QSqlQuery_finish, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_finish)},
    {SIP_MLNAME_CAST(sipName_first), meth_QSqlQuery_first, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_first)},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QSqlQuery_isActive, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_isActive)},
    {SIP_MLNAME_CAST(sipName_isForwardOnly), meth_QSqlQuery_isForwardOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_isForwardOnly)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QSqlQuery_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_isNull)},
    {SIP_MLNAME_CAST(sipName_isSelect), meth_QSqlQuery_isSelect, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_isSelect)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QSqlQuery_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_isValid)},
    {SIP_MLNAME_CAST(sipName_last), meth_QSqlQuery_last, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_last)},
    {SIP_MLNAME_CAST(sipName_lastError), meth_QSqlQuery_lastError, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_lastError)},
    {SIP_MLNAME_CAST(sipName_lastInsertId), meth_QSqlQuery_lastInsertId, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_lastInsertId)},
    {SIP_MLNAME_CAST(sipName_lastQuery), meth_QSqlQuery_lastQuery, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_lastQuery)},
    {SIP_MLNAME_CAST(sipName_next), meth_QSqlQuery_next, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_next)},
    {SIP_MLNAME_CAST(sipName_nextResult), meth_QSqlQuery_nextResult, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_nextResult)},
    {SIP_MLNAME_CAST(sipName_numRowsAffected), meth_QSqlQuery_numRowsAffected, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_numRowsAffected)},
    {SIP_MLNAME_CAST(sipName_numericalPrecisionPolicy), meth_QSqlQuery_numericalPrecisionPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_numericalPrecisionPolicy)},
    {SIP_MLNAME_CAST(sipName_prepare), meth_QSqlQuery_prepare, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_prepare)},
    {SIP_MLNAME_CAST(sipName_previous), meth_QSqlQuery_previous, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_previous)},
    {SIP_MLNAME_CAST(sipName_record), meth_QSqlQuery_record, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_record)},
    {SIP_MLNAME_CAST(sipName_result), meth_QSqlQuery_result, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_result)},
    {SIP_MLNAME_CAST(sipName_seek), (PyCFunction)meth_QSqlQuery_seek, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QSqlQuery_seek)},
    {SIP_MLNAME_CAST(sipName_setForwardOnly), meth_QSqlQuery_setForwardOnly, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_setForwardOnly)},
    {SIP_MLNAME_CAST(sipName_setNumericalPrecisionPolicy), meth_QSqlQuery_setNumericalPrecisionPolicy, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_setNumericalPrecisionPolicy)},
    {SIP_MLNAME_CAST(sipName_size), meth_QSqlQuery_size, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_size)},
    {SIP_MLNAME_CAST(sipName_value), meth_QSqlQuery_value, METH_VARARGS, SIP_MLDOC_CAST(doc_QSqlQuery_value)}
};

static sipEnumMemberDef enummembers_QSqlQuery[] = {
    {sipName_ValuesAsColumns, static_cast<int>(QSqlQuery::ValuesAsColumns), 20},
    {sipName_ValuesAsRows, static_cast<int>(QSqlQuery::ValuesAsRows), 20},
};

PyDoc_STRVAR(doc_QSqlQuery, "\1QSqlQuery(QSqlResult)\n"
    "QSqlQuery(str query='', QSqlDatabase db=QSqlDatabase())\n"
    "QSqlQuery(QSqlDatabase)\n"
    "QSqlQuery(QSqlQuery)");


pyqt5ClassTypeDef sipTypeDef_QtSql_QSqlQuery = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QSqlQuery,
        {0}
    },
    {
        sipNameNr_QSqlQuery,
        {0, 0, 1},
        34, methods_QSqlQuery,
        2, enummembers_QSqlQuery,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QSqlQuery,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QSqlQuery,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSqlQuery,
    assign_QSqlQuery,
    array_QSqlQuery,
    copy_QSqlQuery,
    release_QSqlQuery,
    cast_QSqlQuery,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
