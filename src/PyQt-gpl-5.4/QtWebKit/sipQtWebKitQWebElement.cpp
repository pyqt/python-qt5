/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:01 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKit/qwebelement.sip"
#include <qwebelement.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebElement.cpp"

#line 30 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebElement.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebElement.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebElement.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebElement.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebElement.cpp"
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKit/qwebelement.sip"
#include <qwebelement.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebElement.cpp"


PyDoc_STRVAR(doc_QWebElement_isNull, "QWebElement.isNull() -> bool");

extern "C" {static PyObject *meth_QWebElement_isNull(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_isNull, doc_QWebElement_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_findAll, "QWebElement.findAll(str) -> QWebElementCollection");

extern "C" {static PyObject *meth_QWebElement_findAll(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_findAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QWebElementCollection*sipRes;

            sipRes = new QWebElementCollection(sipCpp->findAll(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QWebElementCollection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_findAll, doc_QWebElement_findAll);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_findFirst, "QWebElement.findFirst(str) -> QWebElement");

extern "C" {static PyObject *meth_QWebElement_findFirst(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_findFirst(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QWebElement*sipRes;

            sipRes = new QWebElement(sipCpp->findFirst(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_findFirst, doc_QWebElement_findFirst);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_setPlainText, "QWebElement.setPlainText(str)");

extern "C" {static PyObject *meth_QWebElement_setPlainText(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_setPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setPlainText(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_setPlainText, doc_QWebElement_setPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_toPlainText, "QWebElement.toPlainText() -> str");

extern "C" {static PyObject *meth_QWebElement_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toPlainText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_toPlainText, doc_QWebElement_toPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_setOuterXml, "QWebElement.setOuterXml(str)");

extern "C" {static PyObject *meth_QWebElement_setOuterXml(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_setOuterXml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setOuterXml(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_setOuterXml, doc_QWebElement_setOuterXml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_toOuterXml, "QWebElement.toOuterXml() -> str");

extern "C" {static PyObject *meth_QWebElement_toOuterXml(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_toOuterXml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toOuterXml());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_toOuterXml, doc_QWebElement_toOuterXml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_setInnerXml, "QWebElement.setInnerXml(str)");

extern "C" {static PyObject *meth_QWebElement_setInnerXml(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_setInnerXml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->setInnerXml(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_setInnerXml, doc_QWebElement_setInnerXml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_toInnerXml, "QWebElement.toInnerXml() -> str");

extern "C" {static PyObject *meth_QWebElement_toInnerXml(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_toInnerXml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->toInnerXml());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_toInnerXml, doc_QWebElement_toInnerXml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_setAttribute, "QWebElement.setAttribute(str, str)");

extern "C" {static PyObject *meth_QWebElement_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->setAttribute(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_setAttribute, doc_QWebElement_setAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_setAttributeNS, "QWebElement.setAttributeNS(str, str, str)");

extern "C" {static PyObject *meth_QWebElement_setAttributeNS(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_setAttributeNS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            sipCpp->setAttributeNS(*a0,*a1,*a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_setAttributeNS, doc_QWebElement_setAttributeNS);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_attribute, "QWebElement.attribute(str, str defaultValue=QString()) -> str");

extern "C" {static PyObject *meth_QWebElement_attribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebElement_attribute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QWebElement *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->attribute(*a0,*a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_attribute, doc_QWebElement_attribute);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_attributeNS, "QWebElement.attributeNS(str, str, str defaultValue=QString()) -> str");

extern "C" {static PyObject *meth_QWebElement_attributeNS(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebElement_attributeNS(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QString& a2def = QString();
        const QString* a2 = &a2def;
        int a2State = 0;
        const QWebElement *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            NULL,
            sipName_defaultValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1|J1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->attributeNS(*a0,*a1,*a2));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_attributeNS, doc_QWebElement_attributeNS);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_hasAttribute, "QWebElement.hasAttribute(str) -> bool");

extern "C" {static PyObject *meth_QWebElement_hasAttribute(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_hasAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasAttribute(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_hasAttribute, doc_QWebElement_hasAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_hasAttributeNS, "QWebElement.hasAttributeNS(str, str) -> bool");

extern "C" {static PyObject *meth_QWebElement_hasAttributeNS(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_hasAttributeNS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->hasAttributeNS(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_hasAttributeNS, doc_QWebElement_hasAttributeNS);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_removeAttribute, "QWebElement.removeAttribute(str)");

extern "C" {static PyObject *meth_QWebElement_removeAttribute(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_removeAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->removeAttribute(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_removeAttribute, doc_QWebElement_removeAttribute);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_removeAttributeNS, "QWebElement.removeAttributeNS(str, str)");

extern "C" {static PyObject *meth_QWebElement_removeAttributeNS(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_removeAttributeNS(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->removeAttributeNS(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_removeAttributeNS, doc_QWebElement_removeAttributeNS);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_hasAttributes, "QWebElement.hasAttributes() -> bool");

extern "C" {static PyObject *meth_QWebElement_hasAttributes(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_hasAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasAttributes();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_hasAttributes, doc_QWebElement_hasAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_attributeNames, "QWebElement.attributeNames(str namespaceUri=QString()) -> list-of-str");

extern "C" {static PyObject *meth_QWebElement_attributeNames(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebElement_attributeNames(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString& a0def = QString();
        const QString* a0 = &a0def;
        int a0State = 0;
        const QWebElement *sipCpp;

        static const char *sipKwdList[] = {
            sipName_namespaceUri,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->attributeNames(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_attributeNames, doc_QWebElement_attributeNames);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_classes, "QWebElement.classes() -> list-of-str");

extern "C" {static PyObject *meth_QWebElement_classes(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_classes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->classes());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_classes, doc_QWebElement_classes);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_hasClass, "QWebElement.hasClass(str) -> bool");

extern "C" {static PyObject *meth_QWebElement_hasClass(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_hasClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->hasClass(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_hasClass, doc_QWebElement_hasClass);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_addClass, "QWebElement.addClass(str)");

extern "C" {static PyObject *meth_QWebElement_addClass(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_addClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->addClass(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_addClass, doc_QWebElement_addClass);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_removeClass, "QWebElement.removeClass(str)");

extern "C" {static PyObject *meth_QWebElement_removeClass(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_removeClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->removeClass(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_removeClass, doc_QWebElement_removeClass);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_toggleClass, "QWebElement.toggleClass(str)");

extern "C" {static PyObject *meth_QWebElement_toggleClass(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_toggleClass(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->toggleClass(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_toggleClass, doc_QWebElement_toggleClass);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_hasFocus, "QWebElement.hasFocus() -> bool");

extern "C" {static PyObject *meth_QWebElement_hasFocus(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_hasFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasFocus();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_hasFocus, doc_QWebElement_hasFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_setFocus, "QWebElement.setFocus()");

extern "C" {static PyObject *meth_QWebElement_setFocus(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_setFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            sipCpp->setFocus();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_setFocus, doc_QWebElement_setFocus);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_geometry, "QWebElement.geometry() -> QRect");

extern "C" {static PyObject *meth_QWebElement_geometry(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QRect*sipRes;

            sipRes = new QRect(sipCpp->geometry());

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_geometry, doc_QWebElement_geometry);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_tagName, "QWebElement.tagName() -> str");

extern "C" {static PyObject *meth_QWebElement_tagName(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_tagName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->tagName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_tagName, doc_QWebElement_tagName);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_prefix, "QWebElement.prefix() -> str");

extern "C" {static PyObject *meth_QWebElement_prefix(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_prefix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->prefix());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_prefix, doc_QWebElement_prefix);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_localName, "QWebElement.localName() -> str");

extern "C" {static PyObject *meth_QWebElement_localName(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_localName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->localName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_localName, doc_QWebElement_localName);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_namespaceUri, "QWebElement.namespaceUri() -> str");

extern "C" {static PyObject *meth_QWebElement_namespaceUri(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_namespaceUri(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->namespaceUri());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_namespaceUri, doc_QWebElement_namespaceUri);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_parent, "QWebElement.parent() -> QWebElement");

extern "C" {static PyObject *meth_QWebElement_parent(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QWebElement*sipRes;

            sipRes = new QWebElement(sipCpp->parent());

            return sipConvertFromNewType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_parent, doc_QWebElement_parent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_firstChild, "QWebElement.firstChild() -> QWebElement");

extern "C" {static PyObject *meth_QWebElement_firstChild(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_firstChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QWebElement*sipRes;

            sipRes = new QWebElement(sipCpp->firstChild());

            return sipConvertFromNewType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_firstChild, doc_QWebElement_firstChild);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_lastChild, "QWebElement.lastChild() -> QWebElement");

extern "C" {static PyObject *meth_QWebElement_lastChild(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_lastChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QWebElement*sipRes;

            sipRes = new QWebElement(sipCpp->lastChild());

            return sipConvertFromNewType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_lastChild, doc_QWebElement_lastChild);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_nextSibling, "QWebElement.nextSibling() -> QWebElement");

extern "C" {static PyObject *meth_QWebElement_nextSibling(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_nextSibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QWebElement*sipRes;

            sipRes = new QWebElement(sipCpp->nextSibling());

            return sipConvertFromNewType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_nextSibling, doc_QWebElement_nextSibling);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_previousSibling, "QWebElement.previousSibling() -> QWebElement");

extern "C" {static PyObject *meth_QWebElement_previousSibling(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_previousSibling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QWebElement*sipRes;

            sipRes = new QWebElement(sipCpp->previousSibling());

            return sipConvertFromNewType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_previousSibling, doc_QWebElement_previousSibling);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_document, "QWebElement.document() -> QWebElement");

extern "C" {static PyObject *meth_QWebElement_document(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_document(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QWebElement*sipRes;

            sipRes = new QWebElement(sipCpp->document());

            return sipConvertFromNewType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_document, doc_QWebElement_document);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_webFrame, "QWebElement.webFrame() -> QWebFrame");

extern "C" {static PyObject *meth_QWebElement_webFrame(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_webFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QWebFrame*sipRes;

            sipRes = sipCpp->webFrame();

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_webFrame, doc_QWebElement_webFrame);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_appendInside, "QWebElement.appendInside(str)\n"
    "QWebElement.appendInside(QWebElement)");

extern "C" {static PyObject *meth_QWebElement_appendInside(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_appendInside(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->appendInside(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QWebElement* a0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QWebElement, &a0))
        {
            sipCpp->appendInside(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_appendInside, doc_QWebElement_appendInside);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_prependInside, "QWebElement.prependInside(str)\n"
    "QWebElement.prependInside(QWebElement)");

extern "C" {static PyObject *meth_QWebElement_prependInside(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_prependInside(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->prependInside(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QWebElement* a0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QWebElement, &a0))
        {
            sipCpp->prependInside(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_prependInside, doc_QWebElement_prependInside);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_appendOutside, "QWebElement.appendOutside(str)\n"
    "QWebElement.appendOutside(QWebElement)");

extern "C" {static PyObject *meth_QWebElement_appendOutside(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_appendOutside(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->appendOutside(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QWebElement* a0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QWebElement, &a0))
        {
            sipCpp->appendOutside(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_appendOutside, doc_QWebElement_appendOutside);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_prependOutside, "QWebElement.prependOutside(str)\n"
    "QWebElement.prependOutside(QWebElement)");

extern "C" {static PyObject *meth_QWebElement_prependOutside(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_prependOutside(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->prependOutside(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QWebElement* a0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QWebElement, &a0))
        {
            sipCpp->prependOutside(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_prependOutside, doc_QWebElement_prependOutside);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_encloseContentsWith, "QWebElement.encloseContentsWith(QWebElement)\n"
    "QWebElement.encloseContentsWith(str)");

extern "C" {static PyObject *meth_QWebElement_encloseContentsWith(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_encloseContentsWith(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement* a0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QWebElement, &a0))
        {
            sipCpp->encloseContentsWith(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->encloseContentsWith(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_encloseContentsWith, doc_QWebElement_encloseContentsWith);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_encloseWith, "QWebElement.encloseWith(str)\n"
    "QWebElement.encloseWith(QWebElement)");

extern "C" {static PyObject *meth_QWebElement_encloseWith(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_encloseWith(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->encloseWith(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QWebElement* a0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QWebElement, &a0))
        {
            sipCpp->encloseWith(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_encloseWith, doc_QWebElement_encloseWith);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_replace, "QWebElement.replace(str)\n"
    "QWebElement.replace(QWebElement)");

extern "C" {static PyObject *meth_QWebElement_replace(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_replace(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->replace(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QWebElement* a0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QWebElement, &a0))
        {
            sipCpp->replace(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_replace, doc_QWebElement_replace);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_clone, "QWebElement.clone() -> QWebElement");

extern "C" {static PyObject *meth_QWebElement_clone(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QWebElement*sipRes;

            sipRes = new QWebElement(sipCpp->clone());

            return sipConvertFromNewType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_clone, doc_QWebElement_clone);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_takeFromDocument, "QWebElement.takeFromDocument() -> QWebElement");

extern "C" {static PyObject *meth_QWebElement_takeFromDocument(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_takeFromDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            QWebElement*sipRes;

            sipRes = &sipCpp->takeFromDocument();

            return sipConvertFromType(sipRes,sipType_QWebElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_takeFromDocument, doc_QWebElement_takeFromDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_removeFromDocument, "QWebElement.removeFromDocument()");

extern "C" {static PyObject *meth_QWebElement_removeFromDocument(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_removeFromDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            sipCpp->removeFromDocument();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_removeFromDocument, doc_QWebElement_removeFromDocument);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_removeAllChildren, "QWebElement.removeAllChildren()");

extern "C" {static PyObject *meth_QWebElement_removeAllChildren(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_removeAllChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebElement, &sipCpp))
        {
            sipCpp->removeAllChildren();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_removeAllChildren, doc_QWebElement_removeAllChildren);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_evaluateJavaScript, "QWebElement.evaluateJavaScript(str) -> QVariant");

extern "C" {static PyObject *meth_QWebElement_evaluateJavaScript(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_evaluateJavaScript(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->evaluateJavaScript(*a0));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_evaluateJavaScript, doc_QWebElement_evaluateJavaScript);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_styleProperty, "QWebElement.styleProperty(str, QWebElement.StyleResolveStrategy) -> str");

extern "C" {static PyObject *meth_QWebElement_styleProperty(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_styleProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebElement::StyleResolveStrategy a1;
        const QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1E", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWebElement_StyleResolveStrategy, &a1))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->styleProperty(*a0,a1));
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_styleProperty, doc_QWebElement_styleProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_setStyleProperty, "QWebElement.setStyleProperty(str, str)");

extern "C" {static PyObject *meth_QWebElement_setStyleProperty(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_setStyleProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            sipCpp->setStyleProperty(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_setStyleProperty, doc_QWebElement_setStyleProperty);

    return NULL;
}


PyDoc_STRVAR(doc_QWebElement_render, "QWebElement.render(QPainter)\n"
    "QWebElement.render(QPainter, QRect)");

extern "C" {static PyObject *meth_QWebElement_render(PyObject *, PyObject *);}
static PyObject *meth_QWebElement_render(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QPainter* a0;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QPainter, &a0))
        {
            sipCpp->render(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPainter* a0;
        const QRect* a1;
        QWebElement *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J9", &sipSelf, sipType_QWebElement, &sipCpp, sipType_QPainter, &a0, sipType_QRect, &a1))
        {
            sipCpp->render(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebElement, sipName_render, doc_QWebElement_render);

    return NULL;
}


extern "C" {static PyObject *slot_QWebElement___ne__(PyObject *,PyObject *);}
static PyObject *slot_QWebElement___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QWebElement *sipCpp = reinterpret_cast<QWebElement *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QWebElement));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QWebElement* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QWebElement, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QWebElement::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWebKit,ne_slot,sipType_QWebElement,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QWebElement___eq__(PyObject *,PyObject *);}
static PyObject *slot_QWebElement___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QWebElement *sipCpp = reinterpret_cast<QWebElement *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QWebElement));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QWebElement* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QWebElement, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QWebElement::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtWebKit,eq_slot,sipType_QWebElement,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebElement(void *, const sipTypeDef *);}
static void *cast_QWebElement(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QWebElement)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebElement(void *, int);}
static void release_QWebElement(void *sipCppV,int)
{
    delete reinterpret_cast<QWebElement *>(sipCppV);
}


extern "C" {static void assign_QWebElement(void *, SIP_SSIZE_T, const void *);}
static void assign_QWebElement(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QWebElement *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QWebElement *>(sipSrc);
}


extern "C" {static void *array_QWebElement(SIP_SSIZE_T);}
static void *array_QWebElement(SIP_SSIZE_T sipNrElem)
{
    return new QWebElement[sipNrElem];
}


extern "C" {static void *copy_QWebElement(const void *, SIP_SSIZE_T);}
static void *copy_QWebElement(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QWebElement(reinterpret_cast<const QWebElement *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QWebElement(sipSimpleWrapper *);}
static void dealloc_QWebElement(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWebElement(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QWebElement(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebElement(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QWebElement *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QWebElement();

            return sipCpp;
        }
    }

    {
        const QWebElement* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QWebElement, &a0))
        {
            sipCpp = new QWebElement(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QWebElement[] = {
    {(void *)slot_QWebElement___ne__, ne_slot},
    {(void *)slot_QWebElement___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QWebElement[] = {
    {SIP_MLNAME_CAST(sipName_addClass), meth_QWebElement_addClass, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_addClass)},
    {SIP_MLNAME_CAST(sipName_appendInside), meth_QWebElement_appendInside, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_appendInside)},
    {SIP_MLNAME_CAST(sipName_appendOutside), meth_QWebElement_appendOutside, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_appendOutside)},
    {SIP_MLNAME_CAST(sipName_attribute), (PyCFunction)meth_QWebElement_attribute, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebElement_attribute)},
    {SIP_MLNAME_CAST(sipName_attributeNS), (PyCFunction)meth_QWebElement_attributeNS, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebElement_attributeNS)},
    {SIP_MLNAME_CAST(sipName_attributeNames), (PyCFunction)meth_QWebElement_attributeNames, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebElement_attributeNames)},
    {SIP_MLNAME_CAST(sipName_classes), meth_QWebElement_classes, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_classes)},
    {SIP_MLNAME_CAST(sipName_clone), meth_QWebElement_clone, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_clone)},
    {SIP_MLNAME_CAST(sipName_document), meth_QWebElement_document, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_document)},
    {SIP_MLNAME_CAST(sipName_encloseContentsWith), meth_QWebElement_encloseContentsWith, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_encloseContentsWith)},
    {SIP_MLNAME_CAST(sipName_encloseWith), meth_QWebElement_encloseWith, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_encloseWith)},
    {SIP_MLNAME_CAST(sipName_evaluateJavaScript), meth_QWebElement_evaluateJavaScript, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_evaluateJavaScript)},
    {SIP_MLNAME_CAST(sipName_findAll), meth_QWebElement_findAll, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_findAll)},
    {SIP_MLNAME_CAST(sipName_findFirst), meth_QWebElement_findFirst, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_findFirst)},
    {SIP_MLNAME_CAST(sipName_firstChild), meth_QWebElement_firstChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_firstChild)},
    {SIP_MLNAME_CAST(sipName_geometry), meth_QWebElement_geometry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_geometry)},
    {SIP_MLNAME_CAST(sipName_hasAttribute), meth_QWebElement_hasAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_hasAttribute)},
    {SIP_MLNAME_CAST(sipName_hasAttributeNS), meth_QWebElement_hasAttributeNS, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_hasAttributeNS)},
    {SIP_MLNAME_CAST(sipName_hasAttributes), meth_QWebElement_hasAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_hasAttributes)},
    {SIP_MLNAME_CAST(sipName_hasClass), meth_QWebElement_hasClass, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_hasClass)},
    {SIP_MLNAME_CAST(sipName_hasFocus), meth_QWebElement_hasFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_hasFocus)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QWebElement_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_isNull)},
    {SIP_MLNAME_CAST(sipName_lastChild), meth_QWebElement_lastChild, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_lastChild)},
    {SIP_MLNAME_CAST(sipName_localName), meth_QWebElement_localName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_localName)},
    {SIP_MLNAME_CAST(sipName_namespaceUri), meth_QWebElement_namespaceUri, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_namespaceUri)},
    {SIP_MLNAME_CAST(sipName_nextSibling), meth_QWebElement_nextSibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_nextSibling)},
    {SIP_MLNAME_CAST(sipName_parent), meth_QWebElement_parent, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_parent)},
    {SIP_MLNAME_CAST(sipName_prefix), meth_QWebElement_prefix, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_prefix)},
    {SIP_MLNAME_CAST(sipName_prependInside), meth_QWebElement_prependInside, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_prependInside)},
    {SIP_MLNAME_CAST(sipName_prependOutside), meth_QWebElement_prependOutside, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_prependOutside)},
    {SIP_MLNAME_CAST(sipName_previousSibling), meth_QWebElement_previousSibling, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_previousSibling)},
    {SIP_MLNAME_CAST(sipName_removeAllChildren), meth_QWebElement_removeAllChildren, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_removeAllChildren)},
    {SIP_MLNAME_CAST(sipName_removeAttribute), meth_QWebElement_removeAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_removeAttribute)},
    {SIP_MLNAME_CAST(sipName_removeAttributeNS), meth_QWebElement_removeAttributeNS, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_removeAttributeNS)},
    {SIP_MLNAME_CAST(sipName_removeClass), meth_QWebElement_removeClass, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_removeClass)},
    {SIP_MLNAME_CAST(sipName_removeFromDocument), meth_QWebElement_removeFromDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_removeFromDocument)},
    {SIP_MLNAME_CAST(sipName_render), meth_QWebElement_render, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_render)},
    {SIP_MLNAME_CAST(sipName_replace), meth_QWebElement_replace, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_replace)},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QWebElement_setAttribute, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_setAttribute)},
    {SIP_MLNAME_CAST(sipName_setAttributeNS), meth_QWebElement_setAttributeNS, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_setAttributeNS)},
    {SIP_MLNAME_CAST(sipName_setFocus), meth_QWebElement_setFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_setFocus)},
    {SIP_MLNAME_CAST(sipName_setInnerXml), meth_QWebElement_setInnerXml, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_setInnerXml)},
    {SIP_MLNAME_CAST(sipName_setOuterXml), meth_QWebElement_setOuterXml, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_setOuterXml)},
    {SIP_MLNAME_CAST(sipName_setPlainText), meth_QWebElement_setPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_setPlainText)},
    {SIP_MLNAME_CAST(sipName_setStyleProperty), meth_QWebElement_setStyleProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_setStyleProperty)},
    {SIP_MLNAME_CAST(sipName_styleProperty), meth_QWebElement_styleProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_styleProperty)},
    {SIP_MLNAME_CAST(sipName_tagName), meth_QWebElement_tagName, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_tagName)},
    {SIP_MLNAME_CAST(sipName_takeFromDocument), meth_QWebElement_takeFromDocument, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_takeFromDocument)},
    {SIP_MLNAME_CAST(sipName_toInnerXml), meth_QWebElement_toInnerXml, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_toInnerXml)},
    {SIP_MLNAME_CAST(sipName_toOuterXml), meth_QWebElement_toOuterXml, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_toOuterXml)},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QWebElement_toPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_toPlainText)},
    {SIP_MLNAME_CAST(sipName_toggleClass), meth_QWebElement_toggleClass, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_toggleClass)},
    {SIP_MLNAME_CAST(sipName_webFrame), meth_QWebElement_webFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebElement_webFrame)}
};

static sipEnumMemberDef enummembers_QWebElement[] = {
    {sipName_CascadedStyle, static_cast<int>(QWebElement::CascadedStyle), 8},
    {sipName_ComputedStyle, static_cast<int>(QWebElement::ComputedStyle), 8},
    {sipName_InlineStyle, static_cast<int>(QWebElement::InlineStyle), 8},
};

PyDoc_STRVAR(doc_QWebElement, "\1QWebElement()\n"
    "QWebElement(QWebElement)");


pyqt5ClassTypeDef sipTypeDef_QtWebKit_QWebElement = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebElement,
        {0}
    },
    {
        sipNameNr_QWebElement,
        {0, 0, 1},
        53, methods_QWebElement,
        3, enummembers_QWebElement,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebElement,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QWebElement,
    init_type_QWebElement,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebElement,
    assign_QWebElement,
    array_QWebElement,
    copy_QWebElement,
    release_QWebElement,
    cast_QWebElement,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
