/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:01 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKit/qwebsecurityorigin.sip"
#include <qwebsecurityorigin.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebSecurityOrigin.cpp"

#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebSecurityOrigin.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebSecurityOrigin.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebSecurityOrigin.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebSecurityOrigin.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKit/qwebdatabase.sip"
#include <qwebdatabase.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebSecurityOrigin.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebSecurityOrigin.cpp"


PyDoc_STRVAR(doc_QWebSecurityOrigin_allOrigins, "QWebSecurityOrigin.allOrigins() -> list-of-QWebSecurityOrigin");

extern "C" {static PyObject *meth_QWebSecurityOrigin_allOrigins(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_allOrigins(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QList<QWebSecurityOrigin>*sipRes;

            sipRes = new QList<QWebSecurityOrigin>(QWebSecurityOrigin::allOrigins());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebSecurityOrigin,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_allOrigins, doc_QWebSecurityOrigin_allOrigins);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_scheme, "QWebSecurityOrigin.scheme() -> str");

extern "C" {static PyObject *meth_QWebSecurityOrigin_scheme(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_scheme(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->scheme());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_scheme, doc_QWebSecurityOrigin_scheme);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_host, "QWebSecurityOrigin.host() -> str");

extern "C" {static PyObject *meth_QWebSecurityOrigin_host(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_host(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->host());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_host, doc_QWebSecurityOrigin_host);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_port, "QWebSecurityOrigin.port() -> int");

extern "C" {static PyObject *meth_QWebSecurityOrigin_port(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_port(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->port();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_port, doc_QWebSecurityOrigin_port);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_databaseUsage, "QWebSecurityOrigin.databaseUsage() -> int");

extern "C" {static PyObject *meth_QWebSecurityOrigin_databaseUsage(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_databaseUsage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->databaseUsage();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_databaseUsage, doc_QWebSecurityOrigin_databaseUsage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_databaseQuota, "QWebSecurityOrigin.databaseQuota() -> int");

extern "C" {static PyObject *meth_QWebSecurityOrigin_databaseQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_databaseQuota(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp))
        {
            qint64 sipRes;

            sipRes = sipCpp->databaseQuota();

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_databaseQuota, doc_QWebSecurityOrigin_databaseQuota);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_setDatabaseQuota, "QWebSecurityOrigin.setDatabaseQuota(int)");

extern "C" {static PyObject *meth_QWebSecurityOrigin_setDatabaseQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_setDatabaseQuota(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp, &a0))
        {
            sipCpp->setDatabaseQuota(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_setDatabaseQuota, doc_QWebSecurityOrigin_setDatabaseQuota);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_databases, "QWebSecurityOrigin.databases() -> list-of-QWebDatabase");

extern "C" {static PyObject *meth_QWebSecurityOrigin_databases(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_databases(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp))
        {
            QList<QWebDatabase>*sipRes;

            sipRes = new QList<QWebDatabase>(sipCpp->databases());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebDatabase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_databases, doc_QWebSecurityOrigin_databases);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_addLocalScheme, "QWebSecurityOrigin.addLocalScheme(str)");

extern "C" {static PyObject *meth_QWebSecurityOrigin_addLocalScheme(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_addLocalScheme(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QWebSecurityOrigin::addLocalScheme(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_addLocalScheme, doc_QWebSecurityOrigin_addLocalScheme);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_removeLocalScheme, "QWebSecurityOrigin.removeLocalScheme(str)");

extern "C" {static PyObject *meth_QWebSecurityOrigin_removeLocalScheme(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_removeLocalScheme(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1", sipType_QString,&a0, &a0State))
        {
            QWebSecurityOrigin::removeLocalScheme(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_removeLocalScheme, doc_QWebSecurityOrigin_removeLocalScheme);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_localSchemes, "QWebSecurityOrigin.localSchemes() -> list-of-str");

extern "C" {static PyObject *meth_QWebSecurityOrigin_localSchemes(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_localSchemes(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList*sipRes;

            sipRes = new QStringList(QWebSecurityOrigin::localSchemes());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_localSchemes, doc_QWebSecurityOrigin_localSchemes);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_setApplicationCacheQuota, "QWebSecurityOrigin.setApplicationCacheQuota(int)");

extern "C" {static PyObject *meth_QWebSecurityOrigin_setApplicationCacheQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_setApplicationCacheQuota(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qint64 a0;
        QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bn", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp, &a0))
        {
            sipCpp->setApplicationCacheQuota(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_setApplicationCacheQuota, doc_QWebSecurityOrigin_setApplicationCacheQuota);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_addAccessWhitelistEntry, "QWebSecurityOrigin.addAccessWhitelistEntry(str, str, QWebSecurityOrigin.SubdomainSetting)");

extern "C" {static PyObject *meth_QWebSecurityOrigin_addAccessWhitelistEntry(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_addAccessWhitelistEntry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QWebSecurityOrigin::SubdomainSetting a2;
        QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1E", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QWebSecurityOrigin_SubdomainSetting, &a2))
        {
            sipCpp->addAccessWhitelistEntry(*a0,*a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_addAccessWhitelistEntry, doc_QWebSecurityOrigin_addAccessWhitelistEntry);

    return NULL;
}


PyDoc_STRVAR(doc_QWebSecurityOrigin_removeAccessWhitelistEntry, "QWebSecurityOrigin.removeAccessWhitelistEntry(str, str, QWebSecurityOrigin.SubdomainSetting)");

extern "C" {static PyObject *meth_QWebSecurityOrigin_removeAccessWhitelistEntry(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_removeAccessWhitelistEntry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QString* a1;
        int a1State = 0;
        QWebSecurityOrigin::SubdomainSetting a2;
        QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1E", &sipSelf, sipType_QWebSecurityOrigin, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QWebSecurityOrigin_SubdomainSetting, &a2))
        {
            sipCpp->removeAccessWhitelistEntry(*a0,*a1,a2);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebSecurityOrigin, sipName_removeAccessWhitelistEntry, doc_QWebSecurityOrigin_removeAccessWhitelistEntry);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebSecurityOrigin(void *, const sipTypeDef *);}
static void *cast_QWebSecurityOrigin(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QWebSecurityOrigin)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebSecurityOrigin(void *, int);}
static void release_QWebSecurityOrigin(void *sipCppV,int)
{
    delete reinterpret_cast<QWebSecurityOrigin *>(sipCppV);
}


extern "C" {static void dealloc_QWebSecurityOrigin(sipSimpleWrapper *);}
static void dealloc_QWebSecurityOrigin(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWebSecurityOrigin(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QWebSecurityOrigin(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebSecurityOrigin(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QWebSecurityOrigin *sipCpp = 0;

    {
        const QUrl* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QUrl, &a0))
        {
            sipCpp = new QWebSecurityOrigin(*a0);

            return sipCpp;
        }
    }

    {
        const QWebSecurityOrigin* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QWebSecurityOrigin, &a0))
        {
            sipCpp = new QWebSecurityOrigin(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QWebSecurityOrigin[] = {
    {SIP_MLNAME_CAST(sipName_addAccessWhitelistEntry), meth_QWebSecurityOrigin_addAccessWhitelistEntry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_addAccessWhitelistEntry)},
    {SIP_MLNAME_CAST(sipName_addLocalScheme), meth_QWebSecurityOrigin_addLocalScheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_addLocalScheme)},
    {SIP_MLNAME_CAST(sipName_allOrigins), meth_QWebSecurityOrigin_allOrigins, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_allOrigins)},
    {SIP_MLNAME_CAST(sipName_databaseQuota), meth_QWebSecurityOrigin_databaseQuota, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_databaseQuota)},
    {SIP_MLNAME_CAST(sipName_databaseUsage), meth_QWebSecurityOrigin_databaseUsage, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_databaseUsage)},
    {SIP_MLNAME_CAST(sipName_databases), meth_QWebSecurityOrigin_databases, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_databases)},
    {SIP_MLNAME_CAST(sipName_host), meth_QWebSecurityOrigin_host, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_host)},
    {SIP_MLNAME_CAST(sipName_localSchemes), meth_QWebSecurityOrigin_localSchemes, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_localSchemes)},
    {SIP_MLNAME_CAST(sipName_port), meth_QWebSecurityOrigin_port, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_port)},
    {SIP_MLNAME_CAST(sipName_removeAccessWhitelistEntry), meth_QWebSecurityOrigin_removeAccessWhitelistEntry, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_removeAccessWhitelistEntry)},
    {SIP_MLNAME_CAST(sipName_removeLocalScheme), meth_QWebSecurityOrigin_removeLocalScheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_removeLocalScheme)},
    {SIP_MLNAME_CAST(sipName_scheme), meth_QWebSecurityOrigin_scheme, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_scheme)},
    {SIP_MLNAME_CAST(sipName_setApplicationCacheQuota), meth_QWebSecurityOrigin_setApplicationCacheQuota, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_setApplicationCacheQuota)},
    {SIP_MLNAME_CAST(sipName_setDatabaseQuota), meth_QWebSecurityOrigin_setDatabaseQuota, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebSecurityOrigin_setDatabaseQuota)}
};

static sipEnumMemberDef enummembers_QWebSecurityOrigin[] = {
    {sipName_AllowSubdomains, static_cast<int>(QWebSecurityOrigin::AllowSubdomains), 21},
    {sipName_DisallowSubdomains, static_cast<int>(QWebSecurityOrigin::DisallowSubdomains), 21},
};

PyDoc_STRVAR(doc_QWebSecurityOrigin, "\1QWebSecurityOrigin(QUrl)\n"
    "QWebSecurityOrigin(QWebSecurityOrigin)");


pyqt5ClassTypeDef sipTypeDef_QtWebKit_QWebSecurityOrigin = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebSecurityOrigin,
        {0}
    },
    {
        sipNameNr_QWebSecurityOrigin,
        {0, 0, 1},
        14, methods_QWebSecurityOrigin,
        2, enummembers_QWebSecurityOrigin,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebSecurityOrigin,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QWebSecurityOrigin,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebSecurityOrigin,
    0,
    0,
    0,
    release_QWebSecurityOrigin,
    cast_QWebSecurityOrigin,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
