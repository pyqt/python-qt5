/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:01 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 38 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 103 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 43 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 49 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 52 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 55 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"


class sipQWebPluginFactory : public QWebPluginFactory
{
public:
    sipQWebPluginFactory(QObject*);
    virtual ~sipQWebPluginFactory();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    bool supportsExtension(QWebPluginFactory::Extension) const;
    bool extension(QWebPluginFactory::Extension,const QWebPluginFactory::ExtensionOption*,QWebPluginFactory::ExtensionReturn*);
    QObject* create(const QString&,const QUrl&,const QStringList&,const QStringList&) const;
    void refreshPlugins();
    QList<QWebPluginFactory::Plugin> plugins() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebPluginFactory(const sipQWebPluginFactory &);
    sipQWebPluginFactory &operator = (const sipQWebPluginFactory &);

    char sipPyMethods[12];
};

sipQWebPluginFactory::sipQWebPluginFactory(QObject*a0): QWebPluginFactory(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebPluginFactory::~sipQWebPluginFactory()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebPluginFactory::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebKit_qt_metaobject(sipPySelf,sipType_QWebPluginFactory);
}

int sipQWebPluginFactory::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebPluginFactory::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKit_qt_metacall(sipPySelf,sipType_QWebPluginFactory,_c,_id,_a);

    return _id;
}

void *sipQWebPluginFactory::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebKit_qt_metacast(sipPySelf, sipType_QWebPluginFactory, _clname, &sipCpp) ? sipCpp : QWebPluginFactory::qt_metacast(_clname));
}

void sipQWebPluginFactory::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWebPluginFactory::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebKit_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebPluginFactory::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWebPluginFactory::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebKit_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebPluginFactory::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWebPluginFactory::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebKit_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebPluginFactory::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWebPluginFactory::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWebKit_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebPluginFactory::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWebPluginFactory::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWebKit_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebPluginFactory::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWebPluginFactory::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWebKit_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQWebPluginFactory::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWebPluginFactory::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebKit_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebPluginFactory::supportsExtension(QWebPluginFactory::Extension a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_supportsExtension);

    if (!sipMeth)
        return QWebPluginFactory::supportsExtension(a0);

    extern bool sipVH_QtWebKit_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebPluginFactory::Extension);

    return sipVH_QtWebKit_0(sipGILState, sipModuleAPI_QtWebKit_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebPluginFactory::extension(QWebPluginFactory::Extension a0,const QWebPluginFactory::ExtensionOption*a1,QWebPluginFactory::ExtensionReturn*a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_extension);

    if (!sipMeth)
        return QWebPluginFactory::extension(a0,a1,a2);

    extern bool sipVH_QtWebKit_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebPluginFactory::Extension,const QWebPluginFactory::ExtensionOption*,QWebPluginFactory::ExtensionReturn*);

    return sipVH_QtWebKit_1(sipGILState, sipModuleAPI_QtWebKit_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QObject* sipQWebPluginFactory::create(const QString& a0,const QUrl& a1,const QStringList& a2,const QStringList& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,sipName_QWebPluginFactory,sipName_create);

    if (!sipMeth)
        return 0;

    extern QObject* sipVH_QtWebKit_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QString&,const QUrl&,const QStringList&,const QStringList&);

    return sipVH_QtWebKit_2(sipGILState, sipModuleAPI_QtWebKit_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQWebPluginFactory::refreshPlugins()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_refreshPlugins);

    if (!sipMeth)
    {
        QWebPluginFactory::refreshPlugins();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtWebKit_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QList<QWebPluginFactory::Plugin> sipQWebPluginFactory::plugins() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_QWebPluginFactory,sipName_plugins);

    if (!sipMeth)
        return QList<QWebPluginFactory::Plugin>();

    extern QList<QWebPluginFactory::Plugin> sipVH_QtWebKit_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtWebKit_3(sipGILState, sipModuleAPI_QtWebKit_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QObject* sipQWebPluginFactory::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQWebPluginFactory::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQWebPluginFactory::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQWebPluginFactory::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQWebPluginFactory::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQWebPluginFactory::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQWebPluginFactory::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQWebPluginFactory::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQWebPluginFactory::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QWebPluginFactory_sender, "QWebPluginFactory.sender() -> QObject");

extern "C" {static PyObject *meth_QWebPluginFactory_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWebPluginFactory *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWebPluginFactory, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 473 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_sender, doc_QWebPluginFactory_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_receivers, "QWebPluginFactory.receivers(signal) -> int");

extern "C" {static PyObject *meth_QWebPluginFactory_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQWebPluginFactory *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QWebPluginFactory, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 532 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebKit/sipQtWebKitQWebPluginFactory.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_receivers, doc_QWebPluginFactory_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_timerEvent, "QWebPluginFactory.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QWebPluginFactory_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQWebPluginFactory *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_timerEvent, doc_QWebPluginFactory_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_childEvent, "QWebPluginFactory.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QWebPluginFactory_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQWebPluginFactory *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_childEvent, doc_QWebPluginFactory_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_customEvent, "QWebPluginFactory.customEvent(QEvent)");

extern "C" {static PyObject *meth_QWebPluginFactory_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWebPluginFactory *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_customEvent, doc_QWebPluginFactory_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_connectNotify, "QWebPluginFactory.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWebPluginFactory_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWebPluginFactory *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_connectNotify, doc_QWebPluginFactory_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_disconnectNotify, "QWebPluginFactory.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWebPluginFactory_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWebPluginFactory *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_disconnectNotify, doc_QWebPluginFactory_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_senderSignalIndex, "QWebPluginFactory.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QWebPluginFactory_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWebPluginFactory *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWebPluginFactory, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_senderSignalIndex, doc_QWebPluginFactory_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_isSignalConnected, "QWebPluginFactory.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QWebPluginFactory_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQWebPluginFactory *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_isSignalConnected, doc_QWebPluginFactory_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_plugins, "QWebPluginFactory.plugins() -> list-of-QWebPluginFactory.Plugin");

extern "C" {static PyObject *meth_QWebPluginFactory_plugins(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_plugins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPluginFactory, &sipCpp))
        {
            QList<QWebPluginFactory::Plugin>*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QWebPluginFactory, sipName_plugins);
                return NULL;
            }

            sipRes = new QList<QWebPluginFactory::Plugin>(sipCpp->plugins());

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebPluginFactory_Plugin,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_plugins, doc_QWebPluginFactory_plugins);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_refreshPlugins, "QWebPluginFactory.refreshPlugins()");

extern "C" {static PyObject *meth_QWebPluginFactory_refreshPlugins(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_refreshPlugins(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebPluginFactory, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QWebPluginFactory::refreshPlugins() : sipCpp->refreshPlugins());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_refreshPlugins, doc_QWebPluginFactory_refreshPlugins);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_create, "QWebPluginFactory.create(str, QUrl, list-of-str, list-of-str) -> QObject");

extern "C" {static PyObject *meth_QWebPluginFactory_create(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_create(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString* a0;
        int a0State = 0;
        const QUrl* a1;
        const QStringList* a2;
        int a2State = 0;
        const QStringList* a3;
        int a3State = 0;
        const QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J9J1J1", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1, sipType_QStringList,&a2, &a2State, sipType_QStringList,&a3, &a3State))
        {
            QObject*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QWebPluginFactory, sipName_create);
                return NULL;
            }

            sipRes = sipCpp->create(*a0,*a1,*a2,*a3);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a2),sipType_QStringList,a2State);
            sipReleaseType(const_cast<QStringList *>(a3),sipType_QStringList,a3State);

            return sipConvertFromNewType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_create, doc_QWebPluginFactory_create);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_extension, "QWebPluginFactory.extension(QWebPluginFactory.Extension, QWebPluginFactory.ExtensionOption option=None, QWebPluginFactory.ExtensionReturn output=None) -> bool");

extern "C" {static PyObject *meth_QWebPluginFactory_extension(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_extension(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPluginFactory::Extension a0;
        const QWebPluginFactory::ExtensionOption* a1 = 0;
        QWebPluginFactory::ExtensionReturn* a2 = 0;
        QWebPluginFactory *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_option,
            sipName_output,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|J8J8", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QWebPluginFactory_Extension, &a0, sipType_QWebPluginFactory_ExtensionOption, &a1, sipType_QWebPluginFactory_ExtensionReturn, &a2))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWebPluginFactory::extension(a0,a1,a2) : sipCpp->extension(a0,a1,a2));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_extension, doc_QWebPluginFactory_extension);

    return NULL;
}


PyDoc_STRVAR(doc_QWebPluginFactory_supportsExtension, "QWebPluginFactory.supportsExtension(QWebPluginFactory.Extension) -> bool");

extern "C" {static PyObject *meth_QWebPluginFactory_supportsExtension(PyObject *, PyObject *);}
static PyObject *meth_QWebPluginFactory_supportsExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPluginFactory::Extension a0;
        const QWebPluginFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebPluginFactory, &sipCpp, sipType_QWebPluginFactory_Extension, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWebPluginFactory::supportsExtension(a0) : sipCpp->supportsExtension(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebPluginFactory, sipName_supportsExtension, doc_QWebPluginFactory_supportsExtension);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebPluginFactory(void *, const sipTypeDef *);}
static void *cast_QWebPluginFactory(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWebPluginFactory)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QWebPluginFactory *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebPluginFactory(void *, int);}
static void release_QWebPluginFactory(void *sipCppV,int)
{
    QWebPluginFactory *sipCpp = reinterpret_cast<QWebPluginFactory *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebPluginFactory(sipSimpleWrapper *);}
static void dealloc_QWebPluginFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebPluginFactory *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebPluginFactory(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWebPluginFactory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebPluginFactory(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebPluginFactory *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQWebPluginFactory(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebPluginFactory[] = {{162, 0, 1}};


static PyMethodDef methods_QWebPluginFactory[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QWebPluginFactory_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QWebPluginFactory_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_create), meth_QWebPluginFactory_create, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPluginFactory_create)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QWebPluginFactory_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QWebPluginFactory_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_extension), (PyCFunction)meth_QWebPluginFactory_extension, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebPluginFactory_extension)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QWebPluginFactory_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_plugins), meth_QWebPluginFactory_plugins, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPluginFactory_plugins)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QWebPluginFactory_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_refreshPlugins), meth_QWebPluginFactory_refreshPlugins, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPluginFactory_refreshPlugins)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QWebPluginFactory_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QWebPluginFactory_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_supportsExtension), meth_QWebPluginFactory_supportsExtension, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebPluginFactory_supportsExtension)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QWebPluginFactory_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL}
};

PyDoc_STRVAR(doc_QWebPluginFactory, "\1QWebPluginFactory(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWebKit_QWebPluginFactory = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebPluginFactory,
        {0}
    },
    {
        sipNameNr_QWebPluginFactory,
        {0, 0, 1},
        14, methods_QWebPluginFactory,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebPluginFactory,
    -1,
    -1,
    supers_QWebPluginFactory,
    0,
    init_type_QWebPluginFactory,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebPluginFactory,
    0,
    0,
    0,
    release_QWebPluginFactory,
    cast_QWebPluginFactory,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebPluginFactory::staticMetaObject,
    0,
    0,
    0
};
