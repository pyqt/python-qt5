/*
 * Module code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:23 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtPositioning.h"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeoshape.sip"
#include <qgeoshape.h>
#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeopositioninfo.sip"
#include <qgeopositioninfo.h>
#line 35 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeopositioninfosource.sip"
#include <qgeopositioninfosource.h>
#line 38 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeopositioninfosource.sip"
#include <qgeopositioninfosource.h>
#line 41 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeosatelliteinfosource.sip"
#include <qgeosatelliteinfosource.h>
#line 44 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 47 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeoareamonitorinfo.sip"
#include <qgeoareamonitorinfo.h>
#line 50 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeoareamonitorsource.sip"
#include <qgeoareamonitorsource.h>
#line 53 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeoareamonitorsource.sip"
#include <qgeoareamonitorsource.h>
#line 56 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 26 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 59 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeocoordinate.sip"
#include <qgeocoordinate.h>
#line 62 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeosatelliteinfo.sip"
#include <qgeosatelliteinfo.h>
#line 65 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeoaddress.sip"
#include <qgeoaddress.h>
#line 68 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeocircle.sip"
#include <qgeocircle.h>
#line 71 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeolocation.sip"
#include <qgeolocation.h>
#line 74 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeorectangle.sip"
#include <qgeorectangle.h>
#line 77 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"

/* Define the strings used by this module. */
const char sipStrings_QtPositioning[] = {
    'Q', 'G', 'e', 'o', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 'S', 'o', 'u', 'r', 'c', 'e', ':', ':', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'i', 'n', 'g', 'M', 'e', 't', 'h', 'o', 'd', 's', 0,
    'Q', 'G', 'e', 'o', 'A', 'r', 'e', 'a', 'M', 'o', 'n', 'i', 't', 'o', 'r', 'S', 'o', 'u', 'r', 'c', 'e', ':', ':', 'A', 'r', 'e', 'a', 'M', 'o', 'n', 'i', 't', 'o', 'r', 'F', 'e', 'a', 't', 'u', 'r', 'e', 's', 0,
    'Q', 'G', 'e', 'o', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 'S', 'o', 'u', 'r', 'c', 'e', ':', ':', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'i', 'n', 'g', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'Q', 'G', 'e', 'o', 'A', 'r', 'e', 'a', 'M', 'o', 'n', 'i', 't', 'o', 'r', 'S', 'o', 'u', 'r', 'c', 'e', ':', ':', 'A', 'r', 'e', 'a', 'M', 'o', 'n', 'i', 't', 'o', 'r', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'Q', 'N', 'm', 'e', 'a', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 'S', 'o', 'u', 'r', 'c', 'e', ':', ':', 'U', 'p', 'd', 'a', 't', 'e', 'M', 'o', 'd', 'e', 0,
    'f', 'r', 'o', 'm', 'S', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'i', 'n', 'g', 'M', 'e', 't', 'h', 'o', 'd', 's', 'O', 'n', 'l', 'y', 0,
    'D', 'e', 'g', 'r', 'e', 'e', 's', 'M', 'i', 'n', 'u', 't', 'e', 's', 'S', 'e', 'c', 'o', 'n', 'd', 's', 'W', 'i', 't', 'h', 'H', 'e', 'm', 'i', 's', 'p', 'h', 'e', 'r', 'e', 0,
    'Q', 'G', 'e', 'o', 'S', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 'I', 'n', 'f', 'o', ':', ':', 'S', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 'S', 'y', 's', 't', 'e', 'm', 0,
    'Q', 'G', 'e', 'o', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', ':', ':', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'G', 'e', 'o', 'S', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 'I', 'n', 'f', 'o', 'S', 'o', 'u', 'r', 'c', 'e', ':', ':', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 't', 'P', 'r', 'e', 'f', 'e', 'r', 'r', 'e', 'd', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'i', 'n', 'g', 'M', 'e', 't', 'h', 'o', 'd', 's', 0,
    'N', 'o', 'n', 'S', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'i', 'n', 'g', 'M', 'e', 't', 'h', 'o', 'd', 's', 0,
    'Q', 'G', 'e', 'o', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', ':', ':', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'G', 'e', 'o', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 'S', 'o', 'u', 'r', 'c', 'e', ':', ':', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'G', 'e', 'o', 'S', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 'I', 'n', 'f', 'o', ':', ':', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'D', 'e', 'g', 'r', 'e', 'e', 's', 'M', 'i', 'n', 'u', 't', 'e', 's', 'W', 'i', 't', 'h', 'H', 'e', 'm', 'i', 's', 'p', 'h', 'e', 'r', 'e', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'A', 'r', 'e', 'a', 'M', 'o', 'n', 'i', 't', 'o', 'r', 'F', 'e', 'a', 't', 'u', 'r', 'e', 's', 0,
    'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'A', 'r', 'e', 'a', 'M', 'o', 'n', 'i', 't', 'o', 'r', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'Q', 'G', 'e', 'o', 'A', 'r', 'e', 'a', 'M', 'o', 'n', 'i', 't', 'o', 'r', 'S', 'o', 'u', 'r', 'c', 'e', ':', ':', 'E', 'r', 'r', 'o', 'r', 0,
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'C', 'o', 'r', 'e', '.', 'p', 'y', 'q', 't', 'W', 'r', 'a', 'p', 'p', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'U', 's', 'e', 'r', 'E', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', 'R', 'a', 'n', 'g', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'i', 'n', 'g', 'M', 'e', 't', 'h', 'o', 'd', 's', 0,
    'p', 'r', 'e', 'f', 'e', 'r', 'r', 'e', 'd', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'i', 'n', 'g', 'M', 'e', 't', 'h', 'o', 'd', 's', 0,
    'Q', 'G', 'e', 'o', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', ':', ':', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'G', 'e', 'o', 'A', 'r', 'e', 'a', 'M', 'o', 'n', 'i', 't', 'o', 'r', 'I', 'n', 'f', 'o', '>', 0,
    's', 'e', 't', 'N', 'o', 't', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 's', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'G', 'e', 'o', 'S', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 'I', 'n', 'f', 'o', '>', 0,
    'u', 's', 'e', 'r', 'E', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', 'R', 'a', 'n', 'g', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'p', 'a', 'r', 's', 'e', 'P', 'o', 's', 'I', 'n', 'f', 'o', 'F', 'r', 'o', 'm', 'N', 'm', 'e', 'a', 'D', 'a', 't', 'a', 0,
    'I', 'n', 's', 'u', 'f', 'f', 'i', 'c', 'i', 'e', 'n', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 0,
    'Q', 'N', 'm', 'e', 'a', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    's', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 's', 'I', 'n', 'V', 'i', 'e', 'w', 'U', 'p', 'd', 'a', 't', 'e', 'd', 0,
    'Q', 'G', 'e', 'o', 'S', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 'I', 'n', 'f', 'o', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    's', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 's', 'I', 'n', 'U', 's', 'e', 'U', 'p', 'd', 'a', 't', 'e', 'd', 0,
    's', 'e', 't', 'S', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 'I', 'd', 'e', 'n', 't', 'i', 'f', 'i', 'e', 'r', 0,
    'Q', 'G', 'e', 'o', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'n', 'o', 't', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 's', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'G', 'e', 'o', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', '>', 0,
    'm', 'i', 'n', 'i', 'm', 'u', 'm', 'U', 'p', 'd', 'a', 't', 'e', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    'A', 'l', 'l', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'i', 'n', 'g', 'M', 'e', 't', 'h', 'o', 'd', 's', 0,
    'D', 'e', 'g', 'r', 'e', 'e', 's', 'M', 'i', 'n', 'u', 't', 'e', 's', 'S', 'e', 'c', 'o', 'n', 'd', 's', 0,
    'D', 'e', 'g', 'r', 'e', 'e', 's', 'W', 'i', 't', 'h', 'H', 'e', 'm', 'i', 's', 'p', 'h', 'e', 'r', 'e', 0,
    's', 'e', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'A', 'n', 'y', 'A', 'r', 'e', 'a', 'M', 'o', 'n', 'i', 't', 'o', 'r', 'F', 'e', 'a', 't', 'u', 'r', 'e', 0,
    'Q', 'G', 'e', 'o', 'A', 'r', 'e', 'a', 'M', 'o', 'n', 'i', 't', 'o', 'r', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'Q', 'G', 'e', 'o', 'S', 'h', 'a', 'p', 'e', ':', ':', 'S', 'h', 'a', 'p', 'e', 'T', 'y', 'p', 'e', 0,
    'N', 'o', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'i', 'n', 'g', 'M', 'e', 't', 'h', 'o', 'd', 's', 0,
    'a', 't', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 'A', 'n', 'd', 'A', 'z', 'i', 'm', 'u', 't', 'h', 0,
    's', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 'I', 'd', 'e', 'n', 't', 'i', 'f', 'i', 'e', 'r', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'Q', 'G', 'e', 'o', 'A', 'r', 'e', 'a', 'M', 'o', 'n', 'i', 't', 'o', 'r', 'I', 'n', 'f', 'o', 0,
    'P', 'y', 'Q', 't', '5', '.', 'Q', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'i', 'n', 'g', 0,
    's', 'e', 't', 'S', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 'S', 'y', 's', 't', 'e', 'm', 0,
    'H', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 'A', 'c', 'c', 'u', 'r', 'a', 'c', 'y', 0,
    'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 'S', 'o', 'u', 'r', 'c', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 't', 'S', 'i', 'g', 'n', 'a', 'l', 'S', 't', 'r', 'e', 'n', 'g', 't', 'h', 0,
    'Q', 'G', 'e', 'o', 'S', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 'I', 'n', 'f', 'o', 0,
    'l', 'a', 's', 't', 'K', 'n', 'o', 'w', 'n', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'M', 'a', 'g', 'n', 'e', 't', 'i', 'c', 'V', 'a', 'r', 'i', 'a', 't', 'i', 'o', 'n', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 0,
    's', 'e', 't', 'U', 'p', 'd', 'a', 't', 'e', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    'i', 's', 'S', 'i', 'g', 'n', 'a', 'l', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    's', 'e', 'n', 'd', 'e', 'r', 'S', 'i', 'g', 'n', 'a', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'A', 'c', 'c', 'u', 'r', 'a', 'c', 'y', 0,
    'Q', 'G', 'e', 'o', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'S', 'o', 'u', 'r', 'c', 'e', 's', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    's', 'a', 't', 'e', 'l', 'l', 'i', 't', 'e', 'S', 'y', 's', 't', 'e', 'm', 0,
    'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'U', 'p', 'd', 'a', 't', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    's', 't', 'a', 'r', 't', 'M', 'o', 'n', 'i', 't', 'o', 'r', 'i', 'n', 'g', 0,
    'i', 's', 'T', 'e', 'x', 't', 'G', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'd', 0,
    'S', 'i', 'm', 'u', 'l', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'T', 'i', 'm', 'e', 'o', 'u', 't', 0,
    's', 'i', 'g', 'n', 'a', 'l', 'S', 't', 'r', 'e', 'n', 'g', 't', 'h', 0,
    's', 'e', 't', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'B', 'o', 'x', 0,
    'D', 'e', 'g', 'r', 'e', 'e', 's', 'M', 'i', 'n', 'u', 't', 'e', 's', 0,
    'Q', 'G', 'e', 'o', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 0,
    'm', 'o', 'n', 'i', 't', 'o', 'r', 'E', 'x', 'p', 'i', 'r', 'e', 'd', 0,
    'a', 'c', 't', 'i', 'v', 'e', 'M', 'o', 'n', 'i', 't', 'o', 'r', 's', 0,
    's', 't', 'o', 'p', 'M', 'o', 'n', 'i', 't', 'o', 'r', 'i', 'n', 'g', 0,
    's', 'e', 't', 'C', 'o', 'u', 'n', 't', 'r', 'y', 'C', 'o', 'd', 'e', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    's', 'e', 't', 'B', 'o', 't', 't', 'o', 'm', 'R', 'i', 'g', 'h', 't', 0,
    'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'G', 'e', 'o', 'R', 'e', 'c', 't', 'a', 'n', 'g', 'l', 'e', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'T', 'i', 'm', 'e', 'o', 'u', 't', 0,
    'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 'S', 'p', 'e', 'e', 'd', 0,
    's', 'e', 't', 'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'U', 'p', 'd', 'a', 't', 'e', 0,
    's', 'e', 't', 'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 0,
    's', 'e', 't', 'E', 'x', 'p', 'i', 'r', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'P', 'o', 's', 't', 'a', 'l', 'C', 'o', 'd', 'e', 0,
    's', 'e', 't', 'B', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 0,
    'R', 'e', 'a', 'l', 'T', 'i', 'm', 'e', 'M', 'o', 'd', 'e', 0,
    's', 't', 'a', 'r', 't', 'U', 'p', 'd', 'a', 't', 'e', 's', 0,
    's', 'e', 't', 'T', 'i', 'm', 'e', 's', 't', 'a', 'm', 'p', 0,
    'Q', 'G', 'e', 'o', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'L', 'o', 'n', 'g', 'i', 't', 'u', 'd', 'e', 0,
    'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', '3', 'D', 0,
    'C', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', '2', 'D', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'i', 's', 'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 0,
    'h', 'a', 's', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    's', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'e', 'x', 't', 'e', 'n', 'd', 'S', 'h', 'a', 'p', 'e', 0,
    's', 't', 'o', 'p', 'U', 'p', 'd', 'a', 't', 'e', 's', 0,
    'C', 'l', 'o', 's', 'e', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'G', 'r', 'o', 'u', 'n', 'd', 'S', 'p', 'e', 'e', 'd', 0,
    'b', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'B', 'o', 'x', 0,
    's', 'e', 't', 'A', 'l', 't', 'i', 't', 'u', 'd', 'e', 0,
    's', 'e', 't', 'L', 'a', 't', 'i', 't', 'u', 'd', 'e', 0,
    'a', 'r', 'e', 'a', 'E', 'n', 't', 'e', 'r', 'e', 'd', 0,
    's', 'e', 't', 'D', 'i', 's', 't', 'r', 'i', 'c', 't', 0,
    'c', 'o', 'u', 'n', 't', 'r', 'y', 'C', 'o', 'd', 'e', 0,
    'Q', 'G', 'e', 'o', 'A', 'd', 'd', 'r', 'e', 's', 's', 0,
    'A', 'c', 'c', 'e', 's', 's', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 't', 'T', 'o', 'p', 'R', 'i', 'g', 'h', 't', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 'T', 'y', 'p', 'e', 0,
    'b', 'o', 't', 't', 'o', 'm', 'R', 'i', 'g', 'h', 't', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'M', 'o', 'd', 'e', 0,
    'C', 'i', 'r', 'c', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'A', 'd', 'd', 'r', 'e', 's', 's', 0,
    'c', 'o', 'o', 'r', 'd', 'i', 'n', 'a', 't', 'e', 0,
    'd', 'i', 's', 't', 'a', 'n', 'c', 'e', 'U', 'p', 0,
    'd', 'i', 's', 't', 'a', 'n', 'c', 'e', 'T', 'o', 0,
    'Q', 'G', 'e', 'o', 'C', 'i', 'r', 'c', 'l', 'e', 0,
    'a', 'r', 'e', 'a', 'E', 'x', 'i', 't', 'e', 'd', 0,
    's', 'o', 'u', 'r', 'c', 'e', 'N', 'a', 'm', 'e', 0,
    'e', 'x', 'p', 'i', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'i', 'd', 'e', 'n', 't', 'i', 'f', 'i', 'e', 'r', 0,
    'p', 'o', 's', 't', 'a', 'l', 'C', 'o', 'd', 'e', 0,
    's', 'e', 't', 'C', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'b', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 0,
    's', 'e', 't', 'T', 'o', 'p', 'L', 'e', 'f', 't', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    't', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 'd', 0,
    'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 's', 0,
    '_', '_', 'r', 's', 'h', 'i', 'f', 't', '_', '_', 0,
    '_', '_', 'l', 's', 'h', 'i', 'f', 't', '_', '_', 0,
    '_', '_', 'i', 'n', 'v', 'e', 'r', 't', '_', '_', 0,
    'E', 'l', 'e', 'v', 'a', 't', 'i', 'o', 'n', 0,
    't', 'i', 'm', 'e', 's', 't', 'a', 'm', 'p', 0,
    'a', 'z', 'i', 'm', 'u', 't', 'h', 'T', 'o', 0,
    'l', 'o', 'n', 'g', 'i', 't', 'u', 'd', 'e', 0,
    's', 'e', 't', 'R', 'a', 'd', 'i', 'u', 's', 0,
    's', 'e', 't', 'C', 'e', 'n', 't', 'e', 'r', 0,
    'Q', 'G', 'e', 'o', 'S', 'h', 'a', 'p', 'e', 0,
    's', 'e', 't', 'S', 't', 'r', 'e', 'e', 't', 0,
    's', 'e', 't', 'C', 'o', 'u', 'n', 't', 'y', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 0,
    's', 'e', 't', 'H', 'e', 'i', 'g', 'h', 't', 0,
    'r', 'e', 'c', 'e', 'i', 'v', 'e', 'r', 's', 0,
    'U', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', 0,
    's', 'e', 't', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    't', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 0,
    'p', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'a', 'l', 't', 'i', 't', 'u', 'd', 'e', 0,
    'l', 'a', 't', 'i', 't', 'u', 'd', 'e', 0,
    'd', 'i', 's', 't', 'r', 'i', 'c', 't', 0,
    's', 'e', 't', 'S', 't', 'a', 't', 'e', 0,
    'n', 'a', 'm', 'e', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'W', 'i', 'd', 't', 'h', 0,
    't', 'o', 'p', 'R', 'i', 'g', 'h', 't', 0,
    't', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 's', 0,
    '_', '_', 'b', 'o', 'o', 'l', '_', '_', 0,
    '_', '_', 'i', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'a', 'n', 'd', '_', '_', 0,
    'G', 'L', 'O', 'N', 'A', 'S', 'S', 0,
    'D', 'e', 'g', 'r', 'e', 'e', 's', 0,
    's', 'e', 't', 'A', 'r', 'e', 'a', 0,
    's', 'e', 't', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'C', 'i', 't', 'y', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 0,
    'c', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'a', 'd', 'd', 'r', 'e', 's', 's', 0,
    'N', 'o', 'E', 'r', 'r', 'o', 'r', 0,
    't', 'i', 'm', 'e', 'o', 'u', 't', 0,
    'f', 'i', 'l', 't', 'e', 'r', 's', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'o', 'p', 't', 'i', 'o', 'n', 's', 0,
    'i', 's', 'E', 'm', 'p', 't', 'y', 0,
    't', 'o', 'p', 'L', 'e', 'f', 't', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 0,
    '_', '_', 'a', 'n', 'd', '_', '_', 0,
    '_', '_', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'n', 't', '_', '_', 0,
    '_', '_', 'i', 'o', 'r', '_', '_', 0,
    'r', 'a', 'd', 'i', 'u', 's', 0,
    's', 't', 'r', 'e', 'e', 't', 0,
    'c', 'o', 'u', 'n', 't', 'y', 0,
    'u', 'n', 'i', 't', 'e', 'd', 0,
    'c', 'e', 'n', 't', 'e', 'r', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 0,
    's', 'e', 'n', 'd', 'e', 'r', 0,
    'v', 'a', 'l', 'u', 'e', '9', 0,
    'v', 'a', 'l', 'u', 'e', '8', 0,
    'v', 'a', 'l', 'u', 'e', '7', 0,
    'v', 'a', 'l', 'u', 'e', '6', 0,
    'v', 'a', 'l', 'u', 'e', '5', 0,
    'v', 'a', 'l', 'u', 'e', '4', 0,
    'v', 'a', 'l', 'u', 'e', '3', 0,
    'v', 'a', 'l', 'u', 'e', '2', 0,
    'v', 'a', 'l', 'u', 'e', '1', 0,
    'v', 'a', 'l', 'u', 'e', '0', 0,
    's', 'y', 'm', 'b', 'o', 'l', 0,
    'h', 'e', 'i', 'g', 'h', 't', 0,
    's', 'u', 'f', 'f', 'i', 'x', 0,
    'p', 'r', 'e', 'f', 'i', 'x', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 0,
    'l', 'o', 'c', 'a', 'l', 'e', 0,
    'f', 'o', 'r', 'm', 'a', 't', 0,
    'o', 'b', 'j', 'e', 'c', 't', 0,
    'p', 'a', 'r', 'e', 'n', 't', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
    '_', '_', 'o', 'r', '_', '_', 0,
    'e', 'r', 'r', 'o', 'r', 0,
    'w', 'i', 'd', 't', 'h', 0,
    'c', 'l', 'e', 'a', 'r', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'm', 's', 'e', 'c', 's', 0,
    's', 't', 'a', 't', 'e', 0,
    'a', 'r', 'e', 'a', 0,
    'c', 'i', 't', 'y', 0,
    't', 'e', 'x', 't', 0,
    'm', 'o', 'd', 'e', 0,
    't', 'y', 'p', 'e', 0,
    'n', 'a', 'm', 'e', 0,
    'b', 'a', 's', 'e', 0,
    'f', 'r', 'o', 'm', 0,
    's', 'o', 'r', 't', 0,
    'G', 'P', 'S', 0,
};
#line 25 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeoareamonitorinfo.sip"
#include <qgeoareamonitorinfo.h>
#line 25 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeocoordinate.sip"
#include <qgeocoordinate.h>
#line 25 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeopositioninfo.sip"
#include <qgeopositioninfo.h>
#line 25 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeopositioninfosource.sip"
#include <qgeopositioninfosource.h>
#line 25 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeosatelliteinfo.sip"
#include <qgeosatelliteinfo.h>
#line 25 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeoshape.sip"
#include <qgeoshape.h>
#line 334 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"

bool sipVH_QtPositioning_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const char*a0,int a1,QGeoPositionInfo*a2,bool*a3)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "siD",a0,a1,a2,sipType_QGeoPositionInfo,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(bb)", &sipRes, a3);

    return sipRes;
}

QGeoPositionInfoSource::Error sipVH_QtPositioning_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QGeoPositionInfoSource::Error sipRes = (QGeoPositionInfoSource::Error)0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QGeoPositionInfoSource_Error, &sipRes);

    return sipRes;
}

QGeoPositionInfoSource::PositioningMethods sipVH_QtPositioning_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QGeoPositionInfoSource::PositioningMethods sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QGeoPositionInfoSource_PositioningMethods, &sipRes);

    return sipRes;
}

QGeoPositionInfo sipVH_QtPositioning_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, bool a0)
{
    QGeoPositionInfo sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "b",a0);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QGeoPositionInfo, &sipRes);

    return sipRes;
}

QGeoSatelliteInfoSource::Error sipVH_QtPositioning_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QGeoSatelliteInfoSource::Error sipRes = (QGeoSatelliteInfoSource::Error)0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QGeoSatelliteInfoSource_Error, &sipRes);

    return sipRes;
}

void sipVH_QtPositioning_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QGeoPositionInfoSource::PositioningMethods a0)
{
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N",new QGeoPositionInfoSource::PositioningMethods(a0),sipType_QGeoPositionInfoSource_PositioningMethods,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "Z");
}

QList<QGeoAreaMonitorInfo> sipVH_QtPositioning_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const QGeoShape& a0)
{
    QList<QGeoAreaMonitorInfo> sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N",new QGeoShape(a0),sipType_QGeoShape,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QList_0100QGeoAreaMonitorInfo, &sipRes);

    return sipRes;
}

QList<QGeoAreaMonitorInfo> sipVH_QtPositioning_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QList<QGeoAreaMonitorInfo> sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QList_0100QGeoAreaMonitorInfo, &sipRes);

    return sipRes;
}

bool sipVH_QtPositioning_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const QGeoAreaMonitorInfo& a0,const char*a1)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "Ns",new QGeoAreaMonitorInfo(a0),sipType_QGeoAreaMonitorInfo,NULL,a1);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH_QtPositioning_9(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const QGeoAreaMonitorInfo& a0)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "N",new QGeoAreaMonitorInfo(a0),sipType_QGeoAreaMonitorInfo,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

QGeoAreaMonitorSource::AreaMonitorFeatures sipVH_QtPositioning_10(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QGeoAreaMonitorSource::AreaMonitorFeatures sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_QGeoAreaMonitorSource_AreaMonitorFeatures, &sipRes);

    return sipRes;
}

QGeoAreaMonitorSource::Error sipVH_QtPositioning_11(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QGeoAreaMonitorSource::Error sipRes = (QGeoAreaMonitorSource::Error)0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_QGeoAreaMonitorSource_Error, &sipRes);

    return sipRes;
}

QGeoPositionInfoSource* sipVH_QtPositioning_12(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    QGeoPositionInfoSource* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_QGeoPositionInfoSource, &sipRes);

    return sipRes;
}

void sipVH_QtPositioning_13(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, QGeoPositionInfoSource*a0)
{
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D",a0,sipType_QGeoPositionInfoSource,NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "Z");
}


extern "C" {static PyObject *slot___rshift__(PyObject *,PyObject *);}
static PyObject *slot___rshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream* a0;
        QGeoAreaMonitorInfo* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QGeoAreaMonitorInfo, &a1))
        {
            QDataStream*sipRes;

            sipRes = &(*a0 >> *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QGeoCoordinate* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QGeoCoordinate, &a1))
        {
            QDataStream*sipRes;

            sipRes = &(*a0 >> *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QGeoPositionInfo* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QGeoPositionInfo, &a1))
        {
            QDataStream*sipRes;

            sipRes = &(*a0 >> *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QGeoSatelliteInfo* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QGeoSatelliteInfo, &a1))
        {
            QDataStream*sipRes;

            sipRes = &(*a0 >> *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        QGeoShape* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QGeoShape, &a1))
        {
            QDataStream*sipRes;

            sipRes = &(*a0 >> *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot___lshift__(PyObject *,PyObject *);}
static PyObject *slot___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QDataStream* a0;
        const QGeoAreaMonitorInfo* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QGeoAreaMonitorInfo, &a1))
        {
            QDataStream*sipRes;

            sipRes = &(*a0 << *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QGeoCoordinate* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QGeoCoordinate, &a1))
        {
            QDataStream*sipRes;

            sipRes = &(*a0 << *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QGeoPositionInfo* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QGeoPositionInfo, &a1))
        {
            QDataStream*sipRes;

            sipRes = &(*a0 << *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QGeoSatelliteInfo* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QGeoSatelliteInfo, &a1))
        {
            QDataStream*sipRes;

            sipRes = &(*a0 << *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream* a0;
        const QGeoShape* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_QDataStream, &a0, sipType_QGeoShape, &a1))
        {
            QDataStream*sipRes;

            sipRes = &(*a0 << *a1);

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotExtenderDef slotExtenders[] = {
    {(void *)slot___rshift__, rshift_slot, {0, 0, 0}},
    {(void *)slot___lshift__, lshift_slot, {0, 0, 0}},
    {NULL, (sipPySlotType)0, {0, 0, 0}}
};


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QGeoShape(void **);}
static const sipTypeDef *sipSubClass_QGeoShape(void **sipCppRet)
{
    QGeoShape *sipCpp = reinterpret_cast<QGeoShape *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 38 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeoshape.sip"
    switch (sipCpp->type())
    {
    case QGeoShape::CircleType:
        sipType = sipType_QGeoCircle;
        break;
    
    case QGeoShape::RectangleType:
        sipType = sipType_QGeoRectangle;
        break;
    
    default:
        sipType = 0;
    }
#line 668 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"

    return sipType;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QGeoPositionInfoSource(void **);}
static const sipTypeDef *sipSubClass_QGeoPositionInfoSource(void **sipCppRet)
{
    QObject *sipCpp = reinterpret_cast<QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 38 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeopositioninfosource.sip"
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QGeoPositionInfoSource, &sipType_QGeoPositionInfoSource, 3, 1},
        {sipName_QGeoSatelliteInfoSource, &sipType_QGeoSatelliteInfoSource, -1, 2},
        {sipName_QGeoAreaMonitorSource, &sipType_QGeoAreaMonitorSource, -1, -1},
        {sipName_QNmeaPositionInfoSource, &sipType_QNmeaPositionInfoSource, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
#line 710 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningcmodule.cpp"

    return sipType;
}


extern "C" {static PyObject *slot_QGeoPositionInfoSource_PositioningMethod___or__(PyObject *,PyObject *);}
static PyObject *slot_QGeoPositionInfoSource_PositioningMethod___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        QGeoPositionInfoSource::PositioningMethod a0;
        QGeoPositionInfoSource::PositioningMethods* a1;
        int a1State = 0;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "EJ1", sipType_QGeoPositionInfoSource_PositioningMethod, &a0, sipType_QGeoPositionInfoSource_PositioningMethods, &a1, &a1State))
        {
            QGeoPositionInfoSource::PositioningMethods*sipRes;

            sipRes = new QGeoPositionInfoSource::PositioningMethods((a0 | *a1));
            sipReleaseType(a1,sipType_QGeoPositionInfoSource_PositioningMethods,a1State);

            return sipConvertFromNewType(sipRes,sipType_QGeoPositionInfoSource_PositioningMethods,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QGeoPositionInfoSource_PositioningMethod[] = {
    {(void *)slot_QGeoPositionInfoSource_PositioningMethod___or__, or_slot},
    {0, (sipPySlotType)0}
};

static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QNmeaPositionInfoSource__UpdateMode, {0}}, sipNameNr_UpdateMode, 28, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGeoShape__ShapeType, {0}}, sipNameNr_ShapeType, 23, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGeoSatelliteInfoSource__Error, {0}}, sipNameNr_Error, 21, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGeoSatelliteInfo__SatelliteSystem, {0}}, sipNameNr_SatelliteSystem, 18, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGeoSatelliteInfo__Attribute, {0}}, sipNameNr_Attribute, 18, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGeoPositionInfoSource__PositioningMethod, {0}}, sipNameNr_PositioningMethod, 13, slots_QGeoPositionInfoSource_PositioningMethod},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGeoPositionInfoSource__Error, {0}}, sipNameNr_Error, 13, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGeoPositionInfo__Attribute, {0}}, sipNameNr_Attribute, 11, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGeoCoordinate__CoordinateFormat, {0}}, sipNameNr_CoordinateFormat, 7, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGeoCoordinate__CoordinateType, {0}}, sipNameNr_CoordinateType, 7, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGeoAreaMonitorSource__AreaMonitorFeature, {0}}, sipNameNr_AreaMonitorFeature, 2, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGeoAreaMonitorSource__Error, {0}}, sipNameNr_Error, 2, NULL},
};


/*
 * This defines each type in this module.
 */
static sipTypeDef *typesTable[] = {
    &sipTypeDef_QtPositioning_QGeoAddress.super.ctd_base,
    &sipTypeDef_QtPositioning_QGeoAreaMonitorInfo.super.ctd_base,
    &sipTypeDef_QtPositioning_QGeoAreaMonitorSource.super.ctd_base,
    &enumTypes[10].etd_base,
    &sipTypeDef_QtPositioning_QGeoAreaMonitorSource_AreaMonitorFeatures.super.ctd_base,
    &enumTypes[11].etd_base,
    &sipTypeDef_QtPositioning_QGeoCircle.super.ctd_base,
    &sipTypeDef_QtPositioning_QGeoCoordinate.super.ctd_base,
    &enumTypes[8].etd_base,
    &enumTypes[9].etd_base,
    &sipTypeDef_QtPositioning_QGeoLocation.super.ctd_base,
    &sipTypeDef_QtPositioning_QGeoPositionInfo.super.ctd_base,
    &enumTypes[7].etd_base,
    &sipTypeDef_QtPositioning_QGeoPositionInfoSource.super.ctd_base,
    &enumTypes[6].etd_base,
    &enumTypes[5].etd_base,
    &sipTypeDef_QtPositioning_QGeoPositionInfoSource_PositioningMethods.super.ctd_base,
    &sipTypeDef_QtPositioning_QGeoRectangle.super.ctd_base,
    &sipTypeDef_QtPositioning_QGeoSatelliteInfo.super.ctd_base,
    &enumTypes[4].etd_base,
    &enumTypes[3].etd_base,
    &sipTypeDef_QtPositioning_QGeoSatelliteInfoSource.super.ctd_base,
    &enumTypes[2].etd_base,
    &sipTypeDef_QtPositioning_QGeoShape.super.ctd_base,
    &enumTypes[1].etd_base,
    &sipTypeDef_QtPositioning_QList_0100QGeoAreaMonitorInfo.mtd_base,
    &sipTypeDef_QtPositioning_QList_0100QGeoCoordinate.mtd_base,
    &sipTypeDef_QtPositioning_QList_0100QGeoSatelliteInfo.mtd_base,
    &sipTypeDef_QtPositioning_QNmeaPositionInfoSource.super.ctd_base,
    &enumTypes[0].etd_base,
};


/*
 * This defines the virtual handlers that this module implements and can be
 * used by other modules.
 */
static sipVirtHandlerFunc virtHandlersTable[] = {
    (sipVirtHandlerFunc)sipVH_QtPositioning_0,
    (sipVirtHandlerFunc)sipVH_QtPositioning_1,
    (sipVirtHandlerFunc)sipVH_QtPositioning_2,
    (sipVirtHandlerFunc)sipVH_QtPositioning_3,
    (sipVirtHandlerFunc)sipVH_QtPositioning_4,
    (sipVirtHandlerFunc)sipVH_QtPositioning_5,
    (sipVirtHandlerFunc)sipVH_QtPositioning_6,
    (sipVirtHandlerFunc)sipVH_QtPositioning_7,
    (sipVirtHandlerFunc)sipVH_QtPositioning_8,
    (sipVirtHandlerFunc)sipVH_QtPositioning_9,
    (sipVirtHandlerFunc)sipVH_QtPositioning_10,
    (sipVirtHandlerFunc)sipVH_QtPositioning_11,
    (sipVirtHandlerFunc)sipVH_QtPositioning_12,
    (sipVirtHandlerFunc)sipVH_QtPositioning_13,
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt5.QtCore", 1, NULL},
    {NULL, -1, NULL}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QGeoShape, {23, 255, 0}, NULL},
    {sipSubClass_QGeoPositionInfoSource, {162, 0, 0}, NULL},
    {NULL, {0, 0, 0}, NULL}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtPositioning = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt5_QtPositioning,
    0,
    -1,
    sipStrings_QtPositioning,
    importsTable,
    NULL,
    30,
    typesTable,
    NULL,
    0,
    NULL,
    0,
    NULL,
    virtHandlersTable,
    NULL,
    convertorsTable,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    slotExtenders,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtPositioning;
const sipExportedModuleDef *sipModuleAPI_QtPositioning_QtCore;

sip_qt_metaobject_func sip_QtPositioning_qt_metaobject;
sip_qt_metacall_func sip_QtPositioning_qt_metacall;
sip_qt_metacast_func sip_QtPositioning_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtPositioning
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtPositioning
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt5.QtPositioning",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt5_QtPositioning, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt5_QtPositioning), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule(SIP_MODULE_NAME);
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>(SIP_MODULE_NAME));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == NULL || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_QtPositioning = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, SIP_MODULE_NAME "._C_API"));
#else
    sipAPI_QtPositioning = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_QtPositioning == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtPositioning,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    sip_QtPositioning_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtPositioning_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtPositioning_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    if (!sip_QtPositioning_qt_metacast)
        Py_FatalError("Unable to import qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtPositioning,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    /* Get the APIs of the modules that this one is dependent on. */
    sipModuleAPI_QtPositioning_QtCore = sipModuleAPI_QtPositioning.em_imports[0].im_module;

    SIP_MODULE_RETURN(sipModule);
}
