/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:23 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtPositioning.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeocircle.sip"
#include <qgeocircle.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoCircle.cpp"

#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeocoordinate.sip"
#include <qgeocoordinate.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoCircle.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeoshape.sip"
#include <qgeoshape.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoCircle.cpp"


PyDoc_STRVAR(doc_QGeoCircle_setCenter, "QGeoCircle.setCenter(QGeoCoordinate)");

extern "C" {static PyObject *meth_QGeoCircle_setCenter(PyObject *, PyObject *);}
static PyObject *meth_QGeoCircle_setCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCoordinate* a0;
        QGeoCircle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoCircle, &sipCpp, sipType_QGeoCoordinate, &a0))
        {
            sipCpp->setCenter(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCircle, sipName_setCenter, doc_QGeoCircle_setCenter);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCircle_center, "QGeoCircle.center() -> QGeoCoordinate");

extern "C" {static PyObject *meth_QGeoCircle_center(PyObject *, PyObject *);}
static PyObject *meth_QGeoCircle_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCircle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCircle, &sipCpp))
        {
            QGeoCoordinate*sipRes;

            sipRes = new QGeoCoordinate(sipCpp->center());

            return sipConvertFromNewType(sipRes,sipType_QGeoCoordinate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCircle, sipName_center, doc_QGeoCircle_center);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCircle_setRadius, "QGeoCircle.setRadius(float)");

extern "C" {static PyObject *meth_QGeoCircle_setRadius(PyObject *, PyObject *);}
static PyObject *meth_QGeoCircle_setRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QGeoCircle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QGeoCircle, &sipCpp, &a0))
        {
            sipCpp->setRadius(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCircle, sipName_setRadius, doc_QGeoCircle_setRadius);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCircle_radius, "QGeoCircle.radius() -> float");

extern "C" {static PyObject *meth_QGeoCircle_radius(PyObject *, PyObject *);}
static PyObject *meth_QGeoCircle_radius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCircle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoCircle, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->radius();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCircle, sipName_radius, doc_QGeoCircle_radius);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCircle_translate, "QGeoCircle.translate(float, float)");

extern "C" {static PyObject *meth_QGeoCircle_translate(PyObject *, PyObject *);}
static PyObject *meth_QGeoCircle_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        QGeoCircle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGeoCircle, &sipCpp, &a0, &a1))
        {
            sipCpp->translate(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCircle, sipName_translate, doc_QGeoCircle_translate);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoCircle_translated, "QGeoCircle.translated(float, float) -> QGeoCircle");

extern "C" {static PyObject *meth_QGeoCircle_translated(PyObject *, PyObject *);}
static PyObject *meth_QGeoCircle_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        const QGeoCircle *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_QGeoCircle, &sipCpp, &a0, &a1))
        {
            QGeoCircle*sipRes;

            sipRes = new QGeoCircle(sipCpp->translated(a0,a1));

            return sipConvertFromNewType(sipRes,sipType_QGeoCircle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoCircle, sipName_translated, doc_QGeoCircle_translated);

    return NULL;
}


extern "C" {static PyObject *slot_QGeoCircle___ne__(PyObject *,PyObject *);}
static PyObject *slot_QGeoCircle___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QGeoCircle *sipCpp = reinterpret_cast<QGeoCircle *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGeoCircle));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QGeoShape* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGeoShape, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QGeoCircle::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QGeoCircle* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGeoCircle, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QGeoCircle::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtPositioning,ne_slot,sipType_QGeoCircle,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QGeoCircle___eq__(PyObject *,PyObject *);}
static PyObject *slot_QGeoCircle___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QGeoCircle *sipCpp = reinterpret_cast<QGeoCircle *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGeoCircle));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QGeoShape* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGeoShape, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QGeoCircle::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QGeoCircle* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGeoCircle, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QGeoCircle::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtPositioning,eq_slot,sipType_QGeoCircle,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGeoCircle(void *, const sipTypeDef *);}
static void *cast_QGeoCircle(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGeoCircle)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QGeoShape)->ctd_cast((QGeoShape *)(QGeoCircle *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoCircle(void *, int);}
static void release_QGeoCircle(void *sipCppV,int)
{
    delete reinterpret_cast<QGeoCircle *>(sipCppV);
}


extern "C" {static void assign_QGeoCircle(void *, SIP_SSIZE_T, const void *);}
static void assign_QGeoCircle(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QGeoCircle *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QGeoCircle *>(sipSrc);
}


extern "C" {static void *array_QGeoCircle(SIP_SSIZE_T);}
static void *array_QGeoCircle(SIP_SSIZE_T sipNrElem)
{
    return new QGeoCircle[sipNrElem];
}


extern "C" {static void *copy_QGeoCircle(const void *, SIP_SSIZE_T);}
static void *copy_QGeoCircle(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QGeoCircle(reinterpret_cast<const QGeoCircle *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QGeoCircle(sipSimpleWrapper *);}
static void dealloc_QGeoCircle(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QGeoCircle(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QGeoCircle(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGeoCircle(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QGeoCircle *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QGeoCircle();

            return sipCpp;
        }
    }

    {
        const QGeoCoordinate* a0;
        qreal a1 = -1;

        static const char *sipKwdList[] = {
            NULL,
            sipName_radius,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|d", sipType_QGeoCoordinate, &a0, &a1))
        {
            sipCpp = new QGeoCircle(*a0,a1);

            return sipCpp;
        }
    }

    {
        const QGeoCircle* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QGeoCircle, &a0))
        {
            sipCpp = new QGeoCircle(*a0);

            return sipCpp;
        }
    }

    {
        const QGeoShape* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QGeoShape, &a0))
        {
            sipCpp = new QGeoCircle(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGeoCircle[] = {{23, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QGeoCircle[] = {
    {(void *)slot_QGeoCircle___ne__, ne_slot},
    {(void *)slot_QGeoCircle___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QGeoCircle[] = {
    {SIP_MLNAME_CAST(sipName_center), meth_QGeoCircle_center, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCircle_center)},
    {SIP_MLNAME_CAST(sipName_radius), meth_QGeoCircle_radius, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCircle_radius)},
    {SIP_MLNAME_CAST(sipName_setCenter), meth_QGeoCircle_setCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCircle_setCenter)},
    {SIP_MLNAME_CAST(sipName_setRadius), meth_QGeoCircle_setRadius, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCircle_setRadius)},
    {SIP_MLNAME_CAST(sipName_translate), meth_QGeoCircle_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCircle_translate)},
    {SIP_MLNAME_CAST(sipName_translated), meth_QGeoCircle_translated, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoCircle_translated)}
};

PyDoc_STRVAR(doc_QGeoCircle, "\1QGeoCircle()\n"
    "QGeoCircle(QGeoCoordinate, float radius=-1)\n"
    "QGeoCircle(QGeoCircle)\n"
    "QGeoCircle(QGeoShape)");


pyqt5ClassTypeDef sipTypeDef_QtPositioning_QGeoCircle = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGeoCircle,
        {0}
    },
    {
        sipNameNr_QGeoCircle,
        {0, 0, 1},
        6, methods_QGeoCircle,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGeoCircle,
    -1,
    -1,
    supers_QGeoCircle,
    slots_QGeoCircle,
    init_type_QGeoCircle,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoCircle,
    assign_QGeoCircle,
    array_QGeoCircle,
    copy_QGeoCircle,
    release_QGeoCircle,
    cast_QGeoCircle,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
