/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:23 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtPositioning.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeosatelliteinfosource.sip"
#include <qgeosatelliteinfosource.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeosatelliteinfo.sip"
#include <qgeosatelliteinfo.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"


class sipQGeoSatelliteInfoSource : public QGeoSatelliteInfoSource
{
public:
    sipQGeoSatelliteInfoSource(QObject*);
    virtual ~sipQGeoSatelliteInfoSource();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void requestUpdate(int);
    void stopUpdates();
    void startUpdates();
    QGeoSatelliteInfoSource::Error error() const;
    int minimumUpdateInterval() const;
    void setUpdateInterval(int);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGeoSatelliteInfoSource(const sipQGeoSatelliteInfoSource &);
    sipQGeoSatelliteInfoSource &operator = (const sipQGeoSatelliteInfoSource &);

    char sipPyMethods[13];
};

sipQGeoSatelliteInfoSource::sipQGeoSatelliteInfoSource(QObject*a0): QGeoSatelliteInfoSource(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGeoSatelliteInfoSource::~sipQGeoSatelliteInfoSource()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGeoSatelliteInfoSource::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtPositioning_qt_metaobject(sipPySelf,sipType_QGeoSatelliteInfoSource);
}

int sipQGeoSatelliteInfoSource::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGeoSatelliteInfoSource::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtPositioning_qt_metacall(sipPySelf,sipType_QGeoSatelliteInfoSource,_c,_id,_a);

    return _id;
}

void *sipQGeoSatelliteInfoSource::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtPositioning_qt_metacast(sipPySelf, sipType_QGeoSatelliteInfoSource, _clname, &sipCpp) ? sipCpp : QGeoSatelliteInfoSource::qt_metacast(_clname));
}

void sipQGeoSatelliteInfoSource::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QGeoSatelliteInfoSource::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoSatelliteInfoSource::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QGeoSatelliteInfoSource::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoSatelliteInfoSource::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QGeoSatelliteInfoSource::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoSatelliteInfoSource::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QGeoSatelliteInfoSource::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoSatelliteInfoSource::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QGeoSatelliteInfoSource::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGeoSatelliteInfoSource::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QGeoSatelliteInfoSource::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQGeoSatelliteInfoSource::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QGeoSatelliteInfoSource::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoSatelliteInfoSource::requestUpdate(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QGeoSatelliteInfoSource,sipName_requestUpdate);

    if (!sipMeth)
        return;

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoSatelliteInfoSource::stopUpdates()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QGeoSatelliteInfoSource,sipName_stopUpdates);

    if (!sipMeth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGeoSatelliteInfoSource::startUpdates()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_QGeoSatelliteInfoSource,sipName_startUpdates);

    if (!sipMeth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QGeoSatelliteInfoSource::Error sipQGeoSatelliteInfoSource::error() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,sipName_QGeoSatelliteInfoSource,sipName_error);

    if (!sipMeth)
        return (QGeoSatelliteInfoSource::Error)0;

    extern QGeoSatelliteInfoSource::Error sipVH_QtPositioning_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtPositioning_4(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQGeoSatelliteInfoSource::minimumUpdateInterval() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_QGeoSatelliteInfoSource,sipName_minimumUpdateInterval);

    if (!sipMeth)
        return 0;

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGeoSatelliteInfoSource::setUpdateInterval(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_setUpdateInterval);

    if (!sipMeth)
    {
        QGeoSatelliteInfoSource::setUpdateInterval(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQGeoSatelliteInfoSource::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQGeoSatelliteInfoSource::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQGeoSatelliteInfoSource::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQGeoSatelliteInfoSource::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQGeoSatelliteInfoSource::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQGeoSatelliteInfoSource::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQGeoSatelliteInfoSource::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQGeoSatelliteInfoSource::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQGeoSatelliteInfoSource::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_sender, "QGeoSatelliteInfoSource.sender() -> QObject");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGeoSatelliteInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 474 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_sender, doc_QGeoSatelliteInfoSource_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_receivers, "QGeoSatelliteInfoSource.receivers(signal) -> int");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQGeoSatelliteInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 533 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoSatelliteInfoSource.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_receivers, doc_QGeoSatelliteInfoSource_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_timerEvent, "QGeoSatelliteInfoSource.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQGeoSatelliteInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_timerEvent, doc_QGeoSatelliteInfoSource_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_childEvent, "QGeoSatelliteInfoSource.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQGeoSatelliteInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_childEvent, doc_QGeoSatelliteInfoSource_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_customEvent, "QGeoSatelliteInfoSource.customEvent(QEvent)");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGeoSatelliteInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_customEvent, doc_QGeoSatelliteInfoSource_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_connectNotify, "QGeoSatelliteInfoSource.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQGeoSatelliteInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_connectNotify, doc_QGeoSatelliteInfoSource_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_disconnectNotify, "QGeoSatelliteInfoSource.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQGeoSatelliteInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_disconnectNotify, doc_QGeoSatelliteInfoSource_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_senderSignalIndex, "QGeoSatelliteInfoSource.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGeoSatelliteInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_senderSignalIndex, doc_QGeoSatelliteInfoSource_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_isSignalConnected, "QGeoSatelliteInfoSource.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQGeoSatelliteInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_isSignalConnected, doc_QGeoSatelliteInfoSource_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_createDefaultSource, "QGeoSatelliteInfoSource.createDefaultSource(QObject) -> QGeoSatelliteInfoSource");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_createDefaultSource(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_createDefaultSource(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        sipWrapper *sipOwner = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "JH", sipType_QObject, &a0, &sipOwner))
        {
            QGeoSatelliteInfoSource*sipRes;

            sipRes = QGeoSatelliteInfoSource::createDefaultSource(a0);

            return sipConvertFromNewType(sipRes,sipType_QGeoSatelliteInfoSource,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_createDefaultSource, doc_QGeoSatelliteInfoSource_createDefaultSource);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_createSource, "QGeoSatelliteInfoSource.createSource(str, QObject) -> QGeoSatelliteInfoSource");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_createSource(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_createSource(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QObject* a1;
        sipWrapper *sipOwner = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, &sipOwner))
        {
            QGeoSatelliteInfoSource*sipRes;

            sipRes = QGeoSatelliteInfoSource::createSource(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QGeoSatelliteInfoSource,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_createSource, doc_QGeoSatelliteInfoSource_createSource);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_availableSources, "QGeoSatelliteInfoSource.availableSources() -> list-of-str");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_availableSources(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_availableSources(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList*sipRes;

            sipRes = new QStringList(QGeoSatelliteInfoSource::availableSources());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_availableSources, doc_QGeoSatelliteInfoSource_availableSources);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_sourceName, "QGeoSatelliteInfoSource.sourceName() -> str");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_sourceName(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_sourceName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->sourceName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_sourceName, doc_QGeoSatelliteInfoSource_sourceName);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_setUpdateInterval, "QGeoSatelliteInfoSource.setUpdateInterval(int)");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_setUpdateInterval(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_setUpdateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QGeoSatelliteInfoSource::setUpdateInterval(a0) : sipCpp->setUpdateInterval(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_setUpdateInterval, doc_QGeoSatelliteInfoSource_setUpdateInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_updateInterval, "QGeoSatelliteInfoSource.updateInterval() -> int");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_updateInterval(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_updateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->updateInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_updateInterval, doc_QGeoSatelliteInfoSource_updateInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_minimumUpdateInterval, "QGeoSatelliteInfoSource.minimumUpdateInterval() -> int");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_minimumUpdateInterval(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_minimumUpdateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoSatelliteInfoSource, sipName_minimumUpdateInterval);
                return NULL;
            }

            sipRes = sipCpp->minimumUpdateInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_minimumUpdateInterval, doc_QGeoSatelliteInfoSource_minimumUpdateInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_error, "QGeoSatelliteInfoSource.error() -> QGeoSatelliteInfoSource.Error");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_error(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
            QGeoSatelliteInfoSource::Error sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoSatelliteInfoSource, sipName_error);
                return NULL;
            }

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QGeoSatelliteInfoSource_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_error, doc_QGeoSatelliteInfoSource_error);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_startUpdates, "QGeoSatelliteInfoSource.startUpdates()");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_startUpdates(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_startUpdates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoSatelliteInfoSource, sipName_startUpdates);
                return NULL;
            }

            sipCpp->startUpdates();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_startUpdates, doc_QGeoSatelliteInfoSource_startUpdates);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_stopUpdates, "QGeoSatelliteInfoSource.stopUpdates()");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_stopUpdates(PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_stopUpdates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QGeoSatelliteInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoSatelliteInfoSource, sipName_stopUpdates);
                return NULL;
            }

            sipCpp->stopUpdates();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_stopUpdates, doc_QGeoSatelliteInfoSource_stopUpdates);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoSatelliteInfoSource_requestUpdate, "QGeoSatelliteInfoSource.requestUpdate(int timeout=0)");

extern "C" {static PyObject *meth_QGeoSatelliteInfoSource_requestUpdate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoSatelliteInfoSource_requestUpdate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0 = 0;
        QGeoSatelliteInfoSource *sipCpp;

        static const char *sipKwdList[] = {
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QGeoSatelliteInfoSource, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoSatelliteInfoSource, sipName_requestUpdate);
                return NULL;
            }

            sipCpp->requestUpdate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoSatelliteInfoSource, sipName_requestUpdate, doc_QGeoSatelliteInfoSource_requestUpdate);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGeoSatelliteInfoSource(void *, const sipTypeDef *);}
static void *cast_QGeoSatelliteInfoSource(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGeoSatelliteInfoSource)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QGeoSatelliteInfoSource *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoSatelliteInfoSource(void *, int);}
static void release_QGeoSatelliteInfoSource(void *sipCppV,int)
{
    QGeoSatelliteInfoSource *sipCpp = reinterpret_cast<QGeoSatelliteInfoSource *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGeoSatelliteInfoSource(sipSimpleWrapper *);}
static void dealloc_QGeoSatelliteInfoSource(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGeoSatelliteInfoSource *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGeoSatelliteInfoSource(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGeoSatelliteInfoSource(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGeoSatelliteInfoSource(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGeoSatelliteInfoSource *sipCpp = 0;

    {
        QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQGeoSatelliteInfoSource(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGeoSatelliteInfoSource[] = {{162, 0, 1}};


static PyMethodDef methods_QGeoSatelliteInfoSource[] = {
    {SIP_MLNAME_CAST(sipName_availableSources), meth_QGeoSatelliteInfoSource_availableSources, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_availableSources)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QGeoSatelliteInfoSource_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QGeoSatelliteInfoSource_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createDefaultSource), meth_QGeoSatelliteInfoSource_createDefaultSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_createDefaultSource)},
    {SIP_MLNAME_CAST(sipName_createSource), meth_QGeoSatelliteInfoSource_createSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_createSource)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QGeoSatelliteInfoSource_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QGeoSatelliteInfoSource_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QGeoSatelliteInfoSource_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_error)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QGeoSatelliteInfoSource_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_minimumUpdateInterval), meth_QGeoSatelliteInfoSource_minimumUpdateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_minimumUpdateInterval)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QGeoSatelliteInfoSource_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_requestUpdate), (PyCFunction)meth_QGeoSatelliteInfoSource_requestUpdate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_requestUpdate)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QGeoSatelliteInfoSource_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QGeoSatelliteInfoSource_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setUpdateInterval), meth_QGeoSatelliteInfoSource_setUpdateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_setUpdateInterval)},
    {SIP_MLNAME_CAST(sipName_sourceName), meth_QGeoSatelliteInfoSource_sourceName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_sourceName)},
    {SIP_MLNAME_CAST(sipName_startUpdates), meth_QGeoSatelliteInfoSource_startUpdates, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_startUpdates)},
    {SIP_MLNAME_CAST(sipName_stopUpdates), meth_QGeoSatelliteInfoSource_stopUpdates, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_stopUpdates)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QGeoSatelliteInfoSource_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateInterval), meth_QGeoSatelliteInfoSource_updateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoSatelliteInfoSource_updateInterval)}
};

static sipEnumMemberDef enummembers_QGeoSatelliteInfoSource[] = {
    {sipName_AccessError, static_cast<int>(QGeoSatelliteInfoSource::AccessError), 22},
    {sipName_ClosedError, static_cast<int>(QGeoSatelliteInfoSource::ClosedError), 22},
    {sipName_NoError, static_cast<int>(QGeoSatelliteInfoSource::NoError), 22},
    {sipName_UnknownSourceError, static_cast<int>(QGeoSatelliteInfoSource::UnknownSourceError), 22},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGeoSatelliteInfoSource[] = {
    {"requestTimeout()", "\1QGeoSatelliteInfoSource.requestTimeout", 0, 0},
    {"satellitesInUseUpdated(QList<QGeoSatelliteInfo>)", "\1QGeoSatelliteInfoSource.satellitesInUseUpdated[list-of-QGeoSatelliteInfo]", 0, 0},
    {"satellitesInViewUpdated(QList<QGeoSatelliteInfo>)", "\1QGeoSatelliteInfoSource.satellitesInViewUpdated[list-of-QGeoSatelliteInfo]", 0, 0},
    {"error(QGeoSatelliteInfoSource::Error)", "\1QGeoSatelliteInfoSource.error[QGeoSatelliteInfoSource.Error]", &methods_QGeoSatelliteInfoSource[7], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QGeoSatelliteInfoSource, "\1QGeoSatelliteInfoSource(QObject)");


pyqt5ClassTypeDef sipTypeDef_QtPositioning_QGeoSatelliteInfoSource = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGeoSatelliteInfoSource,
        {0}
    },
    {
        sipNameNr_QGeoSatelliteInfoSource,
        {0, 0, 1},
        20, methods_QGeoSatelliteInfoSource,
        4, enummembers_QGeoSatelliteInfoSource,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGeoSatelliteInfoSource,
    -1,
    -1,
    supers_QGeoSatelliteInfoSource,
    0,
    init_type_QGeoSatelliteInfoSource,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoSatelliteInfoSource,
    0,
    0,
    0,
    release_QGeoSatelliteInfoSource,
    cast_QGeoSatelliteInfoSource,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGeoSatelliteInfoSource::staticMetaObject,
    0,
    signals_QGeoSatelliteInfoSource,
    0
};
