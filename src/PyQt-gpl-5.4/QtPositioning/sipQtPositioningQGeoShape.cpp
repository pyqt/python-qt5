/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:23 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtPositioning.h"

#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeoshape.sip"
#include <qgeoshape.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoShape.cpp"

#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeocoordinate.sip"
#include <qgeocoordinate.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoShape.cpp"


PyDoc_STRVAR(doc_QGeoShape_type, "QGeoShape.type() -> QGeoShape.ShapeType");

extern "C" {static PyObject *meth_QGeoShape_type(PyObject *, PyObject *);}
static PyObject *meth_QGeoShape_type(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoShape, &sipCpp))
        {
            QGeoShape::ShapeType sipRes;

            sipRes = sipCpp->type();

            return sipConvertFromEnum(sipRes,sipType_QGeoShape_ShapeType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoShape, sipName_type, doc_QGeoShape_type);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoShape_isValid, "QGeoShape.isValid() -> bool");

extern "C" {static PyObject *meth_QGeoShape_isValid(PyObject *, PyObject *);}
static PyObject *meth_QGeoShape_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoShape, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoShape, sipName_isValid, doc_QGeoShape_isValid);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoShape_isEmpty, "QGeoShape.isEmpty() -> bool");

extern "C" {static PyObject *meth_QGeoShape_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QGeoShape_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoShape, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEmpty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoShape, sipName_isEmpty, doc_QGeoShape_isEmpty);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoShape_contains, "QGeoShape.contains(QGeoCoordinate) -> bool");

extern "C" {static PyObject *meth_QGeoShape_contains(PyObject *, PyObject *);}
static PyObject *meth_QGeoShape_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCoordinate* a0;
        const QGeoShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoShape, &sipCpp, sipType_QGeoCoordinate, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->contains(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoShape, sipName_contains, doc_QGeoShape_contains);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoShape_extendShape, "QGeoShape.extendShape(QGeoCoordinate)");

extern "C" {static PyObject *meth_QGeoShape_extendShape(PyObject *, PyObject *);}
static PyObject *meth_QGeoShape_extendShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoCoordinate* a0;
        QGeoShape *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QGeoShape, &sipCpp, sipType_QGeoCoordinate, &a0))
        {
            sipCpp->extendShape(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoShape, sipName_extendShape, doc_QGeoShape_extendShape);

    return NULL;
}


extern "C" {static PyObject *slot_QGeoShape___ne__(PyObject *,PyObject *);}
static PyObject *slot_QGeoShape___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QGeoShape *sipCpp = reinterpret_cast<QGeoShape *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGeoShape));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QGeoShape* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGeoShape, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QGeoShape::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtPositioning,ne_slot,sipType_QGeoShape,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QGeoShape___eq__(PyObject *,PyObject *);}
static PyObject *slot_QGeoShape___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QGeoShape *sipCpp = reinterpret_cast<QGeoShape *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGeoShape));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QGeoShape* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGeoShape, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->QGeoShape::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtPositioning,eq_slot,sipType_QGeoShape,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGeoShape(void *, const sipTypeDef *);}
static void *cast_QGeoShape(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QGeoShape)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoShape(void *, int);}
static void release_QGeoShape(void *sipCppV,int)
{
    delete reinterpret_cast<QGeoShape *>(sipCppV);
}


extern "C" {static void assign_QGeoShape(void *, SIP_SSIZE_T, const void *);}
static void assign_QGeoShape(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QGeoShape *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QGeoShape *>(sipSrc);
}


extern "C" {static void *array_QGeoShape(SIP_SSIZE_T);}
static void *array_QGeoShape(SIP_SSIZE_T sipNrElem)
{
    return new QGeoShape[sipNrElem];
}


extern "C" {static void *copy_QGeoShape(const void *, SIP_SSIZE_T);}
static void *copy_QGeoShape(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QGeoShape(reinterpret_cast<const QGeoShape *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QGeoShape(sipSimpleWrapper *);}
static void dealloc_QGeoShape(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QGeoShape(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QGeoShape(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGeoShape(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QGeoShape *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QGeoShape();

            return sipCpp;
        }
    }

    {
        const QGeoShape* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QGeoShape, &a0))
        {
            sipCpp = new QGeoShape(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QGeoShape[] = {
    {(void *)slot_QGeoShape___ne__, ne_slot},
    {(void *)slot_QGeoShape___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QGeoShape[] = {
    {SIP_MLNAME_CAST(sipName_contains), meth_QGeoShape_contains, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoShape_contains)},
    {SIP_MLNAME_CAST(sipName_extendShape), meth_QGeoShape_extendShape, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoShape_extendShape)},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QGeoShape_isEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoShape_isEmpty)},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QGeoShape_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoShape_isValid)},
    {SIP_MLNAME_CAST(sipName_type), meth_QGeoShape_type, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoShape_type)}
};

static sipEnumMemberDef enummembers_QGeoShape[] = {
    {sipName_CircleType, static_cast<int>(QGeoShape::CircleType), 24},
    {sipName_RectangleType, static_cast<int>(QGeoShape::RectangleType), 24},
    {sipName_UnknownType, static_cast<int>(QGeoShape::UnknownType), 24},
};

PyDoc_STRVAR(doc_QGeoShape, "\1QGeoShape()\n"
    "QGeoShape(QGeoShape)");


pyqt5ClassTypeDef sipTypeDef_QtPositioning_QGeoShape = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGeoShape,
        {0}
    },
    {
        sipNameNr_QGeoShape,
        {0, 0, 1},
        5, methods_QGeoShape,
        3, enummembers_QGeoShape,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGeoShape,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    -1,
    0,
    slots_QGeoShape,
    init_type_QGeoShape,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoShape,
    assign_QGeoShape,
    array_QGeoShape,
    copy_QGeoShape,
    release_QGeoShape,
    cast_QGeoShape,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
