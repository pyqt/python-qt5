/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:23 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtPositioning.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qnmeapositioninfosource.sip"
#include <qnmeapositioninfosource.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeopositioninfo.sip"
#include <qgeopositioninfo.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeopositioninfosource.sip"
#include <qgeopositioninfosource.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeopositioninfosource.sip"
#include <qgeopositioninfosource.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 30 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"


class sipQNmeaPositionInfoSource : public QNmeaPositionInfoSource
{
public:
    sipQNmeaPositionInfoSource(QNmeaPositionInfoSource::UpdateMode,QObject*);
    virtual ~sipQNmeaPositionInfoSource();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    bool sipProtectVirt_parsePosInfoFromNmeaData(bool,const char*,int,QGeoPositionInfo*,bool*);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void setPreferredPositioningMethods(QGeoPositionInfoSource::PositioningMethods);
    bool parsePosInfoFromNmeaData(const char*,int,QGeoPositionInfo*,bool*);
    void requestUpdate(int);
    void stopUpdates();
    void startUpdates();
    QGeoPositionInfoSource::Error error() const;
    int minimumUpdateInterval() const;
    QGeoPositionInfoSource::PositioningMethods supportedPositioningMethods() const;
    QGeoPositionInfo lastKnownPosition(bool) const;
    void setUpdateInterval(int);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQNmeaPositionInfoSource(const sipQNmeaPositionInfoSource &);
    sipQNmeaPositionInfoSource &operator = (const sipQNmeaPositionInfoSource &);

    char sipPyMethods[17];
};

sipQNmeaPositionInfoSource::sipQNmeaPositionInfoSource(QNmeaPositionInfoSource::UpdateMode a0,QObject*a1): QNmeaPositionInfoSource(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQNmeaPositionInfoSource::~sipQNmeaPositionInfoSource()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQNmeaPositionInfoSource::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtPositioning_qt_metaobject(sipPySelf,sipType_QNmeaPositionInfoSource);
}

int sipQNmeaPositionInfoSource::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QNmeaPositionInfoSource::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtPositioning_qt_metacall(sipPySelf,sipType_QNmeaPositionInfoSource,_c,_id,_a);

    return _id;
}

void *sipQNmeaPositionInfoSource::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtPositioning_qt_metacast(sipPySelf, sipType_QNmeaPositionInfoSource, _clname, &sipCpp) ? sipCpp : QNmeaPositionInfoSource::qt_metacast(_clname));
}

void sipQNmeaPositionInfoSource::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QNmeaPositionInfoSource::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNmeaPositionInfoSource::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QNmeaPositionInfoSource::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNmeaPositionInfoSource::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QNmeaPositionInfoSource::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNmeaPositionInfoSource::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QNmeaPositionInfoSource::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNmeaPositionInfoSource::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QNmeaPositionInfoSource::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQNmeaPositionInfoSource::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QNmeaPositionInfoSource::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQNmeaPositionInfoSource::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QNmeaPositionInfoSource::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNmeaPositionInfoSource::setPreferredPositioningMethods(QGeoPositionInfoSource::PositioningMethods a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setPreferredPositioningMethods);

    if (!sipMeth)
    {
        QNmeaPositionInfoSource::setPreferredPositioningMethods(a0);
        return;
    }

    extern void sipVH_QtPositioning_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGeoPositionInfoSource::PositioningMethods);

    sipVH_QtPositioning_5(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQNmeaPositionInfoSource::parsePosInfoFromNmeaData(const char*a0,int a1,QGeoPositionInfo*a2,bool*a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_parsePosInfoFromNmeaData);

    if (!sipMeth)
        return QNmeaPositionInfoSource::parsePosInfoFromNmeaData(a0,a1,a2,a3);

    extern bool sipVH_QtPositioning_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*,int,QGeoPositionInfo*,bool*);

    return sipVH_QtPositioning_0(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

void sipQNmeaPositionInfoSource::requestUpdate(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_requestUpdate);

    if (!sipMeth)
    {
        QNmeaPositionInfoSource::requestUpdate(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNmeaPositionInfoSource::stopUpdates()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_stopUpdates);

    if (!sipMeth)
    {
        QNmeaPositionInfoSource::stopUpdates();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQNmeaPositionInfoSource::startUpdates()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_startUpdates);

    if (!sipMeth)
    {
        QNmeaPositionInfoSource::startUpdates();
        return;
    }

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QGeoPositionInfoSource::Error sipQNmeaPositionInfoSource::error() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_error);

    if (!sipMeth)
        return QNmeaPositionInfoSource::error();

    extern QGeoPositionInfoSource::Error sipVH_QtPositioning_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtPositioning_1(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQNmeaPositionInfoSource::minimumUpdateInterval() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_minimumUpdateInterval);

    if (!sipMeth)
        return QNmeaPositionInfoSource::minimumUpdateInterval();

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QGeoPositionInfoSource::PositioningMethods sipQNmeaPositionInfoSource::supportedPositioningMethods() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_supportedPositioningMethods);

    if (!sipMeth)
        return QNmeaPositionInfoSource::supportedPositioningMethods();

    extern QGeoPositionInfoSource::PositioningMethods sipVH_QtPositioning_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtPositioning_2(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QGeoPositionInfo sipQNmeaPositionInfoSource::lastKnownPosition(bool a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_lastKnownPosition);

    if (!sipMeth)
        return QNmeaPositionInfoSource::lastKnownPosition(a0);

    extern QGeoPositionInfo sipVH_QtPositioning_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtPositioning_3(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQNmeaPositionInfoSource::setUpdateInterval(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_setUpdateInterval);

    if (!sipMeth)
    {
        QNmeaPositionInfoSource::setUpdateInterval(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQNmeaPositionInfoSource::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQNmeaPositionInfoSource::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQNmeaPositionInfoSource::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQNmeaPositionInfoSource::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQNmeaPositionInfoSource::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQNmeaPositionInfoSource::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQNmeaPositionInfoSource::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQNmeaPositionInfoSource::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQNmeaPositionInfoSource::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

bool sipQNmeaPositionInfoSource::sipProtectVirt_parsePosInfoFromNmeaData(bool sipSelfWasArg,const char*a0,int a1,QGeoPositionInfo*a2,bool*a3)
{
    return (sipSelfWasArg ? QNmeaPositionInfoSource::parsePosInfoFromNmeaData(a0,a1,a2,a3) : parsePosInfoFromNmeaData(a0,a1,a2,a3));
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_sender, "QNmeaPositionInfoSource.sender() -> QObject");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQNmeaPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 562 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_sender, doc_QNmeaPositionInfoSource_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_receivers, "QNmeaPositionInfoSource.receivers(signal) -> int");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQNmeaPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 621 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQNmeaPositionInfoSource.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_receivers, doc_QNmeaPositionInfoSource_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_timerEvent, "QNmeaPositionInfoSource.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQNmeaPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_timerEvent, doc_QNmeaPositionInfoSource_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_childEvent, "QNmeaPositionInfoSource.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQNmeaPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_childEvent, doc_QNmeaPositionInfoSource_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_customEvent, "QNmeaPositionInfoSource.customEvent(QEvent)");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQNmeaPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_customEvent, doc_QNmeaPositionInfoSource_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_connectNotify, "QNmeaPositionInfoSource.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQNmeaPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_connectNotify, doc_QNmeaPositionInfoSource_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_disconnectNotify, "QNmeaPositionInfoSource.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQNmeaPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_disconnectNotify, doc_QNmeaPositionInfoSource_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_senderSignalIndex, "QNmeaPositionInfoSource.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQNmeaPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_senderSignalIndex, doc_QNmeaPositionInfoSource_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_isSignalConnected, "QNmeaPositionInfoSource.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQNmeaPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_isSignalConnected, doc_QNmeaPositionInfoSource_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_updateMode, "QNmeaPositionInfoSource.updateMode() -> QNmeaPositionInfoSource.UpdateMode");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_updateMode(PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_updateMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNmeaPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp))
        {
            QNmeaPositionInfoSource::UpdateMode sipRes;

            sipRes = sipCpp->updateMode();

            return sipConvertFromEnum(sipRes,sipType_QNmeaPositionInfoSource_UpdateMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_updateMode, doc_QNmeaPositionInfoSource_updateMode);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_setDevice, "QNmeaPositionInfoSource.setDevice(QIODevice)");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QIODevice* a0;
        QNmeaPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp, sipType_QIODevice, &a0))
        {
            sipCpp->setDevice(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_setDevice, doc_QNmeaPositionInfoSource_setDevice);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_device, "QNmeaPositionInfoSource.device() -> QIODevice");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_device(PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_device(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNmeaPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp))
        {
            QIODevice*sipRes;

            sipRes = sipCpp->device();

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_device, doc_QNmeaPositionInfoSource_device);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_setUpdateInterval, "QNmeaPositionInfoSource.setUpdateInterval(int)");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_setUpdateInterval(PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_setUpdateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QNmeaPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QNmeaPositionInfoSource::setUpdateInterval(a0) : sipCpp->setUpdateInterval(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_setUpdateInterval, doc_QNmeaPositionInfoSource_setUpdateInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_lastKnownPosition, "QNmeaPositionInfoSource.lastKnownPosition(bool fromSatellitePositioningMethodsOnly=False) -> QGeoPositionInfo");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_lastKnownPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_lastKnownPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0 = 0;
        const QNmeaPositionInfoSource *sipCpp;

        static const char *sipKwdList[] = {
            sipName_fromSatellitePositioningMethodsOnly,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp, &a0))
        {
            QGeoPositionInfo*sipRes;

            sipRes = new QGeoPositionInfo((sipSelfWasArg ? sipCpp->QNmeaPositionInfoSource::lastKnownPosition(a0) : sipCpp->lastKnownPosition(a0)));

            return sipConvertFromNewType(sipRes,sipType_QGeoPositionInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_lastKnownPosition, doc_QNmeaPositionInfoSource_lastKnownPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_supportedPositioningMethods, "QNmeaPositionInfoSource.supportedPositioningMethods() -> QGeoPositionInfoSource.PositioningMethods");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_supportedPositioningMethods(PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_supportedPositioningMethods(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QNmeaPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp))
        {
            QGeoPositionInfoSource::PositioningMethods*sipRes;

            sipRes = new QGeoPositionInfoSource::PositioningMethods((sipSelfWasArg ? sipCpp->QNmeaPositionInfoSource::supportedPositioningMethods() : sipCpp->supportedPositioningMethods()));

            return sipConvertFromNewType(sipRes,sipType_QGeoPositionInfoSource_PositioningMethods,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_supportedPositioningMethods, doc_QNmeaPositionInfoSource_supportedPositioningMethods);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_minimumUpdateInterval, "QNmeaPositionInfoSource.minimumUpdateInterval() -> int");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_minimumUpdateInterval(PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_minimumUpdateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QNmeaPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp))
        {
            int sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QNmeaPositionInfoSource::minimumUpdateInterval() : sipCpp->minimumUpdateInterval());

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_minimumUpdateInterval, doc_QNmeaPositionInfoSource_minimumUpdateInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_error, "QNmeaPositionInfoSource.error() -> QGeoPositionInfoSource.Error");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_error(PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QNmeaPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp))
        {
            QGeoPositionInfoSource::Error sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QNmeaPositionInfoSource::error() : sipCpp->error());

            return sipConvertFromEnum(sipRes,sipType_QGeoPositionInfoSource_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_error, doc_QNmeaPositionInfoSource_error);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_startUpdates, "QNmeaPositionInfoSource.startUpdates()");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_startUpdates(PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_startUpdates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNmeaPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QNmeaPositionInfoSource::startUpdates() : sipCpp->startUpdates());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_startUpdates, doc_QNmeaPositionInfoSource_startUpdates);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_stopUpdates, "QNmeaPositionInfoSource.stopUpdates()");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_stopUpdates(PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_stopUpdates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QNmeaPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp))
        {
            (sipSelfWasArg ? sipCpp->QNmeaPositionInfoSource::stopUpdates() : sipCpp->stopUpdates());

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_stopUpdates, doc_QNmeaPositionInfoSource_stopUpdates);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_requestUpdate, "QNmeaPositionInfoSource.requestUpdate(int timeout=0)");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_requestUpdate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_requestUpdate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = 0;
        QNmeaPositionInfoSource *sipCpp;

        static const char *sipKwdList[] = {
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QNmeaPositionInfoSource::requestUpdate(a0) : sipCpp->requestUpdate(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_requestUpdate, doc_QNmeaPositionInfoSource_requestUpdate);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_parsePosInfoFromNmeaData, "QNmeaPositionInfoSource.parsePosInfoFromNmeaData(str, int, QGeoPositionInfo) -> (bool, bool)");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_parsePosInfoFromNmeaData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_parsePosInfoFromNmeaData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const char* a0;
        int a1;
        QGeoPositionInfo* a2;
        bool a3;
        sipQNmeaPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BsiJ8", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp, &a0, &a1, sipType_QGeoPositionInfo, &a2))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_parsePosInfoFromNmeaData(sipSelfWasArg,a0,a1,a2,&a3);

            return sipBuildResult(0,"(bb)",sipRes,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_parsePosInfoFromNmeaData, doc_QNmeaPositionInfoSource_parsePosInfoFromNmeaData);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_setUserEquivalentRangeError, "QNmeaPositionInfoSource.setUserEquivalentRangeError(float)");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_setUserEquivalentRangeError(PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_setUserEquivalentRangeError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        QNmeaPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp, &a0))
        {
            sipCpp->setUserEquivalentRangeError(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_setUserEquivalentRangeError, doc_QNmeaPositionInfoSource_setUserEquivalentRangeError);

    return NULL;
}


PyDoc_STRVAR(doc_QNmeaPositionInfoSource_userEquivalentRangeError, "QNmeaPositionInfoSource.userEquivalentRangeError() -> float");

extern "C" {static PyObject *meth_QNmeaPositionInfoSource_userEquivalentRangeError(PyObject *, PyObject *);}
static PyObject *meth_QNmeaPositionInfoSource_userEquivalentRangeError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QNmeaPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QNmeaPositionInfoSource, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->userEquivalentRangeError();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QNmeaPositionInfoSource, sipName_userEquivalentRangeError, doc_QNmeaPositionInfoSource_userEquivalentRangeError);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QNmeaPositionInfoSource(void *, const sipTypeDef *);}
static void *cast_QNmeaPositionInfoSource(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QNmeaPositionInfoSource)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QGeoPositionInfoSource)->ctd_cast((QGeoPositionInfoSource *)(QNmeaPositionInfoSource *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNmeaPositionInfoSource(void *, int);}
static void release_QNmeaPositionInfoSource(void *sipCppV,int)
{
    QNmeaPositionInfoSource *sipCpp = reinterpret_cast<QNmeaPositionInfoSource *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QNmeaPositionInfoSource(sipSimpleWrapper *);}
static void dealloc_QNmeaPositionInfoSource(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQNmeaPositionInfoSource *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QNmeaPositionInfoSource(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QNmeaPositionInfoSource(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QNmeaPositionInfoSource(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQNmeaPositionInfoSource *sipCpp = 0;

    {
        QNmeaPositionInfoSource::UpdateMode a0;
        QObject* a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "E|JH", sipType_QNmeaPositionInfoSource_UpdateMode, &a0, sipType_QObject, &a1, sipOwner))
        {
            sipCpp = new sipQNmeaPositionInfoSource(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QNmeaPositionInfoSource[] = {{13, 255, 1}};


static PyMethodDef methods_QNmeaPositionInfoSource[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QNmeaPositionInfoSource_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QNmeaPositionInfoSource_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QNmeaPositionInfoSource_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_device), meth_QNmeaPositionInfoSource_device, METH_VARARGS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_device)},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QNmeaPositionInfoSource_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QNmeaPositionInfoSource_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_error)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QNmeaPositionInfoSource_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_lastKnownPosition), (PyCFunction)meth_QNmeaPositionInfoSource_lastKnownPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_lastKnownPosition)},
    {SIP_MLNAME_CAST(sipName_minimumUpdateInterval), meth_QNmeaPositionInfoSource_minimumUpdateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_minimumUpdateInterval)},
    {SIP_MLNAME_CAST(sipName_parsePosInfoFromNmeaData), (PyCFunction)meth_QNmeaPositionInfoSource_parsePosInfoFromNmeaData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_parsePosInfoFromNmeaData)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QNmeaPositionInfoSource_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_requestUpdate), (PyCFunction)meth_QNmeaPositionInfoSource_requestUpdate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_requestUpdate)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QNmeaPositionInfoSource_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QNmeaPositionInfoSource_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QNmeaPositionInfoSource_setDevice, METH_VARARGS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_setDevice)},
    {SIP_MLNAME_CAST(sipName_setUpdateInterval), meth_QNmeaPositionInfoSource_setUpdateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_setUpdateInterval)},
    {SIP_MLNAME_CAST(sipName_setUserEquivalentRangeError), meth_QNmeaPositionInfoSource_setUserEquivalentRangeError, METH_VARARGS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_setUserEquivalentRangeError)},
    {SIP_MLNAME_CAST(sipName_startUpdates), meth_QNmeaPositionInfoSource_startUpdates, METH_VARARGS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_startUpdates)},
    {SIP_MLNAME_CAST(sipName_stopUpdates), meth_QNmeaPositionInfoSource_stopUpdates, METH_VARARGS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_stopUpdates)},
    {SIP_MLNAME_CAST(sipName_supportedPositioningMethods), meth_QNmeaPositionInfoSource_supportedPositioningMethods, METH_VARARGS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_supportedPositioningMethods)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QNmeaPositionInfoSource_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMode), meth_QNmeaPositionInfoSource_updateMode, METH_VARARGS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_updateMode)},
    {SIP_MLNAME_CAST(sipName_userEquivalentRangeError), meth_QNmeaPositionInfoSource_userEquivalentRangeError, METH_VARARGS, SIP_MLDOC_CAST(doc_QNmeaPositionInfoSource_userEquivalentRangeError)}
};

static sipEnumMemberDef enummembers_QNmeaPositionInfoSource[] = {
    {sipName_RealTimeMode, static_cast<int>(QNmeaPositionInfoSource::RealTimeMode), 29},
    {sipName_SimulationMode, static_cast<int>(QNmeaPositionInfoSource::SimulationMode), 29},
};

PyDoc_STRVAR(doc_QNmeaPositionInfoSource, "\1QNmeaPositionInfoSource(QNmeaPositionInfoSource.UpdateMode, QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtPositioning_QNmeaPositionInfoSource = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QNmeaPositionInfoSource,
        {0}
    },
    {
        sipNameNr_QNmeaPositionInfoSource,
        {0, 0, 1},
        23, methods_QNmeaPositionInfoSource,
        2, enummembers_QNmeaPositionInfoSource,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QNmeaPositionInfoSource,
    -1,
    -1,
    supers_QNmeaPositionInfoSource,
    0,
    init_type_QNmeaPositionInfoSource,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNmeaPositionInfoSource,
    0,
    0,
    0,
    release_QNmeaPositionInfoSource,
    cast_QNmeaPositionInfoSource,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QNmeaPositionInfoSource::staticMetaObject,
    0,
    0,
    0
};
