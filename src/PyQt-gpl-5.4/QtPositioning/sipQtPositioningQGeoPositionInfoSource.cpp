/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:23 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtPositioning.h"

#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeopositioninfosource.sip"
#include <qgeopositioninfosource.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeopositioninfo.sip"
#include <qgeopositioninfo.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 34 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtPositioning/qgeopositioninfosource.sip"
#include <qgeopositioninfosource.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"


class sipQGeoPositionInfoSource : public QGeoPositionInfoSource
{
public:
    sipQGeoPositionInfoSource(QObject*);
    virtual ~sipQGeoPositionInfoSource();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool event(QEvent*);
    void requestUpdate(int);
    void stopUpdates();
    void startUpdates();
    QGeoPositionInfoSource::Error error() const;
    int minimumUpdateInterval() const;
    QGeoPositionInfoSource::PositioningMethods supportedPositioningMethods() const;
    QGeoPositionInfo lastKnownPosition(bool) const;
    void setPreferredPositioningMethods(QGeoPositionInfoSource::PositioningMethods);
    void setUpdateInterval(int);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGeoPositionInfoSource(const sipQGeoPositionInfoSource &);
    sipQGeoPositionInfoSource &operator = (const sipQGeoPositionInfoSource &);

    char sipPyMethods[16];
};

sipQGeoPositionInfoSource::sipQGeoPositionInfoSource(QObject*a0): QGeoPositionInfoSource(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGeoPositionInfoSource::~sipQGeoPositionInfoSource()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGeoPositionInfoSource::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtPositioning_qt_metaobject(sipPySelf,sipType_QGeoPositionInfoSource);
}

int sipQGeoPositionInfoSource::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGeoPositionInfoSource::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtPositioning_qt_metacall(sipPySelf,sipType_QGeoPositionInfoSource,_c,_id,_a);

    return _id;
}

void *sipQGeoPositionInfoSource::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtPositioning_qt_metacast(sipPySelf, sipType_QGeoPositionInfoSource, _clname, &sipCpp) ? sipCpp : QGeoPositionInfoSource::qt_metacast(_clname));
}

void sipQGeoPositionInfoSource::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QGeoPositionInfoSource::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoPositionInfoSource::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QGeoPositionInfoSource::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoPositionInfoSource::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QGeoPositionInfoSource::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoPositionInfoSource::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QGeoPositionInfoSource::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoPositionInfoSource::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QGeoPositionInfoSource::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQGeoPositionInfoSource::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QGeoPositionInfoSource::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQGeoPositionInfoSource::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QGeoPositionInfoSource::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoPositionInfoSource::requestUpdate(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_QGeoPositionInfoSource,sipName_requestUpdate);

    if (!sipMeth)
        return;

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoPositionInfoSource::stopUpdates()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QGeoPositionInfoSource,sipName_stopUpdates);

    if (!sipMeth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

void sipQGeoPositionInfoSource::startUpdates()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_QGeoPositionInfoSource,sipName_startUpdates);

    if (!sipMeth)
        return;

    typedef void (*sipVH_QtCore_11)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    ((sipVH_QtCore_11)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[11]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QGeoPositionInfoSource::Error sipQGeoPositionInfoSource::error() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,sipName_QGeoPositionInfoSource,sipName_error);

    if (!sipMeth)
        return (QGeoPositionInfoSource::Error)0;

    extern QGeoPositionInfoSource::Error sipVH_QtPositioning_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtPositioning_1(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

int sipQGeoPositionInfoSource::minimumUpdateInterval() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_QGeoPositionInfoSource,sipName_minimumUpdateInterval);

    if (!sipMeth)
        return 0;

    typedef int (*sipVH_QtCore_6)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return ((sipVH_QtCore_6)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[6]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QGeoPositionInfoSource::PositioningMethods sipQGeoPositionInfoSource::supportedPositioningMethods() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,sipName_QGeoPositionInfoSource,sipName_supportedPositioningMethods);

    if (!sipMeth)
        return QGeoPositionInfoSource::PositioningMethods();

    extern QGeoPositionInfoSource::PositioningMethods sipVH_QtPositioning_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH_QtPositioning_2(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth);
}

QGeoPositionInfo sipQGeoPositionInfoSource::lastKnownPosition(bool a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,sipName_QGeoPositionInfoSource,sipName_lastKnownPosition);

    if (!sipMeth)
        return QGeoPositionInfo();

    extern QGeoPositionInfo sipVH_QtPositioning_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH_QtPositioning_3(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoPositionInfoSource::setPreferredPositioningMethods(QGeoPositionInfoSource::PositioningMethods a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_setPreferredPositioningMethods);

    if (!sipMeth)
    {
        QGeoPositionInfoSource::setPreferredPositioningMethods(a0);
        return;
    }

    extern void sipVH_QtPositioning_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QGeoPositionInfoSource::PositioningMethods);

    sipVH_QtPositioning_5(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQGeoPositionInfoSource::setUpdateInterval(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_setUpdateInterval);

    if (!sipMeth)
    {
        QGeoPositionInfoSource::setUpdateInterval(a0);
        return;
    }

    typedef void (*sipVH_QtCore_4)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    ((sipVH_QtCore_4)(sipModuleAPI_QtPositioning_QtCore->em_virthandlers[4]))(sipGILState, sipModuleAPI_QtPositioning_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

QObject* sipQGeoPositionInfoSource::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQGeoPositionInfoSource::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQGeoPositionInfoSource::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQGeoPositionInfoSource::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQGeoPositionInfoSource::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQGeoPositionInfoSource::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQGeoPositionInfoSource::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQGeoPositionInfoSource::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQGeoPositionInfoSource::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_sender, "QGeoPositionInfoSource.sender() -> QObject");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGeoPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 525 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_sender, doc_QGeoPositionInfoSource_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_receivers, "QGeoPositionInfoSource.receivers(signal) -> int");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQGeoPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 584 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtPositioning/sipQtPositioningQGeoPositionInfoSource.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_receivers, doc_QGeoPositionInfoSource_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_timerEvent, "QGeoPositionInfoSource.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQGeoPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_timerEvent, doc_QGeoPositionInfoSource_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_childEvent, "QGeoPositionInfoSource.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQGeoPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_childEvent, doc_QGeoPositionInfoSource_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_customEvent, "QGeoPositionInfoSource.customEvent(QEvent)");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQGeoPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_customEvent, doc_QGeoPositionInfoSource_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_connectNotify, "QGeoPositionInfoSource.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQGeoPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_connectNotify, doc_QGeoPositionInfoSource_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_disconnectNotify, "QGeoPositionInfoSource.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQGeoPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_disconnectNotify, doc_QGeoPositionInfoSource_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_senderSignalIndex, "QGeoPositionInfoSource.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQGeoPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_senderSignalIndex, doc_QGeoPositionInfoSource_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_isSignalConnected, "QGeoPositionInfoSource.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQGeoPositionInfoSource *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_isSignalConnected, doc_QGeoPositionInfoSource_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_setUpdateInterval, "QGeoPositionInfoSource.setUpdateInterval(int)");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_setUpdateInterval(PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_setUpdateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QGeoPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->QGeoPositionInfoSource::setUpdateInterval(a0) : sipCpp->setUpdateInterval(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_setUpdateInterval, doc_QGeoPositionInfoSource_setUpdateInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_updateInterval, "QGeoPositionInfoSource.updateInterval() -> int");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_updateInterval(PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_updateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->updateInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_updateInterval, doc_QGeoPositionInfoSource_updateInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_setPreferredPositioningMethods, "QGeoPositionInfoSource.setPreferredPositioningMethods(QGeoPositionInfoSource.PositioningMethods)");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_setPreferredPositioningMethods(PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_setPreferredPositioningMethods(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGeoPositionInfoSource::PositioningMethods* a0;
        int a0State = 0;
        QGeoPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp, sipType_QGeoPositionInfoSource_PositioningMethods, &a0, &a0State))
        {
            (sipSelfWasArg ? sipCpp->QGeoPositionInfoSource::setPreferredPositioningMethods(*a0) : sipCpp->setPreferredPositioningMethods(*a0));
            sipReleaseType(a0,sipType_QGeoPositionInfoSource_PositioningMethods,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_setPreferredPositioningMethods, doc_QGeoPositionInfoSource_setPreferredPositioningMethods);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_preferredPositioningMethods, "QGeoPositionInfoSource.preferredPositioningMethods() -> QGeoPositionInfoSource.PositioningMethods");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_preferredPositioningMethods(PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_preferredPositioningMethods(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp))
        {
            QGeoPositionInfoSource::PositioningMethods*sipRes;

            sipRes = new QGeoPositionInfoSource::PositioningMethods(sipCpp->preferredPositioningMethods());

            return sipConvertFromNewType(sipRes,sipType_QGeoPositionInfoSource_PositioningMethods,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_preferredPositioningMethods, doc_QGeoPositionInfoSource_preferredPositioningMethods);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_lastKnownPosition, "QGeoPositionInfoSource.lastKnownPosition(bool fromSatellitePositioningMethodsOnly=False) -> QGeoPositionInfo");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_lastKnownPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_lastKnownPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        bool a0 = 0;
        const QGeoPositionInfoSource *sipCpp;

        static const char *sipKwdList[] = {
            sipName_fromSatellitePositioningMethodsOnly,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp, &a0))
        {
            QGeoPositionInfo*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoPositionInfoSource, sipName_lastKnownPosition);
                return NULL;
            }

            sipRes = new QGeoPositionInfo(sipCpp->lastKnownPosition(a0));

            return sipConvertFromNewType(sipRes,sipType_QGeoPositionInfo,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_lastKnownPosition, doc_QGeoPositionInfoSource_lastKnownPosition);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_supportedPositioningMethods, "QGeoPositionInfoSource.supportedPositioningMethods() -> QGeoPositionInfoSource.PositioningMethods");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_supportedPositioningMethods(PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_supportedPositioningMethods(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QGeoPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp))
        {
            QGeoPositionInfoSource::PositioningMethods*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoPositionInfoSource, sipName_supportedPositioningMethods);
                return NULL;
            }

            sipRes = new QGeoPositionInfoSource::PositioningMethods(sipCpp->supportedPositioningMethods());

            return sipConvertFromNewType(sipRes,sipType_QGeoPositionInfoSource_PositioningMethods,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_supportedPositioningMethods, doc_QGeoPositionInfoSource_supportedPositioningMethods);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_minimumUpdateInterval, "QGeoPositionInfoSource.minimumUpdateInterval() -> int");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_minimumUpdateInterval(PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_minimumUpdateInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QGeoPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoPositionInfoSource, sipName_minimumUpdateInterval);
                return NULL;
            }

            sipRes = sipCpp->minimumUpdateInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_minimumUpdateInterval, doc_QGeoPositionInfoSource_minimumUpdateInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_sourceName, "QGeoPositionInfoSource.sourceName() -> str");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_sourceName(PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_sourceName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGeoPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->sourceName());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_sourceName, doc_QGeoPositionInfoSource_sourceName);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_createDefaultSource, "QGeoPositionInfoSource.createDefaultSource(QObject) -> QGeoPositionInfoSource");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_createDefaultSource(PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_createDefaultSource(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QObject* a0;
        sipWrapper *sipOwner = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "JH", sipType_QObject, &a0, &sipOwner))
        {
            QGeoPositionInfoSource*sipRes;

            sipRes = QGeoPositionInfoSource::createDefaultSource(a0);

            return sipConvertFromNewType(sipRes,sipType_QGeoPositionInfoSource,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_createDefaultSource, doc_QGeoPositionInfoSource_createDefaultSource);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_createSource, "QGeoPositionInfoSource.createSource(str, QObject) -> QGeoPositionInfoSource");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_createSource(PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_createSource(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QObject* a1;
        sipWrapper *sipOwner = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J1JH", sipType_QString,&a0, &a0State, sipType_QObject, &a1, &sipOwner))
        {
            QGeoPositionInfoSource*sipRes;

            sipRes = QGeoPositionInfoSource::createSource(*a0,a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QGeoPositionInfoSource,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_createSource, doc_QGeoPositionInfoSource_createSource);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_availableSources, "QGeoPositionInfoSource.availableSources() -> list-of-str");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_availableSources(PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_availableSources(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QStringList*sipRes;

            sipRes = new QStringList(QGeoPositionInfoSource::availableSources());

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_availableSources, doc_QGeoPositionInfoSource_availableSources);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_error, "QGeoPositionInfoSource.error() -> QGeoPositionInfoSource.Error");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_error(PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_error(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QGeoPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp))
        {
            QGeoPositionInfoSource::Error sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoPositionInfoSource, sipName_error);
                return NULL;
            }

            sipRes = sipCpp->error();

            return sipConvertFromEnum(sipRes,sipType_QGeoPositionInfoSource_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_error, doc_QGeoPositionInfoSource_error);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_startUpdates, "QGeoPositionInfoSource.startUpdates()");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_startUpdates(PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_startUpdates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QGeoPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoPositionInfoSource, sipName_startUpdates);
                return NULL;
            }

            sipCpp->startUpdates();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_startUpdates, doc_QGeoPositionInfoSource_startUpdates);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_stopUpdates, "QGeoPositionInfoSource.stopUpdates()");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_stopUpdates(PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_stopUpdates(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        QGeoPositionInfoSource *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoPositionInfoSource, sipName_stopUpdates);
                return NULL;
            }

            sipCpp->stopUpdates();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_stopUpdates, doc_QGeoPositionInfoSource_stopUpdates);

    return NULL;
}


PyDoc_STRVAR(doc_QGeoPositionInfoSource_requestUpdate, "QGeoPositionInfoSource.requestUpdate(int timeout=0)");

extern "C" {static PyObject *meth_QGeoPositionInfoSource_requestUpdate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QGeoPositionInfoSource_requestUpdate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0 = 0;
        QGeoPositionInfoSource *sipCpp;

        static const char *sipKwdList[] = {
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_QGeoPositionInfoSource, &sipCpp, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QGeoPositionInfoSource, sipName_requestUpdate);
                return NULL;
            }

            sipCpp->requestUpdate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGeoPositionInfoSource, sipName_requestUpdate, doc_QGeoPositionInfoSource_requestUpdate);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGeoPositionInfoSource(void *, const sipTypeDef *);}
static void *cast_QGeoPositionInfoSource(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGeoPositionInfoSource)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QGeoPositionInfoSource *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGeoPositionInfoSource(void *, int);}
static void release_QGeoPositionInfoSource(void *sipCppV,int)
{
    QGeoPositionInfoSource *sipCpp = reinterpret_cast<QGeoPositionInfoSource *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QGeoPositionInfoSource(sipSimpleWrapper *);}
static void dealloc_QGeoPositionInfoSource(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGeoPositionInfoSource *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGeoPositionInfoSource(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QGeoPositionInfoSource(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGeoPositionInfoSource(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQGeoPositionInfoSource *sipCpp = 0;

    {
        QObject* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQGeoPositionInfoSource(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGeoPositionInfoSource[] = {{162, 0, 1}};


static PyMethodDef methods_QGeoPositionInfoSource[] = {
    {SIP_MLNAME_CAST(sipName_availableSources), meth_QGeoPositionInfoSource_availableSources, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_availableSources)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QGeoPositionInfoSource_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QGeoPositionInfoSource_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createDefaultSource), meth_QGeoPositionInfoSource_createDefaultSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_createDefaultSource)},
    {SIP_MLNAME_CAST(sipName_createSource), meth_QGeoPositionInfoSource_createSource, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_createSource)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QGeoPositionInfoSource_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QGeoPositionInfoSource_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QGeoPositionInfoSource_error, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_error)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QGeoPositionInfoSource_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_lastKnownPosition), (PyCFunction)meth_QGeoPositionInfoSource_lastKnownPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_lastKnownPosition)},
    {SIP_MLNAME_CAST(sipName_minimumUpdateInterval), meth_QGeoPositionInfoSource_minimumUpdateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_minimumUpdateInterval)},
    {SIP_MLNAME_CAST(sipName_preferredPositioningMethods), meth_QGeoPositionInfoSource_preferredPositioningMethods, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_preferredPositioningMethods)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QGeoPositionInfoSource_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_requestUpdate), (PyCFunction)meth_QGeoPositionInfoSource_requestUpdate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_requestUpdate)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QGeoPositionInfoSource_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QGeoPositionInfoSource_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setPreferredPositioningMethods), meth_QGeoPositionInfoSource_setPreferredPositioningMethods, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_setPreferredPositioningMethods)},
    {SIP_MLNAME_CAST(sipName_setUpdateInterval), meth_QGeoPositionInfoSource_setUpdateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_setUpdateInterval)},
    {SIP_MLNAME_CAST(sipName_sourceName), meth_QGeoPositionInfoSource_sourceName, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_sourceName)},
    {SIP_MLNAME_CAST(sipName_startUpdates), meth_QGeoPositionInfoSource_startUpdates, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_startUpdates)},
    {SIP_MLNAME_CAST(sipName_stopUpdates), meth_QGeoPositionInfoSource_stopUpdates, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_stopUpdates)},
    {SIP_MLNAME_CAST(sipName_supportedPositioningMethods), meth_QGeoPositionInfoSource_supportedPositioningMethods, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_supportedPositioningMethods)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QGeoPositionInfoSource_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_updateInterval), meth_QGeoPositionInfoSource_updateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QGeoPositionInfoSource_updateInterval)}
};

static sipEnumMemberDef enummembers_QGeoPositionInfoSource[] = {
    {sipName_AccessError, static_cast<int>(QGeoPositionInfoSource::AccessError), 14},
    {sipName_AllPositioningMethods, static_cast<int>(QGeoPositionInfoSource::AllPositioningMethods), 15},
    {sipName_ClosedError, static_cast<int>(QGeoPositionInfoSource::ClosedError), 14},
    {sipName_NoError, static_cast<int>(QGeoPositionInfoSource::NoError), 14},
    {sipName_NoPositioningMethods, static_cast<int>(QGeoPositionInfoSource::NoPositioningMethods), 15},
    {sipName_NonSatellitePositioningMethods, static_cast<int>(QGeoPositionInfoSource::NonSatellitePositioningMethods), 15},
    {sipName_SatellitePositioningMethods, static_cast<int>(QGeoPositionInfoSource::SatellitePositioningMethods), 15},
    {sipName_UnknownSourceError, static_cast<int>(QGeoPositionInfoSource::UnknownSourceError), 14},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QGeoPositionInfoSource[] = {
    {"updateTimeout()", "\1QGeoPositionInfoSource.updateTimeout", 0, 0},
    {"positionUpdated(QGeoPositionInfo)", "\1QGeoPositionInfoSource.positionUpdated[QGeoPositionInfo]", 0, 0},
    {"error(QGeoPositionInfoSource::Error)", "\1QGeoPositionInfoSource.error[QGeoPositionInfoSource.Error]", &methods_QGeoPositionInfoSource[7], 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QGeoPositionInfoSource, "\1QGeoPositionInfoSource(QObject)");


pyqt5ClassTypeDef sipTypeDef_QtPositioning_QGeoPositionInfoSource = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGeoPositionInfoSource,
        {0}
    },
    {
        sipNameNr_QGeoPositionInfoSource,
        {0, 0, 1},
        24, methods_QGeoPositionInfoSource,
        8, enummembers_QGeoPositionInfoSource,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGeoPositionInfoSource,
    -1,
    -1,
    supers_QGeoPositionInfoSource,
    0,
    init_type_QGeoPositionInfoSource,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGeoPositionInfoSource,
    0,
    0,
    0,
    release_QGeoPositionInfoSource,
    cast_QGeoPositionInfoSource,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QGeoPositionInfoSource::staticMetaObject,
    0,
    signals_QGeoPositionInfoSource,
    0
};
