/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:13 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXmlPatterns.h"

#line 117 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXmlPatterns/qabstractxmlnodemodel.sip"
#include <qabstractxmlnodemodel.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXmlPatterns/sipQtXmlPatternsQXmlItem.cpp"

#line 26 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtXmlPatterns/qabstractxmlnodemodel.sip"
#include <qabstractxmlnodemodel.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXmlPatterns/sipQtXmlPatternsQXmlItem.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtXmlPatterns/sipQtXmlPatternsQXmlItem.cpp"


PyDoc_STRVAR(doc_QXmlItem_isNull, "QXmlItem.isNull() -> bool");

extern "C" {static PyObject *meth_QXmlItem_isNull(PyObject *, PyObject *);}
static PyObject *meth_QXmlItem_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNull();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlItem, sipName_isNull, doc_QXmlItem_isNull);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlItem_isNode, "QXmlItem.isNode() -> bool");

extern "C" {static PyObject *meth_QXmlItem_isNode(PyObject *, PyObject *);}
static PyObject *meth_QXmlItem_isNode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isNode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlItem, sipName_isNode, doc_QXmlItem_isNode);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlItem_isAtomicValue, "QXmlItem.isAtomicValue() -> bool");

extern "C" {static PyObject *meth_QXmlItem_isAtomicValue(PyObject *, PyObject *);}
static PyObject *meth_QXmlItem_isAtomicValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlItem, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAtomicValue();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlItem, sipName_isAtomicValue, doc_QXmlItem_isAtomicValue);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlItem_toAtomicValue, "QXmlItem.toAtomicValue() -> QVariant");

extern "C" {static PyObject *meth_QXmlItem_toAtomicValue(PyObject *, PyObject *);}
static PyObject *meth_QXmlItem_toAtomicValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlItem, &sipCpp))
        {
            QVariant*sipRes;

            sipRes = new QVariant(sipCpp->toAtomicValue());

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlItem, sipName_toAtomicValue, doc_QXmlItem_toAtomicValue);

    return NULL;
}


PyDoc_STRVAR(doc_QXmlItem_toNodeModelIndex, "QXmlItem.toNodeModelIndex() -> QXmlNodeModelIndex");

extern "C" {static PyObject *meth_QXmlItem_toNodeModelIndex(PyObject *, PyObject *);}
static PyObject *meth_QXmlItem_toNodeModelIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QXmlItem *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QXmlItem, &sipCpp))
        {
            QXmlNodeModelIndex*sipRes;

            sipRes = new QXmlNodeModelIndex(sipCpp->toNodeModelIndex());

            return sipConvertFromNewType(sipRes,sipType_QXmlNodeModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QXmlItem, sipName_toNodeModelIndex, doc_QXmlItem_toNodeModelIndex);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QXmlItem(void *, const sipTypeDef *);}
static void *cast_QXmlItem(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QXmlItem)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlItem(void *, int);}
static void release_QXmlItem(void *sipCppV,int)
{
    delete reinterpret_cast<QXmlItem *>(sipCppV);
}


extern "C" {static void assign_QXmlItem(void *, SIP_SSIZE_T, const void *);}
static void assign_QXmlItem(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QXmlItem *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QXmlItem *>(sipSrc);
}


extern "C" {static void *array_QXmlItem(SIP_SSIZE_T);}
static void *array_QXmlItem(SIP_SSIZE_T sipNrElem)
{
    return new QXmlItem[sipNrElem];
}


extern "C" {static void *copy_QXmlItem(const void *, SIP_SSIZE_T);}
static void *copy_QXmlItem(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QXmlItem(reinterpret_cast<const QXmlItem *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QXmlItem(sipSimpleWrapper *);}
static void dealloc_QXmlItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QXmlItem(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QXmlItem(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QXmlItem(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QXmlItem *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QXmlItem();

            return sipCpp;
        }
    }

    {
        const QXmlItem* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QXmlItem, &a0))
        {
            sipCpp = new QXmlItem(*a0);

            return sipCpp;
        }
    }

    {
        const QXmlNodeModelIndex* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QXmlNodeModelIndex, &a0))
        {
            sipCpp = new QXmlItem(*a0);

            return sipCpp;
        }
    }

    {
        const QVariant* a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_QVariant, &a0, &a0State))
        {
            sipCpp = new QXmlItem(*a0);
            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_QXmlItem[] = {
    {SIP_MLNAME_CAST(sipName_isAtomicValue), meth_QXmlItem_isAtomicValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlItem_isAtomicValue)},
    {SIP_MLNAME_CAST(sipName_isNode), meth_QXmlItem_isNode, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlItem_isNode)},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QXmlItem_isNull, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlItem_isNull)},
    {SIP_MLNAME_CAST(sipName_toAtomicValue), meth_QXmlItem_toAtomicValue, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlItem_toAtomicValue)},
    {SIP_MLNAME_CAST(sipName_toNodeModelIndex), meth_QXmlItem_toNodeModelIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_QXmlItem_toNodeModelIndex)}
};

PyDoc_STRVAR(doc_QXmlItem, "\1QXmlItem()\n"
    "QXmlItem(QXmlItem)\n"
    "QXmlItem(QXmlNodeModelIndex)\n"
    "QXmlItem(QVariant)");


pyqt5ClassTypeDef sipTypeDef_QtXmlPatterns_QXmlItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QXmlItem,
        {0}
    },
    {
        sipNameNr_QXmlItem,
        {0, 0, 1},
        5, methods_QXmlItem,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QXmlItem,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_type_QXmlItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QXmlItem,
    assign_QXmlItem,
    array_QXmlItem,
    copy_QXmlItem,
    release_QXmlItem,
    cast_QXmlItem,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
