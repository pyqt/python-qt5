/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:18:34 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebEngineWidgets.h"

#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebEngineWidgets/qwebenginepage.sip"
#include <qwebenginepage.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"

#line 28 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebEngineWidgets/qwebenginecertificateerror.sip"
#include <qwebenginecertificateerror.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 27 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 100 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 42 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 45 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 48 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 30 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 51 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebEngineWidgets/qwebenginesettings.sip"
#include <qwebenginesettings.h>
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 32 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 57 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtWidgets/qmenu.sip"
#include <qmenu.h>
#line 60 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 28 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebEngineWidgets/qwebenginepage.sip"
#include <qwebenginepage.h>
#line 63 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtWidgets/qaction.sip"
#include <qaction.h>
#line 69 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 30 "sip/QtWidgets/qwidget.sip"
#include <qwidget.h>
#line 72 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 54 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebEngineWidgets/qwebenginehistory.sip"
#include <qwebenginehistory.h>
#line 75 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 30 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 78 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 234 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 81 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 222 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 30 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 87 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 36 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 90 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 144 "sip/QtCore/qpycore_qlist.sip"
#include <qlist.h>
#line 93 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 96 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 99 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 30 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 102 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 30 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 30 "sip/QtCore/qregularexpression.sip"
#include <qregularexpression.h>
#line 108 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
#line 26 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 111 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"


class sipQWebEnginePage : public QWebEnginePage
{
public:
    sipQWebEnginePage(QObject*);
    virtual ~sipQWebEnginePage();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent*);
    void sipProtectVirt_childEvent(bool,QChildEvent*);
    void sipProtectVirt_customEvent(bool,QEvent*);
    void sipProtectVirt_connectNotify(bool,const QMetaMethod&);
    void sipProtectVirt_disconnectNotify(bool,const QMetaMethod&);
    int sipProtect_senderSignalIndex() const;
    bool sipProtect_isSignalConnected(const QMetaMethod&) const;
    QWebEnginePage* sipProtectVirt_createWindow(bool,QWebEnginePage::WebWindowType);
    QStringList sipProtectVirt_chooseFiles(bool,QWebEnginePage::FileSelectionMode,const QStringList&,const QStringList&);
    void sipProtectVirt_javaScriptAlert(bool,const QUrl&,const QString&);
    bool sipProtectVirt_javaScriptConfirm(bool,const QUrl&,const QString&);
    bool sipProtectVirt_javaScriptPrompt(bool,const QUrl&,const QString&,const QString&,QString*);
    void sipProtectVirt_javaScriptConsoleMessage(bool,QWebEnginePage::JavaScriptConsoleMessageLevel,const QString&,int,const QString&);
    bool sipProtectVirt_certificateError(bool,const QWebEngineCertificateError&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const QMetaMethod&);
    void connectNotify(const QMetaMethod&);
    void customEvent(QEvent*);
    void childEvent(QChildEvent*);
    void timerEvent(QTimerEvent*);
    bool eventFilter(QObject*,QEvent*);
    bool certificateError(const QWebEngineCertificateError&);
    void javaScriptConsoleMessage(QWebEnginePage::JavaScriptConsoleMessageLevel,const QString&,int,const QString&);
    bool javaScriptPrompt(const QUrl&,const QString&,const QString&,QString*);
    bool javaScriptConfirm(const QUrl&,const QString&);
    void javaScriptAlert(const QUrl&,const QString&);
    QStringList chooseFiles(QWebEnginePage::FileSelectionMode,const QStringList&,const QStringList&);
    QWebEnginePage* createWindow(QWebEnginePage::WebWindowType);
    bool event(QEvent*);
    void triggerAction(QWebEnginePage::WebAction,bool);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebEnginePage(const sipQWebEnginePage &);
    sipQWebEnginePage &operator = (const sipQWebEnginePage &);

    char sipPyMethods[15];
};

sipQWebEnginePage::sipQWebEnginePage(QObject*a0): QWebEnginePage(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebEnginePage::~sipQWebEnginePage()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebEnginePage::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : sip_QtWebEngineWidgets_qt_metaobject(sipPySelf,sipType_QWebEnginePage);
}

int sipQWebEnginePage::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebEnginePage::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebEngineWidgets_qt_metacall(sipPySelf,sipType_QWebEnginePage,_c,_id,_a);

    return _id;
}

void *sipQWebEnginePage::qt_metacast(const char *_clname)
{
    void *sipCpp;

    return (sip_QtWebEngineWidgets_qt_metacast(sipPySelf, sipType_QWebEnginePage, _clname, &sipCpp) ? sipCpp : QWebEnginePage::qt_metacast(_clname));
}

void sipQWebEnginePage::disconnectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
        QWebEnginePage::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEnginePage::connectNotify(const QMetaMethod& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
        QWebEnginePage::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QMetaMethod&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[46]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEnginePage::customEvent(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
        QWebEnginePage::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    ((sipVH_QtCore_25)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[25]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEnginePage::childEvent(QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
        QWebEnginePage::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_47)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QChildEvent*);

    ((sipVH_QtCore_47)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[47]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEnginePage::timerEvent(QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
        QWebEnginePage::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QTimerEvent*);

    ((sipVH_QtCore_9)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[9]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebEnginePage::eventFilter(QObject*a0,QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return QWebEnginePage::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_26)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QObject*,QEvent*);

    return ((sipVH_QtCore_26)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[26]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

bool sipQWebEnginePage::certificateError(const QWebEngineCertificateError& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_certificateError);

    if (!sipMeth)
        return QWebEnginePage::certificateError(a0);

    extern bool sipVH_QtWebEngineWidgets_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QWebEngineCertificateError&);

    return sipVH_QtWebEngineWidgets_1(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEnginePage::javaScriptConsoleMessage(QWebEnginePage::JavaScriptConsoleMessageLevel a0,const QString& a1,int a2,const QString& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_javaScriptConsoleMessage);

    if (!sipMeth)
    {
        QWebEnginePage::javaScriptConsoleMessage(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtWebEngineWidgets_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebEnginePage::JavaScriptConsoleMessageLevel,const QString&,int,const QString&);

    sipVH_QtWebEngineWidgets_2(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

bool sipQWebEnginePage::javaScriptPrompt(const QUrl& a0,const QString& a1,const QString& a2,QString*a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_javaScriptPrompt);

    if (!sipMeth)
        return QWebEnginePage::javaScriptPrompt(a0,a1,a2,a3);

    extern bool sipVH_QtWebEngineWidgets_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&,const QString&,const QString&,QString*);

    return sipVH_QtWebEngineWidgets_3(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2, a3);
}

bool sipQWebEnginePage::javaScriptConfirm(const QUrl& a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_javaScriptConfirm);

    if (!sipMeth)
        return QWebEnginePage::javaScriptConfirm(a0,a1);

    extern bool sipVH_QtWebEngineWidgets_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&,const QString&);

    return sipVH_QtWebEngineWidgets_4(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

void sipQWebEnginePage::javaScriptAlert(const QUrl& a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_javaScriptAlert);

    if (!sipMeth)
    {
        QWebEnginePage::javaScriptAlert(a0,a1);
        return;
    }

    extern void sipVH_QtWebEngineWidgets_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const QUrl&,const QString&);

    sipVH_QtWebEngineWidgets_5(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QStringList sipQWebEnginePage::chooseFiles(QWebEnginePage::FileSelectionMode a0,const QStringList& a1,const QStringList& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_chooseFiles);

    if (!sipMeth)
        return QWebEnginePage::chooseFiles(a0,a1,a2);

    extern QStringList sipVH_QtWebEngineWidgets_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebEnginePage::FileSelectionMode,const QStringList&,const QStringList&);

    return sipVH_QtWebEngineWidgets_6(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1, a2);
}

QWebEnginePage* sipQWebEnginePage::createWindow(QWebEnginePage::WebWindowType a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_createWindow);

    if (!sipMeth)
        return QWebEnginePage::createWindow(a0);

    extern QWebEnginePage* sipVH_QtWebEngineWidgets_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebEnginePage::WebWindowType);

    return sipVH_QtWebEngineWidgets_7(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

bool sipQWebEnginePage::event(QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return QWebEnginePage::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QEvent*);

    return ((sipVH_QtCore_5)(sipModuleAPI_QtWebEngineWidgets_QtCore->em_virthandlers[5]))(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0);
}

void sipQWebEnginePage::triggerAction(QWebEnginePage::WebAction a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_triggerAction);

    if (!sipMeth)
    {
        QWebEnginePage::triggerAction(a0,a1);
        return;
    }

    extern void sipVH_QtWebEngineWidgets_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, QWebEnginePage::WebAction,bool);

    sipVH_QtWebEngineWidgets_8(sipGILState, sipModuleAPI_QtWebEngineWidgets_QtCore->em_virterrorhandlers[0], sipPySelf, sipMeth, a0, a1);
}

QObject* sipQWebEnginePage::sipProtect_sender() const
{
    return QObject::sender();
}

int sipQWebEnginePage::sipProtect_receivers(const char*a0) const
{
    return QObject::receivers(a0);
}

void sipQWebEnginePage::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent*a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQWebEnginePage::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent*a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQWebEnginePage::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent*a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQWebEnginePage::sipProtectVirt_connectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQWebEnginePage::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const QMetaMethod& a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipQWebEnginePage::sipProtect_senderSignalIndex() const
{
    return QObject::senderSignalIndex();
}

bool sipQWebEnginePage::sipProtect_isSignalConnected(const QMetaMethod& a0) const
{
    return QObject::isSignalConnected(a0);
}

QWebEnginePage* sipQWebEnginePage::sipProtectVirt_createWindow(bool sipSelfWasArg,QWebEnginePage::WebWindowType a0)
{
    return (sipSelfWasArg ? QWebEnginePage::createWindow(a0) : createWindow(a0));
}

QStringList sipQWebEnginePage::sipProtectVirt_chooseFiles(bool sipSelfWasArg,QWebEnginePage::FileSelectionMode a0,const QStringList& a1,const QStringList& a2)
{
    return (sipSelfWasArg ? QWebEnginePage::chooseFiles(a0,a1,a2) : chooseFiles(a0,a1,a2));
}

void sipQWebEnginePage::sipProtectVirt_javaScriptAlert(bool sipSelfWasArg,const QUrl& a0,const QString& a1)
{
    (sipSelfWasArg ? QWebEnginePage::javaScriptAlert(a0,a1) : javaScriptAlert(a0,a1));
}

bool sipQWebEnginePage::sipProtectVirt_javaScriptConfirm(bool sipSelfWasArg,const QUrl& a0,const QString& a1)
{
    return (sipSelfWasArg ? QWebEnginePage::javaScriptConfirm(a0,a1) : javaScriptConfirm(a0,a1));
}

bool sipQWebEnginePage::sipProtectVirt_javaScriptPrompt(bool sipSelfWasArg,const QUrl& a0,const QString& a1,const QString& a2,QString*a3)
{
    return (sipSelfWasArg ? QWebEnginePage::javaScriptPrompt(a0,a1,a2,a3) : javaScriptPrompt(a0,a1,a2,a3));
}

void sipQWebEnginePage::sipProtectVirt_javaScriptConsoleMessage(bool sipSelfWasArg,QWebEnginePage::JavaScriptConsoleMessageLevel a0,const QString& a1,int a2,const QString& a3)
{
    (sipSelfWasArg ? QWebEnginePage::javaScriptConsoleMessage(a0,a1,a2,a3) : javaScriptConsoleMessage(a0,a1,a2,a3));
}

bool sipQWebEnginePage::sipProtectVirt_certificateError(bool sipSelfWasArg,const QWebEngineCertificateError& a0)
{
    return (sipSelfWasArg ? QWebEnginePage::certificateError(a0) : certificateError(a0));
}


PyDoc_STRVAR(doc_QWebEnginePage_sender, "QWebEnginePage.sender() -> QObject");

extern "C" {static PyObject *meth_QWebEnginePage_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            QObject*sipRes = 0;

#line 546 "sip/QtCore/qobject.sip"
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        if (!sipRes)
        {
            typedef QObject *(*qtcore_qobject_sender_t)();
        
            static qtcore_qobject_sender_t qtcore_qobject_sender = 0;
        
            if (!qtcore_qobject_sender)
                qtcore_qobject_sender = (qtcore_qobject_sender_t)sipImportSymbol("qtcore_qobject_sender");
        
            if (qtcore_qobject_sender)
                sipRes = qtcore_qobject_sender();
        }
#line 578 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_sender, doc_QWebEnginePage_sender);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_receivers, "QWebEnginePage.receivers(signal) -> int");

extern "C" {static PyObject *meth_QWebEnginePage_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_QWebEnginePage, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 575 "sip/QtCore/qobject.sip"
        // We need to handle the signal object.  Import the helper if it hasn't already
        // been done.
        typedef sipErrorState (*pyqt5_get_signal_signature_t)(PyObject *, const QObject *, const QByteArray &);
        
        static pyqt5_get_signal_signature_t pyqt5_get_signal_signature = 0;
        
        if (!pyqt5_get_signal_signature)
            pyqt5_get_signal_signature = (pyqt5_get_signal_signature_t)sipImportSymbol("pyqt5_get_signal_signature");
        
        if (pyqt5_get_signal_signature)
        {
            QByteArray signal_signature;
            
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            if ((sipError = pyqt5_get_signal_signature(a0, sipCpp, signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->receivers(signal_signature.constData());
            }
        #else
            if ((sipError = pyqt5_get_signal_signature(a0, static_cast<const QObject *>(sipCpp), signal_signature)) == sipErrorNone)
            {
                sipRes = sipCpp->sipProtect_receivers(signal_signature.constData());
            }
        #endif
            else if (sipError == sipErrorContinue)
            {
                sipError = sipBadCallableArg(0, a0);
            }
        }
#line 637 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_receivers, doc_QWebEnginePage_receivers);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_timerEvent, "QWebEnginePage.timerEvent(QTimerEvent)");

extern "C" {static PyObject *meth_QWebEnginePage_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent* a0;
        sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QTimerEvent, &a0))
        {
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_timerEvent, doc_QWebEnginePage_timerEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_childEvent, "QWebEnginePage.childEvent(QChildEvent)");

extern "C" {static PyObject *meth_QWebEnginePage_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent* a0;
        sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QChildEvent, &a0))
        {
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_childEvent, doc_QWebEnginePage_childEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_customEvent, "QWebEnginePage.customEvent(QEvent)");

extern "C" {static PyObject *meth_QWebEnginePage_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QEvent, &a0))
        {
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_customEvent, doc_QWebEnginePage_customEvent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_connectNotify, "QWebEnginePage.connectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWebEnginePage_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_connectNotify, doc_QWebEnginePage_connectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_disconnectNotify, "QWebEnginePage.disconnectNotify(QMetaMethod)");

extern "C" {static PyObject *meth_QWebEnginePage_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMetaMethod* a0;
        sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QMetaMethod, &a0))
        {
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_disconnectNotify, doc_QWebEnginePage_disconnectNotify);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_senderSignalIndex, "QWebEnginePage.senderSignalIndex() -> int");

extern "C" {static PyObject *meth_QWebEnginePage_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->sipProtect_senderSignalIndex();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_senderSignalIndex, doc_QWebEnginePage_senderSignalIndex);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_isSignalConnected, "QWebEnginePage.isSignalConnected(QMetaMethod) -> bool");

extern "C" {static PyObject *meth_QWebEnginePage_isSignalConnected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_isSignalConnected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QMetaMethod* a0;
        const sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QMetaMethod, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtect_isSignalConnected(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_isSignalConnected, doc_QWebEnginePage_isSignalConnected);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_history, "QWebEnginePage.history() -> QWebEngineHistory");

extern "C" {static PyObject *meth_QWebEnginePage_history(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_history(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            QWebEngineHistory*sipRes;

            sipRes = sipCpp->history();

            return sipConvertFromType(sipRes,sipType_QWebEngineHistory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_history, doc_QWebEnginePage_history);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setView, "QWebEnginePage.setView(QWidget)");

extern "C" {static PyObject *meth_QWebEnginePage_setView(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWidget* a0;
        QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWidget, &a0))
        {
            sipCpp->setView(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setView, doc_QWebEnginePage_setView);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_view, "QWebEnginePage.view() -> QWidget");

extern "C" {static PyObject *meth_QWebEnginePage_view(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_view(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            QWidget*sipRes;

            sipRes = sipCpp->view();

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_view, doc_QWebEnginePage_view);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_hasSelection, "QWebEnginePage.hasSelection() -> bool");

extern "C" {static PyObject *meth_QWebEnginePage_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasSelection();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_hasSelection, doc_QWebEnginePage_hasSelection);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_selectedText, "QWebEnginePage.selectedText() -> str");

extern "C" {static PyObject *meth_QWebEnginePage_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->selectedText());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_selectedText, doc_QWebEnginePage_selectedText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_action, "QWebEnginePage.action(QWebEnginePage.WebAction) -> QAction");

extern "C" {static PyObject *meth_QWebEnginePage_action(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_action(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEnginePage::WebAction a0;
        const QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEnginePage_WebAction, &a0))
        {
            QAction*sipRes;

            sipRes = sipCpp->action(a0);

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_action, doc_QWebEnginePage_action);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_triggerAction, "QWebEnginePage.triggerAction(QWebEnginePage.WebAction, bool checked=False)");

extern "C" {static PyObject *meth_QWebEnginePage_triggerAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_triggerAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebEnginePage::WebAction a0;
        bool a1 = 0;
        QWebEnginePage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_checked,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE|b", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEnginePage_WebAction, &a0, &a1))
        {
            (sipSelfWasArg ? sipCpp->QWebEnginePage::triggerAction(a0,a1) : sipCpp->triggerAction(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_triggerAction, doc_QWebEnginePage_triggerAction);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_event, "QWebEnginePage.event(QEvent) -> bool");

extern "C" {static PyObject *meth_QWebEnginePage_event(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_event(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent* a0;
        QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QEvent, &a0))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->QWebEnginePage::event(a0) : sipCpp->event(a0));

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_event, doc_QWebEnginePage_event);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_findText, "QWebEnginePage.findText(str, QWebEnginePage.FindFlags options=0, callable resultCallback=0)");

extern "C" {static PyObject *meth_QWebEnginePage_findText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_findText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebEnginePage::FindFlags a1def = 0;
        QWebEnginePage::FindFlags* a1 = &a1def;
        int a1State = 0;
        PyObject * a2 = 0;
        QWebEnginePage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_options,
            sipName_resultCallback,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1H", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QString,&a0, &a0State, sipType_QWebEnginePage_FindFlags, &a1, &a1State, &a2))
        {
#line 105 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebEngineWidgets/qwebenginepage.sip"
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->findText(*a0, *a1, [a2](bool arg) {
            if (a2)
            {
                SIP_BLOCK_THREADS
                
                PyObject *res;
        
                res = sipCallMethod(NULL, a2, "b", (int)arg);
        
                if (!res)
                    pyqt5_qtwebenginewidgets_err_print();
                else
                    Py_DECREF(res);
        
                SIP_UNBLOCK_THREADS
            }
        });
        
        Py_END_ALLOW_THREADS
#line 1125 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QWebEnginePage_FindFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_findText, doc_QWebEnginePage_findText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_createStandardContextMenu, "QWebEnginePage.createStandardContextMenu() -> QMenu");

extern "C" {static PyObject *meth_QWebEnginePage_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            QMenu*sipRes;

            sipRes = sipCpp->createStandardContextMenu();

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_createStandardContextMenu, doc_QWebEnginePage_createStandardContextMenu);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setFeaturePermission, "QWebEnginePage.setFeaturePermission(QUrl, QWebEnginePage.Feature, QWebEnginePage.PermissionPolicy)");

extern "C" {static PyObject *meth_QWebEnginePage_setFeaturePermission(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setFeaturePermission(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QWebEnginePage::Feature a1;
        QWebEnginePage::PermissionPolicy a2;
        QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9EE", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0, sipType_QWebEnginePage_Feature, &a1, sipType_QWebEnginePage_PermissionPolicy, &a2))
        {
            sipCpp->setFeaturePermission(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setFeaturePermission, doc_QWebEnginePage_setFeaturePermission);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_load, "QWebEnginePage.load(QUrl)");

extern "C" {static PyObject *meth_QWebEnginePage_load(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_load(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->load(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_load, doc_QWebEnginePage_load);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setHtml, "QWebEnginePage.setHtml(str, QUrl baseUrl=QUrl())");

extern "C" {static PyObject *meth_QWebEnginePage_setHtml(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setHtml(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        const QUrl& a1def = QUrl();
        const QUrl* a1 = &a1def;
        QWebEnginePage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QString,&a0, &a0State, sipType_QUrl, &a1))
        {
            sipCpp->setHtml(*a0,*a1);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setHtml, doc_QWebEnginePage_setHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setContent, "QWebEnginePage.setContent(QByteArray, str mimeType=QString(), QUrl baseUrl=QUrl())");

extern "C" {static PyObject *meth_QWebEnginePage_setContent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setContent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const QByteArray* a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString* a1 = &a1def;
        int a1State = 0;
        const QUrl& a2def = QUrl();
        const QUrl* a2 = &a2def;
        QWebEnginePage *sipCpp;

        static const char *sipKwdList[] = {
            NULL,
            sipName_mimeType,
            sipName_baseUrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1J9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QString,&a1, &a1State, sipType_QUrl, &a2))
        {
            sipCpp->setContent(*a0,*a1,*a2);
            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setContent, doc_QWebEnginePage_setContent);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_toHtml, "QWebEnginePage.toHtml(callable)");

extern "C" {static PyObject *meth_QWebEnginePage_toHtml(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_toHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BF", &sipSelf, sipType_QWebEnginePage, &sipCpp, &a0))
        {
#line 135 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebEngineWidgets/qwebenginepage.sip"
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->toHtml([a0](const QString &arg) {
            SIP_BLOCK_THREADS
            
            PyObject *res;
        
            res = sipCallMethod(NULL, a0, "N", new QString(arg), sipType_QString, NULL);
        
            if (!res)
                pyqt5_qtwebenginewidgets_err_print();
            else
                Py_DECREF(res);
            
            SIP_UNBLOCK_THREADS
        });
        
        Py_END_ALLOW_THREADS
#line 1333 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_toHtml, doc_QWebEnginePage_toHtml);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_toPlainText, "QWebEnginePage.toPlainText(callable)");

extern "C" {static PyObject *meth_QWebEnginePage_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BF", &sipSelf, sipType_QWebEnginePage, &sipCpp, &a0))
        {
#line 157 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebEngineWidgets/qwebenginepage.sip"
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->toPlainText([a0](const QString &arg) {
            SIP_BLOCK_THREADS
            
            PyObject *res;
        
            res = sipCallMethod(NULL, a0, "N", new QString(arg), sipType_QString, NULL);
        
            if (!res)
                pyqt5_qtwebenginewidgets_err_print();
            else
                Py_DECREF(res);
            
            SIP_UNBLOCK_THREADS
        });
        
        Py_END_ALLOW_THREADS
#line 1379 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_toPlainText, doc_QWebEnginePage_toPlainText);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_title, "QWebEnginePage.title() -> str");

extern "C" {static PyObject *meth_QWebEnginePage_title(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            QString*sipRes;

            sipRes = new QString(sipCpp->title());

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_title, doc_QWebEnginePage_title);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setUrl, "QWebEnginePage.setUrl(QUrl)");

extern "C" {static PyObject *meth_QWebEnginePage_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QUrl* a0;
        QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0))
        {
            sipCpp->setUrl(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setUrl, doc_QWebEnginePage_setUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_url, "QWebEnginePage.url() -> QUrl");

extern "C" {static PyObject *meth_QWebEnginePage_url(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_url(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->url());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_url, doc_QWebEnginePage_url);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_requestedUrl, "QWebEnginePage.requestedUrl() -> QUrl");

extern "C" {static PyObject *meth_QWebEnginePage_requestedUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_requestedUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->requestedUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_requestedUrl, doc_QWebEnginePage_requestedUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_iconUrl, "QWebEnginePage.iconUrl() -> QUrl");

extern "C" {static PyObject *meth_QWebEnginePage_iconUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_iconUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            QUrl*sipRes;

            sipRes = new QUrl(sipCpp->iconUrl());

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_iconUrl, doc_QWebEnginePage_iconUrl);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_zoomFactor, "QWebEnginePage.zoomFactor() -> float");

extern "C" {static PyObject *meth_QWebEnginePage_zoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_zoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            qreal sipRes;

            sipRes = sipCpp->zoomFactor();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_zoomFactor, doc_QWebEnginePage_zoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_setZoomFactor, "QWebEnginePage.setZoomFactor(float)");

extern "C" {static PyObject *meth_QWebEnginePage_setZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_setZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        qreal a0;
        QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_QWebEnginePage, &sipCpp, &a0))
        {
            sipCpp->setZoomFactor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_setZoomFactor, doc_QWebEnginePage_setZoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_runJavaScript, "QWebEnginePage.runJavaScript(str)\n"
    "QWebEnginePage.runJavaScript(str, callable)");

extern "C" {static PyObject *meth_QWebEnginePage_runJavaScript(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_runJavaScript(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QString* a0;
        int a0State = 0;
        QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QString,&a0, &a0State))
        {
            sipCpp->runJavaScript(*a0);
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString* a0;
        int a0State = 0;
        PyObject * a1;
        QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1F", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
#line 187 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtWebEngineWidgets/qwebenginepage.sip"
        Py_BEGIN_ALLOW_THREADS
        
        sipCpp->runJavaScript(*a0, [a1](const QVariant &arg) {
            SIP_BLOCK_THREADS
            
            PyObject *res;
        
            res = sipCallMethod(NULL, a1, "N", new QVariant(arg), sipType_QVariant, NULL);
        
            if (!res)
                pyqt5_qtwebenginewidgets_err_print();
            else
                Py_DECREF(res);
        
            SIP_UNBLOCK_THREADS
        });
        
        Py_END_ALLOW_THREADS
#line 1632 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtWebEngineWidgets/sipQtWebEngineWidgetsQWebEnginePage.cpp"
            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_runJavaScript, doc_QWebEnginePage_runJavaScript);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_settings, "QWebEnginePage.settings() -> QWebEngineSettings");

extern "C" {static PyObject *meth_QWebEnginePage_settings(PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QWebEnginePage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QWebEnginePage, &sipCpp))
        {
            QWebEngineSettings*sipRes;

            sipRes = sipCpp->settings();

            return sipConvertFromType(sipRes,sipType_QWebEngineSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_settings, doc_QWebEnginePage_settings);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_createWindow, "QWebEnginePage.createWindow(QWebEnginePage.WebWindowType) -> QWebEnginePage");

extern "C" {static PyObject *meth_QWebEnginePage_createWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_createWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebEnginePage::WebWindowType a0;
        sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BE", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEnginePage_WebWindowType, &a0))
        {
            QWebEnginePage*sipRes;

            sipRes = sipCpp->sipProtectVirt_createWindow(sipSelfWasArg,a0);

            return sipConvertFromType(sipRes,sipType_QWebEnginePage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_createWindow, doc_QWebEnginePage_createWindow);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_chooseFiles, "QWebEnginePage.chooseFiles(QWebEnginePage.FileSelectionMode, list-of-str, list-of-str) -> list-of-str");

extern "C" {static PyObject *meth_QWebEnginePage_chooseFiles(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_chooseFiles(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebEnginePage::FileSelectionMode a0;
        const QStringList* a1;
        int a1State = 0;
        const QStringList* a2;
        int a2State = 0;
        sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BEJ1J1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEnginePage_FileSelectionMode, &a0, sipType_QStringList,&a1, &a1State, sipType_QStringList,&a2, &a2State))
        {
            QStringList*sipRes;

            sipRes = new QStringList(sipCpp->sipProtectVirt_chooseFiles(sipSelfWasArg,a0,*a1,*a2));
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(const_cast<QStringList *>(a2),sipType_QStringList,a2State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_chooseFiles, doc_QWebEnginePage_chooseFiles);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_javaScriptAlert, "QWebEnginePage.javaScriptAlert(QUrl, str)");

extern "C" {static PyObject *meth_QWebEnginePage_javaScriptAlert(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_javaScriptAlert(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QUrl* a0;
        const QString* a1;
        int a1State = 0;
        sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0, sipType_QString,&a1, &a1State))
        {
            sipCpp->sipProtectVirt_javaScriptAlert(sipSelfWasArg,*a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_javaScriptAlert, doc_QWebEnginePage_javaScriptAlert);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_javaScriptConfirm, "QWebEnginePage.javaScriptConfirm(QUrl, str) -> bool");

extern "C" {static PyObject *meth_QWebEnginePage_javaScriptConfirm(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_javaScriptConfirm(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QUrl* a0;
        const QString* a1;
        int a1State = 0;
        sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_javaScriptConfirm(sipSelfWasArg,*a0,*a1);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_javaScriptConfirm, doc_QWebEnginePage_javaScriptConfirm);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_javaScriptPrompt, "QWebEnginePage.javaScriptPrompt(QUrl, str, str, str) -> bool");

extern "C" {static PyObject *meth_QWebEnginePage_javaScriptPrompt(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_javaScriptPrompt(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QUrl* a0;
        const QString* a1;
        int a1State = 0;
        const QString* a2;
        int a2State = 0;
        QString* a3;
        int a3State = 0;
        sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9J1J1J0", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QUrl, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_javaScriptPrompt(sipSelfWasArg,*a0,*a1,*a2,a3);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QString,a3State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_javaScriptPrompt, doc_QWebEnginePage_javaScriptPrompt);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_javaScriptConsoleMessage, "QWebEnginePage.javaScriptConsoleMessage(QWebEnginePage.JavaScriptConsoleMessageLevel, str, int, str)");

extern "C" {static PyObject *meth_QWebEnginePage_javaScriptConsoleMessage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_javaScriptConsoleMessage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebEnginePage::JavaScriptConsoleMessageLevel a0;
        const QString* a1;
        int a1State = 0;
        int a2;
        const QString* a3;
        int a3State = 0;
        sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BEJ1iJ1", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEnginePage_JavaScriptConsoleMessageLevel, &a0, sipType_QString,&a1, &a1State, &a2, sipType_QString,&a3, &a3State))
        {
            sipCpp->sipProtectVirt_javaScriptConsoleMessage(sipSelfWasArg,a0,*a1,a2,*a3);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_javaScriptConsoleMessage, doc_QWebEnginePage_javaScriptConsoleMessage);

    return NULL;
}


PyDoc_STRVAR(doc_QWebEnginePage_certificateError, "QWebEnginePage.certificateError(QWebEngineCertificateError) -> bool");

extern "C" {static PyObject *meth_QWebEnginePage_certificateError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_QWebEnginePage_certificateError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QWebEngineCertificateError* a0;
        sipQWebEnginePage *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ9", &sipSelf, sipType_QWebEnginePage, &sipCpp, sipType_QWebEngineCertificateError, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->sipProtectVirt_certificateError(sipSelfWasArg,*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QWebEnginePage, sipName_certificateError, doc_QWebEnginePage_certificateError);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebEnginePage(void *, const sipTypeDef *);}
static void *cast_QWebEnginePage(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWebEnginePage)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QWebEnginePage *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebEnginePage(void *, int);}
static void release_QWebEnginePage(void *sipCppV,int)
{
    QWebEnginePage *sipCpp = reinterpret_cast<QWebEnginePage *>(sipCppV);

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();
}


extern "C" {static void dealloc_QWebEnginePage(sipSimpleWrapper *);}
static void dealloc_QWebEnginePage(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebEnginePage *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebEnginePage(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_type_QWebEnginePage(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QWebEnginePage(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipQWebEnginePage *sipCpp = 0;

    {
        QObject* a0 = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|JH", sipType_QObject, &a0, sipOwner))
        {
            sipCpp = new sipQWebEnginePage(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebEnginePage[] = {{162, 0, 1}};


static PyMethodDef methods_QWebEnginePage[] = {
    {SIP_MLNAME_CAST(sipName_action), meth_QWebEnginePage_action, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_action)},
    {SIP_MLNAME_CAST(sipName_certificateError), (PyCFunction)meth_QWebEnginePage_certificateError, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_certificateError)},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_QWebEnginePage_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_chooseFiles), (PyCFunction)meth_QWebEnginePage_chooseFiles, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_chooseFiles)},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_QWebEnginePage_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createStandardContextMenu), meth_QWebEnginePage_createStandardContextMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_createStandardContextMenu)},
    {SIP_MLNAME_CAST(sipName_createWindow), (PyCFunction)meth_QWebEnginePage_createWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_createWindow)},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_QWebEnginePage_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_QWebEnginePage_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QWebEnginePage_event, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_event)},
    {SIP_MLNAME_CAST(sipName_findText), (PyCFunction)meth_QWebEnginePage_findText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_findText)},
    {SIP_MLNAME_CAST(sipName_hasSelection), meth_QWebEnginePage_hasSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_hasSelection)},
    {SIP_MLNAME_CAST(sipName_history), meth_QWebEnginePage_history, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_history)},
    {SIP_MLNAME_CAST(sipName_iconUrl), meth_QWebEnginePage_iconUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_iconUrl)},
    {SIP_MLNAME_CAST(sipName_isSignalConnected), (PyCFunction)meth_QWebEnginePage_isSignalConnected, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_javaScriptAlert), (PyCFunction)meth_QWebEnginePage_javaScriptAlert, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_javaScriptAlert)},
    {SIP_MLNAME_CAST(sipName_javaScriptConfirm), (PyCFunction)meth_QWebEnginePage_javaScriptConfirm, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_javaScriptConfirm)},
    {SIP_MLNAME_CAST(sipName_javaScriptConsoleMessage), (PyCFunction)meth_QWebEnginePage_javaScriptConsoleMessage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_javaScriptConsoleMessage)},
    {SIP_MLNAME_CAST(sipName_javaScriptPrompt), (PyCFunction)meth_QWebEnginePage_javaScriptPrompt, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_javaScriptPrompt)},
    {SIP_MLNAME_CAST(sipName_load), meth_QWebEnginePage_load, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_load)},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_QWebEnginePage_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_requestedUrl), meth_QWebEnginePage_requestedUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_requestedUrl)},
    {SIP_MLNAME_CAST(sipName_runJavaScript), meth_QWebEnginePage_runJavaScript, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_runJavaScript)},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QWebEnginePage_selectedText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_selectedText)},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_QWebEnginePage_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_QWebEnginePage_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setContent), (PyCFunction)meth_QWebEnginePage_setContent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_setContent)},
    {SIP_MLNAME_CAST(sipName_setFeaturePermission), meth_QWebEnginePage_setFeaturePermission, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_setFeaturePermission)},
    {SIP_MLNAME_CAST(sipName_setHtml), (PyCFunction)meth_QWebEnginePage_setHtml, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_setHtml)},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QWebEnginePage_setUrl, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_setUrl)},
    {SIP_MLNAME_CAST(sipName_setView), meth_QWebEnginePage_setView, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_setView)},
    {SIP_MLNAME_CAST(sipName_setZoomFactor), meth_QWebEnginePage_setZoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_setZoomFactor)},
    {SIP_MLNAME_CAST(sipName_settings), meth_QWebEnginePage_settings, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_settings)},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_QWebEnginePage_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_title), meth_QWebEnginePage_title, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_title)},
    {SIP_MLNAME_CAST(sipName_toHtml), meth_QWebEnginePage_toHtml, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_toHtml)},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QWebEnginePage_toPlainText, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_toPlainText)},
    {SIP_MLNAME_CAST(sipName_triggerAction), (PyCFunction)meth_QWebEnginePage_triggerAction, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_QWebEnginePage_triggerAction)},
    {SIP_MLNAME_CAST(sipName_url), meth_QWebEnginePage_url, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_url)},
    {SIP_MLNAME_CAST(sipName_view), meth_QWebEnginePage_view, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_view)},
    {SIP_MLNAME_CAST(sipName_zoomFactor), meth_QWebEnginePage_zoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_QWebEnginePage_zoomFactor)}
};

static sipEnumMemberDef enummembers_QWebEnginePage[] = {
    {sipName_Back, static_cast<int>(QWebEnginePage::Back), 12},
    {sipName_Copy, static_cast<int>(QWebEnginePage::Copy), 12},
    {sipName_Cut, static_cast<int>(QWebEnginePage::Cut), 12},
    {sipName_ErrorMessageLevel, static_cast<int>(QWebEnginePage::ErrorMessageLevel), 10},
    {sipName_FileSelectOpen, static_cast<int>(QWebEnginePage::FileSelectOpen), 7},
    {sipName_FileSelectOpenMultiple, static_cast<int>(QWebEnginePage::FileSelectOpenMultiple), 7},
    {sipName_FindBackward, static_cast<int>(QWebEnginePage::FindBackward), 8},
    {sipName_FindCaseSensitively, static_cast<int>(QWebEnginePage::FindCaseSensitively), 8},
    {sipName_Forward, static_cast<int>(QWebEnginePage::Forward), 12},
    {sipName_Geolocation, static_cast<int>(QWebEnginePage::Geolocation), 6},
    {sipName_InfoMessageLevel, static_cast<int>(QWebEnginePage::InfoMessageLevel), 10},
    {sipName_MediaAudioCapture, static_cast<int>(QWebEnginePage::MediaAudioCapture), 6},
    {sipName_MediaAudioVideoCapture, static_cast<int>(QWebEnginePage::MediaAudioVideoCapture), 6},
    {sipName_MediaVideoCapture, static_cast<int>(QWebEnginePage::MediaVideoCapture), 6},
    {sipName_NoWebAction, static_cast<int>(QWebEnginePage::NoWebAction), 12},
    {sipName_Notifications, static_cast<int>(QWebEnginePage::Notifications), 6},
    {sipName_Paste, static_cast<int>(QWebEnginePage::Paste), 12},
    {sipName_PasteAndMatchStyle, static_cast<int>(QWebEnginePage::PasteAndMatchStyle), 12},
    {sipName_PermissionDeniedByUser, static_cast<int>(QWebEnginePage::PermissionDeniedByUser), 11},
    {sipName_PermissionGrantedByUser, static_cast<int>(QWebEnginePage::PermissionGrantedByUser), 11},
    {sipName_PermissionUnknown, static_cast<int>(QWebEnginePage::PermissionUnknown), 11},
    {sipName_Redo, static_cast<int>(QWebEnginePage::Redo), 12},
    {sipName_Reload, static_cast<int>(QWebEnginePage::Reload), 12},
    {sipName_ReloadAndBypassCache, static_cast<int>(QWebEnginePage::ReloadAndBypassCache), 12},
    {sipName_SelectAll, static_cast<int>(QWebEnginePage::SelectAll), 12},
    {sipName_Stop, static_cast<int>(QWebEnginePage::Stop), 12},
    {sipName_Undo, static_cast<int>(QWebEnginePage::Undo), 12},
    {sipName_WarningMessageLevel, static_cast<int>(QWebEnginePage::WarningMessageLevel), 10},
    {sipName_WebBrowserTab, static_cast<int>(QWebEnginePage::WebBrowserTab), 13},
    {sipName_WebBrowserWindow, static_cast<int>(QWebEnginePage::WebBrowserWindow), 13},
    {sipName_WebDialog, static_cast<int>(QWebEnginePage::WebDialog), 13},
};


/* Define this type's signals. */
static const pyqt5QtSignal signals_QWebEnginePage[] = {
    {"iconUrlChanged(QUrl)", "\1QWebEnginePage.iconUrlChanged[QUrl]", 0, 0},
    {"urlChanged(QUrl)", "\1QWebEnginePage.urlChanged[QUrl]", 0, 0},
    {"titleChanged(QString)", "\1QWebEnginePage.titleChanged[str]", 0, 0},
    {"proxyAuthenticationRequired(QUrl,QAuthenticator*,QString)", "\1QWebEnginePage.proxyAuthenticationRequired[QUrl, QAuthenticator, str]", 0, 0},
    {"authenticationRequired(QUrl,QAuthenticator*)", "\1QWebEnginePage.authenticationRequired[QUrl, QAuthenticator]", 0, 0},
    {"featurePermissionRequestCanceled(QUrl,QWebEnginePage::Feature)", "\1QWebEnginePage.featurePermissionRequestCanceled[QUrl, QWebEnginePage.Feature]", 0, 0},
    {"featurePermissionRequested(QUrl,QWebEnginePage::Feature)", "\1QWebEnginePage.featurePermissionRequested[QUrl, QWebEnginePage.Feature]", 0, 0},
    {"windowCloseRequested()", "\1QWebEnginePage.windowCloseRequested", 0, 0},
    {"geometryChangeRequested(QRect)", "\1QWebEnginePage.geometryChangeRequested[QRect]", 0, 0},
    {"selectionChanged()", "\1QWebEnginePage.selectionChanged", 0, 0},
    {"linkHovered(QString)", "\1QWebEnginePage.linkHovered[str]", 0, 0},
    {"loadFinished(bool)", "\1QWebEnginePage.loadFinished[bool]", 0, 0},
    {"loadProgress(int)", "\1QWebEnginePage.loadProgress[int]", 0, 0},
    {"loadStarted()", "\1QWebEnginePage.loadStarted", 0, 0},
    {0, 0, 0, 0}
};

PyDoc_STRVAR(doc_QWebEnginePage, "\1QWebEnginePage(QObject parent=None)");


pyqt5ClassTypeDef sipTypeDef_QtWebEngineWidgets_QWebEnginePage = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QWebEnginePage,
        {0}
    },
    {
        sipNameNr_QWebEnginePage,
        {0, 0, 1},
        41, methods_QWebEnginePage,
        31, enummembers_QWebEnginePage,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QWebEnginePage,
    -1,
    -1,
    supers_QWebEnginePage,
    0,
    init_type_QWebEnginePage,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebEnginePage,
    0,
    0,
    0,
    release_QWebEnginePage,
    cast_QWebEnginePage,
    0,
    0,
    0,
    0,
    0,
    0
},
    &QWebEnginePage::staticMetaObject,
    0,
    signals_QWebEnginePage,
    0
};
