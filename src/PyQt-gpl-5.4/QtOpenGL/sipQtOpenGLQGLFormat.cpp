/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.5 on Thu Feb 05 16:17:39 2015
 *
 * Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt5.
 * 
 * This file may be used under the terms of the GNU General Public License
 * version 3.0 as published by the Free Software Foundation and appearing in
 * the file LICENSE included in the packaging of this file.  Please review the
 * following information to ensure the GNU General Public License version 3.0
 * requirements will be met: http://www.gnu.org/copyleft/gpl.html.
 * 
 * If you do not wish to use this file under the terms of the GPL version 3.0
 * then you may purchase a commercial license.  For more information contact
 * info@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtOpenGL.h"

#line 73 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 29 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtOpenGL/sipQtOpenGLQGLFormat.cpp"

#line 32 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 33 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtOpenGL/sipQtOpenGLQGLFormat.cpp"
#line 73 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 36 "C:\\Users\\marcus\\Downloads\\PyQt-gpl-5.4\\PyQt-gpl-5.4\\QtOpenGL/sipQtOpenGLQGLFormat.cpp"


PyDoc_STRVAR(doc_QGLFormat_setDepthBufferSize, "QGLFormat.setDepthBufferSize(int)");

extern "C" {static PyObject *meth_QGLFormat_setDepthBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDepthBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setDepthBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setDepthBufferSize, doc_QGLFormat_setDepthBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_depthBufferSize, "QGLFormat.depthBufferSize() -> int");

extern "C" {static PyObject *meth_QGLFormat_depthBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_depthBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->depthBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_depthBufferSize, doc_QGLFormat_depthBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setAccumBufferSize, "QGLFormat.setAccumBufferSize(int)");

extern "C" {static PyObject *meth_QGLFormat_setAccumBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setAccumBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setAccumBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setAccumBufferSize, doc_QGLFormat_setAccumBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_accumBufferSize, "QGLFormat.accumBufferSize() -> int");

extern "C" {static PyObject *meth_QGLFormat_accumBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_accumBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->accumBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_accumBufferSize, doc_QGLFormat_accumBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setAlphaBufferSize, "QGLFormat.setAlphaBufferSize(int)");

extern "C" {static PyObject *meth_QGLFormat_setAlphaBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setAlphaBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setAlphaBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setAlphaBufferSize, doc_QGLFormat_setAlphaBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_alphaBufferSize, "QGLFormat.alphaBufferSize() -> int");

extern "C" {static PyObject *meth_QGLFormat_alphaBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_alphaBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->alphaBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_alphaBufferSize, doc_QGLFormat_alphaBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setStencilBufferSize, "QGLFormat.setStencilBufferSize(int)");

extern "C" {static PyObject *meth_QGLFormat_setStencilBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setStencilBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setStencilBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setStencilBufferSize, doc_QGLFormat_setStencilBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_stencilBufferSize, "QGLFormat.stencilBufferSize() -> int");

extern "C" {static PyObject *meth_QGLFormat_stencilBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_stencilBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->stencilBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_stencilBufferSize, doc_QGLFormat_stencilBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setSampleBuffers, "QGLFormat.setSampleBuffers(bool)");

extern "C" {static PyObject *meth_QGLFormat_setSampleBuffers(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setSampleBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setSampleBuffers(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setSampleBuffers, doc_QGLFormat_setSampleBuffers);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setSamples, "QGLFormat.setSamples(int)");

extern "C" {static PyObject *meth_QGLFormat_setSamples(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setSamples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setSamples(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setSamples, doc_QGLFormat_setSamples);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_samples, "QGLFormat.samples() -> int");

extern "C" {static PyObject *meth_QGLFormat_samples(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_samples(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->samples();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_samples, doc_QGLFormat_samples);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setDoubleBuffer, "QGLFormat.setDoubleBuffer(bool)");

extern "C" {static PyObject *meth_QGLFormat_setDoubleBuffer(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDoubleBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setDoubleBuffer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setDoubleBuffer, doc_QGLFormat_setDoubleBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setDepth, "QGLFormat.setDepth(bool)");

extern "C" {static PyObject *meth_QGLFormat_setDepth(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setDepth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setDepth, doc_QGLFormat_setDepth);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setRgba, "QGLFormat.setRgba(bool)");

extern "C" {static PyObject *meth_QGLFormat_setRgba(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setRgba(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setRgba(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setRgba, doc_QGLFormat_setRgba);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setAlpha, "QGLFormat.setAlpha(bool)");

extern "C" {static PyObject *meth_QGLFormat_setAlpha(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setAlpha(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setAlpha, doc_QGLFormat_setAlpha);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setAccum, "QGLFormat.setAccum(bool)");

extern "C" {static PyObject *meth_QGLFormat_setAccum(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setAccum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setAccum(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setAccum, doc_QGLFormat_setAccum);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setStencil, "QGLFormat.setStencil(bool)");

extern "C" {static PyObject *meth_QGLFormat_setStencil(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setStencil, doc_QGLFormat_setStencil);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setStereo, "QGLFormat.setStereo(bool)");

extern "C" {static PyObject *meth_QGLFormat_setStereo(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setStereo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setStereo(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setStereo, doc_QGLFormat_setStereo);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setDirectRendering, "QGLFormat.setDirectRendering(bool)");

extern "C" {static PyObject *meth_QGLFormat_setDirectRendering(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDirectRendering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setDirectRendering(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setDirectRendering, doc_QGLFormat_setDirectRendering);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setOverlay, "QGLFormat.setOverlay(bool)");

extern "C" {static PyObject *meth_QGLFormat_setOverlay(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setOverlay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setOverlay(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setOverlay, doc_QGLFormat_setOverlay);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_plane, "QGLFormat.plane() -> int");

extern "C" {static PyObject *meth_QGLFormat_plane(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_plane(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->plane();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_plane, doc_QGLFormat_plane);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setPlane, "QGLFormat.setPlane(int)");

extern "C" {static PyObject *meth_QGLFormat_setPlane(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setPlane(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setPlane(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setPlane, doc_QGLFormat_setPlane);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setOption, "QGLFormat.setOption(QGL.FormatOptions)");

extern "C" {static PyObject *meth_QGLFormat_setOption(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGL::FormatOptions* a0;
        int a0State = 0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGLFormat, &sipCpp, sipType_QGL_FormatOptions, &a0, &a0State))
        {
            sipCpp->setOption(*a0);
            sipReleaseType(a0,sipType_QGL_FormatOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setOption, doc_QGLFormat_setOption);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_testOption, "QGLFormat.testOption(QGL.FormatOptions) -> bool");

extern "C" {static PyObject *meth_QGLFormat_testOption(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_testOption(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGL::FormatOptions* a0;
        int a0State = 0;
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_QGLFormat, &sipCpp, sipType_QGL_FormatOptions, &a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->testOption(*a0);
            sipReleaseType(a0,sipType_QGL_FormatOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_testOption, doc_QGLFormat_testOption);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_defaultFormat, "QGLFormat.defaultFormat() -> QGLFormat");

extern "C" {static PyObject *meth_QGLFormat_defaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_defaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QGLFormat*sipRes;

            sipRes = new QGLFormat(QGLFormat::defaultFormat());

            return sipConvertFromNewType(sipRes,sipType_QGLFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_defaultFormat, doc_QGLFormat_defaultFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setDefaultFormat, "QGLFormat.setDefaultFormat(QGLFormat)");

extern "C" {static PyObject *meth_QGLFormat_setDefaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDefaultFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QGLFormat, &a0))
        {
            QGLFormat::setDefaultFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setDefaultFormat, doc_QGLFormat_setDefaultFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_defaultOverlayFormat, "QGLFormat.defaultOverlayFormat() -> QGLFormat");

extern "C" {static PyObject *meth_QGLFormat_defaultOverlayFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_defaultOverlayFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QGLFormat*sipRes;

            sipRes = new QGLFormat(QGLFormat::defaultOverlayFormat());

            return sipConvertFromNewType(sipRes,sipType_QGLFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_defaultOverlayFormat, doc_QGLFormat_defaultOverlayFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setDefaultOverlayFormat, "QGLFormat.setDefaultOverlayFormat(QGLFormat)");

extern "C" {static PyObject *meth_QGLFormat_setDefaultOverlayFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDefaultOverlayFormat(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9", sipType_QGLFormat, &a0))
        {
            QGLFormat::setDefaultOverlayFormat(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setDefaultOverlayFormat, doc_QGLFormat_setDefaultOverlayFormat);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_hasOpenGL, "QGLFormat.hasOpenGL() -> bool");

extern "C" {static PyObject *meth_QGLFormat_hasOpenGL(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_hasOpenGL(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QGLFormat::hasOpenGL();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_hasOpenGL, doc_QGLFormat_hasOpenGL);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_hasOpenGLOverlays, "QGLFormat.hasOpenGLOverlays() -> bool");

extern "C" {static PyObject *meth_QGLFormat_hasOpenGLOverlays(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_hasOpenGLOverlays(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            sipRes = QGLFormat::hasOpenGLOverlays();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_hasOpenGLOverlays, doc_QGLFormat_hasOpenGLOverlays);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_doubleBuffer, "QGLFormat.doubleBuffer() -> bool");

extern "C" {static PyObject *meth_QGLFormat_doubleBuffer(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_doubleBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->doubleBuffer();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_doubleBuffer, doc_QGLFormat_doubleBuffer);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_depth, "QGLFormat.depth() -> bool");

extern "C" {static PyObject *meth_QGLFormat_depth(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->depth();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_depth, doc_QGLFormat_depth);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_rgba, "QGLFormat.rgba() -> bool");

extern "C" {static PyObject *meth_QGLFormat_rgba(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_rgba(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->rgba();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_rgba, doc_QGLFormat_rgba);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_alpha, "QGLFormat.alpha() -> bool");

extern "C" {static PyObject *meth_QGLFormat_alpha(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_alpha(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->alpha();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_alpha, doc_QGLFormat_alpha);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_accum, "QGLFormat.accum() -> bool");

extern "C" {static PyObject *meth_QGLFormat_accum(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_accum(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->accum();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_accum, doc_QGLFormat_accum);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_stencil, "QGLFormat.stencil() -> bool");

extern "C" {static PyObject *meth_QGLFormat_stencil(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_stencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->stencil();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_stencil, doc_QGLFormat_stencil);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_stereo, "QGLFormat.stereo() -> bool");

extern "C" {static PyObject *meth_QGLFormat_stereo(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_stereo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->stereo();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_stereo, doc_QGLFormat_stereo);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_directRendering, "QGLFormat.directRendering() -> bool");

extern "C" {static PyObject *meth_QGLFormat_directRendering(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_directRendering(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->directRendering();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_directRendering, doc_QGLFormat_directRendering);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_hasOverlay, "QGLFormat.hasOverlay() -> bool");

extern "C" {static PyObject *meth_QGLFormat_hasOverlay(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_hasOverlay(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasOverlay();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_hasOverlay, doc_QGLFormat_hasOverlay);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_sampleBuffers, "QGLFormat.sampleBuffers() -> bool");

extern "C" {static PyObject *meth_QGLFormat_sampleBuffers(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_sampleBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->sampleBuffers();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_sampleBuffers, doc_QGLFormat_sampleBuffers);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setRedBufferSize, "QGLFormat.setRedBufferSize(int)");

extern "C" {static PyObject *meth_QGLFormat_setRedBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setRedBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setRedBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setRedBufferSize, doc_QGLFormat_setRedBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_redBufferSize, "QGLFormat.redBufferSize() -> int");

extern "C" {static PyObject *meth_QGLFormat_redBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_redBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->redBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_redBufferSize, doc_QGLFormat_redBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setGreenBufferSize, "QGLFormat.setGreenBufferSize(int)");

extern "C" {static PyObject *meth_QGLFormat_setGreenBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setGreenBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setGreenBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setGreenBufferSize, doc_QGLFormat_setGreenBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_greenBufferSize, "QGLFormat.greenBufferSize() -> int");

extern "C" {static PyObject *meth_QGLFormat_greenBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_greenBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->greenBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_greenBufferSize, doc_QGLFormat_greenBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setBlueBufferSize, "QGLFormat.setBlueBufferSize(int)");

extern "C" {static PyObject *meth_QGLFormat_setBlueBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setBlueBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setBlueBufferSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setBlueBufferSize, doc_QGLFormat_setBlueBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_blueBufferSize, "QGLFormat.blueBufferSize() -> int");

extern "C" {static PyObject *meth_QGLFormat_blueBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_blueBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->blueBufferSize();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_blueBufferSize, doc_QGLFormat_blueBufferSize);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setSwapInterval, "QGLFormat.setSwapInterval(int)");

extern "C" {static PyObject *meth_QGLFormat_setSwapInterval(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setSwapInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_QGLFormat, &sipCpp, &a0))
        {
            sipCpp->setSwapInterval(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setSwapInterval, doc_QGLFormat_setSwapInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_swapInterval, "QGLFormat.swapInterval() -> int");

extern "C" {static PyObject *meth_QGLFormat_swapInterval(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_swapInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->swapInterval();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_swapInterval, doc_QGLFormat_swapInterval);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_openGLVersionFlags, "QGLFormat.openGLVersionFlags() -> QGLFormat.OpenGLVersionFlags");

extern "C" {static PyObject *meth_QGLFormat_openGLVersionFlags(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_openGLVersionFlags(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            QGLFormat::OpenGLVersionFlags*sipRes;

            sipRes = new QGLFormat::OpenGLVersionFlags(QGLFormat::openGLVersionFlags());

            return sipConvertFromNewType(sipRes,sipType_QGLFormat_OpenGLVersionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_openGLVersionFlags, doc_QGLFormat_openGLVersionFlags);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setVersion, "QGLFormat.setVersion(int, int)");

extern "C" {static PyObject *meth_QGLFormat_setVersion(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_QGLFormat, &sipCpp, &a0, &a1))
        {
            sipCpp->setVersion(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setVersion, doc_QGLFormat_setVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_majorVersion, "QGLFormat.majorVersion() -> int");

extern "C" {static PyObject *meth_QGLFormat_majorVersion(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_majorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->majorVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_majorVersion, doc_QGLFormat_majorVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_minorVersion, "QGLFormat.minorVersion() -> int");

extern "C" {static PyObject *meth_QGLFormat_minorVersion(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_minorVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->minorVersion();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_minorVersion, doc_QGLFormat_minorVersion);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_setProfile, "QGLFormat.setProfile(QGLFormat.OpenGLContextProfile)");

extern "C" {static PyObject *meth_QGLFormat_setProfile(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setProfile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QGLFormat::OpenGLContextProfile a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_QGLFormat, &sipCpp, sipType_QGLFormat_OpenGLContextProfile, &a0))
        {
            sipCpp->setProfile(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_setProfile, doc_QGLFormat_setProfile);

    return NULL;
}


PyDoc_STRVAR(doc_QGLFormat_profile, "QGLFormat.profile() -> QGLFormat.OpenGLContextProfile");

extern "C" {static PyObject *meth_QGLFormat_profile(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_profile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QGLFormat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_QGLFormat, &sipCpp))
        {
            QGLFormat::OpenGLContextProfile sipRes;

            sipRes = sipCpp->profile();

            return sipConvertFromEnum(sipRes,sipType_QGLFormat_OpenGLContextProfile);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_QGLFormat, sipName_profile, doc_QGLFormat_profile);

    return NULL;
}


extern "C" {static PyObject *slot_QGLFormat___eq__(PyObject *,PyObject *);}
static PyObject *slot_QGLFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QGLFormat *sipCpp = reinterpret_cast<QGLFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLFormat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QGLFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGLFormat, &a0))
        {
            bool sipRes;

            sipRes = operator==((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtOpenGL,eq_slot,sipType_QGLFormat,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QGLFormat___ne__(PyObject *,PyObject *);}
static PyObject *slot_QGLFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QGLFormat *sipCpp = reinterpret_cast<QGLFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLFormat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const QGLFormat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_QGLFormat, &a0))
        {
            bool sipRes;

            sipRes = operator!=((*sipCpp), *a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_QtOpenGL,ne_slot,sipType_QGLFormat,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGLFormat(void *, const sipTypeDef *);}
static void *cast_QGLFormat(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QGLFormat)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGLFormat(void *, int);}
static void release_QGLFormat(void *sipCppV,int)
{
    delete reinterpret_cast<QGLFormat *>(sipCppV);
}


extern "C" {static void assign_QGLFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QGLFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QGLFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QGLFormat *>(sipSrc);
}


extern "C" {static void *array_QGLFormat(SIP_SSIZE_T);}
static void *array_QGLFormat(SIP_SSIZE_T sipNrElem)
{
    return new QGLFormat[sipNrElem];
}


extern "C" {static void *copy_QGLFormat(const void *, SIP_SSIZE_T);}
static void *copy_QGLFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QGLFormat(reinterpret_cast<const QGLFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QGLFormat(sipSimpleWrapper *);}
static void dealloc_QGLFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QGLFormat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_QGLFormat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_QGLFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    QGLFormat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new QGLFormat();

            return sipCpp;
        }
    }

    {
        QGL::FormatOptions* a0;
        int a0State = 0;
        int a1 = 0;

        static const char *sipKwdList[] = {
            NULL,
            sipName_plane,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|i", sipType_QGL_FormatOptions, &a0, &a0State, &a1))
        {
            sipCpp = new QGLFormat(*a0,a1);
            sipReleaseType(a0,sipType_QGL_FormatOptions,a0State);

            return sipCpp;
        }
    }

    {
        const QGLFormat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_QGLFormat, &a0))
        {
            sipCpp = new QGLFormat(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QGLFormat[] = {
    {(void *)slot_QGLFormat___eq__, eq_slot},
    {(void *)slot_QGLFormat___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QGLFormat[] = {
    {SIP_MLNAME_CAST(sipName_accum), meth_QGLFormat_accum, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_accum)},
    {SIP_MLNAME_CAST(sipName_accumBufferSize), meth_QGLFormat_accumBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_accumBufferSize)},
    {SIP_MLNAME_CAST(sipName_alpha), meth_QGLFormat_alpha, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_alpha)},
    {SIP_MLNAME_CAST(sipName_alphaBufferSize), meth_QGLFormat_alphaBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_alphaBufferSize)},
    {SIP_MLNAME_CAST(sipName_blueBufferSize), meth_QGLFormat_blueBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_blueBufferSize)},
    {SIP_MLNAME_CAST(sipName_defaultFormat), meth_QGLFormat_defaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_defaultFormat)},
    {SIP_MLNAME_CAST(sipName_defaultOverlayFormat), meth_QGLFormat_defaultOverlayFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_defaultOverlayFormat)},
    {SIP_MLNAME_CAST(sipName_depth), meth_QGLFormat_depth, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_depth)},
    {SIP_MLNAME_CAST(sipName_depthBufferSize), meth_QGLFormat_depthBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_depthBufferSize)},
    {SIP_MLNAME_CAST(sipName_directRendering), meth_QGLFormat_directRendering, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_directRendering)},
    {SIP_MLNAME_CAST(sipName_doubleBuffer), meth_QGLFormat_doubleBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_doubleBuffer)},
    {SIP_MLNAME_CAST(sipName_greenBufferSize), meth_QGLFormat_greenBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_greenBufferSize)},
    {SIP_MLNAME_CAST(sipName_hasOpenGL), meth_QGLFormat_hasOpenGL, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_hasOpenGL)},
    {SIP_MLNAME_CAST(sipName_hasOpenGLOverlays), meth_QGLFormat_hasOpenGLOverlays, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_hasOpenGLOverlays)},
    {SIP_MLNAME_CAST(sipName_hasOverlay), meth_QGLFormat_hasOverlay, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_hasOverlay)},
    {SIP_MLNAME_CAST(sipName_majorVersion), meth_QGLFormat_majorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_majorVersion)},
    {SIP_MLNAME_CAST(sipName_minorVersion), meth_QGLFormat_minorVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_minorVersion)},
    {SIP_MLNAME_CAST(sipName_openGLVersionFlags), meth_QGLFormat_openGLVersionFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_openGLVersionFlags)},
    {SIP_MLNAME_CAST(sipName_plane), meth_QGLFormat_plane, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_plane)},
    {SIP_MLNAME_CAST(sipName_profile), meth_QGLFormat_profile, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_profile)},
    {SIP_MLNAME_CAST(sipName_redBufferSize), meth_QGLFormat_redBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_redBufferSize)},
    {SIP_MLNAME_CAST(sipName_rgba), meth_QGLFormat_rgba, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_rgba)},
    {SIP_MLNAME_CAST(sipName_sampleBuffers), meth_QGLFormat_sampleBuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_sampleBuffers)},
    {SIP_MLNAME_CAST(sipName_samples), meth_QGLFormat_samples, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_samples)},
    {SIP_MLNAME_CAST(sipName_setAccum), meth_QGLFormat_setAccum, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setAccum)},
    {SIP_MLNAME_CAST(sipName_setAccumBufferSize), meth_QGLFormat_setAccumBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setAccumBufferSize)},
    {SIP_MLNAME_CAST(sipName_setAlpha), meth_QGLFormat_setAlpha, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setAlpha)},
    {SIP_MLNAME_CAST(sipName_setAlphaBufferSize), meth_QGLFormat_setAlphaBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setAlphaBufferSize)},
    {SIP_MLNAME_CAST(sipName_setBlueBufferSize), meth_QGLFormat_setBlueBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setBlueBufferSize)},
    {SIP_MLNAME_CAST(sipName_setDefaultFormat), meth_QGLFormat_setDefaultFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setDefaultFormat)},
    {SIP_MLNAME_CAST(sipName_setDefaultOverlayFormat), meth_QGLFormat_setDefaultOverlayFormat, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setDefaultOverlayFormat)},
    {SIP_MLNAME_CAST(sipName_setDepth), meth_QGLFormat_setDepth, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setDepth)},
    {SIP_MLNAME_CAST(sipName_setDepthBufferSize), meth_QGLFormat_setDepthBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setDepthBufferSize)},
    {SIP_MLNAME_CAST(sipName_setDirectRendering), meth_QGLFormat_setDirectRendering, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setDirectRendering)},
    {SIP_MLNAME_CAST(sipName_setDoubleBuffer), meth_QGLFormat_setDoubleBuffer, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setDoubleBuffer)},
    {SIP_MLNAME_CAST(sipName_setGreenBufferSize), meth_QGLFormat_setGreenBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setGreenBufferSize)},
    {SIP_MLNAME_CAST(sipName_setOption), meth_QGLFormat_setOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setOption)},
    {SIP_MLNAME_CAST(sipName_setOverlay), meth_QGLFormat_setOverlay, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setOverlay)},
    {SIP_MLNAME_CAST(sipName_setPlane), meth_QGLFormat_setPlane, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setPlane)},
    {SIP_MLNAME_CAST(sipName_setProfile), meth_QGLFormat_setProfile, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setProfile)},
    {SIP_MLNAME_CAST(sipName_setRedBufferSize), meth_QGLFormat_setRedBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setRedBufferSize)},
    {SIP_MLNAME_CAST(sipName_setRgba), meth_QGLFormat_setRgba, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setRgba)},
    {SIP_MLNAME_CAST(sipName_setSampleBuffers), meth_QGLFormat_setSampleBuffers, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setSampleBuffers)},
    {SIP_MLNAME_CAST(sipName_setSamples), meth_QGLFormat_setSamples, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setSamples)},
    {SIP_MLNAME_CAST(sipName_setStencil), meth_QGLFormat_setStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setStencil)},
    {SIP_MLNAME_CAST(sipName_setStencilBufferSize), meth_QGLFormat_setStencilBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setStencilBufferSize)},
    {SIP_MLNAME_CAST(sipName_setStereo), meth_QGLFormat_setStereo, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setStereo)},
    {SIP_MLNAME_CAST(sipName_setSwapInterval), meth_QGLFormat_setSwapInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setSwapInterval)},
    {SIP_MLNAME_CAST(sipName_setVersion), meth_QGLFormat_setVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_setVersion)},
    {SIP_MLNAME_CAST(sipName_stencil), meth_QGLFormat_stencil, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_stencil)},
    {SIP_MLNAME_CAST(sipName_stencilBufferSize), meth_QGLFormat_stencilBufferSize, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_stencilBufferSize)},
    {SIP_MLNAME_CAST(sipName_stereo), meth_QGLFormat_stereo, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_stereo)},
    {SIP_MLNAME_CAST(sipName_swapInterval), meth_QGLFormat_swapInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_swapInterval)},
    {SIP_MLNAME_CAST(sipName_testOption), meth_QGLFormat_testOption, METH_VARARGS, SIP_MLDOC_CAST(doc_QGLFormat_testOption)}
};

static sipEnumMemberDef enummembers_QGLFormat[] = {
    {sipName_CompatibilityProfile, static_cast<int>(QGLFormat::CompatibilityProfile), 7},
    {sipName_CoreProfile, static_cast<int>(QGLFormat::CoreProfile), 7},
    {sipName_NoProfile, static_cast<int>(QGLFormat::NoProfile), 7},
    {sipName_OpenGL_ES_CommonLite_Version_1_0, static_cast<int>(QGLFormat::OpenGL_ES_CommonLite_Version_1_0), 8},
    {sipName_OpenGL_ES_CommonLite_Version_1_1, static_cast<int>(QGLFormat::OpenGL_ES_CommonLite_Version_1_1), 8},
    {sipName_OpenGL_ES_Common_Version_1_0, static_cast<int>(QGLFormat::OpenGL_ES_Common_Version_1_0), 8},
    {sipName_OpenGL_ES_Common_Version_1_1, static_cast<int>(QGLFormat::OpenGL_ES_Common_Version_1_1), 8},
    {sipName_OpenGL_ES_Version_2_0, static_cast<int>(QGLFormat::OpenGL_ES_Version_2_0), 8},
    {sipName_OpenGL_Version_1_1, static_cast<int>(QGLFormat::OpenGL_Version_1_1), 8},
    {sipName_OpenGL_Version_1_2, static_cast<int>(QGLFormat::OpenGL_Version_1_2), 8},
    {sipName_OpenGL_Version_1_3, static_cast<int>(QGLFormat::OpenGL_Version_1_3), 8},
    {sipName_OpenGL_Version_1_4, static_cast<int>(QGLFormat::OpenGL_Version_1_4), 8},
    {sipName_OpenGL_Version_1_5, static_cast<int>(QGLFormat::OpenGL_Version_1_5), 8},
    {sipName_OpenGL_Version_2_0, static_cast<int>(QGLFormat::OpenGL_Version_2_0), 8},
    {sipName_OpenGL_Version_2_1, static_cast<int>(QGLFormat::OpenGL_Version_2_1), 8},
    {sipName_OpenGL_Version_3_0, static_cast<int>(QGLFormat::OpenGL_Version_3_0), 8},
    {sipName_OpenGL_Version_3_1, static_cast<int>(QGLFormat::OpenGL_Version_3_1), 8},
    {sipName_OpenGL_Version_3_2, static_cast<int>(QGLFormat::OpenGL_Version_3_2), 8},
    {sipName_OpenGL_Version_3_3, static_cast<int>(QGLFormat::OpenGL_Version_3_3), 8},
    {sipName_OpenGL_Version_4_0, static_cast<int>(QGLFormat::OpenGL_Version_4_0), 8},
    {sipName_OpenGL_Version_4_1, static_cast<int>(QGLFormat::OpenGL_Version_4_1), 8},
    {sipName_OpenGL_Version_4_2, static_cast<int>(QGLFormat::OpenGL_Version_4_2), 8},
    {sipName_OpenGL_Version_4_3, static_cast<int>(QGLFormat::OpenGL_Version_4_3), 8},
    {sipName_OpenGL_Version_None, static_cast<int>(QGLFormat::OpenGL_Version_None), 8},
};

PyDoc_STRVAR(doc_QGLFormat, "\1QGLFormat()\n"
    "QGLFormat(QGL.FormatOptions, int plane=0)\n"
    "QGLFormat(QGLFormat)");


pyqt5ClassTypeDef sipTypeDef_QtOpenGL_QGLFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SUPER_INIT|SIP_TYPE_CLASS,
        sipNameNr_QGLFormat,
        {0}
    },
    {
        sipNameNr_QGLFormat,
        {0, 0, 1},
        54, methods_QGLFormat,
        24, enummembers_QGLFormat,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_QGLFormat,
    sipNameNr_PyQt5_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QGLFormat,
    init_type_QGLFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGLFormat,
    assign_QGLFormat,
    array_QGLFormat,
    copy_QGLFormat,
    release_QGLFormat,
    cast_QGLFormat,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0,
    0
};
