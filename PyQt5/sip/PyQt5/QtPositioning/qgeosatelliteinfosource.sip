// qgeosatelliteinfosource.sip generated by MetaSIP on Thu Dec 25 10:18:50 2014
//
// This file is part of the QtPositioning Python extension module.
//
// Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_5_2_0 -)

class QGeoSatelliteInfoSource : QObject
{
%TypeHeaderCode
#include <qgeosatelliteinfosource.h>
%End

public:
    enum Error
    {
        AccessError,
        ClosedError,
        NoError,
        UnknownSourceError,
    };

    explicit QGeoSatelliteInfoSource(QObject *parent /TransferThis/);
    virtual ~QGeoSatelliteInfoSource();
    static QGeoSatelliteInfoSource *createDefaultSource(QObject *parent /TransferThis/) /Factory/;
    static QGeoSatelliteInfoSource *createSource(const QString &sourceName, QObject *parent /TransferThis/) /Factory/;
    static QStringList availableSources();
    QString sourceName() const;
    virtual void setUpdateInterval(int msec);
    int updateInterval() const;
    virtual int minimumUpdateInterval() const = 0;
    virtual QGeoSatelliteInfoSource::Error error() const = 0;

public slots:
    virtual void startUpdates() = 0;
    virtual void stopUpdates() = 0;
    virtual void requestUpdate(int timeout = 0) = 0;

signals:
    void satellitesInViewUpdated(const QList<QGeoSatelliteInfo> &satellites);
    void satellitesInUseUpdated(const QList<QGeoSatelliteInfo> &satellites);
    void requestTimeout();
    void error(QGeoSatelliteInfoSource::Error);

private:
    QGeoSatelliteInfoSource(const QGeoSatelliteInfoSource &);
};

%End
