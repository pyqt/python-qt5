// qwebframe.sip generated by MetaSIP on Thu Dec 25 10:18:50 2014
//
// This file is part of the QtWebKitWidgets Python extension module.
//
// Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qwebframe.h>
%End

class QWebHitTestResult
{
%TypeHeaderCode
#include <qwebframe.h>
%End

public:
    QWebHitTestResult();
    QWebHitTestResult(const QWebHitTestResult &other);
    ~QWebHitTestResult();
    bool isNull() const;
    QPoint pos() const;
    QString title() const;
    QString linkText() const;
    QUrl linkUrl() const;
    QUrl linkTitle() const;
    QWebFrame *linkTargetFrame() const;
    QString alternateText() const;
    QUrl imageUrl() const;
    QPixmap pixmap() const;
    bool isContentEditable() const;
    bool isContentSelected() const;
    QWebFrame *frame() const;
    QRect boundingRect() const;
    QWebElement enclosingBlockElement() const;
    QWebElement linkElement() const;
    QWebElement element() const;
%If (Qt_5_2_0 -)
    QUrl mediaUrl() const;
%End
};

class QWebFrame : QObject /NoDefaultCtors/
{
%TypeHeaderCode
#include <qwebframe.h>
%End

    virtual ~QWebFrame();

public:
    QWebPage *page() const;
    void load(const QUrl &url);
    void load(const QNetworkRequest &request, QNetworkAccessManager::Operation operation = QNetworkAccessManager::GetOperation, const QByteArray &body = QByteArray());
    void setHtml(const QString &html, const QUrl &baseUrl = QUrl());
    void setContent(const QByteArray &data, const QString &mimeType /DocValue="''"/ = QString(), const QUrl &baseUrl = QUrl());

    enum ValueOwnership
    {
        QtOwnership,
        ScriptOwnership,
        AutoOwnership,
    };

    void addToJavaScriptWindowObject(const QString &name, QObject *object, QWebFrame::ValueOwnership ownership = QWebFrame::QtOwnership);
    QString toHtml() const;
    QString toPlainText() const;
    QString title() const;
    void setUrl(const QUrl &url);
    QUrl url() const;
    QIcon icon() const;
    QString frameName() const;
    QWebFrame *parentFrame() const;
    QList<QWebFrame*> childFrames() const;
    Qt::ScrollBarPolicy scrollBarPolicy(Qt::Orientation orientation) const;
    void setScrollBarPolicy(Qt::Orientation orientation, Qt::ScrollBarPolicy policy);
    void setScrollBarValue(Qt::Orientation orientation, int value);
    int scrollBarValue(Qt::Orientation orientation) const;
    int scrollBarMinimum(Qt::Orientation orientation) const;
    int scrollBarMaximum(Qt::Orientation orientation) const;
    QPoint pos() const;
    QRect geometry() const;
    QSize contentsSize() const;
    QWebHitTestResult hitTestContent(const QPoint &pos) const;
    virtual bool event(QEvent *);

public slots:
    QVariant evaluateJavaScript(const QString &scriptSource);
%If (PyQt_Printer)
    void print(QPrinter *printer) const /PyName=print_/;
%End
%If (Py_v3)
%If (PyQt_Printer)
    void print(QPrinter *printer) const;
%End
%End

signals:
    void javaScriptWindowObjectCleared();
    void titleChanged(const QString &title);
    void urlChanged(const QUrl &url);
    void initialLayoutCompleted();
    void iconChanged();

public:
    QMultiMap<QString, QString> metaData() const;
    void scroll(int, int);
    QPoint scrollPosition() const;
    void setScrollPosition(const QPoint &pos);
    qreal zoomFactor() const;
    void setZoomFactor(qreal factor);
    QWebSecurityOrigin securityOrigin() const;
    QUrl requestedUrl() const;
    QUrl baseUrl() const;
    QRect scrollBarGeometry(Qt::Orientation orientation) const;

    enum RenderLayer
    {
        ContentsLayer,
        ScrollBarLayer,
        PanIconLayer,
        AllLayers,
    };

    typedef QFlags<QWebFrame::RenderLayer> RenderLayers;
    void render(QPainter *, const QRegion &clip = QRegion());
    void render(QPainter *, QFlags<QWebFrame::RenderLayer> layer, const QRegion &clip = QRegion());
    bool hasFocus() const;
    void setFocus();
    QWebElement documentElement() const;
    QWebElementCollection findAllElements(const QString &selectorQuery) const;
    QWebElement findFirstElement(const QString &selectorQuery) const;

signals:
    void contentsSizeChanged(const QSize &size);
    void loadStarted();
    void loadFinished(bool ok);
    void pageChanged();

public:
    void scrollToAnchor(const QString &anchor);
};

QFlags<QWebFrame::RenderLayer> operator|(QWebFrame::RenderLayer f1, QFlags<QWebFrame::RenderLayer> f2);
