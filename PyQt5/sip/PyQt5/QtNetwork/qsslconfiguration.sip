// qsslconfiguration.sip generated by MetaSIP on Thu Dec 25 10:18:49 2014
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (PyQt_SSL)

class QSslConfiguration
{
%TypeHeaderCode
#include <qsslconfiguration.h>
%End

public:
    QSslConfiguration();
    QSslConfiguration(const QSslConfiguration &other);
    ~QSslConfiguration();
    bool isNull() const;
    QSsl::SslProtocol protocol() const;
    void setProtocol(QSsl::SslProtocol protocol);
    QSslSocket::PeerVerifyMode peerVerifyMode() const;
    void setPeerVerifyMode(QSslSocket::PeerVerifyMode mode);
    int peerVerifyDepth() const;
    void setPeerVerifyDepth(int depth);
    QSslCertificate localCertificate() const;
    void setLocalCertificate(const QSslCertificate &certificate);
    QSslCertificate peerCertificate() const;
    QList<QSslCertificate> peerCertificateChain() const;
    QSslCipher sessionCipher() const;
    QSslKey privateKey() const;
    void setPrivateKey(const QSslKey &key);
    QList<QSslCipher> ciphers() const;
    void setCiphers(const QList<QSslCipher> &ciphers);
    QList<QSslCertificate> caCertificates() const;
    void setCaCertificates(const QList<QSslCertificate> &certificates);
    static QSslConfiguration defaultConfiguration();
    static void setDefaultConfiguration(const QSslConfiguration &configuration);
    bool operator==(const QSslConfiguration &other) const;
    bool operator!=(const QSslConfiguration &other) const;
    void setSslOption(QSsl::SslOption option, bool on);
    bool testSslOption(QSsl::SslOption option) const;
    void swap(QSslConfiguration &other);
%If (Qt_5_1_0 -)
    QList<QSslCertificate> localCertificateChain() const;
%End
%If (Qt_5_1_0 -)
    void setLocalCertificateChain(const QList<QSslCertificate> &localChain);
%End
%If (Qt_5_2_0 -)
    QByteArray sessionTicket() const;
%End
%If (Qt_5_2_0 -)
    void setSessionTicket(const QByteArray &sessionTicket);
%End
%If (Qt_5_2_0 -)
    int sessionTicketLifeTimeHint() const;
%End
%If (Qt_5_3_0 -)

    enum NextProtocolNegotiationStatus
    {
        NextProtocolNegotiationNone,
        NextProtocolNegotiationNegotiated,
        NextProtocolNegotiationUnsupported,
    };

%End
%If (Qt_5_3_0 -)
    void setAllowedNextProtocols(QList<QByteArray> protocols);
%End
%If (Qt_5_3_0 -)
    QList<QByteArray> allowedNextProtocols() const;
%End
%If (Qt_5_3_0 -)
    QByteArray nextNegotiatedProtocol() const;
%End
%If (Qt_5_3_0 -)
    QSslConfiguration::NextProtocolNegotiationStatus nextProtocolNegotiationStatus() const;
%End
%If (Qt_5_3_0 -)
    static char * const NextProtocolSpdy3_0 /Encoding="None",NoSetter/ {
%GetCode
        sipPy = SIPBytes_FromString(QSslConfiguration::NextProtocolSpdy3_0);
%End

    };
%End
%If (Qt_5_3_0 -)
    static char * const NextProtocolHttp1_1 /Encoding="None",NoSetter/ {
%GetCode
        sipPy = SIPBytes_FromString(QSslConfiguration::NextProtocolHttp1_1);
%End

    };
%End
%If (Qt_5_4_0 -)
    QSsl::SslProtocol sessionProtocol() const;
%End
};

%End
