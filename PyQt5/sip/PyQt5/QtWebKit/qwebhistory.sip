// qwebhistory.sip generated by MetaSIP on Thu Dec 25 10:18:49 2014
//
// This file is part of the QtWebKit Python extension module.
//
// Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qwebhistory.h>
%End

class QWebHistoryItem
{
%TypeHeaderCode
#include <qwebhistory.h>
%End

public:
    QWebHistoryItem(const QWebHistoryItem &other);
    ~QWebHistoryItem();
    QUrl originalUrl() const;
    QUrl url() const;
    QString title() const;
    QDateTime lastVisited() const;
    QIcon icon() const;
    QVariant userData() const;
    void setUserData(const QVariant &userData);
    bool isValid() const;
};

class QWebHistory
{
%TypeHeaderCode
#include <qwebhistory.h>
%End

public:
    void clear();
    QList<QWebHistoryItem> items() const;
    QList<QWebHistoryItem> backItems(int maxItems) const;
    QList<QWebHistoryItem> forwardItems(int maxItems) const;
    bool canGoBack() const;
    bool canGoForward() const;
    void back();
    void forward();
    void goToItem(const QWebHistoryItem &item);
    QWebHistoryItem backItem() const;
    QWebHistoryItem currentItem() const;
    QWebHistoryItem forwardItem() const;
    QWebHistoryItem itemAt(int i) const;
    int count() const /__len__/;

private:
    QWebHistory();
    QWebHistory(const QWebHistory &);
    ~QWebHistory();

public:
    int currentItemIndex() const;
    int maximumItemCount() const;
    void setMaximumItemCount(int count);
};

QDataStream &operator<<(QDataStream &, const QWebHistory & /Constrained/) /ReleaseGIL/;
QDataStream &operator>>(QDataStream &, QWebHistory & /Constrained/) /ReleaseGIL/;
